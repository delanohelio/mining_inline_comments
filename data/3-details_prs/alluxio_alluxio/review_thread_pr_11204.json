{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMDk0MTI0", "number": 11204, "reviewThreads": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzo1MDozMlrOD313EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxNDozN1rOD6XTyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODgwNzIwOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/test/java/alluxio/client/metrics/MetricsHeartbeatContextTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzo1MDozMlrOGOVAxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDozMTowNVrOGOVxDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3NzUxMA==", "bodyText": "is this change related to this PR?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r417677510", "createdAt": "2020-04-29T23:50:32Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/test/java/alluxio/client/metrics/MetricsHeartbeatContextTest.java", "diffHunk": "@@ -41,8 +41,8 @@\n \n   @Test\n   public void testExecutorInitialized() {\n-\n     InstancedConfiguration conf = ConfigurationTestUtils.defaults();\n+    conf.set(PropertyKey.MASTER_HOSTNAME, \"localhost\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b7d52bc3f226f8e2c7ffb0e65b2df90f496343e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4OTg3MA==", "bodyText": "This test was failing for me locally without that change...I can try reverting it", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r417689870", "createdAt": "2020-04-30T00:31:05Z", "author": {"login": "ZacBlanco"}, "path": "core/client/fs/src/test/java/alluxio/client/metrics/MetricsHeartbeatContextTest.java", "diffHunk": "@@ -41,8 +41,8 @@\n \n   @Test\n   public void testExecutorInitialized() {\n-\n     InstancedConfiguration conf = ConfigurationTestUtils.defaults();\n+    conf.set(PropertyKey.MASTER_HOSTNAME, \"localhost\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3NzUxMA=="}, "originalCommit": {"oid": "6b7d52bc3f226f8e2c7ffb0e65b2df90f496343e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODgxMDQ1OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/meta/LockingScheme.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzo1MTo1OFrOGOVCtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzo1MTo1OFrOGOVCtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3ODAwNw==", "bodyText": "finish these params", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r417678007", "createdAt": "2020-04-29T23:51:58Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/meta/LockingScheme.java", "diffHunk": "@@ -38,6 +41,26 @@ public LockingScheme(AlluxioURI path, LockPattern desiredLockPattern, boolean sh\n     mShouldSync = shouldSync;\n   }\n \n+  /**\n+   * Create a new {@link LockingScheme}.\n+   *\n+   * @param path a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b7d52bc3f226f8e2c7ffb0e65b2df90f496343e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODgzNTQxOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/resource/LockResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDowNDoyOVrOGOVSDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDozMzoxOFrOGOVzsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MTkzNQ==", "bodyText": "Should this be a parameter? Also, do we want to loop indefinitely, or throw some sort of exception when it was looping for too long? I'd imagine throwing an exception would prevent possible deadlocks or long delays, but failures would be less-user friendly. What do you think?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r417681935", "createdAt": "2020-04-30T00:04:29Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/resource/LockResource.java", "diffHunk": "@@ -35,24 +39,39 @@\n    * @param lock the lock to acquire\n    */\n   public LockResource(Lock lock) {\n-    this(lock, true);\n+    this(lock, true, false);\n   }\n \n   /**\n    * Creates a new instance of {@link LockResource} using the given lock.\n    *\n+   * This method may use the {@link Lock#tryLock()} method to gain ownership of the locks. The\n+   * reason one might want to use this is to avoid the fairness heuristics within the\n+   * {@link java.util.concurrent.locks.ReentrantReadWriteLock}'s NonFairSync which may block reader\n+   * threads if a writer if the first in the queue.\n+   *\n    * @param lock the lock to acquire\n    * @param acquireLock whether to lock the lock\n+   * @param useTryLock whether or not use to {@link Lock#tryLock()}\n    */\n-  public LockResource(Lock lock, boolean acquireLock) {\n+  public LockResource(Lock lock, boolean acquireLock, boolean useTryLock) {\n     mLock = lock;\n     if (acquireLock) {\n-      mLock.lock();\n+      if (useTryLock) {\n+        while (!mLock.tryLock()) { // returns immediately\n+          // The reason we don't use #tryLock(int, TimeUnit) here is because we found there is a bug\n+          // somewhere in the internal accounting of the ReentrantRWLock that, even though all\n+          // threads had released the lock, that a final thread would never be able to acquire it.\n+          LockSupport.parkNanos(10000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5MDU0Ng==", "bodyText": "The current implementation before tryLock will also hang indefinitely, so I felt it was okay to not have any timeout for the tryLock code path.\nAnd I don't think this should really be configurable on the user end. I think it's too low-level and the likelihood someone would ever want to configure this is very, very low. I've done some testing myself and found 10000 to be suitable for most situations so we don't constantly eat CPU cycles, but also try often enough so that we can still make progress without parking the threads for too long.", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r417690546", "createdAt": "2020-04-30T00:33:18Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/resource/LockResource.java", "diffHunk": "@@ -35,24 +39,39 @@\n    * @param lock the lock to acquire\n    */\n   public LockResource(Lock lock) {\n-    this(lock, true);\n+    this(lock, true, false);\n   }\n \n   /**\n    * Creates a new instance of {@link LockResource} using the given lock.\n    *\n+   * This method may use the {@link Lock#tryLock()} method to gain ownership of the locks. The\n+   * reason one might want to use this is to avoid the fairness heuristics within the\n+   * {@link java.util.concurrent.locks.ReentrantReadWriteLock}'s NonFairSync which may block reader\n+   * threads if a writer if the first in the queue.\n+   *\n    * @param lock the lock to acquire\n    * @param acquireLock whether to lock the lock\n+   * @param useTryLock whether or not use to {@link Lock#tryLock()}\n    */\n-  public LockResource(Lock lock, boolean acquireLock) {\n+  public LockResource(Lock lock, boolean acquireLock, boolean useTryLock) {\n     mLock = lock;\n     if (acquireLock) {\n-      mLock.lock();\n+      if (useTryLock) {\n+        while (!mLock.tryLock()) { // returns immediately\n+          // The reason we don't use #tryLock(int, TimeUnit) here is because we found there is a bug\n+          // somewhere in the internal accounting of the ReentrantRWLock that, even though all\n+          // threads had released the lock, that a final thread would never be able to acquire it.\n+          LockSupport.parkNanos(10000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MTkzNQ=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODg0MDcyOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDowNjo0NVrOGOVVJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTowNDoyMFrOGTTVtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MjcyNg==", "bodyText": "How does this relate to the other parameters, MASTER_METADATA_SYNC_EXECUTOR_POOL_SIZE and MASTER_METADATA_SYNC_UFS_PREFETCH_POOL_SIZE? Also, it would be helpful to state what the potential tradeoffs are for a higher vs lower value (for the other parameters as well).", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r417682726", "createdAt": "2020-04-30T00:06:45Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -2132,6 +2132,30 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.MASTER)\n           .build();\n+  public static final PropertyKey MASTER_METADATA_SYNC_CONCURRENCY_LEVEL =\n+      new Builder(Name.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL)\n+          .setDefaultValue(6)\n+          .setDescription(\"The maximum number of concurrent sync tasks running for a given sync \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NTczOQ==", "bodyText": "Good question\n\nMASTER_METADATA_SYNC_EXECUTOR_POOL_SIZE\n\nThis parameter determines exactly how many inodes can be processing sync in parallel.\nThe executor affected by this value is shared by all RPC calls to the master. So if you have 64 total threads in this executor, then a syncMetadata operation from a listStatus will compete for threads (submit tasks to the same executor) as a createDirectory RPC.\n\n\n\nNow imagine you have a user who does a listStatus RPC that is high up in the inode tree, say, /dir1; but then another user comes along who wants to call getStatus on /dir2. It is mutually exclusive from /dir1, and may trigger a metadata sync, but if we allow listStatus on /dir1 to use all threads within this executor, concurrent sync operations could suffer in performance, even if /dir2 does not contain a large tree structure.\n\nMASTER_METADATA_SYNC_CONCURRENCY_LEVEL restricts max #of threads a single RPC is allowed to use at any given time for processing an inode sync.\n\nThe reason that MASTER_METADATA_SYNC_UFS_PREFETCH_POOL_SIZE is separate is because in order to make progress during sync, ufs prefetch threads must be available, and so if all threads in MASTER_METADATA_SYNC_CONCURRENCY_LEVEL are taken and none can be used for ufs fetching, then we could run into a deadlock scenario. There is no limit per sync operation on how many threads can be used for prefetch. Though the throughput of requests to the prefetch pool is limited to an extent by the MASTER_METADATA_SYNC_CONCURRENCY_LEVEL", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r417755739", "createdAt": "2020-04-30T05:06:41Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -2132,6 +2132,30 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.MASTER)\n           .build();\n+  public static final PropertyKey MASTER_METADATA_SYNC_CONCURRENCY_LEVEL =\n+      new Builder(Name.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL)\n+          .setDefaultValue(6)\n+          .setDescription(\"The maximum number of concurrent sync tasks running for a given sync \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MjcyNg=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5Mjk4Mg==", "bodyText": "could we have some of these comments in the source code?  helps the next reader", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r422892982", "createdAt": "2020-05-11T09:04:20Z", "author": {"login": "yuzhu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -2132,6 +2132,30 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.MASTER)\n           .build();\n+  public static final PropertyKey MASTER_METADATA_SYNC_CONCURRENCY_LEVEL =\n+      new Builder(Name.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL)\n+          .setDefaultValue(6)\n+          .setDescription(\"The maximum number of concurrent sync tasks running for a given sync \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MjcyNg=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODg0Nzc2OnYy", "diffSide": "LEFT", "path": "tests/src/test/java/alluxio/client/fs/LoadMetadataIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDoxMDozMFrOGOVZdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDozMDozMlrOGOVwSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MzgyOQ==", "bodyText": "Is this test useful anymore, if it is not validating how the load is happening?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r417683829", "createdAt": "2020-04-30T00:10:30Z", "author": {"login": "gpang"}, "path": "tests/src/test/java/alluxio/client/fs/LoadMetadataIntegrationTest.java", "diffHunk": "@@ -219,15 +219,9 @@ public void loadRecursive() throws Exception {\n         fileWriter.close();\n       }\n     }\n-    long startMs = CommonUtils.getCurrentMs();\n     List<URIStatus> list = mFileSystem.listStatus(new AlluxioURI(\"/mnt\"), options);\n-    long durationMs = CommonUtils.getCurrentMs() - startMs;\n     // 25 files, 25 level 2 dirs, 5 level 1 dirs, 1 file and 1 dir created in before\n     Assert.assertEquals(25 * 2 + 5 + 2, list.size());\n-\n-    // Should load metadata once, in one recursive call", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4OTY3NA==", "bodyText": "I think validating the listStatus size is better than validating the runtime? Runtime can vary for a lot of reasons during tests- especially in jenkins if a system is overloaded.\nWe might be able to come up with some better assertions, but I think the test is still validating that we load metadata since all of the file creations above are through the UFS, and then the listStatus call is executed through Alluxio, so we verify that at least all of the files expected are loaded in Alluxio under the /mnt path.", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r417689674", "createdAt": "2020-04-30T00:30:32Z", "author": {"login": "ZacBlanco"}, "path": "tests/src/test/java/alluxio/client/fs/LoadMetadataIntegrationTest.java", "diffHunk": "@@ -219,15 +219,9 @@ public void loadRecursive() throws Exception {\n         fileWriter.close();\n       }\n     }\n-    long startMs = CommonUtils.getCurrentMs();\n     List<URIStatus> list = mFileSystem.listStatus(new AlluxioURI(\"/mnt\"), options);\n-    long durationMs = CommonUtils.getCurrentMs() - startMs;\n     // 25 files, 25 level 2 dirs, 5 level 1 dirs, 1 file and 1 dir created in before\n     Assert.assertEquals(25 * 2 + 5 + 2, list.size());\n-\n-    // Should load metadata once, in one recursive call", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MzgyOQ=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ3MzExOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/collections/LockPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxNjowMlrOGO4wkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNzowMFrOGO-7mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MzE4Ng==", "bodyText": "NIT\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new IOException(\"Failed to await evictor termination\", e);\n          \n          \n            \n                  throw new IOException(\"Failed to await LockPool evictor termination\", e);", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418263186", "createdAt": "2020-04-30T20:16:02Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/collections/LockPool.java", "diffHunk": "@@ -77,8 +82,20 @@ public LockPool(Function<? super K, ? extends ReentrantReadWriteLock> defaultLoa\n     mHighWatermark = highWatermark;\n     mPool = new ConcurrentHashMap<>(initialSize, DEFAULT_LOAD_FACTOR, concurrencyLevel);\n     mEvictor = Executors.newSingleThreadExecutor(\n-        ThreadFactoryUtils.build(EVICTOR_THREAD_NAME, true));\n-    mEvictor.submit(new Evictor());\n+        ThreadFactoryUtils.build(String.format(\"%s-%s\", EVICTOR_THREAD_NAME, toString()), true));\n+    mEvictorTask = mEvictor.submit(new Evictor());\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    mEvictorTask.cancel(true);\n+    mEvictor.shutdownNow(); // immediately halt the evictor thread.\n+    try {\n+      mEvictor.awaitTermination(2, TimeUnit.SECONDS);\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new IOException(\"Failed to await evictor termination\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDMxMw==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418364313", "createdAt": "2020-05-01T00:37:00Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/collections/LockPool.java", "diffHunk": "@@ -77,8 +82,20 @@ public LockPool(Function<? super K, ? extends ReentrantReadWriteLock> defaultLoa\n     mHighWatermark = highWatermark;\n     mPool = new ConcurrentHashMap<>(initialSize, DEFAULT_LOAD_FACTOR, concurrencyLevel);\n     mEvictor = Executors.newSingleThreadExecutor(\n-        ThreadFactoryUtils.build(EVICTOR_THREAD_NAME, true));\n-    mEvictor.submit(new Evictor());\n+        ThreadFactoryUtils.build(String.format(\"%s-%s\", EVICTOR_THREAD_NAME, toString()), true));\n+    mEvictorTask = mEvictor.submit(new Evictor());\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    mEvictorTask.cancel(true);\n+    mEvictor.shutdownNow(); // immediately halt the evictor thread.\n+    try {\n+      mEvictor.awaitTermination(2, TimeUnit.SECONDS);\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new IOException(\"Failed to await evictor termination\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MzE4Ng=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ4NDQxOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxOToyN1rOGO43qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNjo1NlrOGO-7hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTAwMg==", "bodyText": "The param is nullable, what does that mean? Can you update this line?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418265002", "createdAt": "2020-04-30T20:19:27Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDI5Mw==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418364293", "createdAt": "2020-05-01T00:36:56Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTAwMg=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjUwMDAzOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNDozMlrOGO5Bdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNjo1MFrOGO-7Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NzUxMQ==", "bodyText": "what is prev for, and if it was already there, what should we do?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418267511", "createdAt": "2020-04-30T20:24:32Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzNDMzOQ==", "bodyText": "since it's a cache, I just ignore the previous value. We should never add the same status twice to the cache with the current code path, but if it does happen I think overwriting it is fine.\nI will update this method to return the old status if there is one. No one in the current code will use the result though.", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418334339", "createdAt": "2020-04-30T22:55:15Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NzUxMQ=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDI2Mg==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418364262", "createdAt": "2020-05-01T00:36:50Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NzUxMQ=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjUwMTc1OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyNTowMFrOGO5Cfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNjo0NVrOGO-7Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2Nzc3NA==", "bodyText": "why is this check done after it was inserted?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418267774", "createdAt": "2020-04-30T20:25:00Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzNDgyMg==", "bodyText": "ooh..good catch", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418334822", "createdAt": "2020-04-30T22:56:45Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2Nzc3NA=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDI0Mg==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418364242", "createdAt": "2020-05-01T00:36:45Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2Nzc3NA=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY2MzY2OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxNDozOVrOGO6loA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjo1ODoyOVrOGO9KZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5MzE1Mg==", "bodyText": "When is this parent-child relationship used?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418293152", "createdAt": "2020-04-30T21:14:39Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzNTMzMg==", "bodyText": "here and here", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418335332", "createdAt": "2020-04-30T22:58:29Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5MzE1Mg=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY3NDI3OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxODowNlrOGO6sFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNjozOFrOGO-7Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NDgwNQ==", "bodyText": "Why can't we add this parent->children listing cache even if the parent status is not in the other map?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418294805", "createdAt": "2020-04-30T21:18:06Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzNTQ0Ng==", "bodyText": "ah, this was a limitation of my previous implementation. It is possible now.", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418335446", "createdAt": "2020-04-30T22:58:50Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NDgwNQ=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDIwNg==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418364206", "createdAt": "2020-05-01T00:36:38Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NDgwNQ=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY3ODgyOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxOToyN1rOGO6usQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo0OTo0N1rOGTm6vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTQ3Mw==", "bodyText": "Is the contract that if the status DNE, then the children list DNE for that path? It is unclear what the relationship is between the 2 maps.", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418295473", "createdAt": "2020-04-30T21:19:27Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MjMxOQ==", "bodyText": "the child map is a 1:N mapping of alluxio directory to UFS children.\nIf we remove the parent status from the cache, then it's assumed that we won't need to access its parent-child relationship information either. The UfsStatus information for each individual child still resides in mStatuses after calling remove", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418342319", "createdAt": "2020-04-30T23:20:15Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTQ3Mw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MzUwOQ==", "bodyText": "Another solution is to make the parent-child relationship removal independent of the removing a single status, but then status removal will need 2 calls, and I think that is more prone to errors. We want to remove those references otherwise the JVM won't be able to GC the children if they are removed individually.", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418343509", "createdAt": "2020-04-30T23:24:02Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTQ3Mw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4MDI3Mg==", "bodyText": "Ok, so if the structure is /parent/child and /parent is removed, it looks like the child listing is removed for /parent, but the status may still remain for /parent/child?\nIs this status cache supposed to be thread safe?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r419580272", "createdAt": "2020-05-04T16:53:06Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTQ3Mw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMzY1Ng==", "bodyText": "Yes\nYes. Do you see thread-safety issues?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r419613656", "createdAt": "2020-05-04T17:46:29Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTQ3Mw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNDkzOA==", "bodyText": "in this case, are we ok with dangling cache entries? for a path /a/b/c, if /a is removed , /a/b -> {/a/b/c} is still in the cache, so is /a/b, do you think we should do cascading removal?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r422904938", "createdAt": "2020-05-11T09:24:10Z", "author": {"login": "yuzhu"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTQ3Mw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNTU3Ng==", "bodyText": "let's say /a is removed and added later, it will suddenly get many entries from the past", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r422905576", "createdAt": "2020-05-11T09:25:09Z", "author": {"login": "yuzhu"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTQ3Mw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3OTU4NA==", "bodyText": "@ZacBlanco Is there any relationship between the listings cache, and the status cache? Meaning, if the listing cache has the mapping /parent/ -> [/parent/a, /parent/b, /parent/c], is the status cache guaranteed to have the status of /parent/a, /parent/b, and /parent/c?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r423179584", "createdAt": "2020-05-11T16:52:51Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTQ3Mw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNTM2OA==", "bodyText": "@yuzhu  We don't want to do a cascading removal because it would be removing statuses from the cache that are potentially used in a later part of the sync.\nThe implementation is designed for the inode sync stream so that the statuses can be re-used later without needing to do more UFS listings. Additionally, the way this is used is that the parent is always synced and removed before a child status even begins to sync.\nWe remove only the information that was needed for the parent to sync, while leaving all information about children in-tact so they don't need to call to the UFS when they are synced. Then the children then add information about their children to the cache, while removing theirs once finished, etc...\n@gpang When initially added, they are guaranteed to be in sync, i.e. if /parent -> {/parent/a, /parent/b, /parent/c} exists then /parent/a, /parent/b, /parent/c will all exist in the cache individually. However, it's possible they could be removed before the parent listing.\nIn the current code, the parent is always synced and removed before the child even begins to sync because we don't add children to the processing queue until the parent has completed all of its syncing.", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r423205368", "createdAt": "2020-05-11T17:34:58Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTQ3Mw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxMzc1Nw==", "bodyText": "Also, I do see the issue with children still existing even if the parent doesn't.\nThere are not cases currently where that could happen as far as I'm aware in the current usage, but I meant to push an update for this when I changed the internal representation of the maps. Guess I missed it.", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r423213757", "createdAt": "2020-05-11T17:49:47Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTQ3Mw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY4MTIyOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyMDoxM1rOGO6wMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNjozMVrOGO-7HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTg1Ng==", "bodyText": "What if it was already cached? The children cache would be stale?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418295856", "createdAt": "2020-04-30T21:20:13Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDE4OQ==", "bodyText": "updated to always overwrite", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418364189", "createdAt": "2020-05-01T00:36:31Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTg1Ng=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY5ODk0OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyNjoyN1rOGO67RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzoyODowM1rOGO9vcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5ODY5Mw==", "bodyText": "What happens if there is no scheduled prefetch job? Is that what (3) is?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418298693", "createdAt": "2020-04-30T21:26:27Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NDgxNg==", "bodyText": "If no prefetch job - isn't that what 3 says?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418344816", "createdAt": "2020-04-30T23:28:03Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5ODY5Mw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcwODU5OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyOTo0M1rOGO7BIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzozMzoxNVrOGO91lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDE5Mw==", "bodyText": "Removing it means other callers which call this same method would think there are no prefetch jobs? Is that intended?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418300193", "createdAt": "2020-04-30T21:29:43Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.remove(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NjM5MA==", "bodyText": "In the current code path, we never have concurrent callers on the same path, but I will change the code so that it does work for concurrent callers.", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418346390", "createdAt": "2020-04-30T23:33:15Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.remove(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDE5Mw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcwOTY2OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozMDowOVrOGO7B3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNjoxMVrOGO-62Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDM4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.warn(\"Failed waiting to fetch children at {}\", path);\n          \n          \n            \n                    LOG.warn(\"Failed waiting to prefetch children at {}\", path);", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418300381", "createdAt": "2020-04-30T21:30:09Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.remove(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Failed waiting to fetch children at {}\", path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDEyMQ==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418364121", "createdAt": "2020-05-01T00:36:11Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.remove(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Failed waiting to fetch children at {}\", path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDM4MQ=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcwOTk5OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozMDoxOFrOGO7CEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNjowOFrOGO-6yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDQzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (e instanceof  InterruptedException) {\n          \n          \n            \n                    if (e instanceof InterruptedException) {", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418300433", "createdAt": "2020-04-30T21:30:18Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.remove(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Failed waiting to fetch children at {}\", path);\n+        if (e instanceof  InterruptedException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDEwNQ==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418364105", "createdAt": "2020-05-01T00:36:08Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.remove(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Failed waiting to fetch children at {}\", path);\n+        if (e instanceof  InterruptedException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDQzMw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcyMDMyOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozMzo1M1rOGO7Ibw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzozNToxMVrOGO94CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMjA2Mw==", "bodyText": "hrmmm, is fute a real term? I am not familiar with it...", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418302063", "createdAt": "2020-04-30T21:33:53Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.remove(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Failed waiting to fetch children at {}\", path);\n+        if (e instanceof  InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        throw new IOException(e);\n+      }\n+    }\n+    if (useFallback) {\n+      return getChildrenIfAbsent(path, mountTable);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path stores them in the cache, then returns them.\n+   *\n+   * Will always return statuses from the UFS whether or not they exist in the cache, and whether\n+   * a prefetch job was scheduled or not.\n+   *\n+   * @param path the Alluxio path\n+   * @param mountTable the Alluxio mount table\n+   * @return child UFS statuses of the alluxio path\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   * @see {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable, boolean)}\n+   */\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws IOException, InvalidPathException {\n+    return fetchChildrenIfAbsent(path, mountTable, true);\n+  }\n+\n+  /**\n+   * Retrieves the child UFS statuses for a given path and stores them in the cache.\n+   *\n+   * This method first checks if the children have already been retrieved, and if not, then\n+   * retrieves them.\n+\n+   * @param path the path to get the children for\n+   * @param mountTable the Alluxio mount table\n+   * @return the child statuses that were stored in the cache, or null if the UFS couldn't list the\n+   *         statuses\n+   * @throws InvalidPathException when the table can't resolve the mount for the given URI\n+   */\n+  @Nullable\n+  private Collection<UfsStatus> getChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    MountTable.Resolution resolution = mountTable.resolve(path);\n+    AlluxioURI ufsUri = resolution.getUri();\n+    try (CloseableResource<UnderFileSystem> ufsResource = resolution.acquireUfsResource()) {\n+      UnderFileSystem ufs = ufsResource.get();\n+      UfsStatus[] statuses = ufs.listStatus(ufsUri.toString());\n+      if (statuses == null) {\n+        return null;\n+      }\n+      children = Arrays.asList(statuses);\n+      addChildren(path, children);\n+    } catch (IllegalArgumentException | IOException e) {\n+      LOG.debug(\"Failed to add status to cache\", e);\n+    }\n+    return children;\n+  }\n+\n+  /**\n+   * Get the child {@link UfsStatus}es from a given {@link AlluxioURI}.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> getChildren(AlluxioURI path) {\n+    return mChildren.get(path);\n+  }\n+\n+  /**\n+   * Submit a request to asynchronously fetch the statuses corresponding to a given directory.\n+   *\n+   * Retrieve any fetched statuses by calling {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable)}\n+   * with the same Alluxio path.\n+   *\n+   * If no {@link ExecutorService} was provided to this object before instantiation, this method is\n+   * a no-op.\n+   *\n+   * @param path the path to prefetch\n+   * @param mountTable the Alluxio mount table\n+   */\n+  public void prefetchChildren(AlluxioURI path, MountTable mountTable) {\n+    if (mPrefetchExecutor == null) {\n+      return;\n+    }\n+    try {\n+      Future<Collection<UfsStatus>> fute =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NzAxNw==", "bodyText": "updated to job", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418347017", "createdAt": "2020-04-30T23:35:11Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.remove(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Failed waiting to fetch children at {}\", path);\n+        if (e instanceof  InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        throw new IOException(e);\n+      }\n+    }\n+    if (useFallback) {\n+      return getChildrenIfAbsent(path, mountTable);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path stores them in the cache, then returns them.\n+   *\n+   * Will always return statuses from the UFS whether or not they exist in the cache, and whether\n+   * a prefetch job was scheduled or not.\n+   *\n+   * @param path the Alluxio path\n+   * @param mountTable the Alluxio mount table\n+   * @return child UFS statuses of the alluxio path\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   * @see {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable, boolean)}\n+   */\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws IOException, InvalidPathException {\n+    return fetchChildrenIfAbsent(path, mountTable, true);\n+  }\n+\n+  /**\n+   * Retrieves the child UFS statuses for a given path and stores them in the cache.\n+   *\n+   * This method first checks if the children have already been retrieved, and if not, then\n+   * retrieves them.\n+\n+   * @param path the path to get the children for\n+   * @param mountTable the Alluxio mount table\n+   * @return the child statuses that were stored in the cache, or null if the UFS couldn't list the\n+   *         statuses\n+   * @throws InvalidPathException when the table can't resolve the mount for the given URI\n+   */\n+  @Nullable\n+  private Collection<UfsStatus> getChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    MountTable.Resolution resolution = mountTable.resolve(path);\n+    AlluxioURI ufsUri = resolution.getUri();\n+    try (CloseableResource<UnderFileSystem> ufsResource = resolution.acquireUfsResource()) {\n+      UnderFileSystem ufs = ufsResource.get();\n+      UfsStatus[] statuses = ufs.listStatus(ufsUri.toString());\n+      if (statuses == null) {\n+        return null;\n+      }\n+      children = Arrays.asList(statuses);\n+      addChildren(path, children);\n+    } catch (IllegalArgumentException | IOException e) {\n+      LOG.debug(\"Failed to add status to cache\", e);\n+    }\n+    return children;\n+  }\n+\n+  /**\n+   * Get the child {@link UfsStatus}es from a given {@link AlluxioURI}.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> getChildren(AlluxioURI path) {\n+    return mChildren.get(path);\n+  }\n+\n+  /**\n+   * Submit a request to asynchronously fetch the statuses corresponding to a given directory.\n+   *\n+   * Retrieve any fetched statuses by calling {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable)}\n+   * with the same Alluxio path.\n+   *\n+   * If no {@link ExecutorService} was provided to this object before instantiation, this method is\n+   * a no-op.\n+   *\n+   * @param path the path to prefetch\n+   * @param mountTable the Alluxio mount table\n+   */\n+  public void prefetchChildren(AlluxioURI path, MountTable mountTable) {\n+    if (mPrefetchExecutor == null) {\n+      return;\n+    }\n+    try {\n+      Future<Collection<UfsStatus>> fute =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMjA2Mw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcyMzM0OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozNDo0OFrOGO7KPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzozMjoyM1rOGSte_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMjUyNg==", "bodyText": "Why cancel the old one? Could this cause an endless cycle of constantly cancelled tasks?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418302526", "createdAt": "2020-04-30T21:34:48Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.remove(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Failed waiting to fetch children at {}\", path);\n+        if (e instanceof  InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        throw new IOException(e);\n+      }\n+    }\n+    if (useFallback) {\n+      return getChildrenIfAbsent(path, mountTable);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path stores them in the cache, then returns them.\n+   *\n+   * Will always return statuses from the UFS whether or not they exist in the cache, and whether\n+   * a prefetch job was scheduled or not.\n+   *\n+   * @param path the Alluxio path\n+   * @param mountTable the Alluxio mount table\n+   * @return child UFS statuses of the alluxio path\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   * @see {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable, boolean)}\n+   */\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws IOException, InvalidPathException {\n+    return fetchChildrenIfAbsent(path, mountTable, true);\n+  }\n+\n+  /**\n+   * Retrieves the child UFS statuses for a given path and stores them in the cache.\n+   *\n+   * This method first checks if the children have already been retrieved, and if not, then\n+   * retrieves them.\n+\n+   * @param path the path to get the children for\n+   * @param mountTable the Alluxio mount table\n+   * @return the child statuses that were stored in the cache, or null if the UFS couldn't list the\n+   *         statuses\n+   * @throws InvalidPathException when the table can't resolve the mount for the given URI\n+   */\n+  @Nullable\n+  private Collection<UfsStatus> getChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    MountTable.Resolution resolution = mountTable.resolve(path);\n+    AlluxioURI ufsUri = resolution.getUri();\n+    try (CloseableResource<UnderFileSystem> ufsResource = resolution.acquireUfsResource()) {\n+      UnderFileSystem ufs = ufsResource.get();\n+      UfsStatus[] statuses = ufs.listStatus(ufsUri.toString());\n+      if (statuses == null) {\n+        return null;\n+      }\n+      children = Arrays.asList(statuses);\n+      addChildren(path, children);\n+    } catch (IllegalArgumentException | IOException e) {\n+      LOG.debug(\"Failed to add status to cache\", e);\n+    }\n+    return children;\n+  }\n+\n+  /**\n+   * Get the child {@link UfsStatus}es from a given {@link AlluxioURI}.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> getChildren(AlluxioURI path) {\n+    return mChildren.get(path);\n+  }\n+\n+  /**\n+   * Submit a request to asynchronously fetch the statuses corresponding to a given directory.\n+   *\n+   * Retrieve any fetched statuses by calling {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable)}\n+   * with the same Alluxio path.\n+   *\n+   * If no {@link ExecutorService} was provided to this object before instantiation, this method is\n+   * a no-op.\n+   *\n+   * @param path the path to prefetch\n+   * @param mountTable the Alluxio mount table\n+   */\n+  public void prefetchChildren(AlluxioURI path, MountTable mountTable) {\n+    if (mPrefetchExecutor == null) {\n+      return;\n+    }\n+    try {\n+      Future<Collection<UfsStatus>> fute =\n+          mPrefetchExecutor.submit(() -> getChildrenIfAbsent(path, mountTable));\n+      Future<Collection<UfsStatus>> prev = mActivePrefetchJobs.put(path, fute);\n+      if (prev != null) {\n+        prev.cancel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0ODQ5NQ==", "bodyText": "How could it cause an endless cycle?\nIt only returns the previously submitted job for the given path. We have two options if there is already a prefetch job running on that path.\n\n(current approach) Cancel the old one, submit the new one\nIgnore the current request and rely on the future for the previously submitted future.\n\nThis path shouldn't really occur in the current code, but in the case it does happen I wanted to define the behavior. If the task is submitted later, I make the assumption that the user is submitting it because of some possible updated data in the UFS. The current prefetch job may already be executing or may be finished. I cancel it anyway in case it is running or about to run, and then submit the next one so whoever goes looking for the children later on will have a likely more up-to-date version of the UfsStatuses.\nI don't see how this could cause an endless cycle?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418348495", "createdAt": "2020-04-30T23:40:13Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.remove(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Failed waiting to fetch children at {}\", path);\n+        if (e instanceof  InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        throw new IOException(e);\n+      }\n+    }\n+    if (useFallback) {\n+      return getChildrenIfAbsent(path, mountTable);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path stores them in the cache, then returns them.\n+   *\n+   * Will always return statuses from the UFS whether or not they exist in the cache, and whether\n+   * a prefetch job was scheduled or not.\n+   *\n+   * @param path the Alluxio path\n+   * @param mountTable the Alluxio mount table\n+   * @return child UFS statuses of the alluxio path\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   * @see {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable, boolean)}\n+   */\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws IOException, InvalidPathException {\n+    return fetchChildrenIfAbsent(path, mountTable, true);\n+  }\n+\n+  /**\n+   * Retrieves the child UFS statuses for a given path and stores them in the cache.\n+   *\n+   * This method first checks if the children have already been retrieved, and if not, then\n+   * retrieves them.\n+\n+   * @param path the path to get the children for\n+   * @param mountTable the Alluxio mount table\n+   * @return the child statuses that were stored in the cache, or null if the UFS couldn't list the\n+   *         statuses\n+   * @throws InvalidPathException when the table can't resolve the mount for the given URI\n+   */\n+  @Nullable\n+  private Collection<UfsStatus> getChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    MountTable.Resolution resolution = mountTable.resolve(path);\n+    AlluxioURI ufsUri = resolution.getUri();\n+    try (CloseableResource<UnderFileSystem> ufsResource = resolution.acquireUfsResource()) {\n+      UnderFileSystem ufs = ufsResource.get();\n+      UfsStatus[] statuses = ufs.listStatus(ufsUri.toString());\n+      if (statuses == null) {\n+        return null;\n+      }\n+      children = Arrays.asList(statuses);\n+      addChildren(path, children);\n+    } catch (IllegalArgumentException | IOException e) {\n+      LOG.debug(\"Failed to add status to cache\", e);\n+    }\n+    return children;\n+  }\n+\n+  /**\n+   * Get the child {@link UfsStatus}es from a given {@link AlluxioURI}.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> getChildren(AlluxioURI path) {\n+    return mChildren.get(path);\n+  }\n+\n+  /**\n+   * Submit a request to asynchronously fetch the statuses corresponding to a given directory.\n+   *\n+   * Retrieve any fetched statuses by calling {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable)}\n+   * with the same Alluxio path.\n+   *\n+   * If no {@link ExecutorService} was provided to this object before instantiation, this method is\n+   * a no-op.\n+   *\n+   * @param path the path to prefetch\n+   * @param mountTable the Alluxio mount table\n+   */\n+  public void prefetchChildren(AlluxioURI path, MountTable mountTable) {\n+    if (mPrefetchExecutor == null) {\n+      return;\n+    }\n+    try {\n+      Future<Collection<UfsStatus>> fute =\n+          mPrefetchExecutor.submit(() -> getChildrenIfAbsent(path, mountTable));\n+      Future<Collection<UfsStatus>> prev = mActivePrefetchJobs.put(path, fute);\n+      if (prev != null) {\n+        prev.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMjUyNg=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3NzU4Mg==", "bodyText": "Well, if we keep calling prefetchChildren, it will never terminate if we keep taking the latest request (and canceling the previous one), right?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r419577582", "createdAt": "2020-05-04T16:49:05Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.remove(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Failed waiting to fetch children at {}\", path);\n+        if (e instanceof  InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        throw new IOException(e);\n+      }\n+    }\n+    if (useFallback) {\n+      return getChildrenIfAbsent(path, mountTable);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path stores them in the cache, then returns them.\n+   *\n+   * Will always return statuses from the UFS whether or not they exist in the cache, and whether\n+   * a prefetch job was scheduled or not.\n+   *\n+   * @param path the Alluxio path\n+   * @param mountTable the Alluxio mount table\n+   * @return child UFS statuses of the alluxio path\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   * @see {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable, boolean)}\n+   */\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws IOException, InvalidPathException {\n+    return fetchChildrenIfAbsent(path, mountTable, true);\n+  }\n+\n+  /**\n+   * Retrieves the child UFS statuses for a given path and stores them in the cache.\n+   *\n+   * This method first checks if the children have already been retrieved, and if not, then\n+   * retrieves them.\n+\n+   * @param path the path to get the children for\n+   * @param mountTable the Alluxio mount table\n+   * @return the child statuses that were stored in the cache, or null if the UFS couldn't list the\n+   *         statuses\n+   * @throws InvalidPathException when the table can't resolve the mount for the given URI\n+   */\n+  @Nullable\n+  private Collection<UfsStatus> getChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    MountTable.Resolution resolution = mountTable.resolve(path);\n+    AlluxioURI ufsUri = resolution.getUri();\n+    try (CloseableResource<UnderFileSystem> ufsResource = resolution.acquireUfsResource()) {\n+      UnderFileSystem ufs = ufsResource.get();\n+      UfsStatus[] statuses = ufs.listStatus(ufsUri.toString());\n+      if (statuses == null) {\n+        return null;\n+      }\n+      children = Arrays.asList(statuses);\n+      addChildren(path, children);\n+    } catch (IllegalArgumentException | IOException e) {\n+      LOG.debug(\"Failed to add status to cache\", e);\n+    }\n+    return children;\n+  }\n+\n+  /**\n+   * Get the child {@link UfsStatus}es from a given {@link AlluxioURI}.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> getChildren(AlluxioURI path) {\n+    return mChildren.get(path);\n+  }\n+\n+  /**\n+   * Submit a request to asynchronously fetch the statuses corresponding to a given directory.\n+   *\n+   * Retrieve any fetched statuses by calling {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable)}\n+   * with the same Alluxio path.\n+   *\n+   * If no {@link ExecutorService} was provided to this object before instantiation, this method is\n+   * a no-op.\n+   *\n+   * @param path the path to prefetch\n+   * @param mountTable the Alluxio mount table\n+   */\n+  public void prefetchChildren(AlluxioURI path, MountTable mountTable) {\n+    if (mPrefetchExecutor == null) {\n+      return;\n+    }\n+    try {\n+      Future<Collection<UfsStatus>> fute =\n+          mPrefetchExecutor.submit(() -> getChildrenIfAbsent(path, mountTable));\n+      Future<Collection<UfsStatus>> prev = mActivePrefetchJobs.put(path, fute);\n+      if (prev != null) {\n+        prev.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMjUyNg=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMTUwOQ==", "bodyText": "Well, if we keep calling prefetchChildren, it will never terminate\n\nI don't understand what is \"never terminating\"?\ncalling this method only schedules the job and immediately returns. It may cancel a previous one if it exists. This method will never block.\nwe only ever call prefetchChildren once in the code, and it doesn't depend on whether or not there is a job in the cache for that path. For the code paths that use that job to retrieve the child statuses, they also don't have a strong dependency on the prefetch job existing or not. If the job they wait for gets cancelled (or doesn't exist) it will just make the call to the UFS serially.", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r419601509", "createdAt": "2020-05-04T17:26:41Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.remove(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Failed waiting to fetch children at {}\", path);\n+        if (e instanceof  InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        throw new IOException(e);\n+      }\n+    }\n+    if (useFallback) {\n+      return getChildrenIfAbsent(path, mountTable);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path stores them in the cache, then returns them.\n+   *\n+   * Will always return statuses from the UFS whether or not they exist in the cache, and whether\n+   * a prefetch job was scheduled or not.\n+   *\n+   * @param path the Alluxio path\n+   * @param mountTable the Alluxio mount table\n+   * @return child UFS statuses of the alluxio path\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   * @see {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable, boolean)}\n+   */\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws IOException, InvalidPathException {\n+    return fetchChildrenIfAbsent(path, mountTable, true);\n+  }\n+\n+  /**\n+   * Retrieves the child UFS statuses for a given path and stores them in the cache.\n+   *\n+   * This method first checks if the children have already been retrieved, and if not, then\n+   * retrieves them.\n+\n+   * @param path the path to get the children for\n+   * @param mountTable the Alluxio mount table\n+   * @return the child statuses that were stored in the cache, or null if the UFS couldn't list the\n+   *         statuses\n+   * @throws InvalidPathException when the table can't resolve the mount for the given URI\n+   */\n+  @Nullable\n+  private Collection<UfsStatus> getChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    MountTable.Resolution resolution = mountTable.resolve(path);\n+    AlluxioURI ufsUri = resolution.getUri();\n+    try (CloseableResource<UnderFileSystem> ufsResource = resolution.acquireUfsResource()) {\n+      UnderFileSystem ufs = ufsResource.get();\n+      UfsStatus[] statuses = ufs.listStatus(ufsUri.toString());\n+      if (statuses == null) {\n+        return null;\n+      }\n+      children = Arrays.asList(statuses);\n+      addChildren(path, children);\n+    } catch (IllegalArgumentException | IOException e) {\n+      LOG.debug(\"Failed to add status to cache\", e);\n+    }\n+    return children;\n+  }\n+\n+  /**\n+   * Get the child {@link UfsStatus}es from a given {@link AlluxioURI}.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> getChildren(AlluxioURI path) {\n+    return mChildren.get(path);\n+  }\n+\n+  /**\n+   * Submit a request to asynchronously fetch the statuses corresponding to a given directory.\n+   *\n+   * Retrieve any fetched statuses by calling {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable)}\n+   * with the same Alluxio path.\n+   *\n+   * If no {@link ExecutorService} was provided to this object before instantiation, this method is\n+   * a no-op.\n+   *\n+   * @param path the path to prefetch\n+   * @param mountTable the Alluxio mount table\n+   */\n+  public void prefetchChildren(AlluxioURI path, MountTable mountTable) {\n+    if (mPrefetchExecutor == null) {\n+      return;\n+    }\n+    try {\n+      Future<Collection<UfsStatus>> fute =\n+          mPrefetchExecutor.submit(() -> getChildrenIfAbsent(path, mountTable));\n+      Future<Collection<UfsStatus>> prev = mActivePrefetchJobs.put(path, fute);\n+      if (prev != null) {\n+        prev.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMjUyNg=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkyMjIxMg==", "bodyText": "In fetchChildrenIfAbsent, it is supposed to wait for the prefetch job. If the prefetch job is always getting canceled and re-created, I'd imagine the prefetch job would never finish, and that i where the \"cycle\" would happen.\nBut it sounds like you are saying prefetchChildren is only called once per path per instance of this class?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r420922212", "createdAt": "2020-05-06T16:22:55Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.remove(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Failed waiting to fetch children at {}\", path);\n+        if (e instanceof  InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        throw new IOException(e);\n+      }\n+    }\n+    if (useFallback) {\n+      return getChildrenIfAbsent(path, mountTable);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path stores them in the cache, then returns them.\n+   *\n+   * Will always return statuses from the UFS whether or not they exist in the cache, and whether\n+   * a prefetch job was scheduled or not.\n+   *\n+   * @param path the Alluxio path\n+   * @param mountTable the Alluxio mount table\n+   * @return child UFS statuses of the alluxio path\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   * @see {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable, boolean)}\n+   */\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws IOException, InvalidPathException {\n+    return fetchChildrenIfAbsent(path, mountTable, true);\n+  }\n+\n+  /**\n+   * Retrieves the child UFS statuses for a given path and stores them in the cache.\n+   *\n+   * This method first checks if the children have already been retrieved, and if not, then\n+   * retrieves them.\n+\n+   * @param path the path to get the children for\n+   * @param mountTable the Alluxio mount table\n+   * @return the child statuses that were stored in the cache, or null if the UFS couldn't list the\n+   *         statuses\n+   * @throws InvalidPathException when the table can't resolve the mount for the given URI\n+   */\n+  @Nullable\n+  private Collection<UfsStatus> getChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    MountTable.Resolution resolution = mountTable.resolve(path);\n+    AlluxioURI ufsUri = resolution.getUri();\n+    try (CloseableResource<UnderFileSystem> ufsResource = resolution.acquireUfsResource()) {\n+      UnderFileSystem ufs = ufsResource.get();\n+      UfsStatus[] statuses = ufs.listStatus(ufsUri.toString());\n+      if (statuses == null) {\n+        return null;\n+      }\n+      children = Arrays.asList(statuses);\n+      addChildren(path, children);\n+    } catch (IllegalArgumentException | IOException e) {\n+      LOG.debug(\"Failed to add status to cache\", e);\n+    }\n+    return children;\n+  }\n+\n+  /**\n+   * Get the child {@link UfsStatus}es from a given {@link AlluxioURI}.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> getChildren(AlluxioURI path) {\n+    return mChildren.get(path);\n+  }\n+\n+  /**\n+   * Submit a request to asynchronously fetch the statuses corresponding to a given directory.\n+   *\n+   * Retrieve any fetched statuses by calling {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable)}\n+   * with the same Alluxio path.\n+   *\n+   * If no {@link ExecutorService} was provided to this object before instantiation, this method is\n+   * a no-op.\n+   *\n+   * @param path the path to prefetch\n+   * @param mountTable the Alluxio mount table\n+   */\n+  public void prefetchChildren(AlluxioURI path, MountTable mountTable) {\n+    if (mPrefetchExecutor == null) {\n+      return;\n+    }\n+    try {\n+      Future<Collection<UfsStatus>> fute =\n+          mPrefetchExecutor.submit(() -> getChildrenIfAbsent(path, mountTable));\n+      Future<Collection<UfsStatus>> prev = mActivePrefetchJobs.put(path, fute);\n+      if (prev != null) {\n+        prev.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMjUyNg=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3Mjc2NQ==", "bodyText": "Yes, it should only ever happen once per path in the current code", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r422272765", "createdAt": "2020-05-08T17:32:23Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  public void addStatus(AlluxioURI path, UfsStatus status) {\n+    UfsStatus prev = mStatuses.putIfAbsent(path, status);\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @throws IllegalArgumentException when {@code path} already exists or if any child already\n+   *                                  exists\n+   */\n+  public void addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    UfsStatus status = mStatuses.get(path);\n+    // If this path doesn't yet exist, we can't keep track of the parent-child relationship\n+    // We can still add statuses to the cache regardless\n+    if (status != null) {\n+      mChildren.computeIfAbsent(path, ufsStatus -> new ConcurrentHashSet<>()).addAll(children);\n+    }\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+    });\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.remove(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Failed waiting to fetch children at {}\", path);\n+        if (e instanceof  InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        throw new IOException(e);\n+      }\n+    }\n+    if (useFallback) {\n+      return getChildrenIfAbsent(path, mountTable);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path stores them in the cache, then returns them.\n+   *\n+   * Will always return statuses from the UFS whether or not they exist in the cache, and whether\n+   * a prefetch job was scheduled or not.\n+   *\n+   * @param path the Alluxio path\n+   * @param mountTable the Alluxio mount table\n+   * @return child UFS statuses of the alluxio path\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   * @see {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable, boolean)}\n+   */\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws IOException, InvalidPathException {\n+    return fetchChildrenIfAbsent(path, mountTable, true);\n+  }\n+\n+  /**\n+   * Retrieves the child UFS statuses for a given path and stores them in the cache.\n+   *\n+   * This method first checks if the children have already been retrieved, and if not, then\n+   * retrieves them.\n+\n+   * @param path the path to get the children for\n+   * @param mountTable the Alluxio mount table\n+   * @return the child statuses that were stored in the cache, or null if the UFS couldn't list the\n+   *         statuses\n+   * @throws InvalidPathException when the table can't resolve the mount for the given URI\n+   */\n+  @Nullable\n+  private Collection<UfsStatus> getChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    MountTable.Resolution resolution = mountTable.resolve(path);\n+    AlluxioURI ufsUri = resolution.getUri();\n+    try (CloseableResource<UnderFileSystem> ufsResource = resolution.acquireUfsResource()) {\n+      UnderFileSystem ufs = ufsResource.get();\n+      UfsStatus[] statuses = ufs.listStatus(ufsUri.toString());\n+      if (statuses == null) {\n+        return null;\n+      }\n+      children = Arrays.asList(statuses);\n+      addChildren(path, children);\n+    } catch (IllegalArgumentException | IOException e) {\n+      LOG.debug(\"Failed to add status to cache\", e);\n+    }\n+    return children;\n+  }\n+\n+  /**\n+   * Get the child {@link UfsStatus}es from a given {@link AlluxioURI}.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> getChildren(AlluxioURI path) {\n+    return mChildren.get(path);\n+  }\n+\n+  /**\n+   * Submit a request to asynchronously fetch the statuses corresponding to a given directory.\n+   *\n+   * Retrieve any fetched statuses by calling {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable)}\n+   * with the same Alluxio path.\n+   *\n+   * If no {@link ExecutorService} was provided to this object before instantiation, this method is\n+   * a no-op.\n+   *\n+   * @param path the path to prefetch\n+   * @param mountTable the Alluxio mount table\n+   */\n+  public void prefetchChildren(AlluxioURI path, MountTable mountTable) {\n+    if (mPrefetchExecutor == null) {\n+      return;\n+    }\n+    try {\n+      Future<Collection<UfsStatus>> fute =\n+          mPrefetchExecutor.submit(() -> getChildrenIfAbsent(path, mountTable));\n+      Future<Collection<UfsStatus>> prev = mActivePrefetchJobs.put(path, fute);\n+      if (prev != null) {\n+        prev.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMjUyNg=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjczOTY5OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTo0MDozOFrOGO7UOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNjowMVrOGO-6tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNTA4Mw==", "bodyText": "call this forceSync?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418305083", "createdAt": "2020-04-30T21:40:38Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDA4Nw==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418364087", "createdAt": "2020-05-01T00:36:01Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNTA4Mw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjc0NDg0OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTo0MjozMFrOGO7XVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNTo1OFrOGO-6rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNTg3Ng==", "bodyText": "Would pendingPaths is more descriptive?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418305876", "createdAt": "2020-04-30T21:42:30Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MDc3NQ==", "bodyText": "yeah, i like that one better :D", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418350775", "createdAt": "2020-04-30T23:48:15Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNTg3Ng=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDA3OA==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418364078", "createdAt": "2020-05-01T00:35:58Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNTg3Ng=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjgwNjU5OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjowNTowNVrOGO789A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNTo1M1rOGO-6pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNTUwOA==", "bodyText": "Does this have to be all caps?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418315508", "createdAt": "2020-04-30T22:05:05Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDA2OA==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418364068", "createdAt": "2020-05-01T00:35:53Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNTUwOA=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjgwODU3OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjowNTo1NlrOGO7-Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjo0MDoxOFrOGO8yVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNTgzMQ==", "bodyText": "why remove the status?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418315831", "createdAt": "2020-04-30T22:05:56Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyOTE3Mw==", "bodyText": "This will drop all references to the statuses allowing the JVM to GC it. If we don't remove it then for a huge namespace the statusCache can become large", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418329173", "createdAt": "2020-04-30T22:40:18Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNTgzMQ=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 257}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjgxMDQwOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjowNjozM1rOGO7_RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNTo0MVrOGO-6bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNjEwMQ==", "bodyText": "Please add the root path to message", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418316101", "createdAt": "2020-04-30T22:06:33Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDAxMw==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418364013", "createdAt": "2020-05-01T00:35:41Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNjEwMQ=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 266}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjgxMzAzOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjowNzozMlrOGO8A4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNToxNFrOGO-54A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNjUxNQ==", "bodyText": "Please add root path to message", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418316515", "createdAt": "2020-04-30T22:07:32Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");\n+        break;\n+      }\n+      // There are still paths to process\n+      // First, remove any futures which have completed. Add to the sync path count if they sync'd\n+      // successfully\n+      while (true) {\n+        Future<Boolean> job = mSyncPathJobs.peek();\n+        if (job == null || !job.isDone()) {\n+          break;\n+        }\n+        // remove the job because we know it is done.\n+        if (mSyncPathJobs.poll() != job) {\n+          throw new IllegalStateException(\"Last node to be de-queued was not equal to the expected\"\n+              + \"head of queue\");\n+        }\n+        try {\n+          // we synced the path successfully\n+          if (job.get()) {\n+            syncPathCount++;\n+          }\n+        } catch (InterruptedException | ExecutionException e) {\n+          if (e instanceof  InterruptedException) {\n+            Thread.currentThread().interrupt();\n+          }\n+          LOG.warn(\"metadata sync job was interrupted while waiting for completion\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2Mzg3Mg==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418363872", "createdAt": "2020-05-01T00:35:14Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");\n+        break;\n+      }\n+      // There are still paths to process\n+      // First, remove any futures which have completed. Add to the sync path count if they sync'd\n+      // successfully\n+      while (true) {\n+        Future<Boolean> job = mSyncPathJobs.peek();\n+        if (job == null || !job.isDone()) {\n+          break;\n+        }\n+        // remove the job because we know it is done.\n+        if (mSyncPathJobs.poll() != job) {\n+          throw new IllegalStateException(\"Last node to be de-queued was not equal to the expected\"\n+              + \"head of queue\");\n+        }\n+        try {\n+          // we synced the path successfully\n+          if (job.get()) {\n+            syncPathCount++;\n+          }\n+        } catch (InterruptedException | ExecutionException e) {\n+          if (e instanceof  InterruptedException) {\n+            Thread.currentThread().interrupt();\n+          }\n+          LOG.warn(\"metadata sync job was interrupted while waiting for completion\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNjUxNQ=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 291}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjgxMzg3OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjowNzo1NlrOGO8BgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNToxOFrOGO-58g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNjY3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      if (e instanceof  InterruptedException) {\n          \n          \n            \n                      if (e instanceof InterruptedException) {", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418316672", "createdAt": "2020-04-30T22:07:56Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");\n+        break;\n+      }\n+      // There are still paths to process\n+      // First, remove any futures which have completed. Add to the sync path count if they sync'd\n+      // successfully\n+      while (true) {\n+        Future<Boolean> job = mSyncPathJobs.peek();\n+        if (job == null || !job.isDone()) {\n+          break;\n+        }\n+        // remove the job because we know it is done.\n+        if (mSyncPathJobs.poll() != job) {\n+          throw new IllegalStateException(\"Last node to be de-queued was not equal to the expected\"\n+              + \"head of queue\");\n+        }\n+        try {\n+          // we synced the path successfully\n+          if (job.get()) {\n+            syncPathCount++;\n+          }\n+        } catch (InterruptedException | ExecutionException e) {\n+          if (e instanceof  InterruptedException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2Mzg5MA==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418363890", "createdAt": "2020-05-01T00:35:18Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");\n+        break;\n+      }\n+      // There are still paths to process\n+      // First, remove any futures which have completed. Add to the sync path count if they sync'd\n+      // successfully\n+      while (true) {\n+        Future<Boolean> job = mSyncPathJobs.peek();\n+        if (job == null || !job.isDone()) {\n+          break;\n+        }\n+        // remove the job because we know it is done.\n+        if (mSyncPathJobs.poll() != job) {\n+          throw new IllegalStateException(\"Last node to be de-queued was not equal to the expected\"\n+              + \"head of queue\");\n+        }\n+        try {\n+          // we synced the path successfully\n+          if (job.get()) {\n+            syncPathCount++;\n+          }\n+        } catch (InterruptedException | ExecutionException e) {\n+          if (e instanceof  InterruptedException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNjY3Mg=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjgxNjI5OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjowODo1NFrOGO8DAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjo0Mjo1OVrOGO81tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNzA1OQ==", "bodyText": "if some of the tasks failed for some reason, will the count accounting still work? If I want to load a directory with 10 children, but 1 failed, will it still stop after all 10 finished (fail or succeed)?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418317059", "createdAt": "2020-04-30T22:08:54Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");\n+        break;\n+      }\n+      // There are still paths to process\n+      // First, remove any futures which have completed. Add to the sync path count if they sync'd\n+      // successfully\n+      while (true) {\n+        Future<Boolean> job = mSyncPathJobs.peek();\n+        if (job == null || !job.isDone()) {\n+          break;\n+        }\n+        // remove the job because we know it is done.\n+        if (mSyncPathJobs.poll() != job) {\n+          throw new IllegalStateException(\"Last node to be de-queued was not equal to the expected\"\n+              + \"head of queue\");\n+        }\n+        try {\n+          // we synced the path successfully\n+          if (job.get()) {\n+            syncPathCount++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzMDAzNg==", "bodyText": "Technically for more complicated directory structures it depends, (directory high up can fail, causing its children not to sync) but generally the accounting is only for paths which successfully synced. So if all paths fail, then this function returns false. If at least one path syncs, we return true.\nWe can keep track of the number of failed paths too and report them as debug logs?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418330036", "createdAt": "2020-04-30T22:42:59Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");\n+        break;\n+      }\n+      // There are still paths to process\n+      // First, remove any futures which have completed. Add to the sync path count if they sync'd\n+      // successfully\n+      while (true) {\n+        Future<Boolean> job = mSyncPathJobs.peek();\n+        if (job == null || !job.isDone()) {\n+          break;\n+        }\n+        // remove the job because we know it is done.\n+        if (mSyncPathJobs.poll() != job) {\n+          throw new IllegalStateException(\"Last node to be de-queued was not equal to the expected\"\n+              + \"head of queue\");\n+        }\n+        try {\n+          // we synced the path successfully\n+          if (job.get()) {\n+            syncPathCount++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNzA1OQ=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 285}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjgxOTEwOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjowOTo1MFrOGO8Eiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNToyNVrOGO-6DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNzQ1MQ==", "bodyText": "debug logging?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418317451", "createdAt": "2020-04-30T22:09:50Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");\n+        break;\n+      }\n+      // There are still paths to process\n+      // First, remove any futures which have completed. Add to the sync path count if they sync'd\n+      // successfully\n+      while (true) {\n+        Future<Boolean> job = mSyncPathJobs.peek();\n+        if (job == null || !job.isDone()) {\n+          break;\n+        }\n+        // remove the job because we know it is done.\n+        if (mSyncPathJobs.poll() != job) {\n+          throw new IllegalStateException(\"Last node to be de-queued was not equal to the expected\"\n+              + \"head of queue\");\n+        }\n+        try {\n+          // we synced the path successfully\n+          if (job.get()) {\n+            syncPathCount++;\n+          }\n+        } catch (InterruptedException | ExecutionException e) {\n+          if (e instanceof  InterruptedException) {\n+            Thread.currentThread().interrupt();\n+          }\n+          LOG.warn(\"metadata sync job was interrupted while waiting for completion\");\n+        }\n+      }\n+\n+      // When using descendant type of ONE, we need to stop prematurely.\n+      if (stopNum != -1 && syncPathCount > stopNum) {\n+        break;\n+      }\n+\n+      // We can submit up to ( max_concurrency - <jobs queue size>) jobs back into the queue\n+      int submissions = mConcurrencyLevel - mSyncPathJobs.size();\n+      for (int i = 0; i < submissions; i++) {\n+        AlluxioURI path = mSyncMetadataQ.poll();\n+        if (path == null) {\n+          // no paths left to sync\n+          break;\n+        }\n+        Future<Boolean> job = mMetadataSyncService.submit(() -> processSyncPath(path));\n+        mSyncPathJobs.offer(job);\n+      }\n+      // After submitting all jobs wait for the job at the head of the queue to finish.\n+      Future<Boolean> oldestJob = mSyncPathJobs.peek();\n+      if (oldestJob == null) { // There might not be any jobs, restart the loop.\n+        continue;\n+      }\n+      try {\n+        oldestJob.get(); // block until the oldest job finished.\n+      } catch (InterruptedException | ExecutionException e) {\n+        if (e instanceof InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        LOG.warn(\"Interrupted while waiting for metadata sync job to finish\", e);\n+      }\n+    }\n+    LOG.info(\"TRACING - Synced {} paths\", syncPathCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MzkxNw==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418363917", "createdAt": "2020-05-01T00:35:25Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");\n+        break;\n+      }\n+      // There are still paths to process\n+      // First, remove any futures which have completed. Add to the sync path count if they sync'd\n+      // successfully\n+      while (true) {\n+        Future<Boolean> job = mSyncPathJobs.peek();\n+        if (job == null || !job.isDone()) {\n+          break;\n+        }\n+        // remove the job because we know it is done.\n+        if (mSyncPathJobs.poll() != job) {\n+          throw new IllegalStateException(\"Last node to be de-queued was not equal to the expected\"\n+              + \"head of queue\");\n+        }\n+        try {\n+          // we synced the path successfully\n+          if (job.get()) {\n+            syncPathCount++;\n+          }\n+        } catch (InterruptedException | ExecutionException e) {\n+          if (e instanceof  InterruptedException) {\n+            Thread.currentThread().interrupt();\n+          }\n+          LOG.warn(\"metadata sync job was interrupted while waiting for completion\");\n+        }\n+      }\n+\n+      // When using descendant type of ONE, we need to stop prematurely.\n+      if (stopNum != -1 && syncPathCount > stopNum) {\n+        break;\n+      }\n+\n+      // We can submit up to ( max_concurrency - <jobs queue size>) jobs back into the queue\n+      int submissions = mConcurrencyLevel - mSyncPathJobs.size();\n+      for (int i = 0; i < submissions; i++) {\n+        AlluxioURI path = mSyncMetadataQ.poll();\n+        if (path == null) {\n+          // no paths left to sync\n+          break;\n+        }\n+        Future<Boolean> job = mMetadataSyncService.submit(() -> processSyncPath(path));\n+        mSyncPathJobs.offer(job);\n+      }\n+      // After submitting all jobs wait for the job at the head of the queue to finish.\n+      Future<Boolean> oldestJob = mSyncPathJobs.peek();\n+      if (oldestJob == null) { // There might not be any jobs, restart the loop.\n+        continue;\n+      }\n+      try {\n+        oldestJob.get(); // block until the oldest job finished.\n+      } catch (InterruptedException | ExecutionException e) {\n+        if (e instanceof InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        LOG.warn(\"Interrupted while waiting for metadata sync job to finish\", e);\n+      }\n+    }\n+    LOG.info(\"TRACING - Synced {} paths\", syncPathCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNzQ1MQ=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 325}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjgyMDgzOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjoxMDoyNVrOGO8Ffw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjo0OToxNFrOGO8-Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNzY5NQ==", "bodyText": "Does it matter if the oldest job finishes first or last? How would that affect behavior?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418317695", "createdAt": "2020-04-30T22:10:25Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");\n+        break;\n+      }\n+      // There are still paths to process\n+      // First, remove any futures which have completed. Add to the sync path count if they sync'd\n+      // successfully\n+      while (true) {\n+        Future<Boolean> job = mSyncPathJobs.peek();\n+        if (job == null || !job.isDone()) {\n+          break;\n+        }\n+        // remove the job because we know it is done.\n+        if (mSyncPathJobs.poll() != job) {\n+          throw new IllegalStateException(\"Last node to be de-queued was not equal to the expected\"\n+              + \"head of queue\");\n+        }\n+        try {\n+          // we synced the path successfully\n+          if (job.get()) {\n+            syncPathCount++;\n+          }\n+        } catch (InterruptedException | ExecutionException e) {\n+          if (e instanceof  InterruptedException) {\n+            Thread.currentThread().interrupt();\n+          }\n+          LOG.warn(\"metadata sync job was interrupted while waiting for completion\");\n+        }\n+      }\n+\n+      // When using descendant type of ONE, we need to stop prematurely.\n+      if (stopNum != -1 && syncPathCount > stopNum) {\n+        break;\n+      }\n+\n+      // We can submit up to ( max_concurrency - <jobs queue size>) jobs back into the queue\n+      int submissions = mConcurrencyLevel - mSyncPathJobs.size();\n+      for (int i = 0; i < submissions; i++) {\n+        AlluxioURI path = mSyncMetadataQ.poll();\n+        if (path == null) {\n+          // no paths left to sync\n+          break;\n+        }\n+        Future<Boolean> job = mMetadataSyncService.submit(() -> processSyncPath(path));\n+        mSyncPathJobs.offer(job);\n+      }\n+      // After submitting all jobs wait for the job at the head of the queue to finish.\n+      Future<Boolean> oldestJob = mSyncPathJobs.peek();\n+      if (oldestJob == null) { // There might not be any jobs, restart the loop.\n+        continue;\n+      }\n+      try {\n+        oldestJob.get(); // block until the oldest job finished.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 317}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzMjIyMg==", "bodyText": "I just take the oldest job submitted, because as long as the threadpool uses a fair queueing policy for running jobs, it has the highest probability of being completed before other jobs. If the oldest job runs slower, it can theoretically prevent other tasks from being submitted.\nIn a follow-up I'd actually like to design a ThreadPoolExecutor that doesn't need this control logic and can simply just iterate over the queue of pending paths and submit them. My idea is that the executor pool can be shared in a limited manner, so that you can lease out a portion of the threads. ex:\nExecutorService mainExecutor = Executors.newCachedThreadpool(64);\n\nsharedExecutor = mainExecutor.lease(4); // executor service that uses the pool backing mainExecutor, that can have up to 4 tasks running concurrently.\nsharedExecutor = mainExecutor.lease(32); // executor service that uses the pool backing mainExecutor, that can have up to 32 tasks running concurrently.\nWe can use a semaphore to block submitting tasks to the executor when they are already runing. Completely negates all the control logic of this thread. I haven't written the executor yet. This is all ideas yet. I don't plan on implementing it for this PR", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418332222", "createdAt": "2020-04-30T22:49:14Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");\n+        break;\n+      }\n+      // There are still paths to process\n+      // First, remove any futures which have completed. Add to the sync path count if they sync'd\n+      // successfully\n+      while (true) {\n+        Future<Boolean> job = mSyncPathJobs.peek();\n+        if (job == null || !job.isDone()) {\n+          break;\n+        }\n+        // remove the job because we know it is done.\n+        if (mSyncPathJobs.poll() != job) {\n+          throw new IllegalStateException(\"Last node to be de-queued was not equal to the expected\"\n+              + \"head of queue\");\n+        }\n+        try {\n+          // we synced the path successfully\n+          if (job.get()) {\n+            syncPathCount++;\n+          }\n+        } catch (InterruptedException | ExecutionException e) {\n+          if (e instanceof  InterruptedException) {\n+            Thread.currentThread().interrupt();\n+          }\n+          LOG.warn(\"metadata sync job was interrupted while waiting for completion\");\n+        }\n+      }\n+\n+      // When using descendant type of ONE, we need to stop prematurely.\n+      if (stopNum != -1 && syncPathCount > stopNum) {\n+        break;\n+      }\n+\n+      // We can submit up to ( max_concurrency - <jobs queue size>) jobs back into the queue\n+      int submissions = mConcurrencyLevel - mSyncPathJobs.size();\n+      for (int i = 0; i < submissions; i++) {\n+        AlluxioURI path = mSyncMetadataQ.poll();\n+        if (path == null) {\n+          // no paths left to sync\n+          break;\n+        }\n+        Future<Boolean> job = mMetadataSyncService.submit(() -> processSyncPath(path));\n+        mSyncPathJobs.offer(job);\n+      }\n+      // After submitting all jobs wait for the job at the head of the queue to finish.\n+      Future<Boolean> oldestJob = mSyncPathJobs.peek();\n+      if (oldestJob == null) { // There might not be any jobs, restart the loop.\n+        continue;\n+      }\n+      try {\n+        oldestJob.get(); // block until the oldest job finished.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNzY5NQ=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 317}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjgyMTA4OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjoxMDozMlrOGO8FqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNTozMFrOGO-6Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNzczNw==", "bodyText": "add root path to message", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418317737", "createdAt": "2020-04-30T22:10:32Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");\n+        break;\n+      }\n+      // There are still paths to process\n+      // First, remove any futures which have completed. Add to the sync path count if they sync'd\n+      // successfully\n+      while (true) {\n+        Future<Boolean> job = mSyncPathJobs.peek();\n+        if (job == null || !job.isDone()) {\n+          break;\n+        }\n+        // remove the job because we know it is done.\n+        if (mSyncPathJobs.poll() != job) {\n+          throw new IllegalStateException(\"Last node to be de-queued was not equal to the expected\"\n+              + \"head of queue\");\n+        }\n+        try {\n+          // we synced the path successfully\n+          if (job.get()) {\n+            syncPathCount++;\n+          }\n+        } catch (InterruptedException | ExecutionException e) {\n+          if (e instanceof  InterruptedException) {\n+            Thread.currentThread().interrupt();\n+          }\n+          LOG.warn(\"metadata sync job was interrupted while waiting for completion\");\n+        }\n+      }\n+\n+      // When using descendant type of ONE, we need to stop prematurely.\n+      if (stopNum != -1 && syncPathCount > stopNum) {\n+        break;\n+      }\n+\n+      // We can submit up to ( max_concurrency - <jobs queue size>) jobs back into the queue\n+      int submissions = mConcurrencyLevel - mSyncPathJobs.size();\n+      for (int i = 0; i < submissions; i++) {\n+        AlluxioURI path = mSyncMetadataQ.poll();\n+        if (path == null) {\n+          // no paths left to sync\n+          break;\n+        }\n+        Future<Boolean> job = mMetadataSyncService.submit(() -> processSyncPath(path));\n+        mSyncPathJobs.offer(job);\n+      }\n+      // After submitting all jobs wait for the job at the head of the queue to finish.\n+      Future<Boolean> oldestJob = mSyncPathJobs.peek();\n+      if (oldestJob == null) { // There might not be any jobs, restart the loop.\n+        continue;\n+      }\n+      try {\n+        oldestJob.get(); // block until the oldest job finished.\n+      } catch (InterruptedException | ExecutionException e) {\n+        if (e instanceof InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        LOG.warn(\"Interrupted while waiting for metadata sync job to finish\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 322}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2Mzk1MQ==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418363951", "createdAt": "2020-05-01T00:35:30Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");\n+        break;\n+      }\n+      // There are still paths to process\n+      // First, remove any futures which have completed. Add to the sync path count if they sync'd\n+      // successfully\n+      while (true) {\n+        Future<Boolean> job = mSyncPathJobs.peek();\n+        if (job == null || !job.isDone()) {\n+          break;\n+        }\n+        // remove the job because we know it is done.\n+        if (mSyncPathJobs.poll() != job) {\n+          throw new IllegalStateException(\"Last node to be de-queued was not equal to the expected\"\n+              + \"head of queue\");\n+        }\n+        try {\n+          // we synced the path successfully\n+          if (job.get()) {\n+            syncPathCount++;\n+          }\n+        } catch (InterruptedException | ExecutionException e) {\n+          if (e instanceof  InterruptedException) {\n+            Thread.currentThread().interrupt();\n+          }\n+          LOG.warn(\"metadata sync job was interrupted while waiting for completion\");\n+        }\n+      }\n+\n+      // When using descendant type of ONE, we need to stop prematurely.\n+      if (stopNum != -1 && syncPathCount > stopNum) {\n+        break;\n+      }\n+\n+      // We can submit up to ( max_concurrency - <jobs queue size>) jobs back into the queue\n+      int submissions = mConcurrencyLevel - mSyncPathJobs.size();\n+      for (int i = 0; i < submissions; i++) {\n+        AlluxioURI path = mSyncMetadataQ.poll();\n+        if (path == null) {\n+          // no paths left to sync\n+          break;\n+        }\n+        Future<Boolean> job = mMetadataSyncService.submit(() -> processSyncPath(path));\n+        mSyncPathJobs.offer(job);\n+      }\n+      // After submitting all jobs wait for the job at the head of the queue to finish.\n+      Future<Boolean> oldestJob = mSyncPathJobs.peek();\n+      if (oldestJob == null) { // There might not be any jobs, restart the loop.\n+        continue;\n+      }\n+      try {\n+        oldestJob.get(); // block until the oldest job finished.\n+      } catch (InterruptedException | ExecutionException e) {\n+        if (e instanceof InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        LOG.warn(\"Interrupted while waiting for metadata sync job to finish\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNzczNw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 322}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjgyMjg1OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjoxMToxNVrOGO8GwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNTozM1rOGO-6OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxODAxNw==", "bodyText": "all caps?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418318017", "createdAt": "2020-04-30T22:11:15Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");\n+        break;\n+      }\n+      // There are still paths to process\n+      // First, remove any futures which have completed. Add to the sync path count if they sync'd\n+      // successfully\n+      while (true) {\n+        Future<Boolean> job = mSyncPathJobs.peek();\n+        if (job == null || !job.isDone()) {\n+          break;\n+        }\n+        // remove the job because we know it is done.\n+        if (mSyncPathJobs.poll() != job) {\n+          throw new IllegalStateException(\"Last node to be de-queued was not equal to the expected\"\n+              + \"head of queue\");\n+        }\n+        try {\n+          // we synced the path successfully\n+          if (job.get()) {\n+            syncPathCount++;\n+          }\n+        } catch (InterruptedException | ExecutionException e) {\n+          if (e instanceof  InterruptedException) {\n+            Thread.currentThread().interrupt();\n+          }\n+          LOG.warn(\"metadata sync job was interrupted while waiting for completion\");\n+        }\n+      }\n+\n+      // When using descendant type of ONE, we need to stop prematurely.\n+      if (stopNum != -1 && syncPathCount > stopNum) {\n+        break;\n+      }\n+\n+      // We can submit up to ( max_concurrency - <jobs queue size>) jobs back into the queue\n+      int submissions = mConcurrencyLevel - mSyncPathJobs.size();\n+      for (int i = 0; i < submissions; i++) {\n+        AlluxioURI path = mSyncMetadataQ.poll();\n+        if (path == null) {\n+          // no paths left to sync\n+          break;\n+        }\n+        Future<Boolean> job = mMetadataSyncService.submit(() -> processSyncPath(path));\n+        mSyncPathJobs.offer(job);\n+      }\n+      // After submitting all jobs wait for the job at the head of the queue to finish.\n+      Future<Boolean> oldestJob = mSyncPathJobs.peek();\n+      if (oldestJob == null) { // There might not be any jobs, restart the loop.\n+        continue;\n+      }\n+      try {\n+        oldestJob.get(); // block until the oldest job finished.\n+      } catch (InterruptedException | ExecutionException e) {\n+        if (e instanceof InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        LOG.warn(\"Interrupted while waiting for metadata sync job to finish\", e);\n+      }\n+    }\n+    LOG.info(\"TRACING - Synced {} paths\", syncPathCount);\n+    mStatusCache.cancelAllPrefetch();\n+    mSyncPathJobs.forEach(f -> f.cancel(true));\n+    return syncPathCount > 0;\n+  }\n+\n+  /**\n+   * Process a path to sync.\n+   *\n+   * This can update metadata for the inode, delete the inode, and/or queue any children that should\n+   * be synced as well.\n+   *\n+   * @param path The path to sync\n+   * @return true if this path was synced\n+   */\n+  private boolean processSyncPath(AlluxioURI path) {\n+    if (path == null) {\n+      return false;\n+    }\n+    LockingScheme scheme;\n+    if (mShouldSync) {\n+      scheme = new LockingScheme(path, LockPattern.READ, true);\n+    } else {\n+      scheme = new LockingScheme(path, LockPattern.READ, mSyncOptions,\n+          mUfsSyncPathCache, mIsGetFileInfo);\n+    }\n+\n+    if (!scheme.shouldSync() && !mShouldSync) {\n+      return false;\n+    }\n+    try (LockedInodePath inodePath = mInodeTree.tryLockInodePath(scheme)) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Thread syncing {} was interrupted before completion\", inodePath.getUri());\n+        return false;\n+      }\n+      syncInodeMetadata(inodePath);\n+      return true;\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 365}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2Mzk2MQ==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r418363961", "createdAt": "2020-05-01T00:35:33Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -0,0 +1,810 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.WriteType;\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.exception.BlockInfoException;\n+import alluxio.exception.DirectoryNotEmptyException;\n+import alluxio.exception.FileAlreadyCompletedException;\n+import alluxio.exception.FileAlreadyExistsException;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.exception.InvalidFileSizeException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.file.options.DescendantType;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.FileSystemMasterCommonPOptions;\n+import alluxio.grpc.GrpcUtils;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.master.file.contexts.CompleteFileContext;\n+import alluxio.master.file.contexts.CreateDirectoryContext;\n+import alluxio.master.file.contexts.CreateFileContext;\n+import alluxio.master.file.contexts.DeleteContext;\n+import alluxio.master.file.contexts.GetStatusContext;\n+import alluxio.master.file.contexts.LoadMetadataContext;\n+import alluxio.master.file.contexts.SetAttributeContext;\n+import alluxio.master.file.meta.Inode;\n+import alluxio.master.file.meta.InodeFile;\n+import alluxio.master.file.meta.InodeLockManager;\n+import alluxio.master.file.meta.InodeTree;\n+import alluxio.master.file.meta.InodeTree.LockPattern;\n+import alluxio.master.file.meta.LockedInodePath;\n+import alluxio.master.file.meta.LockingScheme;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.master.file.meta.UfsSyncPathCache;\n+import alluxio.master.file.meta.UfsSyncUtils;\n+import alluxio.master.metastore.ReadOnlyInodeStore;\n+import alluxio.resource.CloseableResource;\n+import alluxio.security.authorization.AccessControlList;\n+import alluxio.security.authorization.DefaultAccessControlList;\n+import alluxio.security.authorization.Mode;\n+import alluxio.underfs.Fingerprint;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UfsStatusCache;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.interfaces.Scoped;\n+import alluxio.util.io.PathUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * This class is responsible for maintaining the logic which surrounds syncing metadata between\n+ * Alluxio and its UFSes.\n+ *\n+ * This implementation uses a BFS-based approach to crawl the inode tree. In order to speed up\n+ * the sync process we use an {@link ExecutorService} which we submit inode paths to using\n+ * {@link #processSyncPath(AlluxioURI)}. The processing of inode paths will discover new paths to\n+ * sync depending on the {@link #mDescendantType}. Syncing is finished when all submitted tasks\n+ * are completed and there are no new inodes left in the queue.\n+ *\n+ * Syncing inode metadata requires making calls to the UFS. This implementation will schedule UFS\n+ * RPCs with the {@link UfsStatusCache#prefetchChildren(AlluxioURI, MountTable)}. Then, once the\n+ * inode begins processing, it can retrieve the results. After processing, it can then remove its\n+ * {@link UfsStatus} from the cache. This strategy helps reduce memory pressure on the master\n+ * while performing a sync for a large tree. Additionally, by using a prefetch mechanism we can\n+ * concurrently process other inodes while waiting for UFS RPCs to complete.\n+ *\n+ * With regards to locking, this class expects to be able to take a write lock on any inode, and\n+ * then subsequently downgrades or unlocks after the sync is finished. Even though we use\n+ * {@link java.util.concurrent.locks.ReentrantReadWriteLock}, because we concurrently process\n+ * inodes on separate threads, we cannot utilize the reetrnant behavior. The implications of\n+ * that mean the caller of this class must not hold a write while calling {@link #sync()}.\n+ *\n+ * A user of this class is expected to create a new instance for each path that they would like\n+ * to process. This is because the Lock on the {@link #mRootPath} may be changed after calling\n+ * {@link #sync()}.\n+ *\n+ */\n+public class InodeSyncStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(InodeSyncStream.class);\n+\n+  /** The root path. Should be locked with a write lock. */\n+  private final LockedInodePath mRootPath;\n+\n+  /** A {@link UfsSyncPathCache} maintained from the {@link DefaultFileSystemMaster}. */\n+  private final UfsSyncPathCache mUfsSyncPathCache;\n+\n+  /** Object holding the {@link UfsStatus}es which may be required for syncing. */\n+  private final UfsStatusCache mStatusCache;\n+\n+  /** Inode tree to lock new paths. */\n+  private final InodeTree mInodeTree;\n+\n+  /** Determines how deep in the tree we need to load. */\n+  private final DescendantType mDescendantType;\n+\n+  /** The {@link RpcContext} from the caller. */\n+  private final RpcContext mRpcContext;\n+\n+  /** The inode store to look up children. */\n+  private final ReadOnlyInodeStore mInodeStore;\n+\n+  /** The mount table for looking up the proper UFS client based on the Alluxio path. */\n+  private final MountTable mMountTable;\n+\n+  /** The lock manager used to try acquiring the persisting lock. */\n+  private final InodeLockManager mInodeLockManager;\n+\n+  /** The FS master creating this object. */\n+  private final DefaultFileSystemMaster mFsMaster;\n+\n+  /** Set this to true to force a sync regardless of the UfsPathCache. */\n+  private final boolean mShouldSync;\n+\n+  /** The sync options on the RPC.  */\n+  private final FileSystemMasterCommonPOptions mSyncOptions;\n+\n+  /**\n+   * Whether the caller is {@link FileSystemMaster#getFileInfo(AlluxioURI, GetStatusContext)}.\n+   * This is used for the {@link #mUfsSyncPathCache}.\n+   */\n+  private final boolean mIsGetFileInfo;\n+\n+  /** Whether to only read+create metadata from the UFS, or to update metadata as well. */\n+  private final boolean mLoadOnly;\n+\n+  /** Queue used to keep track of paths that still need to be synced. */\n+  private final ConcurrentLinkedQueue<AlluxioURI> mSyncMetadataQ;\n+\n+  /** Queue of paths that have been submitted to the executor. */\n+  private final Queue<Future<Boolean>> mSyncPathJobs;\n+\n+  /** The executor enabling concurrent processing. */\n+  private final ExecutorService mMetadataSyncService;\n+\n+  /** The maximum number of concurrent paths that can be syncing at any moment. */\n+  private final int mConcurrencyLevel =\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL);\n+\n+  /**\n+   * Create a new instance of {@link InodeSyncStream}.\n+   *\n+   * The root path should be already locked with {@link LockPattern#WRITE_EDGE} unless the user is\n+   * only planning on loading metadata. The desired pattern should always be\n+   * {@link LockPattern#READ}.\n+   *\n+   * It is an error to initiate sync without a WRITE_EDGE lock when loadOnly is {@code false}.\n+   * If loadOnly is set to {@code true}, then the the root path may have a read lock.\n+   *\n+   * @param rootPath The root path to begin syncing\n+   * @param concurrencyService executor used to process paths concurrently\n+   * @param fsMaster the {@link FileSystemMaster} calling this method\n+   * @param inodeTree the {@link InodeTree}\n+   * @param inodeStore the {@link alluxio.master.metastore.InodeStore}\n+   * @param inodeLockManager the {@link InodeLockManager}\n+   * @param mountTable the master's {@link MountTable}\n+   * @param rpcContext the caller's {@link RpcContext}\n+   * @param descendantType determines the number of descendant inodes to sync\n+   * @param ufsSyncPathCache the sync path cache to determine when inodes should be synced\n+   * @param options the RPC's {@link FileSystemMasterCommonPOptions}\n+   * @param isGetFileInfo whether the caller is {@link FileSystemMaster#getFileInfo}\n+   * @param forceSync whether to sync inode metadata no matter what\n+   * @param loadOnly whether to only load new metadata, rather than update existing metadata\n+   */\n+  public InodeSyncStream(LockedInodePath rootPath, ExecutorService concurrencyService,\n+      DefaultFileSystemMaster fsMaster, InodeTree inodeTree, ReadOnlyInodeStore inodeStore,\n+      InodeLockManager inodeLockManager, MountTable mountTable, RpcContext rpcContext,\n+      DescendantType descendantType, UfsSyncPathCache ufsSyncPathCache,\n+      FileSystemMasterCommonPOptions options, boolean isGetFileInfo, boolean forceSync,\n+      boolean loadOnly) {\n+    mDescendantType = descendantType;\n+    mFsMaster = fsMaster;\n+    mSyncMetadataQ = new ConcurrentLinkedQueue<>();\n+    mInodeLockManager = inodeLockManager;\n+    mInodeStore = inodeStore;\n+    mInodeTree = inodeTree;\n+    mMountTable = mountTable;\n+    mRpcContext = rpcContext;\n+    mStatusCache = new UfsStatusCache(fsMaster.mSyncPrefetchExecutor);\n+    mUfsSyncPathCache = ufsSyncPathCache;\n+    mShouldSync = forceSync;\n+    mRootPath = rootPath;\n+    mSyncOptions = options;\n+    mIsGetFileInfo = isGetFileInfo;\n+    mLoadOnly = loadOnly;\n+    mSyncPathJobs = new LinkedList<>();\n+    mMetadataSyncService = concurrencyService;\n+  }\n+\n+  /**\n+   * Sync the metadata according the the root path the stream was created with.\n+   *\n+   * @return true if at least one path was synced\n+   */\n+  public boolean sync() {\n+    // The high-level process for the syncing is:\n+    // 1. Given an Alluxio path, determine if it is not consistent with the corresponding UFS path.\n+    //     this means the UFS path does not exist, or has metadata which differs from Alluxio\n+    // 2. If only the metadata changed, update the inode with the new metadata\n+    // 3. If the path does not exist in the UFS, delete the inode in Alluxio\n+    // 4. If not deleted, load metadata from the UFS\n+    // 5. If a recursive sync, add children inodes to sync queue\n+    int syncPathCount = 0;\n+    int stopNum = -1; // stop syncing when we've processed this many paths. -1 for infinite\n+\n+    try {\n+      syncInodeMetadata(mRootPath);\n+      syncPathCount++;\n+      if (mDescendantType == DescendantType.ONE) {\n+        // If descendantType is ONE, then we shouldn't process any more paths except for those\n+        // currently in the queue\n+        stopNum = mSyncMetadataQ.size();\n+      }\n+\n+      // process the sync result for the original path\n+      try {\n+        mRootPath.traverse();\n+      } catch (InvalidPathException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);\n+    } finally {\n+      // regardless of the outcome, remove the UfsStatus for this path from the cache\n+      mStatusCache.remove(mRootPath.getUri());\n+      // downgrade so that if operations are parallelized, the lock on the root doesn't restrict\n+      // concurrent operations\n+      mRootPath.downgradeToPattern(LockPattern.READ);\n+    }\n+\n+    // Process any children after the root.\n+    while (!mSyncMetadataQ.isEmpty() || !mSyncPathJobs.isEmpty()) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Metadata syncing was interrupted before completion\");\n+        break;\n+      }\n+      // There are still paths to process\n+      // First, remove any futures which have completed. Add to the sync path count if they sync'd\n+      // successfully\n+      while (true) {\n+        Future<Boolean> job = mSyncPathJobs.peek();\n+        if (job == null || !job.isDone()) {\n+          break;\n+        }\n+        // remove the job because we know it is done.\n+        if (mSyncPathJobs.poll() != job) {\n+          throw new IllegalStateException(\"Last node to be de-queued was not equal to the expected\"\n+              + \"head of queue\");\n+        }\n+        try {\n+          // we synced the path successfully\n+          if (job.get()) {\n+            syncPathCount++;\n+          }\n+        } catch (InterruptedException | ExecutionException e) {\n+          if (e instanceof  InterruptedException) {\n+            Thread.currentThread().interrupt();\n+          }\n+          LOG.warn(\"metadata sync job was interrupted while waiting for completion\");\n+        }\n+      }\n+\n+      // When using descendant type of ONE, we need to stop prematurely.\n+      if (stopNum != -1 && syncPathCount > stopNum) {\n+        break;\n+      }\n+\n+      // We can submit up to ( max_concurrency - <jobs queue size>) jobs back into the queue\n+      int submissions = mConcurrencyLevel - mSyncPathJobs.size();\n+      for (int i = 0; i < submissions; i++) {\n+        AlluxioURI path = mSyncMetadataQ.poll();\n+        if (path == null) {\n+          // no paths left to sync\n+          break;\n+        }\n+        Future<Boolean> job = mMetadataSyncService.submit(() -> processSyncPath(path));\n+        mSyncPathJobs.offer(job);\n+      }\n+      // After submitting all jobs wait for the job at the head of the queue to finish.\n+      Future<Boolean> oldestJob = mSyncPathJobs.peek();\n+      if (oldestJob == null) { // There might not be any jobs, restart the loop.\n+        continue;\n+      }\n+      try {\n+        oldestJob.get(); // block until the oldest job finished.\n+      } catch (InterruptedException | ExecutionException e) {\n+        if (e instanceof InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        LOG.warn(\"Interrupted while waiting for metadata sync job to finish\", e);\n+      }\n+    }\n+    LOG.info(\"TRACING - Synced {} paths\", syncPathCount);\n+    mStatusCache.cancelAllPrefetch();\n+    mSyncPathJobs.forEach(f -> f.cancel(true));\n+    return syncPathCount > 0;\n+  }\n+\n+  /**\n+   * Process a path to sync.\n+   *\n+   * This can update metadata for the inode, delete the inode, and/or queue any children that should\n+   * be synced as well.\n+   *\n+   * @param path The path to sync\n+   * @return true if this path was synced\n+   */\n+  private boolean processSyncPath(AlluxioURI path) {\n+    if (path == null) {\n+      return false;\n+    }\n+    LockingScheme scheme;\n+    if (mShouldSync) {\n+      scheme = new LockingScheme(path, LockPattern.READ, true);\n+    } else {\n+      scheme = new LockingScheme(path, LockPattern.READ, mSyncOptions,\n+          mUfsSyncPathCache, mIsGetFileInfo);\n+    }\n+\n+    if (!scheme.shouldSync() && !mShouldSync) {\n+      return false;\n+    }\n+    try (LockedInodePath inodePath = mInodeTree.tryLockInodePath(scheme)) {\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Thread syncing {} was interrupted before completion\", inodePath.getUri());\n+        return false;\n+      }\n+      syncInodeMetadata(inodePath);\n+      return true;\n+    } catch (AccessControlException | BlockInfoException | FileAlreadyCompletedException\n+        | FileDoesNotExistException | InvalidFileSizeException | InvalidPathException\n+        | IOException e) {\n+      LOG.warn(\"FAILED TO SYNC METADATA: {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxODAxNw=="}, "originalCommit": {"oid": "aea2599ba2565e052e3871653282b3f22a325203"}, "originalPosition": 365}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTc4MzU5OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzowMTozNlrOGQJfGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDoxNzo0OFrOGQQkuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4NTgxNg==", "bodyText": "add path to message", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r419585816", "createdAt": "2020-05-04T17:01:36Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+import alluxio.util.LogUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses. If set to null, then\n+   *                         calls to {@link #prefetchChildren(AlluxioURI, MountTable)} will not\n+   *                         schedule any tasks.\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @return the previous status for the path if it existed, null otherwise\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  @Nullable\n+  public UfsStatus addStatus(AlluxioURI path, UfsStatus status) {\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+    return mStatuses.put(path, status);\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @return the previous set of children if the mapping existed, null otherwise\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    ConcurrentHashSet<UfsStatus> set = new ConcurrentHashSet<>();\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+      set.add(child);\n+    });\n+    return mChildren.put(path, set);\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.get(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LogUtils.warnWithException(LOG, \"Failed to get result for prefetch job on alluxio path {}\",\n+            path, e);\n+        if (e instanceof InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        throw new IOException(e);\n+      } finally {\n+        mActivePrefetchJobs.remove(path);\n+      }\n+    }\n+    if (useFallback) {\n+      return getChildrenIfAbsent(path, mountTable);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path stores them in the cache, then returns them.\n+   *\n+   * Will always return statuses from the UFS whether or not they exist in the cache, and whether\n+   * a prefetch job was scheduled or not.\n+   *\n+   * @param path the Alluxio path\n+   * @param mountTable the Alluxio mount table\n+   * @return child UFS statuses of the alluxio path\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws IOException, InvalidPathException {\n+    return fetchChildrenIfAbsent(path, mountTable, true);\n+  }\n+\n+  /**\n+   * Retrieves the child UFS statuses for a given path and stores them in the cache.\n+   *\n+   * This method first checks if the children have already been retrieved, and if not, then\n+   * retrieves them.\n+\n+   * @param path the path to get the children for\n+   * @param mountTable the Alluxio mount table\n+   * @return the child statuses that were stored in the cache, or null if the UFS couldn't list the\n+   *         statuses\n+   * @throws InvalidPathException when the table can't resolve the mount for the given URI\n+   */\n+  @Nullable\n+  private Collection<UfsStatus> getChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    MountTable.Resolution resolution = mountTable.resolve(path);\n+    AlluxioURI ufsUri = resolution.getUri();\n+    try (CloseableResource<UnderFileSystem> ufsResource = resolution.acquireUfsResource()) {\n+      UnderFileSystem ufs = ufsResource.get();\n+      UfsStatus[] statuses = ufs.listStatus(ufsUri.toString());\n+      if (statuses == null) {\n+        return null;\n+      }\n+      children = Arrays.asList(statuses);\n+      addChildren(path, children);\n+    } catch (IllegalArgumentException | IOException e) {\n+      LOG.debug(\"Failed to add status to cache\", e);\n+    }\n+    return children;\n+  }\n+\n+  /**\n+   * Get the child {@link UfsStatus}es from a given {@link AlluxioURI}.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> getChildren(AlluxioURI path) {\n+    return mChildren.get(path);\n+  }\n+\n+  /**\n+   * Submit a request to asynchronously fetch the statuses corresponding to a given directory.\n+   *\n+   * Retrieve any fetched statuses by calling {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable)}\n+   * with the same Alluxio path.\n+   *\n+   * If no {@link ExecutorService} was provided to this object before instantiation, this method is\n+   * a no-op.\n+   *\n+   * @param path the path to prefetch\n+   * @param mountTable the Alluxio mount table\n+   */\n+  public void prefetchChildren(AlluxioURI path, MountTable mountTable) {\n+    if (mPrefetchExecutor == null) {\n+      return;\n+    }\n+    try {\n+      Future<Collection<UfsStatus>> job =\n+          mPrefetchExecutor.submit(() -> getChildrenIfAbsent(path, mountTable));\n+      Future<Collection<UfsStatus>> prev = mActivePrefetchJobs.put(path, job);\n+      if (prev != null) {\n+        prev.cancel(true);\n+      }\n+    } catch (RejectedExecutionException e) {\n+      LOG.debug(\"Failed to submit prefetch job\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8a137d843dabc6cb4b38fb5ae7a324cae6fec4"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwMTk0NQ==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r419701945", "createdAt": "2020-05-04T20:17:48Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+import alluxio.util.LogUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses. If set to null, then\n+   *                         calls to {@link #prefetchChildren(AlluxioURI, MountTable)} will not\n+   *                         schedule any tasks.\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @return the previous status for the path if it existed, null otherwise\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  @Nullable\n+  public UfsStatus addStatus(AlluxioURI path, UfsStatus status) {\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+    return mStatuses.put(path, status);\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @return the previous set of children if the mapping existed, null otherwise\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    ConcurrentHashSet<UfsStatus> set = new ConcurrentHashSet<>();\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+      set.add(child);\n+    });\n+    return mChildren.put(path, set);\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.get(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LogUtils.warnWithException(LOG, \"Failed to get result for prefetch job on alluxio path {}\",\n+            path, e);\n+        if (e instanceof InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        throw new IOException(e);\n+      } finally {\n+        mActivePrefetchJobs.remove(path);\n+      }\n+    }\n+    if (useFallback) {\n+      return getChildrenIfAbsent(path, mountTable);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path stores them in the cache, then returns them.\n+   *\n+   * Will always return statuses from the UFS whether or not they exist in the cache, and whether\n+   * a prefetch job was scheduled or not.\n+   *\n+   * @param path the Alluxio path\n+   * @param mountTable the Alluxio mount table\n+   * @return child UFS statuses of the alluxio path\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws IOException, InvalidPathException {\n+    return fetchChildrenIfAbsent(path, mountTable, true);\n+  }\n+\n+  /**\n+   * Retrieves the child UFS statuses for a given path and stores them in the cache.\n+   *\n+   * This method first checks if the children have already been retrieved, and if not, then\n+   * retrieves them.\n+\n+   * @param path the path to get the children for\n+   * @param mountTable the Alluxio mount table\n+   * @return the child statuses that were stored in the cache, or null if the UFS couldn't list the\n+   *         statuses\n+   * @throws InvalidPathException when the table can't resolve the mount for the given URI\n+   */\n+  @Nullable\n+  private Collection<UfsStatus> getChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    MountTable.Resolution resolution = mountTable.resolve(path);\n+    AlluxioURI ufsUri = resolution.getUri();\n+    try (CloseableResource<UnderFileSystem> ufsResource = resolution.acquireUfsResource()) {\n+      UnderFileSystem ufs = ufsResource.get();\n+      UfsStatus[] statuses = ufs.listStatus(ufsUri.toString());\n+      if (statuses == null) {\n+        return null;\n+      }\n+      children = Arrays.asList(statuses);\n+      addChildren(path, children);\n+    } catch (IllegalArgumentException | IOException e) {\n+      LOG.debug(\"Failed to add status to cache\", e);\n+    }\n+    return children;\n+  }\n+\n+  /**\n+   * Get the child {@link UfsStatus}es from a given {@link AlluxioURI}.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> getChildren(AlluxioURI path) {\n+    return mChildren.get(path);\n+  }\n+\n+  /**\n+   * Submit a request to asynchronously fetch the statuses corresponding to a given directory.\n+   *\n+   * Retrieve any fetched statuses by calling {@link #fetchChildrenIfAbsent(AlluxioURI, MountTable)}\n+   * with the same Alluxio path.\n+   *\n+   * If no {@link ExecutorService} was provided to this object before instantiation, this method is\n+   * a no-op.\n+   *\n+   * @param path the path to prefetch\n+   * @param mountTable the Alluxio mount table\n+   */\n+  public void prefetchChildren(AlluxioURI path, MountTable mountTable) {\n+    if (mPrefetchExecutor == null) {\n+      return;\n+    }\n+    try {\n+      Future<Collection<UfsStatus>> job =\n+          mPrefetchExecutor.submit(() -> getChildrenIfAbsent(path, mountTable));\n+      Future<Collection<UfsStatus>> prev = mActivePrefetchJobs.put(path, job);\n+      if (prev != null) {\n+        prev.cancel(true);\n+      }\n+    } catch (RejectedExecutionException e) {\n+      LOG.debug(\"Failed to submit prefetch job\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4NTgxNg=="}, "originalCommit": {"oid": "ff8a137d843dabc6cb4b38fb5ae7a324cae6fec4"}, "originalPosition": 266}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTc4NTE5OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzowMTo1OVrOGQJgDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDoxNzo0MlrOGQQkiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4NjA2MA==", "bodyText": "add path to message", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r419586060", "createdAt": "2020-05-04T17:01:59Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+import alluxio.util.LogUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses. If set to null, then\n+   *                         calls to {@link #prefetchChildren(AlluxioURI, MountTable)} will not\n+   *                         schedule any tasks.\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @return the previous status for the path if it existed, null otherwise\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  @Nullable\n+  public UfsStatus addStatus(AlluxioURI path, UfsStatus status) {\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+    return mStatuses.put(path, status);\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @return the previous set of children if the mapping existed, null otherwise\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    ConcurrentHashSet<UfsStatus> set = new ConcurrentHashSet<>();\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+      set.add(child);\n+    });\n+    return mChildren.put(path, set);\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.get(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LogUtils.warnWithException(LOG, \"Failed to get result for prefetch job on alluxio path {}\",\n+            path, e);\n+        if (e instanceof InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        throw new IOException(e);\n+      } finally {\n+        mActivePrefetchJobs.remove(path);\n+      }\n+    }\n+    if (useFallback) {\n+      return getChildrenIfAbsent(path, mountTable);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path stores them in the cache, then returns them.\n+   *\n+   * Will always return statuses from the UFS whether or not they exist in the cache, and whether\n+   * a prefetch job was scheduled or not.\n+   *\n+   * @param path the Alluxio path\n+   * @param mountTable the Alluxio mount table\n+   * @return child UFS statuses of the alluxio path\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws IOException, InvalidPathException {\n+    return fetchChildrenIfAbsent(path, mountTable, true);\n+  }\n+\n+  /**\n+   * Retrieves the child UFS statuses for a given path and stores them in the cache.\n+   *\n+   * This method first checks if the children have already been retrieved, and if not, then\n+   * retrieves them.\n+\n+   * @param path the path to get the children for\n+   * @param mountTable the Alluxio mount table\n+   * @return the child statuses that were stored in the cache, or null if the UFS couldn't list the\n+   *         statuses\n+   * @throws InvalidPathException when the table can't resolve the mount for the given URI\n+   */\n+  @Nullable\n+  private Collection<UfsStatus> getChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    MountTable.Resolution resolution = mountTable.resolve(path);\n+    AlluxioURI ufsUri = resolution.getUri();\n+    try (CloseableResource<UnderFileSystem> ufsResource = resolution.acquireUfsResource()) {\n+      UnderFileSystem ufs = ufsResource.get();\n+      UfsStatus[] statuses = ufs.listStatus(ufsUri.toString());\n+      if (statuses == null) {\n+        return null;\n+      }\n+      children = Arrays.asList(statuses);\n+      addChildren(path, children);\n+    } catch (IllegalArgumentException | IOException e) {\n+      LOG.debug(\"Failed to add status to cache\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8a137d843dabc6cb4b38fb5ae7a324cae6fec4"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwMTg5Ng==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r419701896", "createdAt": "2020-05-04T20:17:42Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+import alluxio.util.LogUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses. If set to null, then\n+   *                         calls to {@link #prefetchChildren(AlluxioURI, MountTable)} will not\n+   *                         schedule any tasks.\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @return the previous status for the path if it existed, null otherwise\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  @Nullable\n+  public UfsStatus addStatus(AlluxioURI path, UfsStatus status) {\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+    return mStatuses.put(path, status);\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @return the previous set of children if the mapping existed, null otherwise\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    ConcurrentHashSet<UfsStatus> set = new ConcurrentHashSet<>();\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+      set.add(child);\n+    });\n+    return mChildren.put(path, set);\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.get(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LogUtils.warnWithException(LOG, \"Failed to get result for prefetch job on alluxio path {}\",\n+            path, e);\n+        if (e instanceof InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        throw new IOException(e);\n+      } finally {\n+        mActivePrefetchJobs.remove(path);\n+      }\n+    }\n+    if (useFallback) {\n+      return getChildrenIfAbsent(path, mountTable);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path stores them in the cache, then returns them.\n+   *\n+   * Will always return statuses from the UFS whether or not they exist in the cache, and whether\n+   * a prefetch job was scheduled or not.\n+   *\n+   * @param path the Alluxio path\n+   * @param mountTable the Alluxio mount table\n+   * @return child UFS statuses of the alluxio path\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws IOException, InvalidPathException {\n+    return fetchChildrenIfAbsent(path, mountTable, true);\n+  }\n+\n+  /**\n+   * Retrieves the child UFS statuses for a given path and stores them in the cache.\n+   *\n+   * This method first checks if the children have already been retrieved, and if not, then\n+   * retrieves them.\n+\n+   * @param path the path to get the children for\n+   * @param mountTable the Alluxio mount table\n+   * @return the child statuses that were stored in the cache, or null if the UFS couldn't list the\n+   *         statuses\n+   * @throws InvalidPathException when the table can't resolve the mount for the given URI\n+   */\n+  @Nullable\n+  private Collection<UfsStatus> getChildrenIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws InvalidPathException {\n+    Collection<UfsStatus> children = getChildren(path);\n+    if (children != null) {\n+      return children;\n+    }\n+    MountTable.Resolution resolution = mountTable.resolve(path);\n+    AlluxioURI ufsUri = resolution.getUri();\n+    try (CloseableResource<UnderFileSystem> ufsResource = resolution.acquireUfsResource()) {\n+      UnderFileSystem ufs = ufsResource.get();\n+      UfsStatus[] statuses = ufs.listStatus(ufsUri.toString());\n+      if (statuses == null) {\n+        return null;\n+      }\n+      children = Arrays.asList(statuses);\n+      addChildren(path, children);\n+    } catch (IllegalArgumentException | IOException e) {\n+      LOG.debug(\"Failed to add status to cache\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4NjA2MA=="}, "originalCommit": {"oid": "ff8a137d843dabc6cb4b38fb5ae7a324cae6fec4"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTgwMDk3OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/LogUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzowNTo0NFrOGQJpjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzozMDozOVrOGQKmlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4ODQ5Mw==", "bodyText": "Won't this print out the entire stack trace of the exception?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r419588493", "createdAt": "2020-05-04T17:05:44Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/util/LogUtils.java", "diffHunk": "@@ -127,7 +127,7 @@ public static void warnWithException(Logger logger, String message, Object ...ar\n       logger.debug(message, args);\n     } else {\n       if (args.length > 0 && args[args.length - 1] instanceof Throwable) {\n-        args[args.length - 1] = ((Throwable) args[args.length - 1]).getMessage();\n+        args[args.length - 1] = (args[args.length - 1]).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8a137d843dabc6cb4b38fb5ae7a324cae6fec4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwNDExOA==", "bodyText": "No, this just prints <ExceptionClass>: <Exception message>. Before we would lose the exception type.", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r419604118", "createdAt": "2020-05-04T17:30:39Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/util/LogUtils.java", "diffHunk": "@@ -127,7 +127,7 @@ public static void warnWithException(Logger logger, String message, Object ...ar\n       logger.debug(message, args);\n     } else {\n       if (args.length > 0 && args[args.length - 1] instanceof Throwable) {\n-        args[args.length - 1] = ((Throwable) args[args.length - 1]).getMessage();\n+        args[args.length - 1] = (args[args.length - 1]).toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4ODQ5Mw=="}, "originalCommit": {"oid": "ff8a137d843dabc6cb4b38fb5ae7a324cae6fec4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTgzMTQ0OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoxMzowN1rOGQJ7ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzozNzowM1rOGQK13g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5MzE0Ng==", "bodyText": "Is the general approach for RPCs to have a sync phase first, then the actual execution of the RPC? (Before it did the sync within the same contexts of the RPC execution).", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r419593146", "createdAt": "2020-05-04T17:13:07Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -726,45 +744,53 @@ public FileInfo getFileInfo(AlluxioURI path, GetStatusContext context)\n       throws FileDoesNotExistException, InvalidPathException, AccessControlException, IOException {\n     Metrics.GET_FILE_INFO_OPS.inc();\n     long opTimeMs = System.currentTimeMillis();\n-    LockingScheme lockingScheme =\n-        createLockingScheme(path, context.getOptions().getCommonOptions(), LockPattern.READ, true);\n     try (RpcContext rpcContext = createRpcContext();\n-         LockedInodePath inodePath = mInodeTree\n-             .lockInodePath(lockingScheme.getPath(), lockingScheme.getPattern());\n-         FileSystemMasterAuditContext auditContext =\n-             createAuditContext(\"getFileInfo\", path, null, inodePath.getInodeOrNull())) {\n-      try {\n-        mPermissionChecker.checkPermission(Mode.Bits.READ, inodePath);\n-      } catch (AccessControlException e) {\n-        auditContext.setAllowed(false);\n-        throw e;\n-      }\n-      // Possible ufs sync.\n-      if (syncMetadata(rpcContext, inodePath, lockingScheme, DescendantType.ONE)) {\n+        FileSystemMasterAuditContext auditContext =\n+            createAuditContext(\"getFileInfo\", path, null, null)) {\n+\n+      if (syncMetadata(rpcContext,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8a137d843dabc6cb4b38fb5ae7a324cae6fec4"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwODAzMA==", "bodyText": "For All RPCs previously the sync phase typically came at the very beginning of the RPC after the initial permission check. This was the old way:\n\ncreate RPC, audit context, lock inode path\ncheck permissions\nperform sync\nperform RPC\nunlock\n\nBecause of the new locking requirements, there is a new paradigm of\n\ncreate RPC/audit context\ncheck if sync is required\n\nif so, lock properly for sync\ncheck permissions\ndo sync\nunlock from sync\n\n\nlock for RPC\ncheck permissions\nperform RPC\nunlock\n\nThe reason permission check is performed twice is because it requires having a locked inode path before doing the check.", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r419608030", "createdAt": "2020-05-04T17:37:03Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -726,45 +744,53 @@ public FileInfo getFileInfo(AlluxioURI path, GetStatusContext context)\n       throws FileDoesNotExistException, InvalidPathException, AccessControlException, IOException {\n     Metrics.GET_FILE_INFO_OPS.inc();\n     long opTimeMs = System.currentTimeMillis();\n-    LockingScheme lockingScheme =\n-        createLockingScheme(path, context.getOptions().getCommonOptions(), LockPattern.READ, true);\n     try (RpcContext rpcContext = createRpcContext();\n-         LockedInodePath inodePath = mInodeTree\n-             .lockInodePath(lockingScheme.getPath(), lockingScheme.getPattern());\n-         FileSystemMasterAuditContext auditContext =\n-             createAuditContext(\"getFileInfo\", path, null, inodePath.getInodeOrNull())) {\n-      try {\n-        mPermissionChecker.checkPermission(Mode.Bits.READ, inodePath);\n-      } catch (AccessControlException e) {\n-        auditContext.setAllowed(false);\n-        throw e;\n-      }\n-      // Possible ufs sync.\n-      if (syncMetadata(rpcContext, inodePath, lockingScheme, DescendantType.ONE)) {\n+        FileSystemMasterAuditContext auditContext =\n+            createAuditContext(\"getFileInfo\", path, null, null)) {\n+\n+      if (syncMetadata(rpcContext,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5MzE0Ng=="}, "originalCommit": {"oid": "ff8a137d843dabc6cb4b38fb5ae7a324cae6fec4"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTgzNjE5OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoxNDoxOFrOGQJ-pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjo0MjoyMlrOGTkbrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5Mzg5Mw==", "bodyText": "Can the new syncMetadata also take care of loadMetadata? I think the full sync is a superset of load metadata, so can't we just do the sync, which can optionally take care of loading metadata only if requested? I think load metadata only happens on getFileInfo and listStatus.", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r419593893", "createdAt": "2020-05-04T17:14:18Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -815,73 +841,81 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n       ResultStream<FileInfo> resultStream)\n       throws AccessControlException, FileDoesNotExistException, InvalidPathException, IOException {\n     Metrics.GET_FILE_INFO_OPS.inc();\n-    LockingScheme lockingScheme =\n-        createLockingScheme(path, context.getOptions().getCommonOptions(), LockPattern.READ);\n     try (RpcContext rpcContext = createRpcContext();\n-         LockedInodePath inodePath = mInodeTree\n-             .lockInodePath(lockingScheme.getPath(), lockingScheme.getPattern());\n-         FileSystemMasterAuditContext auditContext =\n-             createAuditContext(\"listStatus\", path, null, inodePath.getInodeOrNull())) {\n-      try {\n-        mPermissionChecker.checkPermission(Mode.Bits.READ, inodePath);\n-      } catch (AccessControlException e) {\n-        auditContext.setAllowed(false);\n-        throw e;\n-      }\n-\n-      DescendantType descendantType = context.getOptions().getRecursive() ? DescendantType.ALL\n-          : DescendantType.ONE;\n-      // Possible ufs sync.\n-      if (syncMetadata(rpcContext, inodePath, lockingScheme, descendantType)) {\n+        FileSystemMasterAuditContext auditContext =\n+            createAuditContext(\"listStatus\", path, null, null)) {\n+\n+      DescendantType descendantType =\n+          context.getOptions().getRecursive() ? DescendantType.ALL : DescendantType.ONE;\n+      if (syncMetadata(rpcContext,\n+          path,\n+          context.getOptions().getCommonOptions(),\n+          descendantType,\n+          auditContext,\n+          LockedInodePath::getInodeOrNull,\n+          (inodePath, permChecker) -> permChecker.checkPermission(Mode.Bits.READ, inodePath))) {\n         // If synced, do not load metadata.\n         context.getOptions().setLoadMetadataType(LoadMetadataPType.NEVER);\n       }\n \n-      DescendantType loadDescendantType;\n-      if (context.getOptions().getLoadMetadataType() == LoadMetadataPType.NEVER) {\n-        loadDescendantType = DescendantType.NONE;\n-      } else if (context.getOptions().getRecursive()) {\n-        loadDescendantType = DescendantType.ALL;\n-      } else {\n-        loadDescendantType = DescendantType.ONE;\n-      }\n-      // load metadata for 1 level of descendants, or all descendants if recursive\n-      LoadMetadataContext loadMetadataContext =\n-          LoadMetadataContext.mergeFrom(LoadMetadataPOptions.newBuilder().setCreateAncestors(true)\n-              .setLoadDescendantType(GrpcUtils.toProto(loadDescendantType))\n-              .setCommonOptions(FileSystemMasterCommonPOptions.newBuilder()\n-                  .setTtl(context.getOptions().getCommonOptions().getTtl())\n-                  .setTtlAction(context.getOptions().getCommonOptions().getTtlAction())));\n-      Inode inode;\n-      if (inodePath.fullPathExists()) {\n-        inode = inodePath.getInode();\n-        if (inode.isDirectory()\n-            && context.getOptions().getLoadMetadataType() != LoadMetadataPType.ALWAYS) {\n-          InodeDirectory inodeDirectory = inode.asDirectory();\n+      // We just synced; the new lock pattern should not sync.\n+      LockingScheme lockingScheme = new LockingScheme(path, LockPattern.READ, false);\n+      try (LockedInodePath inodePath = mInodeTree.lockInodePath(lockingScheme)) {\n+        auditContext.setSrcInode(inodePath.getInodeOrNull());\n+        try {\n+          mPermissionChecker.checkPermission(Mode.Bits.READ, inodePath);\n+        } catch (AccessControlException e) {\n+          auditContext.setAllowed(false);\n+          throw e;\n+        }\n \n-          boolean isLoaded = inodeDirectory.isDirectChildrenLoaded();\n-          if (context.getOptions().getRecursive()) {\n-            isLoaded = areDescendantsLoaded(inodeDirectory);\n-          }\n-          if (isLoaded) {\n-            // no need to load again.\n-            loadMetadataContext.getOptions().setLoadDescendantType(LoadDescendantPType.NONE);\n+        DescendantType loadDescendantType;\n+        if (context.getOptions().getLoadMetadataType() == LoadMetadataPType.NEVER) {\n+          loadDescendantType = DescendantType.NONE;\n+        } else if (context.getOptions().getRecursive()) {\n+          loadDescendantType = DescendantType.ALL;\n+        } else {\n+          loadDescendantType = DescendantType.ONE;\n+        }\n+        // load metadata for 1 level of descendants, or all descendants if recursive\n+        LoadMetadataContext loadMetadataContext = LoadMetadataContext.mergeFrom(\n+            LoadMetadataPOptions.newBuilder()\n+                .setCreateAncestors(true)\n+                .setLoadDescendantType(GrpcUtils.toProto(loadDescendantType))\n+                .setCommonOptions(FileSystemMasterCommonPOptions.newBuilder()\n+                    .setTtl(context.getOptions().getCommonOptions().getTtl())\n+                    .setTtlAction(context.getOptions().getCommonOptions().getTtlAction())));\n+        Inode inode;\n+        if (inodePath.fullPathExists()) {\n+          inode = inodePath.getInode();\n+          if (inode.isDirectory()\n+              && context.getOptions().getLoadMetadataType() != LoadMetadataPType.ALWAYS) {\n+            InodeDirectory inodeDirectory = inode.asDirectory();\n+\n+            boolean isLoaded = inodeDirectory.isDirectChildrenLoaded();\n+            if (context.getOptions().getRecursive()) {\n+              isLoaded = areDescendantsLoaded(inodeDirectory);\n+            }\n+            if (isLoaded) {\n+              // no need to load again.\n+              loadMetadataContext.getOptions().setLoadDescendantType(LoadDescendantPType.NONE);\n+            }\n           }\n+        } else {\n+          checkLoadMetadataOptions(context.getOptions().getLoadMetadataType(), inodePath.getUri());\n         }\n-      } else {\n-        checkLoadMetadataOptions(context.getOptions().getLoadMetadataType(), inodePath.getUri());\n-      }\n \n-      loadMetadataIfNotExist(rpcContext, inodePath, loadMetadataContext);\n-      ensureFullPathAndUpdateCache(inodePath);\n-      inode = inodePath.getInode();\n-      auditContext.setSrcInode(inode);\n-      DescendantType descendantTypeForListStatus =\n-          (context.getOptions().getRecursive()) ? DescendantType.ALL : DescendantType.ONE;\n-      listStatusInternal(context, rpcContext, inodePath, auditContext, descendantTypeForListStatus,\n-          resultStream, 0);\n-      auditContext.setSucceeded(true);\n-      Metrics.FILE_INFOS_GOT.inc();\n+        loadMetadataIfNotExist(rpcContext, inodePath, loadMetadataContext, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8a137d843dabc6cb4b38fb5ae7a324cae6fec4"}, "originalPosition": 352}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwOTc1MQ==", "bodyText": "Unfortunately in my testing this breaks behavior and some assumptions about what metadata gets loaded during these RPCs. I did this because my goal around these improvements was to not change any assumptions about how we load metadata.\nI don't remember exactly which tests broke, but basically loading is a strict load of metadata, whereas a sync could possibly delete or remove inodes, and so that broke a bunch of test assumptions. Breaking previous RPC behavior probably requires a larger discussion.", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r419609751", "createdAt": "2020-05-04T17:40:01Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -815,73 +841,81 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n       ResultStream<FileInfo> resultStream)\n       throws AccessControlException, FileDoesNotExistException, InvalidPathException, IOException {\n     Metrics.GET_FILE_INFO_OPS.inc();\n-    LockingScheme lockingScheme =\n-        createLockingScheme(path, context.getOptions().getCommonOptions(), LockPattern.READ);\n     try (RpcContext rpcContext = createRpcContext();\n-         LockedInodePath inodePath = mInodeTree\n-             .lockInodePath(lockingScheme.getPath(), lockingScheme.getPattern());\n-         FileSystemMasterAuditContext auditContext =\n-             createAuditContext(\"listStatus\", path, null, inodePath.getInodeOrNull())) {\n-      try {\n-        mPermissionChecker.checkPermission(Mode.Bits.READ, inodePath);\n-      } catch (AccessControlException e) {\n-        auditContext.setAllowed(false);\n-        throw e;\n-      }\n-\n-      DescendantType descendantType = context.getOptions().getRecursive() ? DescendantType.ALL\n-          : DescendantType.ONE;\n-      // Possible ufs sync.\n-      if (syncMetadata(rpcContext, inodePath, lockingScheme, descendantType)) {\n+        FileSystemMasterAuditContext auditContext =\n+            createAuditContext(\"listStatus\", path, null, null)) {\n+\n+      DescendantType descendantType =\n+          context.getOptions().getRecursive() ? DescendantType.ALL : DescendantType.ONE;\n+      if (syncMetadata(rpcContext,\n+          path,\n+          context.getOptions().getCommonOptions(),\n+          descendantType,\n+          auditContext,\n+          LockedInodePath::getInodeOrNull,\n+          (inodePath, permChecker) -> permChecker.checkPermission(Mode.Bits.READ, inodePath))) {\n         // If synced, do not load metadata.\n         context.getOptions().setLoadMetadataType(LoadMetadataPType.NEVER);\n       }\n \n-      DescendantType loadDescendantType;\n-      if (context.getOptions().getLoadMetadataType() == LoadMetadataPType.NEVER) {\n-        loadDescendantType = DescendantType.NONE;\n-      } else if (context.getOptions().getRecursive()) {\n-        loadDescendantType = DescendantType.ALL;\n-      } else {\n-        loadDescendantType = DescendantType.ONE;\n-      }\n-      // load metadata for 1 level of descendants, or all descendants if recursive\n-      LoadMetadataContext loadMetadataContext =\n-          LoadMetadataContext.mergeFrom(LoadMetadataPOptions.newBuilder().setCreateAncestors(true)\n-              .setLoadDescendantType(GrpcUtils.toProto(loadDescendantType))\n-              .setCommonOptions(FileSystemMasterCommonPOptions.newBuilder()\n-                  .setTtl(context.getOptions().getCommonOptions().getTtl())\n-                  .setTtlAction(context.getOptions().getCommonOptions().getTtlAction())));\n-      Inode inode;\n-      if (inodePath.fullPathExists()) {\n-        inode = inodePath.getInode();\n-        if (inode.isDirectory()\n-            && context.getOptions().getLoadMetadataType() != LoadMetadataPType.ALWAYS) {\n-          InodeDirectory inodeDirectory = inode.asDirectory();\n+      // We just synced; the new lock pattern should not sync.\n+      LockingScheme lockingScheme = new LockingScheme(path, LockPattern.READ, false);\n+      try (LockedInodePath inodePath = mInodeTree.lockInodePath(lockingScheme)) {\n+        auditContext.setSrcInode(inodePath.getInodeOrNull());\n+        try {\n+          mPermissionChecker.checkPermission(Mode.Bits.READ, inodePath);\n+        } catch (AccessControlException e) {\n+          auditContext.setAllowed(false);\n+          throw e;\n+        }\n \n-          boolean isLoaded = inodeDirectory.isDirectChildrenLoaded();\n-          if (context.getOptions().getRecursive()) {\n-            isLoaded = areDescendantsLoaded(inodeDirectory);\n-          }\n-          if (isLoaded) {\n-            // no need to load again.\n-            loadMetadataContext.getOptions().setLoadDescendantType(LoadDescendantPType.NONE);\n+        DescendantType loadDescendantType;\n+        if (context.getOptions().getLoadMetadataType() == LoadMetadataPType.NEVER) {\n+          loadDescendantType = DescendantType.NONE;\n+        } else if (context.getOptions().getRecursive()) {\n+          loadDescendantType = DescendantType.ALL;\n+        } else {\n+          loadDescendantType = DescendantType.ONE;\n+        }\n+        // load metadata for 1 level of descendants, or all descendants if recursive\n+        LoadMetadataContext loadMetadataContext = LoadMetadataContext.mergeFrom(\n+            LoadMetadataPOptions.newBuilder()\n+                .setCreateAncestors(true)\n+                .setLoadDescendantType(GrpcUtils.toProto(loadDescendantType))\n+                .setCommonOptions(FileSystemMasterCommonPOptions.newBuilder()\n+                    .setTtl(context.getOptions().getCommonOptions().getTtl())\n+                    .setTtlAction(context.getOptions().getCommonOptions().getTtlAction())));\n+        Inode inode;\n+        if (inodePath.fullPathExists()) {\n+          inode = inodePath.getInode();\n+          if (inode.isDirectory()\n+              && context.getOptions().getLoadMetadataType() != LoadMetadataPType.ALWAYS) {\n+            InodeDirectory inodeDirectory = inode.asDirectory();\n+\n+            boolean isLoaded = inodeDirectory.isDirectChildrenLoaded();\n+            if (context.getOptions().getRecursive()) {\n+              isLoaded = areDescendantsLoaded(inodeDirectory);\n+            }\n+            if (isLoaded) {\n+              // no need to load again.\n+              loadMetadataContext.getOptions().setLoadDescendantType(LoadDescendantPType.NONE);\n+            }\n           }\n+        } else {\n+          checkLoadMetadataOptions(context.getOptions().getLoadMetadataType(), inodePath.getUri());\n         }\n-      } else {\n-        checkLoadMetadataOptions(context.getOptions().getLoadMetadataType(), inodePath.getUri());\n-      }\n \n-      loadMetadataIfNotExist(rpcContext, inodePath, loadMetadataContext);\n-      ensureFullPathAndUpdateCache(inodePath);\n-      inode = inodePath.getInode();\n-      auditContext.setSrcInode(inode);\n-      DescendantType descendantTypeForListStatus =\n-          (context.getOptions().getRecursive()) ? DescendantType.ALL : DescendantType.ONE;\n-      listStatusInternal(context, rpcContext, inodePath, auditContext, descendantTypeForListStatus,\n-          resultStream, 0);\n-      auditContext.setSucceeded(true);\n-      Metrics.FILE_INFOS_GOT.inc();\n+        loadMetadataIfNotExist(rpcContext, inodePath, loadMetadataContext, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5Mzg5Mw=="}, "originalCommit": {"oid": "ff8a137d843dabc6cb4b38fb5ae7a324cae6fec4"}, "originalPosition": 352}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY2MzEwMw==", "bodyText": "Yeah, I know load is different from sync. But maybe something like load-only could be an option to sync, so that when that option is used, it does not do the update/delete part of the sync?\nThis would only be for greater simplicity. I'm not sure if this would actually make it simpler, but I thought maybe it could.", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r419663103", "createdAt": "2020-05-04T19:08:12Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -815,73 +841,81 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n       ResultStream<FileInfo> resultStream)\n       throws AccessControlException, FileDoesNotExistException, InvalidPathException, IOException {\n     Metrics.GET_FILE_INFO_OPS.inc();\n-    LockingScheme lockingScheme =\n-        createLockingScheme(path, context.getOptions().getCommonOptions(), LockPattern.READ);\n     try (RpcContext rpcContext = createRpcContext();\n-         LockedInodePath inodePath = mInodeTree\n-             .lockInodePath(lockingScheme.getPath(), lockingScheme.getPattern());\n-         FileSystemMasterAuditContext auditContext =\n-             createAuditContext(\"listStatus\", path, null, inodePath.getInodeOrNull())) {\n-      try {\n-        mPermissionChecker.checkPermission(Mode.Bits.READ, inodePath);\n-      } catch (AccessControlException e) {\n-        auditContext.setAllowed(false);\n-        throw e;\n-      }\n-\n-      DescendantType descendantType = context.getOptions().getRecursive() ? DescendantType.ALL\n-          : DescendantType.ONE;\n-      // Possible ufs sync.\n-      if (syncMetadata(rpcContext, inodePath, lockingScheme, descendantType)) {\n+        FileSystemMasterAuditContext auditContext =\n+            createAuditContext(\"listStatus\", path, null, null)) {\n+\n+      DescendantType descendantType =\n+          context.getOptions().getRecursive() ? DescendantType.ALL : DescendantType.ONE;\n+      if (syncMetadata(rpcContext,\n+          path,\n+          context.getOptions().getCommonOptions(),\n+          descendantType,\n+          auditContext,\n+          LockedInodePath::getInodeOrNull,\n+          (inodePath, permChecker) -> permChecker.checkPermission(Mode.Bits.READ, inodePath))) {\n         // If synced, do not load metadata.\n         context.getOptions().setLoadMetadataType(LoadMetadataPType.NEVER);\n       }\n \n-      DescendantType loadDescendantType;\n-      if (context.getOptions().getLoadMetadataType() == LoadMetadataPType.NEVER) {\n-        loadDescendantType = DescendantType.NONE;\n-      } else if (context.getOptions().getRecursive()) {\n-        loadDescendantType = DescendantType.ALL;\n-      } else {\n-        loadDescendantType = DescendantType.ONE;\n-      }\n-      // load metadata for 1 level of descendants, or all descendants if recursive\n-      LoadMetadataContext loadMetadataContext =\n-          LoadMetadataContext.mergeFrom(LoadMetadataPOptions.newBuilder().setCreateAncestors(true)\n-              .setLoadDescendantType(GrpcUtils.toProto(loadDescendantType))\n-              .setCommonOptions(FileSystemMasterCommonPOptions.newBuilder()\n-                  .setTtl(context.getOptions().getCommonOptions().getTtl())\n-                  .setTtlAction(context.getOptions().getCommonOptions().getTtlAction())));\n-      Inode inode;\n-      if (inodePath.fullPathExists()) {\n-        inode = inodePath.getInode();\n-        if (inode.isDirectory()\n-            && context.getOptions().getLoadMetadataType() != LoadMetadataPType.ALWAYS) {\n-          InodeDirectory inodeDirectory = inode.asDirectory();\n+      // We just synced; the new lock pattern should not sync.\n+      LockingScheme lockingScheme = new LockingScheme(path, LockPattern.READ, false);\n+      try (LockedInodePath inodePath = mInodeTree.lockInodePath(lockingScheme)) {\n+        auditContext.setSrcInode(inodePath.getInodeOrNull());\n+        try {\n+          mPermissionChecker.checkPermission(Mode.Bits.READ, inodePath);\n+        } catch (AccessControlException e) {\n+          auditContext.setAllowed(false);\n+          throw e;\n+        }\n \n-          boolean isLoaded = inodeDirectory.isDirectChildrenLoaded();\n-          if (context.getOptions().getRecursive()) {\n-            isLoaded = areDescendantsLoaded(inodeDirectory);\n-          }\n-          if (isLoaded) {\n-            // no need to load again.\n-            loadMetadataContext.getOptions().setLoadDescendantType(LoadDescendantPType.NONE);\n+        DescendantType loadDescendantType;\n+        if (context.getOptions().getLoadMetadataType() == LoadMetadataPType.NEVER) {\n+          loadDescendantType = DescendantType.NONE;\n+        } else if (context.getOptions().getRecursive()) {\n+          loadDescendantType = DescendantType.ALL;\n+        } else {\n+          loadDescendantType = DescendantType.ONE;\n+        }\n+        // load metadata for 1 level of descendants, or all descendants if recursive\n+        LoadMetadataContext loadMetadataContext = LoadMetadataContext.mergeFrom(\n+            LoadMetadataPOptions.newBuilder()\n+                .setCreateAncestors(true)\n+                .setLoadDescendantType(GrpcUtils.toProto(loadDescendantType))\n+                .setCommonOptions(FileSystemMasterCommonPOptions.newBuilder()\n+                    .setTtl(context.getOptions().getCommonOptions().getTtl())\n+                    .setTtlAction(context.getOptions().getCommonOptions().getTtlAction())));\n+        Inode inode;\n+        if (inodePath.fullPathExists()) {\n+          inode = inodePath.getInode();\n+          if (inode.isDirectory()\n+              && context.getOptions().getLoadMetadataType() != LoadMetadataPType.ALWAYS) {\n+            InodeDirectory inodeDirectory = inode.asDirectory();\n+\n+            boolean isLoaded = inodeDirectory.isDirectChildrenLoaded();\n+            if (context.getOptions().getRecursive()) {\n+              isLoaded = areDescendantsLoaded(inodeDirectory);\n+            }\n+            if (isLoaded) {\n+              // no need to load again.\n+              loadMetadataContext.getOptions().setLoadDescendantType(LoadDescendantPType.NONE);\n+            }\n           }\n+        } else {\n+          checkLoadMetadataOptions(context.getOptions().getLoadMetadataType(), inodePath.getUri());\n         }\n-      } else {\n-        checkLoadMetadataOptions(context.getOptions().getLoadMetadataType(), inodePath.getUri());\n-      }\n \n-      loadMetadataIfNotExist(rpcContext, inodePath, loadMetadataContext);\n-      ensureFullPathAndUpdateCache(inodePath);\n-      inode = inodePath.getInode();\n-      auditContext.setSrcInode(inode);\n-      DescendantType descendantTypeForListStatus =\n-          (context.getOptions().getRecursive()) ? DescendantType.ALL : DescendantType.ONE;\n-      listStatusInternal(context, rpcContext, inodePath, auditContext, descendantTypeForListStatus,\n-          resultStream, 0);\n-      auditContext.setSucceeded(true);\n-      Metrics.FILE_INFOS_GOT.inc();\n+        loadMetadataIfNotExist(rpcContext, inodePath, loadMetadataContext, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5Mzg5Mw=="}, "originalCommit": {"oid": "ff8a137d843dabc6cb4b38fb5ae7a324cae6fec4"}, "originalPosition": 352}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4NTAyNQ==", "bodyText": "That's actually what it already does....go to the definition of loadMetadataIfNotExist :)", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r422285025", "createdAt": "2020-05-08T17:57:17Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -815,73 +841,81 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n       ResultStream<FileInfo> resultStream)\n       throws AccessControlException, FileDoesNotExistException, InvalidPathException, IOException {\n     Metrics.GET_FILE_INFO_OPS.inc();\n-    LockingScheme lockingScheme =\n-        createLockingScheme(path, context.getOptions().getCommonOptions(), LockPattern.READ);\n     try (RpcContext rpcContext = createRpcContext();\n-         LockedInodePath inodePath = mInodeTree\n-             .lockInodePath(lockingScheme.getPath(), lockingScheme.getPattern());\n-         FileSystemMasterAuditContext auditContext =\n-             createAuditContext(\"listStatus\", path, null, inodePath.getInodeOrNull())) {\n-      try {\n-        mPermissionChecker.checkPermission(Mode.Bits.READ, inodePath);\n-      } catch (AccessControlException e) {\n-        auditContext.setAllowed(false);\n-        throw e;\n-      }\n-\n-      DescendantType descendantType = context.getOptions().getRecursive() ? DescendantType.ALL\n-          : DescendantType.ONE;\n-      // Possible ufs sync.\n-      if (syncMetadata(rpcContext, inodePath, lockingScheme, descendantType)) {\n+        FileSystemMasterAuditContext auditContext =\n+            createAuditContext(\"listStatus\", path, null, null)) {\n+\n+      DescendantType descendantType =\n+          context.getOptions().getRecursive() ? DescendantType.ALL : DescendantType.ONE;\n+      if (syncMetadata(rpcContext,\n+          path,\n+          context.getOptions().getCommonOptions(),\n+          descendantType,\n+          auditContext,\n+          LockedInodePath::getInodeOrNull,\n+          (inodePath, permChecker) -> permChecker.checkPermission(Mode.Bits.READ, inodePath))) {\n         // If synced, do not load metadata.\n         context.getOptions().setLoadMetadataType(LoadMetadataPType.NEVER);\n       }\n \n-      DescendantType loadDescendantType;\n-      if (context.getOptions().getLoadMetadataType() == LoadMetadataPType.NEVER) {\n-        loadDescendantType = DescendantType.NONE;\n-      } else if (context.getOptions().getRecursive()) {\n-        loadDescendantType = DescendantType.ALL;\n-      } else {\n-        loadDescendantType = DescendantType.ONE;\n-      }\n-      // load metadata for 1 level of descendants, or all descendants if recursive\n-      LoadMetadataContext loadMetadataContext =\n-          LoadMetadataContext.mergeFrom(LoadMetadataPOptions.newBuilder().setCreateAncestors(true)\n-              .setLoadDescendantType(GrpcUtils.toProto(loadDescendantType))\n-              .setCommonOptions(FileSystemMasterCommonPOptions.newBuilder()\n-                  .setTtl(context.getOptions().getCommonOptions().getTtl())\n-                  .setTtlAction(context.getOptions().getCommonOptions().getTtlAction())));\n-      Inode inode;\n-      if (inodePath.fullPathExists()) {\n-        inode = inodePath.getInode();\n-        if (inode.isDirectory()\n-            && context.getOptions().getLoadMetadataType() != LoadMetadataPType.ALWAYS) {\n-          InodeDirectory inodeDirectory = inode.asDirectory();\n+      // We just synced; the new lock pattern should not sync.\n+      LockingScheme lockingScheme = new LockingScheme(path, LockPattern.READ, false);\n+      try (LockedInodePath inodePath = mInodeTree.lockInodePath(lockingScheme)) {\n+        auditContext.setSrcInode(inodePath.getInodeOrNull());\n+        try {\n+          mPermissionChecker.checkPermission(Mode.Bits.READ, inodePath);\n+        } catch (AccessControlException e) {\n+          auditContext.setAllowed(false);\n+          throw e;\n+        }\n \n-          boolean isLoaded = inodeDirectory.isDirectChildrenLoaded();\n-          if (context.getOptions().getRecursive()) {\n-            isLoaded = areDescendantsLoaded(inodeDirectory);\n-          }\n-          if (isLoaded) {\n-            // no need to load again.\n-            loadMetadataContext.getOptions().setLoadDescendantType(LoadDescendantPType.NONE);\n+        DescendantType loadDescendantType;\n+        if (context.getOptions().getLoadMetadataType() == LoadMetadataPType.NEVER) {\n+          loadDescendantType = DescendantType.NONE;\n+        } else if (context.getOptions().getRecursive()) {\n+          loadDescendantType = DescendantType.ALL;\n+        } else {\n+          loadDescendantType = DescendantType.ONE;\n+        }\n+        // load metadata for 1 level of descendants, or all descendants if recursive\n+        LoadMetadataContext loadMetadataContext = LoadMetadataContext.mergeFrom(\n+            LoadMetadataPOptions.newBuilder()\n+                .setCreateAncestors(true)\n+                .setLoadDescendantType(GrpcUtils.toProto(loadDescendantType))\n+                .setCommonOptions(FileSystemMasterCommonPOptions.newBuilder()\n+                    .setTtl(context.getOptions().getCommonOptions().getTtl())\n+                    .setTtlAction(context.getOptions().getCommonOptions().getTtlAction())));\n+        Inode inode;\n+        if (inodePath.fullPathExists()) {\n+          inode = inodePath.getInode();\n+          if (inode.isDirectory()\n+              && context.getOptions().getLoadMetadataType() != LoadMetadataPType.ALWAYS) {\n+            InodeDirectory inodeDirectory = inode.asDirectory();\n+\n+            boolean isLoaded = inodeDirectory.isDirectChildrenLoaded();\n+            if (context.getOptions().getRecursive()) {\n+              isLoaded = areDescendantsLoaded(inodeDirectory);\n+            }\n+            if (isLoaded) {\n+              // no need to load again.\n+              loadMetadataContext.getOptions().setLoadDescendantType(LoadDescendantPType.NONE);\n+            }\n           }\n+        } else {\n+          checkLoadMetadataOptions(context.getOptions().getLoadMetadataType(), inodePath.getUri());\n         }\n-      } else {\n-        checkLoadMetadataOptions(context.getOptions().getLoadMetadataType(), inodePath.getUri());\n-      }\n \n-      loadMetadataIfNotExist(rpcContext, inodePath, loadMetadataContext);\n-      ensureFullPathAndUpdateCache(inodePath);\n-      inode = inodePath.getInode();\n-      auditContext.setSrcInode(inode);\n-      DescendantType descendantTypeForListStatus =\n-          (context.getOptions().getRecursive()) ? DescendantType.ALL : DescendantType.ONE;\n-      listStatusInternal(context, rpcContext, inodePath, auditContext, descendantTypeForListStatus,\n-          resultStream, 0);\n-      auditContext.setSucceeded(true);\n-      Metrics.FILE_INFOS_GOT.inc();\n+        loadMetadataIfNotExist(rpcContext, inodePath, loadMetadataContext, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5Mzg5Mw=="}, "originalCommit": {"oid": "ff8a137d843dabc6cb4b38fb5ae7a324cae6fec4"}, "originalPosition": 352}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3MzAzNg==", "bodyText": "Yeah, I know loadMetadata call reuses sync. However, do you think it is possible for everything to be taken care of with the syncMetadata() at the beginning of this method? Basically, for listStatus and fileInfo they both have a concept of loading metadata, which is just the creating part of sync. I wonder if everything could be taken care of in the syncMetadata() call, so we don't even need the loadMetadata() method anymore.\n(This would not be part of this PR)", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r423173036", "createdAt": "2020-05-11T16:42:22Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -815,73 +841,81 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n       ResultStream<FileInfo> resultStream)\n       throws AccessControlException, FileDoesNotExistException, InvalidPathException, IOException {\n     Metrics.GET_FILE_INFO_OPS.inc();\n-    LockingScheme lockingScheme =\n-        createLockingScheme(path, context.getOptions().getCommonOptions(), LockPattern.READ);\n     try (RpcContext rpcContext = createRpcContext();\n-         LockedInodePath inodePath = mInodeTree\n-             .lockInodePath(lockingScheme.getPath(), lockingScheme.getPattern());\n-         FileSystemMasterAuditContext auditContext =\n-             createAuditContext(\"listStatus\", path, null, inodePath.getInodeOrNull())) {\n-      try {\n-        mPermissionChecker.checkPermission(Mode.Bits.READ, inodePath);\n-      } catch (AccessControlException e) {\n-        auditContext.setAllowed(false);\n-        throw e;\n-      }\n-\n-      DescendantType descendantType = context.getOptions().getRecursive() ? DescendantType.ALL\n-          : DescendantType.ONE;\n-      // Possible ufs sync.\n-      if (syncMetadata(rpcContext, inodePath, lockingScheme, descendantType)) {\n+        FileSystemMasterAuditContext auditContext =\n+            createAuditContext(\"listStatus\", path, null, null)) {\n+\n+      DescendantType descendantType =\n+          context.getOptions().getRecursive() ? DescendantType.ALL : DescendantType.ONE;\n+      if (syncMetadata(rpcContext,\n+          path,\n+          context.getOptions().getCommonOptions(),\n+          descendantType,\n+          auditContext,\n+          LockedInodePath::getInodeOrNull,\n+          (inodePath, permChecker) -> permChecker.checkPermission(Mode.Bits.READ, inodePath))) {\n         // If synced, do not load metadata.\n         context.getOptions().setLoadMetadataType(LoadMetadataPType.NEVER);\n       }\n \n-      DescendantType loadDescendantType;\n-      if (context.getOptions().getLoadMetadataType() == LoadMetadataPType.NEVER) {\n-        loadDescendantType = DescendantType.NONE;\n-      } else if (context.getOptions().getRecursive()) {\n-        loadDescendantType = DescendantType.ALL;\n-      } else {\n-        loadDescendantType = DescendantType.ONE;\n-      }\n-      // load metadata for 1 level of descendants, or all descendants if recursive\n-      LoadMetadataContext loadMetadataContext =\n-          LoadMetadataContext.mergeFrom(LoadMetadataPOptions.newBuilder().setCreateAncestors(true)\n-              .setLoadDescendantType(GrpcUtils.toProto(loadDescendantType))\n-              .setCommonOptions(FileSystemMasterCommonPOptions.newBuilder()\n-                  .setTtl(context.getOptions().getCommonOptions().getTtl())\n-                  .setTtlAction(context.getOptions().getCommonOptions().getTtlAction())));\n-      Inode inode;\n-      if (inodePath.fullPathExists()) {\n-        inode = inodePath.getInode();\n-        if (inode.isDirectory()\n-            && context.getOptions().getLoadMetadataType() != LoadMetadataPType.ALWAYS) {\n-          InodeDirectory inodeDirectory = inode.asDirectory();\n+      // We just synced; the new lock pattern should not sync.\n+      LockingScheme lockingScheme = new LockingScheme(path, LockPattern.READ, false);\n+      try (LockedInodePath inodePath = mInodeTree.lockInodePath(lockingScheme)) {\n+        auditContext.setSrcInode(inodePath.getInodeOrNull());\n+        try {\n+          mPermissionChecker.checkPermission(Mode.Bits.READ, inodePath);\n+        } catch (AccessControlException e) {\n+          auditContext.setAllowed(false);\n+          throw e;\n+        }\n \n-          boolean isLoaded = inodeDirectory.isDirectChildrenLoaded();\n-          if (context.getOptions().getRecursive()) {\n-            isLoaded = areDescendantsLoaded(inodeDirectory);\n-          }\n-          if (isLoaded) {\n-            // no need to load again.\n-            loadMetadataContext.getOptions().setLoadDescendantType(LoadDescendantPType.NONE);\n+        DescendantType loadDescendantType;\n+        if (context.getOptions().getLoadMetadataType() == LoadMetadataPType.NEVER) {\n+          loadDescendantType = DescendantType.NONE;\n+        } else if (context.getOptions().getRecursive()) {\n+          loadDescendantType = DescendantType.ALL;\n+        } else {\n+          loadDescendantType = DescendantType.ONE;\n+        }\n+        // load metadata for 1 level of descendants, or all descendants if recursive\n+        LoadMetadataContext loadMetadataContext = LoadMetadataContext.mergeFrom(\n+            LoadMetadataPOptions.newBuilder()\n+                .setCreateAncestors(true)\n+                .setLoadDescendantType(GrpcUtils.toProto(loadDescendantType))\n+                .setCommonOptions(FileSystemMasterCommonPOptions.newBuilder()\n+                    .setTtl(context.getOptions().getCommonOptions().getTtl())\n+                    .setTtlAction(context.getOptions().getCommonOptions().getTtlAction())));\n+        Inode inode;\n+        if (inodePath.fullPathExists()) {\n+          inode = inodePath.getInode();\n+          if (inode.isDirectory()\n+              && context.getOptions().getLoadMetadataType() != LoadMetadataPType.ALWAYS) {\n+            InodeDirectory inodeDirectory = inode.asDirectory();\n+\n+            boolean isLoaded = inodeDirectory.isDirectChildrenLoaded();\n+            if (context.getOptions().getRecursive()) {\n+              isLoaded = areDescendantsLoaded(inodeDirectory);\n+            }\n+            if (isLoaded) {\n+              // no need to load again.\n+              loadMetadataContext.getOptions().setLoadDescendantType(LoadDescendantPType.NONE);\n+            }\n           }\n+        } else {\n+          checkLoadMetadataOptions(context.getOptions().getLoadMetadataType(), inodePath.getUri());\n         }\n-      } else {\n-        checkLoadMetadataOptions(context.getOptions().getLoadMetadataType(), inodePath.getUri());\n-      }\n \n-      loadMetadataIfNotExist(rpcContext, inodePath, loadMetadataContext);\n-      ensureFullPathAndUpdateCache(inodePath);\n-      inode = inodePath.getInode();\n-      auditContext.setSrcInode(inode);\n-      DescendantType descendantTypeForListStatus =\n-          (context.getOptions().getRecursive()) ? DescendantType.ALL : DescendantType.ONE;\n-      listStatusInternal(context, rpcContext, inodePath, auditContext, descendantTypeForListStatus,\n-          resultStream, 0);\n-      auditContext.setSucceeded(true);\n-      Metrics.FILE_INFOS_GOT.inc();\n+        loadMetadataIfNotExist(rpcContext, inodePath, loadMetadataContext, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5Mzg5Mw=="}, "originalCommit": {"oid": "ff8a137d843dabc6cb4b38fb5ae7a324cae6fec4"}, "originalPosition": 352}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDMzOTA0OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjoyNDoxN1rOGRbHTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzozNToyNlrOGStkqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkyMzIxNA==", "bodyText": "If the prefetch job is canceled, this will throw an error, right? Does something external retry this?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r420923214", "createdAt": "2020-05-06T16:24:17Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+import alluxio.util.LogUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+@ThreadSafe\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses. If set to null, then\n+   *                         calls to {@link #prefetchChildren(AlluxioURI, MountTable)} will not\n+   *                         schedule any tasks.\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @return the previous status for the path if it existed, null otherwise\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  @Nullable\n+  public UfsStatus addStatus(AlluxioURI path, UfsStatus status) {\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+    return mStatuses.put(path, status);\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @return the previous set of children if the mapping existed, null otherwise\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    ConcurrentHashSet<UfsStatus> set = new ConcurrentHashSet<>();\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+      set.add(child);\n+    });\n+    return mChildren.put(path, set);\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.get(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LogUtils.warnWithException(LOG, \"Failed to get result for prefetch job on alluxio path {}\",\n+            path, e);\n+        if (e instanceof InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        throw new IOException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b701e8535c863ae9c395a75668c6f2f9f88c38"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NDIxOA==", "bodyText": "There is currently no retry.\nI think that we should only throw the IOException if it is an InterruptedException, because that's something signalling the thread to stop. Otherwise if it is an ExecutionException or CancelledException then we should just continue with the fallback operation?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r422274218", "createdAt": "2020-05-08T17:35:26Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+import alluxio.util.LogUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+@ThreadSafe\n+public class UfsStatusCache {\n+  private static final Logger LOG = LoggerFactory.getLogger(UfsStatusCache.class);\n+\n+  private final ConcurrentHashMap<AlluxioURI, UfsStatus> mStatuses;\n+  private final ConcurrentHashMap<AlluxioURI, Future<Collection<UfsStatus>>> mActivePrefetchJobs;\n+  private final ConcurrentHashMap<AlluxioURI, Collection<UfsStatus>> mChildren;\n+  private final ExecutorService mPrefetchExecutor;\n+\n+  /**\n+   * Create a new instance of {@link UfsStatusCache}.\n+   *\n+   * @param prefetchExecutor the executor service used to prefetch statuses. If set to null, then\n+   *                         calls to {@link #prefetchChildren(AlluxioURI, MountTable)} will not\n+   *                         schedule any tasks.\n+   */\n+  public UfsStatusCache(@Nullable ExecutorService prefetchExecutor) {\n+    mStatuses = new ConcurrentHashMap<>();\n+    mChildren = new ConcurrentHashMap<>();\n+    mActivePrefetchJobs = new ConcurrentHashMap<>();\n+    mPrefetchExecutor = prefetchExecutor;\n+  }\n+\n+  /**\n+   * Add a new status to the cache.\n+   *\n+   * The last component of the path in the {@link AlluxioURI} must match the result of\n+   * {@link UfsStatus#getName()}. This method overrides any status currently cached for the same\n+   * URI.\n+   *\n+   * @param path the Alluxio path to key on\n+   * @param status the ufs status to store\n+   * @return the previous status for the path if it existed, null otherwise\n+   * @throws IllegalArgumentException if the status name doesn't match the final URI path component\n+   */\n+  @Nullable\n+  public UfsStatus addStatus(AlluxioURI path, UfsStatus status) {\n+    if (!path.getName().equals(status.getName())) {\n+      throw new IllegalArgumentException(\n+          String.format(\"path name %s does not match ufs status name %s\",\n+              path.getName(), status.getName()));\n+    }\n+    return mStatuses.put(path, status);\n+  }\n+\n+  /**\n+   * Add a parent-child mapping to the status cache.\n+   *\n+   * All child statuses added via this method will be available via {@link #getStatus(AlluxioURI)}.\n+   *\n+   * @param path the directory inode path which contains the children\n+   * @param children the children of the {@code path}\n+   * @return the previous set of children if the mapping existed, null otherwise\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> addChildren(AlluxioURI path, Collection<UfsStatus> children) {\n+    ConcurrentHashSet<UfsStatus> set = new ConcurrentHashSet<>();\n+    children.forEach(child -> {\n+      AlluxioURI childPath = path.joinUnsafe(child.getName());\n+      addStatus(childPath, child);\n+      set.add(child);\n+    });\n+    return mChildren.put(path, set);\n+  }\n+\n+  /**\n+   * Remove a status from the cache.\n+   *\n+   *  Any children added to this status will remain in the cache.\n+   *\n+   * @param path the path corresponding to the {@link UfsStatus} to remove\n+   * @return the removed UfsStatus\n+   */\n+  public UfsStatus remove(AlluxioURI path) {\n+    UfsStatus removed = mStatuses.remove(path);\n+    if (removed == null) {\n+      return null;\n+    }\n+\n+    mChildren.remove(path); // ok if there aren't any children\n+    return removed;\n+  }\n+\n+  /**\n+   * Get the UfsStatus from a given AlluxioURI.\n+   *\n+   * @param path the path the retrieve\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  public UfsStatus getStatus(AlluxioURI path) {\n+    return mStatuses.get(path);\n+  }\n+\n+  /**\n+   * Fetches children of a given alluxio path, stores them in the cache, then returns them.\n+   *\n+   * Children can be returned in a few ways\n+   * 1. Children already exist in the internal index. We simply return them\n+   * 2. If children did not already exist in the index, then check if there was a scheduled\n+   * prefetch job running for this path. If so, wait for the job to finish and return the result.\n+   * 3. If no prefetch job, and children don't yet exist in the cache, then if the fallback\n+   * parameter is true, fetch them from the UFS and store them in the cache. Otherwise, simply\n+   * return null.\n+   *\n+   * @param path the Alluxio path to get the children of\n+   * @param mountTable the Alluxio mount table\n+   * @param useFallback whether or not to fall back to calling the UFS\n+   * @return child UFS statuses of the alluxio path, or null if no prefetch job and fallback\n+   *         specified as false\n+   * @throws InvalidPathException if the alluxio path can't be resolved to a UFS mount\n+   */\n+  @Nullable\n+  public Collection<UfsStatus> fetchChildrenIfAbsent(AlluxioURI path, MountTable mountTable,\n+      boolean useFallback)\n+      throws IOException, InvalidPathException {\n+    Future<Collection<UfsStatus>> prefetchJob = mActivePrefetchJobs.get(path);\n+    if (prefetchJob != null) {\n+      try {\n+        return prefetchJob.get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LogUtils.warnWithException(LOG, \"Failed to get result for prefetch job on alluxio path {}\",\n+            path, e);\n+        if (e instanceof InterruptedException) {\n+          Thread.currentThread().interrupt();\n+        }\n+        throw new IOException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkyMzIxNA=="}, "originalCommit": {"oid": "d7b701e8535c863ae9c395a75668c6f2f9f88c38"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDM3NDA2OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjozMjo0N1rOGRbd9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjozMjo0N1rOGRbd9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkyOTAxMg==", "bodyText": "Should we make the force sync option a static constant, and reuse it here and below?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r420929012", "createdAt": "2020-05-06T16:32:47Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -3235,28 +3096,33 @@ public void activeSyncMetadata(AlluxioURI path, Collection<AlluxioURI> changedFi\n     try (RpcContext rpcContext = createRpcContext()) {\n       if (changedFiles == null) {\n         // full sync\n-        LockingScheme lockingScheme = new LockingScheme(path, LockPattern.READ, true);\n-        try (LockedInodePath inodePath =\n-            mInodeTree.lockInodePath(lockingScheme.getPath(), lockingScheme.getPattern())) {\n-          syncMetadataInternal(rpcContext, inodePath, lockingScheme, DescendantType.ALL,\n-              populateStatusCache(path, DescendantType.ALL));\n+        long start = System.currentTimeMillis();\n+\n+        // Set sync interval to 0 to force a sync.\n+        FileSystemMasterCommonPOptions options =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b701e8535c863ae9c395a75668c6f2f9f88c38"}, "originalPosition": 1329}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTI1ODk2OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxNDozN1rOGSKgTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoxNzoxMFrOGTlwag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5OTY2MQ==", "bodyText": "is there any value in reusing CacheBuilder from guava for this?", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r421699661", "createdAt": "2020-05-07T18:14:37Z", "author": {"login": "yuzhu"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+import alluxio.util.LogUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+@ThreadSafe\n+public class UfsStatusCache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b701e8535c863ae9c395a75668c6f2f9f88c38"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5NDczMA==", "bodyText": "I am not sure how much it would help. Do you know what the benefits are?\nMuch of the implementation is specialized for the usage of InodeSyncStream", "url": "https://github.com/Alluxio/alluxio/pull/11204#discussion_r423194730", "createdAt": "2020-05-11T17:17:10Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.collections.ConcurrentHashSet;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.master.file.meta.MountTable;\n+import alluxio.resource.CloseableResource;\n+import alluxio.util.LogUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * This class is a cache from an Alluxio namespace URI ({@link AlluxioURI}, i.e. /path/to/inode) to\n+ * UFS statuses.\n+ *\n+ * It also allows associating a path with child inodes, so that the statuses for a specific path can\n+ * be searched for later.\n+ */\n+@ThreadSafe\n+public class UfsStatusCache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5OTY2MQ=="}, "originalCommit": {"oid": "d7b701e8535c863ae9c395a75668c6f2f9f88c38"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1800, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}