{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NTQyMDU1", "number": 10919, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDozNjoxMVrODgAqlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDozNjoxMVrODgAqlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODkxOTI3OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDozNjoxMVrOFqC9nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDo1NTo1MlrOFqDbAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMzA1NQ==", "bodyText": "can we add a TODO saying we can remove this once a sync doesn't require a write lock during the sync?", "url": "https://github.com/Alluxio/alluxio/pull/10919#discussion_r379633055", "createdAt": "2020-02-14T20:36:11Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -3817,21 +3817,35 @@ public void startSync(AlluxioURI syncPoint)\n   @Override\n   public void stopSync(AlluxioURI syncPoint)\n       throws IOException, InvalidPathException, AccessControlException {\n-    LockingScheme lockingScheme = new LockingScheme(syncPoint, LockPattern.WRITE_EDGE, false);\n-    try (RpcContext rpcContext = createRpcContext();\n-        LockedInodePath inodePath =\n-            mInodeTree.lockInodePath(lockingScheme.getPath(), lockingScheme.getPattern());\n-        FileSystemMasterAuditContext auditContext =\n-             createAuditContext(\"stopSync\", syncPoint, null,\n-                 inodePath.getParentInodeOrNull())) {\n+    try (RpcContext rpcContext = createRpcContext()) {\n+      boolean isSuperUser = true;\n       try {\n-        mPermissionChecker.checkParentPermission(Mode.Bits.WRITE, inodePath);\n+        mPermissionChecker.checkSuperUser();\n       } catch (AccessControlException e) {\n-        auditContext.setAllowed(false);\n-        throw e;\n+        isSuperUser = false;\n+      }\n+      if (isSuperUser) {\n+        // Stop sync w/o acquiring an inode lock to terminate an initial full scan (if running)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1f59e01a01fe7c9a5d4c4ac7c67ff60abe1ed7d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0MDU3Nw==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/10919#discussion_r379640577", "createdAt": "2020-02-14T20:55:52Z", "author": {"login": "madanadit"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -3817,21 +3817,35 @@ public void startSync(AlluxioURI syncPoint)\n   @Override\n   public void stopSync(AlluxioURI syncPoint)\n       throws IOException, InvalidPathException, AccessControlException {\n-    LockingScheme lockingScheme = new LockingScheme(syncPoint, LockPattern.WRITE_EDGE, false);\n-    try (RpcContext rpcContext = createRpcContext();\n-        LockedInodePath inodePath =\n-            mInodeTree.lockInodePath(lockingScheme.getPath(), lockingScheme.getPattern());\n-        FileSystemMasterAuditContext auditContext =\n-             createAuditContext(\"stopSync\", syncPoint, null,\n-                 inodePath.getParentInodeOrNull())) {\n+    try (RpcContext rpcContext = createRpcContext()) {\n+      boolean isSuperUser = true;\n       try {\n-        mPermissionChecker.checkParentPermission(Mode.Bits.WRITE, inodePath);\n+        mPermissionChecker.checkSuperUser();\n       } catch (AccessControlException e) {\n-        auditContext.setAllowed(false);\n-        throw e;\n+        isSuperUser = false;\n+      }\n+      if (isSuperUser) {\n+        // Stop sync w/o acquiring an inode lock to terminate an initial full scan (if running)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMzA1NQ=="}, "originalCommit": {"oid": "b1f59e01a01fe7c9a5d4c4ac7c67ff60abe1ed7d"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2046, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}