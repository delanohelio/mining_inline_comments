{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0NTEyNjA2", "number": 12100, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTowNjo0NVrOEjL0dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTowNjo0NVrOEjL0dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzI5MjcxOnYy", "diffSide": "RIGHT", "path": "core/server/common/src/test/java/alluxio/master/journal/raft/RaftJournalTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTowNjo0NVrOHRZiuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODowMjoxOVrOHRgo5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAwNjMyOQ==", "bodyText": "why added restart follower here", "url": "https://github.com/Alluxio/alluxio/pull/12100#discussion_r488006329", "createdAt": "2020-09-14T15:06:45Z", "author": {"login": "LuQQiu"}, "path": "core/server/common/src/test/java/alluxio/master/journal/raft/RaftJournalTest.java", "diffHunk": "@@ -139,6 +139,50 @@ public void suspendCatchupResume() throws Exception {\n         () -> countingMaster.getApplyCount() == entryCount + 1, mWaitOptions);\n   }\n \n+  @Test\n+  public void suspendSnapshotRestart() throws Exception {\n+    // Create a counting master implementation that counts how many journal entries it processed.\n+    CountingDummyFileSystemMaster countingMaster = new CountingDummyFileSystemMaster();\n+    mFollowerJournalSystem.createJournal(countingMaster);\n+\n+    final int entryCount = 10;\n+    try (JournalContext journalContext =\n+             mLeaderJournalSystem.createJournal(new NoopMaster()).createJournalContext()) {\n+      for (int i = 0; i < entryCount; i++) {\n+        journalContext.append(\n+            alluxio.proto.journal.Journal.JournalEntry.newBuilder().setInodeLastModificationTime(\n+                File.InodeLastModificationTimeEntry.newBuilder().setId(i).build()).build());\n+      }\n+    }\n+\n+    // Suspend follower journal system.\n+    mFollowerJournalSystem.suspend();\n+\n+    // Write more entries which are not applied due to suspension.\n+    try (JournalContext journalContext =\n+             mLeaderJournalSystem.createJournal(new NoopMaster()).createJournalContext()) {\n+      journalContext\n+          .append(alluxio.proto.journal.Journal.JournalEntry.newBuilder()\n+              .setInodeLastModificationTime(\n+                  File.InodeLastModificationTimeEntry.newBuilder().setId(entryCount).build())\n+              .build());\n+    }\n+\n+    // Ask the follower to do a snapshot.\n+    mFollowerJournalSystem.checkpoint();\n+\n+    // Restart the follower.\n+    mFollowerJournalSystem.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567b56878a11ada46ccccac7bd533539aa68fe0f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyMjU5Ng==", "bodyText": "Restart causes the follower snapshot to be replayed so its content can be verified.", "url": "https://github.com/Alluxio/alluxio/pull/12100#discussion_r488122596", "createdAt": "2020-09-14T18:02:19Z", "author": {"login": "bf8086"}, "path": "core/server/common/src/test/java/alluxio/master/journal/raft/RaftJournalTest.java", "diffHunk": "@@ -139,6 +139,50 @@ public void suspendCatchupResume() throws Exception {\n         () -> countingMaster.getApplyCount() == entryCount + 1, mWaitOptions);\n   }\n \n+  @Test\n+  public void suspendSnapshotRestart() throws Exception {\n+    // Create a counting master implementation that counts how many journal entries it processed.\n+    CountingDummyFileSystemMaster countingMaster = new CountingDummyFileSystemMaster();\n+    mFollowerJournalSystem.createJournal(countingMaster);\n+\n+    final int entryCount = 10;\n+    try (JournalContext journalContext =\n+             mLeaderJournalSystem.createJournal(new NoopMaster()).createJournalContext()) {\n+      for (int i = 0; i < entryCount; i++) {\n+        journalContext.append(\n+            alluxio.proto.journal.Journal.JournalEntry.newBuilder().setInodeLastModificationTime(\n+                File.InodeLastModificationTimeEntry.newBuilder().setId(i).build()).build());\n+      }\n+    }\n+\n+    // Suspend follower journal system.\n+    mFollowerJournalSystem.suspend();\n+\n+    // Write more entries which are not applied due to suspension.\n+    try (JournalContext journalContext =\n+             mLeaderJournalSystem.createJournal(new NoopMaster()).createJournalContext()) {\n+      journalContext\n+          .append(alluxio.proto.journal.Journal.JournalEntry.newBuilder()\n+              .setInodeLastModificationTime(\n+                  File.InodeLastModificationTimeEntry.newBuilder().setId(entryCount).build())\n+              .build());\n+    }\n+\n+    // Ask the follower to do a snapshot.\n+    mFollowerJournalSystem.checkpoint();\n+\n+    // Restart the follower.\n+    mFollowerJournalSystem.stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAwNjMyOQ=="}, "originalCommit": {"oid": "567b56878a11ada46ccccac7bd533539aa68fe0f"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1175, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}