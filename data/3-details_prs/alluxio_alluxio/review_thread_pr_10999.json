{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MTcxMzMw", "number": 10999, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo0NjoyNlrODihJuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTozNToxMFrODi0xMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTIxMzM3OnYy", "diffSide": "RIGHT", "path": "bin/alluxio", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo0NjoyNlrOFtz75w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMToyNDo1MFrOFt1uHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MTE1OQ==", "bodyText": "Maybe we can combine all *DocGen functions into a single command? Are there any downsides you see?\nI feel like having so many just clutters the interface. They all take such a short amount of time I don't think it would hurt to simply run everything?", "url": "https://github.com/Alluxio/alluxio/pull/10999#discussion_r383581159", "createdAt": "2020-02-24T23:46:26Z", "author": {"login": "ZacBlanco"}, "path": "bin/alluxio", "diffHunk": "@@ -352,6 +353,12 @@ function main {\n   \"clearCache\")\n     sync; echo 3 > /proc/sys/vm/drop_caches ;\n   ;;\n+  \"metricsDocGen\")\n+    CLASS=\"alluxio.cli.MetricsDocGenerator\"\n+    CLASSPATH=${ALLUXIO_CLIENT_CLASSPATH}\n+    ALLUXIO_SHELL_JAVA_OPTS+=\" -Dalluxio.logger.type=Console\"\n+    runJavaClass \"$@\"\n+  ;;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c605efc6a09e507bf03c0a20c2b152e356b878d8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MzIzNw==", "bodyText": "Yeah, we could do that. I previously thought about combining them. The reason I didn't do that is .... (I don't want to touch ConfigurationDocGen doc which ... needs some time to reformat codes)", "url": "https://github.com/Alluxio/alluxio/pull/10999#discussion_r383593237", "createdAt": "2020-02-25T00:25:17Z", "author": {"login": "LuQQiu"}, "path": "bin/alluxio", "diffHunk": "@@ -352,6 +353,12 @@ function main {\n   \"clearCache\")\n     sync; echo 3 > /proc/sys/vm/drop_caches ;\n   ;;\n+  \"metricsDocGen\")\n+    CLASS=\"alluxio.cli.MetricsDocGenerator\"\n+    CLASSPATH=${ALLUXIO_CLIENT_CLASSPATH}\n+    ALLUXIO_SHELL_JAVA_OPTS+=\" -Dalluxio.logger.type=Console\"\n+    runJavaClass \"$@\"\n+  ;;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MTE1OQ=="}, "originalCommit": {"oid": "c605efc6a09e507bf03c0a20c2b152e356b878d8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMDM5OA==", "bodyText": "Changed to use the same docGen for both metrics and configuration, thanks", "url": "https://github.com/Alluxio/alluxio/pull/10999#discussion_r383610398", "createdAt": "2020-02-25T01:24:50Z", "author": {"login": "LuQQiu"}, "path": "bin/alluxio", "diffHunk": "@@ -352,6 +353,12 @@ function main {\n   \"clearCache\")\n     sync; echo 3 > /proc/sys/vm/drop_caches ;\n   ;;\n+  \"metricsDocGen\")\n+    CLASS=\"alluxio.cli.MetricsDocGenerator\"\n+    CLASSPATH=${ALLUXIO_CLIENT_CLASSPATH}\n+    ALLUXIO_SHELL_JAVA_OPTS+=\" -Dalluxio.logger.type=Console\"\n+    runJavaClass \"$@\"\n+  ;;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MTE1OQ=="}, "originalCommit": {"oid": "c605efc6a09e507bf03c0a20c2b152e356b878d8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTIxNTcyOnYy", "diffSide": "RIGHT", "path": "docs/en/operation/Metrics-System.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo0Nzo0MlrOFtz9bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMToyNTowOFrOFt1uYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MTU1MA==", "bodyText": "can we put this in a code block?\n```\n```", "url": "https://github.com/Alluxio/alluxio/pull/10999#discussion_r383581550", "createdAt": "2020-02-24T23:47:42Z", "author": {"login": "ZacBlanco"}, "path": "docs/en/operation/Metrics-System.md", "diffHunk": "@@ -119,11 +120,11 @@ such as data transferred or the number of RPC invocations.\n \n Metrics in Alluxio have the following format for master node metrics:\n \n-master.[metricName].[tag1].[tag2]...\n+Master.[metricName].[tag1].[tag2]...\n \n Metrics in Alluxio have the following format for non-master node metrics:\n \n-[processType].[hostName].[metricName].[tag1].[tag2]...\n+[processType].[metricName].[tag1].[tag2]...[hostName]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c605efc6a09e507bf03c0a20c2b152e356b878d8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMDQ2NQ==", "bodyText": "Done, thanks", "url": "https://github.com/Alluxio/alluxio/pull/10999#discussion_r383610465", "createdAt": "2020-02-25T01:25:08Z", "author": {"login": "LuQQiu"}, "path": "docs/en/operation/Metrics-System.md", "diffHunk": "@@ -119,11 +120,11 @@ such as data transferred or the number of RPC invocations.\n \n Metrics in Alluxio have the following format for master node metrics:\n \n-master.[metricName].[tag1].[tag2]...\n+Master.[metricName].[tag1].[tag2]...\n \n Metrics in Alluxio have the following format for non-master node metrics:\n \n-[processType].[hostName].[metricName].[tag1].[tag2]...\n+[processType].[metricName].[tag1].[tag2]...[hostName]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MTU1MA=="}, "originalCommit": {"oid": "c605efc6a09e507bf03c0a20c2b152e356b878d8"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTIxNTg4OnYy", "diffSide": "RIGHT", "path": "docs/en/operation/Metrics-System.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo0Nzo0OFrOFtz9ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMToyNToxNlrOFt1ufw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MTU3OA==", "bodyText": "can we put this in a code block?\n```\n```", "url": "https://github.com/Alluxio/alluxio/pull/10999#discussion_r383581578", "createdAt": "2020-02-24T23:47:48Z", "author": {"login": "ZacBlanco"}, "path": "docs/en/operation/Metrics-System.md", "diffHunk": "@@ -119,11 +120,11 @@ such as data transferred or the number of RPC invocations.\n \n Metrics in Alluxio have the following format for master node metrics:\n \n-master.[metricName].[tag1].[tag2]...\n+Master.[metricName].[tag1].[tag2]...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c605efc6a09e507bf03c0a20c2b152e356b878d8"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMDQ5NQ==", "bodyText": "Done, thanks", "url": "https://github.com/Alluxio/alluxio/pull/10999#discussion_r383610495", "createdAt": "2020-02-25T01:25:16Z", "author": {"login": "LuQQiu"}, "path": "docs/en/operation/Metrics-System.md", "diffHunk": "@@ -119,11 +120,11 @@ such as data transferred or the number of RPC invocations.\n \n Metrics in Alluxio have the following format for master node metrics:\n \n-master.[metricName].[tag1].[tag2]...\n+Master.[metricName].[tag1].[tag2]...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MTU3OA=="}, "originalCommit": {"oid": "c605efc6a09e507bf03c0a20c2b152e356b878d8"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTIxNjc4OnYy", "diffSide": "RIGHT", "path": "docs/en/operation/Metrics-System.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo0ODoxNVrOFtz-Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMToyNTo1OVrOFt1vVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MTcyMg==", "bodyText": "This page will be quite large. Maybe we can add a new page to the \"Reference\" dropdown?", "url": "https://github.com/Alluxio/alluxio/pull/10999#discussion_r383581722", "createdAt": "2020-02-24T23:48:15Z", "author": {"login": "ZacBlanco"}, "path": "docs/en/operation/Metrics-System.md", "diffHunk": "@@ -135,190 +136,84 @@ Tags can be used to further filter or aggregate on various characteristics.\n Workers and clients send metrics data to the Alluxio master through heartbeats.\n The interval is defined by property `alluxio.master.worker.heartbeat.interval` and `alluxio.user.metrics.heartbeat.interval` respectively.\n \n-Each client will be assigned an application id. \n-All the metrics sent by this client contain the client application id information. \n-By default, this will be in the form of 'app-[random number]'. \n-This value can be configured through the property `alluxio.user.app.id`, \n-so multiple clients can be combined into a logical application.\n-\n-#### Alluxio Cluster Information\n-\n-| Metric Name | Description |\n-|-------------------------|-----------------------------------------------|\n-| Master.Workers | Total number of active Alluxio workers in this cluster |\n-\n-#### Alluxio Storage Capacity\n-\n-| Metric Name | Description |\n-|--------------------------------|--------------------------------------------------------------------------|\n-| Master.CapacityTotal | Total capacity of the Alluxio file system in bytes |\n-| Master.CapacityTotalTier<TIER> | Total capacity in tier <TIER> of the Alluxio file system in bytes |\n-| Master.CapacityUsed | Used capacity of the file system in bytes |\n-| Master.CapacityUsedTier<TIER> | Used capacity in tier <TIER> of the Alluxio file system in bytes |\n-| Master.CapacityFree | Free capacity of the Alluxio file system in bytes |\n-| Master.CapacityFreeTier<TIER> | Free capacity in tier <TIER> of the Alluxio file system in bytes |\n-\n-#### Under Storage Capacity\n-\n-| Metric Name | Description |\n-|-------------------------|--------------------------------------------------|\n-| Master.UfsCapacityTotal | Total capacity of the under file system in bytes |\n-| Master.UfsCapacityUsed | Used capacity of the under file system in bytes |\n-| Master.UfsCapacityFree | Free capacity of the under file system in bytes |\n+<table class=\"table table-striped\">\n+<tr><th>Name</th><th>Type</th><th>Description</th></tr>\n+{% for item in site.data.table.cluster-metrics %}\n+  <tr>\n+    <td><a class=\"anchor\" name=\"{{ item.metricName }}\"></a> {{ item.metricName }}</td>\n+    <td>{{ item.metricType }}</td>\n+    <td>{{ site.data.table.en.cluster-metrics[item.metricName] }}</td>\n+  </tr>\n+{% endfor %}\n+</table>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c605efc6a09e507bf03c0a20c2b152e356b878d8"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMDcxMQ==", "bodyText": "Moved to the Reference as Metrics-list.md", "url": "https://github.com/Alluxio/alluxio/pull/10999#discussion_r383610711", "createdAt": "2020-02-25T01:25:59Z", "author": {"login": "LuQQiu"}, "path": "docs/en/operation/Metrics-System.md", "diffHunk": "@@ -135,190 +136,84 @@ Tags can be used to further filter or aggregate on various characteristics.\n Workers and clients send metrics data to the Alluxio master through heartbeats.\n The interval is defined by property `alluxio.master.worker.heartbeat.interval` and `alluxio.user.metrics.heartbeat.interval` respectively.\n \n-Each client will be assigned an application id. \n-All the metrics sent by this client contain the client application id information. \n-By default, this will be in the form of 'app-[random number]'. \n-This value can be configured through the property `alluxio.user.app.id`, \n-so multiple clients can be combined into a logical application.\n-\n-#### Alluxio Cluster Information\n-\n-| Metric Name | Description |\n-|-------------------------|-----------------------------------------------|\n-| Master.Workers | Total number of active Alluxio workers in this cluster |\n-\n-#### Alluxio Storage Capacity\n-\n-| Metric Name | Description |\n-|--------------------------------|--------------------------------------------------------------------------|\n-| Master.CapacityTotal | Total capacity of the Alluxio file system in bytes |\n-| Master.CapacityTotalTier<TIER> | Total capacity in tier <TIER> of the Alluxio file system in bytes |\n-| Master.CapacityUsed | Used capacity of the file system in bytes |\n-| Master.CapacityUsedTier<TIER> | Used capacity in tier <TIER> of the Alluxio file system in bytes |\n-| Master.CapacityFree | Free capacity of the Alluxio file system in bytes |\n-| Master.CapacityFreeTier<TIER> | Free capacity in tier <TIER> of the Alluxio file system in bytes |\n-\n-#### Under Storage Capacity\n-\n-| Metric Name | Description |\n-|-------------------------|--------------------------------------------------|\n-| Master.UfsCapacityTotal | Total capacity of the under file system in bytes |\n-| Master.UfsCapacityUsed | Used capacity of the under file system in bytes |\n-| Master.UfsCapacityFree | Free capacity of the under file system in bytes |\n+<table class=\"table table-striped\">\n+<tr><th>Name</th><th>Type</th><th>Description</th></tr>\n+{% for item in site.data.table.cluster-metrics %}\n+  <tr>\n+    <td><a class=\"anchor\" name=\"{{ item.metricName }}\"></a> {{ item.metricName }}</td>\n+    <td>{{ item.metricType }}</td>\n+    <td>{{ site.data.table.en.cluster-metrics[item.metricName] }}</td>\n+  </tr>\n+{% endfor %}\n+</table>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MTcyMg=="}, "originalCommit": {"oid": "c605efc6a09e507bf03c0a20c2b152e356b878d8"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTIyOTM0OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/MetricsDocGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo1NDowNVrOFt0Faw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMToyNjoxNVrOFt1vlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MzU5NQ==", "bodyText": "Can we also use the escapeHtml function (see confDocGen for usage) so that it doesn't break any doc pages if someone adds some weird characters to a metric description", "url": "https://github.com/Alluxio/alluxio/pull/10999#discussion_r383583595", "createdAt": "2020-02-24T23:54:05Z", "author": {"login": "ZacBlanco"}, "path": "shell/src/main/java/alluxio/cli/MetricsDocGenerator.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli;\n+\n+import alluxio.annotation.PublicApi;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.metrics.MetricKey;\n+import alluxio.metrics.MetricsSystem;\n+import alluxio.util.ConfigurationUtils;\n+import alluxio.util.io.PathUtils;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.io.Closer;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Generates metric key information in docs.\n+ */\n+@ThreadSafe\n+@PublicApi\n+public final class MetricsDocGenerator {\n+  private static final String[] CATEGORIES = new String[]{\"cluster\", \"master\", \"worker\", \"client\"};\n+  private static final String CSV_FILE_DIR = \"docs/_data/table/\";\n+  private static final String YML_FILE_DIR = \"docs/_data/table/en/\";\n+  private static final String CSV_SUFFIX = \"csv\";\n+  private static final String YML_SUFFIX = \"yml\";\n+  private static final String CSV_FILE_HEADER = \"metricName,metricType\";\n+\n+  /**\n+   * Writes the supported files for metrics system doc.\n+   */\n+  private static void writeDocFiles() throws IOException {\n+    // Gets and sorts the metric keys\n+    List<MetricKey> defaultKeys = new ArrayList<>(MetricKey.allMetricKeys());\n+    Collections.sort(defaultKeys);\n+\n+    String homeDir = new InstancedConfiguration(ConfigurationUtils.defaults())\n+        .get(PropertyKey.HOME);\n+\n+    // Map from metric key prefix to metric category\n+    Map<String, String> metricTypeMap = new HashMap<>();\n+    for (MetricsSystem.InstanceType type : MetricsSystem.InstanceType.values()) {\n+      String typeStr = type.toString();\n+      String category = typeStr.toLowerCase();\n+      metricTypeMap.put(typeStr, category);\n+    }\n+\n+    try (Closer closer = Closer.create()) {\n+      Map<FileWriterKey, FileWriter> fileWriterMap = new HashMap<>();\n+      String csvFolder = PathUtils.concatPath(homeDir, CSV_FILE_DIR);\n+      String ymlFolder = PathUtils.concatPath(homeDir, YML_FILE_DIR);\n+      FileWriter csvFileWriter;\n+      FileWriter ymlFileWriter;\n+      for (String category : CATEGORIES) {\n+        csvFileWriter = new FileWriter(PathUtils\n+            .concatPath(csvFolder, category + \"-metrics.\" + CSV_SUFFIX));\n+        csvFileWriter.append(CSV_FILE_HEADER + \"\\n\");\n+        ymlFileWriter = new FileWriter(PathUtils\n+            .concatPath(ymlFolder, category + \"-metrics.\" + YML_SUFFIX));\n+        fileWriterMap.put(new FileWriterKey(category, CSV_SUFFIX), csvFileWriter);\n+        fileWriterMap.put(new FileWriterKey(category, YML_SUFFIX), ymlFileWriter);\n+        //register file writer\n+        closer.register(csvFileWriter);\n+        closer.register(ymlFileWriter);\n+      }\n+\n+      for (MetricKey metricKey : defaultKeys) {\n+        String key = metricKey.toString();\n+\n+        String[] components = key.split(\"\\\\.\");\n+        if (components.length < 2) {\n+          throw new IOException(String\n+              .format(\"The given metric key %s doesn't have two or more components\", key));\n+        }\n+        if (metricTypeMap.containsKey(components[0])) {\n+          csvFileWriter = fileWriterMap.get(\n+              new FileWriterKey(metricTypeMap.get(components[0]), CSV_SUFFIX));\n+          ymlFileWriter = fileWriterMap.get(\n+              new FileWriterKey(metricTypeMap.get(components[0]), YML_SUFFIX));\n+          csvFileWriter.append(String.format(\"%s,%s%n\", key, metricKey.getMetricType().toString()));\n+          ymlFileWriter.append(String.format(\"%s,%s%n\",\n+              key, metricKey.getDescription().replace(\"'\", \"''\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c605efc6a09e507bf03c0a20c2b152e356b878d8"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMDc3NQ==", "bodyText": "Add the escapeHtml, thanks!", "url": "https://github.com/Alluxio/alluxio/pull/10999#discussion_r383610775", "createdAt": "2020-02-25T01:26:15Z", "author": {"login": "LuQQiu"}, "path": "shell/src/main/java/alluxio/cli/MetricsDocGenerator.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli;\n+\n+import alluxio.annotation.PublicApi;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.metrics.MetricKey;\n+import alluxio.metrics.MetricsSystem;\n+import alluxio.util.ConfigurationUtils;\n+import alluxio.util.io.PathUtils;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.io.Closer;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Generates metric key information in docs.\n+ */\n+@ThreadSafe\n+@PublicApi\n+public final class MetricsDocGenerator {\n+  private static final String[] CATEGORIES = new String[]{\"cluster\", \"master\", \"worker\", \"client\"};\n+  private static final String CSV_FILE_DIR = \"docs/_data/table/\";\n+  private static final String YML_FILE_DIR = \"docs/_data/table/en/\";\n+  private static final String CSV_SUFFIX = \"csv\";\n+  private static final String YML_SUFFIX = \"yml\";\n+  private static final String CSV_FILE_HEADER = \"metricName,metricType\";\n+\n+  /**\n+   * Writes the supported files for metrics system doc.\n+   */\n+  private static void writeDocFiles() throws IOException {\n+    // Gets and sorts the metric keys\n+    List<MetricKey> defaultKeys = new ArrayList<>(MetricKey.allMetricKeys());\n+    Collections.sort(defaultKeys);\n+\n+    String homeDir = new InstancedConfiguration(ConfigurationUtils.defaults())\n+        .get(PropertyKey.HOME);\n+\n+    // Map from metric key prefix to metric category\n+    Map<String, String> metricTypeMap = new HashMap<>();\n+    for (MetricsSystem.InstanceType type : MetricsSystem.InstanceType.values()) {\n+      String typeStr = type.toString();\n+      String category = typeStr.toLowerCase();\n+      metricTypeMap.put(typeStr, category);\n+    }\n+\n+    try (Closer closer = Closer.create()) {\n+      Map<FileWriterKey, FileWriter> fileWriterMap = new HashMap<>();\n+      String csvFolder = PathUtils.concatPath(homeDir, CSV_FILE_DIR);\n+      String ymlFolder = PathUtils.concatPath(homeDir, YML_FILE_DIR);\n+      FileWriter csvFileWriter;\n+      FileWriter ymlFileWriter;\n+      for (String category : CATEGORIES) {\n+        csvFileWriter = new FileWriter(PathUtils\n+            .concatPath(csvFolder, category + \"-metrics.\" + CSV_SUFFIX));\n+        csvFileWriter.append(CSV_FILE_HEADER + \"\\n\");\n+        ymlFileWriter = new FileWriter(PathUtils\n+            .concatPath(ymlFolder, category + \"-metrics.\" + YML_SUFFIX));\n+        fileWriterMap.put(new FileWriterKey(category, CSV_SUFFIX), csvFileWriter);\n+        fileWriterMap.put(new FileWriterKey(category, YML_SUFFIX), ymlFileWriter);\n+        //register file writer\n+        closer.register(csvFileWriter);\n+        closer.register(ymlFileWriter);\n+      }\n+\n+      for (MetricKey metricKey : defaultKeys) {\n+        String key = metricKey.toString();\n+\n+        String[] components = key.split(\"\\\\.\");\n+        if (components.length < 2) {\n+          throw new IOException(String\n+              .format(\"The given metric key %s doesn't have two or more components\", key));\n+        }\n+        if (metricTypeMap.containsKey(components[0])) {\n+          csvFileWriter = fileWriterMap.get(\n+              new FileWriterKey(metricTypeMap.get(components[0]), CSV_SUFFIX));\n+          ymlFileWriter = fileWriterMap.get(\n+              new FileWriterKey(metricTypeMap.get(components[0]), YML_SUFFIX));\n+          csvFileWriter.append(String.format(\"%s,%s%n\", key, metricKey.getMetricType().toString()));\n+          ymlFileWriter.append(String.format(\"%s,%s%n\",\n+              key, metricKey.getDescription().replace(\"'\", \"''\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MzU5NQ=="}, "originalCommit": {"oid": "c605efc6a09e507bf03c0a20c2b152e356b878d8"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTQzMTQzOnYy", "diffSide": "RIGHT", "path": "docs/en/reference/Metrics-List.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTo0NToxM1rOFt2CEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo1NDoyNFrOFuU1Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNTUwNQ==", "bodyText": "maybe put into a bulleted list?", "url": "https://github.com/Alluxio/alluxio/pull/10999#discussion_r383615505", "createdAt": "2020-02-25T01:45:13Z", "author": {"login": "ZacBlanco"}, "path": "docs/en/reference/Metrics-List.md", "diffHunk": "@@ -0,0 +1,165 @@\n+---\n+layout: global\n+title: List of Metrics\n+group: Reference\n+priority: 1\n+---\n+\n+* Table of Contents\n+{:toc}\n+\n+There are two types of metrics in Alluxio, cluster-wide aggregated metrics, and per-process detailed metrics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20cc4b2b49bfb25bfed7c6be1c334e34a350a087"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyMDE1NA==", "bodyText": "Put in a bulleted list, thanks", "url": "https://github.com/Alluxio/alluxio/pull/10999#discussion_r384120154", "createdAt": "2020-02-25T20:54:24Z", "author": {"login": "LuQQiu"}, "path": "docs/en/reference/Metrics-List.md", "diffHunk": "@@ -0,0 +1,165 @@\n+---\n+layout: global\n+title: List of Metrics\n+group: Reference\n+priority: 1\n+---\n+\n+* Table of Contents\n+{:toc}\n+\n+There are two types of metrics in Alluxio, cluster-wide aggregated metrics, and per-process detailed metrics.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNTUwNQ=="}, "originalCommit": {"oid": "20cc4b2b49bfb25bfed7c6be1c334e34a350a087"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODQyNzM2OnYy", "diffSide": "RIGHT", "path": "docs/en/reference/Metrics-List.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTozNToxMFrOFuSbLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo1NDozNFrOFuU1pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4MDY4NQ==", "bodyText": "I think it would be better if we moved this above the table. Most people probably won't read after the end of the table", "url": "https://github.com/Alluxio/alluxio/pull/10999#discussion_r384080685", "createdAt": "2020-02-25T19:35:10Z", "author": {"login": "ZacBlanco"}, "path": "docs/en/reference/Metrics-List.md", "diffHunk": "@@ -0,0 +1,165 @@\n+---\n+layout: global\n+title: List of Metrics\n+group: Reference\n+priority: 1\n+---\n+\n+* Table of Contents\n+{:toc}\n+\n+There are two types of metrics in Alluxio, cluster-wide aggregated metrics, and per-process detailed metrics.\n+\n+Cluster metrics are collected and calculated by the leading master and displayed in the metrics tab of the web UI. \n+These metrics are designed to provide a snapshot of the cluster state and the overall amount of data and metadata served by Alluxio.\n+\n+Process metrics are collected by each Alluxio process and exposed in a machine-readable format through any configured sinks. \n+Process metrics are highly detailed and are intended to be consumed by third-party monitoring tools. \n+Users can then view fine-grained dashboards with time-series graphs of each metric, \n+such as data transferred or the number of RPC invocations.\n+\n+Metrics in Alluxio have the following format for master node metrics:\n+\n+```\n+Master.[metricName].[tag1].[tag2]...\n+```\n+\n+Metrics in Alluxio have the following format for non-master node metrics:\n+\n+```\n+[processType].[metricName].[tag1].[tag2]...[hostName]\n+```\n+\n+There is generally an Alluxio metric for every RPC invocation, to Alluxio or to the under store.\n+\n+Tags are additional pieces of metadata for the metric such as user name or under storage location.\n+Tags can be used to further filter or aggregate on various characteristics.\n+\n+## Cluster Metrics\n+\n+Workers and clients send metrics data to the Alluxio master through heartbeats.\n+The interval is defined by property `alluxio.master.worker.heartbeat.interval` and `alluxio.user.metrics.heartbeat.interval` respectively.\n+\n+<table class=\"table table-striped\">\n+<tr><th>Name</th><th>Type</th><th>Description</th></tr>\n+{% for item in site.data.table.cluster-metrics %}\n+  <tr>\n+    <td><a class=\"anchor\" name=\"{{ item.metricName }}\"></a> {{ item.metricName }}</td>\n+    <td>{{ item.metricType }}</td>\n+    <td>{{ site.data.table.en.cluster-metrics[item.metricName] }}</td>\n+  </tr>\n+{% endfor %}\n+</table>\n+\n+Bytes metrics are aggregated value from workers or clients. Bytes throughput metrics are calculated on the leading master.\n+The values of bytes throughput metrics equal to bytes metrics counter value divided by the metrics record time and shown as bytes per minute.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20cc4b2b49bfb25bfed7c6be1c334e34a350a087"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyMDIzMQ==", "bodyText": "Make sense, move it to before the table", "url": "https://github.com/Alluxio/alluxio/pull/10999#discussion_r384120231", "createdAt": "2020-02-25T20:54:34Z", "author": {"login": "LuQQiu"}, "path": "docs/en/reference/Metrics-List.md", "diffHunk": "@@ -0,0 +1,165 @@\n+---\n+layout: global\n+title: List of Metrics\n+group: Reference\n+priority: 1\n+---\n+\n+* Table of Contents\n+{:toc}\n+\n+There are two types of metrics in Alluxio, cluster-wide aggregated metrics, and per-process detailed metrics.\n+\n+Cluster metrics are collected and calculated by the leading master and displayed in the metrics tab of the web UI. \n+These metrics are designed to provide a snapshot of the cluster state and the overall amount of data and metadata served by Alluxio.\n+\n+Process metrics are collected by each Alluxio process and exposed in a machine-readable format through any configured sinks. \n+Process metrics are highly detailed and are intended to be consumed by third-party monitoring tools. \n+Users can then view fine-grained dashboards with time-series graphs of each metric, \n+such as data transferred or the number of RPC invocations.\n+\n+Metrics in Alluxio have the following format for master node metrics:\n+\n+```\n+Master.[metricName].[tag1].[tag2]...\n+```\n+\n+Metrics in Alluxio have the following format for non-master node metrics:\n+\n+```\n+[processType].[metricName].[tag1].[tag2]...[hostName]\n+```\n+\n+There is generally an Alluxio metric for every RPC invocation, to Alluxio or to the under store.\n+\n+Tags are additional pieces of metadata for the metric such as user name or under storage location.\n+Tags can be used to further filter or aggregate on various characteristics.\n+\n+## Cluster Metrics\n+\n+Workers and clients send metrics data to the Alluxio master through heartbeats.\n+The interval is defined by property `alluxio.master.worker.heartbeat.interval` and `alluxio.user.metrics.heartbeat.interval` respectively.\n+\n+<table class=\"table table-striped\">\n+<tr><th>Name</th><th>Type</th><th>Description</th></tr>\n+{% for item in site.data.table.cluster-metrics %}\n+  <tr>\n+    <td><a class=\"anchor\" name=\"{{ item.metricName }}\"></a> {{ item.metricName }}</td>\n+    <td>{{ item.metricType }}</td>\n+    <td>{{ site.data.table.en.cluster-metrics[item.metricName] }}</td>\n+  </tr>\n+{% endfor %}\n+</table>\n+\n+Bytes metrics are aggregated value from workers or clients. Bytes throughput metrics are calculated on the leading master.\n+The values of bytes throughput metrics equal to bytes metrics counter value divided by the metrics record time and shown as bytes per minute.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4MDY4NQ=="}, "originalCommit": {"oid": "20cc4b2b49bfb25bfed7c6be1c334e34a350a087"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1978, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}