{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NDg3NDE2", "number": 12368, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODo1NDo1NlrOEw5p8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTowNTozNlrOEw55hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzExNzMwOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODo1NDo1NlrOHmvgSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzozMTozMVrOHnCAlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4NjI1MA==", "bodyText": "Could we call this mExternalFileOpener?", "url": "https://github.com/Alluxio/alluxio/pull/12368#discussion_r510386250", "createdAt": "2020-10-22T18:54:56Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java", "diffHunk": "@@ -48,13 +46,11 @@\n \n   /** Local store to store pages. */\n   private final CacheManager mCacheManager;\n-  /** External storage system. */\n-  private final FileSystem mExternalFs;\n   /** Path of the file. */\n   private final AlluxioURI mPath;\n   /** File info, fetched from external FS. */\n   private final URIStatus mStatus;\n-  private final OpenFilePOptions mOpenOptions;\n+  private final FileInStreamOpener mFileInStreamOpener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c51fea342c60ec76e4954074bbf2ed832c6170"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4OTQyOA==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/12368#discussion_r510689428", "createdAt": "2020-10-23T07:31:31Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java", "diffHunk": "@@ -48,13 +46,11 @@\n \n   /** Local store to store pages. */\n   private final CacheManager mCacheManager;\n-  /** External storage system. */\n-  private final FileSystem mExternalFs;\n   /** Path of the file. */\n   private final AlluxioURI mPath;\n   /** File info, fetched from external FS. */\n   private final URIStatus mStatus;\n-  private final OpenFilePOptions mOpenOptions;\n+  private final FileInStreamOpener mFileInStreamOpener;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4NjI1MA=="}, "originalCommit": {"oid": "69c51fea342c60ec76e4954074bbf2ed832c6170"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzEyMjk3OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileSystem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODo1NjoyNlrOHmvjxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOToxMToxN1rOHmwFYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4NzE0MA==", "bodyText": "Will this cause a performance regression because getStatus will no longer be called lazily?", "url": "https://github.com/Alluxio/alluxio/pull/12368#discussion_r510387140", "createdAt": "2020-10-22T18:56:26Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileSystem.java", "diffHunk": "@@ -56,7 +56,7 @@ public FileInStream openFile(AlluxioURI path, OpenFilePOptions options)\n     if (mCacheManager == null || mCacheManager.state() == CacheManager.State.NOT_IN_USE) {\n       return mDelegatedFileSystem.openFile(path, options);\n     }\n-    return new LocalCacheFileInStream(path, options, mDelegatedFileSystem, mCacheManager);\n+    return openFile(mDelegatedFileSystem.getStatus(path), options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c51fea342c60ec76e4954074bbf2ed832c6170"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5NTc0Nw==", "bodyText": "it was not called lazily even prior to this pr.\nWe memorized a closure and call get right away.\nit actually caused issues in error handling: exceptions are wrapped as RTE to through which is not nice.\n\n  \n    \n      alluxio/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java\n    \n    \n        Lines 82 to 88\n      in\n      91e1e86\n    \n    \n    \n    \n\n        \n          \n           mStatus = Suppliers.memoize(() -> { \n        \n\n        \n          \n             try { \n        \n\n        \n          \n               return externalFs.getStatus(mPath); \n        \n\n        \n          \n             } catch (Exception e) { \n        \n\n        \n          \n               throw new RuntimeException(e); \n        \n\n        \n          \n             } \n        \n\n        \n          \n           }).get();", "url": "https://github.com/Alluxio/alluxio/pull/12368#discussion_r510395747", "createdAt": "2020-10-22T19:11:17Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileSystem.java", "diffHunk": "@@ -56,7 +56,7 @@ public FileInStream openFile(AlluxioURI path, OpenFilePOptions options)\n     if (mCacheManager == null || mCacheManager.state() == CacheManager.State.NOT_IN_USE) {\n       return mDelegatedFileSystem.openFile(path, options);\n     }\n-    return new LocalCacheFileInStream(path, options, mDelegatedFileSystem, mCacheManager);\n+    return openFile(mDelegatedFileSystem.getStatus(path), options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4NzE0MA=="}, "originalCommit": {"oid": "69c51fea342c60ec76e4954074bbf2ed832c6170"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzE1NzE5OnYy", "diffSide": "RIGHT", "path": "core/client/hdfs/src/main/java/alluxio/hadoop/LocalCacheFileSystem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTowNTozNlrOHmv4xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzozNzoyMFrOHnCL-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5MjUxOA==", "bodyText": "Do we only need 2 of these three methods? ie. the interface open(Path, int) and implementation open(URIStatus, int)? We should always use the hadoop file opener if cache is not enabled?\nAlso, buffer size is only respected if the cache is not enabled?", "url": "https://github.com/Alluxio/alluxio/pull/12368#discussion_r510392518", "createdAt": "2020-10-22T19:05:36Z", "author": {"login": "calvinjia"}, "path": "core/client/hdfs/src/main/java/alluxio/hadoop/LocalCacheFileSystem.java", "diffHunk": "@@ -112,10 +121,8 @@ public FSDataInputStream open(Path path, int bufferSize) throws IOException {\n     if (mCacheManager == null) {\n       return mExternalFileSystem.open(path, bufferSize);\n     }\n-    return new FSDataInputStream(new HdfsFileInputStream(\n-        new LocalCacheFileInStream(new AlluxioURI(path.toString()),\n-            OpenFilePOptions.getDefaultInstance(), mExternalFileSystemWrapper, mCacheManager),\n-        statistics));\n+    URIStatus status = HadoopUtils.toAlluxioUriStatus(mExternalFileSystem.getFileStatus(path));\n+    return open(status, bufferSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c51fea342c60ec76e4954074bbf2ed832c6170"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5MjM0Ng==", "bodyText": "Do we only need 2 of these three methods? ie. the interface open(Path, int) and implementation open(URIStatus, int)? We should always use the hadoop file opener if cache is not enabled?\n\ncorrect, i removed the 3rd open method with FileOpener. originally I thought I needed in Presto land, but it turns out not the case (see draft PR https://github.com/prestodb/presto/pull/15344/files)\n\nAlso, buffer size is only respected if the cache is not enabled?\n\nCorrect", "url": "https://github.com/Alluxio/alluxio/pull/12368#discussion_r510692346", "createdAt": "2020-10-23T07:37:20Z", "author": {"login": "apc999"}, "path": "core/client/hdfs/src/main/java/alluxio/hadoop/LocalCacheFileSystem.java", "diffHunk": "@@ -112,10 +121,8 @@ public FSDataInputStream open(Path path, int bufferSize) throws IOException {\n     if (mCacheManager == null) {\n       return mExternalFileSystem.open(path, bufferSize);\n     }\n-    return new FSDataInputStream(new HdfsFileInputStream(\n-        new LocalCacheFileInStream(new AlluxioURI(path.toString()),\n-            OpenFilePOptions.getDefaultInstance(), mExternalFileSystemWrapper, mCacheManager),\n-        statistics));\n+    URIStatus status = HadoopUtils.toAlluxioUriStatus(mExternalFileSystem.getFileStatus(path));\n+    return open(status, bufferSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5MjUxOA=="}, "originalCommit": {"oid": "69c51fea342c60ec76e4954074bbf2ed832c6170"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1077, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}