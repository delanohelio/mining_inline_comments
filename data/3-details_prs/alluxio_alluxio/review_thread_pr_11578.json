{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1OTI2NDM4", "number": 11578, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjowNzo0MVrOEGauYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjozNzo1MVrOEG7x5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTY0NzcxOnYy", "diffSide": "RIGHT", "path": "integration/tools/validation/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjowNzo0MVrOGlM2Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0ODozM1rOGlQjkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MDk3NA==", "bodyText": "This is the same as \n  \n    \n      alluxio/integration/tools/hms/pom.xml\n    \n    \n         Line 31\n      in\n      b1d5a4e\n    \n    \n    \n    \n\n        \n          \n           <build.path>${project.parent.parent.parent.basedir}/build</build.path> \n        \n    \n  \n\n but actually i don't think it's correct...", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441660974", "createdAt": "2020-06-17T16:07:41Z", "author": {"login": "jiacheliu3"}, "path": "integration/tools/validation/pom.xml", "diffHunk": "@@ -0,0 +1,67 @@\n+<!--\n+\n+    The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+    (the \"License\"). You may not use this work except in compliance with the License, which is\n+    available at www.apache.org/licenses/LICENSE-2.0\n+\n+    This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+    either express or implied, as more fully set forth in the License.\n+\n+    See the NOTICE file distributed with this work for information regarding copyright ownership.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.alluxio</groupId>\n+        <artifactId>alluxio-integration-tools</artifactId>\n+        <version>2.3.0-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>alluxio-integration-tools-validation</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Alluxio Integration - Validation Tools</name>\n+    <description>Tools to validation the underlying environment for Alluxio</description>\n+\n+    <properties>\n+        <!-- The following paths need to be defined here as well as in the parent pom so that mvn can -->\n+        <!-- run properly from sub-project directories -->\n+        <build.path>${project.parent.parent.parent.basedir}/build</build.path>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ca39e9b473509c788e7ab616ec54d312cf472b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMTc0NA==", "bodyText": "yep, please replace both with <build.path>${project.parent.parent.basedir}/build</build.path>", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441721744", "createdAt": "2020-06-17T17:48:33Z", "author": {"login": "madanadit"}, "path": "integration/tools/validation/pom.xml", "diffHunk": "@@ -0,0 +1,67 @@\n+<!--\n+\n+    The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+    (the \"License\"). You may not use this work except in compliance with the License, which is\n+    available at www.apache.org/licenses/LICENSE-2.0\n+\n+    This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+    either express or implied, as more fully set forth in the License.\n+\n+    See the NOTICE file distributed with this work for information regarding copyright ownership.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.alluxio</groupId>\n+        <artifactId>alluxio-integration-tools</artifactId>\n+        <version>2.3.0-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>alluxio-integration-tools-validation</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Alluxio Integration - Validation Tools</name>\n+    <description>Tools to validation the underlying environment for Alluxio</description>\n+\n+    <properties>\n+        <!-- The following paths need to be defined here as well as in the parent pom so that mvn can -->\n+        <!-- run properly from sub-project directories -->\n+        <build.path>${project.parent.parent.parent.basedir}/build</build.path>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MDk3NA=="}, "originalCommit": {"oid": "33ca39e9b473509c788e7ab616ec54d312cf472b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTY1MDUzOnYy", "diffSide": "RIGHT", "path": "integration/tools/validation/src/main/java/alluxio/cli/EnvValidationTool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjowODoyMFrOGlM35A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjowODoyMFrOGlM35A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MTQxMg==", "bodyText": "This is previously the ValidateEnv class, now split into two:\n\nThe trigger logic (from cmd line) is in a new shell/ValidateEnv.java\nThe real work logic is in this class", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441661412", "createdAt": "2020-06-17T16:08:20Z", "author": {"login": "jiacheliu3"}, "path": "integration/tools/validation/src/main/java/alluxio/cli/EnvValidationTool.java", "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli;\n+\n+import alluxio.Constants;\n+import alluxio.cli.hdfs.HdfsConfParityValidationTask;\n+import alluxio.cli.hdfs.HdfsConfValidationTask;\n+import alluxio.cli.hdfs.HdfsProxyUserValidationTask;\n+import alluxio.cli.hdfs.HdfsVersionValidationTask;\n+import alluxio.cli.hdfs.SecureHdfsValidationTask;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.util.CommonUtils;\n+import alluxio.util.ConfigurationUtils;\n+import alluxio.util.network.NetworkAddressUtils.ServiceType;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.reflections.Reflections;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.TreeMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Utility for checking Alluxio environment.\n+ */\n+// TODO(yanqin): decouple ValidationTask implementations for easier dependency management\n+public final class EnvValidationTool {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ca39e9b473509c788e7ab616ec54d312cf472b"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTY3NTk0OnYy", "diffSide": "RIGHT", "path": "integration/tools/validation/src/main/java/alluxio/cli/EnvValidationTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoxNDo1OFrOGlNHow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxMzo0MVrOGlRdXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NTQ0Mw==", "bodyText": "This replaces the old ValidationTask#getOptions method. This is because the options need to be known in the command line class, which is now separated into shell/ValidateEnv class. The options need to be known before initializing this EnvValidationTool class, which means we cannot register the options when we register tasks, we have to know the options before initializing the task objects. I chose to do a reflection loading the static OPTIONS field of each ValidationTask class here.\nSubsequently the ValidationTask#getOptions method is removed, together with the AbstractValidationTask class, which only implements this method.", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441665443", "createdAt": "2020-06-17T16:14:58Z", "author": {"login": "jiacheliu3"}, "path": "integration/tools/validation/src/main/java/alluxio/cli/EnvValidationTool.java", "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli;\n+\n+import alluxio.Constants;\n+import alluxio.cli.hdfs.HdfsConfParityValidationTask;\n+import alluxio.cli.hdfs.HdfsConfValidationTask;\n+import alluxio.cli.hdfs.HdfsProxyUserValidationTask;\n+import alluxio.cli.hdfs.HdfsVersionValidationTask;\n+import alluxio.cli.hdfs.SecureHdfsValidationTask;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.util.CommonUtils;\n+import alluxio.util.ConfigurationUtils;\n+import alluxio.util.network.NetworkAddressUtils.ServiceType;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.reflections.Reflections;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.TreeMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Utility for checking Alluxio environment.\n+ */\n+// TODO(yanqin): decouple ValidationTask implementations for easier dependency management\n+public final class EnvValidationTool {\n+  private static final String ALLUXIO_MASTER_CLASS = \"alluxio.master.AlluxioMaster\";\n+  private static final String ALLUXIO_WORKER_CLASS = \"alluxio.worker.AlluxioWorker\";\n+  private static final String ALLUXIO_PROXY_CLASS = \"alluxio.proxy.AlluxioProxy\";\n+\n+  private final Map<ValidationTask, String> mTasks = new HashMap<>();\n+  private final Map<String, String> mTaskDescriptions = new HashMap<>();\n+  private final List<ValidationTask> mCommonTasks = new ArrayList<>();\n+  private final List<ValidationTask> mClusterTasks = new ArrayList<>();\n+  private final List<ValidationTask> mMasterTasks = new ArrayList<>();\n+  private final List<ValidationTask> mWorkerTasks = new ArrayList<>();\n+  private final Map<String, Collection<ValidationTask>> mTargetTasks;\n+\n+  private final AlluxioConfiguration mConf;\n+  private final String mPath;\n+\n+  /**\n+   * Initializes from the target UFS path and configurations.\n+   *\n+   * @param path the UFS path\n+   * @param conf the UFS configurtions\n+   * */\n+  public EnvValidationTool(String path, AlluxioConfiguration conf) {\n+    mPath = path;\n+    mConf = conf;\n+\n+    // HDFS configuration validations\n+    registerTask(\"ufs.hdfs.config.correctness\", \"validate HDFS configuration files\",\n+            new HdfsConfValidationTask(mPath, mConf), mCommonTasks);\n+    registerTask(\"ufs.hdfs.config.parity\",\n+            \"validate HDFS-related configurations\",\n+            new HdfsConfParityValidationTask(mPath, mConf), mCommonTasks);\n+    registerTask(\"ufs.hdfs.config.proxyuser\",\n+            \"validate proxyuser configuration in hdfs for alluxio\",\n+            new HdfsProxyUserValidationTask(mPath, mConf), mCommonTasks);\n+    registerTask(\"ufs.hdfs.config.version\",\n+            \"validate version compatibility between alluxio and hdfs\",\n+            new HdfsVersionValidationTask(mConf), mCommonTasks);\n+\n+    // port availability validations\n+    registerTask(\"master.rpc.port.available\",\n+            \"validate master RPC port is available\",\n+            new PortAvailabilityValidationTask(ServiceType.MASTER_RPC, ALLUXIO_MASTER_CLASS, mConf),\n+            mMasterTasks);\n+    registerTask(\"master.web.port.available\",\n+            \"validate master web port is available\",\n+            new PortAvailabilityValidationTask(ServiceType.MASTER_WEB, ALLUXIO_MASTER_CLASS, mConf),\n+            mMasterTasks);\n+    registerTask(\"worker.rpc.port.available\",\n+            \"validate worker RPC port is available\",\n+            new PortAvailabilityValidationTask(ServiceType.WORKER_RPC, ALLUXIO_WORKER_CLASS, mConf),\n+            mWorkerTasks);\n+    registerTask(\"worker.web.port.available\",\n+            \"validate worker web port is available\",\n+            new PortAvailabilityValidationTask(ServiceType.WORKER_WEB, ALLUXIO_WORKER_CLASS, mConf),\n+            mWorkerTasks);\n+    registerTask(\"proxy.web.port.available\",\n+            \"validate proxy web port is available\",\n+            new PortAvailabilityValidationTask(ServiceType.PROXY_WEB, ALLUXIO_PROXY_CLASS, mConf),\n+            mCommonTasks);\n+\n+    // security configuration validations\n+    registerTask(\"master.ufs.hdfs.security.kerberos\",\n+            \"validate kerberos security configurations for masters\",\n+            new SecureHdfsValidationTask(\"master\", mPath, mConf), mMasterTasks);\n+    registerTask(\"worker.ufs.hdfs.security.kerberos\",\n+            \"validate kerberos security configurations for workers\",\n+            new SecureHdfsValidationTask(\"worker\", mPath, mConf), mWorkerTasks);\n+\n+    // ssh validations\n+    registerTask(\"ssh.nodes.reachable\",\n+            \"validate SSH port on all Alluxio nodes are reachable\",\n+            new SshValidationTask(mConf), mCommonTasks);\n+\n+    // UFS validations\n+    registerTask(\"ufs.path.accessible\",\n+            \"validate the under file system location is accessible\",\n+            new UfsDirectoryValidationTask(mPath, mConf), mCommonTasks);\n+    registerTask(\"ufs.path.superuser\",\n+            \"validate Alluxio has super user privilege on the under file system\",\n+            new UfsSuperUserValidationTask(mPath, mConf), mCommonTasks);\n+\n+    // RAM disk validations\n+    registerTask(\"worker.ramdisk.mount.privilege\",\n+            \"validate user has the correct privilege to mount ramdisk\",\n+            new RamDiskMountPrivilegeValidationTask(mConf), mWorkerTasks);\n+\n+    // User limit validations\n+    registerTask(\"ulimit.nofile\",\n+            \"validate ulimit for number of open files is set appropriately\",\n+            UserLimitValidationTask.createOpenFilesLimitValidationTask(), mCommonTasks);\n+    registerTask(\"ulimit.nproc\",\n+            \"validate ulimit for number of processes is set appropriately\",\n+            UserLimitValidationTask.createUserProcessesLimitValidationTask(), mCommonTasks);\n+\n+    // space validations\n+    registerTask(\"worker.storage.space\",\n+            \"validate tiered storage locations have enough space\",\n+            new StorageSpaceValidationTask(mConf), mWorkerTasks);\n+    registerTask(\"cluster.conf.consistent\",\n+            \"validate configuration consistency across the cluster\",\n+            new ClusterConfConsistencyValidationTask(mConf), mClusterTasks);\n+\n+    // java option validations\n+    registerTask(\"java.native.libs\", \"validate java native lib paths\",\n+            new NativeLibValidationTask(), mCommonTasks);\n+\n+    mTargetTasks = initializeTargetTasks();\n+  }\n+\n+  private Map<String, Collection<ValidationTask>> initializeTargetTasks() {\n+    Map<String, Collection<ValidationTask>> targetMap = new TreeMap<>();\n+    List<ValidationTask> allMasterTasks = new ArrayList<>(mCommonTasks);\n+    allMasterTasks.addAll(mMasterTasks);\n+    targetMap.put(\"master\", allMasterTasks);\n+    List<ValidationTask> allWorkerTasks = new ArrayList<>(mCommonTasks);\n+    allWorkerTasks.addAll(mWorkerTasks);\n+    targetMap.put(\"worker\", allWorkerTasks);\n+    targetMap.put(\"local\", mTasks.keySet());\n+    targetMap.put(\"cluster\", new ArrayList<>(mClusterTasks));\n+    return targetMap;\n+  }\n+\n+  private ValidationTask registerTask(String name, String description,\n+                   ValidationTask task, List<ValidationTask> tasks) {\n+    mTasks.put(task, name);\n+    mTaskDescriptions.put(name, description);\n+    tasks.add(task);\n+    return task;\n+  }\n+\n+  /**\n+   * Get the tasks registered.\n+   *\n+   * @return a map of tasks mapping to their name\n+   * */\n+  public Map<ValidationTask, String> getTasks() {\n+    return Collections.unmodifiableMap(mTasks);\n+  }\n+\n+  private boolean validateRemote(Collection<String> nodes, String target,\n+                                 String name, CommandLine cmd) throws InterruptedException {\n+    if (nodes == null) {\n+      return false;\n+    }\n+\n+    boolean success = true;\n+    for (String node : nodes) {\n+      success &= validateRemote(node, target, name, cmd);\n+    }\n+\n+    return success;\n+  }\n+\n+  // validates environment on remote node\n+  private boolean validateRemote(String node, String target, String name,\n+                                 CommandLine cmd) throws InterruptedException {\n+    System.out.format(\"Validating %s environment on %s...%n\", target, node);\n+    if (!CommonUtils.isAddressReachable(node, 22)) {\n+      System.err.format(\"Unable to reach ssh port 22 on node %s.%n\", node);\n+      return false;\n+    }\n+\n+    // args is not null.\n+    String argStr = String.join(\" \", cmd.getArgs());\n+    String homeDir = mConf.get(PropertyKey.HOME);\n+    String remoteCommand = String.format(\n+        \"%s/bin/alluxio validateEnv %s %s %s\",\n+        homeDir, target, name == null ? \"\" : name, argStr);\n+    String localCommand = String.format(\n+        \"ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -tt %s \\\"bash %s\\\"\",\n+        node, remoteCommand);\n+    String[] command = {\"bash\", \"-c\", localCommand};\n+    try {\n+      ProcessBuilder builder = new ProcessBuilder(command);\n+      builder.redirectErrorStream(true);\n+      builder.redirectOutput(ProcessBuilder.Redirect.INHERIT);\n+      builder.redirectInput(ProcessBuilder.Redirect.INHERIT);\n+      Process process = builder.start();\n+      process.waitFor();\n+      return process.exitValue() == 0;\n+    } catch (IOException e) {\n+      System.err.format(\"Unable to validate on node %s: %s.%n\", node, e.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Runs the validation tasks locally.\n+   *\n+   * @param target target task set\n+   * @param name task name prefix\n+   * @param cmd the command line\n+   * @return whether the validations passed\n+   * */\n+  public boolean validateLocal(String target, String name, CommandLine cmd)\n+      throws InterruptedException {\n+    int validationCount = 0;\n+    Map<ValidationUtils.State, Integer> results = new HashMap<>();\n+    Map<String, String> optionsMap = new HashMap<>();\n+    for (Option opt : cmd.getOptions()) {\n+      optionsMap.put(opt.getOpt(), opt.getValue());\n+    }\n+    Collection<ValidationTask> tasks = mTargetTasks.get(target);\n+    System.out.format(\"Validating %s environment...%n\", target);\n+    for (ValidationTask task: tasks) {\n+      String taskName = mTasks.get(task);\n+      if (name != null && !taskName.startsWith(name)) {\n+        continue;\n+      }\n+      System.out.format(\"Validating %s...%n\", taskName);\n+      ValidationUtils.TaskResult result = task.validate(optionsMap);\n+      results.put(result.mState, results.getOrDefault(result, 0) + 1);\n+      switch (result.mState) {\n+        case OK:\n+          System.out.print(Constants.ANSI_GREEN);\n+          break;\n+        case WARNING:\n+          System.out.print(Constants.ANSI_YELLOW);\n+          break;\n+        case FAILED:\n+          System.out.print(Constants.ANSI_RED);\n+          break;\n+        case SKIPPED:\n+          System.out.print(Constants.ANSI_PURPLE);\n+          break;\n+        default:\n+          break;\n+      }\n+      System.out.print(result.getName());\n+      System.out.println(Constants.ANSI_RESET);\n+      validationCount++;\n+    }\n+    if (results.containsKey(ValidationUtils.State.FAILED)) {\n+      System.err.format(\"%d failures \", results.get(ValidationUtils.State.FAILED));\n+    }\n+    if (results.containsKey(ValidationUtils.State.WARNING)) {\n+      System.err.format(\"%d warnings \", results.get(ValidationUtils.State.WARNING));\n+    }\n+    if (results.containsKey(ValidationUtils.State.SKIPPED)) {\n+      System.err.format(\"%d skipped \", results.get(ValidationUtils.State.SKIPPED));\n+    }\n+    System.err.println();\n+    if (validationCount == 0) {\n+      System.err.format(\"No validation task matched name \\\"%s\\\".%n\", name);\n+      return false;\n+    }\n+    if (results.containsKey(ValidationUtils.State.FAILED)) {\n+      return false;\n+    }\n+    System.out.println(\"Validation succeeded.\");\n+    return true;\n+  }\n+\n+  /**\n+   * Runs the worker validation tasks.\n+   *\n+   * @param name task name prefix\n+   * @param cmd the command line\n+   * @return whether the validations passed\n+   * */\n+  public boolean validateWorkers(String name, CommandLine cmd) throws InterruptedException {\n+    return validateRemote(ConfigurationUtils.getWorkerHostnames(mConf), \"worker\", name, cmd);\n+  }\n+\n+  /**\n+   * Runs the master validation tasks.\n+   *\n+   * @param name target task prefix\n+   * @param cmd the command line\n+   * @return whether the validations passed\n+   * */\n+  public boolean validateMasters(String name, CommandLine cmd) throws InterruptedException {\n+    return validateRemote(ConfigurationUtils.getMasterHostnames(mConf), \"master\", name, cmd);\n+  }\n+\n+  private void printTasks(String target) {\n+    System.out.format(\"The following tasks are available to run on %s:%n\", target);\n+    Collection<ValidationTask> tasks = mTargetTasks.get(target);\n+    for (ValidationTask task: tasks) {\n+      String taskName = mTasks.get(task);\n+      System.out.printf(\"%s: %s%n\", taskName, mTaskDescriptions.get(taskName));\n+    }\n+    System.out.println();\n+  }\n+\n+  /**\n+   * Prints all the tasks.\n+   * */\n+  public void printTasks() {\n+    printTasks(\"master\");\n+    printTasks(\"worker\");\n+    printTasks(\"cluster\");\n+  }\n+\n+  /**\n+   * Aggregates the options from each validation tasks.\n+   * Each {@link ValidationTask} defines the {@link Options} in a OPTIONS field\n+   *\n+   * @return all options\n+   * */\n+  public static Options getOptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ca39e9b473509c788e7ab616ec54d312cf472b"}, "originalPosition": 347}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNjU0MQ==", "bodyText": "not sure i understand the issue here, did the HmsTool have a similar problem?", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441736541", "createdAt": "2020-06-17T18:13:41Z", "author": {"login": "madanadit"}, "path": "integration/tools/validation/src/main/java/alluxio/cli/EnvValidationTool.java", "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli;\n+\n+import alluxio.Constants;\n+import alluxio.cli.hdfs.HdfsConfParityValidationTask;\n+import alluxio.cli.hdfs.HdfsConfValidationTask;\n+import alluxio.cli.hdfs.HdfsProxyUserValidationTask;\n+import alluxio.cli.hdfs.HdfsVersionValidationTask;\n+import alluxio.cli.hdfs.SecureHdfsValidationTask;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.util.CommonUtils;\n+import alluxio.util.ConfigurationUtils;\n+import alluxio.util.network.NetworkAddressUtils.ServiceType;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.reflections.Reflections;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.TreeMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Utility for checking Alluxio environment.\n+ */\n+// TODO(yanqin): decouple ValidationTask implementations for easier dependency management\n+public final class EnvValidationTool {\n+  private static final String ALLUXIO_MASTER_CLASS = \"alluxio.master.AlluxioMaster\";\n+  private static final String ALLUXIO_WORKER_CLASS = \"alluxio.worker.AlluxioWorker\";\n+  private static final String ALLUXIO_PROXY_CLASS = \"alluxio.proxy.AlluxioProxy\";\n+\n+  private final Map<ValidationTask, String> mTasks = new HashMap<>();\n+  private final Map<String, String> mTaskDescriptions = new HashMap<>();\n+  private final List<ValidationTask> mCommonTasks = new ArrayList<>();\n+  private final List<ValidationTask> mClusterTasks = new ArrayList<>();\n+  private final List<ValidationTask> mMasterTasks = new ArrayList<>();\n+  private final List<ValidationTask> mWorkerTasks = new ArrayList<>();\n+  private final Map<String, Collection<ValidationTask>> mTargetTasks;\n+\n+  private final AlluxioConfiguration mConf;\n+  private final String mPath;\n+\n+  /**\n+   * Initializes from the target UFS path and configurations.\n+   *\n+   * @param path the UFS path\n+   * @param conf the UFS configurtions\n+   * */\n+  public EnvValidationTool(String path, AlluxioConfiguration conf) {\n+    mPath = path;\n+    mConf = conf;\n+\n+    // HDFS configuration validations\n+    registerTask(\"ufs.hdfs.config.correctness\", \"validate HDFS configuration files\",\n+            new HdfsConfValidationTask(mPath, mConf), mCommonTasks);\n+    registerTask(\"ufs.hdfs.config.parity\",\n+            \"validate HDFS-related configurations\",\n+            new HdfsConfParityValidationTask(mPath, mConf), mCommonTasks);\n+    registerTask(\"ufs.hdfs.config.proxyuser\",\n+            \"validate proxyuser configuration in hdfs for alluxio\",\n+            new HdfsProxyUserValidationTask(mPath, mConf), mCommonTasks);\n+    registerTask(\"ufs.hdfs.config.version\",\n+            \"validate version compatibility between alluxio and hdfs\",\n+            new HdfsVersionValidationTask(mConf), mCommonTasks);\n+\n+    // port availability validations\n+    registerTask(\"master.rpc.port.available\",\n+            \"validate master RPC port is available\",\n+            new PortAvailabilityValidationTask(ServiceType.MASTER_RPC, ALLUXIO_MASTER_CLASS, mConf),\n+            mMasterTasks);\n+    registerTask(\"master.web.port.available\",\n+            \"validate master web port is available\",\n+            new PortAvailabilityValidationTask(ServiceType.MASTER_WEB, ALLUXIO_MASTER_CLASS, mConf),\n+            mMasterTasks);\n+    registerTask(\"worker.rpc.port.available\",\n+            \"validate worker RPC port is available\",\n+            new PortAvailabilityValidationTask(ServiceType.WORKER_RPC, ALLUXIO_WORKER_CLASS, mConf),\n+            mWorkerTasks);\n+    registerTask(\"worker.web.port.available\",\n+            \"validate worker web port is available\",\n+            new PortAvailabilityValidationTask(ServiceType.WORKER_WEB, ALLUXIO_WORKER_CLASS, mConf),\n+            mWorkerTasks);\n+    registerTask(\"proxy.web.port.available\",\n+            \"validate proxy web port is available\",\n+            new PortAvailabilityValidationTask(ServiceType.PROXY_WEB, ALLUXIO_PROXY_CLASS, mConf),\n+            mCommonTasks);\n+\n+    // security configuration validations\n+    registerTask(\"master.ufs.hdfs.security.kerberos\",\n+            \"validate kerberos security configurations for masters\",\n+            new SecureHdfsValidationTask(\"master\", mPath, mConf), mMasterTasks);\n+    registerTask(\"worker.ufs.hdfs.security.kerberos\",\n+            \"validate kerberos security configurations for workers\",\n+            new SecureHdfsValidationTask(\"worker\", mPath, mConf), mWorkerTasks);\n+\n+    // ssh validations\n+    registerTask(\"ssh.nodes.reachable\",\n+            \"validate SSH port on all Alluxio nodes are reachable\",\n+            new SshValidationTask(mConf), mCommonTasks);\n+\n+    // UFS validations\n+    registerTask(\"ufs.path.accessible\",\n+            \"validate the under file system location is accessible\",\n+            new UfsDirectoryValidationTask(mPath, mConf), mCommonTasks);\n+    registerTask(\"ufs.path.superuser\",\n+            \"validate Alluxio has super user privilege on the under file system\",\n+            new UfsSuperUserValidationTask(mPath, mConf), mCommonTasks);\n+\n+    // RAM disk validations\n+    registerTask(\"worker.ramdisk.mount.privilege\",\n+            \"validate user has the correct privilege to mount ramdisk\",\n+            new RamDiskMountPrivilegeValidationTask(mConf), mWorkerTasks);\n+\n+    // User limit validations\n+    registerTask(\"ulimit.nofile\",\n+            \"validate ulimit for number of open files is set appropriately\",\n+            UserLimitValidationTask.createOpenFilesLimitValidationTask(), mCommonTasks);\n+    registerTask(\"ulimit.nproc\",\n+            \"validate ulimit for number of processes is set appropriately\",\n+            UserLimitValidationTask.createUserProcessesLimitValidationTask(), mCommonTasks);\n+\n+    // space validations\n+    registerTask(\"worker.storage.space\",\n+            \"validate tiered storage locations have enough space\",\n+            new StorageSpaceValidationTask(mConf), mWorkerTasks);\n+    registerTask(\"cluster.conf.consistent\",\n+            \"validate configuration consistency across the cluster\",\n+            new ClusterConfConsistencyValidationTask(mConf), mClusterTasks);\n+\n+    // java option validations\n+    registerTask(\"java.native.libs\", \"validate java native lib paths\",\n+            new NativeLibValidationTask(), mCommonTasks);\n+\n+    mTargetTasks = initializeTargetTasks();\n+  }\n+\n+  private Map<String, Collection<ValidationTask>> initializeTargetTasks() {\n+    Map<String, Collection<ValidationTask>> targetMap = new TreeMap<>();\n+    List<ValidationTask> allMasterTasks = new ArrayList<>(mCommonTasks);\n+    allMasterTasks.addAll(mMasterTasks);\n+    targetMap.put(\"master\", allMasterTasks);\n+    List<ValidationTask> allWorkerTasks = new ArrayList<>(mCommonTasks);\n+    allWorkerTasks.addAll(mWorkerTasks);\n+    targetMap.put(\"worker\", allWorkerTasks);\n+    targetMap.put(\"local\", mTasks.keySet());\n+    targetMap.put(\"cluster\", new ArrayList<>(mClusterTasks));\n+    return targetMap;\n+  }\n+\n+  private ValidationTask registerTask(String name, String description,\n+                   ValidationTask task, List<ValidationTask> tasks) {\n+    mTasks.put(task, name);\n+    mTaskDescriptions.put(name, description);\n+    tasks.add(task);\n+    return task;\n+  }\n+\n+  /**\n+   * Get the tasks registered.\n+   *\n+   * @return a map of tasks mapping to their name\n+   * */\n+  public Map<ValidationTask, String> getTasks() {\n+    return Collections.unmodifiableMap(mTasks);\n+  }\n+\n+  private boolean validateRemote(Collection<String> nodes, String target,\n+                                 String name, CommandLine cmd) throws InterruptedException {\n+    if (nodes == null) {\n+      return false;\n+    }\n+\n+    boolean success = true;\n+    for (String node : nodes) {\n+      success &= validateRemote(node, target, name, cmd);\n+    }\n+\n+    return success;\n+  }\n+\n+  // validates environment on remote node\n+  private boolean validateRemote(String node, String target, String name,\n+                                 CommandLine cmd) throws InterruptedException {\n+    System.out.format(\"Validating %s environment on %s...%n\", target, node);\n+    if (!CommonUtils.isAddressReachable(node, 22)) {\n+      System.err.format(\"Unable to reach ssh port 22 on node %s.%n\", node);\n+      return false;\n+    }\n+\n+    // args is not null.\n+    String argStr = String.join(\" \", cmd.getArgs());\n+    String homeDir = mConf.get(PropertyKey.HOME);\n+    String remoteCommand = String.format(\n+        \"%s/bin/alluxio validateEnv %s %s %s\",\n+        homeDir, target, name == null ? \"\" : name, argStr);\n+    String localCommand = String.format(\n+        \"ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -tt %s \\\"bash %s\\\"\",\n+        node, remoteCommand);\n+    String[] command = {\"bash\", \"-c\", localCommand};\n+    try {\n+      ProcessBuilder builder = new ProcessBuilder(command);\n+      builder.redirectErrorStream(true);\n+      builder.redirectOutput(ProcessBuilder.Redirect.INHERIT);\n+      builder.redirectInput(ProcessBuilder.Redirect.INHERIT);\n+      Process process = builder.start();\n+      process.waitFor();\n+      return process.exitValue() == 0;\n+    } catch (IOException e) {\n+      System.err.format(\"Unable to validate on node %s: %s.%n\", node, e.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Runs the validation tasks locally.\n+   *\n+   * @param target target task set\n+   * @param name task name prefix\n+   * @param cmd the command line\n+   * @return whether the validations passed\n+   * */\n+  public boolean validateLocal(String target, String name, CommandLine cmd)\n+      throws InterruptedException {\n+    int validationCount = 0;\n+    Map<ValidationUtils.State, Integer> results = new HashMap<>();\n+    Map<String, String> optionsMap = new HashMap<>();\n+    for (Option opt : cmd.getOptions()) {\n+      optionsMap.put(opt.getOpt(), opt.getValue());\n+    }\n+    Collection<ValidationTask> tasks = mTargetTasks.get(target);\n+    System.out.format(\"Validating %s environment...%n\", target);\n+    for (ValidationTask task: tasks) {\n+      String taskName = mTasks.get(task);\n+      if (name != null && !taskName.startsWith(name)) {\n+        continue;\n+      }\n+      System.out.format(\"Validating %s...%n\", taskName);\n+      ValidationUtils.TaskResult result = task.validate(optionsMap);\n+      results.put(result.mState, results.getOrDefault(result, 0) + 1);\n+      switch (result.mState) {\n+        case OK:\n+          System.out.print(Constants.ANSI_GREEN);\n+          break;\n+        case WARNING:\n+          System.out.print(Constants.ANSI_YELLOW);\n+          break;\n+        case FAILED:\n+          System.out.print(Constants.ANSI_RED);\n+          break;\n+        case SKIPPED:\n+          System.out.print(Constants.ANSI_PURPLE);\n+          break;\n+        default:\n+          break;\n+      }\n+      System.out.print(result.getName());\n+      System.out.println(Constants.ANSI_RESET);\n+      validationCount++;\n+    }\n+    if (results.containsKey(ValidationUtils.State.FAILED)) {\n+      System.err.format(\"%d failures \", results.get(ValidationUtils.State.FAILED));\n+    }\n+    if (results.containsKey(ValidationUtils.State.WARNING)) {\n+      System.err.format(\"%d warnings \", results.get(ValidationUtils.State.WARNING));\n+    }\n+    if (results.containsKey(ValidationUtils.State.SKIPPED)) {\n+      System.err.format(\"%d skipped \", results.get(ValidationUtils.State.SKIPPED));\n+    }\n+    System.err.println();\n+    if (validationCount == 0) {\n+      System.err.format(\"No validation task matched name \\\"%s\\\".%n\", name);\n+      return false;\n+    }\n+    if (results.containsKey(ValidationUtils.State.FAILED)) {\n+      return false;\n+    }\n+    System.out.println(\"Validation succeeded.\");\n+    return true;\n+  }\n+\n+  /**\n+   * Runs the worker validation tasks.\n+   *\n+   * @param name task name prefix\n+   * @param cmd the command line\n+   * @return whether the validations passed\n+   * */\n+  public boolean validateWorkers(String name, CommandLine cmd) throws InterruptedException {\n+    return validateRemote(ConfigurationUtils.getWorkerHostnames(mConf), \"worker\", name, cmd);\n+  }\n+\n+  /**\n+   * Runs the master validation tasks.\n+   *\n+   * @param name target task prefix\n+   * @param cmd the command line\n+   * @return whether the validations passed\n+   * */\n+  public boolean validateMasters(String name, CommandLine cmd) throws InterruptedException {\n+    return validateRemote(ConfigurationUtils.getMasterHostnames(mConf), \"master\", name, cmd);\n+  }\n+\n+  private void printTasks(String target) {\n+    System.out.format(\"The following tasks are available to run on %s:%n\", target);\n+    Collection<ValidationTask> tasks = mTargetTasks.get(target);\n+    for (ValidationTask task: tasks) {\n+      String taskName = mTasks.get(task);\n+      System.out.printf(\"%s: %s%n\", taskName, mTaskDescriptions.get(taskName));\n+    }\n+    System.out.println();\n+  }\n+\n+  /**\n+   * Prints all the tasks.\n+   * */\n+  public void printTasks() {\n+    printTasks(\"master\");\n+    printTasks(\"worker\");\n+    printTasks(\"cluster\");\n+  }\n+\n+  /**\n+   * Aggregates the options from each validation tasks.\n+   * Each {@link ValidationTask} defines the {@link Options} in a OPTIONS field\n+   *\n+   * @return all options\n+   * */\n+  public static Options getOptions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NTQ0Mw=="}, "originalCommit": {"oid": "33ca39e9b473509c788e7ab616ec54d312cf472b"}, "originalPosition": 347}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTY4MTA5OnYy", "diffSide": "RIGHT", "path": "integration/tools/validation/src/main/java/alluxio/cli/HdfsValidationTool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoxNjoxMlrOGlNKog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoxNjoxMlrOGlNKog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NjIxMA==", "bodyText": "This is previously the ValidateHdfsMount class. Now it's split into two:\n\nThe real work logic is here.\nThe trigger is in a new ValidateHdfsMount class in shell/", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441666210", "createdAt": "2020-06-17T16:16:12Z", "author": {"login": "jiacheliu3"}, "path": "integration/tools/validation/src/main/java/alluxio/cli/HdfsValidationTool.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli;\n+\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A tool to validate an HDFS mount, before the path is mounted to Alluxio.\n+ * */\n+public class HdfsValidationTool {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ca39e9b473509c788e7ab616ec54d312cf472b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTY4MzE3OnYy", "diffSide": "RIGHT", "path": "integration/tools/validation/src/main/java/alluxio/cli/NativeLibValidationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoxNjo0NlrOGlNL3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoxNjo0NlrOGlNL3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NjUyNg==", "bodyText": "AbstractValidationTask is now gone, as the only method it implements does not exist anymore.", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441666526", "createdAt": "2020-06-17T16:16:46Z", "author": {"login": "jiacheliu3"}, "path": "integration/tools/validation/src/main/java/alluxio/cli/NativeLibValidationTask.java", "diffHunk": "@@ -21,7 +19,7 @@\n  * Validates the Java native libs defined in the system property.\n  * */\n @ApplicableUfsType(ApplicableUfsType.Type.ALL)\n-public class NativeLibValidationTask extends AbstractValidationTask {\n+public class NativeLibValidationTask implements ValidationTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ca39e9b473509c788e7ab616ec54d312cf472b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTY5MDgwOnYy", "diffSide": "RIGHT", "path": "integration/tools/validation/src/main/java/alluxio/cli/UnderFileSystemContractTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoxODo1MlrOGlNQtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoxODo1MlrOGlNQtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2Nzc2NA==", "bodyText": "This class is now split into two:\n\nThe real work logic is here\nThe trigger is UfsTests class in shell/ module", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441667764", "createdAt": "2020-06-17T16:18:52Z", "author": {"login": "jiacheliu3"}, "path": "integration/tools/validation/src/main/java/alluxio/cli/UnderFileSystemContractTest.java", "diffHunk": "@@ -81,6 +80,15 @@ public UnderFileSystemContractTest(String path, InstancedConfiguration conf) {\n     mConf = conf;\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ca39e9b473509c788e7ab616ec54d312cf472b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTY5OTMwOnYy", "diffSide": "LEFT", "path": "integration/tools/validation/src/test/java/alluxio/cli/ValidationTestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoyMToxMlrOGlNWBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoyMToxMlrOGlNWBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2OTEyNw==", "bodyText": "These two lines were actually a mistake that should be changed to not a util method for tests in another package. This overlook wasn't identified until I moved this class out of that module.", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441669127", "createdAt": "2020-06-17T16:21:12Z", "author": {"login": "jiacheliu3"}, "path": "integration/tools/validation/src/test/java/alluxio/cli/ValidationTestUtils.java", "diffHunk": "@@ -95,8 +94,8 @@ private static Element createElement(Document doc, String k, String v) {\n   public static File prepareConfDir() throws IOException {\n     // The dir path will contain randomness so will be different every time\n     File testConfDir = createTemporaryDirectory();\n-    InfoCollectorTestUtils.createFileInDir(testConfDir, \"core-site.xml\");\n-    InfoCollectorTestUtils.createFileInDir(testConfDir, \"hdfs-site.xml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ca39e9b473509c788e7ab616ec54d312cf472b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTcwNDk4OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/UfsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoyMjozOVrOGlNZhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoyMjozOVrOGlNZhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3MDAyMQ==", "bodyText": "This class is called by runUfsTests, enclosing all the command line logic from the old UnderFileSystemContractTest class", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441670021", "createdAt": "2020-06-17T16:22:39Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/UfsTests.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package alluxio.cli;\n+\n+import com.beust.jcommander.JCommander;\n+\n+public class UfsTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ca39e9b473509c788e7ab616ec54d312cf472b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTcwNzU4OnYy", "diffSide": "LEFT", "path": "shell/src/main/java/alluxio/cli/ValidateHdfsMount.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoyMzoxOFrOGlNbNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoyMzoxOFrOGlNbNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3MDQ1NQ==", "bodyText": "This class now only contains the commandline logic", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441670455", "createdAt": "2020-06-17T16:23:18Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/ValidateHdfsMount.java", "diffHunk": "@@ -183,25 +129,9 @@ public static void main(String[] args) throws Exception {\n       LOG.debug(\"Options from cmdline: {}\", properties);\n     }\n \n-    // Run validateEnv\n-    List<ValidationUtils.TaskResult> results = validateUfs(ufsPath, ufsConf);\n-\n-    // Run runUfsTests\n-    if (ufsConf.isReadOnly()) {\n-      LOG.debug(\"Ufs operations are skipped because the path is readonly.\");\n-      results.add(new ValidationUtils.TaskResult(ValidationUtils.State.SKIPPED,\n-              UnderFileSystemContractTest.TASK_NAME,\n-              String.format(\"UFS path %s is readonly, skipped UFS operation tests.\", ufsPath),\n-              \"\"));\n-    } else {\n-      results.add(runUfsTests(ufsPath, new InstancedConfiguration(ufsConf)));\n-    }\n-\n     // group by state\n-    Map<ValidationUtils.State, List<ValidationUtils.TaskResult>> map = new HashMap<>();\n-    results.stream().forEach((r) -> {\n-      map.computeIfAbsent(r.getState(), (k) -> new ArrayList<>()).add(r);\n-    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ca39e9b473509c788e7ab616ec54d312cf472b"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTczNTEyOnYy", "diffSide": "LEFT", "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjozMDo0N1rOGlNtGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjozMDo0N1rOGlNtGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NTAzNQ==", "bodyText": "The todo is moved into EnvValidationTools", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441675035", "createdAt": "2020-06-17T16:30:47Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -11,53 +11,23 @@\n \n package alluxio.cli;\n \n-import alluxio.Constants;\n-import alluxio.cli.validation.AbstractValidationTask;\n-import alluxio.cli.validation.ClusterConfConsistencyValidationTask;\n-import alluxio.cli.validation.hdfs.HdfsConfParityValidationTask;\n-import alluxio.cli.validation.hdfs.HdfsConfValidationTask;\n-import alluxio.cli.validation.hdfs.HdfsProxyUserValidationTask;\n-import alluxio.cli.validation.hdfs.HdfsVersionValidationTask;\n-import alluxio.cli.validation.NativeLibValidationTask;\n-import alluxio.cli.validation.PortAvailabilityValidationTask;\n-import alluxio.cli.validation.RamDiskMountPrivilegeValidationTask;\n-import alluxio.cli.validation.hdfs.SecureHdfsValidationTask;\n-import alluxio.cli.validation.SshValidationTask;\n-import alluxio.cli.validation.StorageSpaceValidationTask;\n-import alluxio.cli.validation.UfsDirectoryValidationTask;\n-import alluxio.cli.validation.UfsSuperUserValidationTask;\n-import alluxio.cli.validation.UserLimitValidationTask;\n-import alluxio.cli.validation.ValidationTask;\n import alluxio.conf.AlluxioConfiguration;\n import alluxio.conf.InstancedConfiguration;\n import alluxio.conf.PropertyKey;\n import alluxio.exception.status.InvalidArgumentException;\n-import alluxio.util.CommonUtils;\n-import alluxio.util.ConfigurationUtils;\n-import alluxio.util.network.NetworkAddressUtils.ServiceType;\n \n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.CommandLineParser;\n import org.apache.commons.cli.DefaultParser;\n import org.apache.commons.cli.HelpFormatter;\n-import org.apache.commons.cli.Option;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n \n-import java.io.IOException;\n import java.util.Arrays;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.TreeMap;\n-import java.util.List;\n-import java.util.Map;\n \n /**\n  * Utility for checking Alluxio environment.\n  */\n-// TODO(yanqin): decouple ValidationTask implementations for easier dependency management", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4294932d6c55b20e6cd88f8279362f4ed45fd5b9"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTczNTQ0OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjozMDo1M1rOGlNtTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjozMDo1M1rOGlNtTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NTA4Ng==", "bodyText": "This class now only contains the commandline logic", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441675086", "createdAt": "2020-06-17T16:30:53Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -11,53 +11,23 @@\n \n package alluxio.cli;\n \n-import alluxio.Constants;\n-import alluxio.cli.validation.AbstractValidationTask;\n-import alluxio.cli.validation.ClusterConfConsistencyValidationTask;\n-import alluxio.cli.validation.hdfs.HdfsConfParityValidationTask;\n-import alluxio.cli.validation.hdfs.HdfsConfValidationTask;\n-import alluxio.cli.validation.hdfs.HdfsProxyUserValidationTask;\n-import alluxio.cli.validation.hdfs.HdfsVersionValidationTask;\n-import alluxio.cli.validation.NativeLibValidationTask;\n-import alluxio.cli.validation.PortAvailabilityValidationTask;\n-import alluxio.cli.validation.RamDiskMountPrivilegeValidationTask;\n-import alluxio.cli.validation.hdfs.SecureHdfsValidationTask;\n-import alluxio.cli.validation.SshValidationTask;\n-import alluxio.cli.validation.StorageSpaceValidationTask;\n-import alluxio.cli.validation.UfsDirectoryValidationTask;\n-import alluxio.cli.validation.UfsSuperUserValidationTask;\n-import alluxio.cli.validation.UserLimitValidationTask;\n-import alluxio.cli.validation.ValidationTask;\n import alluxio.conf.AlluxioConfiguration;\n import alluxio.conf.InstancedConfiguration;\n import alluxio.conf.PropertyKey;\n import alluxio.exception.status.InvalidArgumentException;\n-import alluxio.util.CommonUtils;\n-import alluxio.util.ConfigurationUtils;\n-import alluxio.util.network.NetworkAddressUtils.ServiceType;\n \n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.CommandLineParser;\n import org.apache.commons.cli.DefaultParser;\n import org.apache.commons.cli.HelpFormatter;\n-import org.apache.commons.cli.Option;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n \n-import java.io.IOException;\n import java.util.Arrays;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.TreeMap;\n-import java.util.List;\n-import java.util.Map;\n \n /**\n  * Utility for checking Alluxio environment.\n  */\n-// TODO(yanqin): decouple ValidationTask implementations for easier dependency management\n public final class ValidateEnv {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4294932d6c55b20e6cd88f8279362f4ed45fd5b9"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA0NjYyOnYy", "diffSide": "RIGHT", "path": "shell/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1Njo1M1rOGlQ3fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1Njo1M1rOGlQ3fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNjg0Ng==", "bodyText": "this is the default scope, why specify explicitly?", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441726846", "createdAt": "2020-06-17T17:56:53Z", "author": {"login": "madanadit"}, "path": "shell/pom.xml", "diffHunk": "@@ -89,6 +89,12 @@\n       <artifactId>alluxio-job-client</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.alluxio</groupId>\n+      <artifactId>alluxio-integration-tools-validation</artifactId>\n+      <version>${project.version}</version>\n+      <scope>compile</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a35031eb53e66e6036f563faf7097082e88fd78f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA3Njc0OnYy", "diffSide": "RIGHT", "path": "shell/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODowNToyMlrOGlRLBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTo0ODoxNVrOGlgbjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMTg0Nw==", "bodyText": "this dependency will be avoided by class loading; can an issue when invoked using the rest server", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441731847", "createdAt": "2020-06-17T18:05:22Z", "author": {"login": "madanadit"}, "path": "shell/pom.xml", "diffHunk": "@@ -89,6 +89,12 @@\n       <artifactId>alluxio-job-client</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a35031eb53e66e6036f563faf7097082e88fd78f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4MjI4MA==", "bodyText": "please use the pattern in this PR #11586 to re-use ValidationToolFactory", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441882280", "createdAt": "2020-06-17T23:12:18Z", "author": {"login": "madanadit"}, "path": "shell/pom.xml", "diffHunk": "@@ -89,6 +89,12 @@\n       <artifactId>alluxio-job-client</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMTg0Nw=="}, "originalCommit": {"oid": "a35031eb53e66e6036f563faf7097082e88fd78f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4MTgzNw==", "bodyText": "Done", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441981837", "createdAt": "2020-06-18T05:48:15Z", "author": {"login": "jiacheliu3"}, "path": "shell/pom.xml", "diffHunk": "@@ -89,6 +89,12 @@\n       <artifactId>alluxio-job-client</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMTg0Nw=="}, "originalCommit": {"oid": "a35031eb53e66e6036f563faf7097082e88fd78f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzU0NjU2OnYy", "diffSide": "RIGHT", "path": "integration/tools/validation/src/main/java/alluxio/cli/UnderFileSystemContractTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNDo1OTowNFrOGlfoZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTo1MDo1MFrOGlgeqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2ODc0Mw==", "bodyText": "newline", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441968743", "createdAt": "2020-06-18T04:59:04Z", "author": {"login": "madanadit"}, "path": "integration/tools/validation/src/main/java/alluxio/cli/UnderFileSystemContractTest.java", "diffHunk": "@@ -338,4 +338,4 @@ public static void main(String[] args) throws Exception {\n       test.run();\n     }\n   }\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a829c7552b01e47cbbfd4ff22e9d04d6fd27e4c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4MjYzNA==", "bodyText": "I'll do another scanning to resolve all formatting/checkstyle issues. This commit contains the main registry logic, and tested the tools are all working fine. I'll do a more thorough test in a bit too.", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441982634", "createdAt": "2020-06-18T05:50:50Z", "author": {"login": "jiacheliu3"}, "path": "integration/tools/validation/src/main/java/alluxio/cli/UnderFileSystemContractTest.java", "diffHunk": "@@ -338,4 +338,4 @@ public static void main(String[] args) throws Exception {\n       test.run();\n     }\n   }\n-}\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2ODc0Mw=="}, "originalCommit": {"oid": "2a829c7552b01e47cbbfd4ff22e9d04d6fd27e4c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzU0NzA2OnYy", "diffSide": "RIGHT", "path": "integration/tools/validation/src/main/java/alluxio/cli/ValidateEnv.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNDo1OToyMlrOGlfotA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNDo1OToyMlrOGlfotA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2ODgyMA==", "bodyText": "newline", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r441968820", "createdAt": "2020-06-18T04:59:22Z", "author": {"login": "madanadit"}, "path": "integration/tools/validation/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -462,16 +461,16 @@ public static void main(String[] args) throws InterruptedException {\n    * @throws InvalidArgumentException if command line contains invalid argument(s)\n    */\n   private static CommandLine parseArgsAndOptions(Options options, String... args)\n-      throws InvalidArgumentException {\n+          throws InvalidArgumentException {\n     CommandLineParser parser = new DefaultParser();\n     CommandLine cmd;\n \n     try {\n       cmd = parser.parse(options, args);\n     } catch (ParseException e) {\n       throw new InvalidArgumentException(\n-          \"Failed to parse args for validateEnv\", e);\n+              \"Failed to parse args for validateEnv\", e);\n     }\n     return cmd;\n   }\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a829c7552b01e47cbbfd4ff22e9d04d6fd27e4c"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDA3NTI3OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/cli/ValidationToolRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoyMjoyMlrOGlkxqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoyMjoyMlrOGlkxqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1MzAzMg==", "bodyText": "fixed a typo", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r442053032", "createdAt": "2020-06-18T08:22:22Z", "author": {"login": "jiacheliu3"}, "path": "core/common/src/main/java/alluxio/cli/ValidationToolRegistry.java", "diffHunk": "@@ -106,7 +106,7 @@ public void refresh() {\n     }\n \n     mFactories = map;\n-    LOG.info(\"Registered UDBs: \" + String.join(\",\", mFactories.keySet()));\n+    LOG.info(\"Registered Factories: \" + String.join(\",\", mFactories.keySet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "113a922fc80ec2ec9208ebeea83dcb48ec721750"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDA3NjE4OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/cli/ValidationTool.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoyMjozNVrOGlkyPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDozNDo0MlrOGmEZ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1MzE4Mg==", "bodyText": "eg: InterruptedException which we cannot avoid", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r442053182", "createdAt": "2020-06-18T08:22:35Z", "author": {"login": "jiacheliu3"}, "path": "core/common/src/main/java/alluxio/cli/ValidationTool.java", "diffHunk": "@@ -21,5 +21,5 @@\n    *\n    * @return a json string of the test results\n    */\n-  String runTests();\n+  String runTests() throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "113a922fc80ec2ec9208ebeea83dcb48ec721750"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzODQzNg==", "bodyText": "because our server will runTests, i try to not affect our server, so all throwable will be transferred to failed task result. Not sure will the exception affects master rest service handler.", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r442538436", "createdAt": "2020-06-18T22:37:29Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/cli/ValidationTool.java", "diffHunk": "@@ -21,5 +21,5 @@\n    *\n    * @return a json string of the test results\n    */\n-  String runTests();\n+  String runTests() throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1MzE4Mg=="}, "originalCommit": {"oid": "113a922fc80ec2ec9208ebeea83dcb48ec721750"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3MTIzNg==", "bodyText": "I'll change Exception to InterruptedException then. Whatever is invoking this tool on the server side should decide how to handle InterruptedException.", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r442571236", "createdAt": "2020-06-19T00:34:42Z", "author": {"login": "jiacheliu3"}, "path": "core/common/src/main/java/alluxio/cli/ValidationTool.java", "diffHunk": "@@ -21,5 +21,5 @@\n    *\n    * @return a json string of the test results\n    */\n-  String runTests();\n+  String runTests() throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1MzE4Mg=="}, "originalCommit": {"oid": "113a922fc80ec2ec9208ebeea83dcb48ec721750"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDA4MjE0OnYy", "diffSide": "RIGHT", "path": "integration/tools/hms/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoyNDowN1rOGlk2HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoyNDowN1rOGlk2HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1NDE3Mw==", "bodyText": "per #11578 (comment)", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r442054173", "createdAt": "2020-06-18T08:24:07Z", "author": {"login": "jiacheliu3"}, "path": "integration/tools/hms/pom.xml", "diffHunk": "@@ -28,7 +28,7 @@\n   <properties>\n     <!-- The following paths need to be defined here as well as in the parent pom so that mvn can -->\n     <!-- run properly from sub-project directories -->\n-    <build.path>${project.parent.parent.parent.basedir}/build</build.path>\n+    <build.path>${project.parent.parent.basedir}/build</build.path>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "113a922fc80ec2ec9208ebeea83dcb48ec721750"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDU2MjczOnYy", "diffSide": "RIGHT", "path": "libexec/alluxio-config.sh", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozNzozOFrOGlpoQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDozOToyOVrOGmEeLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzMjU0NQ==", "bodyText": "@LuQQiu @madanadit I have to add the validation tool jar to a separate classpath, as now we have runUfsTests and validateEnv to directly invoke from there. PTAL if this is acceptable. Thanks!", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r442132545", "createdAt": "2020-06-18T10:37:38Z", "author": {"login": "jiacheliu3"}, "path": "libexec/alluxio-config.sh", "diffHunk": "@@ -31,6 +31,7 @@ VERSION=2.3.0-SNAPSHOT\n ALLUXIO_HOME=$(dirname $(dirname \"${this}\"))\n ALLUXIO_ASSEMBLY_CLIENT_JAR=\"${ALLUXIO_HOME}/assembly/client/target/alluxio-assembly-client-${VERSION}-jar-with-dependencies.jar\"\n ALLUXIO_ASSEMBLY_SERVER_JAR=\"${ALLUXIO_HOME}/assembly/server/target/alluxio-assembly-server-${VERSION}-jar-with-dependencies.jar\"\n+ALLUXIO_VALIDATION_TOOL_JAR=\"${ALLUXIO_HOME}/lib/alluxio-integration-tools-validation-${VERSION}.jar\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cfc93a27574a456fcc4305cdbfa4e1cfa4ca824"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3MzIzMg==", "bodyText": "why can you not add the validation jar to the client classpath itself?", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r442473232", "createdAt": "2020-06-18T20:05:14Z", "author": {"login": "madanadit"}, "path": "libexec/alluxio-config.sh", "diffHunk": "@@ -31,6 +31,7 @@ VERSION=2.3.0-SNAPSHOT\n ALLUXIO_HOME=$(dirname $(dirname \"${this}\"))\n ALLUXIO_ASSEMBLY_CLIENT_JAR=\"${ALLUXIO_HOME}/assembly/client/target/alluxio-assembly-client-${VERSION}-jar-with-dependencies.jar\"\n ALLUXIO_ASSEMBLY_SERVER_JAR=\"${ALLUXIO_HOME}/assembly/server/target/alluxio-assembly-server-${VERSION}-jar-with-dependencies.jar\"\n+ALLUXIO_VALIDATION_TOOL_JAR=\"${ALLUXIO_HOME}/lib/alluxio-integration-tools-validation-${VERSION}.jar\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzMjU0NQ=="}, "originalCommit": {"oid": "6cfc93a27574a456fcc4305cdbfa4e1cfa4ca824"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNzgwOQ==", "bodyText": "that sounds better, add the ALLUXIO_VALIDATION_TOOL_JAR to the ALLUXIO_CLIENT_CLASSPATH (although i am not 100% it works, maybe try it out)", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r442537809", "createdAt": "2020-06-18T22:35:31Z", "author": {"login": "LuQQiu"}, "path": "libexec/alluxio-config.sh", "diffHunk": "@@ -31,6 +31,7 @@ VERSION=2.3.0-SNAPSHOT\n ALLUXIO_HOME=$(dirname $(dirname \"${this}\"))\n ALLUXIO_ASSEMBLY_CLIENT_JAR=\"${ALLUXIO_HOME}/assembly/client/target/alluxio-assembly-client-${VERSION}-jar-with-dependencies.jar\"\n ALLUXIO_ASSEMBLY_SERVER_JAR=\"${ALLUXIO_HOME}/assembly/server/target/alluxio-assembly-server-${VERSION}-jar-with-dependencies.jar\"\n+ALLUXIO_VALIDATION_TOOL_JAR=\"${ALLUXIO_HOME}/lib/alluxio-integration-tools-validation-${VERSION}.jar\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzMjU0NQ=="}, "originalCommit": {"oid": "6cfc93a27574a456fcc4305cdbfa4e1cfa4ca824"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3MjMzMg==", "bodyText": "Adding the validation jar to the client classpath works. By using this separate path i was trying to minimize the impact on client classpath. Since that's fine I'm adding validation jar to the client path.", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r442572332", "createdAt": "2020-06-19T00:39:29Z", "author": {"login": "jiacheliu3"}, "path": "libexec/alluxio-config.sh", "diffHunk": "@@ -31,6 +31,7 @@ VERSION=2.3.0-SNAPSHOT\n ALLUXIO_HOME=$(dirname $(dirname \"${this}\"))\n ALLUXIO_ASSEMBLY_CLIENT_JAR=\"${ALLUXIO_HOME}/assembly/client/target/alluxio-assembly-client-${VERSION}-jar-with-dependencies.jar\"\n ALLUXIO_ASSEMBLY_SERVER_JAR=\"${ALLUXIO_HOME}/assembly/server/target/alluxio-assembly-server-${VERSION}-jar-with-dependencies.jar\"\n+ALLUXIO_VALIDATION_TOOL_JAR=\"${ALLUXIO_HOME}/lib/alluxio-integration-tools-validation-${VERSION}.jar\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzMjU0NQ=="}, "originalCommit": {"oid": "6cfc93a27574a456fcc4305cdbfa4e1cfa4ca824"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzA0OTQxOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/ValidateHdfsMount.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjozMDoyMVrOGmCRWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzowMDozNlrOGmC1cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNjI4MQ==", "bodyText": "Not for this PR, but looks like we refresh the lib load every time we run hmsValidatation or hdfsValidation. It may not be a big problem for now, but looks like I need to consider addressing. @madanadit Will it be better to create the registry and refresh for once one", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r442536281", "createdAt": "2020-06-18T22:30:21Z", "author": {"login": "LuQQiu"}, "path": "shell/src/main/java/alluxio/cli/ValidateHdfsMount.java", "diffHunk": "@@ -183,27 +129,18 @@ public static void main(String[] args) throws Exception {\n       LOG.debug(\"Options from cmdline: {}\", properties);\n     }\n \n-    // Run validateEnv\n-    List<ValidationUtils.TaskResult> results = validateUfs(ufsPath, ufsConf);\n-\n-    // Run runUfsTests\n-    if (ufsConf.isReadOnly()) {\n-      LOG.debug(\"Ufs operations are skipped because the path is readonly.\");\n-      results.add(new ValidationUtils.TaskResult(ValidationUtils.State.SKIPPED,\n-              UnderFileSystemContractTest.TASK_NAME,\n-              String.format(\"UFS path %s is readonly, skipped UFS operation tests.\", ufsPath),\n-              \"\"));\n-    } else {\n-      results.add(runUfsTests(ufsPath, new InstancedConfiguration(ufsConf)));\n-    }\n+    ValidationToolRegistry registry\n+            = new ValidationToolRegistry(new InstancedConfiguration(ConfigurationUtils.defaults()));\n+    // Load hdfs validation tool from alluxio lib directory\n+    registry.refresh();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cfc93a27574a456fcc4305cdbfa4e1cfa4ca824"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0NTUyMw==", "bodyText": "if this behavior is the same on the server side invocation, this can be a bigger issue. the client jvm is short-lived, so its less of an issue", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r442545523", "createdAt": "2020-06-18T23:00:36Z", "author": {"login": "madanadit"}, "path": "shell/src/main/java/alluxio/cli/ValidateHdfsMount.java", "diffHunk": "@@ -183,27 +129,18 @@ public static void main(String[] args) throws Exception {\n       LOG.debug(\"Options from cmdline: {}\", properties);\n     }\n \n-    // Run validateEnv\n-    List<ValidationUtils.TaskResult> results = validateUfs(ufsPath, ufsConf);\n-\n-    // Run runUfsTests\n-    if (ufsConf.isReadOnly()) {\n-      LOG.debug(\"Ufs operations are skipped because the path is readonly.\");\n-      results.add(new ValidationUtils.TaskResult(ValidationUtils.State.SKIPPED,\n-              UnderFileSystemContractTest.TASK_NAME,\n-              String.format(\"UFS path %s is readonly, skipped UFS operation tests.\", ufsPath),\n-              \"\"));\n-    } else {\n-      results.add(runUfsTests(ufsPath, new InstancedConfiguration(ufsConf)));\n-    }\n+    ValidationToolRegistry registry\n+            = new ValidationToolRegistry(new InstancedConfiguration(ConfigurationUtils.defaults()));\n+    // Load hdfs validation tool from alluxio lib directory\n+    registry.refresh();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNjI4MQ=="}, "originalCommit": {"oid": "6cfc93a27574a456fcc4305cdbfa4e1cfa4ca824"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzA2MzQxOnYy", "diffSide": "RIGHT", "path": "integration/tools/validation/src/main/java/alluxio/cli/HdfsValidationTool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjozNzo1MVrOGmCaMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjozNzo1MVrOGmCaMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzODU0Nw==", "bodyText": "indent", "url": "https://github.com/Alluxio/alluxio/pull/11578#discussion_r442538547", "createdAt": "2020-06-18T22:37:51Z", "author": {"login": "LuQQiu"}, "path": "integration/tools/validation/src/main/java/alluxio/cli/HdfsValidationTool.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli;\n+\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A tool to validate an HDFS mount, before the path is mounted to Alluxio.\n+ * */\n+public class HdfsValidationTool implements ValidationTool {\n+  private static final Logger LOG = LoggerFactory.getLogger(HdfsValidationTool.class);\n+\n+  private String mUfsPath;\n+  private UnderFileSystemConfiguration mUfsConf;\n+\n+  /**\n+   * The constructor.\n+   *\n+   * @param ufsPath the ufs path\n+   * @param ufsConf the ufs configuration\n+   * */\n+  public HdfsValidationTool(String ufsPath, UnderFileSystemConfiguration ufsConf) {\n+    mUfsPath = ufsPath;\n+    mUfsConf = ufsConf;\n+  }\n+\n+  private static List<ValidationUtils.TaskResult> validateUfs(String ufsPath,\n+                                                              AlluxioConfiguration ufsConf)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cfc93a27574a456fcc4305cdbfa4e1cfa4ca824"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1652, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}