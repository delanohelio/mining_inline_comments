{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1ODM3NDY3", "number": 11962, "title": "Create a compatibility layer to handle older hive metastores", "bodyText": "Version 2.2.0 of hive metastore client worked with a wide range of server versions, but we have to upgrade it for java 11 support. Hence we add a compatibility library which proxies a number of calls to achieve compatibility with older versions.", "createdAt": "2020-08-11T03:16:42Z", "url": "https://github.com/Alluxio/alluxio/pull/11962", "merged": true, "mergeCommit": {"oid": "575141ba3e82b602ed1d6d7b312cb081348e7abd"}, "closed": true, "closedAt": "2020-08-12T23:51:52Z", "author": {"login": "yuzhu"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9rQZAgH2gAyNDY1ODM3NDY3OjZmOGU4ZGM0MDFlYjhlOTcyODI1YTZmYTkyZjY2NmVlZGNlZDgyMTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-UIAbAFqTQ2NjM0NTc0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6f8e8dc401eb8e972825a6fa92f666eedced8219", "author": {"user": {"login": "yuzhu", "name": "David Zhu"}}, "url": "https://github.com/Alluxio/alluxio/commit/6f8e8dc401eb8e972825a6fa92f666eedced8219", "committedDate": "2020-08-10T23:59:17Z", "message": "bump the version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e4d2343601bb966c0c175063b1a8fd27b939086", "author": {"user": {"login": "yuzhu", "name": "David Zhu"}}, "url": "https://github.com/Alluxio/alluxio/commit/7e4d2343601bb966c0c175063b1a8fd27b939086", "committedDate": "2020-08-11T03:06:34Z", "message": "Implement a compatibility layer for Hive Metastore CLient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bff1b5d9361e059ce974b3ab9250ef992da8ca0", "author": {"user": {"login": "yuzhu", "name": "David Zhu"}}, "url": "https://github.com/Alluxio/alluxio/commit/5bff1b5d9361e059ce974b3ab9250ef992da8ca0", "committedDate": "2020-08-11T05:13:48Z", "message": "add header"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MjM5NjEx", "url": "https://github.com/Alluxio/alluxio/pull/11962#pullrequestreview-465239611", "createdAt": "2020-08-11T16:36:09Z", "commit": {"oid": "5bff1b5d9361e059ce974b3ab9250ef992da8ca0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozNjowOVrOG_AE9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzowMzo0OVrOG_BG3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDc0MA==", "bodyText": "could you specify which versions need the layer? was it < 2.2?", "url": "https://github.com/Alluxio/alluxio/pull/11962#discussion_r468714740", "createdAt": "2020-08-11T16:36:09Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/pom.xml", "diffHunk": "@@ -26,8 +26,8 @@\n     <!-- The following paths need to be defined here as well as in the parent pom so that mvn can -->\n     <!-- run properly from sub-project directories -->\n     <build.path>${project.parent.parent.parent.parent.basedir}/build</build.path>\n-    <!-- 2.2.0 client works with a wide range of HMS, from 1.0 to 3.1 -->\n-    <hive-metastore.version>2.2.0</hive-metastore.version>\n+    <!-- 2.3.7 client needs a compatibility layer to work with lower versions -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bff1b5d9361e059ce974b3ab9250ef992da8ca0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMjYzOQ==", "bodyText": "Should this be private?\nAlso, the second field should be @Nullable I think?", "url": "https://github.com/Alluxio/alluxio/pull/11962#discussion_r468722639", "createdAt": "2020-08-11T16:49:09Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/HMSClientFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Proxy;\n+\n+class HMSClientFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HMSClientFactory.class);\n+\n+  static IMetaStoreClient newInstance(IMetaStoreClient delegate) {\n+    HMSShim compatibility = null;\n+    try {\n+      compatibility = new HMSShim(delegate);\n+    } catch (Throwable t) {\n+      LOG.warn(\"Unable to initialize hive metastore compatibility client\", t);\n+    }\n+    return newInstance(delegate, compatibility);\n+  }\n+\n+  static IMetaStoreClient newInstance(IMetaStoreClient delegate, HMSShim compatibility) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bff1b5d9361e059ce974b3ab9250ef992da8ca0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyNDY4MA==", "bodyText": "If the shim was not created, compatibility will be null. Is that ok?", "url": "https://github.com/Alluxio/alluxio/pull/11962#discussion_r468724680", "createdAt": "2020-08-11T16:52:22Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/HMSClientFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Proxy;\n+\n+class HMSClientFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HMSClientFactory.class);\n+\n+  static IMetaStoreClient newInstance(IMetaStoreClient delegate) {\n+    HMSShim compatibility = null;\n+    try {\n+      compatibility = new HMSShim(delegate);\n+    } catch (Throwable t) {\n+      LOG.warn(\"Unable to initialize hive metastore compatibility client\", t);\n+    }\n+    return newInstance(delegate, compatibility);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bff1b5d9361e059ce974b3ab9250ef992da8ca0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyNTQ4MA==", "bodyText": "I'm not sure what this code is doing. Could you explain it, and add a comment?", "url": "https://github.com/Alluxio/alluxio/pull/11962#discussion_r468725480", "createdAt": "2020-08-11T16:53:39Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/HMSShim.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.RetryingMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.api.MetaException;\n+import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore;\n+import org.apache.thrift.TApplicationException;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.TServiceClient;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+/**\n+ * Implements a shim layer for hive metastore client.\n+ **/\n+public class HMSShim implements HiveCompatibility {\n+  private final TServiceClient mClient;\n+\n+  /**\n+   * Constructor for HMSShim.\n+   *\n+   * @param client another client as delegate\n+   */\n+  public HMSShim(IMetaStoreClient client) {\n+    while (Proxy.isProxyClass(client.getClass())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bff1b5d9361e059ce974b3ab9250ef992da8ca0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyNjI4OQ==", "bodyText": "Can you improve this message?", "url": "https://github.com/Alluxio/alluxio/pull/11962#discussion_r468726289", "createdAt": "2020-08-11T16:54:57Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/HMSShim.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.RetryingMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.api.MetaException;\n+import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore;\n+import org.apache.thrift.TApplicationException;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.TServiceClient;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+/**\n+ * Implements a shim layer for hive metastore client.\n+ **/\n+public class HMSShim implements HiveCompatibility {\n+  private final TServiceClient mClient;\n+\n+  /**\n+   * Constructor for HMSShim.\n+   *\n+   * @param client another client as delegate\n+   */\n+  public HMSShim(IMetaStoreClient client) {\n+    while (Proxy.isProxyClass(client.getClass())) {\n+      InvocationHandler handler = Proxy.getInvocationHandler(client);\n+      if (handler.getClass().isAssignableFrom(RetryingMetaStoreClient.class)) {\n+        client = getField(handler, \"base\");\n+        continue;\n+      }\n+      // Other handlers can be added here\n+      throw new RuntimeException(\"Unknown InvocationHandler \" + handler.getClass());\n+    }\n+    mClient = getField(client, \"client\");\n+  }\n+\n+  private static <T> T getField(Object object, String fieldName) {\n+    try {\n+      Field field = object.getClass().getDeclaredField(fieldName);\n+      T result = null;\n+      if (field.isAccessible()) {\n+        result = (T) field.get(object);\n+      } else {\n+        field.setAccessible(true);\n+        result = (T) field.get(object);\n+        field.setAccessible(false);\n+      }\n+      return result;\n+    } catch (SecurityException | NoSuchFieldException\n+        | IllegalArgumentException | IllegalAccessException e) {\n+      throw new RuntimeException(\"Unable to hack client\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bff1b5d9361e059ce974b3ab9250ef992da8ca0"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyNzU4Ng==", "bodyText": "Can you make this message more specific? I'm not sure what the user should do with that message.", "url": "https://github.com/Alluxio/alluxio/pull/11962#discussion_r468727586", "createdAt": "2020-08-11T16:57:06Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/HMSShim.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.RetryingMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.api.MetaException;\n+import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore;\n+import org.apache.thrift.TApplicationException;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.TServiceClient;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+/**\n+ * Implements a shim layer for hive metastore client.\n+ **/\n+public class HMSShim implements HiveCompatibility {\n+  private final TServiceClient mClient;\n+\n+  /**\n+   * Constructor for HMSShim.\n+   *\n+   * @param client another client as delegate\n+   */\n+  public HMSShim(IMetaStoreClient client) {\n+    while (Proxy.isProxyClass(client.getClass())) {\n+      InvocationHandler handler = Proxy.getInvocationHandler(client);\n+      if (handler.getClass().isAssignableFrom(RetryingMetaStoreClient.class)) {\n+        client = getField(handler, \"base\");\n+        continue;\n+      }\n+      // Other handlers can be added here\n+      throw new RuntimeException(\"Unknown InvocationHandler \" + handler.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bff1b5d9361e059ce974b3ab9250ef992da8ca0"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyOTc2OQ==", "bodyText": "The second parameter should be @Nullable", "url": "https://github.com/Alluxio/alluxio/pull/11962#discussion_r468729769", "createdAt": "2020-08-11T17:00:40Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/CompatibleMetastoreClient.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.thrift.TApplicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+class CompatibleMetastoreClient implements InvocationHandler {\n+  private static final Logger LOG = LoggerFactory.getLogger(CompatibleMetastoreClient.class);\n+\n+  private final IMetaStoreClient mDelegate;\n+  private final HMSShim mCompat;\n+\n+  CompatibleMetastoreClient(IMetaStoreClient delegate, HMSShim compatibility) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bff1b5d9361e059ce974b3ab9250ef992da8ca0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczMTAzNw==", "bodyText": "These info logs could be spammy, since it would log for each invocation of those calls. Should we just cache this info and proactively use the compat method since that decision won't change over time. Then, we can log it when cache the method decision.", "url": "https://github.com/Alluxio/alluxio/pull/11962#discussion_r468731037", "createdAt": "2020-08-11T17:02:50Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/CompatibleMetastoreClient.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.thrift.TApplicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+class CompatibleMetastoreClient implements InvocationHandler {\n+  private static final Logger LOG = LoggerFactory.getLogger(CompatibleMetastoreClient.class);\n+\n+  private final IMetaStoreClient mDelegate;\n+  private final HMSShim mCompat;\n+\n+  CompatibleMetastoreClient(IMetaStoreClient delegate, HMSShim compatibility) {\n+    mDelegate = delegate;\n+    mCompat = compatibility;\n+  }\n+\n+  @Override\n+  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+    try {\n+      return method.invoke(mDelegate, args);\n+    } catch (InvocationTargetException delegateException) {\n+      try {\n+        LOG.info(\"Couldn't invoke method {}\", method.toGenericString());\n+        if (mCompat != null\n+            && delegateException.getCause().getClass()\n+            .isAssignableFrom(TApplicationException.class)) {\n+          LOG.info(\"Attempting to invoke with {}\", mCompat.getClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bff1b5d9361e059ce974b3ab9250ef992da8ca0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczMTYxNQ==", "bodyText": "Everything will go through Proxy and reflection now? That will have an overhead for any HMS interaction?", "url": "https://github.com/Alluxio/alluxio/pull/11962#discussion_r468731615", "createdAt": "2020-08-11T17:03:49Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/HMSClientFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Proxy;\n+\n+class HMSClientFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HMSClientFactory.class);\n+\n+  static IMetaStoreClient newInstance(IMetaStoreClient delegate) {\n+    HMSShim compatibility = null;\n+    try {\n+      compatibility = new HMSShim(delegate);\n+    } catch (Throwable t) {\n+      LOG.warn(\"Unable to initialize hive metastore compatibility client\", t);\n+    }\n+    return newInstance(delegate, compatibility);\n+  }\n+\n+  static IMetaStoreClient newInstance(IMetaStoreClient delegate, HMSShim compatibility) {\n+    ClassLoader classLoader = IMetaStoreClient.class.getClassLoader();\n+    Class<?>[] interfaces = new Class<?>[] { IMetaStoreClient.class };\n+    CompatibleMetastoreClient handler = new CompatibleMetastoreClient(delegate,\n+        compatibility);\n+    return (IMetaStoreClient) Proxy.newProxyInstance(classLoader, interfaces, handler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bff1b5d9361e059ce974b3ab9250ef992da8ca0"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55221b7dbc01c5cbf88c9ad3159ade1fcab6559f", "author": {"user": {"login": "yuzhu", "name": "David Zhu"}}, "url": "https://github.com/Alluxio/alluxio/commit/55221b7dbc01c5cbf88c9ad3159ade1fcab6559f", "committedDate": "2020-08-11T22:36:06Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c5bdd47cd259ad1388836d44d08b1d1f94de58f", "author": {"user": {"login": "yuzhu", "name": "David Zhu"}}, "url": "https://github.com/Alluxio/alluxio/commit/0c5bdd47cd259ad1388836d44d08b1d1f94de58f", "committedDate": "2020-08-11T22:37:16Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTE0NTMz", "url": "https://github.com/Alluxio/alluxio/pull/11962#pullrequestreview-465514533", "createdAt": "2020-08-12T00:27:29Z", "commit": {"oid": "0c5bdd47cd259ad1388836d44d08b1d1f94de58f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDoyNzoyOVrOG_NqFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDozMTo0OVrOG_NuqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzNzIzOA==", "bodyText": "Is this safe? We are grabbing a field by name, of the hdfs client?", "url": "https://github.com/Alluxio/alluxio/pull/11962#discussion_r468937238", "createdAt": "2020-08-12T00:27:29Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/HMSShim.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.RetryingMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.api.MetaException;\n+import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore;\n+import org.apache.thrift.TApplicationException;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.TServiceClient;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+/**\n+ * Implements a shim layer for hive metastore client.\n+ **/\n+public class HMSShim implements HiveCompatibility {\n+  private final TServiceClient mClient;\n+\n+  /**\n+   * Constructor for HMSShim.\n+   *\n+   * @param client another client as delegate\n+   */\n+  public HMSShim(IMetaStoreClient client) {\n+    // Because RetryingMetaStoreClient is itself a proxy, we need to get to the base class\n+    while (Proxy.isProxyClass(client.getClass())) {\n+      InvocationHandler handler = Proxy.getInvocationHandler(client);\n+      if (handler.getClass().isAssignableFrom(RetryingMetaStoreClient.class)) {\n+        client = getField(handler, \"base\");\n+        continue;\n+      }\n+      // Other handlers can be added here\n+      throw new RuntimeException(\"Unknown proxy handler for IMetaStoreClient\");\n+    }\n+    mClient = getField(client, \"client\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5bdd47cd259ad1388836d44d08b1d1f94de58f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzNzQ3Mw==", "bodyText": "add the fieldName to the message", "url": "https://github.com/Alluxio/alluxio/pull/11962#discussion_r468937473", "createdAt": "2020-08-12T00:28:28Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/HMSShim.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.RetryingMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.api.MetaException;\n+import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore;\n+import org.apache.thrift.TApplicationException;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.TServiceClient;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+/**\n+ * Implements a shim layer for hive metastore client.\n+ **/\n+public class HMSShim implements HiveCompatibility {\n+  private final TServiceClient mClient;\n+\n+  /**\n+   * Constructor for HMSShim.\n+   *\n+   * @param client another client as delegate\n+   */\n+  public HMSShim(IMetaStoreClient client) {\n+    // Because RetryingMetaStoreClient is itself a proxy, we need to get to the base class\n+    while (Proxy.isProxyClass(client.getClass())) {\n+      InvocationHandler handler = Proxy.getInvocationHandler(client);\n+      if (handler.getClass().isAssignableFrom(RetryingMetaStoreClient.class)) {\n+        client = getField(handler, \"base\");\n+        continue;\n+      }\n+      // Other handlers can be added here\n+      throw new RuntimeException(\"Unknown proxy handler for IMetaStoreClient\");\n+    }\n+    mClient = getField(client, \"client\");\n+  }\n+\n+  private static <T> T getField(Object object, String fieldName) {\n+    try {\n+      Field field = object.getClass().getDeclaredField(fieldName);\n+      T result = null;\n+      if (field.isAccessible()) {\n+        result = (T) field.get(object);\n+      } else {\n+        field.setAccessible(true);\n+        result = (T) field.get(object);\n+        field.setAccessible(false);\n+      }\n+      return result;\n+    } catch (SecurityException | NoSuchFieldException\n+        | IllegalArgumentException | IllegalAccessException e) {\n+      throw new RuntimeException(\"Unable to access the client through reflection\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5bdd47cd259ad1388836d44d08b1d1f94de58f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzNzg1NQ==", "bodyText": "Why do we have to set and then unset each time?", "url": "https://github.com/Alluxio/alluxio/pull/11962#discussion_r468937855", "createdAt": "2020-08-12T00:29:56Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/HMSShim.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.RetryingMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.api.MetaException;\n+import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore;\n+import org.apache.thrift.TApplicationException;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.TServiceClient;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+/**\n+ * Implements a shim layer for hive metastore client.\n+ **/\n+public class HMSShim implements HiveCompatibility {\n+  private final TServiceClient mClient;\n+\n+  /**\n+   * Constructor for HMSShim.\n+   *\n+   * @param client another client as delegate\n+   */\n+  public HMSShim(IMetaStoreClient client) {\n+    // Because RetryingMetaStoreClient is itself a proxy, we need to get to the base class\n+    while (Proxy.isProxyClass(client.getClass())) {\n+      InvocationHandler handler = Proxy.getInvocationHandler(client);\n+      if (handler.getClass().isAssignableFrom(RetryingMetaStoreClient.class)) {\n+        client = getField(handler, \"base\");\n+        continue;\n+      }\n+      // Other handlers can be added here\n+      throw new RuntimeException(\"Unknown proxy handler for IMetaStoreClient\");\n+    }\n+    mClient = getField(client, \"client\");\n+  }\n+\n+  private static <T> T getField(Object object, String fieldName) {\n+    try {\n+      Field field = object.getClass().getDeclaredField(fieldName);\n+      T result = null;\n+      if (field.isAccessible()) {\n+        result = (T) field.get(object);\n+      } else {\n+        field.setAccessible(true);\n+        result = (T) field.get(object);\n+        field.setAccessible(false);\n+      }\n+      return result;\n+    } catch (SecurityException | NoSuchFieldException\n+        | IllegalArgumentException | IllegalAccessException e) {\n+      throw new RuntimeException(\"Unable to access the client through reflection\", e);\n+    }\n+  }\n+\n+  private static Table deepCopy(Table table) {\n+    return table.deepCopy();\n+  }\n+\n+  private void sendBase(String methodName, TBase<?, ?> args) throws TException {\n+    try {\n+      Method sendBase = TServiceClient.class.getDeclaredMethod(\n+          \"sendBase\", String.class, TBase.class);\n+      sendBase.setAccessible(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5bdd47cd259ad1388836d44d08b1d1f94de58f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzNzkzNg==", "bodyText": "Should this be saved/cached?", "url": "https://github.com/Alluxio/alluxio/pull/11962#discussion_r468937936", "createdAt": "2020-08-12T00:30:11Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/HMSShim.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.RetryingMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.api.MetaException;\n+import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore;\n+import org.apache.thrift.TApplicationException;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.TServiceClient;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+/**\n+ * Implements a shim layer for hive metastore client.\n+ **/\n+public class HMSShim implements HiveCompatibility {\n+  private final TServiceClient mClient;\n+\n+  /**\n+   * Constructor for HMSShim.\n+   *\n+   * @param client another client as delegate\n+   */\n+  public HMSShim(IMetaStoreClient client) {\n+    // Because RetryingMetaStoreClient is itself a proxy, we need to get to the base class\n+    while (Proxy.isProxyClass(client.getClass())) {\n+      InvocationHandler handler = Proxy.getInvocationHandler(client);\n+      if (handler.getClass().isAssignableFrom(RetryingMetaStoreClient.class)) {\n+        client = getField(handler, \"base\");\n+        continue;\n+      }\n+      // Other handlers can be added here\n+      throw new RuntimeException(\"Unknown proxy handler for IMetaStoreClient\");\n+    }\n+    mClient = getField(client, \"client\");\n+  }\n+\n+  private static <T> T getField(Object object, String fieldName) {\n+    try {\n+      Field field = object.getClass().getDeclaredField(fieldName);\n+      T result = null;\n+      if (field.isAccessible()) {\n+        result = (T) field.get(object);\n+      } else {\n+        field.setAccessible(true);\n+        result = (T) field.get(object);\n+        field.setAccessible(false);\n+      }\n+      return result;\n+    } catch (SecurityException | NoSuchFieldException\n+        | IllegalArgumentException | IllegalAccessException e) {\n+      throw new RuntimeException(\"Unable to access the client through reflection\", e);\n+    }\n+  }\n+\n+  private static Table deepCopy(Table table) {\n+    return table.deepCopy();\n+  }\n+\n+  private void sendBase(String methodName, TBase<?, ?> args) throws TException {\n+    try {\n+      Method sendBase = TServiceClient.class.getDeclaredMethod(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5bdd47cd259ad1388836d44d08b1d1f94de58f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzODQwOQ==", "bodyText": "Does the name of the method already imply the compatibility shim? If not, can we be explicit in the message that we are using the compatibility shim?", "url": "https://github.com/Alluxio/alluxio/pull/11962#discussion_r468938409", "createdAt": "2020-08-12T00:31:49Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/CompatibleMetastoreClient.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.thrift.TApplicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import javax.annotation.Nullable;\n+\n+class CompatibleMetastoreClient implements InvocationHandler {\n+  private static final Logger LOG = LoggerFactory.getLogger(CompatibleMetastoreClient.class);\n+\n+  private final IMetaStoreClient mDelegate;\n+  private final HMSShim mCompat;\n+\n+  CompatibleMetastoreClient(IMetaStoreClient delegate, @Nullable HMSShim compatibility) {\n+    mDelegate = delegate;\n+    mCompat = compatibility;\n+  }\n+\n+  @Override\n+  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+    try {\n+      return method.invoke(mDelegate, args);\n+    } catch (InvocationTargetException delegateException) {\n+      try {\n+        if (mCompat != null\n+            && delegateException.getCause().getClass()\n+            .isAssignableFrom(TApplicationException.class)) {\n+          LOG.debug(\"Attempting to call hive metastore with {}\", mCompat.getClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5bdd47cd259ad1388836d44d08b1d1f94de58f"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08811b803d3074ebb38f32241319bc342bbfb6f5", "author": {"user": {"login": "yuzhu", "name": "David Zhu"}}, "url": "https://github.com/Alluxio/alluxio/commit/08811b803d3074ebb38f32241319bc342bbfb6f5", "committedDate": "2020-08-12T14:28:42Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDkxOTc2", "url": "https://github.com/Alluxio/alluxio/pull/11962#pullrequestreview-466091976", "createdAt": "2020-08-12T16:43:04Z", "commit": {"oid": "08811b803d3074ebb38f32241319bc342bbfb6f5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjo0MzowNFrOG_priQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjo0MzowNFrOG_priQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM5NjM2MQ==", "bodyText": "Thanks for adding the compatibility part, but I think the method name is also useful. Could you add back the method name?", "url": "https://github.com/Alluxio/alluxio/pull/11962#discussion_r469396361", "createdAt": "2020-08-12T16:43:04Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/CompatibleMetastoreClient.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.thrift.TApplicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import javax.annotation.Nullable;\n+\n+class CompatibleMetastoreClient implements InvocationHandler {\n+  private static final Logger LOG = LoggerFactory.getLogger(CompatibleMetastoreClient.class);\n+\n+  private final IMetaStoreClient mDelegate;\n+  private final HMSShim mCompat;\n+\n+  CompatibleMetastoreClient(IMetaStoreClient delegate, @Nullable HMSShim compatibility) {\n+    mDelegate = delegate;\n+    mCompat = compatibility;\n+  }\n+\n+  @Override\n+  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+    try {\n+      return method.invoke(mDelegate, args);\n+    } catch (InvocationTargetException delegateException) {\n+      try {\n+        if (mCompat != null\n+            && delegateException.getCause().getClass()\n+            .isAssignableFrom(TApplicationException.class)) {\n+          LOG.debug(\"Attempting to call hive metastore with compatibility client\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08811b803d3074ebb38f32241319bc342bbfb6f5"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc61d16e4651208de8a658d596f5e8ca98ed601e", "author": {"user": {"login": "yuzhu", "name": "David Zhu"}}, "url": "https://github.com/Alluxio/alluxio/commit/cc61d16e4651208de8a658d596f5e8ca98ed601e", "committedDate": "2020-08-12T18:13:36Z", "message": "address comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MzQ1NzQx", "url": "https://github.com/Alluxio/alluxio/pull/11962#pullrequestreview-466345741", "createdAt": "2020-08-12T23:36:14Z", "commit": {"oid": "cc61d16e4651208de8a658d596f5e8ca98ed601e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4120, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}