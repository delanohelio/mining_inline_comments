{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMjI5NTc1", "number": 12421, "title": "Add load metadata command", "bodyText": "First step for #12088 and #12126", "createdAt": "2020-10-29T12:10:34Z", "url": "https://github.com/Alluxio/alluxio/pull/12421", "merged": true, "mergeCommit": {"oid": "8ae07709ee67327b7990c89b98480bfd73780760"}, "closed": true, "closedAt": "2020-11-11T21:27:28Z", "author": {"login": "JySongWithZhangCe"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXQxQ3gH2gAyNTEyMjI5NTc1OjRlM2ZjYmFiODA1YjNjZTgzMGYwZThjMGVhODgzZjE4NTE5M2UwNmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbkAFgAFqTUyODUxMTUwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4e3fcbab805b3ce830f0e8c0ea883f185193e06a", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/4e3fcbab805b3ce830f0e8c0ea883f185193e06a", "committedDate": "2020-10-29T11:49:47Z", "message": "Add loadMetadata command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd9855b530ae64caae104077fa71dcd3fe7669f1", "author": {"user": {"login": "JySongWithZhangCe", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/bd9855b530ae64caae104077fa71dcd3fe7669f1", "committedDate": "2020-10-29T11:50:59Z", "message": "add listStatusCli rpc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287", "author": {"user": {"login": "JySongWithZhangCe", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/e10710af0c6cfa88a5f27c0d222813b441662287", "committedDate": "2020-10-29T12:08:16Z", "message": "fix iterateStatus code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMzc4MjM0", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-520378234", "createdAt": "2020-10-30T05:02:27Z", "commit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNTowMjoyN1rOHrA09w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNToxNzo1MVrOHrBWGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg2NDM3NQ==", "bodyText": "Unsupported?", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r514864375", "createdAt": "2020-10-30T05:02:27Z", "author": {"login": "jiacheliu3"}, "path": "core/client/fs/src/test/java/alluxio/client/file/cache/LocalCacheFileInStreamTest.java", "diffHunk": "@@ -497,6 +498,12 @@ public void iterateStatus(AlluxioURI path, ListStatusPOptions options,\n       throw new UnsupportedOperationException();\n     }\n \n+    @Override\n+    public void loadMetadata(AlluxioURI path, LoadMetadataPOptions options)\n+        throws FileDoesNotExistException, IOException, AlluxioException {\n+      throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg3MTczNQ==", "bodyText": "Fix the whitespace here", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r514871735", "createdAt": "2020-10-30T05:15:57Z", "author": {"login": "jiacheliu3"}, "path": "core/client/fs/src/main/java/alluxio/client/file/DelegatingFileSystem.java", "diffHunk": "@@ -120,11 +121,17 @@ public URIStatus getStatus(AlluxioURI path, GetStatusPOptions options)\n \n   @Override\n   public void iterateStatus(AlluxioURI path, ListStatusPOptions options,\n-                            Consumer<? super URIStatus> action)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg3MjQ1NQ==", "bodyText": "Use LoadDescendantType to replace recursive?", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r514872455", "createdAt": "2020-10-30T05:17:12Z", "author": {"login": "jiacheliu3"}, "path": "core/transport/src/main/proto/grpc/file_system_master.proto", "diffHunk": "@@ -193,10 +193,16 @@ message ListStatusPRequest {\n \n message LoadMetadataPOptions {\n   /** whether to load metadata recursively */\n-  optional bool recursive = 1;\n-  optional bool createAncestors = 2;\n-  optional fscommon.LoadDescendantPType loadDescendantType = 3;\n-  optional FileSystemMasterCommonPOptions commonOptions = 4;\n+  //  optional bool recursive = 1;\n+  optional bool createAncestors = 1;\n+  optional fscommon.LoadDescendantPType loadDescendantType = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg3MjYyNg==", "bodyText": "Can you explain more pls?", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r514872626", "createdAt": "2020-10-30T05:17:28Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/LoadMetadataCommand.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.annotation.PublicApi;\n+import alluxio.cli.CommandUtils;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.status.InvalidArgumentException;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Load Metadata for the path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg3Mjg1OA==", "bodyText": "Add the tests so we know what you want the behavior to be?", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r514872858", "createdAt": "2020-10-30T05:17:51Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/test/java/alluxio/cli/fs/command/LoadMetadataCommandTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import org.junit.Test;\n+\n+public class LoadMetadataCommandTest {\n+\n+  /**\n+   * Metadata not in Alluxio, LoadMetadata should\n+   * load the metadata into Alluxio inode.\n+   */\n+  @Test\n+  public void noneInAlluxio() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMzkwMzI5", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-520390329", "createdAt": "2020-10-30T05:47:50Z", "commit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNTo0Nzo1MFrOHrCBSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNTo0Nzo1MFrOHrCBSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4MzkxNA==", "bodyText": "nit: a file -> a path", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r514883914", "createdAt": "2020-10-30T05:47:50Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemMasterClient.java", "diffHunk": "@@ -169,6 +170,15 @@ void iterateStatus(AlluxioURI path, ListStatusPOptions options,\n   List<URIStatus> listStatus(AlluxioURI path, ListStatusPOptions options)\n       throws AlluxioStatusException;\n \n+  /**\n+   * Loads the metadata of a file from the under file system.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMzkxNzcz", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-520391773", "createdAt": "2020-10-30T05:52:40Z", "commit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNTo1Mjo0MFrOHrCGNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjoxMDowNlrOHrCX3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4NTE3NQ==", "bodyText": "nit: remove this unnecessary empty line.", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r514885175", "createdAt": "2020-10-30T05:52:40Z", "author": {"login": "apc999"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1066,6 +1066,23 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n     return fileInfos;\n   }\n \n+  @Override\n+  public void loadMetaData(AlluxioURI path, LoadMetadataContext context)\n+      throws AccessControlException, FileDoesNotExistException, InvalidPathException, IOException {\n+    try (RpcContext rpcContext = createRpcContext(context)) {\n+      DescendantType syncDescendantType =\n+              GrpcUtils.fromProto(context.getOptions().getLoadDescendantType());\n+      FileSystemMasterCommonPOptions commonOptions =\n+              context.getOptions().getCommonOptions();\n+      InodeSyncStream sync = new InodeSyncStream(new LockingScheme(path, LockPattern.READ, true),\n+              this, rpcContext, syncDescendantType, commonOptions, false, true, false);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4NTUyNg==", "bodyText": "wrong indent, please follow https://google.github.io/styleguide/javaguide.html#s4.5-line-wrapping", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r514885526", "createdAt": "2020-10-30T05:54:11Z", "author": {"login": "apc999"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1066,6 +1066,23 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n     return fileInfos;\n   }\n \n+  @Override\n+  public void loadMetaData(AlluxioURI path, LoadMetadataContext context)\n+      throws AccessControlException, FileDoesNotExistException, InvalidPathException, IOException {\n+    try (RpcContext rpcContext = createRpcContext(context)) {\n+      DescendantType syncDescendantType =\n+              GrpcUtils.fromProto(context.getOptions().getLoadDescendantType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4NzU2Nw==", "bodyText": "can we invoke loadMetadataIfNotExist here? It looks to me some duplicated code with that method", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r514887567", "createdAt": "2020-10-30T06:01:47Z", "author": {"login": "apc999"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1066,6 +1066,23 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n     return fileInfos;\n   }\n \n+  @Override\n+  public void loadMetaData(AlluxioURI path, LoadMetadataContext context)\n+      throws AccessControlException, FileDoesNotExistException, InvalidPathException, IOException {\n+    try (RpcContext rpcContext = createRpcContext(context)) {\n+      DescendantType syncDescendantType =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4Nzk0NQ==", "bodyText": "instead of replacing old field which will break backward compatibility,\nlet's add new fields after 4, starting from 5", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r514887945", "createdAt": "2020-10-30T06:03:18Z", "author": {"login": "apc999"}, "path": "core/transport/src/main/proto/grpc/file_system_master.proto", "diffHunk": "@@ -193,10 +193,16 @@ message ListStatusPRequest {\n \n message LoadMetadataPOptions {\n   /** whether to load metadata recursively */\n-  optional bool recursive = 1;\n-  optional bool createAncestors = 2;\n-  optional fscommon.LoadDescendantPType loadDescendantType = 3;\n-  optional FileSystemMasterCommonPOptions commonOptions = 4;\n+  //  optional bool recursive = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4ODYyOA==", "bodyText": "Too verbose. how about\nLoadMetadataPOptions.newBuilder().\n    .setLoadDescendantType(recursive  ? LoadDescendantPType.ALL : LoadDescendantPType.ONE)\n    .build()", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r514888628", "createdAt": "2020-10-30T06:05:57Z", "author": {"login": "apc999"}, "path": "shell/src/main/java/alluxio/cli/fs/command/LoadMetadataCommand.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.annotation.PublicApi;\n+import alluxio.cli.CommandUtils;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.status.InvalidArgumentException;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Load Metadata for the path.\n+ */\n+@ThreadSafe\n+@PublicApi\n+public class LoadMetadataCommand extends AbstractFileSystemCommand {\n+  private static final Option RECURSIVE_OPTION =\n+      Option.builder(\"R\")\n+          .required(false)\n+          .hasArg(false)\n+          .desc(\"load metadata subdirectories recursively\")\n+          .build();\n+\n+  /**\n+   * Constructs a new instance to load metadata for the given Alluxio path from UFS.\n+   *\n+   * @param fsContext the filesystem of Alluxio\n+   */\n+  public LoadMetadataCommand(FileSystemContext fsContext) {\n+    super(fsContext);\n+  }\n+\n+  @Override\n+  public String getCommandName() {\n+    return \"loadMetadata\";\n+  }\n+\n+  @Override\n+  public Options getOptions() {\n+    return new Options().addOption(RECURSIVE_OPTION);\n+  }\n+\n+  @Override\n+  protected void runPlainPath(AlluxioURI plainPath, CommandLine cl)\n+      throws AlluxioException, IOException {\n+    loadMetadata(plainPath, cl.hasOption(RECURSIVE_OPTION.getOpt()));\n+  }\n+\n+  @Override\n+  public int run(CommandLine cl) throws AlluxioException, IOException {\n+    String[] args = cl.getArgs();\n+    AlluxioURI path = new AlluxioURI(args[0]);\n+    runWildCardCmd(path, cl);\n+\n+    return 0;\n+  }\n+\n+  private void loadMetadata(AlluxioURI path, boolean recursive) throws IOException {\n+    LoadMetadataPOptions options;\n+    try {\n+      if (recursive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4ODk5Nw==", "bodyText": "Let's make an integration test instead?\nsee alluxio.client.cli.fs.command.LoadCommandIntegrationTest", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r514888997", "createdAt": "2020-10-30T06:07:24Z", "author": {"login": "apc999"}, "path": "shell/src/test/java/alluxio/cli/fs/command/LoadMetadataCommandTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import org.junit.Test;\n+\n+public class LoadMetadataCommandTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4OTY5NA==", "bodyText": "for this PR, let's just focus on loadMetadata, and introduce only\nrpc LoadMetadata(LoadMetadataPRequest) returns (LoadMetadataPResponse);\n\nLet's not aim for multiple purposes in a single PR", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r514889694", "createdAt": "2020-10-30T06:10:06Z", "author": {"login": "apc999"}, "path": "core/transport/src/main/proto/grpc/file_system_master.proto", "diffHunk": "@@ -524,6 +530,7 @@ service FileSystemMasterClientService {\n    */\n   rpc ListStatus(ListStatusPRequest) returns (stream ListStatusPResponse);\n \n+  rpc ListStatusCli(ListStatusCliPRequest) returns (ListStatusCliPResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10710af0c6cfa88a5f27c0d222813b441662287"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38c0c94fc8378fdbd125ebb1da6b0c3a202d9a18", "author": {"user": {"login": "JySongWithZhangCe", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/38c0c94fc8378fdbd125ebb1da6b0c3a202d9a18", "committedDate": "2020-11-01T14:17:04Z", "message": "add integration test, apply suggestions, and change lock pattern"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c972a73bdacd839ff8f1c251e7d6e0697a1a4982", "author": {"user": {"login": "JySongWithZhangCe", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/c972a73bdacd839ff8f1c251e7d6e0697a1a4982", "committedDate": "2020-11-02T11:47:38Z", "message": "fix DefaultFileSystemMaster code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "645a41c2a4228c0fe89bbbee561e205224acfc5e", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/645a41c2a4228c0fe89bbbee561e205224acfc5e", "committedDate": "2020-11-02T12:24:54Z", "message": "Avoid duplicates with metadata caching client on iterateStatus\n\nFix https://github.com/Alluxio/alluxio/issues/12373\n\npr-link: Alluxio/alluxio#12423\nchange-id: cid-c86d2fbb28cd904e612cb64166983a21fdd2c3a6"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f304132f3e70637f6e1a8941a5bfb442ddcee0f", "author": {"user": {"login": "JySongWithZhangCe", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/0f304132f3e70637f6e1a8941a5bfb442ddcee0f", "committedDate": "2020-11-02T12:26:54Z", "message": "add MockFileSystemMasterClient and add loadMetaData for it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2a8776fa14079c9d04749e7511978e467a5d327", "author": {"user": {"login": "JySongWithZhangCe", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/f2a8776fa14079c9d04749e7511978e467a5d327", "committedDate": "2020-11-02T12:45:23Z", "message": "fix MockFileSystemMasterClient conflict with master branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a", "author": {"user": {"login": "JySongWithZhangCe", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/7dbb9302bfb384967c624727639b59d2062f297a", "committedDate": "2020-11-02T12:47:33Z", "message": "add loadMetadata method for MockFileSystemMasterClient class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMTYyMTcx", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-522162171", "createdAt": "2020-11-03T02:51:24Z", "commit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMjo1MToyNFrOHses3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzowNToyMVrOHse4-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwMjM5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Loads the metadata of a path from the under file system.\n          \n          \n            \n               * Loads metadata about a path in the UFS to Alluxio. No data will be transferred.", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516402397", "createdAt": "2020-11-03T02:51:24Z", "author": {"login": "jiacheliu3"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemMasterClient.java", "diffHunk": "@@ -169,6 +170,15 @@ void iterateStatus(AlluxioURI path, ListStatusPOptions options,\n   List<URIStatus> listStatus(AlluxioURI path, ListStatusPOptions options)\n       throws AlluxioStatusException;\n \n+  /**\n+   * Loads the metadata of a path from the under file system.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwMjc0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Load metadata from ufs for given path.\n          \n          \n            \n               * Loads metadata about a path in the UFS to Alluxio. No data will be transferred.", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516402741", "createdAt": "2020-11-03T02:52:59Z", "author": {"login": "jiacheliu3"}, "path": "core/server/master/src/main/java/alluxio/master/file/FileSystemMaster.java", "diffHunk": "@@ -160,6 +161,18 @@ void listStatus(AlluxioURI path, ListStatusContext context, ResultStream<FileInf\n       throws AccessControlException, FileDoesNotExistException, InvalidPathException,\n       UnavailableException, IOException;\n \n+  /**\n+   * Load metadata from ufs for given path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwMjk1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Load Metadata for the path.\n          \n          \n            \n             * Loads metadata about a path in the UFS to Alluxio. No data will be transferred.", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516402955", "createdAt": "2020-11-03T02:54:01Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/LoadMetadataCommand.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.annotation.PublicApi;\n+import alluxio.cli.CommandUtils;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.status.InvalidArgumentException;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Load Metadata for the path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwMzA2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This command as a client-side optimization without\n          \n          \n            \n             * This command is a client-side optimization without", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516403065", "createdAt": "2020-11-03T02:54:21Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/LoadMetadataCommand.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.annotation.PublicApi;\n+import alluxio.cli.CommandUtils;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.status.InvalidArgumentException;\n+import alluxio.grpc.LoadDescendantPType;\n+import alluxio.grpc.LoadMetadataPOptions;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Load Metadata for the path.\n+ * This command as a client-side optimization without", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwNDE2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Delete layer3 directory metadata recursive.\n          \n          \n            \n                // Delete layer3 directory metadata recursively", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516404162", "createdAt": "2020-11-03T02:59:28Z", "author": {"login": "jiacheliu3"}, "path": "tests/src/test/java/alluxio/client/cli/fs/command/LoadMetadataCommandIntegrationTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.cli.fs.command;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileSystemTestUtils;\n+import alluxio.client.file.URIStatus;\n+import alluxio.client.cli.fs.AbstractFileSystemShellTest;\n+import alluxio.exception.AlluxioException;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.GetStatusPOptions;\n+import alluxio.grpc.LoadMetadataPType;\n+import alluxio.grpc.WritePType;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Tests for loadMetadata command.\n+ */\n+public final class LoadMetadataCommandIntegrationTest extends AbstractFileSystemShellTest {\n+  @Test\n+  public void loadMetadataDir() throws IOException, AlluxioException {\n+    String dirPath = \"/testRoot/layer1/layer2/layer3/\";\n+    String filePathA = dirPath + \"testFileA\";\n+    String filePathB = dirPath + \"testFileB\";\n+    FileSystemTestUtils\n+        .createByteFile(sFileSystem, filePathA, WritePType.CACHE_THROUGH, 10);\n+    FileSystemTestUtils\n+        .createByteFile(sFileSystem, filePathB, WritePType.THROUGH, 30);\n+    AlluxioURI uriDir = new AlluxioURI(dirPath);\n+    AlluxioURI uriA = new AlluxioURI(filePathA);\n+    AlluxioURI uriB = new AlluxioURI(filePathB);\n+    URIStatus statusBeforeA = sFileSystem.getStatus(uriA);\n+    URIStatus statusBeforeB = sFileSystem.getStatus(uriB);\n+    // Delete layer3 directory metadata recursive.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwNDMzNQ==", "bodyText": "Why creating two files with different WriteType? If you want to validation all write types, maybe add files for each of them?", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516404335", "createdAt": "2020-11-03T03:00:11Z", "author": {"login": "jiacheliu3"}, "path": "tests/src/test/java/alluxio/client/cli/fs/command/LoadMetadataCommandIntegrationTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.cli.fs.command;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileSystemTestUtils;\n+import alluxio.client.file.URIStatus;\n+import alluxio.client.cli.fs.AbstractFileSystemShellTest;\n+import alluxio.exception.AlluxioException;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.GetStatusPOptions;\n+import alluxio.grpc.LoadMetadataPType;\n+import alluxio.grpc.WritePType;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Tests for loadMetadata command.\n+ */\n+public final class LoadMetadataCommandIntegrationTest extends AbstractFileSystemShellTest {\n+  @Test\n+  public void loadMetadataDir() throws IOException, AlluxioException {\n+    String dirPath = \"/testRoot/layer1/layer2/layer3/\";\n+    String filePathA = dirPath + \"testFileA\";\n+    String filePathB = dirPath + \"testFileB\";\n+    FileSystemTestUtils\n+        .createByteFile(sFileSystem, filePathA, WritePType.CACHE_THROUGH, 10);\n+    FileSystemTestUtils\n+        .createByteFile(sFileSystem, filePathB, WritePType.THROUGH, 30);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwNDg5MQ==", "bodyText": "what is load-only mode?", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516404891", "createdAt": "2020-11-03T03:02:45Z", "author": {"login": "jiacheliu3"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1066,6 +1066,31 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n     return fileInfos;\n   }\n \n+  /**\n+   * {@link DefaultFileSystemMaster} has two private methods associated with sync metadata:\n+   * 1. {@link DefaultFileSystemMaster#loadMetadataIfNotExist} sync metadata in load-only mode,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwNTAwNA==", "bodyText": "what is \"not in force mode\"? what is \"force mode\"? Can you explain more clearly?", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516405004", "createdAt": "2020-11-03T03:03:14Z", "author": {"login": "jiacheliu3"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1066,6 +1066,31 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n     return fileInfos;\n   }\n \n+  /**\n+   * {@link DefaultFileSystemMaster} has two private methods associated with sync metadata:\n+   * 1. {@link DefaultFileSystemMaster#loadMetadataIfNotExist} sync metadata in load-only mode,\n+   * 2. {@link DefaultFileSystemMaster#syncMetadata} sync metadata not in force mode.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwNTQ5OA==", "bodyText": "I don't really understand the comment. When you are using words like \"foreSync param\", \"loadOnly param\", could you explain them first, so the readers can understand what you are referring to?", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516405498", "createdAt": "2020-11-03T03:05:21Z", "author": {"login": "jiacheliu3"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1066,6 +1066,31 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n     return fileInfos;\n   }\n \n+  /**\n+   * {@link DefaultFileSystemMaster} has two private methods associated with sync metadata:\n+   * 1. {@link DefaultFileSystemMaster#loadMetadataIfNotExist} sync metadata in load-only mode,\n+   * 2. {@link DefaultFileSystemMaster#syncMetadata} sync metadata not in force mode.\n+   * Due to loadMetaData need work on both non-load-only mode and force mode, we need custom a\n+   * InodeSyncStream object which foreSync param is true and loadOnly param is false.\n+   * Further more, synchronize metadata may modify the structure of the inode tree, the lock\n+   * pattern of the InodeSyncStream object should be LockPattern.WRITE_EDGE.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMjEyMDE2", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-522212016", "createdAt": "2020-11-03T06:24:14Z", "commit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjoyNDoxNFrOHshbtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjoyNDoxNFrOHshbtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0NzE1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    RPC_LOG, \"loadMetadata\", \"path=%s,options=%s\", path, options\n          \n          \n            \n                    RPC_LOG, \"LoadMetadata\", \"path=%s,options=%s\", path, options", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516447158", "createdAt": "2020-11-03T06:24:14Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/RetryHandlingFileSystemMasterClient.java", "diffHunk": "@@ -260,6 +262,19 @@ public void iterateStatus(final AlluxioURI path, final ListStatusPOptions option\n     }, RPC_LOG, \"ListStatus\", \"path=%s,options=%s\", path, options);\n   }\n \n+  @Override\n+  public void loadMetadata(AlluxioURI path, LoadMetadataPOptions options)\n+      throws AlluxioStatusException {\n+    retryRPC(\n+        () -> mClient.loadMetadata(\n+              LoadMetadataPRequest.newBuilder()\n+                  .setPath(path.getPath())\n+                  .setLoadMetadataPOptions(options)\n+                  .build()),\n+        RPC_LOG, \"loadMetadata\", \"path=%s,options=%s\", path, options", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMjE3NzMw", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-522217730", "createdAt": "2020-11-03T06:42:29Z", "commit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo0MjoyOVrOHshuKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo0MjoyOVrOHshuKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1MTg4MQ==", "bodyText": "@gpang  to sync metadata, do we need to start with LockPattern.WRITE_EDGE? can we start with READ?\nAlso, can you check if the parameters for InodeSyncStream here is correct?", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516451881", "createdAt": "2020-11-03T06:42:29Z", "author": {"login": "apc999"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1066,6 +1066,31 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n     return fileInfos;\n   }\n \n+  /**\n+   * {@link DefaultFileSystemMaster} has two private methods associated with sync metadata:\n+   * 1. {@link DefaultFileSystemMaster#loadMetadataIfNotExist} sync metadata in load-only mode,\n+   * 2. {@link DefaultFileSystemMaster#syncMetadata} sync metadata not in force mode.\n+   * Due to loadMetaData need work on both non-load-only mode and force mode, we need custom a\n+   * InodeSyncStream object which foreSync param is true and loadOnly param is false.\n+   * Further more, synchronize metadata may modify the structure of the inode tree, the lock\n+   * pattern of the InodeSyncStream object should be LockPattern.WRITE_EDGE.\n+   */\n+  @Override\n+  public void loadMetaData(AlluxioURI path, LoadMetadataContext context)\n+      throws AccessControlException, FileDoesNotExistException, InvalidPathException, IOException {\n+    try (RpcContext rpcContext = createRpcContext(context)) {\n+      DescendantType syncDescendantType =\n+          GrpcUtils.fromProto(context.getOptions().getLoadDescendantType());\n+      FileSystemMasterCommonPOptions commonOptions = context.getOptions().getCommonOptions();\n+      InodeSyncStream sync =\n+          new InodeSyncStream(new LockingScheme(path, LockPattern.WRITE_EDGE, true), this,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMjE3OTc2", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-522217976", "createdAt": "2020-11-03T06:43:12Z", "commit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo0MzoxMlrOHshuzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo0MzoxMlrOHshuzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1MjA0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }, \"loadMetadata\", \"request=%s\", responseObserver, request);\n          \n          \n            \n                }, \"LoadMetadata\", \"request=%s\", responseObserver, request);", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516452047", "createdAt": "2020-11-03T06:43:12Z", "author": {"login": "apc999"}, "path": "core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java", "diffHunk": "@@ -237,6 +240,19 @@ public void listStatus(ListStatusPRequest request,\n     }\n   }\n \n+  @Override\n+  public void loadMetadata(LoadMetadataPRequest request,\n+      StreamObserver<LoadMetadataPResponse> responseObserver) {\n+    RpcUtils.call(LOG, () -> {\n+      AlluxioURI pathUri = getAlluxioURI(request.getPath());\n+      if (request.hasLoadMetadataPOptions()) {\n+        mFileSystemMaster.loadMetaData(pathUri,\n+            LoadMetadataContext.create(request.getLoadMetadataPOptions().toBuilder()));\n+      }\n+      return LoadMetadataPResponse.newBuilder().build();\n+    }, \"loadMetadata\", \"request=%s\", responseObserver, request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMjE4Njkw", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-522218690", "createdAt": "2020-11-03T06:45:09Z", "commit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo0NTowOVrOHshxKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo0NTowOVrOHshxKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1MjY0OQ==", "bodyText": "Can you comment this rpc and also leave the space between this definition and the next RPC definition", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516452649", "createdAt": "2020-11-03T06:45:09Z", "author": {"login": "apc999"}, "path": "core/transport/src/main/proto/grpc/file_system_master.proto", "diffHunk": "@@ -524,6 +529,7 @@ service FileSystemMasterClientService {\n    */\n   rpc ListStatus(ListStatusPRequest) returns (stream ListStatusPResponse);\n \n+  rpc LoadMetadata(LoadMetadataPRequest) returns (LoadMetadataPResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMjE5MTQz", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-522219143", "createdAt": "2020-11-03T06:46:28Z", "commit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo0NjoyOFrOHshymg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo0NjoyOFrOHshymg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1MzAxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String filePathA = dirPath + \"testFileA\";\n          \n          \n            \n                String filePathA = PathUtils.concatPath(dirPath, \"testFileA\");", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516453018", "createdAt": "2020-11-03T06:46:28Z", "author": {"login": "apc999"}, "path": "tests/src/test/java/alluxio/client/cli/fs/command/LoadMetadataCommandIntegrationTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.cli.fs.command;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileSystemTestUtils;\n+import alluxio.client.file.URIStatus;\n+import alluxio.client.cli.fs.AbstractFileSystemShellTest;\n+import alluxio.exception.AlluxioException;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.GetStatusPOptions;\n+import alluxio.grpc.LoadMetadataPType;\n+import alluxio.grpc.WritePType;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Tests for loadMetadata command.\n+ */\n+public final class LoadMetadataCommandIntegrationTest extends AbstractFileSystemShellTest {\n+  @Test\n+  public void loadMetadataDir() throws IOException, AlluxioException {\n+    String dirPath = \"/testRoot/layer1/layer2/layer3/\";\n+    String filePathA = dirPath + \"testFileA\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMjIwNTA2", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-522220506", "createdAt": "2020-11-03T06:50:23Z", "commit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo1MDoyM1rOHsh21w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo1MDoyM1rOHsh21w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1NDEwMw==", "bodyText": "Possibly to assertEquals(statusBefore, statusAfterB)?", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516454103", "createdAt": "2020-11-03T06:50:23Z", "author": {"login": "apc999"}, "path": "tests/src/test/java/alluxio/client/cli/fs/command/LoadMetadataCommandIntegrationTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.cli.fs.command;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileSystemTestUtils;\n+import alluxio.client.file.URIStatus;\n+import alluxio.client.cli.fs.AbstractFileSystemShellTest;\n+import alluxio.exception.AlluxioException;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.GetStatusPOptions;\n+import alluxio.grpc.LoadMetadataPType;\n+import alluxio.grpc.WritePType;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Tests for loadMetadata command.\n+ */\n+public final class LoadMetadataCommandIntegrationTest extends AbstractFileSystemShellTest {\n+  @Test\n+  public void loadMetadataDir() throws IOException, AlluxioException {\n+    String dirPath = \"/testRoot/layer1/layer2/layer3/\";\n+    String filePathA = dirPath + \"testFileA\";\n+    String filePathB = dirPath + \"testFileB\";\n+    FileSystemTestUtils\n+        .createByteFile(sFileSystem, filePathA, WritePType.CACHE_THROUGH, 10);\n+    FileSystemTestUtils\n+        .createByteFile(sFileSystem, filePathB, WritePType.THROUGH, 30);\n+    AlluxioURI uriDir = new AlluxioURI(dirPath);\n+    AlluxioURI uriA = new AlluxioURI(filePathA);\n+    AlluxioURI uriB = new AlluxioURI(filePathB);\n+    URIStatus statusBeforeA = sFileSystem.getStatus(uriA);\n+    URIStatus statusBeforeB = sFileSystem.getStatus(uriB);\n+    // Delete layer3 directory metadata recursive.\n+    DeletePOptions deletePOptions =\n+        DeletePOptions.newBuilder().setAlluxioOnly(true).setRecursive(true).build();\n+    sFileSystem.delete(uriDir, deletePOptions);\n+    // Load metadata from ufs.\n+    sFsShell.run(\"loadMetadata\", dirPath);\n+    // Use LoadMetadataPType.NEVER to avoid loading metadata during get file status.\n+    GetStatusPOptions getStatusPOptions =\n+        GetStatusPOptions.newBuilder().setLoadMetadataType(LoadMetadataPType.NEVER).build();\n+    // Check testFileA's metadata.\n+    URIStatus statusAfterA = sFileSystem.getStatus(uriA, getStatusPOptions);\n+    assertEquals(statusBeforeA.getFileInfo().getName(), statusAfterA.getFileInfo().getName());\n+    assertEquals(statusBeforeA.getFileInfo().getLength(), statusAfterA.getFileInfo().getLength());\n+    // Check testFileB's metadata.\n+    URIStatus statusAfterB = sFileSystem.getStatus(uriB, getStatusPOptions);\n+    assertEquals(statusBeforeB.getFileInfo().getName(), statusAfterB.getFileInfo().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMjIxNDg3", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-522221487", "createdAt": "2020-11-03T06:53:04Z", "commit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f92f6c1df07ee83063583ef31b83b2747540dae", "author": {"user": {"login": "JySongWithZhangCe", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/4f92f6c1df07ee83063583ef31b83b2747540dae", "committedDate": "2020-11-03T12:36:16Z", "message": "optimize comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyODcyMjI2", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-522872226", "createdAt": "2020-11-03T21:03:19Z", "commit": {"oid": "4f92f6c1df07ee83063583ef31b83b2747540dae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTowMzoxOVrOHtAWpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTowMzoxOVrOHtAWpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk1Mzc2NA==", "bodyText": "I think it can be READ too. However, shouldn't this behave the same as listStatus until it is time to return results? I feel this command should be just the prefix of the code for listStatus. Alternatively, should there just be an option to listStatus which ignores sending results, or something like \"forceLoadOnly\"? There would be a lot of shared code between load metadata and list status.", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r516953764", "createdAt": "2020-11-03T21:03:19Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1066,6 +1066,31 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n     return fileInfos;\n   }\n \n+  /**\n+   * {@link DefaultFileSystemMaster} has two private methods associated with sync metadata:\n+   * 1. {@link DefaultFileSystemMaster#loadMetadataIfNotExist} sync metadata in load-only mode,\n+   * 2. {@link DefaultFileSystemMaster#syncMetadata} sync metadata not in force mode.\n+   * Due to loadMetaData need work on both non-load-only mode and force mode, we need custom a\n+   * InodeSyncStream object which foreSync param is true and loadOnly param is false.\n+   * Further more, synchronize metadata may modify the structure of the inode tree, the lock\n+   * pattern of the InodeSyncStream object should be LockPattern.WRITE_EDGE.\n+   */\n+  @Override\n+  public void loadMetaData(AlluxioURI path, LoadMetadataContext context)\n+      throws AccessControlException, FileDoesNotExistException, InvalidPathException, IOException {\n+    try (RpcContext rpcContext = createRpcContext(context)) {\n+      DescendantType syncDescendantType =\n+          GrpcUtils.fromProto(context.getOptions().getLoadDescendantType());\n+      FileSystemMasterCommonPOptions commonOptions = context.getOptions().getCommonOptions();\n+      InodeSyncStream sync =\n+          new InodeSyncStream(new LockingScheme(path, LockPattern.WRITE_EDGE, true), this,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1MTg4MQ=="}, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTEzODc1", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-522913875", "createdAt": "2020-11-03T22:15:29Z", "commit": {"oid": "4f92f6c1df07ee83063583ef31b83b2747540dae"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c90318eadbe50519c9db4c6cd675d4fe2d2fb52", "author": {"user": {"login": "JySongWithZhangCe", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/4c90318eadbe50519c9db4c6cd675d4fe2d2fb52", "committedDate": "2020-11-05T02:11:19Z", "message": "remove loadMetadata rpc and add a option for listStatus rpc to achieve"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1db291ea7d36fc1f475206ae1f24446e0872b97", "author": {"user": {"login": "JySongWithZhangCe", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/b1db291ea7d36fc1f475206ae1f24446e0872b97", "committedDate": "2020-11-05T02:21:16Z", "message": "rollback recursive for loadMetadataDefaults method in FileSystemOptions class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzOTg0NjQ2", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-523984646", "createdAt": "2020-11-05T07:30:16Z", "commit": {"oid": "b1db291ea7d36fc1f475206ae1f24446e0872b97"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzozMDoxNlrOHt2efg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzo0Mjo0MVrOHt2y7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MDUxMA==", "bodyText": "nit: restore the order", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r517840510", "createdAt": "2020-11-05T07:30:16Z", "author": {"login": "jiacheliu3"}, "path": "core/client/fs/src/main/java/alluxio/util/FileSystemOptions.java", "diffHunk": "@@ -180,9 +180,9 @@ public static ListStatusPOptions listStatusDefaults(AlluxioConfiguration conf) {\n   public static LoadMetadataPOptions loadMetadataDefaults(AlluxioConfiguration conf) {\n     return LoadMetadataPOptions.newBuilder()\n         .setCommonOptions(commonDefaults(conf))\n-        .setRecursive(false)\n         .setCreateAncestors(false)\n         .setLoadDescendantType(LoadDescendantPType.NONE)\n+        .setRecursive(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1db291ea7d36fc1f475206ae1f24446e0872b97"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MDU5Nw==", "bodyText": "nit: restore the order", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r517840597", "createdAt": "2020-11-05T07:30:30Z", "author": {"login": "jiacheliu3"}, "path": "core/client/fs/src/test/java/alluxio/util/FileSystemOptionsTest.java", "diffHunk": "@@ -39,8 +39,8 @@ public void before() throws Exception {\n   public void loadMetadataOptionsDefaults() {\n     LoadMetadataPOptions options = FileSystemOptions.loadMetadataDefaults(mConf);\n     assertNotNull(options);\n-    assertFalse(options.getRecursive());\n     assertFalse(options.getCreateAncestors());\n+    assertFalse(options.getRecursive());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1db291ea7d36fc1f475206ae1f24446e0872b97"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTc0MA==", "bodyText": "@apc999 Do you think we should update the auditContext here?\nauditContext.setSucceeded(true);\n\nSimilarly, update the metrics too?", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r517845740", "createdAt": "2020-11-05T07:42:41Z", "author": {"login": "jiacheliu3"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1040,6 +1040,10 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n           }\n           ensureFullPathAndUpdateCache(inodePath);\n \n+          if (context.getOptions().getLoadMetadataOnly()) {\n+            continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1db291ea7d36fc1f475206ae1f24446e0872b97"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cf1202bbeec2eea6f39c26efc6f1fba246dd236", "author": {"user": {"login": "JySongWithZhangCe", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/9cf1202bbeec2eea6f39c26efc6f1fba246dd236", "committedDate": "2020-11-05T09:35:40Z", "message": "add auditContext setSucceeded before continue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0ODAxMjEz", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-524801213", "createdAt": "2020-11-06T01:44:15Z", "commit": {"oid": "9cf1202bbeec2eea6f39c26efc6f1fba246dd236"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNTk0Njc1", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-523594675", "createdAt": "2020-11-04T17:43:45Z", "commit": {"oid": "4f92f6c1df07ee83063583ef31b83b2747540dae"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNzo0Mzo0NVrOHti-eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzozNzowNFrOHu3TSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUyMTAxOA==", "bodyText": "Sure, I am good with that approach. Then, we just need to \"copy\" much of the initial portion of the listStatus behavior.", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r517521018", "createdAt": "2020-11-04T17:43:45Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1066,6 +1066,31 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n     return fileInfos;\n   }\n \n+  /**\n+   * {@link DefaultFileSystemMaster} has two private methods associated with sync metadata:\n+   * 1. {@link DefaultFileSystemMaster#loadMetadataIfNotExist} sync metadata in load-only mode,\n+   * 2. {@link DefaultFileSystemMaster#syncMetadata} sync metadata not in force mode.\n+   * Due to loadMetaData need work on both non-load-only mode and force mode, we need custom a\n+   * InodeSyncStream object which foreSync param is true and loadOnly param is false.\n+   * Further more, synchronize metadata may modify the structure of the inode tree, the lock\n+   * pattern of the InodeSyncStream object should be LockPattern.WRITE_EDGE.\n+   */\n+  @Override\n+  public void loadMetaData(AlluxioURI path, LoadMetadataContext context)\n+      throws AccessControlException, FileDoesNotExistException, InvalidPathException, IOException {\n+    try (RpcContext rpcContext = createRpcContext(context)) {\n+      DescendantType syncDescendantType =\n+          GrpcUtils.fromProto(context.getOptions().getLoadDescendantType());\n+      FileSystemMasterCommonPOptions commonOptions = context.getOptions().getCommonOptions();\n+      InodeSyncStream sync =\n+          new InodeSyncStream(new LockingScheme(path, LockPattern.WRITE_EDGE, true), this,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1MTg4MQ=="}, "originalCommit": {"oid": "7dbb9302bfb384967c624727639b59d2062f297a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwMjYwMQ==", "bodyText": "How does this option behave if the other option LoadMetadataPType loadMetadataType is set to NEVER? It looks like this option is really about sending results back or not, not about loading metadata? Is this a correct understanding?\nIf this option only controls returning results to the client or not, then we should rename the option to be more specific about returning results, instead of mentioning loading metadata.", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r518902601", "createdAt": "2020-11-06T17:37:04Z", "author": {"login": "gpang"}, "path": "core/transport/src/main/proto/grpc/file_system_master.proto", "diffHunk": "@@ -184,6 +184,8 @@ message ListStatusPOptions {\n   optional LoadMetadataPType loadMetadataType = 2;\n   optional FileSystemMasterCommonPOptions commonOptions = 3;\n   optional bool recursive = 4;\n+  // Only loads metadata about a path in the UFS to Alluxio. No data will be transferred.\n+  optional bool loadMetadataOnly = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cf1202bbeec2eea6f39c26efc6f1fba246dd236"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1Mzg5OTU2", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-525389956", "createdAt": "2020-11-06T18:20:24Z", "commit": {"oid": "9cf1202bbeec2eea6f39c26efc6f1fba246dd236"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODoyMDoyNFrOHu4r-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODoyMDoyNFrOHu4r-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyNTMwNA==", "bodyText": "@gpang  is this the correct location to continue if we don't need results returned?", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r518925304", "createdAt": "2020-11-06T18:20:24Z", "author": {"login": "apc999"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1040,6 +1040,11 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n           }\n           ensureFullPathAndUpdateCache(inodePath);\n \n+          if (context.getOptions().getLoadMetadataOnly()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cf1202bbeec2eea6f39c26efc6f1fba246dd236"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1Mzk0MTUy", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-525394152", "createdAt": "2020-11-06T18:26:50Z", "commit": {"oid": "9cf1202bbeec2eea6f39c26efc6f1fba246dd236"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODoyNjo1MFrOHu45Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODoyNjo1MFrOHu45Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyODcwMg==", "bodyText": "set the added flag explicitly here?", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r518928702", "createdAt": "2020-11-06T18:26:50Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java", "diffHunk": "@@ -289,6 +289,18 @@ public void iterateStatus(AlluxioURI path, final ListStatusPOptions options,\n     });\n   }\n \n+  @Override\n+  public void loadMetadata(AlluxioURI path, final ListStatusPOptions options)\n+      throws FileDoesNotExistException, IOException, AlluxioException {\n+    checkUri(path);\n+    rpc(client -> {\n+      ListStatusPOptions mergedOptions = FileSystemOptions.listStatusDefaults(\n+          mFsContext.getPathConf(path)).toBuilder().mergeFrom(options).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cf1202bbeec2eea6f39c26efc6f1fba246dd236"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDg2MTQ5", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-527486149", "createdAt": "2020-11-10T18:26:32Z", "commit": {"oid": "9cf1202bbeec2eea6f39c26efc6f1fba246dd236"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoyNjozMlrOHwpugA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoyNjozMlrOHwpugA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3NzM0NA==", "bodyText": "I think this is fine, but I think I would suggest a slightly different approach. The part after this code gathers all the results, and updates metrics. If we return here, we will not get some of the metrics accounting. Instead, it could look something like this:\nensureFullPathAndUpdateCache(inodePath);\n\nauditContext.setSrcInode(inodePath.getInode());\nif (!context.getOptions().getLoadMetadataOnly()) {  // this line is new\n  DescendantType descendantTypeForListStatus =\n    (context.getOptions().getRecursive()) ? DescendantType.ALL : DescendantType.ONE;\n  listStatusInternal(context, rpcContext, inodePath, auditContext,\n    descendantTypeForListStatus, resultStream, 0);\n}    // this line is new\nauditContext.setSucceeded(true);\nMetrics.FILE_INFOS_GOT.inc();\nif (!ufsAccessed) {\n  MountTable.Resolution resolution = mMountTable.resolve(inodePath.getUri());\n  Metrics.getUfsCounter(mMountTable.getMountInfo(resolution.getMountId())\n      .getUfsUri().toString(),\n    Metrics.UFSOps.LIST_STATUS).inc();\n}\nBasically, what this is doing is the method is unchanged, but the option only guards the call to listStatusInternal() which is the method that fills in all the results. If we don't want results, we only skip calling that method.\nWhat do you think?", "url": "https://github.com/Alluxio/alluxio/pull/12421#discussion_r520777344", "createdAt": "2020-11-10T18:26:32Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1040,6 +1040,11 @@ public void listStatus(AlluxioURI path, ListStatusContext context,\n           }\n           ensureFullPathAndUpdateCache(inodePath);\n \n+          if (context.getOptions().getLoadMetadataOnly()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyNTMwNA=="}, "originalCommit": {"oid": "9cf1202bbeec2eea6f39c26efc6f1fba246dd236"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ebb9a4b82a32707c0730b456c79fe4d201219d0", "author": {"user": {"login": "JySongWithZhangCe", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/2ebb9a4b82a32707c0730b456c79fe4d201219d0", "committedDate": "2020-11-11T14:15:45Z", "message": "change loadMetadataOnly to resultsRequired and fix code related"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ae06225cc28f82f28ad16297a667311a443e649", "author": {"user": {"login": "JySongWithZhangCe", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/2ae06225cc28f82f28ad16297a667311a443e649", "committedDate": "2020-11-11T14:22:40Z", "message": "fix LoadMetadataCommand code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTExNTAx", "url": "https://github.com/Alluxio/alluxio/pull/12421#pullrequestreview-528511501", "createdAt": "2020-11-11T20:29:52Z", "commit": {"oid": "2ae06225cc28f82f28ad16297a667311a443e649"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3507, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}