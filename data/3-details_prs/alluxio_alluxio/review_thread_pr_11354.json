{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MDEyNDI4", "number": 11354, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNDoxODozNFrOD2Pd9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNDoxODozNFrOD2Pd9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjAzMTI0OnYy", "diffSide": "RIGHT", "path": "core/server/common/src/main/java/alluxio/master/transport/GrpcMessagingServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNDoxODozNFrOGL-b2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwOTo0MToyNFrOGMB5YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIxMDQ1OQ==", "bodyText": "nit: update the comment", "url": "https://github.com/Alluxio/alluxio/pull/11354#discussion_r415210459", "createdAt": "2020-04-26T04:18:34Z", "author": {"login": "ggezer"}, "path": "core/server/common/src/main/java/alluxio/master/transport/GrpcMessagingServer.java", "diffHunk": "@@ -140,40 +127,16 @@ public GrpcMessagingServer(AlluxioConfiguration conf, UserState userState,\n     }\n \n     LOG.debug(\"Closing messaging server: {}\", mGrpcServer);\n-    // Close created connections.\n-    List<CompletableFuture<Void>> connectionCloseFutures = new ArrayList<>(mConnections.size());\n-    for (Connection connection : mConnections) {\n-      connectionCloseFutures.add(connection.close());\n-    }\n-    mConnections.clear();\n-\n-    CompletableFuture<Void> future = new CompletableFuture<>();\n-    CompletableFuture.allOf(connectionCloseFutures.toArray(new CompletableFuture[0]))\n-        .whenComplete((result, error) -> {\n-          // Shut down gRPC server once all connections are closed.\n-          try {\n-            mGrpcServer.shutdown();\n-          } catch (Exception e) {\n-            LOG.warn(\"Failed to close messaging gRPC server: {}\", mGrpcServer);\n-          } finally {\n-            mGrpcServer = null;\n-          }\n-          // Complete the future with result from connection shut downs.\n-          if (error == null) {\n-            future.complete(result);\n-          } else {\n-            future.completeExceptionally(error);\n-          }\n-        });\n-    return future;\n-  }\n \n-  /**\n-   * Used to keep track of all connections created by this server instance.\n-   *\n-   * @param serverConnection new client connection\n-   */\n-  private synchronized void addNewConnection(Connection serverConnection) {\n-    mConnections.add(serverConnection);\n+    return CompletableFuture.runAsync(() -> {\n+      // Shut down gRPC server once all connections are closed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e872aafcec164a952bafacdd768a5233de9b1529"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2NzE2OQ==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11354#discussion_r415267169", "createdAt": "2020-04-26T09:41:24Z", "author": {"login": "ZacBlanco"}, "path": "core/server/common/src/main/java/alluxio/master/transport/GrpcMessagingServer.java", "diffHunk": "@@ -140,40 +127,16 @@ public GrpcMessagingServer(AlluxioConfiguration conf, UserState userState,\n     }\n \n     LOG.debug(\"Closing messaging server: {}\", mGrpcServer);\n-    // Close created connections.\n-    List<CompletableFuture<Void>> connectionCloseFutures = new ArrayList<>(mConnections.size());\n-    for (Connection connection : mConnections) {\n-      connectionCloseFutures.add(connection.close());\n-    }\n-    mConnections.clear();\n-\n-    CompletableFuture<Void> future = new CompletableFuture<>();\n-    CompletableFuture.allOf(connectionCloseFutures.toArray(new CompletableFuture[0]))\n-        .whenComplete((result, error) -> {\n-          // Shut down gRPC server once all connections are closed.\n-          try {\n-            mGrpcServer.shutdown();\n-          } catch (Exception e) {\n-            LOG.warn(\"Failed to close messaging gRPC server: {}\", mGrpcServer);\n-          } finally {\n-            mGrpcServer = null;\n-          }\n-          // Complete the future with result from connection shut downs.\n-          if (error == null) {\n-            future.complete(result);\n-          } else {\n-            future.completeExceptionally(error);\n-          }\n-        });\n-    return future;\n-  }\n \n-  /**\n-   * Used to keep track of all connections created by this server instance.\n-   *\n-   * @param serverConnection new client connection\n-   */\n-  private synchronized void addNewConnection(Connection serverConnection) {\n-    mConnections.add(serverConnection);\n+    return CompletableFuture.runAsync(() -> {\n+      // Shut down gRPC server once all connections are closed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIxMDQ1OQ=="}, "originalCommit": {"oid": "e872aafcec164a952bafacdd768a5233de9b1529"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1678, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}