{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzODc0Nzg0", "number": 11387, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjo0MzoxOVrOD55wPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODowMDo1M1rOD6jf4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDQxNjYyOnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjo0MzoxOVrOGRb5JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODowMzowNFrOGSdKfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzNTk3Mw==", "bodyText": "@iluoeli we are using 4-space indent rather than 8. Checkout https://docs.alluxio.io/os/user/stable/en/contributor/Code-Conventions.html#coding-style for the Eclipse Code Formatter or Eclipse Code Formatter Plugin\nLet's avoid introducing unnecessary change in a PR which increases the footprint and slows down code review", "url": "https://github.com/Alluxio/alluxio/pull/11387#discussion_r420935973", "createdAt": "2020-05-06T16:43:19Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java", "diffHunk": "@@ -94,7 +94,7 @@\n   public static final int MAX_NAME_LENGTH = 255;\n \n   private static InstancedConfiguration sConf =\n-      new InstancedConfiguration(ConfigurationUtils.defaults());\n+          new InstancedConfiguration(ConfigurationUtils.defaults());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c46a1eed14283e762319e20d22029c70d3ce51f4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwNTM3Mg==", "bodyText": "actually for this file, let's simple leave it unchanged as what is in master branch.", "url": "https://github.com/Alluxio/alluxio/pull/11387#discussion_r422005372", "createdAt": "2020-05-08T08:03:04Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java", "diffHunk": "@@ -94,7 +94,7 @@\n   public static final int MAX_NAME_LENGTH = 255;\n \n   private static InstancedConfiguration sConf =\n-      new InstancedConfiguration(ConfigurationUtils.defaults());\n+          new InstancedConfiguration(ConfigurationUtils.defaults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzNTk3Mw=="}, "originalCommit": {"oid": "c46a1eed14283e762319e20d22029c70d3ce51f4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDg2OTQ2OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozNzozMVrOGRgUVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozNzozMVrOGRgUVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwODQ3MQ==", "bodyText": "newline needed", "url": "https://github.com/Alluxio/alluxio/pull/11387#discussion_r421008471", "createdAt": "2020-05-06T18:37:31Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java", "diffHunk": "@@ -969,4 +969,4 @@ public AlluxioURI load(String fusePath) {\n       return new AlluxioURI(tpath.toString());\n     }\n   }\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c46a1eed14283e762319e20d22029c70d3ce51f4"}, "originalPosition": 289}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzIwMDA4OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/native/libjnifuse/jnifuse_fs.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzo0MTo1NVrOGSckfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzo0MTo1NVrOGSckfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5NTY0Ng==", "bodyText": "readdirOper", "url": "https://github.com/Alluxio/alluxio/pull/11387#discussion_r421995646", "createdAt": "2020-05-08T07:41:55Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/native/libjnifuse/jnifuse_fs.cc", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+#include \"jnifuse_fs.h\"\n+\n+#include <assert.h>\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <fuse.h>\n+#include <jni.h>\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include \"debug.h\"\n+\n+namespace jnifuse {\n+\n+static pthread_key_t jffs_threadKey;\n+\n+static void thread_data_free(void *ptr) {\n+  ThreadData *td = (ThreadData *)ptr;\n+  if (td->attachedJVM != nullptr) {\n+    td->attachedJVM->DetachCurrentThread();\n+  }\n+  delete td;\n+}\n+\n+JniFuseFileSystem *JniFuseFileSystem::instance = nullptr;\n+\n+JniFuseFileSystem::JniFuseFileSystem(JNIEnv *env, jobject obj) {\n+  env->GetJavaVM(&this->jvm);\n+  this->fs = env->NewGlobalRef(obj);\n+\n+  this->getattrOper = new GetattrOperation(this);\n+  this->openOper = new OpenOperation(this);\n+  this->readOper = new ReadOperation(this);\n+  this->readdirOper = new ReaddirOperation(this);\n+  this->unlinkOper = new UnlinkOperation(this);\n+  this->flushOper = new FlushOperation(this);\n+  this->releaseOper = new ReleaseOperation(this);\n+  this->createOper = new CreateOperation(this);\n+  this->mkdirOper = new MkdirOperation(this);\n+  this->rmdirOper = new RmdirOperation(this);\n+  this->writeOper = new WriteOperation(this);\n+}\n+\n+JniFuseFileSystem::~JniFuseFileSystem() {\n+  delete this->getattrOper;\n+  delete this->openOper;\n+  delete this->readOper;\n+  delete this->readOper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1478b12a423a3c80f74f2df1b59cefba4eacab51"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzIxMjU2OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/native/libjnifuse/jnifuse_fs.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzo0NjoxNlrOGScsGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzo0NjoxNlrOGScsGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5NzU5NQ==", "bodyText": "please follow https://google.github.io/styleguide/cppguide.html#The__define_Guard\nthis macro should be FUSE_NATIVE_LIBJNIFUSE_FS", "url": "https://github.com/Alluxio/alluxio/pull/11387#discussion_r421997595", "createdAt": "2020-05-08T07:46:16Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/native/libjnifuse/jnifuse_fs.h", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+#ifndef _JNI_FUSE_FILE_SYSTEM_H", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1478b12a423a3c80f74f2df1b59cefba4eacab51"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzIxMzU1OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/native/libjnifuse/jnifuse_fs.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzo0NjozNlrOGScsrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzo0NjozNlrOGScsrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5Nzc0Mw==", "bodyText": "nit: sort", "url": "https://github.com/Alluxio/alluxio/pull/11387#discussion_r421997743", "createdAt": "2020-05-08T07:46:36Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/native/libjnifuse/jnifuse_fs.h", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+#ifndef _JNI_FUSE_FILE_SYSTEM_H\n+#define _JNI_FUSE_FILE_SYSTEM_H\n+\n+#include <fuse.h>\n+\n+#include \"jni.h\"\n+#include \"operation.h\"\n+\n+namespace jnifuse {\n+\n+class GetattrOperation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1478b12a423a3c80f74f2df1b59cefba4eacab51"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzIxNTM1OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/native/libjnifuse/jnifuse_fs.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzo0NzoxM1rOGSctyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzo0NzoxM1rOGSctyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5ODAyNg==", "bodyText": "// FOO_BAR_BAZ_H_ (replace the macro)\nhttps://google.github.io/styleguide/cppguide.html#The__define_Guard", "url": "https://github.com/Alluxio/alluxio/pull/11387#discussion_r421998026", "createdAt": "2020-05-08T07:47:13Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/native/libjnifuse/jnifuse_fs.h", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+#ifndef _JNI_FUSE_FILE_SYSTEM_H\n+#define _JNI_FUSE_FILE_SYSTEM_H\n+\n+#include <fuse.h>\n+\n+#include \"jni.h\"\n+#include \"operation.h\"\n+\n+namespace jnifuse {\n+\n+class GetattrOperation;\n+class OpenOperation;\n+class Operation;\n+class ReaddirOperation;\n+class ReadOperation;\n+class UnlinkOperation;\n+class FlushOperation;\n+class ReleaseOperation;\n+class CreateOperation;\n+class MkdirOperation;\n+class RmdirOperation;\n+class WriteOperation;\n+\n+struct ThreadData {\n+  JavaVM *attachedJVM;\n+  JNIEnv *attachedEnv;\n+};\n+\n+class JniFuseFileSystem {\n+ private:\n+  JniFuseFileSystem(JNIEnv *env, jobject obj);\n+  ~JniFuseFileSystem();\n+\n+ public:\n+  static JniFuseFileSystem *getInstance();\n+  static void init(JNIEnv *env, jobject obj);\n+  JNIEnv *getEnv();\n+  JavaVM *getJVM();\n+  jobject getFSObj();\n+\n+ private:\n+  static JniFuseFileSystem *instance;\n+  JavaVM *jvm;\n+  jobject fs;\n+\n+ public:\n+  GetattrOperation *getattrOper;\n+  OpenOperation *openOper;\n+  ReadOperation *readOper;\n+  ReaddirOperation *readdirOper;\n+  UnlinkOperation *unlinkOper;\n+  FlushOperation *flushOper;\n+  ReleaseOperation *releaseOper;\n+  CreateOperation *createOper;\n+  MkdirOperation *mkdirOper;\n+  RmdirOperation *rmdirOper;\n+  WriteOperation *writeOper;\n+};\n+\n+}  // namespace jnifuse\n+\n+#endif", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1478b12a423a3c80f74f2df1b59cefba4eacab51"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzI1NTQ2OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODowMDozN1rOGSdGag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODowMDozN1rOGSdGag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwNDMzMA==", "bodyText": "please fix, see line wrapping\nhttps://google.github.io/styleguide/javaguide.html#s4.5-line-wrapping", "url": "https://github.com/Alluxio/alluxio/pull/11387#discussion_r422004330", "createdAt": "2020-05-08T08:00:37Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java", "diffHunk": "@@ -86,14 +86,14 @@\n \n   @Rule\n   public ConfigurationRule mConfiguration =\n-      new ConfigurationRule(ImmutableMap.of(PropertyKey.FUSE_CACHED_PATHS_MAX, \"0\",\n-          PropertyKey.FUSE_USER_GROUP_TRANSLATION_ENABLED, \"true\"), mConf);\n+          new ConfigurationRule(ImmutableMap.of(PropertyKey.FUSE_CACHED_PATHS_MAX, \"0\",\n+                  PropertyKey.FUSE_USER_GROUP_TRANSLATION_ENABLED, \"true\"), mConf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1478b12a423a3c80f74f2df1b59cefba4eacab51"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzI1NjAyOnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODowMDo1M1rOGSdGxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODowMDo1M1rOGSdGxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwNDQyMA==", "bodyText": "fix here too.", "url": "https://github.com/Alluxio/alluxio/pull/11387#discussion_r422004420", "createdAt": "2020-05-08T08:00:53Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java", "diffHunk": "@@ -86,14 +86,14 @@\n \n   @Rule\n   public ConfigurationRule mConfiguration =\n-      new ConfigurationRule(ImmutableMap.of(PropertyKey.FUSE_CACHED_PATHS_MAX, \"0\",\n-          PropertyKey.FUSE_USER_GROUP_TRANSLATION_ENABLED, \"true\"), mConf);\n+          new ConfigurationRule(ImmutableMap.of(PropertyKey.FUSE_CACHED_PATHS_MAX, \"0\",\n+                  PropertyKey.FUSE_USER_GROUP_TRANSLATION_ENABLED, \"true\"), mConf);\n \n   @Before\n   public void before() throws Exception {\n     final List<String> empty = Collections.emptyList();\n     AlluxioFuseOptions opts =\n-        new AlluxioFuseOptions(\"/doesnt/matter\", TEST_ROOT_PATH, false, empty);\n+            new AlluxioFuseOptions(\"/doesnt/matter\", TEST_ROOT_PATH, false, empty);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1478b12a423a3c80f74f2df1b59cefba4eacab51"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1708, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}