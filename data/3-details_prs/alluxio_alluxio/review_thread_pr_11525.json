{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwNTg2Nzc5", "number": 11525, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMjowMzoyOFrOEDSC0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzozOToyOFrOEDjm-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODc2ODE5OnYy", "diffSide": "LEFT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMjowMzoyOFrOGgNcWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMjowMzoyOFrOGgNcWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyNzg2NA==", "bodyText": "move the IO operations inside LocalCacheManager under page locks to coordinate with other threads, also procted by NoExceptionManager", "url": "https://github.com/Alluxio/alluxio/pull/11525#discussion_r436427864", "createdAt": "2020-06-08T02:03:28Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java", "diffHunk": "@@ -132,47 +134,40 @@ public int read(byte[] b, int off, int len) throws IOException {\n     if (mPosition >= mStatus.getLength()) { // at end of file\n       return -1;\n     }\n-    int bytesRead = 0;\n+    int totalBytesRead = 0;\n     long lengthToRead = Math.min(len, mStatus.getLength() - mPosition);\n     // for each page, check if it is available in the cache\n-    while (bytesRead < lengthToRead) {\n+    while (totalBytesRead < lengthToRead) {\n       long currentPage = mPosition / mPageSize;\n       int currentPageOffset = (int) (mPosition % mPageSize);\n-      int bytesLeftInPage = (int) Math.min(mPageSize - currentPageOffset, lengthToRead - bytesRead);\n+      int bytesLeftInPage =\n+          (int) Math.min(mPageSize - currentPageOffset, lengthToRead - totalBytesRead);\n       PageId pageId = new PageId(mStatus.getFileIdentifier(), currentPage);\n-      try (ReadableByteChannel cachedData = mCacheManager.get(pageId, currentPageOffset)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b1d9d46d56dda72a007ac3a379480f29067ad3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTY0NjAzOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzozOToyOFrOGgpFxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjozOTozOVrOGgyzwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4MDgzOQ==", "bodyText": "Should we have this logic here or leave it to NoExceptionCacheManager?", "url": "https://github.com/Alluxio/alluxio/pull/11525#discussion_r436880839", "createdAt": "2020-06-08T17:39:28Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -445,18 +445,33 @@ private boolean deletePage(PageId pageId, PageInfo pageInfo) {\n     return true;\n   }\n \n-  @Nullable\n-  private ReadableByteChannel getPage(PageId pageId, int offset) {\n-    ReadableByteChannel ret;\n-    try {\n-      ret = mPageStore.get(pageId, offset);\n+  private int getPage(PageId pageId, int offset, int bytesToRead, byte[] buffer,\n+      int offsetInBuffer) {\n+    try (ReadableByteChannel chan = mPageStore.get(pageId, offset)) {\n+      // wrap return byte array in a bytebuffer and set the pos/limit for the page read\n+      ByteBuffer buf = ByteBuffer.wrap(buffer);\n+      buf.position(offsetInBuffer);\n+      buf.limit(offsetInBuffer + bytesToRead);\n+      // read data from cache\n+      while (buf.position() != buf.limit()) {\n+        if (chan.read(buf) == -1) {\n+          break;\n+        }\n+      }\n+      if (buf.position() != buf.limit()) {\n+        // data read from page store is inconsistent from the metastore\n+        Metrics.GET_ERRORS_FAILED_READ.inc();\n+        throw new IOException(String.format(\n+            \"Failed to read page {}: supposed to read {} bytes, {} bytes actually read\",\n+            pageId, bytesToRead, buf.position() - offsetInBuffer));\n+      }\n     } catch (IOException | PageNotFoundException e) {\n       LOG.error(\"Failed to get existing page {}: {}\", pageId, e);\n       Metrics.GET_ERRORS.inc();\n-      return null;\n+      return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87ace2edcb55bf513cc5d4e69291e6dcf1bbe314"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkwODY1OQ==", "bodyText": "it needs to be here so we can clean up the state https://github.com/Alluxio/alluxio/pull/11525/files#diff-52b3926ca60dbb1ab7f30f23ada07efdR365", "url": "https://github.com/Alluxio/alluxio/pull/11525#discussion_r436908659", "createdAt": "2020-06-08T18:28:45Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -445,18 +445,33 @@ private boolean deletePage(PageId pageId, PageInfo pageInfo) {\n     return true;\n   }\n \n-  @Nullable\n-  private ReadableByteChannel getPage(PageId pageId, int offset) {\n-    ReadableByteChannel ret;\n-    try {\n-      ret = mPageStore.get(pageId, offset);\n+  private int getPage(PageId pageId, int offset, int bytesToRead, byte[] buffer,\n+      int offsetInBuffer) {\n+    try (ReadableByteChannel chan = mPageStore.get(pageId, offset)) {\n+      // wrap return byte array in a bytebuffer and set the pos/limit for the page read\n+      ByteBuffer buf = ByteBuffer.wrap(buffer);\n+      buf.position(offsetInBuffer);\n+      buf.limit(offsetInBuffer + bytesToRead);\n+      // read data from cache\n+      while (buf.position() != buf.limit()) {\n+        if (chan.read(buf) == -1) {\n+          break;\n+        }\n+      }\n+      if (buf.position() != buf.limit()) {\n+        // data read from page store is inconsistent from the metastore\n+        Metrics.GET_ERRORS_FAILED_READ.inc();\n+        throw new IOException(String.format(\n+            \"Failed to read page {}: supposed to read {} bytes, {} bytes actually read\",\n+            pageId, bytesToRead, buf.position() - offsetInBuffer));\n+      }\n     } catch (IOException | PageNotFoundException e) {\n       LOG.error(\"Failed to get existing page {}: {}\", pageId, e);\n       Metrics.GET_ERRORS.inc();\n-      return null;\n+      return -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4MDgzOQ=="}, "originalCommit": {"oid": "87ace2edcb55bf513cc5d4e69291e6dcf1bbe314"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0MDA2Ng==", "bodyText": "got it, thanks.", "url": "https://github.com/Alluxio/alluxio/pull/11525#discussion_r437040066", "createdAt": "2020-06-08T22:39:39Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -445,18 +445,33 @@ private boolean deletePage(PageId pageId, PageInfo pageInfo) {\n     return true;\n   }\n \n-  @Nullable\n-  private ReadableByteChannel getPage(PageId pageId, int offset) {\n-    ReadableByteChannel ret;\n-    try {\n-      ret = mPageStore.get(pageId, offset);\n+  private int getPage(PageId pageId, int offset, int bytesToRead, byte[] buffer,\n+      int offsetInBuffer) {\n+    try (ReadableByteChannel chan = mPageStore.get(pageId, offset)) {\n+      // wrap return byte array in a bytebuffer and set the pos/limit for the page read\n+      ByteBuffer buf = ByteBuffer.wrap(buffer);\n+      buf.position(offsetInBuffer);\n+      buf.limit(offsetInBuffer + bytesToRead);\n+      // read data from cache\n+      while (buf.position() != buf.limit()) {\n+        if (chan.read(buf) == -1) {\n+          break;\n+        }\n+      }\n+      if (buf.position() != buf.limit()) {\n+        // data read from page store is inconsistent from the metastore\n+        Metrics.GET_ERRORS_FAILED_READ.inc();\n+        throw new IOException(String.format(\n+            \"Failed to read page {}: supposed to read {} bytes, {} bytes actually read\",\n+            pageId, bytesToRead, buf.position() - offsetInBuffer));\n+      }\n     } catch (IOException | PageNotFoundException e) {\n       LOG.error(\"Failed to get existing page {}: {}\", pageId, e);\n       Metrics.GET_ERRORS.inc();\n-      return null;\n+      return -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4MDgzOQ=="}, "originalCommit": {"oid": "87ace2edcb55bf513cc5d4e69291e6dcf1bbe314"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1594, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}