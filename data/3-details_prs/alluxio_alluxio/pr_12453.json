{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NTAwNDY3", "number": 12453, "title": "Improve concurrent read performance through RPC", "bodyText": "Target to fix #12146\nTwo improvements:\n\nWhen multiple processes/threads accessing the same blocks concurrently, same data will be read only once with SharedDataReader. SharedDataReader buffers blocks on the client side. It will buffer a block from index 0 to the biggest index being read. Only when no processes/threads accessing this block will the block buffer being removed.\nSeek(pos) improvements. Previously close and reopen DataReader introduce many overheads. The improvements look like target to reduce the DataReader reopen. When reading backward, SharedDataReader can directly read from local cache. when reading forward, instead of doing seek(), the BlockInStream will try to read data already received but not processed to reach the target pos.\n\nServeral TODOs/improvements\nSeek in DataBuffer instead of data copy while seeking inner a chunk\nSharedDataReader locking\nAdd memory limits for shared data buffer.\nCo-authored-by: Lu Qiu luqiujob@gmail.com\nCo-authored-by: Chao Wang 71095236+chaowangnk1@users.noreply.github.com\nCo-authored-by: Mickey Zhang rzhang56@illinois.edu", "createdAt": "2020-11-03T05:55:19Z", "url": "https://github.com/Alluxio/alluxio/pull/12453", "merged": true, "mergeCommit": {"oid": "238b7eb3ec58270aabf7004ac01cc89e6034b93e"}, "closed": true, "closedAt": "2020-11-08T17:51:14Z", "author": {"login": "chaowangnk1"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYypl3AH2gAyNTE0NTAwNDY3Ojc0YjQ4NGI2NzcyN2I1NTM1Nzg5M2YyZTUxZGQwMmZmZGE1ZWUzOGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdaj2JOgFqTUyNTgzMDExNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "74b484b67727b55357893f2e51dd02ffda5ee38a", "author": {"user": {"login": "chaowangnk1", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/74b484b67727b55357893f2e51dd02ffda5ee38a", "committedDate": "2020-11-03T05:52:06Z", "message": "fix multi-process read perf issue\n\nCo-authored-by: bastrik <rzhang56@illinois.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79", "author": {"user": {"login": "chaowangnk1", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/990e3df845d5dfaf8b750a899e2dfb825096cf79", "committedDate": "2020-11-03T05:53:05Z", "message": "fix multiple process read perf issue, by creating shared grpc data reader\n\nCo-authored-by: bastrik <rzhang56@illinois.edu>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTgxNTIz", "url": "https://github.com/Alluxio/alluxio/pull/12453#pullrequestreview-522981523", "createdAt": "2020-11-04T01:15:00Z", "commit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzo0OTo1MlrOHtIO4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo1NDozMlrOHtle4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4Mjg1MA==", "bodyText": "What's the performance difference (rough numbers are enough) in the following scenario compared to original impl\n\nsingle process Fuse read with NaiveSharedGrpcDataReader\nSingle process Fuse read without NaiveSharedGrpcDataReader\nMultiple (four) processes Fuse read with NaiveSharedGrpcDataReader\nMultiple (four) processes Fuse read without NaiveSharedGrpcDataReader", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517082850", "createdAt": "2020-11-04T03:49:52Z", "author": {"login": "LuQQiu"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "diffHunk": "@@ -337,8 +341,42 @@ public void seek(long pos) throws IOException {\n     }\n     if (pos < mPos) {\n       mEOF = false;\n+      if (mDataReader instanceof NaiveSharedGrpcDataReader) {\n+        NaiveSharedGrpcDataReader reader = (NaiveSharedGrpcDataReader)mDataReader;\n+        reader.seek(pos);\n+        if (mCurrentChunk != null) {\n+          mCurrentChunk.release();\n+          mCurrentChunk = null;\n+        }\n+      } else {\n+        closeDataReader();\n+      }\n+    } else if (pos < mLength) {\n+      // Try to read data already in queue\n+      long curPos = mPos;\n+      while (mCurrentChunk != null && curPos < pos) {\n+        long nextPos = curPos + mCurrentChunk.readableBytes();\n+        if (nextPos <= pos) {\n+          curPos = nextPos; \n+          mCurrentChunk.release();\n+          mCurrentChunk = mDataReader.readChunkNoWait();\n+        } else {\n+          // TODO introduce seek in DataBuffer\n+          int toRead = (int)(pos - curPos);\n+          final byte[] b = new byte[toRead];\n+          mCurrentChunk.readBytes(b, 0, toRead);\n+          curPos = pos;\n+        }\n+      }\n+\n+      if (curPos < pos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4MzgyNA==", "bodyText": "Change to NaiveCachedGrpcDataReader then will be easier to debug", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517083824", "createdAt": "2020-11-04T03:54:30Z", "author": {"login": "LuQQiu"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveCachedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.DataMessage;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import alluxio.resource.LockResource;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that streams a region from gRPC data server.\n+ *\n+ * Protocol:\n+ * 1. The client sends a read request (id, offset, length).\n+ * 2. Once the server receives the request, it streams chunks to the client. The streaming pauses\n+ *    if the server's buffer is full and resumes if the buffer is not full.\n+ * 3. The client reads chunks from the stream using an iterator.\n+ * 4. The client can cancel the read request at anytime. The cancel request is ignored by the\n+ *    server if everything has been sent to channel.\n+ * 5. To make it simple to handle errors, the channel is closed if any error occurs.\n+ */\n+@NotThreadSafe\n+public final class NaiveCachedGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveCachedGrpcDataReader.class);\n+\n+  private final int mReaderBufferSizeMessages;\n+  private final long mDataTimeoutMs;\n+  private final FileSystemContext mContext;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final ReadRequest mReadRequest;\n+  private final WorkerNetAddress mAddress;\n+\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+\n+  private final DataBuffer[] mDataBuffers; \n+  private int mBufferCount = 0;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+\n+  /**\n+   * Creates an instance of {@link NaiveCachedGrpcDataReader}.\n+   *\n+   * @param context the file system context\n+   * @param address the data server address\n+   * @param readRequest the read request\n+   */\n+  public NaiveCachedGrpcDataReader(FileSystemContext context, WorkerNetAddress address,\n+      ReadRequest readRequest) throws IOException {\n+    mContext = context;\n+    mAddress = address;\n+    mPosToRead = readRequest.getOffset();\n+    mReadRequest = readRequest;\n+    AlluxioConfiguration alluxioConf = context.getClusterConf();\n+    mReaderBufferSizeMessages = alluxioConf\n+        .getInt(PropertyKey.USER_STREAMING_READER_BUFFER_SIZE_MESSAGES);\n+    mDataTimeoutMs = alluxioConf.getMs(PropertyKey.USER_STREAMING_DATA_TIMEOUT);\n+    mMarshaller = new ReadResponseMarshaller();\n+    mClient = mContext.acquireBlockWorkerClient(address);\n+    long blockSize = readRequest.getLength() + readRequest.getOffset();\n+    long chunkSize = readRequest.getChunkSize();\n+    int buffCount = (int)(blockSize / chunkSize);\n+    if ((blockSize % chunkSize) != 0) {\n+      buffCount += 1;\n+    }\n+    mDataBuffers = new DataBuffer[buffCount];\n+\n+    try {\n+      String desc = \"GrpcDataReader\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4NjczMA==", "bodyText": "Why remove the part for GrpcDataMessagingBlockingStream?", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517086730", "createdAt": "2020-11-04T04:07:59Z", "author": {"login": "LuQQiu"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveCachedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.DataMessage;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import alluxio.resource.LockResource;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that streams a region from gRPC data server.\n+ *\n+ * Protocol:\n+ * 1. The client sends a read request (id, offset, length).\n+ * 2. Once the server receives the request, it streams chunks to the client. The streaming pauses\n+ *    if the server's buffer is full and resumes if the buffer is not full.\n+ * 3. The client reads chunks from the stream using an iterator.\n+ * 4. The client can cancel the read request at anytime. The cancel request is ignored by the\n+ *    server if everything has been sent to channel.\n+ * 5. To make it simple to handle errors, the channel is closed if any error occurs.\n+ */\n+@NotThreadSafe\n+public final class NaiveCachedGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveCachedGrpcDataReader.class);\n+\n+  private final int mReaderBufferSizeMessages;\n+  private final long mDataTimeoutMs;\n+  private final FileSystemContext mContext;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final ReadRequest mReadRequest;\n+  private final WorkerNetAddress mAddress;\n+\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+\n+  private final DataBuffer[] mDataBuffers; \n+  private int mBufferCount = 0;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+\n+  /**\n+   * Creates an instance of {@link NaiveCachedGrpcDataReader}.\n+   *\n+   * @param context the file system context\n+   * @param address the data server address\n+   * @param readRequest the read request\n+   */\n+  public NaiveCachedGrpcDataReader(FileSystemContext context, WorkerNetAddress address,\n+      ReadRequest readRequest) throws IOException {\n+    mContext = context;\n+    mAddress = address;\n+    mPosToRead = readRequest.getOffset();\n+    mReadRequest = readRequest;\n+    AlluxioConfiguration alluxioConf = context.getClusterConf();\n+    mReaderBufferSizeMessages = alluxioConf\n+        .getInt(PropertyKey.USER_STREAMING_READER_BUFFER_SIZE_MESSAGES);\n+    mDataTimeoutMs = alluxioConf.getMs(PropertyKey.USER_STREAMING_DATA_TIMEOUT);\n+    mMarshaller = new ReadResponseMarshaller();\n+    mClient = mContext.acquireBlockWorkerClient(address);\n+    long blockSize = readRequest.getLength() + readRequest.getOffset();\n+    long chunkSize = readRequest.getChunkSize();\n+    int buffCount = (int)(blockSize / chunkSize);\n+    if ((blockSize % chunkSize) != 0) {\n+      buffCount += 1;\n+    }\n+    mDataBuffers = new DataBuffer[buffCount];\n+\n+    try {\n+      String desc = \"GrpcDataReader\";\n+      if (LOG.isDebugEnabled()) { // More detailed description when debug logging is enabled\n+        desc = MoreObjects.toStringHelper(this)\n+          .add(\"request\", mReadRequest)\n+          .add(\"address\", address)\n+          .toString();\n+      }\n+      mStream = new GrpcBlockingStream<>(mClient.get()::readBlock, mReaderBufferSizeMessages,\n+          desc);\n+      mStream.send(mReadRequest, mDataTimeoutMs);\n+    } catch (Exception e) {\n+      mClient.close();\n+      throw e;\n+    }\n+  }\n+\n+  public DataBuffer readChunk(int index) throws IOException {\n+    if (index >= mDataBuffers.length) {\n+      return null;\n+    }\n+    \n+    try (LockResource r1 = new LockResource(mBufferLocks.writeLock())) {\n+      while (index >= mBufferCount) {\n+        DataBuffer buffer = readChunk();\n+        mDataBuffers[mBufferCount] = buffer;\n+        ++mBufferCount;\n+      }\n+    }\n+\n+    return mDataBuffers[index];\n+  }\n+\n+  private DataBuffer readChunk() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0NjU2Nw==", "bodyText": "if the client's buffer is full?", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517546567", "createdAt": "2020-11-04T18:27:13Z", "author": {"login": "LuQQiu"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveCachedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.DataMessage;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import alluxio.resource.LockResource;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that streams a region from gRPC data server.\n+ *\n+ * Protocol:\n+ * 1. The client sends a read request (id, offset, length).\n+ * 2. Once the server receives the request, it streams chunks to the client. The streaming pauses\n+ *    if the server's buffer is full and resumes if the buffer is not full.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0NzYyMw==", "bodyText": "Will we add a mechanism to limit the available buffer used for the NaiveReader and make the available buffer configurable? Can be done in future PRs.\nKind of worry about the data reader introduces the client-side OOM issue.", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517547623", "createdAt": "2020-11-04T18:29:01Z", "author": {"login": "LuQQiu"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveCachedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.DataMessage;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import alluxio.resource.LockResource;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that streams a region from gRPC data server.\n+ *\n+ * Protocol:\n+ * 1. The client sends a read request (id, offset, length).\n+ * 2. Once the server receives the request, it streams chunks to the client. The streaming pauses\n+ *    if the server's buffer is full and resumes if the buffer is not full.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0NjU2Nw=="}, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2MjA4MA==", "bodyText": "if index < mBufferCount, no need to lock?", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517562080", "createdAt": "2020-11-04T18:54:32Z", "author": {"login": "LuQQiu"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveCachedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.DataMessage;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import alluxio.resource.LockResource;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that streams a region from gRPC data server.\n+ *\n+ * Protocol:\n+ * 1. The client sends a read request (id, offset, length).\n+ * 2. Once the server receives the request, it streams chunks to the client. The streaming pauses\n+ *    if the server's buffer is full and resumes if the buffer is not full.\n+ * 3. The client reads chunks from the stream using an iterator.\n+ * 4. The client can cancel the read request at anytime. The cancel request is ignored by the\n+ *    server if everything has been sent to channel.\n+ * 5. To make it simple to handle errors, the channel is closed if any error occurs.\n+ */\n+@NotThreadSafe\n+public final class NaiveCachedGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveCachedGrpcDataReader.class);\n+\n+  private final int mReaderBufferSizeMessages;\n+  private final long mDataTimeoutMs;\n+  private final FileSystemContext mContext;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final ReadRequest mReadRequest;\n+  private final WorkerNetAddress mAddress;\n+\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+\n+  private final DataBuffer[] mDataBuffers; \n+  private int mBufferCount = 0;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+\n+  /**\n+   * Creates an instance of {@link NaiveCachedGrpcDataReader}.\n+   *\n+   * @param context the file system context\n+   * @param address the data server address\n+   * @param readRequest the read request\n+   */\n+  public NaiveCachedGrpcDataReader(FileSystemContext context, WorkerNetAddress address,\n+      ReadRequest readRequest) throws IOException {\n+    mContext = context;\n+    mAddress = address;\n+    mPosToRead = readRequest.getOffset();\n+    mReadRequest = readRequest;\n+    AlluxioConfiguration alluxioConf = context.getClusterConf();\n+    mReaderBufferSizeMessages = alluxioConf\n+        .getInt(PropertyKey.USER_STREAMING_READER_BUFFER_SIZE_MESSAGES);\n+    mDataTimeoutMs = alluxioConf.getMs(PropertyKey.USER_STREAMING_DATA_TIMEOUT);\n+    mMarshaller = new ReadResponseMarshaller();\n+    mClient = mContext.acquireBlockWorkerClient(address);\n+    long blockSize = readRequest.getLength() + readRequest.getOffset();\n+    long chunkSize = readRequest.getChunkSize();\n+    int buffCount = (int)(blockSize / chunkSize);\n+    if ((blockSize % chunkSize) != 0) {\n+      buffCount += 1;\n+    }\n+    mDataBuffers = new DataBuffer[buffCount];\n+\n+    try {\n+      String desc = \"GrpcDataReader\";\n+      if (LOG.isDebugEnabled()) { // More detailed description when debug logging is enabled\n+        desc = MoreObjects.toStringHelper(this)\n+          .add(\"request\", mReadRequest)\n+          .add(\"address\", address)\n+          .toString();\n+      }\n+      mStream = new GrpcBlockingStream<>(mClient.get()::readBlock, mReaderBufferSizeMessages,\n+          desc);\n+      mStream.send(mReadRequest, mDataTimeoutMs);\n+    } catch (Exception e) {\n+      mClient.close();\n+      throw e;\n+    }\n+  }\n+\n+  public DataBuffer readChunk(int index) throws IOException {\n+    if (index >= mDataBuffers.length) {\n+      return null;\n+    }\n+    \n+    try (LockResource r1 = new LockResource(mBufferLocks.writeLock())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNzkyNzQ3", "url": "https://github.com/Alluxio/alluxio/pull/12453#pullrequestreview-523792747", "createdAt": "2020-11-04T22:48:24Z", "commit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjo0ODoyNVrOHtsfKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMToyMjozNVrOHtvhzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3Njg0Mg==", "bodyText": "isn't this case (pos < mLength) given? since we asserted pos <= mLength and return on pos == mLength", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517676842", "createdAt": "2020-11-04T22:48:25Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "diffHunk": "@@ -337,8 +341,42 @@ public void seek(long pos) throws IOException {\n     }\n     if (pos < mPos) {\n       mEOF = false;\n+      if (mDataReader instanceof NaiveSharedGrpcDataReader) {\n+        NaiveSharedGrpcDataReader reader = (NaiveSharedGrpcDataReader)mDataReader;\n+        reader.seek(pos);\n+        if (mCurrentChunk != null) {\n+          mCurrentChunk.release();\n+          mCurrentChunk = null;\n+        }\n+      } else {\n+        closeDataReader();\n+      }\n+    } else if (pos < mLength) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3NzYwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              DataBuffer readChunkNoWait() throws IOException;\n          \n          \n            \n              @Nullable\n          \n          \n            \n              DataBuffer readChunkNoWait() throws IOException;", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517677608", "createdAt": "2020-11-04T22:50:14Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/DataReader.java", "diffHunk": "@@ -28,6 +28,13 @@\n    */\n   DataBuffer readChunk() throws IOException;\n \n+  /**\n+   * Try to read a chunk without waiting for data ready. \n+   *\n+   * @return the data buffer or null if EOF is reached or data is not ready.\n+   */\n+  DataBuffer readChunkNoWait() throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3OTA4Mg==", "bodyText": "please complete the javadoc", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517679082", "createdAt": "2020-11-04T22:53:46Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java", "diffHunk": "@@ -172,6 +172,15 @@ public ResT receive(long timeoutMs) throws IOException {\n     }\n   }\n \n+  /**\n+   * Check if there are responses in the queue\n+   * @return ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3OTUwMw==", "bodyText": "mResponses.size() > 0 ?", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517679503", "createdAt": "2020-11-04T22:54:51Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java", "diffHunk": "@@ -172,6 +172,15 @@ public ResT receive(long timeoutMs) throws IOException {\n     }\n   }\n \n+  /**\n+   * Check if there are responses in the queue\n+   * @return \n+   * @throws IOException if any error occurs\n+   */\n+  public boolean hasResponseInCache() {\n+    return mResponses.size() != 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxMjIxNA==", "bodyText": "@Nullable", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517712214", "createdAt": "2020-11-05T00:33:05Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/GrpcDataReader.java", "diffHunk": "@@ -161,6 +161,16 @@ public DataBuffer readChunk() throws IOException {\n     return buffer;\n   }\n \n+  @Override\n+  public DataBuffer readChunkNoWait() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxMzAwMw==", "bodyText": "let's avoid throwing exceptions in a constructor. If this is required, create a static factory method to create an instance which may throw exceptions rather than having it in constructor. Constructor should be lightweight and no requirement to cover its failure case", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517713003", "createdAt": "2020-11-05T00:35:53Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveCachedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.DataMessage;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import alluxio.resource.LockResource;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that streams a region from gRPC data server.\n+ *\n+ * Protocol:\n+ * 1. The client sends a read request (id, offset, length).\n+ * 2. Once the server receives the request, it streams chunks to the client. The streaming pauses\n+ *    if the server's buffer is full and resumes if the buffer is not full.\n+ * 3. The client reads chunks from the stream using an iterator.\n+ * 4. The client can cancel the read request at anytime. The cancel request is ignored by the\n+ *    server if everything has been sent to channel.\n+ * 5. To make it simple to handle errors, the channel is closed if any error occurs.\n+ */\n+@NotThreadSafe\n+public final class NaiveCachedGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveCachedGrpcDataReader.class);\n+\n+  private final int mReaderBufferSizeMessages;\n+  private final long mDataTimeoutMs;\n+  private final FileSystemContext mContext;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final ReadRequest mReadRequest;\n+  private final WorkerNetAddress mAddress;\n+\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+\n+  private final DataBuffer[] mDataBuffers; \n+  private int mBufferCount = 0;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+\n+  /**\n+   * Creates an instance of {@link NaiveCachedGrpcDataReader}.\n+   *\n+   * @param context the file system context\n+   * @param address the data server address\n+   * @param readRequest the read request\n+   */\n+  public NaiveCachedGrpcDataReader(FileSystemContext context, WorkerNetAddress address,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxMzUyNQ==", "bodyText": "same comments on constructor vs factory method as NaiveCachedGrpcDataReader.\nSince this is private and only invoked by Factory.create, we should avoid throwing Exceptions here, and you can move the part of code that may throw exception to the factory method", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517713525", "createdAt": "2020-11-05T00:37:37Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveSharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.DataMessage;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that streams a region from gRPC data server.\n+ *\n+ * NaiveSharedGrpcDataReader is a POC to solve multi-process-read perf issue.\n+ * It follows GrpcDataReader protocol.\n+ * It takes strong assumption:\n+ *    Parallel read to the same file happens on the same time, so that read request is \n+ *    serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveSharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveSharedGrpcDataReader.class);\n+\n+  private final NaiveCachedGrpcDataReader mCachedDataReader;\n+  private final long mBlockId;\n+\n+  private long mChunkSize;\n+  private long mBlockSize;\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  private final static ReentrantReadWriteLock mBlockLocks = new ReentrantReadWriteLock();\n+  private final static Map<Long, NaiveCachedGrpcDataReader> mBlockReaders = new HashMap<>();\n+\n+  /**\n+   * Creates an instance of {@link NaiveSharedGrpcDataReader}.\n+   *\n+   * @param context the file system context\n+   * @param address the data server address\n+   * @param readRequest the read request\n+   */\n+  private NaiveSharedGrpcDataReader(FileSystemContext context, WorkerNetAddress address,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxNDAxMQ==", "bodyText": "@GuardedBy(\"mBlockLocks\")\nis mBlockReaders the only data structure to protect by this lock?", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517714011", "createdAt": "2020-11-05T00:39:22Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveSharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.DataMessage;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that streams a region from gRPC data server.\n+ *\n+ * NaiveSharedGrpcDataReader is a POC to solve multi-process-read perf issue.\n+ * It follows GrpcDataReader protocol.\n+ * It takes strong assumption:\n+ *    Parallel read to the same file happens on the same time, so that read request is \n+ *    serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveSharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveSharedGrpcDataReader.class);\n+\n+  private final NaiveCachedGrpcDataReader mCachedDataReader;\n+  private final long mBlockId;\n+\n+  private long mChunkSize;\n+  private long mBlockSize;\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  private final static ReentrantReadWriteLock mBlockLocks = new ReentrantReadWriteLock();\n+  private final static Map<Long, NaiveCachedGrpcDataReader> mBlockReaders = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyMzI1Ng==", "bodyText": "can we move this outside of critical session?", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517723256", "createdAt": "2020-11-05T01:10:24Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveSharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.DataMessage;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that streams a region from gRPC data server.\n+ *\n+ * NaiveSharedGrpcDataReader is a POC to solve multi-process-read perf issue.\n+ * It follows GrpcDataReader protocol.\n+ * It takes strong assumption:\n+ *    Parallel read to the same file happens on the same time, so that read request is \n+ *    serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveSharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveSharedGrpcDataReader.class);\n+\n+  private final NaiveCachedGrpcDataReader mCachedDataReader;\n+  private final long mBlockId;\n+\n+  private long mChunkSize;\n+  private long mBlockSize;\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  private final static ReentrantReadWriteLock mBlockLocks = new ReentrantReadWriteLock();\n+  private final static Map<Long, NaiveCachedGrpcDataReader> mBlockReaders = new HashMap<>();\n+\n+  /**\n+   * Creates an instance of {@link NaiveSharedGrpcDataReader}.\n+   *\n+   * @param context the file system context\n+   * @param address the data server address\n+   * @param readRequest the read request\n+   */\n+  private NaiveSharedGrpcDataReader(FileSystemContext context, WorkerNetAddress address,\n+      ReadRequest readRequest) throws IOException {\n+    mChunkSize = readRequest.getChunkSize();\n+    mPosToRead = readRequest.getOffset();\n+    mBlockSize = readRequest.getLength() + readRequest.getOffset();\n+    try (LockResource r1 = new LockResource(mBlockLocks.writeLock())) {\n+      mBlockId = readRequest.getBlockId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyMzY2Ng==", "bodyText": "I actually think this part of looking up and returning cached reader should go to factory rather than constructor here", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517723666", "createdAt": "2020-11-05T01:11:51Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveSharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.DataMessage;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that streams a region from gRPC data server.\n+ *\n+ * NaiveSharedGrpcDataReader is a POC to solve multi-process-read perf issue.\n+ * It follows GrpcDataReader protocol.\n+ * It takes strong assumption:\n+ *    Parallel read to the same file happens on the same time, so that read request is \n+ *    serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveSharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveSharedGrpcDataReader.class);\n+\n+  private final NaiveCachedGrpcDataReader mCachedDataReader;\n+  private final long mBlockId;\n+\n+  private long mChunkSize;\n+  private long mBlockSize;\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  private final static ReentrantReadWriteLock mBlockLocks = new ReentrantReadWriteLock();\n+  private final static Map<Long, NaiveCachedGrpcDataReader> mBlockReaders = new HashMap<>();\n+\n+  /**\n+   * Creates an instance of {@link NaiveSharedGrpcDataReader}.\n+   *\n+   * @param context the file system context\n+   * @param address the data server address\n+   * @param readRequest the read request\n+   */\n+  private NaiveSharedGrpcDataReader(FileSystemContext context, WorkerNetAddress address,\n+      ReadRequest readRequest) throws IOException {\n+    mChunkSize = readRequest.getChunkSize();\n+    mPosToRead = readRequest.getOffset();\n+    mBlockSize = readRequest.getLength() + readRequest.getOffset();\n+    try (LockResource r1 = new LockResource(mBlockLocks.writeLock())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNDE3MQ==", "bodyText": "Considering Closer?", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517724171", "createdAt": "2020-11-05T01:13:44Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveCachedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.DataMessage;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import alluxio.resource.LockResource;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that streams a region from gRPC data server.\n+ *\n+ * Protocol:\n+ * 1. The client sends a read request (id, offset, length).\n+ * 2. Once the server receives the request, it streams chunks to the client. The streaming pauses\n+ *    if the server's buffer is full and resumes if the buffer is not full.\n+ * 3. The client reads chunks from the stream using an iterator.\n+ * 4. The client can cancel the read request at anytime. The cancel request is ignored by the\n+ *    server if everything has been sent to channel.\n+ * 5. To make it simple to handle errors, the channel is closed if any error occurs.\n+ */\n+@NotThreadSafe\n+public final class NaiveCachedGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveCachedGrpcDataReader.class);\n+\n+  private final int mReaderBufferSizeMessages;\n+  private final long mDataTimeoutMs;\n+  private final FileSystemContext mContext;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final ReadRequest mReadRequest;\n+  private final WorkerNetAddress mAddress;\n+\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+\n+  private final DataBuffer[] mDataBuffers; \n+  private int mBufferCount = 0;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+\n+  /**\n+   * Creates an instance of {@link NaiveCachedGrpcDataReader}.\n+   *\n+   * @param context the file system context\n+   * @param address the data server address\n+   * @param readRequest the read request\n+   */\n+  public NaiveCachedGrpcDataReader(FileSystemContext context, WorkerNetAddress address,\n+      ReadRequest readRequest) throws IOException {\n+    mContext = context;\n+    mAddress = address;\n+    mPosToRead = readRequest.getOffset();\n+    mReadRequest = readRequest;\n+    AlluxioConfiguration alluxioConf = context.getClusterConf();\n+    mReaderBufferSizeMessages = alluxioConf\n+        .getInt(PropertyKey.USER_STREAMING_READER_BUFFER_SIZE_MESSAGES);\n+    mDataTimeoutMs = alluxioConf.getMs(PropertyKey.USER_STREAMING_DATA_TIMEOUT);\n+    mMarshaller = new ReadResponseMarshaller();\n+    mClient = mContext.acquireBlockWorkerClient(address);\n+    long blockSize = readRequest.getLength() + readRequest.getOffset();\n+    long chunkSize = readRequest.getChunkSize();\n+    int buffCount = (int)(blockSize / chunkSize);\n+    if ((blockSize % chunkSize) != 0) {\n+      buffCount += 1;\n+    }\n+    mDataBuffers = new DataBuffer[buffCount];\n+\n+    try {\n+      String desc = \"GrpcDataReader\";\n+      if (LOG.isDebugEnabled()) { // More detailed description when debug logging is enabled\n+        desc = MoreObjects.toStringHelper(this)\n+          .add(\"request\", mReadRequest)\n+          .add(\"address\", address)\n+          .toString();\n+      }\n+      mStream = new GrpcBlockingStream<>(mClient.get()::readBlock, mReaderBufferSizeMessages,\n+          desc);\n+      mStream.send(mReadRequest, mDataTimeoutMs);\n+    } catch (Exception e) {\n+      mClient.close();\n+      throw e;\n+    }\n+  }\n+\n+  public DataBuffer readChunk(int index) throws IOException {\n+    if (index >= mDataBuffers.length) {\n+      return null;\n+    }\n+    \n+    try (LockResource r1 = new LockResource(mBufferLocks.writeLock())) {\n+      while (index >= mBufferCount) {\n+        DataBuffer buffer = readChunk();\n+        mDataBuffers[mBufferCount] = buffer;\n+        ++mBufferCount;\n+      }\n+    }\n+\n+    return mDataBuffers[index];\n+  }\n+\n+  private DataBuffer readChunk() throws IOException {\n+    Preconditions.checkState(!mClient.get().isShutdown(),\n+        \"Data reader is closed while reading data chunks.\");\n+    DataBuffer buffer = null;\n+    ReadResponse response = null;\n+    response = mStream.receive(mDataTimeoutMs);\n+    if (response != null) {\n+      Preconditions.checkState(response.hasChunk() && response.getChunk().hasData(),\n+          \"response should always contain chunk\");\n+\n+      ByteBuffer byteBuffer = response.getChunk().getData().asReadOnlyByteBuffer();\n+      buffer = new NioDataBuffer(byteBuffer, byteBuffer.remaining());\n+    } else {\n+      return null;\n+    }\n+    mPosToRead += buffer.readableBytes();\n+    try {\n+      mStream.send(mReadRequest.toBuilder().setOffsetReceived(mPosToRead).build());\n+    } catch (Exception e) {\n+      // nothing is done as the receipt is sent at best effort\n+      LOG.debug(\"Failed to send receipt of data to worker {} for request {}: {}.\", mAddress,\n+          mReadRequest, e.getMessage());\n+    }\n+    Preconditions.checkState(mPosToRead - mReadRequest.getOffset() <= mReadRequest.getLength());\n+    return buffer;\n+  }\n+\n+  public void close() throws IOException {\n+    try {\n+      if (mClient.get().isShutdown()) {\n+        return;\n+      }\n+      mStream.close();\n+      mStream.waitForComplete(mDataTimeoutMs);\n+    } finally {\n+      mMarshaller.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNjQ4MA==", "bodyText": "I think this is a redundant case. please check", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517726480", "createdAt": "2020-11-05T01:21:50Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "diffHunk": "@@ -337,8 +341,42 @@ public void seek(long pos) throws IOException {\n     }\n     if (pos < mPos) {\n       mEOF = false;\n+      if (mDataReader instanceof NaiveSharedGrpcDataReader) {\n+        NaiveSharedGrpcDataReader reader = (NaiveSharedGrpcDataReader)mDataReader;\n+        reader.seek(pos);\n+        if (mCurrentChunk != null) {\n+          mCurrentChunk.release();\n+          mCurrentChunk = null;\n+        }\n+      } else {\n+        closeDataReader();\n+      }\n+    } else if (pos < mLength) {\n+      // Try to read data already in queue\n+      long curPos = mPos;\n+      while (mCurrentChunk != null && curPos < pos) {\n+        long nextPos = curPos + mCurrentChunk.readableBytes();\n+        if (nextPos <= pos) {\n+          curPos = nextPos; \n+          mCurrentChunk.release();\n+          mCurrentChunk = mDataReader.readChunkNoWait();\n+        } else {\n+          // TODO introduce seek in DataBuffer\n+          int toRead = (int)(pos - curPos);\n+          final byte[] b = new byte[toRead];\n+          mCurrentChunk.readBytes(b, 0, toRead);\n+          curPos = pos;\n+        }\n+      }\n+\n+      if (curPos < pos) {\n+        // Not enough data in queue, close the data reader\n+        closeDataReader();\n+      }\n+    } else {\n+      closeDataReader();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNjY3MQ==", "bodyText": "how about naming this method : readChunkIfReady", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r517726671", "createdAt": "2020-11-05T01:22:35Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/DataReader.java", "diffHunk": "@@ -28,6 +28,13 @@\n    */\n   DataBuffer readChunk() throws IOException;\n \n+  /**\n+   * Try to read a chunk without waiting for data ready. \n+   *\n+   * @return the data buffer or null if EOF is reached or data is not ready.\n+   */\n+  DataBuffer readChunkNoWait() throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccfecf3af7bb034800ea4e112ea598ef886776dc", "author": {"user": {"login": "LuQQiu", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/ccfecf3af7bb034800ea4e112ea598ef886776dc", "committedDate": "2020-11-05T19:13:44Z", "message": "Fix the blockSize bug, move logics from constructor to factory and fix codestyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef197c31a6e860e03f7971b0e3a4a6c4968d8e1d", "author": {"user": {"login": "LuQQiu", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/ef197c31a6e860e03f7971b0e3a4a6c4968d8e1d", "committedDate": "2020-11-05T19:36:15Z", "message": "Change to closer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b913c5eaf7f3f9e4f3cb2248654a42abcae15968", "author": {"user": {"login": "LuQQiu", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/b913c5eaf7f3f9e4f3cb2248654a42abcae15968", "committedDate": "2020-11-05T22:08:09Z", "message": "Small fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0ODQ2MTcy", "url": "https://github.com/Alluxio/alluxio/pull/12453#pullrequestreview-524846172", "createdAt": "2020-11-06T04:16:25Z", "commit": {"oid": "b913c5eaf7f3f9e4f3cb2248654a42abcae15968"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNDoxNjoyNVrOHuflxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNTo0NzowMFrOHug6pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUxNDExNg==", "bodyText": "Tries to read a chunk if there is data ready. If chunk is not null, the caller needs to release it", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518514116", "createdAt": "2020-11-06T04:16:25Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/DataReader.java", "diffHunk": "@@ -28,6 +30,14 @@\n    */\n   DataBuffer readChunk() throws IOException;\n \n+  /**\n+   * Try to read a chunk if the data is ready.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b913c5eaf7f3f9e4f3cb2248654a42abcae15968"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUxNTM3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final DataBuffer[] mDataBuffers;\n          \n          \n            \n              @GuardedBy(\"mBlockLocks\")\n          \n          \n            \n              private final DataBuffer[] mDataBuffers;", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518515379", "createdAt": "2020-11-06T04:22:06Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveCachedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveCachedGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveCachedGrpcDataReader.class);\n+\n+  private final WorkerNetAddress mAddress;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final long mDataTimeoutMs;\n+  private final ReadRequest mReadRequest;\n+\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+  /**\n+   * Count the number of threads that are accessing the same block together.\n+   * When no thread is accessing this block, the cached data will be GCed.\n+   */\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+  private final Closer mCloser;\n+\n+  private volatile int mBufferCount = 0;\n+  private final DataBuffer[] mDataBuffers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b913c5eaf7f3f9e4f3cb2248654a42abcae15968"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUxNTY2Mw==", "bodyText": "any reason to use volatile int rather than AtomicInteger?", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518515663", "createdAt": "2020-11-06T04:23:26Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveCachedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveCachedGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveCachedGrpcDataReader.class);\n+\n+  private final WorkerNetAddress mAddress;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final long mDataTimeoutMs;\n+  private final ReadRequest mReadRequest;\n+\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+  /**\n+   * Count the number of threads that are accessing the same block together.\n+   * When no thread is accessing this block, the cached data will be GCed.\n+   */\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+  private final Closer mCloser;\n+\n+  private volatile int mBufferCount = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b913c5eaf7f3f9e4f3cb2248654a42abcae15968"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUxNjM2OA==", "bodyText": "any reason to have this registration here rather than in constructor or factory method?", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518516368", "createdAt": "2020-11-06T04:26:20Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveCachedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveCachedGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveCachedGrpcDataReader.class);\n+\n+  private final WorkerNetAddress mAddress;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final long mDataTimeoutMs;\n+  private final ReadRequest mReadRequest;\n+\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+  /**\n+   * Count the number of threads that are accessing the same block together.\n+   * When no thread is accessing this block, the cached data will be GCed.\n+   */\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+  private final Closer mCloser;\n+\n+  private volatile int mBufferCount = 0;\n+  private final DataBuffer[] mDataBuffers;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link NaiveCachedGrpcDataReader}.\n+   *\n+   * @param address the data server address\n+   * @param client the block worker client to read data from\n+   * @param closer the closer\n+   * @param dataBuffers the data buffers to cache block data in chunk\n+   * @param dataTimeoutMs the maximum time to wait for a data response\n+   * @param readRequest the read request\n+   * @param stream the underlying gRPC stream to read data\n+   */\n+  private NaiveCachedGrpcDataReader(WorkerNetAddress address,\n+      CloseableResource<BlockWorkerClient> client, Closer closer, DataBuffer[] dataBuffers,\n+      long dataTimeoutMs, ReadRequest readRequest,\n+      GrpcBlockingStream<ReadRequest, ReadResponse> stream) {\n+    mAddress = address;\n+    mClient = client;\n+    mCloser = closer;\n+    mDataBuffers = dataBuffers;\n+    mDataTimeoutMs = dataTimeoutMs;\n+    mMarshaller = new ReadResponseMarshaller();\n+    mPosToRead = readRequest.getOffset();\n+    mReadRequest = readRequest;\n+    mStream = stream;\n+  }\n+\n+  /**\n+   * Reads a specific chunk from the block.\n+   *\n+   * @param index the chunk index\n+   * @return the chunk data if exists\n+   */\n+  public DataBuffer readChunk(int index) throws IOException {\n+    if (index >= mDataBuffers.length) {\n+      return null;\n+    }\n+\n+    if (index >= mBufferCount) {\n+      try (LockResource r1 = new LockResource(mBufferLocks.writeLock())) {\n+        while (index >= mBufferCount) {\n+          DataBuffer buffer = readChunk();\n+          mDataBuffers[mBufferCount] = buffer;\n+          ++mBufferCount;\n+        }\n+      }\n+    }\n+\n+    return mDataBuffers[index];\n+  }\n+\n+  /**\n+   * Reads a chunk of data.\n+   *\n+   * @return a chunk of data\n+   */\n+  private DataBuffer readChunk() throws IOException {\n+    Preconditions.checkState(!mClient.get().isShutdown(),\n+        \"Data reader is closed while reading data chunks.\");\n+    DataBuffer buffer = null;\n+    ReadResponse response = null;\n+    response = mStream.receive(mDataTimeoutMs);\n+    if (response != null) {\n+      Preconditions.checkState(response.hasChunk() && response.getChunk().hasData(),\n+          \"response should always contain chunk\");\n+\n+      ByteBuffer byteBuffer = response.getChunk().getData().asReadOnlyByteBuffer();\n+      buffer = new NioDataBuffer(byteBuffer, byteBuffer.remaining());\n+    } else {\n+      return null;\n+    }\n+    mPosToRead += buffer.readableBytes();\n+    try {\n+      mStream.send(mReadRequest.toBuilder().setOffsetReceived(mPosToRead).build());\n+    } catch (Exception e) {\n+      // nothing is done as the receipt is sent at best effort\n+      LOG.debug(\"Failed to send receipt of data to worker {} for request {}: {}.\", mAddress,\n+          mReadRequest, e.getMessage());\n+    }\n+    Preconditions.checkState(mPosToRead - mReadRequest.getOffset() <= mReadRequest.getLength());\n+    return buffer;\n+  }\n+\n+  /**\n+   * Closes the {@link NaiveCachedGrpcDataReader}.\n+   */\n+  public void close() throws IOException {\n+    if (mClient.get().isShutdown()) {\n+      return;\n+    }\n+    mCloser.register(() -> {\n+      mStream.close();\n+      mStream.waitForComplete(mDataTimeoutMs);\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b913c5eaf7f3f9e4f3cb2248654a42abcae15968"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUxOTE0Mg==", "bodyText": "Nit: I would prefer to put the creation of closer and dataBuffers inside the constructor rather than in factory method here. It is easier to reason the ownership of these data structures in that way. In contrast, the creation of stream , client is not guaranteed to succeed with exception possibly thrown, thus why we should leave it in factory method and pass them to constructor as param on successful creation.\nAs long as the constructor is ensured to complete, we should be good.", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518519142", "createdAt": "2020-11-06T04:38:12Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveCachedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveCachedGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveCachedGrpcDataReader.class);\n+\n+  private final WorkerNetAddress mAddress;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final long mDataTimeoutMs;\n+  private final ReadRequest mReadRequest;\n+\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+  /**\n+   * Count the number of threads that are accessing the same block together.\n+   * When no thread is accessing this block, the cached data will be GCed.\n+   */\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+  private final Closer mCloser;\n+\n+  private volatile int mBufferCount = 0;\n+  private final DataBuffer[] mDataBuffers;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link NaiveCachedGrpcDataReader}.\n+   *\n+   * @param address the data server address\n+   * @param client the block worker client to read data from\n+   * @param closer the closer\n+   * @param dataBuffers the data buffers to cache block data in chunk\n+   * @param dataTimeoutMs the maximum time to wait for a data response\n+   * @param readRequest the read request\n+   * @param stream the underlying gRPC stream to read data\n+   */\n+  private NaiveCachedGrpcDataReader(WorkerNetAddress address,\n+      CloseableResource<BlockWorkerClient> client, Closer closer, DataBuffer[] dataBuffers,\n+      long dataTimeoutMs, ReadRequest readRequest,\n+      GrpcBlockingStream<ReadRequest, ReadResponse> stream) {\n+    mAddress = address;\n+    mClient = client;\n+    mCloser = closer;\n+    mDataBuffers = dataBuffers;\n+    mDataTimeoutMs = dataTimeoutMs;\n+    mMarshaller = new ReadResponseMarshaller();\n+    mPosToRead = readRequest.getOffset();\n+    mReadRequest = readRequest;\n+    mStream = stream;\n+  }\n+\n+  /**\n+   * Reads a specific chunk from the block.\n+   *\n+   * @param index the chunk index\n+   * @return the chunk data if exists\n+   */\n+  public DataBuffer readChunk(int index) throws IOException {\n+    if (index >= mDataBuffers.length) {\n+      return null;\n+    }\n+\n+    if (index >= mBufferCount) {\n+      try (LockResource r1 = new LockResource(mBufferLocks.writeLock())) {\n+        while (index >= mBufferCount) {\n+          DataBuffer buffer = readChunk();\n+          mDataBuffers[mBufferCount] = buffer;\n+          ++mBufferCount;\n+        }\n+      }\n+    }\n+\n+    return mDataBuffers[index];\n+  }\n+\n+  /**\n+   * Reads a chunk of data.\n+   *\n+   * @return a chunk of data\n+   */\n+  private DataBuffer readChunk() throws IOException {\n+    Preconditions.checkState(!mClient.get().isShutdown(),\n+        \"Data reader is closed while reading data chunks.\");\n+    DataBuffer buffer = null;\n+    ReadResponse response = null;\n+    response = mStream.receive(mDataTimeoutMs);\n+    if (response != null) {\n+      Preconditions.checkState(response.hasChunk() && response.getChunk().hasData(),\n+          \"response should always contain chunk\");\n+\n+      ByteBuffer byteBuffer = response.getChunk().getData().asReadOnlyByteBuffer();\n+      buffer = new NioDataBuffer(byteBuffer, byteBuffer.remaining());\n+    } else {\n+      return null;\n+    }\n+    mPosToRead += buffer.readableBytes();\n+    try {\n+      mStream.send(mReadRequest.toBuilder().setOffsetReceived(mPosToRead).build());\n+    } catch (Exception e) {\n+      // nothing is done as the receipt is sent at best effort\n+      LOG.debug(\"Failed to send receipt of data to worker {} for request {}: {}.\", mAddress,\n+          mReadRequest, e.getMessage());\n+    }\n+    Preconditions.checkState(mPosToRead - mReadRequest.getOffset() <= mReadRequest.getLength());\n+    return buffer;\n+  }\n+\n+  /**\n+   * Closes the {@link NaiveCachedGrpcDataReader}.\n+   */\n+  public void close() throws IOException {\n+    if (mClient.get().isShutdown()) {\n+      return;\n+    }\n+    mCloser.register(() -> {\n+      mStream.close();\n+      mStream.waitForComplete(mDataTimeoutMs);\n+    });\n+    mCloser.close();\n+  }\n+\n+  /**\n+   * Increases the reference count and return the current count.\n+   *\n+   * @return the current count\n+   */\n+  public int ref() {\n+    return mRefCount.incrementAndGet();\n+  }\n+\n+  /**\n+   * Decreases the reference count and return the current count.\n+   *\n+   * @return the current count\n+   */\n+  public int deRef() {\n+    return mRefCount.decrementAndGet();\n+  }\n+\n+  /**\n+   * @return the current count\n+   */\n+  public int getRefCount() {\n+    return mRefCount.get();\n+  }\n+\n+  /**\n+   * Factory class to create {@link NaiveCachedGrpcDataReader}s.\n+   */\n+  public static class Factory {\n+    private final FileSystemContext mContext;\n+    private final WorkerNetAddress mAddress;\n+    private final ReadRequest mReadRequest;\n+\n+    /**\n+     * Creates an instance of {@link NaiveCachedGrpcDataReader.Factory} for block reads.\n+     *\n+     * @param context the file system context\n+     * @param address the worker address\n+     * @param readRequest the read request\n+     */\n+    public Factory(FileSystemContext context, WorkerNetAddress address,\n+        ReadRequest readRequest) {\n+      mContext = context;\n+      mAddress = address;\n+      mReadRequest = readRequest;\n+    }\n+\n+    /**\n+     * @return a new {@link NaiveCachedGrpcDataReader}\n+     */\n+    public NaiveCachedGrpcDataReader create() throws IOException {\n+      AlluxioConfiguration alluxioConf = mContext.getClusterConf();\n+      int readerBufferSizeMessages = alluxioConf\n+          .getInt(PropertyKey.USER_STREAMING_READER_BUFFER_SIZE_MESSAGES);\n+      long dataTimeoutMs = alluxioConf.getMs(PropertyKey.USER_STREAMING_DATA_TIMEOUT);\n+\n+      Closer closer = Closer.create();\n+      CloseableResource<BlockWorkerClient> client = mContext.acquireBlockWorkerClient(mAddress);\n+      closer.register(client);\n+\n+      long blockSize = mReadRequest.getLength() + mReadRequest.getOffset();\n+      long chunkSize = mReadRequest.getChunkSize();\n+      int buffCount = (int) (blockSize / chunkSize);\n+      if ((blockSize % chunkSize) != 0) {\n+        buffCount += 1;\n+      }\n+      DataBuffer[] dataBuffers = new DataBuffer[buffCount];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b913c5eaf7f3f9e4f3cb2248654a42abcae15968"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyMDA4NA==", "bodyText": "I would call this BufferCachingGrpcDataReader\nmy personal preference: do not to use final when defining a class  unless you are very sure no one should extend it\nBetter to extend DataReader unless there is particular reason", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518520084", "createdAt": "2020-11-06T04:42:21Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveCachedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveCachedGrpcDataReader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b913c5eaf7f3f9e4f3cb2248654a42abcae15968"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyMDQxNw==", "bodyText": "nit: unnecessary empty line", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518520417", "createdAt": "2020-11-06T04:44:05Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveCachedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveCachedGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveCachedGrpcDataReader.class);\n+\n+  private final WorkerNetAddress mAddress;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final long mDataTimeoutMs;\n+  private final ReadRequest mReadRequest;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b913c5eaf7f3f9e4f3cb2248654a42abcae15968"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyMTY1NA==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518521654", "createdAt": "2020-11-06T04:49:22Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveSharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A shared gRPC data reader that cache blocks data for multi-thread accessing.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveSharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveSharedGrpcDataReader.class);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b913c5eaf7f3f9e4f3cb2248654a42abcae15968"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyOTczMA==", "bodyText": "new NaiveCachedGrpcDataReader.Factory(mContext, mAddress, cacheRequest).create(); has RPCs inside and thus can take a long time. It is not a good idea to have a global lock here around a RPC. In case network connection is not working properly and there is some timing out triggered, this global lock will pause all new block reads for entire client across user processes.\nhow about instead of single global lock, create an array of locks, and lock the one in lock array based on block Id:\ntry (LockResource lockResource = \n    new LockResource(BLOCK_LOCKS[blockId % BLOCK_LOCKS.length].writeLock())) {\n  reader = BLOCK_READERS.computeIfAbsent(blockId, \n      blockId -> new NaiveCachedGrpcDataReader(...));\n  reader.ref();\n}", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518529730", "createdAt": "2020-11-06T05:23:12Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveSharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A shared gRPC data reader that cache blocks data for multi-thread accessing.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveSharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveSharedGrpcDataReader.class);\n+\n+  private static final ReentrantReadWriteLock BLOCK_LOCK = new ReentrantReadWriteLock();\n+  /** A map from block id to the block's cached data reader. */\n+  @GuardedBy(\"mBlockLocks\")\n+  private static final Map<Long, NaiveCachedGrpcDataReader> BLOCK_READERS = new HashMap<>();\n+\n+  private final long mBlockId;\n+  private final NaiveCachedGrpcDataReader mCachedDataReader;\n+  private final long mChunkSize;\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link NaiveSharedGrpcDataReader}.\n+   *\n+   * @param readRequest the read request\n+   * @param reader the cached Grpc data reader for the given block\n+   */\n+  private NaiveSharedGrpcDataReader(ReadRequest readRequest, NaiveCachedGrpcDataReader reader) {\n+    mChunkSize = readRequest.getChunkSize();\n+    mPosToRead = readRequest.getOffset();\n+    mBlockId = readRequest.getBlockId();\n+    mCachedDataReader = reader;\n+  }\n+\n+  @Override\n+  public long pos() {\n+    return mPosToRead;\n+  }\n+\n+  /**\n+   * Seeks to a specific position.\n+   *\n+   * @param pos the position to seek to\n+   */\n+  public void seek(long pos) {\n+    mPosToRead = pos;\n+  }\n+\n+  @Override\n+  public DataBuffer readChunk() throws IOException {\n+    int index = (int) (mPosToRead / mChunkSize);\n+    DataBuffer chunk = mCachedDataReader.readChunk(index);\n+    if (chunk == null) {\n+      return null;\n+    }\n+    ByteBuffer bb = chunk.getReadOnlyByteBuffer();\n+    // Force to align to chunk size\n+    bb.position((int) (mPosToRead % mChunkSize));\n+    mPosToRead += mChunkSize - mPosToRead % mChunkSize;\n+\n+    return new NioDataBuffer(bb, bb.remaining());\n+  }\n+\n+  @Override\n+  public DataBuffer readChunkIfReady() throws IOException {\n+    // I'm naive, I'm reading chunks anyway\n+    return readChunk();\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    if (mCachedDataReader.deRef() == 0) {\n+      try (LockResource lockResource = new LockResource(BLOCK_LOCK.writeLock())) {\n+        if (mCachedDataReader.getRefCount() == 0) {\n+          mCachedDataReader.close();\n+          BLOCK_READERS.remove(mBlockId);\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Factory class to create {@link NaiveSharedGrpcDataReader}s.\n+   */\n+  public static class Factory implements DataReader.Factory {\n+    private final FileSystemContext mContext;\n+    private final WorkerNetAddress mAddress;\n+    private final ReadRequest mReadRequestPartial;\n+    private final long mBlockSize;\n+\n+    /**\n+     * Creates an instance of {@link NaiveSharedGrpcDataReader.Factory} for block reads.\n+     *\n+     * @param context the file system context\n+     * @param address the worker address\n+     * @param readRequestPartial the partial read request\n+     * @param blockSize the block size\n+     */\n+    public Factory(FileSystemContext context, WorkerNetAddress address,\n+        ReadRequest readRequestPartial, long blockSize) {\n+      mContext = context;\n+      mAddress = address;\n+      mReadRequestPartial = readRequestPartial;\n+      mBlockSize = blockSize;\n+    }\n+\n+    @Override\n+    public DataReader create(long offset, long len) throws IOException {\n+      long blockId = mReadRequestPartial.getBlockId();\n+      NaiveCachedGrpcDataReader reader;\n+      try (LockResource lockResource = new LockResource(BLOCK_LOCK.writeLock())) {\n+        reader = BLOCK_READERS.get(blockId);\n+        if (reader == null) {\n+          // I'm naive, I always read from 0 and read the whole block\n+          ReadRequest cacheRequest = mReadRequestPartial\n+              .toBuilder().setOffset(0).setLength(mBlockSize).build();\n+          reader = new NaiveCachedGrpcDataReader\n+              .Factory(mContext, mAddress, cacheRequest).create();\n+          BLOCK_READERS.put(blockId, reader);\n+        }\n+\n+        reader.ref();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b913c5eaf7f3f9e4f3cb2248654a42abcae15968"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzMzg3NA==", "bodyText": "Regarding lock , Check my next comment on lock striping first.  AgainmCachedDataReader.close() may take a long time, we should not put this inside a critical session by a global lock.\nAfter lock striping, we can remove reader from the BLOCK_READERS map if its refcount reaches 0, but calling  mCachedDataReader.close() outside the lock to further make sure operations inside the lock is minimal.", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518533874", "createdAt": "2020-11-06T05:39:25Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveSharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A shared gRPC data reader that cache blocks data for multi-thread accessing.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveSharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveSharedGrpcDataReader.class);\n+\n+  private static final ReentrantReadWriteLock BLOCK_LOCK = new ReentrantReadWriteLock();\n+  /** A map from block id to the block's cached data reader. */\n+  @GuardedBy(\"mBlockLocks\")\n+  private static final Map<Long, NaiveCachedGrpcDataReader> BLOCK_READERS = new HashMap<>();\n+\n+  private final long mBlockId;\n+  private final NaiveCachedGrpcDataReader mCachedDataReader;\n+  private final long mChunkSize;\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link NaiveSharedGrpcDataReader}.\n+   *\n+   * @param readRequest the read request\n+   * @param reader the cached Grpc data reader for the given block\n+   */\n+  private NaiveSharedGrpcDataReader(ReadRequest readRequest, NaiveCachedGrpcDataReader reader) {\n+    mChunkSize = readRequest.getChunkSize();\n+    mPosToRead = readRequest.getOffset();\n+    mBlockId = readRequest.getBlockId();\n+    mCachedDataReader = reader;\n+  }\n+\n+  @Override\n+  public long pos() {\n+    return mPosToRead;\n+  }\n+\n+  /**\n+   * Seeks to a specific position.\n+   *\n+   * @param pos the position to seek to\n+   */\n+  public void seek(long pos) {\n+    mPosToRead = pos;\n+  }\n+\n+  @Override\n+  public DataBuffer readChunk() throws IOException {\n+    int index = (int) (mPosToRead / mChunkSize);\n+    DataBuffer chunk = mCachedDataReader.readChunk(index);\n+    if (chunk == null) {\n+      return null;\n+    }\n+    ByteBuffer bb = chunk.getReadOnlyByteBuffer();\n+    // Force to align to chunk size\n+    bb.position((int) (mPosToRead % mChunkSize));\n+    mPosToRead += mChunkSize - mPosToRead % mChunkSize;\n+\n+    return new NioDataBuffer(bb, bb.remaining());\n+  }\n+\n+  @Override\n+  public DataBuffer readChunkIfReady() throws IOException {\n+    // I'm naive, I'm reading chunks anyway\n+    return readChunk();\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    if (mCachedDataReader.deRef() == 0) {\n+      try (LockResource lockResource = new LockResource(BLOCK_LOCK.writeLock())) {\n+        if (mCachedDataReader.getRefCount() == 0) {\n+          mCachedDataReader.close();\n+          BLOCK_READERS.remove(mBlockId);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b913c5eaf7f3f9e4f3cb2248654a42abcae15968"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzNDY0MQ==", "bodyText": "currently this is not specific to fuse. we can either make it only works on fuse (e.g., check process type), or rename the flag to make it usable in general.\nFUSE_SHARED_GRPC_DATA_READER_ENABLED", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518534641", "createdAt": "2020-11-06T05:42:23Z", "author": {"login": "apc999"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -5551,6 +5560,8 @@ private static String javadocLink(String fullyQualifiedClassname) {\n     public static final String FUSE_DEBUG_ENABLED = \"alluxio.fuse.debug.enabled\";\n     public static final String FUSE_FS_NAME = \"alluxio.fuse.fs.name\";\n     public static final String FUSE_JNIFUSE_ENABLED = \"alluxio.fuse.jnifuse.enabled\";\n+    public static final String FUSE_SHARED_GRPC_DATA_READER", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b913c5eaf7f3f9e4f3cb2248654a42abcae15968"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzNDk2Mw==", "bodyText": "I would simply call this class SharedGrpcDataReader", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518534963", "createdAt": "2020-11-06T05:43:42Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveSharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A shared gRPC data reader that cache blocks data for multi-thread accessing.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveSharedGrpcDataReader implements DataReader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b913c5eaf7f3f9e4f3cb2248654a42abcae15968"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzNTg0NA==", "bodyText": "can we also guard the newly added logic under flag FUSE_SHARED_GRPC_DATA_READER ?\nif (flag is off) {\n  if (pos < mPos) {\n    mEOF = false;\n  }\n  closeDataReader();\n  mPos = pos;\n  return;\n}\n// here starts the new logic", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518535844", "createdAt": "2020-11-06T05:47:00Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "diffHunk": "@@ -337,8 +343,39 @@ public void seek(long pos) throws IOException {\n     }\n     if (pos < mPos) {\n       mEOF = false;\n+      if (mDataReader instanceof NaiveSharedGrpcDataReader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b913c5eaf7f3f9e4f3cb2248654a42abcae15968"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852", "author": {"user": {"login": "LuQQiu", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852", "committedDate": "2020-11-06T19:56:10Z", "message": "Change to multi locks and remove close out of lock"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NTI4NTU3", "url": "https://github.com/Alluxio/alluxio/pull/12453#pullrequestreview-525528557", "createdAt": "2020-11-06T22:15:40Z", "commit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjoxNTo0MFrOHu_OGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMzozNDo1MFrOHvApJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAzMjM0Ng==", "bodyText": "@LuQQiu this else branch is still not guarded and will still be accessible even the flag is off, right?", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r519032346", "createdAt": "2020-11-06T22:15:40Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "diffHunk": "@@ -337,8 +343,39 @@ public void seek(long pos) throws IOException {\n     }\n     if (pos < mPos) {\n       mEOF = false;\n+      if (mContext.getClusterConf().getBoolean(PropertyKey.FUSE_SHARED_CACHING_READER_ENABLED)) {\n+        SharedGrpcDataReader reader = (SharedGrpcDataReader) mDataReader;\n+        reader.seek(pos);\n+        if (mCurrentChunk != null) {\n+          mCurrentChunk.release();\n+          mCurrentChunk = null;\n+        }\n+      } else {\n+        closeDataReader();\n+      }\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAzNDM1MA==", "bodyText": "nit: unnecessary empty lines at line 88 and 95. The code base should be compact for readability in general.", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r519034350", "createdAt": "2020-11-06T22:21:45Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BufferCachingGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ */\n+@NotThreadSafe\n+public class BufferCachingGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(BufferCachingGrpcDataReader.class);\n+\n+  private final WorkerNetAddress mAddress;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final long mDataTimeoutMs;\n+  private final ReadRequest mReadRequest;\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+  /**\n+   * Count the number of threads that are accessing the same block together.\n+   * When no thread is accessing this block, the cached data will be GCed.\n+   */\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+  private final Closer mCloser;\n+\n+  private AtomicInteger mBufferCount = new AtomicInteger(0);\n+  private final DataBuffer[] mDataBuffers;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link BufferCachingGrpcDataReader}.\n+   *\n+   * @param address the data server address\n+   * @param client the block worker client to read data from\n+   * @param dataTimeoutMs the maximum time to wait for a data response\n+   * @param readRequest the read request\n+   * @param stream the underlying gRPC stream to read data\n+   */\n+  private BufferCachingGrpcDataReader(WorkerNetAddress address,\n+      CloseableResource<BlockWorkerClient> client, long dataTimeoutMs,\n+      ReadRequest readRequest, GrpcBlockingStream<ReadRequest, ReadResponse> stream) {\n+    mAddress = address;\n+    mClient = client;\n+    mDataTimeoutMs = dataTimeoutMs;\n+    mMarshaller = new ReadResponseMarshaller();\n+    mPosToRead = readRequest.getOffset();\n+    mReadRequest = readRequest;\n+    mStream = stream;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAzNTYyMg==", "bodyText": "@Nullable", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r519035622", "createdAt": "2020-11-06T22:25:25Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BufferCachingGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ */\n+@NotThreadSafe\n+public class BufferCachingGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(BufferCachingGrpcDataReader.class);\n+\n+  private final WorkerNetAddress mAddress;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final long mDataTimeoutMs;\n+  private final ReadRequest mReadRequest;\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+  /**\n+   * Count the number of threads that are accessing the same block together.\n+   * When no thread is accessing this block, the cached data will be GCed.\n+   */\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+  private final Closer mCloser;\n+\n+  private AtomicInteger mBufferCount = new AtomicInteger(0);\n+  private final DataBuffer[] mDataBuffers;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link BufferCachingGrpcDataReader}.\n+   *\n+   * @param address the data server address\n+   * @param client the block worker client to read data from\n+   * @param dataTimeoutMs the maximum time to wait for a data response\n+   * @param readRequest the read request\n+   * @param stream the underlying gRPC stream to read data\n+   */\n+  private BufferCachingGrpcDataReader(WorkerNetAddress address,\n+      CloseableResource<BlockWorkerClient> client, long dataTimeoutMs,\n+      ReadRequest readRequest, GrpcBlockingStream<ReadRequest, ReadResponse> stream) {\n+    mAddress = address;\n+    mClient = client;\n+    mDataTimeoutMs = dataTimeoutMs;\n+    mMarshaller = new ReadResponseMarshaller();\n+    mPosToRead = readRequest.getOffset();\n+    mReadRequest = readRequest;\n+    mStream = stream;\n+\n+    mCloser = Closer.create();\n+    mCloser.register(mClient);\n+    mCloser.register(() -> {\n+      mStream.close();\n+      mStream.waitForComplete(mDataTimeoutMs);\n+    });\n+\n+    long blockSize = mReadRequest.getLength() + mReadRequest.getOffset();\n+    long chunkSize = mReadRequest.getChunkSize();\n+    int buffCount = (int) (blockSize / chunkSize);\n+    if ((blockSize % chunkSize) != 0) {\n+      buffCount += 1;\n+    }\n+    mDataBuffers = new DataBuffer[buffCount];\n+  }\n+\n+  /**\n+   * Reads a specific chunk from the block.\n+   *\n+   * @param index the chunk index\n+   * @return the chunk data if exists\n+   */\n+  public DataBuffer readChunk(int index) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAzODE5MA==", "bodyText": "a few questions on reclaiming resources:\n\nif mClient is closed, do we still need to close mStream, and vise versa\nwhat should be the order to close mStream and mClient?", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r519038190", "createdAt": "2020-11-06T22:33:19Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BufferCachingGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ */\n+@NotThreadSafe\n+public class BufferCachingGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(BufferCachingGrpcDataReader.class);\n+\n+  private final WorkerNetAddress mAddress;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final long mDataTimeoutMs;\n+  private final ReadRequest mReadRequest;\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+  /**\n+   * Count the number of threads that are accessing the same block together.\n+   * When no thread is accessing this block, the cached data will be GCed.\n+   */\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+  private final Closer mCloser;\n+\n+  private AtomicInteger mBufferCount = new AtomicInteger(0);\n+  private final DataBuffer[] mDataBuffers;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link BufferCachingGrpcDataReader}.\n+   *\n+   * @param address the data server address\n+   * @param client the block worker client to read data from\n+   * @param dataTimeoutMs the maximum time to wait for a data response\n+   * @param readRequest the read request\n+   * @param stream the underlying gRPC stream to read data\n+   */\n+  private BufferCachingGrpcDataReader(WorkerNetAddress address,\n+      CloseableResource<BlockWorkerClient> client, long dataTimeoutMs,\n+      ReadRequest readRequest, GrpcBlockingStream<ReadRequest, ReadResponse> stream) {\n+    mAddress = address;\n+    mClient = client;\n+    mDataTimeoutMs = dataTimeoutMs;\n+    mMarshaller = new ReadResponseMarshaller();\n+    mPosToRead = readRequest.getOffset();\n+    mReadRequest = readRequest;\n+    mStream = stream;\n+\n+    mCloser = Closer.create();\n+    mCloser.register(mClient);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAzODk1MQ==", "bodyText": "marking @Nullablewhenever it is possible. IDE will help a lot to warn null check in invokers.", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r519038951", "createdAt": "2020-11-06T22:35:31Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BufferCachingGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ */\n+@NotThreadSafe\n+public class BufferCachingGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(BufferCachingGrpcDataReader.class);\n+\n+  private final WorkerNetAddress mAddress;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final long mDataTimeoutMs;\n+  private final ReadRequest mReadRequest;\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+  /**\n+   * Count the number of threads that are accessing the same block together.\n+   * When no thread is accessing this block, the cached data will be GCed.\n+   */\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+  private final Closer mCloser;\n+\n+  private AtomicInteger mBufferCount = new AtomicInteger(0);\n+  private final DataBuffer[] mDataBuffers;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link BufferCachingGrpcDataReader}.\n+   *\n+   * @param address the data server address\n+   * @param client the block worker client to read data from\n+   * @param dataTimeoutMs the maximum time to wait for a data response\n+   * @param readRequest the read request\n+   * @param stream the underlying gRPC stream to read data\n+   */\n+  private BufferCachingGrpcDataReader(WorkerNetAddress address,\n+      CloseableResource<BlockWorkerClient> client, long dataTimeoutMs,\n+      ReadRequest readRequest, GrpcBlockingStream<ReadRequest, ReadResponse> stream) {\n+    mAddress = address;\n+    mClient = client;\n+    mDataTimeoutMs = dataTimeoutMs;\n+    mMarshaller = new ReadResponseMarshaller();\n+    mPosToRead = readRequest.getOffset();\n+    mReadRequest = readRequest;\n+    mStream = stream;\n+\n+    mCloser = Closer.create();\n+    mCloser.register(mClient);\n+    mCloser.register(() -> {\n+      mStream.close();\n+      mStream.waitForComplete(mDataTimeoutMs);\n+    });\n+\n+    long blockSize = mReadRequest.getLength() + mReadRequest.getOffset();\n+    long chunkSize = mReadRequest.getChunkSize();\n+    int buffCount = (int) (blockSize / chunkSize);\n+    if ((blockSize % chunkSize) != 0) {\n+      buffCount += 1;\n+    }\n+    mDataBuffers = new DataBuffer[buffCount];\n+  }\n+\n+  /**\n+   * Reads a specific chunk from the block.\n+   *\n+   * @param index the chunk index\n+   * @return the chunk data if exists\n+   */\n+  public DataBuffer readChunk(int index) throws IOException {\n+    if (index >= mDataBuffers.length) {\n+      return null;\n+    }\n+\n+    if (index >= mBufferCount.get()) {\n+      try (LockResource r1 = new LockResource(mBufferLocks.writeLock())) {\n+        while (index >= mBufferCount.get()) {\n+          DataBuffer buffer = readChunk();\n+          mDataBuffers[mBufferCount.get()] = buffer;\n+          mBufferCount.incrementAndGet();\n+        }\n+      }\n+    }\n+\n+    return mDataBuffers[index];\n+  }\n+\n+  /**\n+   * Reads a chunk of data.\n+   *\n+   * @return a chunk of data\n+   */\n+  private DataBuffer readChunk() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAzOTUxNw==", "bodyText": "The following code equivalent but slightly more readable.\nTypically return on failure/error cases earlier is easier to read and reason the control flow\nif (response == null) {\n  return null;\n}\nPreconditions.checkState(response.hasChunk() && response.getChunk().hasData(),\n      \"response should always contain chunk\");\nByteBuffer byteBuffer = response.getChunk().getData().asReadOnlyByteBuffer();\nbuffer = new NioDataBuffer(byteBuffer, byteBuffer.remaining());", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r519039517", "createdAt": "2020-11-06T22:37:10Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BufferCachingGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ */\n+@NotThreadSafe\n+public class BufferCachingGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(BufferCachingGrpcDataReader.class);\n+\n+  private final WorkerNetAddress mAddress;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final long mDataTimeoutMs;\n+  private final ReadRequest mReadRequest;\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+  /**\n+   * Count the number of threads that are accessing the same block together.\n+   * When no thread is accessing this block, the cached data will be GCed.\n+   */\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+  private final Closer mCloser;\n+\n+  private AtomicInteger mBufferCount = new AtomicInteger(0);\n+  private final DataBuffer[] mDataBuffers;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link BufferCachingGrpcDataReader}.\n+   *\n+   * @param address the data server address\n+   * @param client the block worker client to read data from\n+   * @param dataTimeoutMs the maximum time to wait for a data response\n+   * @param readRequest the read request\n+   * @param stream the underlying gRPC stream to read data\n+   */\n+  private BufferCachingGrpcDataReader(WorkerNetAddress address,\n+      CloseableResource<BlockWorkerClient> client, long dataTimeoutMs,\n+      ReadRequest readRequest, GrpcBlockingStream<ReadRequest, ReadResponse> stream) {\n+    mAddress = address;\n+    mClient = client;\n+    mDataTimeoutMs = dataTimeoutMs;\n+    mMarshaller = new ReadResponseMarshaller();\n+    mPosToRead = readRequest.getOffset();\n+    mReadRequest = readRequest;\n+    mStream = stream;\n+\n+    mCloser = Closer.create();\n+    mCloser.register(mClient);\n+    mCloser.register(() -> {\n+      mStream.close();\n+      mStream.waitForComplete(mDataTimeoutMs);\n+    });\n+\n+    long blockSize = mReadRequest.getLength() + mReadRequest.getOffset();\n+    long chunkSize = mReadRequest.getChunkSize();\n+    int buffCount = (int) (blockSize / chunkSize);\n+    if ((blockSize % chunkSize) != 0) {\n+      buffCount += 1;\n+    }\n+    mDataBuffers = new DataBuffer[buffCount];\n+  }\n+\n+  /**\n+   * Reads a specific chunk from the block.\n+   *\n+   * @param index the chunk index\n+   * @return the chunk data if exists\n+   */\n+  public DataBuffer readChunk(int index) throws IOException {\n+    if (index >= mDataBuffers.length) {\n+      return null;\n+    }\n+\n+    if (index >= mBufferCount.get()) {\n+      try (LockResource r1 = new LockResource(mBufferLocks.writeLock())) {\n+        while (index >= mBufferCount.get()) {\n+          DataBuffer buffer = readChunk();\n+          mDataBuffers[mBufferCount.get()] = buffer;\n+          mBufferCount.incrementAndGet();\n+        }\n+      }\n+    }\n+\n+    return mDataBuffers[index];\n+  }\n+\n+  /**\n+   * Reads a chunk of data.\n+   *\n+   * @return a chunk of data\n+   */\n+  private DataBuffer readChunk() throws IOException {\n+    Preconditions.checkState(!mClient.get().isShutdown(),\n+        \"Data reader is closed while reading data chunks.\");\n+    DataBuffer buffer = null;\n+    ReadResponse response = null;\n+    response = mStream.receive(mDataTimeoutMs);\n+    if (response != null) {\n+      Preconditions.checkState(response.hasChunk() && response.getChunk().hasData(),\n+          \"response should always contain chunk\");\n+\n+      ByteBuffer byteBuffer = response.getChunk().getData().asReadOnlyByteBuffer();\n+      buffer = new NioDataBuffer(byteBuffer, byteBuffer.remaining());\n+    } else {\n+      return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0MDc1NA==", "bodyText": "return refcount incremented? kinda confusing to say the current count.", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r519040754", "createdAt": "2020-11-06T22:40:53Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BufferCachingGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ */\n+@NotThreadSafe\n+public class BufferCachingGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(BufferCachingGrpcDataReader.class);\n+\n+  private final WorkerNetAddress mAddress;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final long mDataTimeoutMs;\n+  private final ReadRequest mReadRequest;\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+  /**\n+   * Count the number of threads that are accessing the same block together.\n+   * When no thread is accessing this block, the cached data will be GCed.\n+   */\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+  private final Closer mCloser;\n+\n+  private AtomicInteger mBufferCount = new AtomicInteger(0);\n+  private final DataBuffer[] mDataBuffers;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link BufferCachingGrpcDataReader}.\n+   *\n+   * @param address the data server address\n+   * @param client the block worker client to read data from\n+   * @param dataTimeoutMs the maximum time to wait for a data response\n+   * @param readRequest the read request\n+   * @param stream the underlying gRPC stream to read data\n+   */\n+  private BufferCachingGrpcDataReader(WorkerNetAddress address,\n+      CloseableResource<BlockWorkerClient> client, long dataTimeoutMs,\n+      ReadRequest readRequest, GrpcBlockingStream<ReadRequest, ReadResponse> stream) {\n+    mAddress = address;\n+    mClient = client;\n+    mDataTimeoutMs = dataTimeoutMs;\n+    mMarshaller = new ReadResponseMarshaller();\n+    mPosToRead = readRequest.getOffset();\n+    mReadRequest = readRequest;\n+    mStream = stream;\n+\n+    mCloser = Closer.create();\n+    mCloser.register(mClient);\n+    mCloser.register(() -> {\n+      mStream.close();\n+      mStream.waitForComplete(mDataTimeoutMs);\n+    });\n+\n+    long blockSize = mReadRequest.getLength() + mReadRequest.getOffset();\n+    long chunkSize = mReadRequest.getChunkSize();\n+    int buffCount = (int) (blockSize / chunkSize);\n+    if ((blockSize % chunkSize) != 0) {\n+      buffCount += 1;\n+    }\n+    mDataBuffers = new DataBuffer[buffCount];\n+  }\n+\n+  /**\n+   * Reads a specific chunk from the block.\n+   *\n+   * @param index the chunk index\n+   * @return the chunk data if exists\n+   */\n+  public DataBuffer readChunk(int index) throws IOException {\n+    if (index >= mDataBuffers.length) {\n+      return null;\n+    }\n+\n+    if (index >= mBufferCount.get()) {\n+      try (LockResource r1 = new LockResource(mBufferLocks.writeLock())) {\n+        while (index >= mBufferCount.get()) {\n+          DataBuffer buffer = readChunk();\n+          mDataBuffers[mBufferCount.get()] = buffer;\n+          mBufferCount.incrementAndGet();\n+        }\n+      }\n+    }\n+\n+    return mDataBuffers[index];\n+  }\n+\n+  /**\n+   * Reads a chunk of data.\n+   *\n+   * @return a chunk of data\n+   */\n+  private DataBuffer readChunk() throws IOException {\n+    Preconditions.checkState(!mClient.get().isShutdown(),\n+        \"Data reader is closed while reading data chunks.\");\n+    DataBuffer buffer = null;\n+    ReadResponse response = null;\n+    response = mStream.receive(mDataTimeoutMs);\n+    if (response != null) {\n+      Preconditions.checkState(response.hasChunk() && response.getChunk().hasData(),\n+          \"response should always contain chunk\");\n+\n+      ByteBuffer byteBuffer = response.getChunk().getData().asReadOnlyByteBuffer();\n+      buffer = new NioDataBuffer(byteBuffer, byteBuffer.remaining());\n+    } else {\n+      return null;\n+    }\n+    mPosToRead += buffer.readableBytes();\n+    try {\n+      mStream.send(mReadRequest.toBuilder().setOffsetReceived(mPosToRead).build());\n+    } catch (Exception e) {\n+      // nothing is done as the receipt is sent at best effort\n+      LOG.debug(\"Failed to send receipt of data to worker {} for request {}: {}.\", mAddress,\n+          mReadRequest, e.getMessage());\n+    }\n+    Preconditions.checkState(mPosToRead - mReadRequest.getOffset() <= mReadRequest.getLength());\n+    return buffer;\n+  }\n+\n+  /**\n+   * Closes the {@link BufferCachingGrpcDataReader}.\n+   */\n+  public void close() throws IOException {\n+    if (mClient.get().isShutdown()) {\n+      return;\n+    }\n+    mCloser.close();\n+  }\n+\n+  /**\n+   * Increases the reference count and return the current count.\n+   *\n+   * @return the current count", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0MTEzNA==", "bodyText": "final.\nmark member variables final whenever possible.", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r519041134", "createdAt": "2020-11-06T22:41:58Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BufferCachingGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ */\n+@NotThreadSafe\n+public class BufferCachingGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(BufferCachingGrpcDataReader.class);\n+\n+  private final WorkerNetAddress mAddress;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final long mDataTimeoutMs;\n+  private final ReadRequest mReadRequest;\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+  /**\n+   * Count the number of threads that are accessing the same block together.\n+   * When no thread is accessing this block, the cached data will be GCed.\n+   */\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+  private final Closer mCloser;\n+\n+  private AtomicInteger mBufferCount = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1MDMyMQ==", "bodyText": "do we need to close stream here too?", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r519050321", "createdAt": "2020-11-06T23:13:55Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BufferCachingGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ */\n+@NotThreadSafe\n+public class BufferCachingGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(BufferCachingGrpcDataReader.class);\n+\n+  private final WorkerNetAddress mAddress;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final long mDataTimeoutMs;\n+  private final ReadRequest mReadRequest;\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+  /**\n+   * Count the number of threads that are accessing the same block together.\n+   * When no thread is accessing this block, the cached data will be GCed.\n+   */\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+  private final Closer mCloser;\n+\n+  private AtomicInteger mBufferCount = new AtomicInteger(0);\n+  private final DataBuffer[] mDataBuffers;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link BufferCachingGrpcDataReader}.\n+   *\n+   * @param address the data server address\n+   * @param client the block worker client to read data from\n+   * @param dataTimeoutMs the maximum time to wait for a data response\n+   * @param readRequest the read request\n+   * @param stream the underlying gRPC stream to read data\n+   */\n+  private BufferCachingGrpcDataReader(WorkerNetAddress address,\n+      CloseableResource<BlockWorkerClient> client, long dataTimeoutMs,\n+      ReadRequest readRequest, GrpcBlockingStream<ReadRequest, ReadResponse> stream) {\n+    mAddress = address;\n+    mClient = client;\n+    mDataTimeoutMs = dataTimeoutMs;\n+    mMarshaller = new ReadResponseMarshaller();\n+    mPosToRead = readRequest.getOffset();\n+    mReadRequest = readRequest;\n+    mStream = stream;\n+\n+    mCloser = Closer.create();\n+    mCloser.register(mClient);\n+    mCloser.register(() -> {\n+      mStream.close();\n+      mStream.waitForComplete(mDataTimeoutMs);\n+    });\n+\n+    long blockSize = mReadRequest.getLength() + mReadRequest.getOffset();\n+    long chunkSize = mReadRequest.getChunkSize();\n+    int buffCount = (int) (blockSize / chunkSize);\n+    if ((blockSize % chunkSize) != 0) {\n+      buffCount += 1;\n+    }\n+    mDataBuffers = new DataBuffer[buffCount];\n+  }\n+\n+  /**\n+   * Reads a specific chunk from the block.\n+   *\n+   * @param index the chunk index\n+   * @return the chunk data if exists\n+   */\n+  public DataBuffer readChunk(int index) throws IOException {\n+    if (index >= mDataBuffers.length) {\n+      return null;\n+    }\n+\n+    if (index >= mBufferCount.get()) {\n+      try (LockResource r1 = new LockResource(mBufferLocks.writeLock())) {\n+        while (index >= mBufferCount.get()) {\n+          DataBuffer buffer = readChunk();\n+          mDataBuffers[mBufferCount.get()] = buffer;\n+          mBufferCount.incrementAndGet();\n+        }\n+      }\n+    }\n+\n+    return mDataBuffers[index];\n+  }\n+\n+  /**\n+   * Reads a chunk of data.\n+   *\n+   * @return a chunk of data\n+   */\n+  private DataBuffer readChunk() throws IOException {\n+    Preconditions.checkState(!mClient.get().isShutdown(),\n+        \"Data reader is closed while reading data chunks.\");\n+    DataBuffer buffer = null;\n+    ReadResponse response = null;\n+    response = mStream.receive(mDataTimeoutMs);\n+    if (response != null) {\n+      Preconditions.checkState(response.hasChunk() && response.getChunk().hasData(),\n+          \"response should always contain chunk\");\n+\n+      ByteBuffer byteBuffer = response.getChunk().getData().asReadOnlyByteBuffer();\n+      buffer = new NioDataBuffer(byteBuffer, byteBuffer.remaining());\n+    } else {\n+      return null;\n+    }\n+    mPosToRead += buffer.readableBytes();\n+    try {\n+      mStream.send(mReadRequest.toBuilder().setOffsetReceived(mPosToRead).build());\n+    } catch (Exception e) {\n+      // nothing is done as the receipt is sent at best effort\n+      LOG.debug(\"Failed to send receipt of data to worker {} for request {}: {}.\", mAddress,\n+          mReadRequest, e.getMessage());\n+    }\n+    Preconditions.checkState(mPosToRead - mReadRequest.getOffset() <= mReadRequest.getLength());\n+    return buffer;\n+  }\n+\n+  /**\n+   * Closes the {@link BufferCachingGrpcDataReader}.\n+   */\n+  public void close() throws IOException {\n+    if (mClient.get().isShutdown()) {\n+      return;\n+    }\n+    mCloser.close();\n+  }\n+\n+  /**\n+   * Increases the reference count and return the current count.\n+   *\n+   * @return the current count\n+   */\n+  public int ref() {\n+    return mRefCount.incrementAndGet();\n+  }\n+\n+  /**\n+   * Decreases the reference count and return the current count.\n+   *\n+   * @return the current count\n+   */\n+  public int deRef() {\n+    return mRefCount.decrementAndGet();\n+  }\n+\n+  /**\n+   * @return the current count\n+   */\n+  public int getRefCount() {\n+    return mRefCount.get();\n+  }\n+\n+  /**\n+   * Factory class to create {@link BufferCachingGrpcDataReader}s.\n+   */\n+  public static class Factory {\n+    private final FileSystemContext mContext;\n+    private final WorkerNetAddress mAddress;\n+    private final ReadRequest mReadRequest;\n+\n+    /**\n+     * Creates an instance of {@link BufferCachingGrpcDataReader.Factory} for block reads.\n+     *\n+     * @param context the file system context\n+     * @param address the worker address\n+     * @param readRequest the read request\n+     */\n+    public Factory(FileSystemContext context, WorkerNetAddress address,\n+        ReadRequest readRequest) {\n+      mContext = context;\n+      mAddress = address;\n+      mReadRequest = readRequest;\n+    }\n+\n+    /**\n+     * @return a new {@link BufferCachingGrpcDataReader}\n+     */\n+    public BufferCachingGrpcDataReader create() throws IOException {\n+      AlluxioConfiguration alluxioConf = mContext.getClusterConf();\n+      int readerBufferSizeMessages = alluxioConf\n+          .getInt(PropertyKey.USER_STREAMING_READER_BUFFER_SIZE_MESSAGES);\n+      long dataTimeoutMs = alluxioConf.getMs(PropertyKey.USER_STREAMING_DATA_TIMEOUT);\n+\n+      CloseableResource<BlockWorkerClient> client = mContext.acquireBlockWorkerClient(mAddress);\n+\n+      GrpcBlockingStream<ReadRequest, ReadResponse> stream;\n+      try {\n+        String desc = \"BufferCachingGrpcDataReader\";\n+        if (LOG.isDebugEnabled()) { // More detailed description when debug logging is enabled\n+          desc = MoreObjects.toStringHelper(this)\n+              .add(\"request\", mReadRequest)\n+              .add(\"address\", mAddress)\n+              .toString();\n+        }\n+        // Stream here cannot be GrpcDataMessagingBlockingStream\n+        // DataBuffer.getReadOnlyByteBuffer is used to clone a copy in SharedDataReader.readChunk.\n+        // getReadOnlyByteBuffer is not implemented in DataBuffer\n+        // returned from GrpcDataMessagingBlockingStream.\n+        stream = new GrpcBlockingStream<>(client.get()::readBlock, readerBufferSizeMessages,\n+            desc);\n+        stream.send(mReadRequest, dataTimeoutMs);\n+      } catch (Exception e) {\n+        client.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1MTM5OA==", "bodyText": "I don't think we need another flag FUSE_SHARED_CACHING_READER_LOCKS on this.\nPicking a constant number like 32 is good enough to ensure ~32 concurrent readers.\nIn general, we should be very conservative in adding new configuration flags.\nUnless we're very sure users will tune it.", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r519051398", "createdAt": "2020-11-06T23:18:00Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/SharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.LockResource;\n+import alluxio.util.ConfigurationUtils;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A shared gRPC data reader that cache blocks data for multi-thread accessing.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public class SharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(SharedGrpcDataReader.class);\n+  private static final ReentrantReadWriteLock[] BLOCK_LOCKS;\n+  /** A map from block id to the block's cached data reader. */\n+  @GuardedBy(\"BLOCK_LOCKS\")\n+  private static final ConcurrentHashMap<Long, BufferCachingGrpcDataReader> BLOCK_READERS\n+      = new ConcurrentHashMap<>();\n+\n+  static {\n+    AlluxioConfiguration conf = new InstancedConfiguration(ConfigurationUtils.defaults());\n+    int lockNum = conf.getInt(PropertyKey.FUSE_SHARED_CACHING_READER_LOCKS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1MjI2NA==", "bodyText": "let's make a static util method to return the corresponding lock in the lock array based on block Id.\ne.g.,\nprivate static ReentrantReadWriteLock getBlockLock(long blockId) {\n  return BLOCK_LOCKS[(int) (blockId % BLOCK_LOCKS.length)]\n}\n\nThen in both close and create, let's all use the util method rather than hardcode the same logic twice.\nIn case we change the logic in the future, we only need to go one place", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r519052264", "createdAt": "2020-11-06T23:21:31Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/SharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.LockResource;\n+import alluxio.util.ConfigurationUtils;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A shared gRPC data reader that cache blocks data for multi-thread accessing.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public class SharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(SharedGrpcDataReader.class);\n+  private static final ReentrantReadWriteLock[] BLOCK_LOCKS;\n+  /** A map from block id to the block's cached data reader. */\n+  @GuardedBy(\"BLOCK_LOCKS\")\n+  private static final ConcurrentHashMap<Long, BufferCachingGrpcDataReader> BLOCK_READERS\n+      = new ConcurrentHashMap<>();\n+\n+  static {\n+    AlluxioConfiguration conf = new InstancedConfiguration(ConfigurationUtils.defaults());\n+    int lockNum = conf.getInt(PropertyKey.FUSE_SHARED_CACHING_READER_LOCKS);\n+    BLOCK_LOCKS = new ReentrantReadWriteLock[lockNum];\n+    for (int i = 0; i < lockNum; i++) {\n+      BLOCK_LOCKS[i] = new ReentrantReadWriteLock();\n+    }\n+  }\n+\n+  private final long mBlockId;\n+  private final BufferCachingGrpcDataReader mCachedDataReader;\n+  private final long mChunkSize;\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link SharedGrpcDataReader}.\n+   *\n+   * @param readRequest the read request\n+   * @param reader the cached Grpc data reader for the given block\n+   */\n+  private SharedGrpcDataReader(ReadRequest readRequest, BufferCachingGrpcDataReader reader) {\n+    mChunkSize = readRequest.getChunkSize();\n+    mPosToRead = readRequest.getOffset();\n+    mBlockId = readRequest.getBlockId();\n+    mCachedDataReader = reader;\n+  }\n+\n+  @Override\n+  public long pos() {\n+    return mPosToRead;\n+  }\n+\n+  /**\n+   * Seeks to a specific position.\n+   *\n+   * @param pos the position to seek to\n+   */\n+  public void seek(long pos) {\n+    mPosToRead = pos;\n+  }\n+\n+  @Override\n+  public DataBuffer readChunk() throws IOException {\n+    int index = (int) (mPosToRead / mChunkSize);\n+    DataBuffer chunk = mCachedDataReader.readChunk(index);\n+    if (chunk == null) {\n+      return null;\n+    }\n+    ByteBuffer bb = chunk.getReadOnlyByteBuffer();\n+    // Force to align to chunk size\n+    bb.position((int) (mPosToRead % mChunkSize));\n+    mPosToRead += mChunkSize - mPosToRead % mChunkSize;\n+\n+    return new NioDataBuffer(bb, bb.remaining());\n+  }\n+\n+  @Override\n+  public DataBuffer readChunkIfReady() throws IOException {\n+    // I'm naive, I'm reading chunks anyway\n+    return readChunk();\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    if (mCachedDataReader.deRef() == 0) {\n+      try (LockResource lockResource = new LockResource(\n+          BLOCK_LOCKS[(int) (mBlockId % BLOCK_LOCKS.length)].writeLock())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1NTY1Mg==", "bodyText": "readability suggestion:\nif (mCachedDataReader.deRef() > 0) {\n  return;\n}\n...", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r519055652", "createdAt": "2020-11-06T23:34:50Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/SharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.LockResource;\n+import alluxio.util.ConfigurationUtils;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A shared gRPC data reader that cache blocks data for multi-thread accessing.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public class SharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(SharedGrpcDataReader.class);\n+  private static final ReentrantReadWriteLock[] BLOCK_LOCKS;\n+  /** A map from block id to the block's cached data reader. */\n+  @GuardedBy(\"BLOCK_LOCKS\")\n+  private static final ConcurrentHashMap<Long, BufferCachingGrpcDataReader> BLOCK_READERS\n+      = new ConcurrentHashMap<>();\n+\n+  static {\n+    AlluxioConfiguration conf = new InstancedConfiguration(ConfigurationUtils.defaults());\n+    int lockNum = conf.getInt(PropertyKey.FUSE_SHARED_CACHING_READER_LOCKS);\n+    BLOCK_LOCKS = new ReentrantReadWriteLock[lockNum];\n+    for (int i = 0; i < lockNum; i++) {\n+      BLOCK_LOCKS[i] = new ReentrantReadWriteLock();\n+    }\n+  }\n+\n+  private final long mBlockId;\n+  private final BufferCachingGrpcDataReader mCachedDataReader;\n+  private final long mChunkSize;\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link SharedGrpcDataReader}.\n+   *\n+   * @param readRequest the read request\n+   * @param reader the cached Grpc data reader for the given block\n+   */\n+  private SharedGrpcDataReader(ReadRequest readRequest, BufferCachingGrpcDataReader reader) {\n+    mChunkSize = readRequest.getChunkSize();\n+    mPosToRead = readRequest.getOffset();\n+    mBlockId = readRequest.getBlockId();\n+    mCachedDataReader = reader;\n+  }\n+\n+  @Override\n+  public long pos() {\n+    return mPosToRead;\n+  }\n+\n+  /**\n+   * Seeks to a specific position.\n+   *\n+   * @param pos the position to seek to\n+   */\n+  public void seek(long pos) {\n+    mPosToRead = pos;\n+  }\n+\n+  @Override\n+  public DataBuffer readChunk() throws IOException {\n+    int index = (int) (mPosToRead / mChunkSize);\n+    DataBuffer chunk = mCachedDataReader.readChunk(index);\n+    if (chunk == null) {\n+      return null;\n+    }\n+    ByteBuffer bb = chunk.getReadOnlyByteBuffer();\n+    // Force to align to chunk size\n+    bb.position((int) (mPosToRead % mChunkSize));\n+    mPosToRead += mChunkSize - mPosToRead % mChunkSize;\n+\n+    return new NioDataBuffer(bb, bb.remaining());\n+  }\n+\n+  @Override\n+  public DataBuffer readChunkIfReady() throws IOException {\n+    // I'm naive, I'm reading chunks anyway\n+    return readChunk();\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    if (mCachedDataReader.deRef() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dbdd5cbac7591a08106e9a012a9fd26ac104ec6", "author": {"user": {"login": "LuQQiu", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/1dbdd5cbac7591a08106e9a012a9fd26ac104ec6", "committedDate": "2020-11-07T00:43:47Z", "message": "Better close"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzODIzMDk3", "url": "https://github.com/Alluxio/alluxio/pull/12453#pullrequestreview-523823097", "createdAt": "2020-11-05T00:01:42Z", "commit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxNzo1NFrOHuQZsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMDowMzozMVrOHvBDWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NTI2Ng==", "bodyText": "'else' part is for (pos == mLength).  CloseDataReader() is mandatory in this case.\nAnd 'return' is on pos == mPos but not pos == mLength.", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518265266", "createdAt": "2020-11-05T18:17:54Z", "author": {"login": "chaowangnk1"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "diffHunk": "@@ -337,8 +341,42 @@ public void seek(long pos) throws IOException {\n     }\n     if (pos < mPos) {\n       mEOF = false;\n+      if (mDataReader instanceof NaiveSharedGrpcDataReader) {\n+        NaiveSharedGrpcDataReader reader = (NaiveSharedGrpcDataReader)mDataReader;\n+        reader.seek(pos);\n+        if (mCurrentChunk != null) {\n+          mCurrentChunk.release();\n+          mCurrentChunk = null;\n+        }\n+      } else {\n+        closeDataReader();\n+      }\n+    } else if (pos < mLength) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3Njg0Mg=="}, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2OTIwNA==", "bodyText": "Just have some rough number:\n\nSingle process fuse read\nNaivceDataReader -> 11s\nGrpcDataReader -> 18 ~ 20 s\n4 processes\nNaiveDataReader -> 20s\nGrpcDataReader -> 500 ~ 600 s, 1600s in worst case\n\nBy the way, if with code change in BlockInStream.seek + GrpcDataReader, single process perf is 20s, and 4 process read perf is 140 ~ 150s", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518269204", "createdAt": "2020-11-05T18:24:43Z", "author": {"login": "chaowangnk1"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "diffHunk": "@@ -337,8 +341,42 @@ public void seek(long pos) throws IOException {\n     }\n     if (pos < mPos) {\n       mEOF = false;\n+      if (mDataReader instanceof NaiveSharedGrpcDataReader) {\n+        NaiveSharedGrpcDataReader reader = (NaiveSharedGrpcDataReader)mDataReader;\n+        reader.seek(pos);\n+        if (mCurrentChunk != null) {\n+          mCurrentChunk.release();\n+          mCurrentChunk = null;\n+        }\n+      } else {\n+        closeDataReader();\n+      }\n+    } else if (pos < mLength) {\n+      // Try to read data already in queue\n+      long curPos = mPos;\n+      while (mCurrentChunk != null && curPos < pos) {\n+        long nextPos = curPos + mCurrentChunk.readableBytes();\n+        if (nextPos <= pos) {\n+          curPos = nextPos; \n+          mCurrentChunk.release();\n+          mCurrentChunk = mDataReader.readChunkNoWait();\n+        } else {\n+          // TODO introduce seek in DataBuffer\n+          int toRead = (int)(pos - curPos);\n+          final byte[] b = new byte[toRead];\n+          mCurrentChunk.readBytes(b, 0, toRead);\n+          curPos = pos;\n+        }\n+      }\n+\n+      if (curPos < pos) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4Mjg1MA=="}, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3MDc0Mw==", "bodyText": "Good point, that could save some runtime", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518270743", "createdAt": "2020-11-05T18:27:17Z", "author": {"login": "chaowangnk1"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveCachedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.DataMessage;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import alluxio.resource.LockResource;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that streams a region from gRPC data server.\n+ *\n+ * Protocol:\n+ * 1. The client sends a read request (id, offset, length).\n+ * 2. Once the server receives the request, it streams chunks to the client. The streaming pauses\n+ *    if the server's buffer is full and resumes if the buffer is not full.\n+ * 3. The client reads chunks from the stream using an iterator.\n+ * 4. The client can cancel the read request at anytime. The cancel request is ignored by the\n+ *    server if everything has been sent to channel.\n+ * 5. To make it simple to handle errors, the channel is closed if any error occurs.\n+ */\n+@NotThreadSafe\n+public final class NaiveCachedGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveCachedGrpcDataReader.class);\n+\n+  private final int mReaderBufferSizeMessages;\n+  private final long mDataTimeoutMs;\n+  private final FileSystemContext mContext;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final ReadRequest mReadRequest;\n+  private final WorkerNetAddress mAddress;\n+\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+\n+  private final DataBuffer[] mDataBuffers; \n+  private int mBufferCount = 0;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+\n+  /**\n+   * Creates an instance of {@link NaiveCachedGrpcDataReader}.\n+   *\n+   * @param context the file system context\n+   * @param address the data server address\n+   * @param readRequest the read request\n+   */\n+  public NaiveCachedGrpcDataReader(FileSystemContext context, WorkerNetAddress address,\n+      ReadRequest readRequest) throws IOException {\n+    mContext = context;\n+    mAddress = address;\n+    mPosToRead = readRequest.getOffset();\n+    mReadRequest = readRequest;\n+    AlluxioConfiguration alluxioConf = context.getClusterConf();\n+    mReaderBufferSizeMessages = alluxioConf\n+        .getInt(PropertyKey.USER_STREAMING_READER_BUFFER_SIZE_MESSAGES);\n+    mDataTimeoutMs = alluxioConf.getMs(PropertyKey.USER_STREAMING_DATA_TIMEOUT);\n+    mMarshaller = new ReadResponseMarshaller();\n+    mClient = mContext.acquireBlockWorkerClient(address);\n+    long blockSize = readRequest.getLength() + readRequest.getOffset();\n+    long chunkSize = readRequest.getChunkSize();\n+    int buffCount = (int)(blockSize / chunkSize);\n+    if ((blockSize % chunkSize) != 0) {\n+      buffCount += 1;\n+    }\n+    mDataBuffers = new DataBuffer[buffCount];\n+\n+    try {\n+      String desc = \"GrpcDataReader\";\n+      if (LOG.isDebugEnabled()) { // More detailed description when debug logging is enabled\n+        desc = MoreObjects.toStringHelper(this)\n+          .add(\"request\", mReadRequest)\n+          .add(\"address\", address)\n+          .toString();\n+      }\n+      mStream = new GrpcBlockingStream<>(mClient.get()::readBlock, mReaderBufferSizeMessages,\n+          desc);\n+      mStream.send(mReadRequest, mDataTimeoutMs);\n+    } catch (Exception e) {\n+      mClient.close();\n+      throw e;\n+    }\n+  }\n+\n+  public DataBuffer readChunk(int index) throws IOException {\n+    if (index >= mDataBuffers.length) {\n+      return null;\n+    }\n+    \n+    try (LockResource r1 = new LockResource(mBufferLocks.writeLock())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2MjA4MA=="}, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3MTI1MA==", "bodyText": "to q2, yes, it's the only resource protected by this lock", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518271250", "createdAt": "2020-11-05T18:28:09Z", "author": {"login": "chaowangnk1"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveSharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.DataMessage;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that streams a region from gRPC data server.\n+ *\n+ * NaiveSharedGrpcDataReader is a POC to solve multi-process-read perf issue.\n+ * It follows GrpcDataReader protocol.\n+ * It takes strong assumption:\n+ *    Parallel read to the same file happens on the same time, so that read request is \n+ *    serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveSharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveSharedGrpcDataReader.class);\n+\n+  private final NaiveCachedGrpcDataReader mCachedDataReader;\n+  private final long mBlockId;\n+\n+  private long mChunkSize;\n+  private long mBlockSize;\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  private final static ReentrantReadWriteLock mBlockLocks = new ReentrantReadWriteLock();\n+  private final static Map<Long, NaiveCachedGrpcDataReader> mBlockReaders = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxNDAxMQ=="}, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NDM2Ng==", "bodyText": "That's a better option.", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r518274366", "createdAt": "2020-11-05T18:33:25Z", "author": {"login": "chaowangnk1"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/NaiveSharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.DataMessage;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that streams a region from gRPC data server.\n+ *\n+ * NaiveSharedGrpcDataReader is a POC to solve multi-process-read perf issue.\n+ * It follows GrpcDataReader protocol.\n+ * It takes strong assumption:\n+ *    Parallel read to the same file happens on the same time, so that read request is \n+ *    serialized by kernel\n+ */\n+@NotThreadSafe\n+public final class NaiveSharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(NaiveSharedGrpcDataReader.class);\n+\n+  private final NaiveCachedGrpcDataReader mCachedDataReader;\n+  private final long mBlockId;\n+\n+  private long mChunkSize;\n+  private long mBlockSize;\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  private final static ReentrantReadWriteLock mBlockLocks = new ReentrantReadWriteLock();\n+  private final static Map<Long, NaiveCachedGrpcDataReader> mBlockReaders = new HashMap<>();\n+\n+  /**\n+   * Creates an instance of {@link NaiveSharedGrpcDataReader}.\n+   *\n+   * @param context the file system context\n+   * @param address the data server address\n+   * @param readRequest the read request\n+   */\n+  private NaiveSharedGrpcDataReader(FileSystemContext context, WorkerNetAddress address,\n+      ReadRequest readRequest) throws IOException {\n+    mChunkSize = readRequest.getChunkSize();\n+    mPosToRead = readRequest.getOffset();\n+    mBlockSize = readRequest.getLength() + readRequest.getOffset();\n+    try (LockResource r1 = new LockResource(mBlockLocks.writeLock())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyMzY2Ng=="}, "originalCommit": {"oid": "990e3df845d5dfaf8b750a899e2dfb825096cf79"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1OTc3MA==", "bodyText": "This check is not complete. Even the config is true, usual GrpcDataReader will still be used if block size is <= 4 * chunksize.\nWould recommend to keep the logic of checking class of the instance. The logic inner if block is only applicable to cached data reader.", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r519059770", "createdAt": "2020-11-06T23:52:29Z", "author": {"login": "chaowangnk1"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "diffHunk": "@@ -337,8 +343,39 @@ public void seek(long pos) throws IOException {\n     }\n     if (pos < mPos) {\n       mEOF = false;\n+      if (mContext.getClusterConf().getBoolean(PropertyKey.FUSE_SHARED_CACHING_READER_ENABLED)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2MjM2Mg==", "bodyText": "mMarshaller could be removed since it's not used in this class.", "url": "https://github.com/Alluxio/alluxio/pull/12453#discussion_r519062362", "createdAt": "2020-11-07T00:03:31Z", "author": {"login": "chaowangnk1"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BufferCachingGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.grpc.ReadResponseMarshaller;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ */\n+@NotThreadSafe\n+public class BufferCachingGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(BufferCachingGrpcDataReader.class);\n+\n+  private final WorkerNetAddress mAddress;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final long mDataTimeoutMs;\n+  private final ReadRequest mReadRequest;\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  private final ReadResponseMarshaller mMarshaller;\n+  /**\n+   * Count the number of threads that are accessing the same block together.\n+   * When no thread is accessing this block, the cached data will be GCed.\n+   */\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+  private final Closer mCloser;\n+\n+  private AtomicInteger mBufferCount = new AtomicInteger(0);\n+  private final DataBuffer[] mDataBuffers;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link BufferCachingGrpcDataReader}.\n+   *\n+   * @param address the data server address\n+   * @param client the block worker client to read data from\n+   * @param dataTimeoutMs the maximum time to wait for a data response\n+   * @param readRequest the read request\n+   * @param stream the underlying gRPC stream to read data\n+   */\n+  private BufferCachingGrpcDataReader(WorkerNetAddress address,\n+      CloseableResource<BlockWorkerClient> client, long dataTimeoutMs,\n+      ReadRequest readRequest, GrpcBlockingStream<ReadRequest, ReadResponse> stream) {\n+    mAddress = address;\n+    mClient = client;\n+    mDataTimeoutMs = dataTimeoutMs;\n+    mMarshaller = new ReadResponseMarshaller();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4eb6d7ee37e0df48c67ecfdfc5b0eda2476852"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3da28c4213483a46fc2ea22644156f9ebedaff02", "author": {"user": {"login": "LuQQiu", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/3da28c4213483a46fc2ea22644156f9ebedaff02", "committedDate": "2020-11-07T01:23:54Z", "message": "Fix BlockInStream.seek and remove mMarshaller"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NjI4MTM1", "url": "https://github.com/Alluxio/alluxio/pull/12453#pullrequestreview-525628135", "createdAt": "2020-11-07T05:11:24Z", "commit": {"oid": "3da28c4213483a46fc2ea22644156f9ebedaff02"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eced1440c8c6cd0d3ae19952e80460c02930b953", "author": {"user": {"login": "LuQQiu", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/eced1440c8c6cd0d3ae19952e80460c02930b953", "committedDate": "2020-11-08T00:18:04Z", "message": "Isolate BlockInStream seek fuse logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1ODMwMTE3", "url": "https://github.com/Alluxio/alluxio/pull/12453#pullrequestreview-525830117", "createdAt": "2020-11-08T17:45:05Z", "commit": {"oid": "eced1440c8c6cd0d3ae19952e80460c02930b953"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3394, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}