{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDk3NjI2", "number": 10953, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzozNDowOFrODhtzWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjowNDoxM1rODjoKlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjgwMDI3OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzozNDowOFrOFsm3JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzozNDowOFrOFsm3JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxODM3Mg==", "bodyText": "This comment is not consistent with the calculation (ie. 1000 / 1.2 = 833)", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382318372", "createdAt": "2020-02-20T23:34:08Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -50,70 +45,44 @@\n @NotThreadSafe\n public class RocksPageStore implements PageStore {\n   private static final Logger LOG = LoggerFactory.getLogger(RocksPageStore.class);\n-  public static final int KEY_LEN = Long.BYTES * 2;\n   private static final byte[] CONF_KEY = \"CONF\".getBytes();\n+  // TODO(feng): consider making the overhead ratio configurable\n+  // We assume 20% overhead using Rocksdb as a page store, i.e., with 1GB space allocated, we\n+  // expect no more than 800MB logical data stored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04142c48bf5a9fafd80beb45c53864a945d9305c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njk4NjA5OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowODo0M1rOFsonPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjoyNToyM1rOFtGaxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NzA3MA==", "bodyText": "We should close the db whenever restore returns false.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382347070", "createdAt": "2020-02-21T01:08:43Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -179,25 +146,31 @@ private static PageId getPageIdFromKey(byte[] key) {\n   }\n \n   @Override\n-  public long pages() {\n-    return mSize.get();\n-  }\n-\n-  @Override\n-  public long bytes() {\n-    return mBytes.get();\n-  }\n-\n-  @Override\n-  public Collection<PageInfo> getPages() {\n-    try (RocksIterator iter = mDb.newIterator()) {\n-      return Streams.stream(new PageIterator(iter)).collect(Collectors.toList());\n+  public boolean restore(Predicate<PageInfo> initFunc) {\n+    try {\n+      byte[] confData = mDb.get(CONF_KEY);\n+      Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n+      if (confData != null) {\n+        Cache.PRocksPageStoreOptions persistedOptions =\n+            Cache.PRocksPageStoreOptions.parseFrom(confData);\n+        if (!persistedOptions.equals(pOptions)) {\n+          mDb.close();\n+          return false;\n+        }\n+      }\n+      mDb.put(CONF_KEY, pOptions.toByteArray());\n+      try (RocksIterator iter = mDb.newIterator()) {\n+        return Streams.stream(new PageIterator(iter)).allMatch(initFunc::test);\n+      }\n+    } catch (RocksDBException | IOException e) {\n+      LOG.error(\"Failed to restore RocksPageStore:\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzNTM5Nw==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382835397", "createdAt": "2020-02-21T22:25:23Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -179,25 +146,31 @@ private static PageId getPageIdFromKey(byte[] key) {\n   }\n \n   @Override\n-  public long pages() {\n-    return mSize.get();\n-  }\n-\n-  @Override\n-  public long bytes() {\n-    return mBytes.get();\n-  }\n-\n-  @Override\n-  public Collection<PageInfo> getPages() {\n-    try (RocksIterator iter = mDb.newIterator()) {\n-      return Streams.stream(new PageIterator(iter)).collect(Collectors.toList());\n+  public boolean restore(Predicate<PageInfo> initFunc) {\n+    try {\n+      byte[] confData = mDb.get(CONF_KEY);\n+      Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n+      if (confData != null) {\n+        Cache.PRocksPageStoreOptions persistedOptions =\n+            Cache.PRocksPageStoreOptions.parseFrom(confData);\n+        if (!persistedOptions.equals(pOptions)) {\n+          mDb.close();\n+          return false;\n+        }\n+      }\n+      mDb.put(CONF_KEY, pOptions.toByteArray());\n+      try (RocksIterator iter = mDb.newIterator()) {\n+        return Streams.stream(new PageIterator(iter)).allMatch(initFunc::test);\n+      }\n+    } catch (RocksDBException | IOException e) {\n+      LOG.error(\"Failed to restore RocksPageStore:\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NzA3MA=="}, "originalCommit": {"oid": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njk5MjI4OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMToxMjo0N1rOFsoq0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDo1NTozNFrOFt1ONw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0Nzk4Nw==", "bodyText": "RocksPageStore will be in a bad state after restore then initialize.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382347987", "createdAt": "2020-02-21T01:12:47Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -77,24 +77,27 @@\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = PageStore.create(options);\n+    boolean restored = false;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      restored = pageStore.restore(pageInfo -> {\n+        if (pageInfo == null) {\n+          return false;\n+        }\n+        metaStore.addPage(pageInfo.getPageId(), pageInfo);\n+        evictor.updateOnPut(pageInfo.getPageId());\n+        return metaStore.bytes() <= pageStore.getCacheSize();\n+      });\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);\n+    }\n+    if (!restored) {\n+      metaStore.reset();\n+      evictor.reset();\n+      pageStore.initialize(options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk4Nzk5Mg==", "bodyText": "initialize will remove all files. will it still be a problem?", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382987992", "createdAt": "2020-02-23T09:39:08Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -77,24 +77,27 @@\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = PageStore.create(options);\n+    boolean restored = false;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      restored = pageStore.restore(pageInfo -> {\n+        if (pageInfo == null) {\n+          return false;\n+        }\n+        metaStore.addPage(pageInfo.getPageId(), pageInfo);\n+        evictor.updateOnPut(pageInfo.getPageId());\n+        return metaStore.bytes() <= pageStore.getCacheSize();\n+      });\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);\n+    }\n+    if (!restored) {\n+      metaStore.reset();\n+      evictor.reset();\n+      pageStore.initialize(options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0Nzk4Nw=="}, "originalCommit": {"oid": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMjIzMQ==", "bodyText": "The issue is that initialize is generic and it does not initialize resource specific to an implementation. In RocksDB page store, the mDB will be stale (depends on the restore result) and unusable after the initialize clean up the directory.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r383602231", "createdAt": "2020-02-25T00:55:34Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -77,24 +77,27 @@\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = PageStore.create(options);\n+    boolean restored = false;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      restored = pageStore.restore(pageInfo -> {\n+        if (pageInfo == null) {\n+          return false;\n+        }\n+        metaStore.addPage(pageInfo.getPageId(), pageInfo);\n+        evictor.updateOnPut(pageInfo.getPageId());\n+        return metaStore.bytes() <= pageStore.getCacheSize();\n+      });\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);\n+    }\n+    if (!restored) {\n+      metaStore.reset();\n+      evictor.reset();\n+      pageStore.initialize(options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0Nzk4Nw=="}, "originalCommit": {"oid": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzAxMTc3OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMToyNDo0MFrOFso2ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMToyNDo0MFrOFso2ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MDk4Ng==", "bodyText": "We need to indicate that this function must be called right after the constructor. The state of the page store is undetermined before this function is called.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382350986", "createdAt": "2020-02-21T01:24:40Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -170,27 +136,16 @@ ReadableByteChannel get(PageId pageId, int pageOffset) throws IOException,\n   void delete(PageId pageId, long pageSize) throws IOException, PageNotFoundException;\n \n   /**\n-   * @return the number of pages stored\n-   */\n-  long pages();\n-\n-  /**\n-   * @return the total size of pages stored in bytes\n-   */\n-  long bytes();\n-\n-  /**\n-   * Gets all page ids.\n+   * Restores the page store from a previous run.\n    *\n-   * @return collection of ids representing all pages loaded from disk\n+   * @param initFunc function to apply during restore process\n+   * @return true if successfully restored from previous state\n    * @throws IOException if any error occurs\n    */\n-  Collection<PageInfo> getPages() throws IOException;\n+  boolean restore(Predicate<PageInfo> initFunc) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjUyOTM1OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTo0NTo1NVrOFu5sog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTo0NTowNlrOFve1HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyNDEzMA==", "bodyText": "What happens when we call close on this stream, is it a no-op?", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384724130", "createdAt": "2020-02-26T19:45:55Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -180,25 +147,29 @@ private static PageId getPageIdFromKey(byte[] key) {\n   }\n \n   @Override\n-  public long pages() {\n-    return mSize.get();\n-  }\n-\n-  @Override\n-  public long bytes() {\n-    return mBytes.get();\n-  }\n-\n-  @Override\n-  public Collection<PageInfo> getPages() {\n-    try (RocksIterator iter = mDb.newIterator()) {\n-      return Streams.stream(new PageIterator(iter)).collect(Collectors.toList());\n+  public Stream<PageInfo> getPages() throws IOException {\n+    try {\n+      byte[] confData = mDb.get(CONF_KEY);\n+      Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n+      if (confData != null) {\n+        Cache.PRocksPageStoreOptions persistedOptions =\n+            Cache.PRocksPageStoreOptions.parseFrom(confData);\n+        if (!persistedOptions.equals(pOptions)) {\n+          mDb.close();\n+          throw new IOException(\"Inconsistent configuration for RocksPageStore\");\n+        }\n+      }\n+      mDb.put(CONF_KEY, pOptions.toByteArray());\n+      return Streams.stream(new PageIterator(mDb.newIterator()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzOTM2Mw==", "bodyText": "correct", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384939363", "createdAt": "2020-02-27T06:46:52Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -180,25 +147,29 @@ private static PageId getPageIdFromKey(byte[] key) {\n   }\n \n   @Override\n-  public long pages() {\n-    return mSize.get();\n-  }\n-\n-  @Override\n-  public long bytes() {\n-    return mBytes.get();\n-  }\n-\n-  @Override\n-  public Collection<PageInfo> getPages() {\n-    try (RocksIterator iter = mDb.newIterator()) {\n-      return Streams.stream(new PageIterator(iter)).collect(Collectors.toList());\n+  public Stream<PageInfo> getPages() throws IOException {\n+    try {\n+      byte[] confData = mDb.get(CONF_KEY);\n+      Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n+      if (confData != null) {\n+        Cache.PRocksPageStoreOptions persistedOptions =\n+            Cache.PRocksPageStoreOptions.parseFrom(confData);\n+        if (!persistedOptions.equals(pOptions)) {\n+          mDb.close();\n+          throw new IOException(\"Inconsistent configuration for RocksPageStore\");\n+        }\n+      }\n+      mDb.put(CONF_KEY, pOptions.toByteArray());\n+      return Streams.stream(new PageIterator(mDb.newIterator()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyNDEzMA=="}, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMjUwOQ==", "bodyText": "fixed by adding closer to Stream.onClose", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385332509", "createdAt": "2020-02-27T19:45:06Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -180,25 +147,29 @@ private static PageId getPageIdFromKey(byte[] key) {\n   }\n \n   @Override\n-  public long pages() {\n-    return mSize.get();\n-  }\n-\n-  @Override\n-  public long bytes() {\n-    return mBytes.get();\n-  }\n-\n-  @Override\n-  public Collection<PageInfo> getPages() {\n-    try (RocksIterator iter = mDb.newIterator()) {\n-      return Streams.stream(new PageIterator(iter)).collect(Collectors.toList());\n+  public Stream<PageInfo> getPages() throws IOException {\n+    try {\n+      byte[] confData = mDb.get(CONF_KEY);\n+      Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n+      if (confData != null) {\n+        Cache.PRocksPageStoreOptions persistedOptions =\n+            Cache.PRocksPageStoreOptions.parseFrom(confData);\n+        if (!persistedOptions.equals(pOptions)) {\n+          mDb.close();\n+          throw new IOException(\"Inconsistent configuration for RocksPageStore\");\n+        }\n+      }\n+      mDb.put(CONF_KEY, pOptions.toByteArray());\n+      return Streams.stream(new PageIterator(mDb.newIterator()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyNDEzMA=="}, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjk0NTEyOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTo1MTozMVrOFu9o6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzozODo0M1rOFvHzeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4ODcxMg==", "bodyText": "Do we need to clean up directories even when we try to load the store? For example, when the store type is changed and there are data for previous store type.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384788712", "createdAt": "2020-02-26T21:51:31Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -45,51 +43,66 @@\n    *\n    * @param options the options to instantiate the page store\n    * @return a PageStore instance\n-   * @throws IOException if failed to create a page store\n    */\n   static PageStore create(PageStoreOptions options) throws IOException {\n-    LOG.info(\"Create PageStore option={}\", options.toString());\n-    switch (options.getType()) {\n-      case LOCAL:\n-        return new LocalPageStore(options.toOptions());\n-      case ROCKS:\n-        return new RocksPageStore(options.toOptions());\n-      default:\n-        throw new IllegalArgumentException(\n-            \"Incompatible PageStore \" + options.getType() + \" specified\");\n-    }\n+    return create(options, null, null);\n   }\n \n   /**\n-   * Creates a new instance of {@link PageStore} based on configuration.\n+   * Creates a {@link PageStore} by restoring from previous state (when metastore and evictor are\n+   * not null).\n    *\n-   * @param conf configuration\n-   * @return the {@link PageStore}\n+   * @param options the options to instantiate the page store\n+   * @param metaStore meta store\n+   * @param evictor evictor\n+   * @return a PageStore instance\n+   * @throws IOException if I/O error happens\n    */\n-  static PageStore create(AlluxioConfiguration conf) throws IOException {\n-    PageStoreOptions options;\n-    PageStoreType storeType = conf.getEnum(\n-        PropertyKey.USER_CLIENT_CACHE_STORE_TYPE, PageStoreType.class);\n-    switch (storeType) {\n+  static PageStore create(PageStoreOptions options, @Nullable MetaStore metaStore,\n+        @Nullable CacheEvictor evictor) throws IOException {\n+    LOG.info(\"Create PageStore option={}\", options.toString());\n+    if (metaStore == null || evictor == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NTI1OA==", "bodyText": "this is not priority currently but only making the code more complicated.\nI would defer the implementation", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384955258", "createdAt": "2020-02-27T07:38:43Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -45,51 +43,66 @@\n    *\n    * @param options the options to instantiate the page store\n    * @return a PageStore instance\n-   * @throws IOException if failed to create a page store\n    */\n   static PageStore create(PageStoreOptions options) throws IOException {\n-    LOG.info(\"Create PageStore option={}\", options.toString());\n-    switch (options.getType()) {\n-      case LOCAL:\n-        return new LocalPageStore(options.toOptions());\n-      case ROCKS:\n-        return new RocksPageStore(options.toOptions());\n-      default:\n-        throw new IllegalArgumentException(\n-            \"Incompatible PageStore \" + options.getType() + \" specified\");\n-    }\n+    return create(options, null, null);\n   }\n \n   /**\n-   * Creates a new instance of {@link PageStore} based on configuration.\n+   * Creates a {@link PageStore} by restoring from previous state (when metastore and evictor are\n+   * not null).\n    *\n-   * @param conf configuration\n-   * @return the {@link PageStore}\n+   * @param options the options to instantiate the page store\n+   * @param metaStore meta store\n+   * @param evictor evictor\n+   * @return a PageStore instance\n+   * @throws IOException if I/O error happens\n    */\n-  static PageStore create(AlluxioConfiguration conf) throws IOException {\n-    PageStoreOptions options;\n-    PageStoreType storeType = conf.getEnum(\n-        PropertyKey.USER_CLIENT_CACHE_STORE_TYPE, PageStoreType.class);\n-    switch (storeType) {\n+  static PageStore create(PageStoreOptions options, @Nullable MetaStore metaStore,\n+        @Nullable CacheEvictor evictor) throws IOException {\n+    LOG.info(\"Create PageStore option={}\", options.toString());\n+    if (metaStore == null || evictor == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4ODcxMg=="}, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjk3ODY5OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjowMTo0NlrOFu99qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzo0MTo1N1rOFvH4Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NDAyNg==", "bodyText": "(nit) Given all other stream usages do not require explicit closing, it might be hard for people to remember to close it.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384794026", "createdAt": "2020-02-26T22:01:46Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -171,27 +183,16 @@ ReadableByteChannel get(PageId pageId, int pageOffset) throws IOException,\n   void delete(PageId pageId, long pageSize) throws IOException, PageNotFoundException;\n \n   /**\n-   * @return the number of pages stored\n-   */\n-  long pages();\n-\n-  /**\n-   * @return the total size of pages stored in bytes\n-   */\n-  long bytes();\n-\n-  /**\n-   * Gets all page ids.\n+   * Gets a stream of all pages from the page store. This stream needs to be closed as it may", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NjQ2Mw==", "bodyText": "perhaps. but we should either use iterator or stream here because we will need to handle ~1 million pages restored, that could take ~GB memory if we use collection. due to this reason, I and @calvinjia  after discussion decided to stick to stream.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384956463", "createdAt": "2020-02-27T07:41:57Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -171,27 +183,16 @@ ReadableByteChannel get(PageId pageId, int pageOffset) throws IOException,\n   void delete(PageId pageId, long pageSize) throws IOException, PageNotFoundException;\n \n   /**\n-   * @return the number of pages stored\n-   */\n-  long pages();\n-\n-  /**\n-   * @return the total size of pages stored in bytes\n-   */\n-  long bytes();\n-\n-  /**\n-   * Gets all page ids.\n+   * Gets a stream of all pages from the page store. This stream needs to be closed as it may", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NDAyNg=="}, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjk5MDYwOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjowNTo0OVrOFu-FDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzozNzozNVrOFvHxyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NTkxOQ==", "bodyText": "(nit) Would it be simpler if we just do it in the previous catch block?", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384795919", "createdAt": "2020-02-26T22:05:49Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -77,24 +77,19 @@\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = null;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      pageStore = PageStore.create(options, metaStore, evictor);\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);\n+    }\n+    if (pageStore == null) {\n+      metaStore.reset();\n+      evictor.reset();\n+      pageStore = PageStore.create(options);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NDgyNw==", "bodyText": "i feel that is not very readable", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384954827", "createdAt": "2020-02-27T07:37:35Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -77,24 +77,19 @@\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = null;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      pageStore = PageStore.create(options, metaStore, evictor);\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);\n+    }\n+    if (pageStore == null) {\n+      metaStore.reset();\n+      evictor.reset();\n+      pageStore = PageStore.create(options);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NTkxOQ=="}, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzAwMDMwOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjowOToyMVrOFu-LQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzozOTozMVrOFvH0rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NzUwNw==", "bodyText": "Would it be more clear if we just move the logic before this line to create(options) and just call it first?", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384797507", "createdAt": "2020-02-26T22:09:21Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -45,51 +43,66 @@\n    *\n    * @param options the options to instantiate the page store\n    * @return a PageStore instance\n-   * @throws IOException if failed to create a page store\n    */\n   static PageStore create(PageStoreOptions options) throws IOException {\n-    LOG.info(\"Create PageStore option={}\", options.toString());\n-    switch (options.getType()) {\n-      case LOCAL:\n-        return new LocalPageStore(options.toOptions());\n-      case ROCKS:\n-        return new RocksPageStore(options.toOptions());\n-      default:\n-        throw new IllegalArgumentException(\n-            \"Incompatible PageStore \" + options.getType() + \" specified\");\n-    }\n+    return create(options, null, null);\n   }\n \n   /**\n-   * Creates a new instance of {@link PageStore} based on configuration.\n+   * Creates a {@link PageStore} by restoring from previous state (when metastore and evictor are\n+   * not null).\n    *\n-   * @param conf configuration\n-   * @return the {@link PageStore}\n+   * @param options the options to instantiate the page store\n+   * @param metaStore meta store\n+   * @param evictor evictor\n+   * @return a PageStore instance\n+   * @throws IOException if I/O error happens\n    */\n-  static PageStore create(AlluxioConfiguration conf) throws IOException {\n-    PageStoreOptions options;\n-    PageStoreType storeType = conf.getEnum(\n-        PropertyKey.USER_CLIENT_CACHE_STORE_TYPE, PageStoreType.class);\n-    switch (storeType) {\n+  static PageStore create(PageStoreOptions options, @Nullable MetaStore metaStore,\n+        @Nullable CacheEvictor evictor) throws IOException {\n+    LOG.info(\"Create PageStore option={}\", options.toString());\n+    if (metaStore == null || evictor == null) {\n+      initialize(options);\n+    }\n+    final PageStore pageStore;\n+    switch (options.getType()) {\n       case LOCAL:\n-        options = new LocalPageStoreOptions()\n-            .setFileBuckets(conf.getInt(PropertyKey.USER_CLIENT_CACHE_LOCAL_STORE_FILE_BUCKETS));\n+        pageStore = new LocalPageStore(options.toOptions());\n         break;\n       case ROCKS:\n-        options = new RocksPageStoreOptions();\n+        pageStore = new RocksPageStore(options.toOptions());\n         break;\n       default:\n-        throw new IllegalArgumentException(String.format(\"Unrecognized store type %s\",\n-            storeType.name()));\n+        throw new IllegalArgumentException(\n+            \"Incompatible PageStore \" + options.getType() + \" specified\");\n+    }\n+    if (metaStore != null && evictor != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NTU2NQ==", "bodyText": "not sure I understand the comment", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384955565", "createdAt": "2020-02-27T07:39:31Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -45,51 +43,66 @@\n    *\n    * @param options the options to instantiate the page store\n    * @return a PageStore instance\n-   * @throws IOException if failed to create a page store\n    */\n   static PageStore create(PageStoreOptions options) throws IOException {\n-    LOG.info(\"Create PageStore option={}\", options.toString());\n-    switch (options.getType()) {\n-      case LOCAL:\n-        return new LocalPageStore(options.toOptions());\n-      case ROCKS:\n-        return new RocksPageStore(options.toOptions());\n-      default:\n-        throw new IllegalArgumentException(\n-            \"Incompatible PageStore \" + options.getType() + \" specified\");\n-    }\n+    return create(options, null, null);\n   }\n \n   /**\n-   * Creates a new instance of {@link PageStore} based on configuration.\n+   * Creates a {@link PageStore} by restoring from previous state (when metastore and evictor are\n+   * not null).\n    *\n-   * @param conf configuration\n-   * @return the {@link PageStore}\n+   * @param options the options to instantiate the page store\n+   * @param metaStore meta store\n+   * @param evictor evictor\n+   * @return a PageStore instance\n+   * @throws IOException if I/O error happens\n    */\n-  static PageStore create(AlluxioConfiguration conf) throws IOException {\n-    PageStoreOptions options;\n-    PageStoreType storeType = conf.getEnum(\n-        PropertyKey.USER_CLIENT_CACHE_STORE_TYPE, PageStoreType.class);\n-    switch (storeType) {\n+  static PageStore create(PageStoreOptions options, @Nullable MetaStore metaStore,\n+        @Nullable CacheEvictor evictor) throws IOException {\n+    LOG.info(\"Create PageStore option={}\", options.toString());\n+    if (metaStore == null || evictor == null) {\n+      initialize(options);\n+    }\n+    final PageStore pageStore;\n+    switch (options.getType()) {\n       case LOCAL:\n-        options = new LocalPageStoreOptions()\n-            .setFileBuckets(conf.getInt(PropertyKey.USER_CLIENT_CACHE_LOCAL_STORE_FILE_BUCKETS));\n+        pageStore = new LocalPageStore(options.toOptions());\n         break;\n       case ROCKS:\n-        options = new RocksPageStoreOptions();\n+        pageStore = new RocksPageStore(options.toOptions());\n         break;\n       default:\n-        throw new IllegalArgumentException(String.format(\"Unrecognized store type %s\",\n-            storeType.name()));\n+        throw new IllegalArgumentException(\n+            \"Incompatible PageStore \" + options.getType() + \" specified\");\n+    }\n+    if (metaStore != null && evictor != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NzUwNw=="}, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzAxNTIzOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjoxNDowMlrOFu-UHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo0NjowOFrOFvG0nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5OTc3NA==", "bodyText": "This is a pretty strong side effect from a function that looks like a getter. Shall we either rename this function or make it protected and close the db upon exception from PageStore.create()?", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384799774", "createdAt": "2020-02-26T22:14:02Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -180,25 +147,29 @@ private static PageId getPageIdFromKey(byte[] key) {\n   }\n \n   @Override\n-  public long pages() {\n-    return mSize.get();\n-  }\n-\n-  @Override\n-  public long bytes() {\n-    return mBytes.get();\n-  }\n-\n-  @Override\n-  public Collection<PageInfo> getPages() {\n-    try (RocksIterator iter = mDb.newIterator()) {\n-      return Streams.stream(new PageIterator(iter)).collect(Collectors.toList());\n+  public Stream<PageInfo> getPages() throws IOException {\n+    try {\n+      byte[] confData = mDb.get(CONF_KEY);\n+      Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n+      if (confData != null) {\n+        Cache.PRocksPageStoreOptions persistedOptions =\n+            Cache.PRocksPageStoreOptions.parseFrom(confData);\n+        if (!persistedOptions.equals(pOptions)) {\n+          mDb.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzOTE2NQ==", "bodyText": "make sense. Moved the conf verification part to factory method", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384939165", "createdAt": "2020-02-27T06:46:08Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -180,25 +147,29 @@ private static PageId getPageIdFromKey(byte[] key) {\n   }\n \n   @Override\n-  public long pages() {\n-    return mSize.get();\n-  }\n-\n-  @Override\n-  public long bytes() {\n-    return mBytes.get();\n-  }\n-\n-  @Override\n-  public Collection<PageInfo> getPages() {\n-    try (RocksIterator iter = mDb.newIterator()) {\n-      return Streams.stream(new PageIterator(iter)).collect(Collectors.toList());\n+  public Stream<PageInfo> getPages() throws IOException {\n+    try {\n+      byte[] confData = mDb.get(CONF_KEY);\n+      Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n+      if (confData != null) {\n+        Cache.PRocksPageStoreOptions persistedOptions =\n+            Cache.PRocksPageStoreOptions.parseFrom(confData);\n+        if (!persistedOptions.equals(pOptions)) {\n+          mDb.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5OTc3NA=="}, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzA1MjUyOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjoyNjoyNlrOFu-qjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjozOTo0OFrOFvjv-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNTUxNw==", "bodyText": "After restoration failed, we will need to clean the store directory before creating a new store.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384805517", "createdAt": "2020-02-26T22:26:26Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -77,24 +77,19 @@\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = null;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      pageStore = PageStore.create(options, metaStore, evictor);\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NDQzNw==", "bodyText": "in this case, passing init=true to create PageStore in the following.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384954437", "createdAt": "2020-02-27T07:36:31Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -77,24 +77,19 @@\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = null;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      pageStore = PageStore.create(options, metaStore, evictor);\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNTUxNw=="}, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5ODk3Ng==", "bodyText": "The current initialize() function does not seem to clean up the store path of the current store type.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385398976", "createdAt": "2020-02-27T22:05:57Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -77,24 +77,19 @@\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = null;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      pageStore = PageStore.create(options, metaStore, evictor);\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNTUxNw=="}, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxMzExMw==", "bodyText": "fixed", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385413113", "createdAt": "2020-02-27T22:39:48Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -77,24 +77,19 @@\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = null;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      pageStore = PageStore.create(options, metaStore, evictor);\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNTUxNw=="}, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Njc0MzI2OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyODo0MVrOFvh1RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjozNTo1OVrOFvjqQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MTcwMQ==", "bodyText": "It can be tricky for user to deal with trailing slash if we use the configured path without normalizing it.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385381701", "createdAt": "2020-02-27T21:28:41Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -51,59 +45,24 @@\n   private static final Logger LOG = LoggerFactory.getLogger(LocalPageStore.class);\n \n   private final String mRoot;\n-  private final AtomicLong mSize = new AtomicLong(0);\n-  private final AtomicLong mBytes = new AtomicLong(0);\n   private final long mPageSize;\n+  private final long mCacheSize;\n   private final int mFileBuckets;\n   private final Pattern mPagePattern;\n \n   /**\n    * Creates a new instance of {@link LocalPageStore}.\n    *\n    * @param options options for the local page store\n-   * @throws IOException when fails to create a {@link LocalPageStore}\n    */\n-  public LocalPageStore(LocalPageStoreOptions options) throws IOException {\n+  public LocalPageStore(LocalPageStoreOptions options) {\n     mRoot = options.getRootDir();\n     mPageSize = options.getPageSize();\n+    mCacheSize = options.getCacheSize();\n     mFileBuckets = options.getFileBuckets();\n-    Path rootDir = Paths.get(mRoot);\n     // pattern encoding root_path/page_size(ulong)/bucket(uint)/file_id(str)/page_idx(ulong)/\n     mPagePattern = Pattern.compile(\n-        String.format(\"%s/%d/(\\\\d+)/([^/]+)/(\\\\d+)\", Pattern.quote(rootDir.toString()), mPageSize));\n-    try {\n-      boolean invalidPage = false;\n-\n-      if (Files.exists(rootDir)) {\n-        try (Stream<Path> stream = Files.walk(rootDir)) {\n-          invalidPage = stream\n-              .filter(Files::isRegularFile)\n-              .anyMatch(path -> {\n-                if (getPageId(path) == null) {\n-                  LOG.warn(\"Invalid page path {}\", path);\n-                  return true;\n-                }\n-                try {\n-                  mBytes.getAndAdd(Files.size(path));\n-                } catch (IOException e) {\n-                  LOG.warn(\"Fail to get file size {}\", e.toString());\n-                }\n-                mSize.incrementAndGet();\n-                return false;\n-              });\n-        }\n-      }\n-\n-      if (invalidPage || mBytes.get() > options.getCacheSize()) {\n-        LOG.warn(\"Cannot recover from cached data: {}\",\n-            invalidPage ? \"Invalid page file found\" : \"Cached data size exceeded configured value\");\n-        FileUtils.cleanDirectory(new File(mRoot));\n-        mSize.set(0);\n-        mBytes.set(0);\n-      }\n-    } catch (IOException e) {\n-      throw new IOException(String.format(\"can't initialize page store at %s\", mRoot), e);\n-    }\n+        String.format(\"%s/%d/(\\\\d+)/([^/]+)/(\\\\d+)\", Pattern.quote(mRoot), mPageSize));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0612d2c41c3c0423a003dd78da11ac8a36cb5b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxMTY1MQ==", "bodyText": "reverted  and add a javadoc preventing future change", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385411651", "createdAt": "2020-02-27T22:35:59Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -51,59 +45,24 @@\n   private static final Logger LOG = LoggerFactory.getLogger(LocalPageStore.class);\n \n   private final String mRoot;\n-  private final AtomicLong mSize = new AtomicLong(0);\n-  private final AtomicLong mBytes = new AtomicLong(0);\n   private final long mPageSize;\n+  private final long mCacheSize;\n   private final int mFileBuckets;\n   private final Pattern mPagePattern;\n \n   /**\n    * Creates a new instance of {@link LocalPageStore}.\n    *\n    * @param options options for the local page store\n-   * @throws IOException when fails to create a {@link LocalPageStore}\n    */\n-  public LocalPageStore(LocalPageStoreOptions options) throws IOException {\n+  public LocalPageStore(LocalPageStoreOptions options) {\n     mRoot = options.getRootDir();\n     mPageSize = options.getPageSize();\n+    mCacheSize = options.getCacheSize();\n     mFileBuckets = options.getFileBuckets();\n-    Path rootDir = Paths.get(mRoot);\n     // pattern encoding root_path/page_size(ulong)/bucket(uint)/file_id(str)/page_idx(ulong)/\n     mPagePattern = Pattern.compile(\n-        String.format(\"%s/%d/(\\\\d+)/([^/]+)/(\\\\d+)\", Pattern.quote(rootDir.toString()), mPageSize));\n-    try {\n-      boolean invalidPage = false;\n-\n-      if (Files.exists(rootDir)) {\n-        try (Stream<Path> stream = Files.walk(rootDir)) {\n-          invalidPage = stream\n-              .filter(Files::isRegularFile)\n-              .anyMatch(path -> {\n-                if (getPageId(path) == null) {\n-                  LOG.warn(\"Invalid page path {}\", path);\n-                  return true;\n-                }\n-                try {\n-                  mBytes.getAndAdd(Files.size(path));\n-                } catch (IOException e) {\n-                  LOG.warn(\"Fail to get file size {}\", e.toString());\n-                }\n-                mSize.incrementAndGet();\n-                return false;\n-              });\n-        }\n-      }\n-\n-      if (invalidPage || mBytes.get() > options.getCacheSize()) {\n-        LOG.warn(\"Cannot recover from cached data: {}\",\n-            invalidPage ? \"Invalid page file found\" : \"Cached data size exceeded configured value\");\n-        FileUtils.cleanDirectory(new File(mRoot));\n-        mSize.set(0);\n-        mBytes.set(0);\n-      }\n-    } catch (IOException e) {\n-      throw new IOException(String.format(\"can't initialize page store at %s\", mRoot), e);\n-    }\n+        String.format(\"%s/%d/(\\\\d+)/([^/]+)/(\\\\d+)\", Pattern.quote(mRoot), mPageSize));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MTcwMQ=="}, "originalCommit": {"oid": "ed0612d2c41c3c0423a003dd78da11ac8a36cb5b"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Njg0ODIwOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjowNDoxNFrOFvi1wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjo0MTo0NVrOFvjyyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5ODIxMA==", "bodyText": "Should the previous page store be closed before we create a new one?", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385398210", "createdAt": "2020-02-27T22:04:14Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -71,31 +76,70 @@\n   @GuardedBy(\"mMetaLock\")\n   private final MetaStore mMetaStore;\n \n+  /**\n+   * Restores a page store a the configured location, updating meta store and evictor.\n+   *\n+   * @param pageStore page store\n+   * @param options page store options\n+   * @param metaStore meta store\n+   * @param evictor evictor\n+   * @return whether the restore succeeds or not\n+   */\n+  private static boolean restore(\n+      PageStore pageStore, PageStoreOptions options, MetaStore metaStore, CacheEvictor evictor) {\n+    LOG.info(\"Restore PageStore with {}\", options);\n+    Path rootDir = Paths.get(options.getRootDir());\n+    if (!Files.exists(rootDir)) {\n+      LOG.error(\"Directory {} does not exist\", rootDir);\n+      return false;\n+    }\n+    try (Stream<PageInfo> stream = pageStore.getPages()) {\n+      Iterator<PageInfo> iterator = stream.iterator();\n+      while (iterator.hasNext()) {\n+        PageInfo pageInfo = iterator.next();\n+        if (pageInfo == null) {\n+          LOG.error(\"Invalid page info\");\n+          return false;\n+        }\n+        metaStore.addPage(pageInfo.getPageId(), pageInfo);\n+        evictor.updateOnPut(pageInfo.getPageId());\n+        if (metaStore.bytes() > pageStore.getCacheSize()) {\n+          LOG.error(\"Loaded pages exceed cache capacity ({} bytes)\",\n+                  pageStore.getCacheSize());\n+          return false;\n+        }\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"Failed to restore PageStore\", e);\n+      return false;\n+    }\n+    LOG.info(\"Restored PageStore with {} existing pages and {} bytes\",\n+        metaStore.pages(), metaStore.bytes());\n+    return true;\n+  }\n+\n   /**\n    * @param conf the Alluxio configuration\n    * @return an instance of {@link LocalCacheManager}\n    */\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = null;\n+    boolean restored = false;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      pageStore = PageStore.create(options, false);\n+      restored = restore(pageStore, options, metaStore, evictor);\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);\n+    }\n+    if (!restored) {\n+      metaStore.reset();\n+      evictor.reset();\n+      pageStore = PageStore.create(options, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0612d2c41c3c0423a003dd78da11ac8a36cb5b"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxMzgzNQ==", "bodyText": "added", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385413835", "createdAt": "2020-02-27T22:41:45Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -71,31 +76,70 @@\n   @GuardedBy(\"mMetaLock\")\n   private final MetaStore mMetaStore;\n \n+  /**\n+   * Restores a page store a the configured location, updating meta store and evictor.\n+   *\n+   * @param pageStore page store\n+   * @param options page store options\n+   * @param metaStore meta store\n+   * @param evictor evictor\n+   * @return whether the restore succeeds or not\n+   */\n+  private static boolean restore(\n+      PageStore pageStore, PageStoreOptions options, MetaStore metaStore, CacheEvictor evictor) {\n+    LOG.info(\"Restore PageStore with {}\", options);\n+    Path rootDir = Paths.get(options.getRootDir());\n+    if (!Files.exists(rootDir)) {\n+      LOG.error(\"Directory {} does not exist\", rootDir);\n+      return false;\n+    }\n+    try (Stream<PageInfo> stream = pageStore.getPages()) {\n+      Iterator<PageInfo> iterator = stream.iterator();\n+      while (iterator.hasNext()) {\n+        PageInfo pageInfo = iterator.next();\n+        if (pageInfo == null) {\n+          LOG.error(\"Invalid page info\");\n+          return false;\n+        }\n+        metaStore.addPage(pageInfo.getPageId(), pageInfo);\n+        evictor.updateOnPut(pageInfo.getPageId());\n+        if (metaStore.bytes() > pageStore.getCacheSize()) {\n+          LOG.error(\"Loaded pages exceed cache capacity ({} bytes)\",\n+                  pageStore.getCacheSize());\n+          return false;\n+        }\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"Failed to restore PageStore\", e);\n+      return false;\n+    }\n+    LOG.info(\"Restored PageStore with {} existing pages and {} bytes\",\n+        metaStore.pages(), metaStore.bytes());\n+    return true;\n+  }\n+\n   /**\n    * @param conf the Alluxio configuration\n    * @return an instance of {@link LocalCacheManager}\n    */\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = null;\n+    boolean restored = false;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      pageStore = PageStore.create(options, false);\n+      restored = restore(pageStore, options, metaStore, evictor);\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);\n+    }\n+    if (!restored) {\n+      metaStore.reset();\n+      evictor.reset();\n+      pageStore = PageStore.create(options, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5ODIxMA=="}, "originalCommit": {"oid": "ed0612d2c41c3c0423a003dd78da11ac8a36cb5b"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1956, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}