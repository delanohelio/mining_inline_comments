{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMjc1MDk2", "number": 11364, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjo0OTozM1rOD3fxzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozOTo0MlrOD3gtFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTE4OTI1OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjo0OTozM1rOGNxv5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjo0OTozM1rOGNxv5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5OTc0OA==", "bodyText": "Introduce alluxio.jnifuse.FuseException  rather than still referencing jnrfuse", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417099748", "createdAt": "2020-04-29T06:49:33Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuse.java", "diffHunk": "@@ -60,32 +94,29 @@ public static void main(String[] args) {\n       System.exit(1);\n     }\n \n-    final FileSystem tfs = FileSystem.Factory.create(conf);\n-    final AlluxioFuseFileSystem fs = new AlluxioFuseFileSystem(tfs, opts, conf);\n-    final List<String> fuseOpts = opts.getFuseOpts();\n-    // Force direct_io in FUSE: writes and reads bypass the kernel page\n-    // cache and go directly to alluxio. This avoids extra memory copies\n-    // in the write path.\n-    fuseOpts.add(\"-odirect_io\");\n+    try (final FileSystem fs = FileSystem.Factory.create(conf)) {\n+      final AlluxioFuseFileSystem fuseFs = new AlluxioFuseFileSystem(fs, opts, conf);\n+      final List<String> fuseOpts = opts.getFuseOpts();\n+      // Force direct_io in FUSE: writes and reads bypass the kernel page\n+      // cache and go directly to alluxio. This avoids extra memory copies\n+      // in the write path.\n+      // TODO: support kernel_cache (https://github.com/Alluxio/alluxio/issues/10840)\n+      fuseOpts.add(\"-odirect_io\");\n \n-    try {\n-      fs.mount(Paths.get(opts.getMountPoint()), true, opts.isDebug(),\n-          fuseOpts.toArray(new String[0]));\n-      LOG.info(\"Mounted Alluxio: mount point=\\\"{}\\\", opts=\\\"{}\\\"\",\n-          opts.getMountPoint(), fuseOpts.toArray(new String[0]));\n-    } catch (FuseException e) {\n-      LOG.error(\"Failed to mount {}\", opts.getMountPoint(), e);\n-      // only try to umount file system when exception occurred.\n-      // jnr-fuse registers JVM shutdown hook to ensure fs.umount()\n-      // will be executed when this process is exiting.\n-      fs.umount();\n-    } finally {\n       try {\n-        tfs.close();\n-        LOG.info(\"Closed Alluxio file system.\");\n-      } catch (Exception e) {\n-        LOG.error(\"Failed to close Alluxio file system\", e);\n+        fuseFs.mount(Paths.get(opts.getMountPoint()), true, opts.isDebug(),\n+            fuseOpts.toArray(new String[0]));\n+        LOG.info(\"Mounted Alluxio: mount point=\\\"{}\\\", OPTIONS=\\\"{}\\\"\",\n+            opts.getMountPoint(), fuseOpts.toArray(new String[0]));\n+      } catch (FuseException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTE5ODM2OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjo1Mjo0MlrOGNx1FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo1ODozNlrOGN1zYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwMTA3Nw==", "bodyText": "Why Pinter to long? do we fill anything here?", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417101077", "createdAt": "2020-04-29T06:52:42Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java", "diffHunk": "@@ -641,14 +642,14 @@ private int readInternal(String path, Pointer buf, @size_t long size, @off_t lon\n    * @return 0 on success, a negative value on error\n    */\n   @Override\n-  public int readdir(String path, Pointer buff, FuseFillDir filter,\n-      @off_t long offset, FuseFileInfo fi) {\n+  public int readdir(String path, long buff, FuseFillDir filter, @off_t long offset,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 244}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2NjE3OQ==", "bodyText": "long buff point to a native buffer, and it will be used by a Java-to-Native callback filter.", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417166179", "createdAt": "2020-04-29T08:58:36Z", "author": {"login": "iluoeli"}, "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java", "diffHunk": "@@ -641,14 +642,14 @@ private int readInternal(String path, Pointer buf, @size_t long size, @off_t lon\n    * @return 0 on success, a negative value on error\n    */\n   @Override\n-  public int readdir(String path, Pointer buff, FuseFillDir filter,\n-      @off_t long offset, FuseFileInfo fi) {\n+  public int readdir(String path, long buff, FuseFillDir filter, @off_t long offset,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwMTA3Nw=="}, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 244}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTIwMjE1OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/jnifuse/FuseFillDir.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjo1NDoxMlrOGNx3Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOTowMDoxNFrOGN127g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwMTY2Mg==", "bodyText": "hard to tell what this class from the name. can you add javadoc for this class (required for all public classes or style checker will fail)", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417101662", "createdAt": "2020-04-29T06:54:12Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/FuseFillDir.java", "diffHunk": "@@ -7,27 +7,28 @@\n  * either express or implied, as more fully set forth in the License.\n  *\n  * See the NOTICE file distributed with this work for information regarding copyright ownership.\n- *\n  */\n \n package alluxio.jnifuse;\n \n+import alluxio.jnifuse.struct.FileStat;\n+\n import java.nio.ByteBuffer;\n \n-public class FuseFiller {\n+public class FuseFillDir {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2NzA4Ng==", "bodyText": "rename FuseFiller to FuseFillDir to keep consisteny with jnr-fuse", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417167086", "createdAt": "2020-04-29T09:00:14Z", "author": {"login": "iluoeli"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/FuseFillDir.java", "diffHunk": "@@ -7,27 +7,28 @@\n  * either express or implied, as more fully set forth in the License.\n  *\n  * See the NOTICE file distributed with this work for information regarding copyright ownership.\n- *\n  */\n \n package alluxio.jnifuse;\n \n+import alluxio.jnifuse.struct.FileStat;\n+\n import java.nio.ByteBuffer;\n \n-public class FuseFiller {\n+public class FuseFillDir {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwMTY2Mg=="}, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTIwMzE3OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/jnifuse/FuseFillDir.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjo1NDozMVrOGNx36Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjo1NDozMVrOGNx36Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwMTgwMQ==", "bodyText": "javadoc all public method in Alluxio code base", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417101801", "createdAt": "2020-04-29T06:54:31Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/FuseFillDir.java", "diffHunk": "@@ -7,27 +7,28 @@\n  * either express or implied, as more fully set forth in the License.\n  *\n  * See the NOTICE file distributed with this work for information regarding copyright ownership.\n- *\n  */\n \n package alluxio.jnifuse;\n \n+import alluxio.jnifuse.struct.FileStat;\n+\n import java.nio.ByteBuffer;\n \n-public class FuseFiller {\n+public class FuseFillDir {\n   long address;\n \n-  FuseFiller(long address) {\n+  FuseFillDir(long address) {\n     this.address = address;\n   }\n \n-  public native int doFill(long bufaddr, String name, ByteBuffer stbuf, long off);\n+  public native int fill(long address, long bufaddr, String name, ByteBuffer stbuf, long off);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTIwODYxOnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/jnifuse/FuseStubFS.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjo1NjoyM1rOGNx7LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjo1NjoyM1rOGNx7LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwMjYzNg==", "bodyText": "this class is claimed as abstract but no method is claimed as abstract.\nI would make all api methods abstract.", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417102636", "createdAt": "2020-04-29T06:56:23Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/FuseStubFS.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse;\n+\n+import alluxio.jnifuse.struct.FileStat;\n+import alluxio.jnifuse.struct.FuseContext;\n+import alluxio.jnifuse.struct.FuseFileInfo;\n+import alluxio.jnifuse.struct.Statvfs;\n+import alluxio.util.OSUtils;\n+\n+import org.apache.commons.lang.NotImplementedException;\n+import ru.serce.jnrfuse.ErrorCodes;\n+import ru.serce.jnrfuse.FuseException;\n+import ru.serce.jnrfuse.utils.MountUtils;\n+import ru.serce.jnrfuse.utils.SecurityUtils;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Abstract class for Fuse FS Stub.\n+ */\n+public abstract class FuseStubFS {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTIyMjgwOnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzowMToxNFrOGNyDcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzowMToxNFrOGNyDcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwNDc1Mw==", "bodyText": "For your info, Im cool to leave alluxio.jnifuse.struct to use your current c-like style for readability.", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417104753", "createdAt": "2020-04-29T07:01:14Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import alluxio.util.OSUtils;\n+\n+import java.nio.ByteBuffer;\n+\n+public class FileStat extends Struct {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTIzMTA4OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/FuseContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzowNDowNFrOGNyISw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzowNDowNFrOGNyISw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwNTk5NQ==", "bodyText": "remove two empty lines (line 24, 25)", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417105995", "createdAt": "2020-04-29T07:04:04Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/FuseContext.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import java.nio.ByteBuffer;\n+\n+public class FuseContext extends Struct {\n+\n+  public final Unsigned32 uid = new Unsigned32();\n+  public final Unsigned32 gid = new Unsigned32();\n+\n+  public FuseContext(ByteBuffer buffer) {\n+    super(buffer);\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTI4MTQ3OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/FuseFileInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyMDo0OVrOGNymDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyMDo0OVrOGNymDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExMzYxNA==", "bodyText": "depending on the fuse version, can you duoble check this is consistent with https://github.com/libfuse/libfuse/blob/fuse_2_9_bugfix/include/fuse_common.h (if we target fuse 2.9)\nplease include the link to the header file in the javadoc\ninclude in javadoc that this works with only Linux or MacOS (if that is the case)", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417113614", "createdAt": "2020-04-29T07:20:49Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/FuseFileInfo.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import java.nio.ByteBuffer;\n+\n+public class FuseFileInfo extends Struct {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTI4MzI5OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/native/libjnifuse/JniFuseFileSystem.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyMToyMlrOGNynJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyMToyMlrOGNynJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExMzg5NQ==", "bodyText": "newline needed", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417113895", "createdAt": "2020-04-29T07:21:22Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/native/libjnifuse/JniFuseFileSystem.cc", "diffHunk": "@@ -0,0 +1,167 @@\n+#include <fuse.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <stdlib.h>\n+#include <jni.h>\n+\n+#include \"JniFuseFileSystem.h\"\n+#include \"debug.h\"\n+#include \"fuse.h\"\n+\n+using namespace jnifuse;\n+\n+JniFuseFileSystem::JniFuseFileSystem()\n+{\n+}\n+\n+JniFuseFileSystem::~JniFuseFileSystem()\n+{\n+}\n+\n+void JniFuseFileSystem::init(JNIEnv* env, jobject obj)\n+{\n+    env->GetJavaVM(&this->jvm);\n+    this->fs = env->NewGlobalRef(obj);\n+\n+    this->getattrOper = new GetattrOperation(this);\n+    this->openOper = new OpenOperation(this);\n+    this->readOper = new ReadOperation(this);\n+    this->readdirOper = new ReaddirOperation(this);\n+}\n+\n+JniFuseFileSystem* JniFuseFileSystem::getInstance()\n+{\n+    static JniFuseFileSystem* instance = nullptr;\n+    if (instance == nullptr) {\n+        instance = new JniFuseFileSystem();\n+    }\n+    return instance;\n+}\n+\n+JNIEnv* JniFuseFileSystem::getEnv()\n+{\n+    JNIEnv* env;\n+    this->jvm->AttachCurrentThreadAsDaemon((void **)&env, NULL);\n+    return env;\n+}\n+\n+jobject JniFuseFileSystem::getFSObj()\n+{\n+    return this->fs;\n+}\n+\n+Operation::Operation()\n+{\n+}\n+\n+Operation::~Operation()\n+{\n+}\n+\n+GetattrOperation::GetattrOperation(JniFuseFileSystem* fs) \n+{\n+    this->fs = fs;\n+    JNIEnv* env = this->fs->getEnv();\n+    this->obj = this->fs->getFSObj();\n+    this->clazz = env->GetObjectClass(this->fs->getFSObj());\n+    this->signature = \"(Ljava/lang/String;Ljava/nio/ByteBuffer;)I\";\n+    this->methodID = env->GetMethodID(this->clazz, \"getattrCallback\", signature);\n+}\n+\n+int GetattrOperation::call(const char *path, struct stat* stbuf)\n+{\n+    JNIEnv* env = this->fs->getEnv();\n+    jstring jspath = env->NewStringUTF(path);\n+    jobject buffer = env->NewDirectByteBuffer((void *)stbuf, sizeof(struct stat));\n+\n+    int ret = env->CallIntMethod(this->obj, this->methodID, jspath, buffer);\n+    \n+    env->DeleteLocalRef(jspath);\n+    env->DeleteLocalRef(buffer);\n+\n+    return ret;\n+}\n+\n+OpenOperation::OpenOperation(JniFuseFileSystem* fs)\n+{\n+    this->fs = fs;\n+    JNIEnv* env = this->fs->getEnv();\n+    this->obj = this->fs->getFSObj();\n+    this->clazz = env->GetObjectClass(this->fs->getFSObj());\n+    this->signature = \"(Ljava/lang/String;Ljava/nio/ByteBuffer;)I\";\n+    this->methodID = env->GetMethodID(this->clazz, \"openCallback\", signature);\n+}\n+\n+int OpenOperation::call(const char *path, struct fuse_file_info *fi)\n+{\n+    JNIEnv* env = this->fs->getEnv();\n+    jstring jspath = env->NewStringUTF(path);\n+    jobject fibuf = env->NewDirectByteBuffer((void *)fi, sizeof(struct fuse_file_info));\n+\n+    int ret = env->CallIntMethod(this->obj, this->methodID, jspath, fibuf);\n+\n+    env->DeleteLocalRef(jspath);\n+    env->DeleteLocalRef(fibuf);\n+\n+    return ret;\n+}\n+\n+ReadOperation::ReadOperation(JniFuseFileSystem* fs)\n+{\n+    this->fs = fs;\n+    JNIEnv* env = this->fs->getEnv();\n+    this->obj = this->fs->getFSObj();\n+    this->clazz = env->GetObjectClass(this->fs->getFSObj());\n+    this->signature = \"(Ljava/lang/String;Ljava/nio/ByteBuffer;JJLjava/nio/ByteBuffer;)I\";\n+    this->methodID = env->GetMethodID(this->clazz, \"readCallback\", signature);\n+}\n+\n+int ReadOperation::call(const char *path, char *buf, size_t size, off_t offset, struct fuse_file_info *fi)\n+{\n+    JNIEnv* env = this->fs->getEnv();\n+    jstring jspath = env->NewStringUTF(path);\n+    jobject buffer = env->NewDirectByteBuffer((void *)buf, size);\n+    jobject fibuf = env->NewDirectByteBuffer((void *)fi, sizeof(struct fuse_file_info));\n+    \n+    int ret = env->CallIntMethod(this->obj, this->methodID, jspath, buffer, size, offset, fibuf);\n+\n+    env->DeleteLocalRef(jspath);\n+    env->DeleteLocalRef(buffer);\n+    env->DeleteLocalRef(fibuf);\n+\n+    return ret;\n+}\n+\n+ReaddirOperation::ReaddirOperation(JniFuseFileSystem* fs)\n+{\n+    this->fs = fs;\n+    JNIEnv* env = this->fs->getEnv();\n+    this->obj = this->fs->getFSObj();\n+    this->clazz = env->GetObjectClass(this->fs->getFSObj());\n+    this->signature = \"(Ljava/lang/String;JLalluxio/jnifuse/FuseFillDir;JLjava/nio/ByteBuffer;)I\";\n+    this->methodID = env->GetMethodID(this->clazz, \"readdirCallback\", signature);\n+\n+    this->fillerclazz = env->FindClass(\"alluxio/jnifuse/FuseFillDir\");\n+    this->fillerconstructor = env->GetMethodID(fillerclazz, \"<init>\", \"(J)V\");\n+}\n+\n+int ReaddirOperation::call(const char* path, void* buf, fuse_fill_dir_t filler,\n+        off_t offset, struct fuse_file_info* fi) {\n+    \n+    JNIEnv* env = this->fs->getEnv();\n+\n+    jobject fillerobj = env->NewObject(this->fillerclazz, this->fillerconstructor, (void *)filler);\n+    \n+    jstring jspath = env->NewStringUTF(path);\n+    jobject fibuf = env->NewDirectByteBuffer((void *)fi, sizeof(struct fuse_file_info));\n+\n+    int ret = env->CallIntMethod(this->obj, this->methodID, jspath, buf, fillerobj, offset, fibuf);\n+\n+    env->DeleteLocalRef(fillerobj);\n+    env->DeleteLocalRef(jspath);\n+    env->DeleteLocalRef(fibuf);\n+\n+    return ret;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTI4NTg3OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/Statvfs.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyMjoxMVrOGNyosQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyMjoxMVrOGNyosQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNDI4OQ==", "bodyText": "same here, double check the version and include the link to the corresponding header file in javadoc", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417114289", "createdAt": "2020-04-29T07:22:11Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/Statvfs.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import java.nio.ByteBuffer;\n+\n+public class Statvfs extends Struct {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTI5MTk0OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/native/libjnifuse/JniFuseFileSystem.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNDowNVrOGNysSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNDowNVrOGNysSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNTIwOA==", "bodyText": "keep each section of include sorted", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417115208", "createdAt": "2020-04-29T07:24:05Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/native/libjnifuse/JniFuseFileSystem.cc", "diffHunk": "@@ -0,0 +1,167 @@\n+#include <fuse.h>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTI5NTA3OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/native/libjnifuse/JniFuseFileSystem.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNToxMVrOGNyuSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNToxMVrOGNyuSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNTcyMQ==", "bodyText": "newline needed", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417115721", "createdAt": "2020-04-29T07:25:11Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/native/libjnifuse/JniFuseFileSystem.h", "diffHunk": "@@ -0,0 +1,77 @@\n+#ifndef _JNI_FUSE_FILE_SYSTEM_H\n+#define _JNI_FUSE_FILE_SYSTEM_H\n+\n+#include \"jni.h\"\n+\n+namespace jnifuse {\n+\n+class Operation;\n+class GetattrOperation;\n+class OpenOperation;\n+class ReadOperation;\n+class ReaddirOperation;\n+    \n+class JniFuseFileSystem\n+{\n+private:\n+    JniFuseFileSystem();\n+    ~JniFuseFileSystem();\n+public:\n+    static JniFuseFileSystem* getInstance();\n+    void init(JNIEnv* env, jobject obj);\n+    JNIEnv* getEnv();\n+    jobject getFSObj();\n+private:\n+    JavaVM* jvm;\n+    jobject fs;\n+public:\n+    GetattrOperation *getattrOper;\n+    OpenOperation* openOper;\n+    ReadOperation* readOper;\n+    ReaddirOperation* readdirOper;\n+};\n+\n+class Operation\n+{\n+protected:\n+    JniFuseFileSystem* fs;\n+    jclass clazz;\n+    jobject obj;\n+    jmethodID methodID;\n+    const char *signature;\n+public:\n+    Operation();\n+    ~Operation();\n+};\n+\n+class GetattrOperation: public Operation {\n+public:\n+    GetattrOperation(JniFuseFileSystem* fs);\n+    int call(const char *path, struct stat* stbuf);\n+};\n+\n+class OpenOperation: public Operation {\n+public:\n+    OpenOperation(JniFuseFileSystem* fs);\n+    int call(const char *path, struct fuse_file_info *fi);\n+};\n+\n+class ReadOperation: public Operation {\n+public:\n+    ReadOperation(JniFuseFileSystem* fs);\n+    int call(const char *path, char *buf, size_t size, off_t offset, struct fuse_file_info *fi);\n+};\n+\n+class ReaddirOperation: public Operation {\n+public:\n+    ReaddirOperation(JniFuseFileSystem* fs);\n+    int call(const char* path, void* buf, fuse_fill_dir_t filler,\n+            off_t offset, struct fuse_file_info* fi);\n+private:\n+    jclass fillerclazz;\n+    jmethodID fillerconstructor;\n+};\n+\n+}\n+\n+#endif", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTI5NjM4OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/native/libjnifuse/JniFuseHelper.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNTozOFrOGNyvHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNTozOFrOGNyvHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNTkzMw==", "bodyText": "isn't this needed?", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417115933", "createdAt": "2020-04-29T07:25:38Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/native/libjnifuse/JniFuseHelper.cc", "diffHunk": "@@ -0,0 +1,108 @@\n+#define FUSE_USE_VERSION 26\n+\n+#include <fuse.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <stdlib.h>\n+#include <jni.h>\n+\n+#include \"debug.h\"\n+#include \"JniFuseFileSystem.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+static int getattr_wrapper(const char *path, struct stat* stbuf)\n+{\n+  LOGD(\"getattr %s\", path);\n+\n+  int ret = jnifuse::JniFuseFileSystem::getInstance()->getattrOper->call(path, stbuf);\n+\n+  LOGD(\"file %s: size=%ld, mod=%d\", path, stbuf->st_size, stbuf->st_mode);\n+\n+  return ret;\n+}\n+\n+static int open_wrapper(const char *path, struct fuse_file_info *fi)\n+{\n+  LOGD(\"open %s\\n\", path);\n+\n+  int ret = jnifuse::JniFuseFileSystem::getInstance()->openOper->call(path, fi);\n+\n+  return ret;\n+}\n+\n+static int read_wrapper(const char *path, char *buf, size_t size, off_t offset,\n+\t\t      struct fuse_file_info *fi)\n+{\n+    LOGD(\"read: %s\\n\", path);\n+\n+    int ret = jnifuse::JniFuseFileSystem::getInstance()->readOper->call(path, buf, size, offset, fi);\n+\n+    LOGD(\"nread=%d\\n\", ret);\n+\n+    return ret;\n+}\n+\n+static int readdir_wrapper(const char* path, void* buf, fuse_fill_dir_t filler,\n+            off_t offset, struct fuse_file_info* fi)\n+{\n+    LOGD(\"readdir: %s\\n\", path);\n+\n+    int ret = jnifuse::JniFuseFileSystem::getInstance()->readdirOper->call(path, buf, filler, offset, fi);\n+\n+    return ret;\n+}\n+\n+// TODO: Add more operations\n+// NOTE: \n+static struct fuse_operations jnifuse_oper = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTI5Njg5OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/native/libjnifuse/JniFuseHelper.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNTo0N1rOGNyvbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNTo0N1rOGNyvbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNjAxNQ==", "bodyText": "newline", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417116015", "createdAt": "2020-04-29T07:25:47Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/native/libjnifuse/JniFuseHelper.cc", "diffHunk": "@@ -0,0 +1,108 @@\n+#define FUSE_USE_VERSION 26\n+\n+#include <fuse.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <stdlib.h>\n+#include <jni.h>\n+\n+#include \"debug.h\"\n+#include \"JniFuseFileSystem.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+static int getattr_wrapper(const char *path, struct stat* stbuf)\n+{\n+  LOGD(\"getattr %s\", path);\n+\n+  int ret = jnifuse::JniFuseFileSystem::getInstance()->getattrOper->call(path, stbuf);\n+\n+  LOGD(\"file %s: size=%ld, mod=%d\", path, stbuf->st_size, stbuf->st_mode);\n+\n+  return ret;\n+}\n+\n+static int open_wrapper(const char *path, struct fuse_file_info *fi)\n+{\n+  LOGD(\"open %s\\n\", path);\n+\n+  int ret = jnifuse::JniFuseFileSystem::getInstance()->openOper->call(path, fi);\n+\n+  return ret;\n+}\n+\n+static int read_wrapper(const char *path, char *buf, size_t size, off_t offset,\n+\t\t      struct fuse_file_info *fi)\n+{\n+    LOGD(\"read: %s\\n\", path);\n+\n+    int ret = jnifuse::JniFuseFileSystem::getInstance()->readOper->call(path, buf, size, offset, fi);\n+\n+    LOGD(\"nread=%d\\n\", ret);\n+\n+    return ret;\n+}\n+\n+static int readdir_wrapper(const char* path, void* buf, fuse_fill_dir_t filler,\n+            off_t offset, struct fuse_file_info* fi)\n+{\n+    LOGD(\"readdir: %s\\n\", path);\n+\n+    int ret = jnifuse::JniFuseFileSystem::getInstance()->readdirOper->call(path, buf, filler, offset, fi);\n+\n+    return ret;\n+}\n+\n+// TODO: Add more operations\n+// NOTE: \n+static struct fuse_operations jnifuse_oper = {\n+  // .getattr = getattr_wrapper,\n+  // .open = open_wrapper,\n+  // .read = read_wrapper,\n+  // .readdir = readdir_wrapper\n+};\n+\n+JNIEXPORT jint JNICALL Java_alluxio_jnifuse_LibFuse_fuse_1main_1real\n+  (JNIEnv *env, jobject libfuseobj, jobject obj, jint jargc, jobjectArray jargv)\n+{\n+  LOGD(\"enter fuse_main_real\");\n+\n+  jnifuse::JniFuseFileSystem* fs = jnifuse::JniFuseFileSystem::getInstance();\n+  fs->init(env, obj);\n+\n+  int argc = jargc;\n+  LOGD(\"argc=%d\", argc);\n+\n+  char **argv = (char **)malloc(sizeof(char*) * argc);\n+  int i;\n+  for (i=0; i < argc; i++) {\n+    jstring str = (jstring)env->GetObjectArrayElement(jargv, i);\n+    argv[i] = (char*)env->GetStringUTFChars(str, 0);\n+    LOGD(\"argv[%d]=%s\", i, argv[i]);\n+  }\n+\n+  jnifuse_oper.getattr = getattr_wrapper;\n+  jnifuse_oper.open = open_wrapper;\n+  jnifuse_oper.read = read_wrapper;\n+  jnifuse_oper.readdir = readdir_wrapper;\n+\n+  return fuse_main_real(argc, argv, &jnifuse_oper, sizeof(struct fuse_operations), NULL);\n+}\n+\n+jint JNICALL Java_alluxio_jnifuse_FuseFillDir_fill\n+    (JNIEnv *env, jobject obj, jlong address, jlong bufaddr, jstring name, jobject stbuf, jlong off)\n+{\n+  LOGD(\"enter fill\"); \n+  fuse_fill_dir_t filler = (fuse_fill_dir_t) (void *)address;\n+  const char* fn = env->GetStringUTFChars(name, 0);\n+\n+  return filler((void* )bufaddr, fn, NULL, 0);\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTMwMjcyOnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/native/libjnifuse/Makefile", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNzozNVrOGNyy5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNzozNVrOGNyy5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNjkwMw==", "bodyText": "since you are writing in C++ now, this should be CXX not CC", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417116903", "createdAt": "2020-04-29T07:27:35Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/native/libjnifuse/Makefile", "diffHunk": "@@ -1,6 +1,6 @@\n-CC := gcc\n+CC := g++", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTMwMzk1OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/native/libjnifuse/Makefile", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyODowNlrOGNyzuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyODowNlrOGNyzuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNzExMg==", "bodyText": "CXXFLAGS", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417117112", "createdAt": "2020-04-29T07:28:06Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/native/libjnifuse/Makefile", "diffHunk": "@@ -15,18 +15,18 @@ ifeq ($(UNAME), Darwin)\n \tTARGET_LIB := libjnifuse.dylib\n endif\n \n-CFLAGS = -Wall -fPIC ${INCDIR} ${FUSE_CFLAGS}\n+CFLAGS = -Wall -fPIC -D_FILE_OFFSET_BITS=64 ${INCDIR} ${FUSE_CFLAGS}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTMxMTg0OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/test/java/alluxio/jnifuse/struct/FuseFileInfoTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozMDoxOFrOGNy4QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozMDoxOFrOGNy4QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExODI3Mw==", "bodyText": "NITPICK: unnecessary empty lines (line 23 27 33 35). let's keep the src code concise and compact in general", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417118273", "createdAt": "2020-04-29T07:30:18Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/test/java/alluxio/jnifuse/struct/FuseFileInfoTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import jnr.ffi.Pointer;\n+import jnr.ffi.Runtime;\n+import org.junit.Test;\n+\n+import java.nio.ByteBuffer;\n+\n+public class FuseFileInfoTest {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTMxNjU4OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/test/java/alluxio/jnifuse/struct/StatvfsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozMTo1MlrOGNy7Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozMTo1MlrOGNy7Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExOTAxOA==", "bodyText": "actually a good idea to compare JNI and JNR implementations.\nSo maybe we should not aim to totally remove dependency on JNRFuse but leave it in test scope", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417119018", "createdAt": "2020-04-29T07:31:52Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/test/java/alluxio/jnifuse/struct/StatvfsTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import jnr.ffi.Pointer;\n+import jnr.ffi.Runtime;\n+import org.junit.Test;\n+\n+import java.nio.ByteBuffer;\n+\n+public class StatvfsTest {\n+  @Test\n+  public void offset() {\n+    Statvfs jni = new Statvfs(ByteBuffer.allocate(256));\n+\n+    ru.serce.jnrfuse.struct.Statvfs jnr =\n+        ru.serce.jnrfuse.struct.Statvfs.of(Pointer.wrap(Runtime.getSystemRuntime(), 0x0));\n+\n+    assertEquals(jnr.f_bsize.offset(), jni.f_bsize.offset());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTMxODI3OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/native/libjnifuse/JniFuseFileSystem.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozMjoyM1rOGNy8Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozMjoyM1rOGNy8Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExOTI3NQ==", "bodyText": "sort", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417119275", "createdAt": "2020-04-29T07:32:23Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/native/libjnifuse/JniFuseFileSystem.h", "diffHunk": "@@ -0,0 +1,77 @@\n+#ifndef _JNI_FUSE_FILE_SYSTEM_H\n+#define _JNI_FUSE_FILE_SYSTEM_H\n+\n+#include \"jni.h\"\n+\n+namespace jnifuse {\n+\n+class Operation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTMyMzU4OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozNDowNlrOGNy_bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOTowNDo0NVrOGN2A7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMDExMA==", "bodyText": "this seems not fully implemented for timespec? Now alluxio.fuse.AlluxioFuseFileSystemTest will not compile due to this issue.", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417120110", "createdAt": "2020-04-29T07:34:06Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import alluxio.util.OSUtils;\n+\n+import java.nio.ByteBuffer;\n+\n+public class FileStat extends Struct {\n+  public static final int S_IFIFO = 0010000; // named pipe (fifo)\n+  public static final int S_IFCHR = 0020000; // character special\n+  public static final int S_IFDIR = 0040000; // directory\n+  public static final int S_IFBLK = 0060000; // block special\n+  public static final int S_IFREG = 0100000; // regular\n+  public static final int S_IFLNK = 0120000; // symbolic link\n+  public static final int S_IFSOCK = 0140000; // socket\n+  public static final int S_IFMT = 0170000; // file mask for type checks\n+  public static final int S_ISUID = 0004000; // set user id on execution\n+  public static final int S_ISGID = 0002000; // set group id on execution\n+  public static final int S_ISVTX = 0001000; // save swapped text even after use\n+  public static final int S_IRUSR = 0000400; // read permission, owner\n+  public static final int S_IWUSR = 0000200; // write permission, owner\n+  public static final int S_IXUSR = 0000100; // execute/search permission, owner\n+  public static final int S_IRGRP = 0000040; // read permission, group\n+  public static final int S_IWGRP = 0000020; // write permission, group\n+  public static final int S_IXGRP = 0000010; // execute/search permission, group\n+  public static final int S_IROTH = 0000004; // read permission, other\n+  public static final int S_IWOTH = 0000002; // write permission, other\n+  public static final int S_IXOTH = 0000001; // execute permission, other\n+\n+  public static final int ALL_READ = S_IRUSR | S_IRGRP | S_IROTH;\n+  public static final int ALL_WRITE = S_IWUSR | S_IWGRP | S_IWOTH;\n+  public static final int S_IXUGO = S_IXUSR | S_IXGRP | S_IXOTH;\n+\n+  public static boolean S_ISTYPE(int mode, int mask) {\n+    return (mode & S_IFMT) == mask;\n+  }\n+\n+  public static boolean S_ISDIR(int mode) {\n+    return S_ISTYPE(mode, S_IFDIR);\n+  }\n+\n+  public static boolean S_ISCHR(int mode) {\n+    return S_ISTYPE(mode, S_IFCHR);\n+  }\n+\n+  public static boolean S_ISBLK(int mode) {\n+    return S_ISTYPE(mode, S_IFBLK);\n+  }\n+\n+  public static boolean S_ISREG(int mode) {\n+    return S_ISTYPE(mode, S_IFREG);\n+  }\n+\n+  public static boolean S_ISFIFO(int mode) {\n+    return S_ISTYPE(mode, S_IFIFO);\n+  }\n+\n+  public static boolean S_ISLNK(int mode) {\n+    return S_ISTYPE(mode, S_IFLNK);\n+  }\n+\n+  public FileStat(ByteBuffer buffer) {\n+    super(buffer);\n+    // TODO: support Mac & Windows platform\n+    if (OSUtils.isMacOS()) {\n+      System.exit(-1);\n+    } else if (OSUtils.isWindows()) {\n+      System.exit(-1);\n+    } else {\n+      // Linux platform\n+    }\n+    st_dev = new Unsigned64();\n+    pad1 = null;\n+    st_ino = new Unsigned64();\n+    st_nlink = new Unsigned64();\n+    st_mode = new Unsigned32();\n+    st_uid = new Unsigned32();\n+    st_gid = new Unsigned32();\n+    st_rdev = new Unsigned64();\n+    st_size = new SignedLong();\n+    st_blksize = new SignedLong();\n+    st_blocks = new SignedLong();\n+    st_atim = new SignedLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2OTY0NQ==", "bodyText": "I will try to fix it immediatly", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417169645", "createdAt": "2020-04-29T09:04:45Z", "author": {"login": "iluoeli"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import alluxio.util.OSUtils;\n+\n+import java.nio.ByteBuffer;\n+\n+public class FileStat extends Struct {\n+  public static final int S_IFIFO = 0010000; // named pipe (fifo)\n+  public static final int S_IFCHR = 0020000; // character special\n+  public static final int S_IFDIR = 0040000; // directory\n+  public static final int S_IFBLK = 0060000; // block special\n+  public static final int S_IFREG = 0100000; // regular\n+  public static final int S_IFLNK = 0120000; // symbolic link\n+  public static final int S_IFSOCK = 0140000; // socket\n+  public static final int S_IFMT = 0170000; // file mask for type checks\n+  public static final int S_ISUID = 0004000; // set user id on execution\n+  public static final int S_ISGID = 0002000; // set group id on execution\n+  public static final int S_ISVTX = 0001000; // save swapped text even after use\n+  public static final int S_IRUSR = 0000400; // read permission, owner\n+  public static final int S_IWUSR = 0000200; // write permission, owner\n+  public static final int S_IXUSR = 0000100; // execute/search permission, owner\n+  public static final int S_IRGRP = 0000040; // read permission, group\n+  public static final int S_IWGRP = 0000020; // write permission, group\n+  public static final int S_IXGRP = 0000010; // execute/search permission, group\n+  public static final int S_IROTH = 0000004; // read permission, other\n+  public static final int S_IWOTH = 0000002; // write permission, other\n+  public static final int S_IXOTH = 0000001; // execute permission, other\n+\n+  public static final int ALL_READ = S_IRUSR | S_IRGRP | S_IROTH;\n+  public static final int ALL_WRITE = S_IWUSR | S_IWGRP | S_IWOTH;\n+  public static final int S_IXUGO = S_IXUSR | S_IXGRP | S_IXOTH;\n+\n+  public static boolean S_ISTYPE(int mode, int mask) {\n+    return (mode & S_IFMT) == mask;\n+  }\n+\n+  public static boolean S_ISDIR(int mode) {\n+    return S_ISTYPE(mode, S_IFDIR);\n+  }\n+\n+  public static boolean S_ISCHR(int mode) {\n+    return S_ISTYPE(mode, S_IFCHR);\n+  }\n+\n+  public static boolean S_ISBLK(int mode) {\n+    return S_ISTYPE(mode, S_IFBLK);\n+  }\n+\n+  public static boolean S_ISREG(int mode) {\n+    return S_ISTYPE(mode, S_IFREG);\n+  }\n+\n+  public static boolean S_ISFIFO(int mode) {\n+    return S_ISTYPE(mode, S_IFIFO);\n+  }\n+\n+  public static boolean S_ISLNK(int mode) {\n+    return S_ISTYPE(mode, S_IFLNK);\n+  }\n+\n+  public FileStat(ByteBuffer buffer) {\n+    super(buffer);\n+    // TODO: support Mac & Windows platform\n+    if (OSUtils.isMacOS()) {\n+      System.exit(-1);\n+    } else if (OSUtils.isWindows()) {\n+      System.exit(-1);\n+    } else {\n+      // Linux platform\n+    }\n+    st_dev = new Unsigned64();\n+    pad1 = null;\n+    st_ino = new Unsigned64();\n+    st_nlink = new Unsigned64();\n+    st_mode = new Unsigned32();\n+    st_uid = new Unsigned32();\n+    st_gid = new Unsigned32();\n+    st_rdev = new Unsigned64();\n+    st_size = new SignedLong();\n+    st_blksize = new SignedLong();\n+    st_blocks = new SignedLong();\n+    st_atim = new SignedLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMDExMA=="}, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTM0MTAxOnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozOTo0MlrOGNzJ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozOTo0MlrOGNzJ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMjc5MA==", "bodyText": "NOTE, this is some cleanup work I planned to do a long time ago. unrelated to @iluoeli 's change to switch to JNI", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417122790", "createdAt": "2020-04-29T07:39:42Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuse.java", "diffHunk": "@@ -41,15 +43,47 @@\n public final class AlluxioFuse {\n   private static final Logger LOG = LoggerFactory.getLogger(AlluxioFuse.class);\n \n+  private static final Option MOUNT_POINT_OPTION = Option.builder(\"m\")\n+      .hasArg()\n+      .required(true)\n+      .longOpt(\"mount-point\")\n+      .desc(\"Desired local mount point for alluxio-fuse.\")\n+      .build();\n+\n+  private static final Option ALLUXIO_ROOT_OPTION = Option.builder(\"r\")\n+      .hasArg()\n+      .required(true)\n+      .longOpt(\"alluxio-root\")\n+      .desc(\"Path within alluxio that will be used as the root of the FUSE mount \"\n+          + \"(e.g., /users/foo; defaults to /)\")\n+      .build();\n+\n+  private static final Option HELP_OPTION = Option.builder(\"h\")\n+      .required(false)\n+      .desc(\"Print this HELP_OPTION\")\n+      .build();\n+\n+  private static final Option FUSE_MOUNT_OPTION = Option.builder(\"o\")\n+      .valueSeparator(',')\n+      .required(false)\n+      .hasArgs()\n+      .desc(\"FUSE mount options\")\n+      .build();\n+\n+  private static final Options OPTIONS = new Options()\n+      .addOption(MOUNT_POINT_OPTION)\n+      .addOption(ALLUXIO_ROOT_OPTION)\n+      .addOption(HELP_OPTION)\n+      .addOption(FUSE_MOUNT_OPTION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1687, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}