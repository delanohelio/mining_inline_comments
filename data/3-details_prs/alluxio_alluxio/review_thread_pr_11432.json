{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MzAzNjcy", "number": 11432, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDozMzoxOFrOD8un-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0MTo1N1rOD8_pdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDA1MDQ4OnYy", "diffSide": "LEFT", "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDozMzoxOFrOGV2KOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzo0ODowMVrOGV6Ipw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2MDYzNQ==", "bodyText": "Can you try swapping below two lines in DefaultBlockWorker::stop() instead of this logic?\n// Stop heart-beat executors and clients.\nmResourceCloser.close();\n// Stop the base. (closes executors.)\nsuper.stop();", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r425560635", "createdAt": "2020-05-15T04:33:18Z", "author": {"login": "ggezer"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -621,19 +621,33 @@ private Metrics() {} // prevent instantiation\n   @NotThreadSafe\n   public final class StorageChecker implements HeartbeatExecutor {\n \n+    private volatile boolean mClosed = false;\n+    private final AtomicReference<Thread> mThread = new AtomicReference<>(null);\n+\n     @Override\n     public void heartbeat() {\n+      if (mClosed) {\n+        return;\n+      }\n+      mThread.set(Thread.currentThread());\n       try {\n         mBlockStore.checkStorage();\n       } catch (Exception e) {\n         LOG.warn(\"Failed to check storage: {}\", e.toString());\n         LOG.debug(\"Exception: \", e);\n       }\n+      mThread.set(null);\n     }\n \n     @Override\n     public void close() {\n-      // Nothing to clean up", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bb5641042bfc3224ff933a560d48a2c5dc935f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYyNTc2Nw==", "bodyText": "Hmm so I tried this and it worked (the worker shut down in a timely manner)\nBut I don't quite understand why. super.stop() eventually calls mExecutorService.shutdownNow() which should interrupt the threads and stop them from executing.\nBut if the abstract client doesn't have the logic to respond to interrupts that I added here:\nhttps://github.com/Alluxio/alluxio/pull/11432/files#diff-d7dc60da6f1005850b481cc5792912c5R213-R217\nI don't understand why the threads are exiting now?", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r425625767", "createdAt": "2020-05-15T07:48:01Z", "author": {"login": "ZacBlanco"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -621,19 +621,33 @@ private Metrics() {} // prevent instantiation\n   @NotThreadSafe\n   public final class StorageChecker implements HeartbeatExecutor {\n \n+    private volatile boolean mClosed = false;\n+    private final AtomicReference<Thread> mThread = new AtomicReference<>(null);\n+\n     @Override\n     public void heartbeat() {\n+      if (mClosed) {\n+        return;\n+      }\n+      mThread.set(Thread.currentThread());\n       try {\n         mBlockStore.checkStorage();\n       } catch (Exception e) {\n         LOG.warn(\"Failed to check storage: {}\", e.toString());\n         LOG.debug(\"Exception: \", e);\n       }\n+      mThread.set(null);\n     }\n \n     @Override\n     public void close() {\n-      // Nothing to clean up", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2MDYzNQ=="}, "originalCommit": {"oid": "10bb5641042bfc3224ff933a560d48a2c5dc935f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjgzOTU5OnYy", "diffSide": "RIGHT", "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "isResolved": false, "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0MTo1N1rOGWRp9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODozMjo1OFrOGXtdpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ==", "bodyText": "It seems like this order is important. Do we know why this has to be the order, and can we add that into the comments here? It is not obvious with the code.", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r426011125", "createdAt": "2020-05-15T19:41:57Z", "author": {"login": "gpang"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMjExMw==", "bodyText": "I'm still trying to wrap my head around why this even works. Based on the code path the threads don't seem to be daemon threads, and the code path of the heartbeat threads don't indicate anywhere that they respond to thread interrupts.\nI will add a comment once I understand why", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r426012113", "createdAt": "2020-05-15T19:44:01Z", "author": {"login": "ZacBlanco"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ=="}, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4MjE2OA==", "bodyText": "Do you have a consistent repro for this?\nI'd guess we'd still hit this issue without AbstractClient bailing out on interrupt.", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r426082168", "createdAt": "2020-05-15T23:04:03Z", "author": {"login": "ggezer"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ=="}, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4MzI2NQ==", "bodyText": "Looks like BlockMasterSync's heartbeat could be stuck if close here is not reversed?", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r426083265", "createdAt": "2020-05-15T23:09:10Z", "author": {"login": "ggezer"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ=="}, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4ODQ1Ng==", "bodyText": "I have not been able to repro it after only making this change.\nWithout this PR, the consistent repro is\n$ ./bin/alluxio-start.sh master & ./bin/alluxio-start.sh worker & wait\n$ ./bin/alluxio-stop.sh master\n$ ./bin/alluxio-stop.sh worker\nIf you want to grab a jstack during that time you can run:\n$ ./bin/alluxio-start.sh master & ./bin/alluxio-start.sh worker & wait\n$ ./bin/alluxio-stop.sh master && sleep 5 && (./bin/alluxio-stop.sh worker & sleep 1 && jstack -l `jps | grep AlluxioWorker | awk '{print $1}'`)", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r426088456", "createdAt": "2020-05-15T23:34:06Z", "author": {"login": "ZacBlanco"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ=="}, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5MDM0Ng==", "bodyText": "This looks very aggressive, in restarting the master and that strengthens my hypothesis of BlockMasterSync being the culprit. After all, it's the only one that actually closes something in its #close()", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r426090346", "createdAt": "2020-05-15T23:44:01Z", "author": {"login": "ggezer"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ=="}, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyMjY5Nw==", "bodyText": "Looks like this is caused by sharing DefaultBlockWorkerClient::mFileSystemMasterClient with PinListSync.\nAbstractClient's close and connect methods are synchronized. While PinListSync is trying to connect (to a master that is down), DefaultBlockWorker is trying to close the very same client as part of mResourceCloser.close() call. So shutdown will be blocked until the PinListSync times out. This is confirmed by the jstacks in the ticket.\nAs for the mystery, It seems shutting down the base-executor helps bailing PinListSync out and the following call to mResourceCloser.close() doesn't get stuck. This means we don't need that bail-out condition on AbstractClient as it seems to handle interruptions somewhere else.\nThat being said, I believe the proper fix is to host FileSystemClientPool in DefaultBlockWorker instead of a single FileSystemMasterClient. So we can isolate FileSystemMasterClient resources between the DefaultBlockWorker and the PinListSync.", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r426122697", "createdAt": "2020-05-16T06:00:48Z", "author": {"login": "ggezer"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ=="}, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyNjA0Mg==", "bodyText": "@ggezer I implemented your suggested changes in the previous comment by creating an FS client pool instead. While at this point clients weren't locked on each other. It seemed that they now all hang trying to connect to the master.\nhttps://pastebin.com/Nc6yVr2q\nThe worker block sync still blocked shutdown:\n\"Worker Block Sync\": sleeping, holding [0x00000006c04cf6a8, 0x00000006c099e598]\n\tat java.lang.Thread.sleep(Native Method)\n\tat alluxio.time.ThreadSleeper.sleep(ThreadSleeper.java:26)\n\tat alluxio.retry.TimeBoundedRetry.attempt(TimeBoundedRetry.java:67)\n\tat alluxio.AbstractClient.connect(AbstractClient.java:209)\n\tat alluxio.AbstractClient.retryRPCInternal(AbstractClient.java:397)\n\tat alluxio.AbstractClient.retryRPC(AbstractClient.java:365)\n\tat alluxio.worker.block.BlockMasterClient.heartbeat(BlockMasterClient.java:190)\n\tat alluxio.worker.block.BlockMasterSync.heartbeat(BlockMasterSync.java:129)\n\tat alluxio.heartbeat.HeartbeatThread.run(HeartbeatThread.java:119)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r426826042", "createdAt": "2020-05-18T18:47:10Z", "author": {"login": "ZacBlanco"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ=="}, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNTY3OA==", "bodyText": "I see. Closing the pools is blocked.\n\"alluxio-process-shutdown-hook\" #292 prio=5 os_prio=0 tid=0x00007f6e2c002800 nid=0xdd9f waiting for monitor entry [0x00007f724f8f8000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n    at alluxio.AbstractClient.close(AbstractClient.java:310)\n    - waiting to lock <0x00000006c04cf6a8> (a alluxio.worker.block.BlockMasterClient)\n    at com.google.common.io.Closer.close(Closer.java:214)\n    at alluxio.worker.block.BlockMasterClientPool.close(BlockMasterClientPool.java:55)\n    at com.google.common.io.Closer.close(Closer.java:214)\n    at alluxio.worker.block.DefaultBlockWorker.stop(DefaultBlockWorker.java:261)\n    at alluxio.Registry.stop(Registry.java:148)", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r426835678", "createdAt": "2020-05-18T19:05:28Z", "author": {"login": "ggezer"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ=="}, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzODM0Nw==", "bodyText": "Even though it's quite disruptive I'm OK to swap the lines at this point as I can't see a way around HeartbeatExecutor's limitations.", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r426838347", "createdAt": "2020-05-18T19:10:42Z", "author": {"login": "ggezer"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ=="}, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzOTAzOA==", "bodyText": "Ideally, we'd like to implement your initial commit as an abstract utility to all heartbeat executors at some point. An issue maybe?", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r426839038", "createdAt": "2020-05-18T19:12:00Z", "author": {"login": "ggezer"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ=="}, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0NDMxNA==", "bodyText": "@ZacBlanco Do we know why this order works, and the other order didn't?", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r426944314", "createdAt": "2020-05-18T23:22:19Z", "author": {"login": "gpang"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ=="}, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2NTI2MA==", "bodyText": "I believe this ordering works because super.stop will issue a shutdownNow on the executor which automatically sends an interrupt to all executor threads.\nWith this ordering, no interrupts are sent and we try to manually stop/close the heartbeat threads. Since no interrupt was performed, the heartbeat thread continues trying to connect until timing out.", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r426965260", "createdAt": "2020-05-19T00:37:39Z", "author": {"login": "ZacBlanco"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ=="}, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzMjU2NA==", "bodyText": "@gpang without first interrupting the threads, mResourceCloser.close() gets blocked because AbstractClient.close() is synchronized with AbstractClient.connect() and connect was trying to connect until it times out.", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r427032564", "createdAt": "2020-05-19T05:06:24Z", "author": {"login": "ggezer"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ=="}, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxMjY2Mw==", "bodyText": "Can we add this info as a comment, since this ordering is intentional and critical.", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r427512663", "createdAt": "2020-05-19T18:28:35Z", "author": {"login": "gpang"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ=="}, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxNTMwMQ==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11432#discussion_r427515301", "createdAt": "2020-05-19T18:32:58Z", "author": {"login": "ZacBlanco"}, "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -251,10 +251,10 @@ public void start(WorkerNetAddress address) throws IOException {\n    */\n   @Override\n   public void stop() throws IOException {\n-    // Stop heart-beat executors and clients.\n-    mResourceCloser.close();\n     // Stop the base. (closes executors.)\n     super.stop();\n+    // Stop heart-beat executors and clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTEyNQ=="}, "originalCommit": {"oid": "7232652b4ae290e49e8204f0fe4896c6cd8a5ad9"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1745, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}