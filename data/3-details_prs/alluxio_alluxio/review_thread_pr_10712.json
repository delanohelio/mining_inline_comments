{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNzM1NzQ0", "number": 10712, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoyNzoyOFrODW7fEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowNjoxNVrODX5stw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzY5ODcyOnYy", "diffSide": "RIGHT", "path": "job/common/src/test/java/alluxio/job/DoNothingConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoyNzoyOFrOFb9wZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoyNzoyOFrOFb9wZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2NzY4Ng==", "bodyText": "rename to NoopPlanConfig or TestPlanConfig", "url": "https://github.com/Alluxio/alluxio/pull/10712#discussion_r364867686", "createdAt": "2020-01-09T17:27:28Z", "author": {"login": "gpang"}, "path": "job/common/src/test/java/alluxio/job/DoNothingConfig.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job;\n+\n+import alluxio.job.plan.PlanConfig;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Config for a plan that does nothing.\n+ */\n+public class DoNothingConfig implements PlanConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "489b9d91be1fb7a0d55318996af279d5edcc71ba"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzcwMDY4OnYy", "diffSide": "RIGHT", "path": "job/server/src/test/java/alluxio/job/plan/DoNothingPlanDefinition.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoyODoxMFrOFb9xoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoyODoxMFrOFb9xoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2ODAwMQ==", "bodyText": "NoopPlanDefinition of TestPlanDefinition", "url": "https://github.com/Alluxio/alluxio/pull/10712#discussion_r364868001", "createdAt": "2020-01-09T17:28:10Z", "author": {"login": "gpang"}, "path": "job/server/src/test/java/alluxio/job/plan/DoNothingPlanDefinition.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan;\n+\n+import alluxio.collections.Pair;\n+import alluxio.job.DoNothingConfig;\n+import alluxio.job.RunTaskContext;\n+import alluxio.job.SelectExecutorsContext;\n+import alluxio.job.util.SerializableVoid;\n+import alluxio.wire.WorkerInfo;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This definition of a plan that does nothing.\n+ */\n+public class DoNothingPlanDefinition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "489b9d91be1fb7a0d55318996af279d5edcc71ba"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mzg2OTAwOnYy", "diffSide": "RIGHT", "path": "job/common/src/test/java/alluxio/job/NoopPlanConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowMDowNVrOFdctSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowMDowNVrOFdctSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyMzM2OQ==", "bodyText": "should this be the same as the class name? NoopPlanConfig?", "url": "https://github.com/Alluxio/alluxio/pull/10712#discussion_r366423369", "createdAt": "2020-01-14T16:00:05Z", "author": {"login": "gpang"}, "path": "job/common/src/test/java/alluxio/job/NoopPlanConfig.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job;\n+\n+import alluxio.job.plan.PlanConfig;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Config for a plan that does nothing.\n+ */\n+public class NoopPlanConfig implements PlanConfig {\n+\n+  public static final String NAME = \"DoNothing\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18cdd636991615b4fbe4b443972d37d2bdf02486"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mzg3MjU2OnYy", "diffSide": "RIGHT", "path": "job/server/src/test/java/alluxio/job/plan/NoopPlanDefinition.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowMTowMVrOFdcvcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowMTowMVrOFdcvcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyMzkyMw==", "bodyText": "maybe say something like NoopPlanDefinition should never run a task", "url": "https://github.com/Alluxio/alluxio/pull/10712#discussion_r366423923", "createdAt": "2020-01-14T16:01:01Z", "author": {"login": "gpang"}, "path": "job/server/src/test/java/alluxio/job/plan/NoopPlanDefinition.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan;\n+\n+import alluxio.collections.Pair;\n+import alluxio.job.NoopPlanConfig;\n+import alluxio.job.RunTaskContext;\n+import alluxio.job.SelectExecutorsContext;\n+import alluxio.job.util.SerializableVoid;\n+import alluxio.wire.WorkerInfo;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This definition of a plan that does nothing.\n+ */\n+public class NoopPlanDefinition\n+    extends AbstractVoidPlanDefinition<NoopPlanConfig, SerializableVoid> {\n+\n+  public NoopPlanDefinition() {}\n+\n+  @Override\n+  public Class<NoopPlanConfig> getJobConfigClass() {\n+    return NoopPlanConfig.class;\n+  }\n+\n+  @Override\n+  public Set<Pair<WorkerInfo, SerializableVoid>> selectExecutors(NoopPlanConfig config,\n+      List<WorkerInfo> jobWorkerInfoList, SelectExecutorsContext selectExecutorsContext)\n+      throws Exception {\n+    return new HashSet<>();\n+  }\n+\n+  @Override\n+  public SerializableVoid runTask(NoopPlanConfig config, SerializableVoid args,\n+                                  RunTaskContext runTaskContext) throws Exception {\n+    throw new IllegalStateException(\"Should never get here.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18cdd636991615b4fbe4b443972d37d2bdf02486"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mzg3ODEzOnYy", "diffSide": "RIGHT", "path": "job/server/src/test/java/alluxio/job/plan/NoopPlanDefinition.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowMjoyNVrOFdcyuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowMjoyNVrOFdcyuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyNDc2MQ==", "bodyText": "Is this allowed to return Collections.emptySet()?", "url": "https://github.com/Alluxio/alluxio/pull/10712#discussion_r366424761", "createdAt": "2020-01-14T16:02:25Z", "author": {"login": "gpang"}, "path": "job/server/src/test/java/alluxio/job/plan/NoopPlanDefinition.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan;\n+\n+import alluxio.collections.Pair;\n+import alluxio.job.NoopPlanConfig;\n+import alluxio.job.RunTaskContext;\n+import alluxio.job.SelectExecutorsContext;\n+import alluxio.job.util.SerializableVoid;\n+import alluxio.wire.WorkerInfo;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This definition of a plan that does nothing.\n+ */\n+public class NoopPlanDefinition\n+    extends AbstractVoidPlanDefinition<NoopPlanConfig, SerializableVoid> {\n+\n+  public NoopPlanDefinition() {}\n+\n+  @Override\n+  public Class<NoopPlanConfig> getJobConfigClass() {\n+    return NoopPlanConfig.class;\n+  }\n+\n+  @Override\n+  public Set<Pair<WorkerInfo, SerializableVoid>> selectExecutors(NoopPlanConfig config,\n+      List<WorkerInfo> jobWorkerInfoList, SelectExecutorsContext selectExecutorsContext)\n+      throws Exception {\n+    return new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18cdd636991615b4fbe4b443972d37d2bdf02486"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mzg4MzEzOnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/master/job/workflow/WorkflowTracker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowMzo0OFrOFdc11w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowMzo0OFrOFdc11w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyNTU1OQ==", "bodyText": "would more info in this warning message be helpful?", "url": "https://github.com/Alluxio/alluxio/pull/10712#discussion_r366425559", "createdAt": "2020-01-14T16:03:48Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/master/job/workflow/WorkflowTracker.java", "diffHunk": "@@ -248,36 +248,24 @@ private synchronized void next(long jobId) throws ResourceExhaustedException {\n       JobConfig childJobConfig = childJobConfigsIter.next();\n       try {\n         mJobMaster.run(childJobConfig, childJobId);\n-      } catch (JobDoesNotExistException e) {\n+      } catch (JobDoesNotExistException | ResourceExhaustedException e) {\n         LOG.warn(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18cdd636991615b4fbe4b443972d37d2bdf02486"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mzg5MTc1OnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/master/job/workflow/WorkflowTracker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowNjoxNVrOFdc7Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowNjoxNVrOFdc7Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyNjk2Mw==", "bodyText": "should this be switch statement?", "url": "https://github.com/Alluxio/alluxio/pull/10712#discussion_r366426963", "createdAt": "2020-01-14T16:06:15Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/master/job/workflow/WorkflowTracker.java", "diffHunk": "@@ -248,36 +248,24 @@ private synchronized void next(long jobId) throws ResourceExhaustedException {\n       JobConfig childJobConfig = childJobConfigsIter.next();\n       try {\n         mJobMaster.run(childJobConfig, childJobId);\n-      } catch (JobDoesNotExistException e) {\n+      } catch (JobDoesNotExistException | ResourceExhaustedException e) {\n         LOG.warn(e.getMessage());\n         stop(jobId, Status.FAILED, e.getMessage());\n       }\n     }\n   }\n \n   /**\n-   * Updates internal state of the workflows based on the updated state of the tasks.\n-   * @param taskInfoList list of tasks that have been updated\n-   * @throws ResourceExhaustedException if new jobs can't be scheduled\n+   * Updates internal state of the workflows based on the updated state of a plan.\n+   * @param planInfo info of the plan that had its status changed\n+   * @throws ResourceExhaustedException\n    */\n-  public synchronized void workerHeartbeat(List<TaskInfo> taskInfoList)\n-      throws ResourceExhaustedException {\n-\n-    for (TaskInfo taskInfo : taskInfoList) {\n-      Long planId = taskInfo.getParentId();\n-      JobInfo jobInfo = null;\n-      try {\n-        jobInfo = mJobMaster.getStatus(planId);\n-      } catch (JobDoesNotExistException e) {\n-        LOG.info(\"Received heartbeat for a task with an unknown parent. Skipping\", planId);\n-        continue;\n-      }\n-      Status status = jobInfo.getStatus();\n-      if (status.equals(Status.COMPLETED)) {\n-        done(planId);\n-      } else if (status.equals(Status.CANCELED) || status.equals(Status.FAILED)) {\n-        stop(planId, status, jobInfo.getErrorMessage());\n-      }\n+  public void onPlanStatusChange(PlanInfo planInfo) {\n+    Status status = planInfo.getStatus();\n+    if (status.equals(Status.COMPLETED)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18cdd636991615b4fbe4b443972d37d2bdf02486"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2204, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}