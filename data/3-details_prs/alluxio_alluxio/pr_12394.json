{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMzM2OTE2", "number": 12394, "title": "Improve implementation of DistributedCp and other distributed jobs", "bodyText": "Few Changes:\n\nDistributedMv is now DistributedCp + Delete (the ASYNC_THROUGH writeType safe guard for persisted file is now removed)\nDistributedCp now pre-creates all of the folders from the client\nDistributedCp now submits the request one file at a time.\nRemoved CheckMigrateValid because once you submit files one at a time, checkMigrateValid calls getStatus on a missing file each time which is very expensive.\nThe behavior of file overwriting another file used to be broken and is still broken in this implementation", "createdAt": "2020-10-26T22:11:05Z", "url": "https://github.com/Alluxio/alluxio/pull/12394", "merged": true, "mergeCommit": {"oid": "43418ee791a67083df7ff1eb2c25a240fc7817a5"}, "closed": true, "closedAt": "2020-11-03T19:04:50Z", "author": {"login": "bradyoo"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVaIDDAH2gAyNTEwMzM2OTE2OmFkYTU4MGYzZjBlOTE2MTRhZTU1N2ZhMjRkNjAwMGJjZTg3ZTY1MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdY9oZWgFqTUyMjc3ODMyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ada580f3f0e91614ae557fa24d6000bce87e6503", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/ada580f3f0e91614ae557fa24d6000bce87e6503", "committedDate": "2020-10-23T17:35:58Z", "message": "Work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9716691aa1cc97a5ffa837da0ea9a78e4da6efa4", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/9716691aa1cc97a5ffa837da0ea9a78e4da6efa4", "committedDate": "2020-10-23T21:49:35Z", "message": "Merge remote-tracking branch 'upstream/master' into distributed_cp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "364bc1db00d3bbf5b2eb3a533ddec30b3f5f3273", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/364bc1db00d3bbf5b2eb3a533ddec30b3f5f3273", "committedDate": "2020-10-26T17:53:53Z", "message": "work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c245c1ac6018f466e83b5ff3bfd3a3ac9c3b72f", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/7c245c1ac6018f466e83b5ff3bfd3a3ac9c3b72f", "committedDate": "2020-10-26T22:10:23Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b68afec1395560964951881815a8d612363f74", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/d7b68afec1395560964951881815a8d612363f74", "committedDate": "2020-10-26T22:58:50Z", "message": "License Header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "709640f4bcee564a3c129ea09b846ec4012c1d10", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/709640f4bcee564a3c129ea09b846ec4012c1d10", "committedDate": "2020-10-27T17:49:17Z", "message": "Make sure directories are created properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70801cbf70eaf5698877e673d08acd7b0a2284ad", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/70801cbf70eaf5698877e673d08acd7b0a2284ad", "committedDate": "2020-10-27T20:24:40Z", "message": "Remove validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c5f23736eb5472f492a0d8afd16bd7ecda9bc5b", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/5c5f23736eb5472f492a0d8afd16bd7ecda9bc5b", "committedDate": "2020-10-28T16:50:51Z", "message": "remove new line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df1aaec1765120c9377cd9bf2757d7790ccf1463", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/df1aaec1765120c9377cd9bf2757d7790ccf1463", "committedDate": "2020-10-28T20:41:55Z", "message": "handle folder overwrite better. Delete DistributedMv"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "716603bdb488dcf2196093cd5329a4c23934cd44", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/716603bdb488dcf2196093cd5329a4c23934cd44", "committedDate": "2020-10-28T22:30:11Z", "message": "checkstyle and fix some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d1a54b7b1f8942051d2bd0ce4070ae000e7d670", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/6d1a54b7b1f8942051d2bd0ce4070ae000e7d670", "committedDate": "2020-10-29T00:06:14Z", "message": "Remove some tests and fix non-folder cp behavior"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c3d7c64a1ae3d9b6cd36b17e557225ad3ce0f8a", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/8c3d7c64a1ae3d9b6cd36b17e557225ad3ce0f8a", "committedDate": "2020-10-29T05:54:32Z", "message": "checkstyle and distributedMv -> distributedCp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93aace06eace2b7cd568151e3a2643cc88110899", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/93aace06eace2b7cd568151e3a2643cc88110899", "committedDate": "2020-10-29T18:18:35Z", "message": "Add DistributedMv and make implementation into Cp + Delete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8460fc49f281b1b99cab008f389df48e5c3ad21d", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/8460fc49f281b1b99cab008f389df48e5c3ad21d", "committedDate": "2020-10-29T18:35:56Z", "message": "checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDI0OTUw", "url": "https://github.com/Alluxio/alluxio/pull/12394#pullrequestreview-521024950", "createdAt": "2020-10-30T20:45:11Z", "commit": {"oid": "8460fc49f281b1b99cab008f389df48e5c3ad21d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDo0NToxMlrOHrf97A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMTozNDo1OFrOHrhGJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3NDU3Mg==", "bodyText": "Can we add a CLI option for the user to be able to change this setting?", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r515374572", "createdAt": "2020-10-30T20:45:12Z", "author": {"login": "gpang"}, "path": "shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.ClientContext;\n+import alluxio.cli.fs.command.job.JobAttempt;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.job.JobMasterClient;\n+import alluxio.job.wire.Status;\n+import alluxio.worker.job.JobMasterClientContext;\n+\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The base class for all the distributed job based {@link alluxio.cli.Command} classes.\n+ * It provides handling for submitting multiple jobs and handling retries of them.\n+ */\n+public abstract class AbstractDistributedJobCommand extends AbstractFileSystemCommand {\n+  private static final int DEFAULT_ACTIVE_JOBS = 1000;\n+\n+  protected List<JobAttempt> mSubmittedJobAttempts;\n+  protected int mActiveJobs;\n+  protected final JobMasterClient mClient;\n+\n+  protected AbstractDistributedJobCommand(FileSystemContext fsContext) {\n+    super(fsContext);\n+    mSubmittedJobAttempts = Lists.newArrayList();\n+    final ClientContext clientContext = mFsContext.getClientContext();\n+    mClient = JobMasterClient.Factory.create(\n+        JobMasterClientContext.newBuilder(clientContext).build());\n+    mActiveJobs = DEFAULT_ACTIVE_JOBS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8460fc49f281b1b99cab008f389df48e5c3ad21d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3OTQyNw==", "bodyText": "Do we need these variables anymore if this class extends AbstractDistributedJobCommand?", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r515379427", "createdAt": "2020-10-30T20:56:55Z", "author": {"login": "gpang"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java", "diffHunk": "@@ -35,7 +43,11 @@\n  */\n @ThreadSafe\n @PublicApi\n-public final class DistributedCpCommand extends AbstractFileSystemCommand {\n+public class DistributedCpCommand extends AbstractDistributedJobCommand {\n+  private static final int DEFAULT_ACTIVE_JOBS = 1000;\n+\n+  private int mActiveJobs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8460fc49f281b1b99cab008f389df48e5c3ad21d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4MjA1NA==", "bodyText": "If this can throw an exception, should we try to catch it, to let the user know that the copy phase did not complete, so it might be in an inconsistent state?\nIf it is in an inconsistent state, what happens if we run distributedMv again?", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r515382054", "createdAt": "2020-10-30T21:03:57Z", "author": {"login": "gpang"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedMvCommand.java", "diffHunk": "@@ -50,31 +44,22 @@ public String getCommandName() {\n \n   @Override\n   public void validateArgs(CommandLine cl) throws InvalidArgumentException {\n-    CommandUtils.checkNumOfArgsEquals(this, cl, 2);\n+    mCpCommand.validateArgs(cl);\n   }\n \n   @Override\n   public int run(CommandLine cl) throws AlluxioException, IOException {\n+    mCpCommand.run(cl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8460fc49f281b1b99cab008f389df48e5c3ad21d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4MzcyNQ==", "bodyText": "Is it intentional that this while loop is very tight? Can we add a sleep in here to avoid too much unnecessary cpu?", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r515383725", "createdAt": "2020-10-30T21:08:20Z", "author": {"login": "gpang"}, "path": "shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.ClientContext;\n+import alluxio.cli.fs.command.job.JobAttempt;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.job.JobMasterClient;\n+import alluxio.job.wire.Status;\n+import alluxio.worker.job.JobMasterClientContext;\n+\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The base class for all the distributed job based {@link alluxio.cli.Command} classes.\n+ * It provides handling for submitting multiple jobs and handling retries of them.\n+ */\n+public abstract class AbstractDistributedJobCommand extends AbstractFileSystemCommand {\n+  private static final int DEFAULT_ACTIVE_JOBS = 1000;\n+\n+  protected List<JobAttempt> mSubmittedJobAttempts;\n+  protected int mActiveJobs;\n+  protected final JobMasterClient mClient;\n+\n+  protected AbstractDistributedJobCommand(FileSystemContext fsContext) {\n+    super(fsContext);\n+    mSubmittedJobAttempts = Lists.newArrayList();\n+    final ClientContext clientContext = mFsContext.getClientContext();\n+    mClient = JobMasterClient.Factory.create(\n+        JobMasterClientContext.newBuilder(clientContext).build());\n+    mActiveJobs = DEFAULT_ACTIVE_JOBS;\n+  }\n+\n+  protected void drain() {\n+    while (!mSubmittedJobAttempts.isEmpty()) {\n+      waitJob();\n+    }\n+  }\n+\n+  /**\n+   * Waits for at least one job to complete.\n+   */\n+  protected void waitJob() {\n+    AtomicBoolean removed = new AtomicBoolean(false);\n+    while (true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8460fc49f281b1b99cab008f389df48e5c3ad21d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4ODI3MQ==", "bodyText": "Did we always print out every file? This could be a huge output, if we are copying a large tree?", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r515388271", "createdAt": "2020-10-30T21:20:51Z", "author": {"login": "gpang"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java", "diffHunk": "@@ -59,23 +71,85 @@ public int run(CommandLine cl) throws AlluxioException, IOException {\n     String[] args = cl.getArgs();\n     AlluxioURI srcPath = new AlluxioURI(args[0]);\n     AlluxioURI dstPath = new AlluxioURI(args[1]);\n-    Thread thread = CommonUtils.createProgressThread(2L * Constants.SECOND_MS, System.out);\n-    thread.start();\n-    try {\n-      AlluxioConfiguration conf = mFsContext.getPathConf(dstPath);\n-      JobGrpcClientUtils.run(new MigrateConfig(srcPath.getPath(), dstPath.getPath(),\n-          conf.get(PropertyKey.USER_FILE_WRITE_TYPE_DEFAULT), true,\n-          false), 1, mFsContext.getPathConf(dstPath));\n-    } catch (InterruptedException e) {\n-      Thread.currentThread().interrupt();\n-      return -1;\n-    } finally {\n-      thread.interrupt();\n+\n+    if (PathUtils.hasPrefix(dstPath.toString(), srcPath.toString())) {\n+      throw new RuntimeException(ExceptionMessage.MIGRATE_CANNOT_BE_TO_SUBDIRECTORY.getMessage(\n+          srcPath, dstPath));\n     }\n-    System.out.println(\"Copied \" + srcPath + \" to \" + dstPath);\n+\n+    mActiveJobs = DEFAULT_ACTIVE_JOBS;\n+\n+    AlluxioConfiguration conf = mFsContext.getPathConf(dstPath);\n+    mWriteType = conf.get(PropertyKey.USER_FILE_WRITE_TYPE_DEFAULT);\n+\n+    distributedCp(srcPath, dstPath);\n     return 0;\n   }\n \n+  private CopyJobAttempt newJob(String srcPath, String dstPath) {\n+    CopyJobAttempt jobAttempt = new CopyJobAttempt(mClient,\n+        new MigrateConfig(srcPath, dstPath, mWriteType, true, false),\n+        new CountingRetry(3));\n+\n+    jobAttempt.run();\n+\n+    return jobAttempt;\n+  }\n+\n+  private void distributedCp(AlluxioURI srcPath, AlluxioURI dstPath)\n+      throws IOException, AlluxioException {\n+    if (mFileSystem.getStatus(srcPath).isFolder()) {\n+      createFolders(srcPath, dstPath);\n+    }\n+    copy(srcPath, dstPath);\n+    // Wait remaining jobs to complete.\n+    drain();\n+  }\n+\n+  private void createFolders(AlluxioURI srcPath, AlluxioURI dstPath)\n+      throws IOException, AlluxioException {\n+\n+    try {\n+      mFileSystem.createDirectory(dstPath);\n+      System.out.println(\"Created directory at \" + dstPath.getPath());\n+    } catch (FileAlreadyExistsException e) {\n+      if (!mFileSystem.getStatus(dstPath).isFolder()) {\n+        throw e;\n+      }\n+    }\n+\n+    for (URIStatus srcInnerStatus : mFileSystem.listStatus(srcPath)) {\n+      if (srcInnerStatus.isFolder()) {\n+        String dstInnerPath = computeTargetPath(srcInnerStatus.getPath(),\n+            srcPath.getPath(), dstPath.getPath());\n+        createFolders(new AlluxioURI(srcInnerStatus.getPath()), new AlluxioURI(dstInnerPath));\n+      }\n+    }\n+  }\n+\n+  private void copy(AlluxioURI srcPath, AlluxioURI dstPath)\n+      throws IOException, AlluxioException {\n+\n+    for (URIStatus srcInnerStatus : mFileSystem.listStatus(srcPath)) {\n+      String dstInnerPath = computeTargetPath(srcInnerStatus.getPath(),\n+          srcPath.getPath(), dstPath.getPath());\n+      if (srcInnerStatus.isFolder()) {\n+        copy(new AlluxioURI(srcInnerStatus.getPath()), new AlluxioURI(dstInnerPath));\n+      } else {\n+        addJob(srcInnerStatus.getPath(), dstInnerPath);\n+      }\n+    }\n+  }\n+\n+  private void addJob(String srcPath, String dstPath) {\n+    if (mSubmittedJobAttempts.size() >= mActiveJobs) {\n+      // Wait one job to complete.\n+      waitJob();\n+    }\n+    mSubmittedJobAttempts.add(newJob(srcPath, dstPath));\n+    System.out.println(\"Copying \" + srcPath + \" to \" + dstPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8460fc49f281b1b99cab008f389df48e5c3ad21d"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4OTUyOQ==", "bodyText": "This is not threadsafe so we should add synchronized for this method.\nAlso, maybe rename to waitForCompleteJob?", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r515389529", "createdAt": "2020-10-30T21:24:35Z", "author": {"login": "gpang"}, "path": "shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.ClientContext;\n+import alluxio.cli.fs.command.job.JobAttempt;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.job.JobMasterClient;\n+import alluxio.job.wire.Status;\n+import alluxio.worker.job.JobMasterClientContext;\n+\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The base class for all the distributed job based {@link alluxio.cli.Command} classes.\n+ * It provides handling for submitting multiple jobs and handling retries of them.\n+ */\n+public abstract class AbstractDistributedJobCommand extends AbstractFileSystemCommand {\n+  private static final int DEFAULT_ACTIVE_JOBS = 1000;\n+\n+  protected List<JobAttempt> mSubmittedJobAttempts;\n+  protected int mActiveJobs;\n+  protected final JobMasterClient mClient;\n+\n+  protected AbstractDistributedJobCommand(FileSystemContext fsContext) {\n+    super(fsContext);\n+    mSubmittedJobAttempts = Lists.newArrayList();\n+    final ClientContext clientContext = mFsContext.getClientContext();\n+    mClient = JobMasterClient.Factory.create(\n+        JobMasterClientContext.newBuilder(clientContext).build());\n+    mActiveJobs = DEFAULT_ACTIVE_JOBS;\n+  }\n+\n+  protected void drain() {\n+    while (!mSubmittedJobAttempts.isEmpty()) {\n+      waitJob();\n+    }\n+  }\n+\n+  /**\n+   * Waits for at least one job to complete.\n+   */\n+  protected void waitJob() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8460fc49f281b1b99cab008f389df48e5c3ad21d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MzA2Mw==", "bodyText": "createFolders does a listing, and copy also does a listing. Can we avoid doing a double recursive listing of the source?", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r515393063", "createdAt": "2020-10-30T21:34:58Z", "author": {"login": "gpang"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java", "diffHunk": "@@ -59,23 +71,85 @@ public int run(CommandLine cl) throws AlluxioException, IOException {\n     String[] args = cl.getArgs();\n     AlluxioURI srcPath = new AlluxioURI(args[0]);\n     AlluxioURI dstPath = new AlluxioURI(args[1]);\n-    Thread thread = CommonUtils.createProgressThread(2L * Constants.SECOND_MS, System.out);\n-    thread.start();\n-    try {\n-      AlluxioConfiguration conf = mFsContext.getPathConf(dstPath);\n-      JobGrpcClientUtils.run(new MigrateConfig(srcPath.getPath(), dstPath.getPath(),\n-          conf.get(PropertyKey.USER_FILE_WRITE_TYPE_DEFAULT), true,\n-          false), 1, mFsContext.getPathConf(dstPath));\n-    } catch (InterruptedException e) {\n-      Thread.currentThread().interrupt();\n-      return -1;\n-    } finally {\n-      thread.interrupt();\n+\n+    if (PathUtils.hasPrefix(dstPath.toString(), srcPath.toString())) {\n+      throw new RuntimeException(ExceptionMessage.MIGRATE_CANNOT_BE_TO_SUBDIRECTORY.getMessage(\n+          srcPath, dstPath));\n     }\n-    System.out.println(\"Copied \" + srcPath + \" to \" + dstPath);\n+\n+    mActiveJobs = DEFAULT_ACTIVE_JOBS;\n+\n+    AlluxioConfiguration conf = mFsContext.getPathConf(dstPath);\n+    mWriteType = conf.get(PropertyKey.USER_FILE_WRITE_TYPE_DEFAULT);\n+\n+    distributedCp(srcPath, dstPath);\n     return 0;\n   }\n \n+  private CopyJobAttempt newJob(String srcPath, String dstPath) {\n+    CopyJobAttempt jobAttempt = new CopyJobAttempt(mClient,\n+        new MigrateConfig(srcPath, dstPath, mWriteType, true, false),\n+        new CountingRetry(3));\n+\n+    jobAttempt.run();\n+\n+    return jobAttempt;\n+  }\n+\n+  private void distributedCp(AlluxioURI srcPath, AlluxioURI dstPath)\n+      throws IOException, AlluxioException {\n+    if (mFileSystem.getStatus(srcPath).isFolder()) {\n+      createFolders(srcPath, dstPath);\n+    }\n+    copy(srcPath, dstPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8460fc49f281b1b99cab008f389df48e5c3ad21d"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3232c014507685e93d81ea5025f453e9dfa10c06", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/3232c014507685e93d81ea5025f453e9dfa10c06", "committedDate": "2020-11-02T17:36:12Z", "message": "feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c20795c00f9dc77a0356cb6687730a2c1cc47836", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/c20795c00f9dc77a0356cb6687730a2c1cc47836", "committedDate": "2020-11-02T17:41:56Z", "message": "feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDE5Mzcy", "url": "https://github.com/Alluxio/alluxio/pull/12394#pullrequestreview-522019372", "createdAt": "2020-11-02T21:51:45Z", "commit": {"oid": "c20795c00f9dc77a0356cb6687730a2c1cc47836"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMTo1MTo0NVrOHsW9zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjowOTo0NFrOHsXeWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3NTY2Mw==", "bodyText": "Can we just use the abstract class DEFAULT_ACTIVE_JOBS, instead of defining it again here?", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r516275663", "createdAt": "2020-11-02T21:51:45Z", "author": {"login": "gpang"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java", "diffHunk": "@@ -35,7 +43,10 @@\n  */\n @ThreadSafe\n @PublicApi\n-public final class DistributedCpCommand extends AbstractFileSystemCommand {\n+public class DistributedCpCommand extends AbstractDistributedJobCommand {\n+  private static final int DEFAULT_ACTIVE_JOBS = 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c20795c00f9dc77a0356cb6687730a2c1cc47836"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3NjI3Mg==", "bodyText": "Ok, but when the cp part fails, the user won't know what to do right? Should we catch this error, print out some instructions on what to do, and then re-throw the error, so we can show that they will have to delete the destination dir, and then rerun mv?", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r516276272", "createdAt": "2020-11-02T21:53:05Z", "author": {"login": "gpang"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedMvCommand.java", "diffHunk": "@@ -50,31 +44,22 @@ public String getCommandName() {\n \n   @Override\n   public void validateArgs(CommandLine cl) throws InvalidArgumentException {\n-    CommandUtils.checkNumOfArgsEquals(this, cl, 2);\n+    mCpCommand.validateArgs(cl);\n   }\n \n   @Override\n   public int run(CommandLine cl) throws AlluxioException, IOException {\n+    mCpCommand.run(cl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4MjA1NA=="}, "originalCommit": {"oid": "8460fc49f281b1b99cab008f389df48e5c3ad21d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI4Mjg0OA==", "bodyText": "Is there a specific reason we need to loop so quickly? For example, if we loop every second, does that slow anything down unnecessarily?", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r516282848", "createdAt": "2020-11-02T22:07:18Z", "author": {"login": "gpang"}, "path": "shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.ClientContext;\n+import alluxio.cli.fs.command.job.JobAttempt;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.job.JobMasterClient;\n+import alluxio.job.wire.Status;\n+import alluxio.util.CommonUtils;\n+import alluxio.worker.job.JobMasterClientContext;\n+\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The base class for all the distributed job based {@link alluxio.cli.Command} classes.\n+ * It provides handling for submitting multiple jobs and handling retries of them.\n+ */\n+public abstract class AbstractDistributedJobCommand extends AbstractFileSystemCommand {\n+  private static final int DEFAULT_ACTIVE_JOBS = 1000;\n+\n+  protected List<JobAttempt> mSubmittedJobAttempts;\n+  protected int mActiveJobs;\n+  protected final JobMasterClient mClient;\n+\n+  protected AbstractDistributedJobCommand(FileSystemContext fsContext) {\n+    super(fsContext);\n+    mSubmittedJobAttempts = Lists.newArrayList();\n+    final ClientContext clientContext = mFsContext.getClientContext();\n+    mClient = JobMasterClient.Factory.create(\n+        JobMasterClientContext.newBuilder(clientContext).build());\n+    mActiveJobs = DEFAULT_ACTIVE_JOBS;\n+  }\n+\n+  protected void drain() {\n+    while (!mSubmittedJobAttempts.isEmpty()) {\n+      waitJob();\n+    }\n+  }\n+\n+  /**\n+   * Waits for at least one job to complete.\n+   */\n+  protected void waitJob() {\n+    AtomicBoolean removed = new AtomicBoolean(false);\n+    while (true) {\n+      mSubmittedJobAttempts = mSubmittedJobAttempts.stream().filter((jobAttempt) -> {\n+        Status check = jobAttempt.check();\n+        switch (check) {\n+          case CREATED:\n+          case RUNNING:\n+            return true;\n+          case CANCELED:\n+          case COMPLETED:\n+            removed.set(true);\n+            return false;\n+          case FAILED:\n+            removed.set(true);\n+            return false;\n+          default:\n+            throw new IllegalStateException(String.format(\"Unexpected Status: %s\", check));\n+        }\n+      }).collect(Collectors.toList());\n+      if (removed.get()) {\n+        return;\n+      }\n+      CommonUtils.sleepMs(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c20795c00f9dc77a0356cb6687730a2c1cc47836"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI4Mzk5Mw==", "bodyText": "Could you explain why it is more intuitive with 2 listings, and why 1 listing cannot have good messages?\nOne concern is that if a listing is a large tree, it would have to lock that large tree twice. Ideally, we would only have to lock that subtree once.", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r516283993", "createdAt": "2020-11-02T22:09:44Z", "author": {"login": "gpang"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java", "diffHunk": "@@ -59,23 +71,85 @@ public int run(CommandLine cl) throws AlluxioException, IOException {\n     String[] args = cl.getArgs();\n     AlluxioURI srcPath = new AlluxioURI(args[0]);\n     AlluxioURI dstPath = new AlluxioURI(args[1]);\n-    Thread thread = CommonUtils.createProgressThread(2L * Constants.SECOND_MS, System.out);\n-    thread.start();\n-    try {\n-      AlluxioConfiguration conf = mFsContext.getPathConf(dstPath);\n-      JobGrpcClientUtils.run(new MigrateConfig(srcPath.getPath(), dstPath.getPath(),\n-          conf.get(PropertyKey.USER_FILE_WRITE_TYPE_DEFAULT), true,\n-          false), 1, mFsContext.getPathConf(dstPath));\n-    } catch (InterruptedException e) {\n-      Thread.currentThread().interrupt();\n-      return -1;\n-    } finally {\n-      thread.interrupt();\n+\n+    if (PathUtils.hasPrefix(dstPath.toString(), srcPath.toString())) {\n+      throw new RuntimeException(ExceptionMessage.MIGRATE_CANNOT_BE_TO_SUBDIRECTORY.getMessage(\n+          srcPath, dstPath));\n     }\n-    System.out.println(\"Copied \" + srcPath + \" to \" + dstPath);\n+\n+    mActiveJobs = DEFAULT_ACTIVE_JOBS;\n+\n+    AlluxioConfiguration conf = mFsContext.getPathConf(dstPath);\n+    mWriteType = conf.get(PropertyKey.USER_FILE_WRITE_TYPE_DEFAULT);\n+\n+    distributedCp(srcPath, dstPath);\n     return 0;\n   }\n \n+  private CopyJobAttempt newJob(String srcPath, String dstPath) {\n+    CopyJobAttempt jobAttempt = new CopyJobAttempt(mClient,\n+        new MigrateConfig(srcPath, dstPath, mWriteType, true, false),\n+        new CountingRetry(3));\n+\n+    jobAttempt.run();\n+\n+    return jobAttempt;\n+  }\n+\n+  private void distributedCp(AlluxioURI srcPath, AlluxioURI dstPath)\n+      throws IOException, AlluxioException {\n+    if (mFileSystem.getStatus(srcPath).isFolder()) {\n+      createFolders(srcPath, dstPath);\n+    }\n+    copy(srcPath, dstPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MzA2Mw=="}, "originalCommit": {"oid": "8460fc49f281b1b99cab008f389df48e5c3ad21d"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "849917c1a97116ae1b700cfc130a497ee71c88a2", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/849917c1a97116ae1b700cfc130a497ee71c88a2", "committedDate": "2020-11-03T17:03:51Z", "message": "feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNzc4MzI5", "url": "https://github.com/Alluxio/alluxio/pull/12394#pullrequestreview-522778329", "createdAt": "2020-11-03T18:39:45Z", "commit": {"oid": "849917c1a97116ae1b700cfc130a497ee71c88a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3496, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}