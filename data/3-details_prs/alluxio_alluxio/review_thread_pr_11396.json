{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0Nzc2MjQx", "number": 11396, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjoyMDo0OVrOD6fKbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxOTo0OToyOVrOD7BCjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjU0NTcyOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjoyMDo0OVrOGSWruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoxMDoyNVrOGTNzvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5OTE5NQ==", "bodyText": "Any reason specifically to use the beta? I would prefer to have official releases.", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r421899195", "createdAt": "2020-05-08T02:20:49Z", "author": {"login": "ZacBlanco"}, "path": "pom.xml", "diffHunk": "@@ -151,6 +151,7 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <slf4j.version>1.7.2</slf4j.version>\n     <jackson.version>2.10.1</jackson.version>\n+    <ozone.version>0.5.0-beta</ozone.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwMjM2Ng==", "bodyText": "@ZacBlanco\nBecause for ozone, ozone will not have release version recently, and the beta version is the most stable version now, reference https://hadoop.apache.org/ozone/downloads/", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r422802366", "createdAt": "2020-05-11T06:10:25Z", "author": {"login": "maobaolong"}, "path": "pom.xml", "diffHunk": "@@ -151,6 +151,7 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <slf4j.version>1.7.2</slf4j.version>\n     <jackson.version>2.10.1</jackson.version>\n+    <ozone.version>0.5.0-beta</ozone.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5OTE5NQ=="}, "originalCommit": {"oid": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjU0ODIyOnYy", "diffSide": "RIGHT", "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjoyMjoyMlrOGSWtNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjoyMjoyMlrOGSWtNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5OTU3NQ==", "bodyText": "This should be Ozone?", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r421899575", "createdAt": "2020-05-08T02:22:22Z", "author": {"login": "ZacBlanco"}, "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.ozone;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.Constants;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.UnderFileSystemFactory;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Throwables;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Factory for creating {@link OzoneUnderFileSystem}.\n+ *\n+ * It caches created {@link OzoneUnderFileSystem}s, using the scheme and authority pair as the key.\n+ */\n+@ThreadSafe\n+public class OzoneUnderFileSystemFactory implements UnderFileSystemFactory {\n+  @Override\n+  public UnderFileSystem create(String path, UnderFileSystemConfiguration conf) {\n+    Preconditions.checkNotNull(path, \"path\");\n+\n+    if (checkOzoneCredentials(conf)) {\n+      try {\n+        return OzoneUnderFileSystem.createInstance(new AlluxioURI(path), conf);\n+      } catch (Exception e) {\n+        throw Throwables.propagate(e);\n+      }\n+    }\n+\n+    String err = \"COS Credentials not available, cannot create COS Under File System.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjU1MDM4OnYy", "diffSide": "RIGHT", "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjoyMzozOFrOGSWufQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwMTowOTozMVrOGS_eew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5OTkwMQ==", "bodyText": "Should this say Ozone or O3FS?", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r421899901", "createdAt": "2020-05-08T02:23:38Z", "author": {"login": "ZacBlanco"}, "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystem.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.ozone;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * O3FS {@link UnderFileSystem} implementation.\n+ */\n+@ThreadSafe\n+public class OzoneUnderFileSystem extends HdfsUnderFileSystem {\n+\n+  /**\n+   * Factory method to constructs a new HDFS {@link UnderFileSystem} instance.\n+   *\n+   * @param ufsUri the {@link AlluxioURI} for this UFS\n+   * @param conf the configuration for Hadoop\n+   * @return a new HDFS {@link UnderFileSystem} instance\n+   */\n+  public static OzoneUnderFileSystem createInstance(AlluxioURI ufsUri,\n+      UnderFileSystemConfiguration conf) {\n+    Configuration hdfsConf = createConfiguration(conf);\n+    return new OzoneUnderFileSystem(ufsUri, conf, hdfsConf);\n+  }\n+\n+  /**\n+   * Constructs a new HDFS {@link UnderFileSystem}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU2NzU0Nw==", "bodyText": "I remove these class.", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r422567547", "createdAt": "2020-05-10T01:09:31Z", "author": {"login": "maobaolong"}, "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystem.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.ozone;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * O3FS {@link UnderFileSystem} implementation.\n+ */\n+@ThreadSafe\n+public class OzoneUnderFileSystem extends HdfsUnderFileSystem {\n+\n+  /**\n+   * Factory method to constructs a new HDFS {@link UnderFileSystem} instance.\n+   *\n+   * @param ufsUri the {@link AlluxioURI} for this UFS\n+   * @param conf the configuration for Hadoop\n+   * @return a new HDFS {@link UnderFileSystem} instance\n+   */\n+  public static OzoneUnderFileSystem createInstance(AlluxioURI ufsUri,\n+      UnderFileSystemConfiguration conf) {\n+    Configuration hdfsConf = createConfiguration(conf);\n+    return new OzoneUnderFileSystem(ufsUri, conf, hdfsConf);\n+  }\n+\n+  /**\n+   * Constructs a new HDFS {@link UnderFileSystem}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5OTkwMQ=="}, "originalCommit": {"oid": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjU1MjczOnYy", "diffSide": "RIGHT", "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjoyNDo0NlrOGSWvwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwMTowOToxOVrOGS_eaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwMDIyNA==", "bodyText": "should this say Ozone or O3FS?", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r421900224", "createdAt": "2020-05-08T02:24:46Z", "author": {"login": "ZacBlanco"}, "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystem.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.ozone;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * O3FS {@link UnderFileSystem} implementation.\n+ */\n+@ThreadSafe\n+public class OzoneUnderFileSystem extends HdfsUnderFileSystem {\n+\n+  /**\n+   * Factory method to constructs a new HDFS {@link UnderFileSystem} instance.\n+   *\n+   * @param ufsUri the {@link AlluxioURI} for this UFS\n+   * @param conf the configuration for Hadoop\n+   * @return a new HDFS {@link UnderFileSystem} instance\n+   */\n+  public static OzoneUnderFileSystem createInstance(AlluxioURI ufsUri,\n+      UnderFileSystemConfiguration conf) {\n+    Configuration hdfsConf = createConfiguration(conf);\n+    return new OzoneUnderFileSystem(ufsUri, conf, hdfsConf);\n+  }\n+\n+  /**\n+   * Constructs a new HDFS {@link UnderFileSystem}.\n+   *\n+   * @param ufsUri the {@link AlluxioURI} for this UFS\n+   * @param conf the configuration for this UFS\n+   * @param hdfsConf the configuration for HDFS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU2NzUyOA==", "bodyText": "I remove these class.", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r422567528", "createdAt": "2020-05-10T01:09:19Z", "author": {"login": "maobaolong"}, "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystem.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.ozone;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * O3FS {@link UnderFileSystem} implementation.\n+ */\n+@ThreadSafe\n+public class OzoneUnderFileSystem extends HdfsUnderFileSystem {\n+\n+  /**\n+   * Factory method to constructs a new HDFS {@link UnderFileSystem} instance.\n+   *\n+   * @param ufsUri the {@link AlluxioURI} for this UFS\n+   * @param conf the configuration for Hadoop\n+   * @return a new HDFS {@link UnderFileSystem} instance\n+   */\n+  public static OzoneUnderFileSystem createInstance(AlluxioURI ufsUri,\n+      UnderFileSystemConfiguration conf) {\n+    Configuration hdfsConf = createConfiguration(conf);\n+    return new OzoneUnderFileSystem(ufsUri, conf, hdfsConf);\n+  }\n+\n+  /**\n+   * Constructs a new HDFS {@link UnderFileSystem}.\n+   *\n+   * @param ufsUri the {@link AlluxioURI} for this UFS\n+   * @param conf the configuration for this UFS\n+   * @param hdfsConf the configuration for HDFS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwMDIyNA=="}, "originalCommit": {"oid": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjU1MzgzOnYy", "diffSide": "RIGHT", "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjoyNToxOFrOGSWwYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwMToxMDozNlrOGS_e5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwMDM4Nw==", "bodyText": "is there a reason this isn't implemented yet?", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r421900387", "createdAt": "2020-05-08T02:25:18Z", "author": {"login": "ZacBlanco"}, "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.ozone;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.Constants;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.UnderFileSystemFactory;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Throwables;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Factory for creating {@link OzoneUnderFileSystem}.\n+ *\n+ * It caches created {@link OzoneUnderFileSystem}s, using the scheme and authority pair as the key.\n+ */\n+@ThreadSafe\n+public class OzoneUnderFileSystemFactory implements UnderFileSystemFactory {\n+  @Override\n+  public UnderFileSystem create(String path, UnderFileSystemConfiguration conf) {\n+    Preconditions.checkNotNull(path, \"path\");\n+\n+    if (checkOzoneCredentials(conf)) {\n+      try {\n+        return OzoneUnderFileSystem.createInstance(new AlluxioURI(path), conf);\n+      } catch (Exception e) {\n+        throw Throwables.propagate(e);\n+      }\n+    }\n+\n+    String err = \"COS Credentials not available, cannot create COS Under File System.\";\n+    throw Throwables.propagate(new IOException(err));\n+  }\n+\n+  @Override\n+  public boolean supportsPath(String path) {\n+    return path != null && path.startsWith(Constants.HEADER_OZONE);\n+  }\n+\n+  /**\n+   * @param conf optional configuration object for the UFS\n+   *\n+   * @return true if both access, secret and endpoint keys are present, false otherwise\n+   */\n+  private boolean checkOzoneCredentials(UnderFileSystemConfiguration conf) {\n+    // TODO(maobaolong): impl check logic while ozone supported\n+    return true;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU2NzY1NQ==", "bodyText": "I let this class extents HdfsUnderFileSystemFactory, so the only thing i should override is method 'supportsPath'", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r422567655", "createdAt": "2020-05-10T01:10:36Z", "author": {"login": "maobaolong"}, "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.ozone;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.Constants;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.UnderFileSystemFactory;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Throwables;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Factory for creating {@link OzoneUnderFileSystem}.\n+ *\n+ * It caches created {@link OzoneUnderFileSystem}s, using the scheme and authority pair as the key.\n+ */\n+@ThreadSafe\n+public class OzoneUnderFileSystemFactory implements UnderFileSystemFactory {\n+  @Override\n+  public UnderFileSystem create(String path, UnderFileSystemConfiguration conf) {\n+    Preconditions.checkNotNull(path, \"path\");\n+\n+    if (checkOzoneCredentials(conf)) {\n+      try {\n+        return OzoneUnderFileSystem.createInstance(new AlluxioURI(path), conf);\n+      } catch (Exception e) {\n+        throw Throwables.propagate(e);\n+      }\n+    }\n+\n+    String err = \"COS Credentials not available, cannot create COS Under File System.\";\n+    throw Throwables.propagate(new IOException(err));\n+  }\n+\n+  @Override\n+  public boolean supportsPath(String path) {\n+    return path != null && path.startsWith(Constants.HEADER_OZONE);\n+  }\n+\n+  /**\n+   * @param conf optional configuration object for the UFS\n+   *\n+   * @return true if both access, secret and endpoint keys are present, false otherwise\n+   */\n+  private boolean checkOzoneCredentials(UnderFileSystemConfiguration conf) {\n+    // TODO(maobaolong): impl check logic while ozone supported\n+    return true;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwMDM4Nw=="}, "originalCommit": {"oid": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjU1NDQ5OnYy", "diffSide": "LEFT", "path": "webui/npm-shrinkwrap.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjoyNTo0NFrOGSWwvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzo1MTozNVrOGSYEIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwMDQ3Nw==", "bodyText": "Can you revert the changes to this file?", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r421900477", "createdAt": "2020-05-08T02:25:44Z", "author": {"login": "ZacBlanco"}, "path": "webui/npm-shrinkwrap.json", "diffHunk": "@@ -2055,36 +2055,11 @@\n         \"lodash\": \"^4.17.4\"\n       }\n     },\n-    \"@nodelib/fs.scandir\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkyMTgyNQ==", "bodyText": "Sorry, my fault", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r421921825", "createdAt": "2020-05-08T03:51:35Z", "author": {"login": "maobaolong"}, "path": "webui/npm-shrinkwrap.json", "diffHunk": "@@ -2055,36 +2055,11 @@\n         \"lodash\": \"^4.17.4\"\n       }\n     },\n-    \"@nodelib/fs.scandir\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwMDQ3Nw=="}, "originalCommit": {"oid": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjA5MzUyOnYy", "diffSide": "RIGHT", "path": "underfs/ozone/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxOTo0Njo0MlrOGTG_-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxOTo0Njo0MlrOGTG_-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY5MDgwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <description>Apache ozone Under File System implementation</description>\n          \n          \n            \n              <description>Apache Ozone Under File System implementation</description>", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r422690808", "createdAt": "2020-05-10T19:46:42Z", "author": {"login": "ZacBlanco"}, "path": "underfs/ozone/pom.xml", "diffHunk": "@@ -0,0 +1,94 @@\n+<!--\n+\n+    The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+    (the \"License\"). You may not use this work except in compliance with the License, which is\n+    available at www.apache.org/licenses/LICENSE-2.0\n+\n+    This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+    either express or implied, as more fully set forth in the License.\n+\n+    See the NOTICE file distributed with this work for information regarding copyright ownership.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <artifactId>alluxio-underfs</artifactId>\n+    <groupId>org.alluxio</groupId>\n+    <version>2.3.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>alluxio-underfs-ozone</artifactId>\n+  <name>Alluxio Under File System - Apache ozone</name>\n+  <description>Apache ozone Under File System implementation</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d9c1b5375a23d6a34f973ce859849a48a495f9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjA5MzU5OnYy", "diffSide": "RIGHT", "path": "underfs/ozone/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxOTo0Njo1MFrOGTHAAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxOTo0Njo1MFrOGTHAAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY5MDgxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <name>Alluxio Under File System - Apache ozone</name>\n          \n          \n            \n              <name>Alluxio Under File System - Apache Ozone</name>", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r422690818", "createdAt": "2020-05-10T19:46:50Z", "author": {"login": "ZacBlanco"}, "path": "underfs/ozone/pom.xml", "diffHunk": "@@ -0,0 +1,94 @@\n+<!--\n+\n+    The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+    (the \"License\"). You may not use this work except in compliance with the License, which is\n+    available at www.apache.org/licenses/LICENSE-2.0\n+\n+    This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+    either express or implied, as more fully set forth in the License.\n+\n+    See the NOTICE file distributed with this work for information regarding copyright ownership.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <artifactId>alluxio-underfs</artifactId>\n+    <groupId>org.alluxio</groupId>\n+    <version>2.3.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>alluxio-underfs-ozone</artifactId>\n+  <name>Alluxio Under File System - Apache ozone</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d9c1b5375a23d6a34f973ce859849a48a495f9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjA5NjE1OnYy", "diffSide": "RIGHT", "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxOTo0OToyOVrOGTHBMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoxMjoyMlrOGTN2gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY5MTEyMQ==", "bodyText": "Can you update the javadoc to reference OzoneUnderFileSystem instead of HdfsUnderFileSystem?", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r422691121", "createdAt": "2020-05-10T19:49:29Z", "author": {"login": "ZacBlanco"}, "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.ozone;\n+\n+import alluxio.Constants;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystemFactory;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Factory for creating {@link HdfsUnderFileSystem}.\n+ *\n+ * It caches created {@link HdfsUnderFileSystem}s, using the scheme and authority pair as the key.\n+ */\n+@ThreadSafe", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d9c1b5375a23d6a34f973ce859849a48a495f9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwMzA3NA==", "bodyText": "@ZacBlanco I have no OzoneUnderFileSystem now, it is removed, i use HdfsUnderFileSystem for access ozone", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r422803074", "createdAt": "2020-05-11T06:12:22Z", "author": {"login": "maobaolong"}, "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.ozone;\n+\n+import alluxio.Constants;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystemFactory;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Factory for creating {@link HdfsUnderFileSystem}.\n+ *\n+ * It caches created {@link HdfsUnderFileSystem}s, using the scheme and authority pair as the key.\n+ */\n+@ThreadSafe", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY5MTEyMQ=="}, "originalCommit": {"oid": "c2d9c1b5375a23d6a34f973ce859849a48a495f9"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1717, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}