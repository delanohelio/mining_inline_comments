{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMjU4MjE1", "number": 11114, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMTo1Mjo0OVrODlQ_sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0NjowM1rODliiDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDAyMzUyOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/block/RetryHandlingBlockMasterClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMTo1Mjo0OVrOFyD9VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo1OToxNVrOFyeAlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzNzk3Mg==", "bodyText": "No args?", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388037972", "createdAt": "2020-03-05T01:52:49Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/block/RetryHandlingBlockMasterClient.java", "diffHunk": "@@ -98,14 +102,15 @@ protected void afterConnect() {\n         result.add(GrpcUtils.fromProto(workerInfo));\n       }\n       return result;\n-    });\n+    }, LOG, \"GetWorkerReport\", \"options=%s\", options);\n   }\n \n   @Override\n   public List<WorkerLostStorageInfo> getWorkerLostStorage() throws IOException {\n     return retryRPC(() -> mClient\n         .getWorkerLostStorage(GetWorkerLostStoragePOptions.getDefaultInstance())\n-        .getWorkerLostStorageInfoList());\n+        .getWorkerLostStorageInfoList(),\n+        LOG, \"GetWorkerLostStorage\", \"options=%s\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcf73887b04e23534e1c868a16069aa13b2ef18a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NDc4OQ==", "bodyText": "fixed", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388464789", "createdAt": "2020-03-05T17:59:15Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/block/RetryHandlingBlockMasterClient.java", "diffHunk": "@@ -98,14 +102,15 @@ protected void afterConnect() {\n         result.add(GrpcUtils.fromProto(workerInfo));\n       }\n       return result;\n-    });\n+    }, LOG, \"GetWorkerReport\", \"options=%s\", options);\n   }\n \n   @Override\n   public List<WorkerLostStorageInfo> getWorkerLostStorage() throws IOException {\n     return retryRPC(() -> mClient\n         .getWorkerLostStorage(GetWorkerLostStoragePOptions.getDefaultInstance())\n-        .getWorkerLostStorageInfoList());\n+        .getWorkerLostStorageInfoList(),\n+        LOG, \"GetWorkerLostStorage\", \"options=%s\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzNzk3Mg=="}, "originalCommit": {"oid": "dcf73887b04e23534e1c868a16069aa13b2ef18a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDAzMzc4OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/AbstractClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMTo1OTowOFrOFyEDpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODowMjowOVrOFyeGag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzOTU4OA==", "bodyText": "Maybe inline ts2?", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388039588", "createdAt": "2020-03-05T01:59:08Z", "author": {"login": "calvinjia"}, "path": "core/common/src/main/java/alluxio/AbstractClient.java", "diffHunk": "@@ -335,41 +336,40 @@ public synchronized InetSocketAddress getConfAddress() throws UnavailableExcepti\n     V call() throws StatusRuntimeException;\n   }\n \n-  /**\n-   * Tries to execute an RPC defined as a {@link RpcCallable}.\n-   *\n-   * If a {@link UnavailableException} occurs, a reconnection will be tried through\n-   * {@link #connect()} and the action will be re-executed.\n-   *\n-   * @param rpc the RPC call to be executed\n-   * @param <V> type of return value of the RPC call\n-   * @return the return value of the RPC call\n-   */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc) throws AlluxioStatusException {\n-    return retryRPCInternal(rpc, () -> null);\n-  }\n-\n   /**\n    * Tries to execute an RPC defined as a {@link RpcCallable}. Metrics will be recorded based on\n    * the provided rpc name.\n    *\n    * If a {@link UnavailableException} occurs, a reconnection will be tried through\n    * {@link #connect()} and the action will be re-executed.\n    *\n+   * @param <V> type of return value of the RPC call\n    * @param rpc the RPC call to be executed\n+   * @param logger the logger to use for this call\n    * @param rpcName the human readable name of the RPC call\n-   * @param <V> type of return value of the RPC call\n+   * @param description the format string of the description, used for logging\n+   * @param args the arguments for the description\n    * @return the return value of the RPC call\n+   * @throws AlluxioStatusException\n    */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, String rpcName)\n-      throws AlluxioStatusException {\n+  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, Logger logger, String rpcName,\n+      String description, Object... args) throws AlluxioStatusException {\n+    String debugDesc = logger.isDebugEnabled() ? String.format(description, args) : null;\n+    long ts1 = System.currentTimeMillis();\n+    logger.debug(\"Enter: {}({})\", rpcName, debugDesc);\n     try (Timer.Context ctx = MetricsSystem.timer(getQualifiedMetricName(rpcName)).time()) {\n-      return retryRPCInternal(rpc, () -> {\n+      V ret = retryRPCInternal(rpc, () -> {\n         MetricsSystem.counter(getQualifiedRetryMetricName(rpcName)).inc();\n         return null;\n       });\n+      long ts2 = System.currentTimeMillis();\n+      logger.debug(\"Exit (OK): {}({}) in {} ms\", rpcName, debugDesc, ts2 - ts1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcf73887b04e23534e1c868a16069aa13b2ef18a"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NjI4Mg==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388466282", "createdAt": "2020-03-05T18:02:09Z", "author": {"login": "apc999"}, "path": "core/common/src/main/java/alluxio/AbstractClient.java", "diffHunk": "@@ -335,41 +336,40 @@ public synchronized InetSocketAddress getConfAddress() throws UnavailableExcepti\n     V call() throws StatusRuntimeException;\n   }\n \n-  /**\n-   * Tries to execute an RPC defined as a {@link RpcCallable}.\n-   *\n-   * If a {@link UnavailableException} occurs, a reconnection will be tried through\n-   * {@link #connect()} and the action will be re-executed.\n-   *\n-   * @param rpc the RPC call to be executed\n-   * @param <V> type of return value of the RPC call\n-   * @return the return value of the RPC call\n-   */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc) throws AlluxioStatusException {\n-    return retryRPCInternal(rpc, () -> null);\n-  }\n-\n   /**\n    * Tries to execute an RPC defined as a {@link RpcCallable}. Metrics will be recorded based on\n    * the provided rpc name.\n    *\n    * If a {@link UnavailableException} occurs, a reconnection will be tried through\n    * {@link #connect()} and the action will be re-executed.\n    *\n+   * @param <V> type of return value of the RPC call\n    * @param rpc the RPC call to be executed\n+   * @param logger the logger to use for this call\n    * @param rpcName the human readable name of the RPC call\n-   * @param <V> type of return value of the RPC call\n+   * @param description the format string of the description, used for logging\n+   * @param args the arguments for the description\n    * @return the return value of the RPC call\n+   * @throws AlluxioStatusException\n    */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, String rpcName)\n-      throws AlluxioStatusException {\n+  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, Logger logger, String rpcName,\n+      String description, Object... args) throws AlluxioStatusException {\n+    String debugDesc = logger.isDebugEnabled() ? String.format(description, args) : null;\n+    long ts1 = System.currentTimeMillis();\n+    logger.debug(\"Enter: {}({})\", rpcName, debugDesc);\n     try (Timer.Context ctx = MetricsSystem.timer(getQualifiedMetricName(rpcName)).time()) {\n-      return retryRPCInternal(rpc, () -> {\n+      V ret = retryRPCInternal(rpc, () -> {\n         MetricsSystem.counter(getQualifiedRetryMetricName(rpcName)).inc();\n         return null;\n       });\n+      long ts2 = System.currentTimeMillis();\n+      logger.debug(\"Exit (OK): {}({}) in {} ms\", rpcName, debugDesc, ts2 - ts1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzOTU4OA=="}, "originalCommit": {"oid": "dcf73887b04e23534e1c868a16069aa13b2ef18a"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDAzNDMxOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/AbstractClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMTo1OToyOVrOFyED_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODowMjoxNVrOFyeGog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzOTY3OQ==", "bodyText": "Can rename this to startMs?", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388039679", "createdAt": "2020-03-05T01:59:29Z", "author": {"login": "calvinjia"}, "path": "core/common/src/main/java/alluxio/AbstractClient.java", "diffHunk": "@@ -335,41 +336,40 @@ public synchronized InetSocketAddress getConfAddress() throws UnavailableExcepti\n     V call() throws StatusRuntimeException;\n   }\n \n-  /**\n-   * Tries to execute an RPC defined as a {@link RpcCallable}.\n-   *\n-   * If a {@link UnavailableException} occurs, a reconnection will be tried through\n-   * {@link #connect()} and the action will be re-executed.\n-   *\n-   * @param rpc the RPC call to be executed\n-   * @param <V> type of return value of the RPC call\n-   * @return the return value of the RPC call\n-   */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc) throws AlluxioStatusException {\n-    return retryRPCInternal(rpc, () -> null);\n-  }\n-\n   /**\n    * Tries to execute an RPC defined as a {@link RpcCallable}. Metrics will be recorded based on\n    * the provided rpc name.\n    *\n    * If a {@link UnavailableException} occurs, a reconnection will be tried through\n    * {@link #connect()} and the action will be re-executed.\n    *\n+   * @param <V> type of return value of the RPC call\n    * @param rpc the RPC call to be executed\n+   * @param logger the logger to use for this call\n    * @param rpcName the human readable name of the RPC call\n-   * @param <V> type of return value of the RPC call\n+   * @param description the format string of the description, used for logging\n+   * @param args the arguments for the description\n    * @return the return value of the RPC call\n+   * @throws AlluxioStatusException\n    */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, String rpcName)\n-      throws AlluxioStatusException {\n+  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, Logger logger, String rpcName,\n+      String description, Object... args) throws AlluxioStatusException {\n+    String debugDesc = logger.isDebugEnabled() ? String.format(description, args) : null;\n+    long ts1 = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcf73887b04e23534e1c868a16069aa13b2ef18a"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NjMzOA==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388466338", "createdAt": "2020-03-05T18:02:15Z", "author": {"login": "apc999"}, "path": "core/common/src/main/java/alluxio/AbstractClient.java", "diffHunk": "@@ -335,41 +336,40 @@ public synchronized InetSocketAddress getConfAddress() throws UnavailableExcepti\n     V call() throws StatusRuntimeException;\n   }\n \n-  /**\n-   * Tries to execute an RPC defined as a {@link RpcCallable}.\n-   *\n-   * If a {@link UnavailableException} occurs, a reconnection will be tried through\n-   * {@link #connect()} and the action will be re-executed.\n-   *\n-   * @param rpc the RPC call to be executed\n-   * @param <V> type of return value of the RPC call\n-   * @return the return value of the RPC call\n-   */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc) throws AlluxioStatusException {\n-    return retryRPCInternal(rpc, () -> null);\n-  }\n-\n   /**\n    * Tries to execute an RPC defined as a {@link RpcCallable}. Metrics will be recorded based on\n    * the provided rpc name.\n    *\n    * If a {@link UnavailableException} occurs, a reconnection will be tried through\n    * {@link #connect()} and the action will be re-executed.\n    *\n+   * @param <V> type of return value of the RPC call\n    * @param rpc the RPC call to be executed\n+   * @param logger the logger to use for this call\n    * @param rpcName the human readable name of the RPC call\n-   * @param <V> type of return value of the RPC call\n+   * @param description the format string of the description, used for logging\n+   * @param args the arguments for the description\n    * @return the return value of the RPC call\n+   * @throws AlluxioStatusException\n    */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, String rpcName)\n-      throws AlluxioStatusException {\n+  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, Logger logger, String rpcName,\n+      String description, Object... args) throws AlluxioStatusException {\n+    String debugDesc = logger.isDebugEnabled() ? String.format(description, args) : null;\n+    long ts1 = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzOTY3OQ=="}, "originalCommit": {"oid": "dcf73887b04e23534e1c868a16069aa13b2ef18a"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDAzNDk1OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/AbstractClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMTo1OTo1M1rOFyEEag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODowMjo1MFrOFyeH0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzOTc4Ng==", "bodyText": "Why did we add synchronization here?", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388039786", "createdAt": "2020-03-05T01:59:53Z", "author": {"login": "calvinjia"}, "path": "core/common/src/main/java/alluxio/AbstractClient.java", "diffHunk": "@@ -116,14 +119,12 @@ public AbstractClient(ClientContext context, InetSocketAddress address,\n    */\n   protected abstract ServiceType getRemoteServiceType();\n \n-  protected long getRemoteServiceVersion() throws AlluxioStatusException {\n-    return retryRPC(new RpcCallable<Long>() {\n-      public Long call() {\n-        return mVersionService.getServiceVersion(\n+  protected synchronized long getRemoteServiceVersion() throws AlluxioStatusException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcf73887b04e23534e1c868a16069aa13b2ef18a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NjY0Mg==", "bodyText": "originally to make findbug happy. after adding suppress, I could remove this keyword", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388466642", "createdAt": "2020-03-05T18:02:50Z", "author": {"login": "apc999"}, "path": "core/common/src/main/java/alluxio/AbstractClient.java", "diffHunk": "@@ -116,14 +119,12 @@ public AbstractClient(ClientContext context, InetSocketAddress address,\n    */\n   protected abstract ServiceType getRemoteServiceType();\n \n-  protected long getRemoteServiceVersion() throws AlluxioStatusException {\n-    return retryRPC(new RpcCallable<Long>() {\n-      public Long call() {\n-        return mVersionService.getServiceVersion(\n+  protected synchronized long getRemoteServiceVersion() throws AlluxioStatusException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzOTc4Ng=="}, "originalCommit": {"oid": "dcf73887b04e23534e1c868a16069aa13b2ef18a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg5Njc4OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/meta/MetaMasterClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0NjowM1rOFyfflw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0NjowM1rOFyfflw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4OTExMQ==", "bodyText": "make it consistent across different clients", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388489111", "createdAt": "2020-03-05T18:46:03Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/meta/MetaMasterClient.java", "diffHunk": "@@ -11,21 +11,21 @@\n \n package alluxio.client.meta;\n \n+import alluxio.Client;\n import alluxio.grpc.BackupPRequest;\n import alluxio.grpc.MasterInfo;\n import alluxio.grpc.MasterInfoField;\n import alluxio.wire.BackupStatus;\n import alluxio.wire.ConfigCheckReport;\n \n-import java.io.Closeable;\n import java.io.IOException;\n import java.util.Set;\n import java.util.UUID;\n \n /**\n  * Interface for a meta master client.\n  */\n-public interface MetaMasterClient extends Closeable {\n+public interface MetaMasterClient extends Client {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90d46f072089b593deafaaee7e3d75343faa9748"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1903, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}