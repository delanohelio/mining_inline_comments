{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjEzMjA0", "number": 11683, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToyNTowOVrOEKPsyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToyNTowOVrOEKPsyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTc4NDQzOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToyNTowOVrOGrLP1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoyMzo1MlrOGrNHoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNjIyOA==", "bodyText": "minor question, do thread ids typically start from 0 or 1?", "url": "https://github.com/Alluxio/alluxio/pull/11683#discussion_r447926228", "createdAt": "2020-06-30T19:25:09Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java", "diffHunk": "@@ -2495,6 +2496,45 @@ public ForkJoinWorkerThread run() {\n     }\n   }\n \n+  /**\n+   * Default ForkJoinWorkerThreadFactory implementation; creates a new ForkJoinWorkerThread using\n+   * the system class loader as the thread context class loader.\n+   */\n+  public static final class AlluxioForkJoinWorkerThreadFactory\n+          implements ForkJoinWorkerThreadFactory {\n+    private static final AccessControlContext ACC = contextWithPermissions(\n+            // new RuntimePermission(\"setContextClassLoader\"), // java9-concurrent-backport changed\n+            new RuntimePermission(\"getClassLoader\"));\n+    // Thread id counter.\n+    private static final AtomicLong sThreadId = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a50b502470e15f08ea8463a5fb52ac702cdc3e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1MjgwNw==", "bodyText": "That's how guava thread-factory that we use assign indices to threads.", "url": "https://github.com/Alluxio/alluxio/pull/11683#discussion_r447952807", "createdAt": "2020-06-30T20:16:02Z", "author": {"login": "ggezer"}, "path": "core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java", "diffHunk": "@@ -2495,6 +2496,45 @@ public ForkJoinWorkerThread run() {\n     }\n   }\n \n+  /**\n+   * Default ForkJoinWorkerThreadFactory implementation; creates a new ForkJoinWorkerThread using\n+   * the system class loader as the thread context class loader.\n+   */\n+  public static final class AlluxioForkJoinWorkerThreadFactory\n+          implements ForkJoinWorkerThreadFactory {\n+    private static final AccessControlContext ACC = contextWithPermissions(\n+            // new RuntimePermission(\"setContextClassLoader\"), // java9-concurrent-backport changed\n+            new RuntimePermission(\"getClassLoader\"));\n+    // Thread id counter.\n+    private static final AtomicLong sThreadId = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNjIyOA=="}, "originalCommit": {"oid": "58a50b502470e15f08ea8463a5fb52ac702cdc3e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1MzQwOQ==", "bodyText": "changed the name to better reflect that it's an index.", "url": "https://github.com/Alluxio/alluxio/pull/11683#discussion_r447953409", "createdAt": "2020-06-30T20:17:18Z", "author": {"login": "ggezer"}, "path": "core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java", "diffHunk": "@@ -2495,6 +2496,45 @@ public ForkJoinWorkerThread run() {\n     }\n   }\n \n+  /**\n+   * Default ForkJoinWorkerThreadFactory implementation; creates a new ForkJoinWorkerThread using\n+   * the system class loader as the thread context class loader.\n+   */\n+  public static final class AlluxioForkJoinWorkerThreadFactory\n+          implements ForkJoinWorkerThreadFactory {\n+    private static final AccessControlContext ACC = contextWithPermissions(\n+            // new RuntimePermission(\"setContextClassLoader\"), // java9-concurrent-backport changed\n+            new RuntimePermission(\"getClassLoader\"));\n+    // Thread id counter.\n+    private static final AtomicLong sThreadId = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNjIyOA=="}, "originalCommit": {"oid": "58a50b502470e15f08ea8463a5fb52ac702cdc3e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1Njg5Ng==", "bodyText": "ok, sounds good", "url": "https://github.com/Alluxio/alluxio/pull/11683#discussion_r447956896", "createdAt": "2020-06-30T20:23:52Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java", "diffHunk": "@@ -2495,6 +2496,45 @@ public ForkJoinWorkerThread run() {\n     }\n   }\n \n+  /**\n+   * Default ForkJoinWorkerThreadFactory implementation; creates a new ForkJoinWorkerThread using\n+   * the system class loader as the thread context class loader.\n+   */\n+  public static final class AlluxioForkJoinWorkerThreadFactory\n+          implements ForkJoinWorkerThreadFactory {\n+    private static final AccessControlContext ACC = contextWithPermissions(\n+            // new RuntimePermission(\"setContextClassLoader\"), // java9-concurrent-backport changed\n+            new RuntimePermission(\"getClassLoader\"));\n+    // Thread id counter.\n+    private static final AtomicLong sThreadId = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNjIyOA=="}, "originalCommit": {"oid": "58a50b502470e15f08ea8463a5fb52ac702cdc3e"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1530, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}