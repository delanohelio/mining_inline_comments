{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NzA1NDk2", "number": 11449, "title": "Improve incremental active sync", "bodyText": "This PR improves a number of items over the previous incremental sync implementation.\n\n\nThe ActiveSyncer heartbeat thread no longer performs incremental syncs synchronously within the heartbeat. A sync is scheduled as a future on an executor during the heartbeat and the status is checked in the following heartbeat.\n\n\nThe DFSInotifyStream returns EventBatches that the previous implementation assumed contains a significant number of events per batch (on the order of thousands). This is not the case. The EventBatch object contains only events pertaining to a specific transaction ID on the HDFS namenode. This equates to usually 1-2 events per EventBatch. The incremental sync loop now processes with the correct assumption.\n\n\nThe incremental sync loop no longer processes events in the same thread which polls from the DFSInotifyEventStream. Events are polled and then sent off to be processed in an executor. This increases the theoretical maximum throughput from 1 single thread the N threads configured.", "createdAt": "2020-05-18T19:45:32Z", "url": "https://github.com/Alluxio/alluxio/pull/11449", "merged": true, "mergeCommit": {"oid": "3227dafec7d24f8dc3e2c07621771e965c594d88"}, "closed": true, "closedAt": "2020-05-28T18:39:00Z", "author": {"login": "ZacBlanco"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcilQ3agH2gAyNDE5NzA1NDk2OmNhYzMzOTljZjUwMjE2OTBhYmM3MjRiMzU2YTE4OTVkYzhiODdmZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclw6QIgH2gAyNDE5NzA1NDk2OjRjM2ZkNWIzMWJjNDQzYWYyZDZjNDJlNzNkNTY5Y2UzMDNjMWM4MWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cac3399cf5021690abc724b356a1895dc8b87fef", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/cac3399cf5021690abc724b356a1895dc8b87fef", "committedDate": "2020-05-18T19:44:25Z", "message": "Updates for incremental sync"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcef28d77dae90e718bb5f5b110f67a87b2ef5e2", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/dcef28d77dae90e718bb5f5b110f67a87b2ef5e2", "committedDate": "2020-05-18T19:52:15Z", "message": "Fix style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9cb07b048cf5081d1fc11213e3c6e37327c45b1", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/c9cb07b048cf5081d1fc11213e3c6e37327c45b1", "committedDate": "2020-05-18T22:37:44Z", "message": "updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11b1d99d4023e3f63bdf2f0324d51a78d311400a", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/11b1d99d4023e3f63bdf2f0324d51a78d311400a", "committedDate": "2020-05-20T00:12:21Z", "message": "update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7ccfad39e8bdf2278f5b83c8a70aa158345c27c", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/f7ccfad39e8bdf2278f5b83c8a70aa158345c27c", "committedDate": "2020-05-20T02:47:15Z", "message": "Revert changes to lockResource\n\n- It's possible they are causing deadlock. Have not yet determined why"}, "afterCommit": {"oid": "a946e6f07bfa482d9170b339798840a5c334c76e", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/a946e6f07bfa482d9170b339798840a5c334c76e", "committedDate": "2020-05-20T03:03:29Z", "message": "Revert changes to lockResource\n\n- It's possible they are causing deadlock. Have not yet determined why"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc80b1fb23e9b37acfb610084ca327b6344662ec", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/cc80b1fb23e9b37acfb610084ca327b6344662ec", "committedDate": "2020-05-20T03:45:16Z", "message": "Revert changes to lockResource\n\n- It's possible they are causing deadlock. Have not yet determined why"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a946e6f07bfa482d9170b339798840a5c334c76e", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/a946e6f07bfa482d9170b339798840a5c334c76e", "committedDate": "2020-05-20T03:03:29Z", "message": "Revert changes to lockResource\n\n- It's possible they are causing deadlock. Have not yet determined why"}, "afterCommit": {"oid": "cc80b1fb23e9b37acfb610084ca327b6344662ec", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/cc80b1fb23e9b37acfb610084ca327b6344662ec", "committedDate": "2020-05-20T03:45:16Z", "message": "Revert changes to lockResource\n\n- It's possible they are causing deadlock. Have not yet determined why"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7055a7a9917174a07db6493cce3ec12057eff0c5", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/7055a7a9917174a07db6493cce3ec12057eff0c5", "committedDate": "2020-05-20T17:26:42Z", "message": "Fix failing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78fd91ae391c4798106c6070f071c7f2fda33a3f", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/78fd91ae391c4798106c6070f071c7f2fda33a3f", "committedDate": "2020-05-20T19:34:56Z", "message": "Revert changes to LockResource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MzY1MzAy", "url": "https://github.com/Alluxio/alluxio/pull/11449#pullrequestreview-416365302", "createdAt": "2020-05-21T17:54:28Z", "commit": {"oid": "78fd91ae391c4798106c6070f071c7f2fda33a3f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzo1NDoyOFrOGY83hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTozMTozMFrOGY_-1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgxNjI2Mg==", "bodyText": "Was this a bug? Why was this change made?", "url": "https://github.com/Alluxio/alluxio/pull/11449#discussion_r428816262", "createdAt": "2020-05-21T17:54:28Z", "author": {"login": "gpang"}, "path": "bin/alluxio", "diffHunk": "@@ -149,7 +149,7 @@ function runJavaClass {\n               CLASS_ARGS+=(\"${arg}\")\n       esac\n   done\n-  \"${JAVA}\" -cp ${CLASSPATH} ${ALLUXIO_USER_JAVA_OPTS} ${ALLUXIO_SHELL_JAVA_OPTS} ${CLASS} ${PARAMETER} \"${CLASS_ARGS[@]}\"\n+  exec \"${JAVA}\" -cp ${CLASSPATH} ${ALLUXIO_USER_JAVA_OPTS} ${ALLUXIO_SHELL_JAVA_OPTS} ${CLASS} ${PARAMETER} \"${CLASS_ARGS[@]}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fd91ae391c4798106c6070f071c7f2fda33a3f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgxNzMwOQ==", "bodyText": "Could you add the implications of too high or too low value of this?", "url": "https://github.com/Alluxio/alluxio/pull/11449#discussion_r428817309", "createdAt": "2020-05-21T17:56:19Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -1973,7 +1973,8 @@ public String toString() {\n           .build();\n   public static final PropertyKey MASTER_UFS_ACTIVE_SYNC_THREAD_POOL_SIZE =\n       new Builder(Name.MASTER_UFS_ACTIVE_SYNC_THREAD_POOL_SIZE)\n-          .setDefaultValue(\"3\")\n+          .setDefaultSupplier(() -> Math.max(2, Runtime.getRuntime().availableProcessors() / 2),\n+              \"The number of threads used by the active sync provider process active sync events\")\n           .setDescription(\"Max number of threads used to perform active sync\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fd91ae391c4798106c6070f071c7f2fda33a3f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgxODAzMA==", "bodyText": "is this supposed to be MASTER_UFS_ACTIVE_SYNC_THREAD_POOL_SIZE?", "url": "https://github.com/Alluxio/alluxio/pull/11449#discussion_r428818030", "createdAt": "2020-05-21T17:57:35Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -384,12 +384,18 @@\n       1, TimeUnit.MINUTES, new LinkedBlockingQueue<>(),\n       ThreadFactoryUtils.build(\"alluxio-ufs-sync-prefetch-%d\", false));\n \n-  final ThreadPoolExecutor mMetadataSyncExecutor = new ThreadPoolExecutor(\n+  final ThreadPoolExecutor mSyncMetadataExecutor = new ThreadPoolExecutor(\n       ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_EXECUTOR_POOL_SIZE),\n       ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_EXECUTOR_POOL_SIZE),\n       1, TimeUnit.MINUTES, new LinkedBlockingQueue<>(),\n       ThreadFactoryUtils.build(\"alluxio-ufs-sync-%d\", false));\n \n+  final ThreadPoolExecutor mActiveSyncMetadataExecutor = new ThreadPoolExecutor(\n+      ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_EXECUTOR_POOL_SIZE),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fd91ae391c4798106c6070f071c7f2fda33a3f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyMjI2MA==", "bodyText": "Why was this removed?", "url": "https://github.com/Alluxio/alluxio/pull/11449#discussion_r428822260", "createdAt": "2020-05-21T18:05:14Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/activesync/ActiveSyncManager.java", "diffHunk": "@@ -342,10 +348,6 @@ public void stopSyncAndJournal(RpcContext rpcContext, AlluxioURI syncPoint)\n     }\n     try (LockResource r = new LockResource(mLock)) {\n       MountTable.Resolution resolution = mMountTable.resolve(syncPoint);\n-      if (resolution == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fd91ae391c4798106c6070f071c7f2fda33a3f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg1Nzc2MQ==", "bodyText": "NIT: can we add the mount id, and maybe the mount path in this message?", "url": "https://github.com/Alluxio/alluxio/pull/11449#discussion_r428857761", "createdAt": "2020-05-21T19:12:42Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/activesync/ActiveSyncer.java", "diffHunk": "@@ -61,11 +68,16 @@ public ActiveSyncer(FileSystemMaster fileSystemMaster, ActiveSyncManager syncMan\n     mSyncManager = syncManager;\n     mMountId = mountId;\n     mMountTable = mountTable;\n+    mSyncTasks = new LinkedBlockingQueue<>(32);\n   }\n \n   @Override\n   public void heartbeat() {\n     LOG.debug(\"start Active Syncer heartbeat\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fd91ae391c4798106c6070f071c7f2fda33a3f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MDc2MA==", "bodyText": "should this be mSyncTasks.peek().isDone()? Don't we want to remove the ones that are considered done?", "url": "https://github.com/Alluxio/alluxio/pull/11449#discussion_r428860760", "createdAt": "2020-05-21T19:18:45Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/activesync/ActiveSyncer.java", "diffHunk": "@@ -61,11 +68,16 @@ public ActiveSyncer(FileSystemMaster fileSystemMaster, ActiveSyncManager syncMan\n     mSyncManager = syncManager;\n     mMountId = mountId;\n     mMountTable = mountTable;\n+    mSyncTasks = new LinkedBlockingQueue<>(32);\n   }\n \n   @Override\n   public void heartbeat() {\n     LOG.debug(\"start Active Syncer heartbeat\");\n+    // Remove any previously completed sync tasks\n+    while (mSyncTasks.peek() != null && !mSyncTasks.peek().isDone()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fd91ae391c4798106c6070f071c7f2fda33a3f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2NDMwNA==", "bodyText": "Was this wrong before, journaling too early?", "url": "https://github.com/Alluxio/alluxio/pull/11449#discussion_r428864304", "createdAt": "2020-05-21T19:25:41Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/activesync/ActiveSyncer.java", "diffHunk": "@@ -74,29 +86,47 @@ public void heartbeat() {\n     }\n \n     try {\n-      UfsManager.UfsClient ufsclient = mMountTable.getUfsClient(mMountId);\n+      UfsManager.UfsClient ufsclient = Objects.requireNonNull(mMountTable.getUfsClient(mMountId));\n       try (CloseableResource<UnderFileSystem> ufsResource = ufsclient.acquireUfsResource()) {\n         UnderFileSystem ufs = ufsResource.get();\n         if (ufs.supportsActiveSync()) {\n           SyncInfo syncInfo = ufs.getActiveSyncInfo();\n           // This returns a list of ufsUris that we need to sync.\n           Set<AlluxioURI> ufsSyncPoints = syncInfo.getSyncPoints();\n           // Parallelize across sync points\n-          List<Callable<Void>> tasksPerSyncPoint = new ArrayList<>(ufsSyncPoints.size());\n+          List<CompletableFuture<Long>> tasksPerSync = new ArrayList<>();\n           for (AlluxioURI ufsUri : ufsSyncPoints) {\n-            tasksPerSyncPoint.add(() -> {\n+            tasksPerSync.add(CompletableFuture.supplyAsync(() -> {\n               processSyncPoint(ufsUri, syncInfo);\n-              return null;\n-            });\n+              return syncInfo.getTxId();\n+            }, mSyncManager.getExecutor()));\n           }\n-          mSyncManager.getExecutor().invokeAll(tasksPerSyncPoint);\n           // Journal the latest processed txId\n-          mFileSystemMaster.recordActiveSyncTxid(syncInfo.getTxId(), mMountId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fd91ae391c4798106c6070f071c7f2fda33a3f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2NTcxOA==", "bodyText": "If the first task in the queue is slow for some reason, would that hold up all the rest of the processing, even if the rest of the tasks have completed?", "url": "https://github.com/Alluxio/alluxio/pull/11449#discussion_r428865718", "createdAt": "2020-05-21T19:28:35Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/activesync/ActiveSyncer.java", "diffHunk": "@@ -74,29 +86,47 @@ public void heartbeat() {\n     }\n \n     try {\n-      UfsManager.UfsClient ufsclient = mMountTable.getUfsClient(mMountId);\n+      UfsManager.UfsClient ufsclient = Objects.requireNonNull(mMountTable.getUfsClient(mMountId));\n       try (CloseableResource<UnderFileSystem> ufsResource = ufsclient.acquireUfsResource()) {\n         UnderFileSystem ufs = ufsResource.get();\n         if (ufs.supportsActiveSync()) {\n           SyncInfo syncInfo = ufs.getActiveSyncInfo();\n           // This returns a list of ufsUris that we need to sync.\n           Set<AlluxioURI> ufsSyncPoints = syncInfo.getSyncPoints();\n           // Parallelize across sync points\n-          List<Callable<Void>> tasksPerSyncPoint = new ArrayList<>(ufsSyncPoints.size());\n+          List<CompletableFuture<Long>> tasksPerSync = new ArrayList<>();\n           for (AlluxioURI ufsUri : ufsSyncPoints) {\n-            tasksPerSyncPoint.add(() -> {\n+            tasksPerSync.add(CompletableFuture.supplyAsync(() -> {\n               processSyncPoint(ufsUri, syncInfo);\n-              return null;\n-            });\n+              return syncInfo.getTxId();\n+            }, mSyncManager.getExecutor()));\n           }\n-          mSyncManager.getExecutor().invokeAll(tasksPerSyncPoint);\n           // Journal the latest processed txId\n-          mFileSystemMaster.recordActiveSyncTxid(syncInfo.getTxId(), mMountId);\n+          CompletableFuture<Void> syncTask =\n+              CompletableFuture.allOf(tasksPerSync.toArray(new CompletableFuture<?>[0]))\n+              .thenRunAsync(() -> mFileSystemMaster\n+                      .recordActiveSyncTxid(syncInfo.getTxId(), mMountId),\n+                  mSyncManager.getExecutor());\n+          while (!mSyncTasks.offer(syncTask)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fd91ae391c4798106c6070f071c7f2fda33a3f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2NzI4NQ==", "bodyText": "Is this supposed to be final? Can the previous EventBatch batch = ... just be final?", "url": "https://github.com/Alluxio/alluxio/pull/11449#discussion_r428867285", "createdAt": "2020-05-21T19:31:30Z", "author": {"login": "gpang"}, "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/activesync/SupportedHdfsActiveSyncProvider.java", "diffHunk": "@@ -258,38 +273,52 @@ public void stopSync(AlluxioURI ufsUri) {\n    * @param eventStream event stream\n    */\n   public void pollEvent(DFSInotifyEventInputStream eventStream) {\n-    EventBatch batch;\n     LOG.debug(\"Polling thread starting, with timeout {} ms\", mActiveUfsPollTimeoutMs);\n-    int count = 0;\n     long start = System.currentTimeMillis();\n \n     long behind = eventStream.getTxidsBehindEstimate();\n \n     while (!Thread.currentThread().isInterrupted()) {\n       try {\n-        batch = eventStream.poll(mActiveUfsPollTimeoutMs, TimeUnit.MILLISECONDS);\n \n-        if (batch != null) {\n-          long txId = batch.getTxid();\n-          count += batch.getEvents().length;\n-          for (Event event : batch.getEvents()) {\n-            processEvent(event, mUfsUriList, txId);\n+        List<Callable<Integer>> process = new LinkedList<>();\n+        for (int i = 0; i < mBatchSize; i++) {\n+          EventBatch batch = eventStream.poll(mActiveUfsPollTimeoutMs, TimeUnit.MILLISECONDS);\n+          if (batch == null) {\n+            break;\n           }\n+          EventBatch finalBatch = batch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fd91ae391c4798106c6070f071c7f2fda33a3f"}, "originalPosition": 142}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33f8a60a08b124e386817b7a2f9a02d21dd06863", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/33f8a60a08b124e386817b7a2f9a02d21dd06863", "committedDate": "2020-05-22T01:30:28Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MTk5OTk3", "url": "https://github.com/Alluxio/alluxio/pull/11449#pullrequestreview-417199997", "createdAt": "2020-05-22T21:49:42Z", "commit": {"oid": "33f8a60a08b124e386817b7a2f9a02d21dd06863"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjAyNzY3", "url": "https://github.com/Alluxio/alluxio/pull/11449#pullrequestreview-417202767", "createdAt": "2020-05-22T21:52:44Z", "commit": {"oid": "33f8a60a08b124e386817b7a2f9a02d21dd06863"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMTo1Mjo0NVrOGZkkMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjowOToxOFrOGZlEQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2NjY3Mg==", "bodyText": "check return value and log errors?", "url": "https://github.com/Alluxio/alluxio/pull/11449#discussion_r429466672", "createdAt": "2020-05-22T21:52:45Z", "author": {"login": "yuzhu"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -3103,19 +3118,18 @@ public void activeSyncMetadata(AlluxioURI path, Collection<AlluxioURI> changedFi\n     try (RpcContext rpcContext = createRpcContext()) {\n       if (changedFiles == null) {\n         // full sync\n-        long start = System.currentTimeMillis();\n-\n         // Set sync interval to 0 to force a sync.\n         FileSystemMasterCommonPOptions options =\n             FileSystemMasterCommonPOptions.newBuilder().setSyncIntervalMs(0).build();\n-        try {\n-          syncMetadata(rpcContext, path, options, DescendantType.ALL, null, null, null);\n-        } catch (AccessControlException e) {\n-          // This shouldn never happen because the permission check function is passed as null.\n-          LOG.error(\"Active sync full scan failed on {}\", path, e);\n+        LockingScheme scheme = createSyncLockingScheme(path, options, false);\n+        try (LockedInodePath inodePath = mInodeTree.lockInodePath(scheme)) {\n+          InodeSyncStream sync = new InodeSyncStream(inodePath, mActiveSyncMetadataExecutor, this,\n+              mInodeTree, mInodeStore, mInodeLockManager, mMountTable, rpcContext,\n+              DescendantType.ALL, mUfsSyncPathCache, options, false, false, false);\n+          sync.sync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33f8a60a08b124e386817b7a2f9a02d21dd06863"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2NzQ5NQ==", "bodyText": "check return value and log errors?", "url": "https://github.com/Alluxio/alluxio/pull/11449#discussion_r429467495", "createdAt": "2020-05-22T21:53:56Z", "author": {"login": "yuzhu"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -3125,9 +3139,13 @@ public void activeSyncMetadata(AlluxioURI path, Collection<AlluxioURI> changedFi\n             // Set sync interval to 0 to force a sync.\n             FileSystemMasterCommonPOptions options =\n                 FileSystemMasterCommonPOptions.newBuilder().setSyncIntervalMs(0).build();\n-            try {\n-              syncMetadata(rpcContext, changedFile, options, DescendantType.ONE, null, null, null);\n-            } catch (InvalidPathException | AccessControlException e) {\n+            LockingScheme scheme = createSyncLockingScheme(changedFile, options, false);\n+            try (LockedInodePath inodePath = mInodeTree.lockInodePath(scheme)) {\n+              InodeSyncStream sync = new InodeSyncStream(inodePath, mActiveSyncMetadataExecutor,\n+                  this, mInodeTree, mInodeStore, mInodeLockManager, mMountTable, rpcContext,\n+                  DescendantType.NONE, mUfsSyncPathCache, options, false, false, false);\n+              sync.sync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33f8a60a08b124e386817b7a2f9a02d21dd06863"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NDg4Mw==", "bodyText": "you might want to use computeIfAbsent or putIfAbsent to implement this?  otherwise k concurrent calls to this function with the same path might result in k ufs calls.   Using one of those methods ensures only one call to the UFS is made.", "url": "https://github.com/Alluxio/alluxio/pull/11449#discussion_r429474883", "createdAt": "2020-05-22T22:09:18Z", "author": {"login": "yuzhu"}, "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -132,6 +132,37 @@ public UfsStatus getStatus(AlluxioURI path) {\n     return mStatuses.get(path);\n   }\n \n+  /**\n+   * Attempts to return a status from the cache. If it doesn't exist, reaches to the UFS for it.\n+   *\n+   * @param path the path the retrieve\n+   * @param mountTable the Alluxio mount table\n+   * @return The corresponding {@link UfsStatus} or {@code null} if there is none stored\n+   */\n+  @Nullable\n+  public UfsStatus fetchStatusIfAbsent(AlluxioURI path, MountTable mountTable)\n+      throws InvalidPathException {\n+    UfsStatus status = mStatuses.get(path);\n+    if (status != null) {\n+      return status;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33f8a60a08b124e386817b7a2f9a02d21dd06863"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c94c44b735c0c9d5b3bc9147f88956f053b92514", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/c94c44b735c0c9d5b3bc9147f88956f053b92514", "committedDate": "2020-05-26T19:07:39Z", "message": "Add logging on active sync\n\nI use debug logging because the sync stream will report any\nfailures to sync in the logs already. These messages are\nredundant to let users know if a sync returned false"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5Njc5MjUz", "url": "https://github.com/Alluxio/alluxio/pull/11449#pullrequestreview-419679253", "createdAt": "2020-05-27T23:30:51Z", "commit": {"oid": "c94c44b735c0c9d5b3bc9147f88956f053b92514"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c3fd5b31bc443af2d6c42e73d569ce303c1c81e", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/4c3fd5b31bc443af2d6c42e73d569ce303c1c81e", "committedDate": "2020-05-28T17:00:21Z", "message": "Update descendant type on incremental sync"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4656, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}