{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MTQ0ODc3", "number": 12480, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1NToyNVrOE3XgiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzozMTozMFrOE3dElQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDkyMjk2OnYy", "diffSide": "RIGHT", "path": "core/base/src/main/java/alluxio/wire/MountPointInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1NToyNVrOHwrBCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMToyMTo1MlrOHwwFSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc5ODQ3NA==", "bodyText": "can we add unittests for this class and methods?", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520798474", "createdAt": "2020-11-10T18:55:25Z", "author": {"login": "gpang"}, "path": "core/base/src/main/java/alluxio/wire/MountPointInfo.java", "diffHunk": "@@ -170,18 +187,19 @@ public boolean equals(Object o) {\n     return mUfsUri.equals(that.mUfsUri) && mUfsType.equals(that.mUfsType)\n         && mUfsCapacityBytes == that.mUfsCapacityBytes && mUfsUsedBytes == that.mUfsUsedBytes\n         && mReadOnly == that.mReadOnly && mProperties.equals(that.mProperties)\n-        && mShared == that.mShared;\n+        && mShared == that.mShared && mMountId == that.mMountId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4MTQ4Mg==", "bodyText": "i think there already is a equality check test", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520881482", "createdAt": "2020-11-10T21:21:52Z", "author": {"login": "yuzhu"}, "path": "core/base/src/main/java/alluxio/wire/MountPointInfo.java", "diffHunk": "@@ -170,18 +187,19 @@ public boolean equals(Object o) {\n     return mUfsUri.equals(that.mUfsUri) && mUfsType.equals(that.mUfsType)\n         && mUfsCapacityBytes == that.mUfsCapacityBytes && mUfsUsedBytes == that.mUfsUsedBytes\n         && mReadOnly == that.mReadOnly && mProperties.equals(that.mProperties)\n-        && mShared == that.mShared;\n+        && mShared == that.mShared && mMountId == that.mMountId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc5ODQ3NA=="}, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDkyNDY5OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/grpc/GrpcUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1NTo0M1rOHwrCQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMToyMTozNFrOHwwEwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc5ODc4NA==", "bodyText": "Can we add unittests for these new methods?", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520798784", "createdAt": "2020-11-10T18:55:43Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/grpc/GrpcUtils.java", "diffHunk": "@@ -303,7 +303,9 @@ public static MountPointInfo fromProto(alluxio.grpc.MountPointInfo mountPointPIn\n         .setUfsCapacityBytes(mountPointPInfo.getUfsCapacityBytes())\n         .setUfsUsedBytes(mountPointPInfo.getUfsUsedBytes())\n         .setReadOnly(mountPointPInfo.getReadOnly())\n-        .setProperties(mountPointPInfo.getPropertiesMap()).setShared(mountPointPInfo.getShared());\n+        .setProperties(mountPointPInfo.getPropertiesMap())\n+        .setMountId(mountPointPInfo.getMountId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4MTM0NQ==", "bodyText": "added", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520881345", "createdAt": "2020-11-10T21:21:34Z", "author": {"login": "yuzhu"}, "path": "core/common/src/main/java/alluxio/grpc/GrpcUtils.java", "diffHunk": "@@ -303,7 +303,9 @@ public static MountPointInfo fromProto(alluxio.grpc.MountPointInfo mountPointPIn\n         .setUfsCapacityBytes(mountPointPInfo.getUfsCapacityBytes())\n         .setUfsUsedBytes(mountPointPInfo.getUfsUsedBytes())\n         .setReadOnly(mountPointPInfo.getReadOnly())\n-        .setProperties(mountPointPInfo.getPropertiesMap()).setShared(mountPointPInfo.getShared());\n+        .setProperties(mountPointPInfo.getPropertiesMap())\n+        .setMountId(mountPointPInfo.getMountId())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc5ODc4NA=="}, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDkzMjYxOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/underfs/UnderFileSystem.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1NzowMVrOHwrHRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNTo1OToyMVrOHxrp4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwMDA2OA==", "bodyText": "Hrmmm, I don't know the answer this question, but is it a problem for existing UFS implementations if we changed the UFS interface?\n@madanadit", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520800068", "createdAt": "2020-11-10T18:57:01Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/underfs/UnderFileSystem.java", "diffHunk": "@@ -338,6 +337,13 @@ public int getValue() {\n   @Deprecated\n   long getBlockSizeByte(String path) throws IOException;\n \n+  /**\n+   * Gets the under file system configuration.\n+   *\n+   * @return the configuration\n+   */\n+  AlluxioConfiguration getConfiguration() throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyODY5OA==", "bodyText": "This is a public API, so ideally we provide a default implementation in the interface for back-compat with something like\n  default AlluxioConfiguration getConfiguration() {\n    return <empty AlluxioConfiguration>;\n  }\n\nAs far as I remember, the reason for this being a public API is ufs extensions. If we change it, any ufs extension not deriving from BaseUfs has to implement this new method (other than re-compilation for new Alluxio version). This may or may not be an issue since I can't think of any known ufs extension which does not.", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r521828698", "createdAt": "2020-11-12T04:14:36Z", "author": {"login": "madanadit"}, "path": "core/common/src/main/java/alluxio/underfs/UnderFileSystem.java", "diffHunk": "@@ -338,6 +337,13 @@ public int getValue() {\n   @Deprecated\n   long getBlockSizeByte(String path) throws IOException;\n \n+  /**\n+   * Gets the under file system configuration.\n+   *\n+   * @return the configuration\n+   */\n+  AlluxioConfiguration getConfiguration() throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwMDA2OA=="}, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg1NzUwNg==", "bodyText": "fixed", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r521857506", "createdAt": "2020-11-12T05:59:21Z", "author": {"login": "yuzhu"}, "path": "core/common/src/main/java/alluxio/underfs/UnderFileSystem.java", "diffHunk": "@@ -338,6 +337,13 @@ public int getValue() {\n   @Deprecated\n   long getBlockSizeByte(String path) throws IOException;\n \n+  /**\n+   * Gets the under file system configuration.\n+   *\n+   * @return the configuration\n+   */\n+  AlluxioConfiguration getConfiguration() throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwMDA2OA=="}, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDkzODc4OnYy", "diffSide": "RIGHT", "path": "core/common/src/test/java/alluxio/wire/MountPointInfoTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1ODoxNVrOHwrLfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMToyMzowOFrOHwwH2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwMTE0OQ==", "bodyText": "Does anything set the mount id in this test file?", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520801149", "createdAt": "2020-11-10T18:58:15Z", "author": {"login": "gpang"}, "path": "core/common/src/test/java/alluxio/wire/MountPointInfoTest.java", "diffHunk": "@@ -38,6 +38,7 @@ public void checkEquality(MountPointInfo a, MountPointInfo b) {\n     Assert.assertEquals(a.getUfsUsedBytes(), b.getUfsUsedBytes());\n     Assert.assertEquals(a.getReadOnly(), b.getReadOnly());\n     Assert.assertEquals(a.getProperties(), b.getProperties());\n+    Assert.assertEquals(a.getMountId(), b.getMountId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4MTU5NQ==", "bodyText": "updated to add test for this", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520881595", "createdAt": "2020-11-10T21:22:05Z", "author": {"login": "yuzhu"}, "path": "core/common/src/test/java/alluxio/wire/MountPointInfoTest.java", "diffHunk": "@@ -38,6 +38,7 @@ public void checkEquality(MountPointInfo a, MountPointInfo b) {\n     Assert.assertEquals(a.getUfsUsedBytes(), b.getUfsUsedBytes());\n     Assert.assertEquals(a.getReadOnly(), b.getReadOnly());\n     Assert.assertEquals(a.getProperties(), b.getProperties());\n+    Assert.assertEquals(a.getMountId(), b.getMountId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwMTE0OQ=="}, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4MjEzOA==", "bodyText": "updated to add test for this", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520882138", "createdAt": "2020-11-10T21:23:08Z", "author": {"login": "yuzhu"}, "path": "core/common/src/test/java/alluxio/wire/MountPointInfoTest.java", "diffHunk": "@@ -38,6 +38,7 @@ public void checkEquality(MountPointInfo a, MountPointInfo b) {\n     Assert.assertEquals(a.getUfsUsedBytes(), b.getUfsUsedBytes());\n     Assert.assertEquals(a.getReadOnly(), b.getReadOnly());\n     Assert.assertEquals(a.getProperties(), b.getProperties());\n+    Assert.assertEquals(a.getMountId(), b.getMountId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwMTE0OQ=="}, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk3MzEyOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/meta/options/MountInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNDo0NFrOHwrh6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMToyMjoxNlrOHwwGOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNjg4OA==", "bodyText": "Do we have a unittest for this?", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520806888", "createdAt": "2020-11-10T19:04:44Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/meta/options/MountInfo.java", "diffHunk": "@@ -88,6 +88,7 @@ public MountPointInfo toMountPointInfo() {\n     info.setReadOnly(mOptions.getReadOnly());\n     info.setProperties(mOptions.getProperties());\n     info.setShared(mOptions.getShared());\n+    info.setMountId(mMountId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4MTcyMA==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520881720", "createdAt": "2020-11-10T21:22:16Z", "author": {"login": "yuzhu"}, "path": "core/server/master/src/main/java/alluxio/master/file/meta/options/MountInfo.java", "diffHunk": "@@ -88,6 +88,7 @@ public MountPointInfo toMountPointInfo() {\n     info.setReadOnly(mOptions.getReadOnly());\n     info.setProperties(mOptions.getProperties());\n     info.setShared(mOptions.getShared());\n+    info.setMountId(mMountId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNjg4OA=="}, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk4MjEzOnYy", "diffSide": "RIGHT", "path": "stress/common/src/main/java/alluxio/stress/worker/UfsIOParameters.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNzozMFrOHwrnqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTo1Mjo0MFrOHwxC9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODM2Mg==", "bodyText": "I'm not familiar with this. What does this do?", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520808362", "createdAt": "2020-11-10T19:07:30Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/worker/UfsIOParameters.java", "diffHunk": "@@ -31,10 +35,16 @@\n   public String mDataSize = \"4G\";\n \n   @Parameter(names = {\"--path\"},\n-          description = \"the Alluxio directory to write temporary data in\",\n+          description = \"the Ufs Path to write temporary data in\",\n           required = true)\n   public String mPath;\n \n+  @Parameter(names = {\"--use-ufs-conf\"},\n+      description = \"If true, use the existing ufs configuration to read/write to the base path\")\n+  @Parameters.BooleanDescription(trueDescription = \"UseUFSConf\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4MzQ0Mw==", "bodyText": "not sure? i modeled after other parameters, but removed for now for simplicity.", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520883443", "createdAt": "2020-11-10T21:25:37Z", "author": {"login": "yuzhu"}, "path": "stress/common/src/main/java/alluxio/stress/worker/UfsIOParameters.java", "diffHunk": "@@ -31,10 +35,16 @@\n   public String mDataSize = \"4G\";\n \n   @Parameter(names = {\"--path\"},\n-          description = \"the Alluxio directory to write temporary data in\",\n+          description = \"the Ufs Path to write temporary data in\",\n           required = true)\n   public String mPath;\n \n+  @Parameter(names = {\"--use-ufs-conf\"},\n+      description = \"If true, use the existing ufs configuration to read/write to the base path\")\n+  @Parameters.BooleanDescription(trueDescription = \"UseUFSConf\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODM2Mg=="}, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5NzI2OA==", "bodyText": "O yeah, I remember this now. This is for graphing later. It is useful to have a description for true and false, instead of just displaying true or false. This probably won't matter in this case.", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520897268", "createdAt": "2020-11-10T21:52:40Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/worker/UfsIOParameters.java", "diffHunk": "@@ -31,10 +35,16 @@\n   public String mDataSize = \"4G\";\n \n   @Parameter(names = {\"--path\"},\n-          description = \"the Alluxio directory to write temporary data in\",\n+          description = \"the Ufs Path to write temporary data in\",\n           required = true)\n   public String mPath;\n \n+  @Parameter(names = {\"--use-ufs-conf\"},\n+      description = \"If true, use the existing ufs configuration to read/write to the base path\")\n+  @Parameters.BooleanDescription(trueDescription = \"UseUFSConf\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODM2Mg=="}, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk4NDM5OnYy", "diffSide": "RIGHT", "path": "stress/common/src/main/java/alluxio/stress/worker/UfsIOParameters.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowODoxMFrOHwrpBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMToyNDo1M1rOHwwLfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODcxMQ==", "bodyText": "where does this ufs conf come from?", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520808711", "createdAt": "2020-11-10T19:08:10Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/worker/UfsIOParameters.java", "diffHunk": "@@ -31,10 +35,16 @@\n   public String mDataSize = \"4G\";\n \n   @Parameter(names = {\"--path\"},\n-          description = \"the Alluxio directory to write temporary data in\",\n+          description = \"the Ufs Path to write temporary data in\",\n           required = true)\n   public String mPath;\n \n+  @Parameter(names = {\"--use-ufs-conf\"},\n+      description = \"If true, use the existing ufs configuration to read/write to the base path\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4MzA2OA==", "bodyText": "added that it comes from mount table", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520883068", "createdAt": "2020-11-10T21:24:53Z", "author": {"login": "yuzhu"}, "path": "stress/common/src/main/java/alluxio/stress/worker/UfsIOParameters.java", "diffHunk": "@@ -31,10 +35,16 @@\n   public String mDataSize = \"4G\";\n \n   @Parameter(names = {\"--path\"},\n-          description = \"the Alluxio directory to write temporary data in\",\n+          description = \"the Ufs Path to write temporary data in\",\n           required = true)\n   public String mPath;\n \n+  @Parameter(names = {\"--use-ufs-conf\"},\n+      description = \"If true, use the existing ufs configuration to read/write to the base path\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODcxMQ=="}, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk5MDIwOnYy", "diffSide": "RIGHT", "path": "stress/common/src/main/java/alluxio/stress/worker/UfsIOParameters.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowOTo1MlrOHwrspA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzozMjo0MlrOHwzuTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwOTYzNg==", "bodyText": "Can you update the names in this file to use these constants?", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520809636", "createdAt": "2020-11-10T19:09:52Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/worker/UfsIOParameters.java", "diffHunk": "@@ -23,6 +23,10 @@\n  * Parameters used in the UFS I/O throughput test.\n  * */\n public class UfsIOParameters extends Parameters {\n+  public static final String USE_UFS_CONF = \"--use-ufs-conf\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4NzAxNA==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520887014", "createdAt": "2020-11-10T21:32:30Z", "author": {"login": "yuzhu"}, "path": "stress/common/src/main/java/alluxio/stress/worker/UfsIOParameters.java", "diffHunk": "@@ -23,6 +23,10 @@\n  * Parameters used in the UFS I/O throughput test.\n  * */\n public class UfsIOParameters extends Parameters {\n+  public static final String USE_UFS_CONF = \"--use-ufs-conf\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwOTYzNg=="}, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0MTEzMg==", "bodyText": "NIT: I think something like --is-mounted or --use-mount-conf makes a bit more sense, since this essentially controls if the path is mounted or not.", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520941132", "createdAt": "2020-11-10T23:32:42Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/worker/UfsIOParameters.java", "diffHunk": "@@ -23,6 +23,10 @@\n  * Parameters used in the UFS I/O throughput test.\n  * */\n public class UfsIOParameters extends Parameters {\n+  public static final String USE_UFS_CONF = \"--use-ufs-conf\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwOTYzNg=="}, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk5MjMxOnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/job/plan/stress/StressBenchDefinition.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOToxMDoyOVrOHwrt9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMToyODoyNVrOHwwSnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwOTk3Mg==", "bodyText": "Will this work with nested mounts?", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520809972", "createdAt": "2020-11-10T19:10:29Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/stress/StressBenchDefinition.java", "diffHunk": "@@ -91,23 +97,56 @@ public StressBenchDefinition() {\n     return result;\n   }\n \n+  private Map<String, String> getUfsConf(String ufsUri, RunTaskContext runTaskContext)\n+      throws Exception {\n+    Map<String, MountPointInfo> mountTable = runTaskContext.getFileSystem().getMountTable();\n+    for (Map.Entry<String, MountPointInfo> entry : mountTable.entrySet()) {\n+      if (PathUtils.hasPrefix(ufsUri, entry.getKey())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4NDg5Mg==", "bodyText": "yes, this is a ufs Uri. We can't mount both a parent Ufs URI and a sub directory ufs URI.", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520884892", "createdAt": "2020-11-10T21:28:25Z", "author": {"login": "yuzhu"}, "path": "job/server/src/main/java/alluxio/job/plan/stress/StressBenchDefinition.java", "diffHunk": "@@ -91,23 +97,56 @@ public StressBenchDefinition() {\n     return result;\n   }\n \n+  private Map<String, String> getUfsConf(String ufsUri, RunTaskContext runTaskContext)\n+      throws Exception {\n+    Map<String, MountPointInfo> mountTable = runTaskContext.getFileSystem().getMountTable();\n+    for (Map.Entry<String, MountPointInfo> entry : mountTable.entrySet()) {\n+      if (PathUtils.hasPrefix(ufsUri, entry.getKey())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwOTk3Mg=="}, "originalCommit": {"oid": "bc0c4067795d1bd022a618ec7c18d457f6248310"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTgzNDQ1OnYy", "diffSide": "RIGHT", "path": "stress/common/src/main/java/alluxio/stress/worker/UfsIOParameters.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzozMTozMFrOHwzsog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjo1Mzo1MlrOHxVtIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0MDcwNg==", "bodyText": "If this is set to true, does the existing --conf get ignored, or are they merged? Which takes priority? Can we add this info to the description?", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r520940706", "createdAt": "2020-11-10T23:31:30Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/worker/UfsIOParameters.java", "diffHunk": "@@ -23,19 +23,28 @@\n  * Parameters used in the UFS I/O throughput test.\n  * */\n public class UfsIOParameters extends Parameters {\n+  public static final String USE_UFS_CONF = \"--use-ufs-conf\";\n+  public static final String CONF = \"--conf\";\n+  public static final String PATH = \"--path\";\n+\n   @Parameter(names = {\"--threads\"}, description = \"the number of threads to use\")\n   public int mThreads = 4;\n \n   @Parameter(names = {\"--io-size\"},\n           description = \"size of data to write and then read for each thread\")\n   public String mDataSize = \"4G\";\n \n-  @Parameter(names = {\"--path\"},\n-          description = \"the Alluxio directory to write temporary data in\",\n+  @Parameter(names = {PATH},\n+          description = \"the Ufs Path to write temporary data in\",\n           required = true)\n   public String mPath;\n \n-  @DynamicParameter(names = \"--conf\",\n+  @Parameter(names = {USE_UFS_CONF},\n+      description = \"If true, attempt to load the ufs configuration from an existing mount point \"\n+          + \"to read/write to the base path\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af5ce19b3faba1db6e3122d3aa19476243a7df1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5Nzg4OQ==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/12480#discussion_r521497889", "createdAt": "2020-11-11T16:53:52Z", "author": {"login": "yuzhu"}, "path": "stress/common/src/main/java/alluxio/stress/worker/UfsIOParameters.java", "diffHunk": "@@ -23,19 +23,28 @@\n  * Parameters used in the UFS I/O throughput test.\n  * */\n public class UfsIOParameters extends Parameters {\n+  public static final String USE_UFS_CONF = \"--use-ufs-conf\";\n+  public static final String CONF = \"--conf\";\n+  public static final String PATH = \"--path\";\n+\n   @Parameter(names = {\"--threads\"}, description = \"the number of threads to use\")\n   public int mThreads = 4;\n \n   @Parameter(names = {\"--io-size\"},\n           description = \"size of data to write and then read for each thread\")\n   public String mDataSize = \"4G\";\n \n-  @Parameter(names = {\"--path\"},\n-          description = \"the Alluxio directory to write temporary data in\",\n+  @Parameter(names = {PATH},\n+          description = \"the Ufs Path to write temporary data in\",\n           required = true)\n   public String mPath;\n \n-  @DynamicParameter(names = \"--conf\",\n+  @Parameter(names = {USE_UFS_CONF},\n+      description = \"If true, attempt to load the ufs configuration from an existing mount point \"\n+          + \"to read/write to the base path\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0MDcwNg=="}, "originalCommit": {"oid": "8af5ce19b3faba1db6e3122d3aa19476243a7df1"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1017, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}