{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMzg1MDkx", "number": 12441, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDoxNzozNVrOE0iQew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTo0NzoxMFrOE0oXig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTIyNjgzOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDoxNzozNVrOHsUL8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTozNDo0NlrOHsdoXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzMDEzMA==", "bodyText": "Can we encode this desired behavior in a simple unittest?", "url": "https://github.com/Alluxio/alluxio/pull/12441#discussion_r516230130", "createdAt": "2020-11-02T20:17:35Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -569,9 +570,16 @@ private void syncExistingInodeMetadata(LockedInodePath inodePath)\n       }\n     }\n \n-    syncChildren = syncChildren\n-        && inode.isDirectory()\n-        && mDescendantType != DescendantType.NONE;\n+    // Only sync children when\n+    // (1) DescendantType.ALL or (2) syncing root of this stream && DescendantType.ONE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c244a32207dd159984f92ff6db4ede1ff536f287"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3NjYxOA==", "bodyText": "Gene, there is no unit test for this class InodeSyncStream though I think this class should be covered by UT definitely. Do you know if there is any other integration tests covering this part? I am very unfamiliar with this part of source code and it would be a lot to investigate to understand this class and write a whole new UT", "url": "https://github.com/Alluxio/alluxio/pull/12441#discussion_r516276618", "createdAt": "2020-11-02T21:53:49Z", "author": {"login": "apc999"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -569,9 +570,16 @@ private void syncExistingInodeMetadata(LockedInodePath inodePath)\n       }\n     }\n \n-    syncChildren = syncChildren\n-        && inode.isDirectory()\n-        && mDescendantType != DescendantType.NONE;\n+    // Only sync children when\n+    // (1) DescendantType.ALL or (2) syncing root of this stream && DescendantType.ONE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzMDEzMA=="}, "originalCommit": {"oid": "c244a32207dd159984f92ff6db4ede1ff536f287"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI4NDQ0OA==", "bodyText": "I think we can use UfsSyncIntegrationTest for testing sync behavior.", "url": "https://github.com/Alluxio/alluxio/pull/12441#discussion_r516284448", "createdAt": "2020-11-02T22:10:44Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -569,9 +570,16 @@ private void syncExistingInodeMetadata(LockedInodePath inodePath)\n       }\n     }\n \n-    syncChildren = syncChildren\n-        && inode.isDirectory()\n-        && mDescendantType != DescendantType.NONE;\n+    // Only sync children when\n+    // (1) DescendantType.ALL or (2) syncing root of this stream && DescendantType.ONE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzMDEzMA=="}, "originalCommit": {"oid": "c244a32207dd159984f92ff6db4ede1ff536f287"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4NDg2MA==", "bodyText": "added. PTAL", "url": "https://github.com/Alluxio/alluxio/pull/12441#discussion_r516384860", "createdAt": "2020-11-03T01:34:46Z", "author": {"login": "apc999"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -569,9 +570,16 @@ private void syncExistingInodeMetadata(LockedInodePath inodePath)\n       }\n     }\n \n-    syncChildren = syncChildren\n-        && inode.isDirectory()\n-        && mDescendantType != DescendantType.NONE;\n+    // Only sync children when\n+    // (1) DescendantType.ALL or (2) syncing root of this stream && DescendantType.ONE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzMDEzMA=="}, "originalCommit": {"oid": "c244a32207dd159984f92ff6db4ede1ff536f287"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjIyNzk0OnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/alluxio/client/fs/UfsSyncIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTo0NzoxMFrOHsdznw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTo0ODowM1rOHsd0RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4Nzc0Mw==", "bodyText": "Does this work because recursive is false by default? We want it false, right?", "url": "https://github.com/Alluxio/alluxio/pull/12441#discussion_r516387743", "createdAt": "2020-11-03T01:47:10Z", "author": {"login": "gpang"}, "path": "tests/src/test/java/alluxio/client/fs/UfsSyncIntegrationTest.java", "diffHunk": "@@ -168,6 +184,21 @@ public void listDirSync() throws Exception {\n     checkListStatus(ROOT_DIR, options, true);\n   }\n \n+  // https://github.com/Alluxio/alluxio/issues/12372\n+  @Test\n+  public void listDirSyncOnlyTouchingChildren() throws Exception {\n+    String dir1 = PathUtils.concatPath(EXISTING_DIR, \"dir_should_sync\");\n+    String dir2 = PathUtils.concatPath(dir1, \"dir_should_not_sync\");\n+    new File(ufsPath(dir1)).mkdirs();\n+    new File(ufsPath(dir2)).mkdirs();\n+    ListStatusPOptions optionsAlways = ListStatusPOptions.newBuilder()\n+        .setLoadMetadataType(LoadMetadataPType.NEVER).setCommonOptions(PSYNC_ALWAYS).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0931f9b8ddda365d030a94c6b98fde3a9f3e5966"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4NzkwOQ==", "bodyText": "correct . added    .setRecursive(false) to be more explicit", "url": "https://github.com/Alluxio/alluxio/pull/12441#discussion_r516387909", "createdAt": "2020-11-03T01:48:03Z", "author": {"login": "apc999"}, "path": "tests/src/test/java/alluxio/client/fs/UfsSyncIntegrationTest.java", "diffHunk": "@@ -168,6 +184,21 @@ public void listDirSync() throws Exception {\n     checkListStatus(ROOT_DIR, options, true);\n   }\n \n+  // https://github.com/Alluxio/alluxio/issues/12372\n+  @Test\n+  public void listDirSyncOnlyTouchingChildren() throws Exception {\n+    String dir1 = PathUtils.concatPath(EXISTING_DIR, \"dir_should_sync\");\n+    String dir2 = PathUtils.concatPath(dir1, \"dir_should_not_sync\");\n+    new File(ufsPath(dir1)).mkdirs();\n+    new File(ufsPath(dir2)).mkdirs();\n+    ListStatusPOptions optionsAlways = ListStatusPOptions.newBuilder()\n+        .setLoadMetadataType(LoadMetadataPType.NEVER).setCommonOptions(PSYNC_ALWAYS).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4Nzc0Mw=="}, "originalCommit": {"oid": "0931f9b8ddda365d030a94c6b98fde3a9f3e5966"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1111, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}