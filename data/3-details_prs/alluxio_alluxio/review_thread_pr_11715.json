{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MzcwOTM4", "number": 11715, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1NTozNVrOELznwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjoyMjoyOVrOEMj_4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE1NTUzOnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1NTozNVrOGtjY4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1NTozNVrOGtjY4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxODkxNA==", "bodyText": "e.printStackTrace(); prints to stdout, not appropriate for production code.\nUse LOG.error(\"Failed to open {}: \", path, e) here so the stack trace will still be printed.\nwith claiming  private static final Logger LOG = LoggerFactory.getLogger(AbstractFuseFileSystem.class); in the beginning.", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r450418914", "createdAt": "2020-07-06T18:55:35Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "diffHunk": "@@ -132,27 +132,49 @@ public void umount() {\n   }\n \n   public int openCallback(String path, ByteBuffer buf) {\n-    FuseFileInfo fi = new FuseFileInfo(buf);\n-    return open(path, fi);\n+    try {\n+      return open(path, FuseFileInfo.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e93848c98c93a29d19a5eb6e142a5fe21702447"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE1NzY3OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1NjoyMVrOGtjaOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1NjoyMVrOGtjaOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxOTI1OQ==", "bodyText": "LOG.error(\"Failed to read {}, size {}, offset {}: \", path, size, offset, e)", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r450419259", "createdAt": "2020-07-06T18:56:21Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "diffHunk": "@@ -132,27 +132,49 @@ public void umount() {\n   }\n \n   public int openCallback(String path, ByteBuffer buf) {\n-    FuseFileInfo fi = new FuseFileInfo(buf);\n-    return open(path, fi);\n+    try {\n+      return open(path, FuseFileInfo.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int readCallback(String path, ByteBuffer buf, long size, long offset, ByteBuffer fibuf) {\n-    FuseFileInfo fi = new FuseFileInfo(fibuf);\n-    return read(path, buf, size, offset, fi);\n+    try {\n+      return read(path, buf, size, offset, FuseFileInfo.wrap(fibuf));\n+    } catch (Exception e) {\n+     e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e93848c98c93a29d19a5eb6e142a5fe21702447"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE1ODgxOnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1Njo0MVrOGtja-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1Njo0MVrOGtja-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxOTQ0OA==", "bodyText": "LOG.error(\"Failed to getattr {}: \", path, e)", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r450419448", "createdAt": "2020-07-06T18:56:41Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "diffHunk": "@@ -132,27 +132,49 @@ public void umount() {\n   }\n \n   public int openCallback(String path, ByteBuffer buf) {\n-    FuseFileInfo fi = new FuseFileInfo(buf);\n-    return open(path, fi);\n+    try {\n+      return open(path, FuseFileInfo.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int readCallback(String path, ByteBuffer buf, long size, long offset, ByteBuffer fibuf) {\n-    FuseFileInfo fi = new FuseFileInfo(fibuf);\n-    return read(path, buf, size, offset, fi);\n+    try {\n+      return read(path, buf, size, offset, FuseFileInfo.wrap(fibuf));\n+    } catch (Exception e) {\n+     e.printStackTrace();\n+     return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int getattrCallback(String path, ByteBuffer buf) {\n-    FileStat stat = new FileStat(buf);\n-    return getattr(path, stat);\n+    try {\n+      return getattr(path, FileStat.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e93848c98c93a29d19a5eb6e142a5fe21702447"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE2MDk2OnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1NzoxN1rOGtjcMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1NzoxN1rOGtjcMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxOTc2Mw==", "bodyText": "LOG.error(\"Failed to readdir {}, offset {}: \", path, offset, e)", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r450419763", "createdAt": "2020-07-06T18:57:17Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "diffHunk": "@@ -132,27 +132,49 @@ public void umount() {\n   }\n \n   public int openCallback(String path, ByteBuffer buf) {\n-    FuseFileInfo fi = new FuseFileInfo(buf);\n-    return open(path, fi);\n+    try {\n+      return open(path, FuseFileInfo.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int readCallback(String path, ByteBuffer buf, long size, long offset, ByteBuffer fibuf) {\n-    FuseFileInfo fi = new FuseFileInfo(fibuf);\n-    return read(path, buf, size, offset, fi);\n+    try {\n+      return read(path, buf, size, offset, FuseFileInfo.wrap(fibuf));\n+    } catch (Exception e) {\n+     e.printStackTrace();\n+     return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int getattrCallback(String path, ByteBuffer buf) {\n-    FileStat stat = new FileStat(buf);\n-    return getattr(path, stat);\n+    try {\n+      return getattr(path, FileStat.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int readdirCallback(String path, long bufaddr, FuseFillDir filter, long offset,\n       ByteBuffer fi) {\n-    return readdir(path, bufaddr, filter, offset, new FuseFileInfo(fi));\n+    try {\n+      return readdir(path, bufaddr, filter, offset, new FuseFileInfo(fi));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e93848c98c93a29d19a5eb6e142a5fe21702447"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE2MjgwOnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1Nzo1MVrOGtjdXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1OToyMlrOGtjf4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMDA2Mg==", "bodyText": "LOG.error(\"Failed to unlink {}: \", path, e)", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r450420062", "createdAt": "2020-07-06T18:57:51Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "diffHunk": "@@ -132,27 +132,49 @@ public void umount() {\n   }\n \n   public int openCallback(String path, ByteBuffer buf) {\n-    FuseFileInfo fi = new FuseFileInfo(buf);\n-    return open(path, fi);\n+    try {\n+      return open(path, FuseFileInfo.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int readCallback(String path, ByteBuffer buf, long size, long offset, ByteBuffer fibuf) {\n-    FuseFileInfo fi = new FuseFileInfo(fibuf);\n-    return read(path, buf, size, offset, fi);\n+    try {\n+      return read(path, buf, size, offset, FuseFileInfo.wrap(fibuf));\n+    } catch (Exception e) {\n+     e.printStackTrace();\n+     return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int getattrCallback(String path, ByteBuffer buf) {\n-    FileStat stat = new FileStat(buf);\n-    return getattr(path, stat);\n+    try {\n+      return getattr(path, FileStat.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int readdirCallback(String path, long bufaddr, FuseFillDir filter, long offset,\n       ByteBuffer fi) {\n-    return readdir(path, bufaddr, filter, offset, new FuseFileInfo(fi));\n+    try {\n+      return readdir(path, bufaddr, filter, offset, new FuseFileInfo(fi));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int unlinkCallback(String path) {\n-    return unlink(path);\n+    try {\n+      return unlink(path);\n+    } catch (Exception e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e93848c98c93a29d19a5eb6e142a5fe21702447"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMDcwNQ==", "bodyText": "please also add similar try-catch to other callbacks, including flushCallback, releaseCallback and etc even we didn't implement them yet.", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r450420705", "createdAt": "2020-07-06T18:59:22Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "diffHunk": "@@ -132,27 +132,49 @@ public void umount() {\n   }\n \n   public int openCallback(String path, ByteBuffer buf) {\n-    FuseFileInfo fi = new FuseFileInfo(buf);\n-    return open(path, fi);\n+    try {\n+      return open(path, FuseFileInfo.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int readCallback(String path, ByteBuffer buf, long size, long offset, ByteBuffer fibuf) {\n-    FuseFileInfo fi = new FuseFileInfo(fibuf);\n-    return read(path, buf, size, offset, fi);\n+    try {\n+      return read(path, buf, size, offset, FuseFileInfo.wrap(fibuf));\n+    } catch (Exception e) {\n+     e.printStackTrace();\n+     return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int getattrCallback(String path, ByteBuffer buf) {\n-    FileStat stat = new FileStat(buf);\n-    return getattr(path, stat);\n+    try {\n+      return getattr(path, FileStat.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int readdirCallback(String path, long bufaddr, FuseFillDir filter, long offset,\n       ByteBuffer fi) {\n-    return readdir(path, bufaddr, filter, offset, new FuseFileInfo(fi));\n+    try {\n+      return readdir(path, bufaddr, filter, offset, new FuseFileInfo(fi));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int unlinkCallback(String path) {\n-    return unlink(path);\n+    try {\n+      return unlink(path);\n+    } catch (Exception e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMDA2Mg=="}, "originalCommit": {"oid": "9e93848c98c93a29d19a5eb6e142a5fe21702447"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjA4MTYwOnYy", "diffSide": "RIGHT", "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjoyMjoyOVrOGuvtsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjoyNDozM1rOGvrRpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY2OTQyNA==", "bodyText": "Something to be careful of is that if you want to log the exception with LOG.error(..., e), it doesn't work with the {} substitution ability. So, that means all of the log lines with exception as the last parameter should look something like:\nLOG.error(String.format(\"... %s\", path), e)\n\nThis way, the log message has all the parameters, and the exception and stack is printed.", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r451669424", "createdAt": "2020-07-08T16:22:29Z", "author": {"login": "gpang"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "diffHunk": "@@ -132,70 +137,147 @@ public void umount() {\n   }\n \n   public int openCallback(String path, ByteBuffer buf) {\n-    FuseFileInfo fi = new FuseFileInfo(buf);\n-    return open(path, fi);\n+    try {\n+      return open(path, FuseFileInfo.wrap(buf));\n+    } catch (Exception e) {\n+      LOG.error(\"Failed to open {}: \", path, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3abb8f2c79eccc15fa40875b5529f4aa6bfe9ec6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0NTI4Nw==", "bodyText": "@gpang it is actually unnecessary to use String.format in log4j,\nas long as you pass a Throwable as the last arg and the full log of exception will be printed .\nWe've been leveraging this undocumented feature for a long time in this codebase. Also check it out at https://stackoverflow.com/a/51781806/3161750", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r452645287", "createdAt": "2020-07-10T06:24:33Z", "author": {"login": "apc999"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "diffHunk": "@@ -132,70 +137,147 @@ public void umount() {\n   }\n \n   public int openCallback(String path, ByteBuffer buf) {\n-    FuseFileInfo fi = new FuseFileInfo(buf);\n-    return open(path, fi);\n+    try {\n+      return open(path, FuseFileInfo.wrap(buf));\n+    } catch (Exception e) {\n+      LOG.error(\"Failed to open {}: \", path, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY2OTQyNA=="}, "originalCommit": {"oid": "3abb8f2c79eccc15fa40875b5529f4aa6bfe9ec6"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1397, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}