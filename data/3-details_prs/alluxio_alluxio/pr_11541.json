{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMjUzNDIy", "number": 11541, "title": "Simplify lock list downgrades", "bodyText": "Before this change lock downgrades did NOT work if the end\nof the lock list had more than one write locked inode. This\nhasn't burned us until now because the new syncing changes\nassumed all inodes in the locklist would be downgraded when\ncalling LockedInodePath#downgradeToPattern(LockPattern).\nThis was not the case, which ended up causing a deadlock\nwhen the lock list contained many write-locked entries\nOne common case where this can occur is when a user is\nloading a deeply nested file or directory via some getStatus or\nlistStatus call which syncs metadata and in-turn, will create\nthe paths as it discovers them. In doing so, the lock list is\ninitially populated with write locks. We require them to all\nbe downgraded to read locks for the metadata sync to be\nperformed properly.\nThe new syncing design also now only requires downgrades\nto read locks which simplifies a lot of logic which existed\nto support downgrades from WRITE_EDGE to\nWRITE_INODE. These changes removes a good chunk of\nthat complicated code in favor of a simpler approach\nwhich simply performs the lock downgrade for all inodes\nin the list.\nA new integration test case was added for this regression.", "createdAt": "2020-06-10T07:19:46Z", "url": "https://github.com/Alluxio/alluxio/pull/11541", "merged": true, "mergeCommit": {"oid": "d9df66bffa72b133a464a8bf74f5fc7ee34521e5"}, "closed": true, "closedAt": "2020-06-12T18:46:59Z", "author": {"login": "ZacBlanco"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp_rz7gFqTQyODQwMDY5NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqXXCigBqjM0MzYzODk1OTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NDAwNjk0", "url": "https://github.com/Alluxio/alluxio/pull/11541#pullrequestreview-428400694", "createdAt": "2020-06-10T20:24:38Z", "commit": {"oid": "a7f108da8946c771c47f0ac96b5744cbe2198de7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDoyNDozOVrOGiFCmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDoyNjowMFrOGiFFQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4NzM1Mg==", "bodyText": "Should there be a precondition that makes sure the mLock is the writeLock() of mRwLock? But, basically, the invariant for RWLockResource is that mLock == mRwLock.readLock() or mLock == mRwLock.writeLock() at all times.", "url": "https://github.com/Alluxio/alluxio/pull/11541#discussion_r438387352", "createdAt": "2020-06-10T20:24:39Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/resource/RWLockResource.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.resource;\n+\n+import alluxio.concurrent.LockMode;\n+\n+import com.google.common.base.Preconditions;\n+\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * The {@link RWLockResource} is an extension of the {@link LockResource} which allows for\n+ * downgrading of locks.\n+ */\n+public class RWLockResource extends LockResource {\n+\n+  private final ReentrantReadWriteLock mRwLock;\n+\n+  /**\n+   * Creates a new instance of RW lock that will lock with the given mode.\n+   *\n+   * @param rwLock the read-write lock backing the resource\n+   * @param mode the initial lock mode if acquiring the lock\n+   * @param acquireLock whether or not to acquire the lock\n+   * @param useTryLock whether or not to use {@link java.util.concurrent.locks.Lock#tryLock} when\n+   *                  acquiring the resource\n+   */\n+  public RWLockResource(ReentrantReadWriteLock rwLock, LockMode mode, boolean acquireLock,\n+      boolean useTryLock) {\n+    super(mode == LockMode.READ ? rwLock.readLock() : rwLock.writeLock(), acquireLock, useTryLock);\n+    mRwLock = rwLock;\n+  }\n+\n+  /**\n+   * Downgrade from a write to a read lock.\n+   *\n+   * @return if a successful downgrade was performed. Returns false if it was read locked\n+   */\n+  public boolean downgrade() {\n+    if (!mRwLock.isWriteLocked()) {\n+      return false;\n+    }\n+    Preconditions.checkState(mRwLock.isWriteLockedByCurrentThread(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f108da8946c771c47f0ac96b5744cbe2198de7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4ODAzMg==", "bodyText": "How about edges?", "url": "https://github.com/Alluxio/alluxio/pull/11541#discussion_r438388032", "createdAt": "2020-06-10T20:26:00Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/meta/InodeLockList.java", "diffHunk": "@@ -104,17 +104,9 @@\n   void unlockLastEdge();\n \n   /**\n-   * Downgrades the last inode from a write lock to a read lock. The read lock is acquired before\n-   * releasing the write lock.\n-   *\n-   * Example\n-   * Starting from [a, a->b, b*]\n-   *\n-   * downgradeLastInode() results in [a, a->b, b]\n-   *\n-   * If the last inode is not the only write-locked inode, no downgrade occurs.\n+   * Downgrades all inodes in the current lock list to read locks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f108da8946c771c47f0ac96b5744cbe2198de7"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NDc5NzUy", "url": "https://github.com/Alluxio/alluxio/pull/11541#pullrequestreview-428479752", "createdAt": "2020-06-10T22:48:00Z", "commit": {"oid": "131754f2890ddf5d3fd261ceb34914576c4243f7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MTk4MDE1", "url": "https://github.com/Alluxio/alluxio/pull/11541#pullrequestreview-429198015", "createdAt": "2020-06-11T18:54:57Z", "commit": {"oid": "131754f2890ddf5d3fd261ceb34914576c4243f7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da53e3279c3708be3ddb7189c4ad1619eb95fbf2", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/da53e3279c3708be3ddb7189c4ad1619eb95fbf2", "committedDate": "2020-06-12T00:03:38Z", "message": "Simplify lock list downgrades\n\nBefore this change lock downgrades did NOT work if the end\nof the lock list had more than one write locked inode. This\nhasn't burned us until now because the new syncing changes\nassumed all inodes in the locklist would be downgraded when\ncalling LockedInodePath#downgradeToPattern(LockPattern).\nThis was not the case, which ended up causing a deadlock\nwhen the lock list contained many inodes.\n\nOne common case where this can occur is when a user is\nloading a deeply nested file or directory via some getStatus or\nlistStatus call which syncs metadata and in-turn, will create\nthe paths as it discovers them. In doing so, the lock list is\ninitially populated with write locks. We require them to all\nbe downgraded to read locks for the metadata sync to be\nperformed properly.\n\nThe new syncing design also now only requires downgrades\nto read locks which simplifies a lot of logic which existed\nto support downgrades from WRITE_EDGE to\nWRITE_INODE. These changes removes a good chunk of\nthat complicated code in favor of a simpler approach\nwhich simply performs the lock downgrade for all inodes\nin the list.\n\nA new integration test case was added for this regression."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96b7a76f8d28cc30e72cc8b1c3de7e7b4a7115b6", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/96b7a76f8d28cc30e72cc8b1c3de7e7b4a7115b6", "committedDate": "2020-06-12T00:03:43Z", "message": "Only downgrade sub-list for composite\n\nThis follows the pattern outlined in the javadoc to never modify the\noriginal list."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c2d8a01dde18ddbe6d3606fbbf8fd1cf8dd16a4", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/2c2d8a01dde18ddbe6d3606fbbf8fd1cf8dd16a4", "committedDate": "2020-06-12T00:03:43Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "131754f2890ddf5d3fd261ceb34914576c4243f7", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/131754f2890ddf5d3fd261ceb34914576c4243f7", "committedDate": "2020-06-10T21:16:29Z", "message": "Address comments"}, "afterCommit": {"oid": "2c2d8a01dde18ddbe6d3606fbbf8fd1cf8dd16a4", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/2c2d8a01dde18ddbe6d3606fbbf8fd1cf8dd16a4", "committedDate": "2020-06-12T00:03:43Z", "message": "Address comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4496, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}