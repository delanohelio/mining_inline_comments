{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDg4Mzcy", "number": 10908, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoyNzoxNlrODfuFFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjozMDozM1rODfuIag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTg3NDEzOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/metrics/MetricsStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoyNzoxNlrOFplxSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoyNzoxNlrOFplxSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NDc2Mg==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                LOG.info(\"Clearing the metrics store and metrics system in {} ms\",\n          \n          \n            \n                LOG.info(\"Cleared the metrics store and metrics system in {} ms\",", "url": "https://github.com/Alluxio/alluxio/pull/10908#discussion_r379154762", "createdAt": "2020-02-13T22:27:16Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/MetricsStore.java", "diffHunk": "@@ -203,13 +205,16 @@ public void init() {\n    * the metrics inside metrics sets.\n    */\n   public void clear() {\n+    long start = System.currentTimeMillis();\n     try (LockResource r = new LockResource(mLock.writeLock())) {\n       for (Counter counter : mClusterCounters.values()) {\n         counter.dec(counter.getCount());\n       }\n       mLastClearTime = System.currentTimeMillis();\n       MetricsSystem.resetAllMetrics();\n     }\n+    LOG.info(\"Clearing the metrics store and metrics system in {} ms\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60de875277e612e02e808923fcbde181e035bea"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTg3OTE4OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoyOToxMlrOFpl0gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDoxNjoyOFrOFpn-jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NTU4Ng==", "bodyText": "what does memoizing do for us here?", "url": "https://github.com/Alluxio/alluxio/pull/10908#discussion_r379155586", "createdAt": "2020-02-13T22:29:12Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java", "diffHunk": "@@ -57,6 +59,8 @@\n   private final UnderFileSystem mUnderFileSystem;\n   private final UnderFileSystemConfiguration mConf;\n   private final String mPath;\n+  private final Supplier<String> mEscapedPath =\n+      CommonUtils.memoize(this::escapePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60de875277e612e02e808923fcbde181e035bea"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NjU0Ng==", "bodyText": "So that when MetricsSystem record the metrics of any UFS operation,  the escaped path can be memorized without constructing Alluxio URI and call metho in MetricsSystem.", "url": "https://github.com/Alluxio/alluxio/pull/10908#discussion_r379166546", "createdAt": "2020-02-13T22:58:31Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java", "diffHunk": "@@ -57,6 +59,8 @@\n   private final UnderFileSystem mUnderFileSystem;\n   private final UnderFileSystemConfiguration mConf;\n   private final String mPath;\n+  private final Supplier<String> mEscapedPath =\n+      CommonUtils.memoize(this::escapePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NTU4Ng=="}, "originalCommit": {"oid": "c60de875277e612e02e808923fcbde181e035bea"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MTQ1Nw==", "bodyText": "Isn't the escaped path always the same though because mPath is final?", "url": "https://github.com/Alluxio/alluxio/pull/10908#discussion_r379181457", "createdAt": "2020-02-13T23:43:21Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java", "diffHunk": "@@ -57,6 +59,8 @@\n   private final UnderFileSystem mUnderFileSystem;\n   private final UnderFileSystemConfiguration mConf;\n   private final String mPath;\n+  private final Supplier<String> mEscapedPath =\n+      CommonUtils.memoize(this::escapePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NTU4Ng=="}, "originalCommit": {"oid": "c60de875277e612e02e808923fcbde181e035bea"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5MDkyNg==", "bodyText": "Make sense, Changed to initialize directly in the constructor.", "url": "https://github.com/Alluxio/alluxio/pull/10908#discussion_r379190926", "createdAt": "2020-02-14T00:16:28Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java", "diffHunk": "@@ -57,6 +59,8 @@\n   private final UnderFileSystem mUnderFileSystem;\n   private final UnderFileSystemConfiguration mConf;\n   private final String mPath;\n+  private final Supplier<String> mEscapedPath =\n+      CommonUtils.memoize(this::escapePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NTU4Ng=="}, "originalCommit": {"oid": "c60de875277e612e02e808923fcbde181e035bea"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTg4MDM4OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoyOTo0MVrOFpl1RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzozOToxN1rOFpnT_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NTc4MQ==", "bodyText": "I feel like this will be a spammy log at INFO level", "url": "https://github.com/Alluxio/alluxio/pull/10908#discussion_r379155781", "createdAt": "2020-02-13T22:29:41Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -718,6 +731,8 @@ public static synchronized void resetAllMetrics() {\n       METRIC_REGISTRY.timer(timerName);\n     }\n     LAST_REPORTED_METRICS.clear();\n+    LOG.info(\"Reset all metrics in the metrics system in {}ms\",\n+        System.currentTimeMillis() - startTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60de875277e612e02e808923fcbde181e035bea"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NTkzNA==", "bodyText": "ResetAllMetrics() is used very often in tests, but should be called really rarely in production. It will only be called when the Master starts and when the fsadmin metrics clear is called. Since it may affect the metrics recording and delays some metrics heartbeat, logging is useful.", "url": "https://github.com/Alluxio/alluxio/pull/10908#discussion_r379165934", "createdAt": "2020-02-13T22:56:42Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -718,6 +731,8 @@ public static synchronized void resetAllMetrics() {\n       METRIC_REGISTRY.timer(timerName);\n     }\n     LAST_REPORTED_METRICS.clear();\n+    LOG.info(\"Reset all metrics in the metrics system in {}ms\",\n+        System.currentTimeMillis() - startTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NTc4MQ=="}, "originalCommit": {"oid": "c60de875277e612e02e808923fcbde181e035bea"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MDAzMQ==", "bodyText": "fair enough", "url": "https://github.com/Alluxio/alluxio/pull/10908#discussion_r379180031", "createdAt": "2020-02-13T23:39:17Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -718,6 +731,8 @@ public static synchronized void resetAllMetrics() {\n       METRIC_REGISTRY.timer(timerName);\n     }\n     LAST_REPORTED_METRICS.clear();\n+    LOG.info(\"Reset all metrics in the metrics system in {}ms\",\n+        System.currentTimeMillis() - startTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NTc4MQ=="}, "originalCommit": {"oid": "c60de875277e612e02e808923fcbde181e035bea"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTg4MjY2OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjozMDozM1rOFpl2qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDoxNjo0N1rOFpn_Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NjEzOQ==", "bodyText": "If you're looking to escape into URI-compatible paths I would look somewhere in apache commons utils", "url": "https://github.com/Alluxio/alluxio/pull/10908#discussion_r379156139", "createdAt": "2020-02-13T22:30:33Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -395,7 +397,9 @@ public static String stripInstanceAndHost(String metricsName) {\n    * @return the string representing the escaped URI\n    */\n   public static String escape(AlluxioURI uri) {\n-    return uri.toString().replace(\"%\", \"%25\").replace(\"/\", \"%2F\").replace(\".\", \"%2E\");\n+    return CACHED_ESCAPED_PATH.computeIfAbsent(uri,\n+        u -> u.toString().replace(\"%\", \"%25\")\n+            .replace(\"/\", \"%2F\").replace(\".\", \"%2E\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60de875277e612e02e808923fcbde181e035bea"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2ODU2OA==", "bodyText": "I haven't found existing utils doing exactly the same thing. If there is a util method, that would be really convenient.", "url": "https://github.com/Alluxio/alluxio/pull/10908#discussion_r379168568", "createdAt": "2020-02-13T23:04:41Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -395,7 +397,9 @@ public static String stripInstanceAndHost(String metricsName) {\n    * @return the string representing the escaped URI\n    */\n   public static String escape(AlluxioURI uri) {\n-    return uri.toString().replace(\"%\", \"%25\").replace(\"/\", \"%2F\").replace(\".\", \"%2E\");\n+    return CACHED_ESCAPED_PATH.computeIfAbsent(uri,\n+        u -> u.toString().replace(\"%\", \"%25\")\n+            .replace(\"/\", \"%2F\").replace(\".\", \"%2E\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NjEzOQ=="}, "originalCommit": {"oid": "c60de875277e612e02e808923fcbde181e035bea"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MTA4OA==", "bodyText": "I don't know what the original intention of this code was (if it is doing a URL encoding on the metric name or not, but it looks like it to me.\nWe should be using this: https://docs.oracle.com/javase/8/docs/api/java/net/URLEncoder.html", "url": "https://github.com/Alluxio/alluxio/pull/10908#discussion_r379181088", "createdAt": "2020-02-13T23:42:02Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -395,7 +397,9 @@ public static String stripInstanceAndHost(String metricsName) {\n    * @return the string representing the escaped URI\n    */\n   public static String escape(AlluxioURI uri) {\n-    return uri.toString().replace(\"%\", \"%25\").replace(\"/\", \"%2F\").replace(\".\", \"%2E\");\n+    return CACHED_ESCAPED_PATH.computeIfAbsent(uri,\n+        u -> u.toString().replace(\"%\", \"%25\")\n+            .replace(\"/\", \"%2F\").replace(\".\", \"%2E\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NjEzOQ=="}, "originalCommit": {"oid": "c60de875277e612e02e808923fcbde181e035bea"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4ODk2Ng==", "bodyText": "I think for the first time MetricsSystem.escape created for Metric name processing. Like we use . for distinguish metric name components like (InstanceType.MetricName.Tag:TagValue), so the given url should not have ..\nThis use case does not fit in UTLEncoder because it will The special characters \".\", \"-\", \"*\", and \"_\" remain the same.", "url": "https://github.com/Alluxio/alluxio/pull/10908#discussion_r379188966", "createdAt": "2020-02-14T00:09:13Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -395,7 +397,9 @@ public static String stripInstanceAndHost(String metricsName) {\n    * @return the string representing the escaped URI\n    */\n   public static String escape(AlluxioURI uri) {\n-    return uri.toString().replace(\"%\", \"%25\").replace(\"/\", \"%2F\").replace(\".\", \"%2E\");\n+    return CACHED_ESCAPED_PATH.computeIfAbsent(uri,\n+        u -> u.toString().replace(\"%\", \"%25\")\n+            .replace(\"/\", \"%2F\").replace(\".\", \"%2E\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NjEzOQ=="}, "originalCommit": {"oid": "c60de875277e612e02e808923fcbde181e035bea"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4OTM4Mw==", "bodyText": "Since the code was already here I guess it's ok - but this seems very sketchy to me...we should improve it in the future.", "url": "https://github.com/Alluxio/alluxio/pull/10908#discussion_r379189383", "createdAt": "2020-02-14T00:10:41Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -395,7 +397,9 @@ public static String stripInstanceAndHost(String metricsName) {\n    * @return the string representing the escaped URI\n    */\n   public static String escape(AlluxioURI uri) {\n-    return uri.toString().replace(\"%\", \"%25\").replace(\"/\", \"%2F\").replace(\".\", \"%2E\");\n+    return CACHED_ESCAPED_PATH.computeIfAbsent(uri,\n+        u -> u.toString().replace(\"%\", \"%25\")\n+            .replace(\"/\", \"%2F\").replace(\".\", \"%2E\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NjEzOQ=="}, "originalCommit": {"oid": "c60de875277e612e02e808923fcbde181e035bea"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5MTA1OQ==", "bodyText": "Yeah, it's sketchy, will reconsider how to improve it in the future", "url": "https://github.com/Alluxio/alluxio/pull/10908#discussion_r379191059", "createdAt": "2020-02-14T00:16:47Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -395,7 +397,9 @@ public static String stripInstanceAndHost(String metricsName) {\n    * @return the string representing the escaped URI\n    */\n   public static String escape(AlluxioURI uri) {\n-    return uri.toString().replace(\"%\", \"%25\").replace(\"/\", \"%2F\").replace(\".\", \"%2E\");\n+    return CACHED_ESCAPED_PATH.computeIfAbsent(uri,\n+        u -> u.toString().replace(\"%\", \"%25\")\n+            .replace(\"/\", \"%2F\").replace(\".\", \"%2E\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NjEzOQ=="}, "originalCommit": {"oid": "c60de875277e612e02e808923fcbde181e035bea"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2037, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}