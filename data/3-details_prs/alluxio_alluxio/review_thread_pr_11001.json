{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MjI5OTI0", "number": 11001, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxMDo0NlrODieoNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxMDo0NlrODieoNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDc5OTkxOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxMDo0NlrOFtv9xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxMDo0NlrOFtv9xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNjEwMA==", "bodyText": "Being able to ObjectUtils.toString the previous value is the main benefit.", "url": "https://github.com/Alluxio/alluxio/pull/11001#discussion_r383516100", "createdAt": "2020-02-24T21:10:46Z", "author": {"login": "bradyoo"}, "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -321,32 +323,53 @@ public static void waitFor(String description, Supplier<Boolean> condition)\n    */\n   public static void waitFor(String description, Supplier<Boolean> condition,\n       WaitForOptions options) throws InterruptedException, TimeoutException {\n-    waitForResult(description, () -> condition.get() ? true : null, options);\n+    waitForResult(description, condition, (b) -> b, options);\n   }\n \n   /**\n-   * Waits for an operation to return a non-null value with a specified timeout.\n+   * Waits for the object to meet a certain condition.\n    *\n-   * @param description the description of this operation\n-   * @param operation the operation\n+   * @param description a description of what causes condition to be met.\n+   * @param objectSupplier the object to check the condition for\n+   * @param condition the condition to wait on\n+   * @param <T> type of the object\n+   * @return the object\n+   * @throws TimeoutException if the function times out while waiting for the condition to be true\n+   * @throws InterruptedException if the thread was interrupted\n+   */\n+  public static <T> T waitForResult(String description, Supplier<T> objectSupplier,\n+                                    Function<T, Boolean> condition)\n+      throws TimeoutException, InterruptedException {\n+    return waitForResult(description, objectSupplier, condition, WaitForOptions.defaults());\n+  }\n+\n+  /**\n+   * Waits for the object to meet a certain condition.\n+   *\n+   * @param description a description of what causes condition to be met.\n+   * @param objectSupplier the object to check the condition for\n+   * @param condition the condition to wait on\n    * @param options the options to use\n-   * @param <T> the type of the return value\n-   * @throws TimeoutException if the function times out while waiting to get a non-null value\n-   * @return the first non-null value generated by the operation\n+   * @param <T> type of the object\n+   * @return the object\n+   * @throws TimeoutException if the function times out while waiting for the condition to be true\n+   * @throws InterruptedException if the thread was interrupted\n    */\n-  public static <T> T waitForResult(String description, Supplier<T> operation,\n-      WaitForOptions options) throws InterruptedException, TimeoutException {\n-    T t;\n+  public static <T> T waitForResult(String description, Supplier<T> objectSupplier,\n+                                    Function<T, Boolean> condition, WaitForOptions options)\n+      throws TimeoutException, InterruptedException {\n+    T value;\n     long start = System.currentTimeMillis();\n     int interval = options.getInterval();\n     int timeout = options.getTimeoutMs();\n-    while ((t = operation.get()) == null) {\n+    while (condition.apply(value = objectSupplier.get()) != true) {\n       if (timeout != WaitForOptions.NEVER && System.currentTimeMillis() - start > timeout) {\n-        throw new TimeoutException(\"Timed out waiting for \" + description + \" options: \" + options);\n+        throw new TimeoutException(\"Timed out waiting for \" + description + \" options: \" + options\n+            + \" last value: \" + ObjectUtils.toString(value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "066e79201ed5b12dab1c88988ad3827fa7a35b4b"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1981, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}