{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2OTcyMDE0", "number": 11972, "title": "Improve exception messages for FileAlreadyExistsException", "bodyText": "FileAlreadyExistsException message is not always obvious what it means, so adjusted the messages to be more specific to the situation.", "createdAt": "2020-08-12T19:48:37Z", "url": "https://github.com/Alluxio/alluxio/pull/11972", "merged": true, "mergeCommit": {"oid": "7b6a3ca638f090a9791ce32745850b58272201ef"}, "closed": true, "closedAt": "2020-08-15T18:26:49Z", "author": {"login": "gpang"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-Q2A-AH2gAyNDY2OTcyMDE0OjcyNWY2Y2NmODRjOTM1Mjk5ZDFmZTMzMWQxZjRhZDI2NWE2ZDA1Mjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_Nfk5AFqTQ2ODAxMDEwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "725f6ccf84c935299d1fe331d1f4ad265a6d0527", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/725f6ccf84c935299d1fe331d1f4ad265a6d0527", "committedDate": "2020-08-12T19:46:52Z", "message": "Improve exception messages for FileAlreadyExistsException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe45407f4fc67480e3a9a1b73af6a53bbb13f7d8", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/fe45407f4fc67480e3a9a1b73af6a53bbb13f7d8", "committedDate": "2020-08-12T20:03:50Z", "message": "Fix style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/c95dde48a8d38c8e704c66d4c008cc40a56c1e02", "committedDate": "2020-08-12T20:41:15Z", "message": "Fix integration tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDMwODI2", "url": "https://github.com/Alluxio/alluxio/pull/11972#pullrequestreview-467030826", "createdAt": "2020-08-13T18:34:59Z", "commit": {"oid": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODozNDo1OVrOHAYj6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODozNDo1OVrOHAYj6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NDQ1Nw==", "bodyText": "Shall we use junit expectedMessage?\nexpectedEx.expectMessage(\"message to expect\");\n\nsee\nhttps://stackoverflow.com/questions/2469911/how-do-i-assert-my-exception-message-with-junit-test-annotation", "url": "https://github.com/Alluxio/alluxio/pull/11972#discussion_r470164457", "createdAt": "2020-08-13T18:34:59Z", "author": {"login": "apc999"}, "path": "core/client/hdfs/src/test/java/alluxio/hadoop/AbstractFileSystemTest.java", "diffHunk": "@@ -585,6 +587,46 @@ public void getBlockLocationsNoUfsLocationsWithFallback() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void appendExistingNotSupported() throws Exception {\n+    Path path = new Path(\"/file\");\n+    alluxio.client.file.FileSystem alluxioFs =\n+        mock(alluxio.client.file.FileSystem.class);\n+    when(alluxioFs.exists(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))))\n+        .thenReturn(true);\n+    FileSystem alluxioHadoopFs = new FileSystem(alluxioFs);\n+\n+    try {\n+      alluxioHadoopFs.append(path, 100);\n+      fail(\"append() of existing file is expected to fail\");\n+    } catch (IOException e) {\n+      assertEquals(\"append() to existing Alluxio path is currently not supported: \" + path,\n+          e.getMessage());\n+    }\n+    alluxioHadoopFs.close();\n+  }\n+\n+  @Test\n+  public void createWithoutOverwrite() throws Exception {\n+    Path path = new Path(\"/file\");\n+    alluxio.client.file.FileSystem alluxioFs =\n+        mock(alluxio.client.file.FileSystem.class);\n+    when(alluxioFs.exists(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))))\n+        .thenReturn(true);\n+    when(alluxioFs.createFile(eq(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))), any()))\n+        .thenThrow(new FileAlreadyExistsException(path.toString()));\n+    FileSystem alluxioHadoopFs = new FileSystem(alluxioFs);\n+\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDMxMDkz", "url": "https://github.com/Alluxio/alluxio/pull/11972#pullrequestreview-467031093", "createdAt": "2020-08-13T18:35:26Z", "commit": {"oid": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODozNToyNlrOHAYk2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODozNToyNlrOHAYk2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NDY5OQ==", "bodyText": "I will make this try-with-resource to make sure it is closed", "url": "https://github.com/Alluxio/alluxio/pull/11972#discussion_r470164699", "createdAt": "2020-08-13T18:35:26Z", "author": {"login": "apc999"}, "path": "core/client/hdfs/src/test/java/alluxio/hadoop/AbstractFileSystemTest.java", "diffHunk": "@@ -585,6 +587,46 @@ public void getBlockLocationsNoUfsLocationsWithFallback() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void appendExistingNotSupported() throws Exception {\n+    Path path = new Path(\"/file\");\n+    alluxio.client.file.FileSystem alluxioFs =\n+        mock(alluxio.client.file.FileSystem.class);\n+    when(alluxioFs.exists(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))))\n+        .thenReturn(true);\n+    FileSystem alluxioHadoopFs = new FileSystem(alluxioFs);\n+\n+    try {\n+      alluxioHadoopFs.append(path, 100);\n+      fail(\"append() of existing file is expected to fail\");\n+    } catch (IOException e) {\n+      assertEquals(\"append() to existing Alluxio path is currently not supported: \" + path,\n+          e.getMessage());\n+    }\n+    alluxioHadoopFs.close();\n+  }\n+\n+  @Test\n+  public void createWithoutOverwrite() throws Exception {\n+    Path path = new Path(\"/file\");\n+    alluxio.client.file.FileSystem alluxioFs =\n+        mock(alluxio.client.file.FileSystem.class);\n+    when(alluxioFs.exists(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))))\n+        .thenReturn(true);\n+    when(alluxioFs.createFile(eq(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))), any()))\n+        .thenThrow(new FileAlreadyExistsException(path.toString()));\n+    FileSystem alluxioHadoopFs = new FileSystem(alluxioFs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDM0MTc1", "url": "https://github.com/Alluxio/alluxio/pull/11972#pullrequestreview-467034175", "createdAt": "2020-08-13T18:40:04Z", "commit": {"oid": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODo0MDowNFrOHAYvow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODo0MDowNFrOHAYvow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NzQ1OQ==", "bodyText": "not clear to me. do we mean:\nNot allowed to create a new file or dir with existing path?", "url": "https://github.com/Alluxio/alluxio/pull/11972#discussion_r470167459", "createdAt": "2020-08-13T18:40:04Z", "author": {"login": "apc999"}, "path": "core/server/master/src/main/java/alluxio/master/file/meta/InodeTree.java", "diffHunk": "@@ -675,16 +676,22 @@ public InodeDirectory getRoot() {\n     // helper method for the shared logic.\n     AlluxioURI path = inodePath.getUri();\n     if (path.isRoot()) {\n-      String errorMessage = ExceptionMessage.FILE_ALREADY_EXISTS.getMessage(path);\n+      String errorMessage = \"Not allowed to create existing root path: \" + path;\n       LOG.error(errorMessage);\n       throw new FileAlreadyExistsException(errorMessage);\n     }\n     if (inodePath.fullPathExists()) {\n       if (context instanceof CreateDirectoryContext\n           && ((CreateDirectoryContext) context).getOptions().getAllowExists()) {\n-        return new ArrayList<>();\n+        return Collections.emptyList();\n       } else {\n-        throw new FileAlreadyExistsException(path);\n+        String pathType = \"file\";\n+        if (context instanceof CreateDirectoryContext) {\n+          pathType = \"directory\";\n+        }\n+        String errorMessage =\n+            String.format(\"Not allowed to create existing %s: %s\", pathType, path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDM0NzY2", "url": "https://github.com/Alluxio/alluxio/pull/11972#pullrequestreview-467034766", "createdAt": "2020-08-13T18:40:58Z", "commit": {"oid": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fd3d614f47ba9317d9911354c128877964368dd", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/3fd3d614f47ba9317d9911354c128877964368dd", "committedDate": "2020-08-13T19:13:40Z", "message": "Improve tests/logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDQ5NDUw", "url": "https://github.com/Alluxio/alluxio/pull/11972#pullrequestreview-467049450", "createdAt": "2020-08-13T19:01:03Z", "commit": {"oid": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTowMTowM1rOHAZj7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToxNToxOFrOHAaCLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4MDg0Ng==", "bodyText": "Done", "url": "https://github.com/Alluxio/alluxio/pull/11972#discussion_r470180846", "createdAt": "2020-08-13T19:01:03Z", "author": {"login": "gpang"}, "path": "core/client/hdfs/src/test/java/alluxio/hadoop/AbstractFileSystemTest.java", "diffHunk": "@@ -585,6 +587,46 @@ public void getBlockLocationsNoUfsLocationsWithFallback() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void appendExistingNotSupported() throws Exception {\n+    Path path = new Path(\"/file\");\n+    alluxio.client.file.FileSystem alluxioFs =\n+        mock(alluxio.client.file.FileSystem.class);\n+    when(alluxioFs.exists(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))))\n+        .thenReturn(true);\n+    FileSystem alluxioHadoopFs = new FileSystem(alluxioFs);\n+\n+    try {\n+      alluxioHadoopFs.append(path, 100);\n+      fail(\"append() of existing file is expected to fail\");\n+    } catch (IOException e) {\n+      assertEquals(\"append() to existing Alluxio path is currently not supported: \" + path,\n+          e.getMessage());\n+    }\n+    alluxioHadoopFs.close();\n+  }\n+\n+  @Test\n+  public void createWithoutOverwrite() throws Exception {\n+    Path path = new Path(\"/file\");\n+    alluxio.client.file.FileSystem alluxioFs =\n+        mock(alluxio.client.file.FileSystem.class);\n+    when(alluxioFs.exists(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))))\n+        .thenReturn(true);\n+    when(alluxioFs.createFile(eq(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))), any()))\n+        .thenThrow(new FileAlreadyExistsException(path.toString()));\n+    FileSystem alluxioHadoopFs = new FileSystem(alluxioFs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NDY5OQ=="}, "originalCommit": {"oid": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4NDM5Nw==", "bodyText": "In general, I have been favoring the manual catching, mainly because the ExpectedException only works with 1 exception per test. It is common that tests might expect multiple exceptions in a test, so I tend to manually catch the Exception. In these specific tests, we only deal with 1 Exception, so ExpectedException would have worked, but I usually avoid using it because of that limitation.", "url": "https://github.com/Alluxio/alluxio/pull/11972#discussion_r470184397", "createdAt": "2020-08-13T19:07:34Z", "author": {"login": "gpang"}, "path": "core/client/hdfs/src/test/java/alluxio/hadoop/AbstractFileSystemTest.java", "diffHunk": "@@ -585,6 +587,46 @@ public void getBlockLocationsNoUfsLocationsWithFallback() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void appendExistingNotSupported() throws Exception {\n+    Path path = new Path(\"/file\");\n+    alluxio.client.file.FileSystem alluxioFs =\n+        mock(alluxio.client.file.FileSystem.class);\n+    when(alluxioFs.exists(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))))\n+        .thenReturn(true);\n+    FileSystem alluxioHadoopFs = new FileSystem(alluxioFs);\n+\n+    try {\n+      alluxioHadoopFs.append(path, 100);\n+      fail(\"append() of existing file is expected to fail\");\n+    } catch (IOException e) {\n+      assertEquals(\"append() to existing Alluxio path is currently not supported: \" + path,\n+          e.getMessage());\n+    }\n+    alluxioHadoopFs.close();\n+  }\n+\n+  @Test\n+  public void createWithoutOverwrite() throws Exception {\n+    Path path = new Path(\"/file\");\n+    alluxio.client.file.FileSystem alluxioFs =\n+        mock(alluxio.client.file.FileSystem.class);\n+    when(alluxioFs.exists(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))))\n+        .thenReturn(true);\n+    when(alluxioFs.createFile(eq(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))), any()))\n+        .thenThrow(new FileAlreadyExistsException(path.toString()));\n+    FileSystem alluxioHadoopFs = new FileSystem(alluxioFs);\n+\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NDQ1Nw=="}, "originalCommit": {"oid": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4ODU4OQ==", "bodyText": "I updated it. Does the message make more sense?", "url": "https://github.com/Alluxio/alluxio/pull/11972#discussion_r470188589", "createdAt": "2020-08-13T19:15:18Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/meta/InodeTree.java", "diffHunk": "@@ -675,16 +676,22 @@ public InodeDirectory getRoot() {\n     // helper method for the shared logic.\n     AlluxioURI path = inodePath.getUri();\n     if (path.isRoot()) {\n-      String errorMessage = ExceptionMessage.FILE_ALREADY_EXISTS.getMessage(path);\n+      String errorMessage = \"Not allowed to create existing root path: \" + path;\n       LOG.error(errorMessage);\n       throw new FileAlreadyExistsException(errorMessage);\n     }\n     if (inodePath.fullPathExists()) {\n       if (context instanceof CreateDirectoryContext\n           && ((CreateDirectoryContext) context).getOptions().getAllowExists()) {\n-        return new ArrayList<>();\n+        return Collections.emptyList();\n       } else {\n-        throw new FileAlreadyExistsException(path);\n+        String pathType = \"file\";\n+        if (context instanceof CreateDirectoryContext) {\n+          pathType = \"directory\";\n+        }\n+        String errorMessage =\n+            String.format(\"Not allowed to create existing %s: %s\", pathType, path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NzQ1OQ=="}, "originalCommit": {"oid": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9f315a0d849d288a0566c69b437122e7bb07486", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/c9f315a0d849d288a0566c69b437122e7bb07486", "committedDate": "2020-08-13T19:53:49Z", "message": "Fix test messages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MDEwMTAx", "url": "https://github.com/Alluxio/alluxio/pull/11972#pullrequestreview-468010101", "createdAt": "2020-08-15T18:26:34Z", "commit": {"oid": "c9f315a0d849d288a0566c69b437122e7bb07486"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4126, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}