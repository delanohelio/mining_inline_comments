{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3Njc4NzY5", "number": 11983, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDowNzo1OFrOEYRzWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDowODoxOFrOEYRzyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODkyOTU0OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDowNzo1OFrOHAhwxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDoyMTo0M1rOHAiUkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxNTIwNQ==", "bodyText": "Do we need to do this read in a loop since we are not guaranteed to read the full data in one call?", "url": "https://github.com/Alluxio/alluxio/pull/11983#discussion_r470315205", "createdAt": "2020-08-14T00:07:58Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -88,23 +86,22 @@ public void put(PageId pageId, byte[] page) throws IOException {\n   }\n \n   @Override\n-  public ReadableByteChannel get(PageId pageId, int pageOffset)\n+  public int get(PageId pageId, int pageOffset, byte[] buffer, int bufferOffset)\n       throws IOException, PageNotFoundException {\n     Preconditions.checkArgument(pageOffset >= 0, \"page offset should be non-negative\");\n+    Preconditions.checkArgument(buffer.length >= bufferOffset, \"page offset %s should be \"\n+        + \"less or equal than buffer length %s\", bufferOffset, buffer.length);\n     Path p = getFilePath(pageId);\n     if (!Files.exists(p)) {\n       throw new PageNotFoundException(p.toString());\n     }\n-    File f = p.toFile();\n-    Preconditions.checkArgument(pageOffset <= f.length(),\n-        \"page offset %s exceeded page size %s\", pageOffset, f.length());\n-    FileInputStream fis = new FileInputStream(p.toFile());\n-    try {\n-      fis.skip(pageOffset);\n-      return fis.getChannel();\n-    } catch (Throwable t) {\n-      fis.close();\n-      throw t;\n+    long fileLen = p.toFile().length();\n+    Preconditions.checkArgument(pageOffset <= fileLen,\n+        \"page offset %s exceeded page size %s\", pageOffset, fileLen);\n+    try (RandomAccessFile localFile = new RandomAccessFile(p.toString(), \"r\")) {\n+      localFile.skipBytes(pageOffset);\n+      return localFile.read(buffer, bufferOffset, (int) Math.min(fileLen - pageOffset,\n+          buffer.length - bufferOffset));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a49ede7305f56744e94b1ecc6d4ab23ab2ff73"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMyNDM2OQ==", "bodyText": "good point, let me apply this", "url": "https://github.com/Alluxio/alluxio/pull/11983#discussion_r470324369", "createdAt": "2020-08-14T00:21:43Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -88,23 +86,22 @@ public void put(PageId pageId, byte[] page) throws IOException {\n   }\n \n   @Override\n-  public ReadableByteChannel get(PageId pageId, int pageOffset)\n+  public int get(PageId pageId, int pageOffset, byte[] buffer, int bufferOffset)\n       throws IOException, PageNotFoundException {\n     Preconditions.checkArgument(pageOffset >= 0, \"page offset should be non-negative\");\n+    Preconditions.checkArgument(buffer.length >= bufferOffset, \"page offset %s should be \"\n+        + \"less or equal than buffer length %s\", bufferOffset, buffer.length);\n     Path p = getFilePath(pageId);\n     if (!Files.exists(p)) {\n       throw new PageNotFoundException(p.toString());\n     }\n-    File f = p.toFile();\n-    Preconditions.checkArgument(pageOffset <= f.length(),\n-        \"page offset %s exceeded page size %s\", pageOffset, f.length());\n-    FileInputStream fis = new FileInputStream(p.toFile());\n-    try {\n-      fis.skip(pageOffset);\n-      return fis.getChannel();\n-    } catch (Throwable t) {\n-      fis.close();\n-      throw t;\n+    long fileLen = p.toFile().length();\n+    Preconditions.checkArgument(pageOffset <= fileLen,\n+        \"page offset %s exceeded page size %s\", pageOffset, fileLen);\n+    try (RandomAccessFile localFile = new RandomAccessFile(p.toString(), \"r\")) {\n+      localFile.skipBytes(pageOffset);\n+      return localFile.read(buffer, bufferOffset, (int) Math.min(fileLen - pageOffset,\n+          buffer.length - bufferOffset));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxNTIwNQ=="}, "originalCommit": {"oid": "43a49ede7305f56744e94b1ecc6d4ab23ab2ff73"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODkzMDY0OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDowODoxOFrOHAhxjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODowNzowNFrOHA98VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxNTQwNw==", "bodyText": "Same comment about read", "url": "https://github.com/Alluxio/alluxio/pull/11983#discussion_r470315407", "createdAt": "2020-08-14T00:08:18Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -123,9 +121,12 @@ public ReadableByteChannel get(PageId pageId, int pageOffset)\n       }\n       Preconditions.checkArgument(pageOffset <= page.length,\n           \"page offset %s exceeded page size %s\", pageOffset, page.length);\n-      ByteArrayInputStream bais = new ByteArrayInputStream(page);\n-      bais.skip(pageOffset);\n-      return Channels.newChannel(bais);\n+\n+      try (ByteArrayInputStream bais = new ByteArrayInputStream(page)) {\n+        bais.skip(pageOffset);\n+        return bais.read(buffer, bufferOffset,\n+            Math.min(page.length - pageOffset, buffer.length - bufferOffset));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a49ede7305f56744e94b1ecc6d4ab23ab2ff73"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc3NjkxNw==", "bodyText": "fixed", "url": "https://github.com/Alluxio/alluxio/pull/11983#discussion_r470776917", "createdAt": "2020-08-14T18:07:04Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -123,9 +121,12 @@ public ReadableByteChannel get(PageId pageId, int pageOffset)\n       }\n       Preconditions.checkArgument(pageOffset <= page.length,\n           \"page offset %s exceeded page size %s\", pageOffset, page.length);\n-      ByteArrayInputStream bais = new ByteArrayInputStream(page);\n-      bais.skip(pageOffset);\n-      return Channels.newChannel(bais);\n+\n+      try (ByteArrayInputStream bais = new ByteArrayInputStream(page)) {\n+        bais.skip(pageOffset);\n+        return bais.read(buffer, bufferOffset,\n+            Math.min(page.length - pageOffset, buffer.length - bufferOffset));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxNTQwNw=="}, "originalCommit": {"oid": "43a49ede7305f56744e94b1ecc6d4ab23ab2ff73"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1308, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}