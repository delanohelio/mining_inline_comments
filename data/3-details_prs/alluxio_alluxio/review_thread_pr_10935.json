{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODYyMTk5", "number": 10935, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjoxODozN1rODg36zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjoyNzo0OVrODg4EKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzk3MTk4OnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjoxODozN1rOFrUing==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjoyMDowM1rOFrUk4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2OTYzMA==", "bodyText": "the output will be deleted all the time?", "url": "https://github.com/Alluxio/alluxio/pull/10935#discussion_r380969630", "createdAt": "2020-02-18T22:18:37Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -174,38 +172,29 @@ private boolean shouldIgnore(URIStatus status) {\n   @Override\n   public SerializableVoid runTask(CompactConfig config, ArrayList<CompactTask> tasks,\n       RunTaskContext context) throws Exception {\n-    Closer closer = Closer.create();\n-    boolean closed = false;\n-    Compactor compactor = new SequentialCompactor();\n     for (CompactTask task : tasks) {\n       ArrayList<String> inputs = task.getInputs();\n       if (inputs.isEmpty()) {\n         continue;\n       }\n       AlluxioURI output = new AlluxioURI(task.getOutput());\n-      List<TableReader> readers = Lists.newArrayList();\n-      TableWriter writer = null;\n-      try {\n+\n+      TableSchema schema;\n+      try (TableReader reader = TableReader.create(new AlluxioURI(inputs.get(0)), config.getPartitionInfo())) {\n+        schema = reader.getSchema();\n+      }\n+\n+      try (TableWriter writer = TableWriter.create(schema, output)) {\n         for (String input : inputs) {\n-          readers.add(closer.register(TableReader.create(new AlluxioURI(input),\n-              config.getPartitionInfo())));\n+          try (TableReader reader = TableReader.create(new AlluxioURI(input),\n+              config.getPartitionInfo())) {\n+            for (TableRow row = reader.read(); row != null; row = reader.read()) {\n+              writer.write(row);\n+            }\n+          }\n         }\n-        TableSchema schema = readers.get(0).getSchema();\n-        writer = closer.register(TableWriter.create(schema, output));\n-        compactor.compact(readers, writer);\n-      } catch (Throwable t) {\n-        closer.close();\n-        closed = true;\n-        try {\n-          context.getFileSystem().delete(output); // output is the compacted file\n-        } catch (Throwable e) {\n-          t.addSuppressed(e);\n-        }\n-        closer.rethrow(t);\n       } finally {\n-        if (!closed) {\n-          closer.close();\n-        }\n+        context.getFileSystem().delete(output); // output is the compacted file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642ecff53765901971db53eb9606f8b5c7ddffc7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MDIxMA==", "bodyText": "Oops. Yeah that's wrong :/", "url": "https://github.com/Alluxio/alluxio/pull/10935#discussion_r380970210", "createdAt": "2020-02-18T22:20:03Z", "author": {"login": "bradyoo"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -174,38 +172,29 @@ private boolean shouldIgnore(URIStatus status) {\n   @Override\n   public SerializableVoid runTask(CompactConfig config, ArrayList<CompactTask> tasks,\n       RunTaskContext context) throws Exception {\n-    Closer closer = Closer.create();\n-    boolean closed = false;\n-    Compactor compactor = new SequentialCompactor();\n     for (CompactTask task : tasks) {\n       ArrayList<String> inputs = task.getInputs();\n       if (inputs.isEmpty()) {\n         continue;\n       }\n       AlluxioURI output = new AlluxioURI(task.getOutput());\n-      List<TableReader> readers = Lists.newArrayList();\n-      TableWriter writer = null;\n-      try {\n+\n+      TableSchema schema;\n+      try (TableReader reader = TableReader.create(new AlluxioURI(inputs.get(0)), config.getPartitionInfo())) {\n+        schema = reader.getSchema();\n+      }\n+\n+      try (TableWriter writer = TableWriter.create(schema, output)) {\n         for (String input : inputs) {\n-          readers.add(closer.register(TableReader.create(new AlluxioURI(input),\n-              config.getPartitionInfo())));\n+          try (TableReader reader = TableReader.create(new AlluxioURI(input),\n+              config.getPartitionInfo())) {\n+            for (TableRow row = reader.read(); row != null; row = reader.read()) {\n+              writer.write(row);\n+            }\n+          }\n         }\n-        TableSchema schema = readers.get(0).getSchema();\n-        writer = closer.register(TableWriter.create(schema, output));\n-        compactor.compact(readers, writer);\n-      } catch (Throwable t) {\n-        closer.close();\n-        closed = true;\n-        try {\n-          context.getFileSystem().delete(output); // output is the compacted file\n-        } catch (Throwable e) {\n-          t.addSuppressed(e);\n-        }\n-        closer.rethrow(t);\n       } finally {\n-        if (!closed) {\n-          closer.close();\n-        }\n+        context.getFileSystem().delete(output); // output is the compacted file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2OTYzMA=="}, "originalCommit": {"oid": "642ecff53765901971db53eb9606f8b5c7ddffc7"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzk5NTk1OnYy", "diffSide": "LEFT", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjoyNzo0OVrOFrUxdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjozNzoxOVrOFrVA6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MzQzMA==", "bodyText": "Shouldn't we delete the output if there is a failure?", "url": "https://github.com/Alluxio/alluxio/pull/10935#discussion_r380973430", "createdAt": "2020-02-18T22:27:49Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -174,37 +172,26 @@ private boolean shouldIgnore(URIStatus status) {\n   @Override\n   public SerializableVoid runTask(CompactConfig config, ArrayList<CompactTask> tasks,\n       RunTaskContext context) throws Exception {\n-    Closer closer = Closer.create();\n-    boolean closed = false;\n-    Compactor compactor = new SequentialCompactor();\n     for (CompactTask task : tasks) {\n       ArrayList<String> inputs = task.getInputs();\n       if (inputs.isEmpty()) {\n         continue;\n       }\n       AlluxioURI output = new AlluxioURI(task.getOutput());\n-      List<TableReader> readers = Lists.newArrayList();\n-      TableWriter writer = null;\n-      try {\n+\n+      TableSchema schema;\n+      try (TableReader reader = TableReader.create(new AlluxioURI(inputs.get(0)), config.getPartitionInfo())) {\n+        schema = reader.getSchema();\n+      }\n+\n+      try (TableWriter writer = TableWriter.create(schema, output)) {\n         for (String input : inputs) {\n-          readers.add(closer.register(TableReader.create(new AlluxioURI(input),\n-              config.getPartitionInfo())));\n-        }\n-        TableSchema schema = readers.get(0).getSchema();\n-        writer = closer.register(TableWriter.create(schema, output));\n-        compactor.compact(readers, writer);\n-      } catch (Throwable t) {\n-        closer.close();\n-        closed = true;\n-        try {\n-          context.getFileSystem().delete(output); // output is the compacted file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f0886ff8623fbbeb07e7e7c87fbc70c4d568738"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3NzM4Nw==", "bodyText": "Sorry. I just needed something quick to retrigger build. I went back to deleting it again.", "url": "https://github.com/Alluxio/alluxio/pull/10935#discussion_r380977387", "createdAt": "2020-02-18T22:37:19Z", "author": {"login": "bradyoo"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -174,37 +172,26 @@ private boolean shouldIgnore(URIStatus status) {\n   @Override\n   public SerializableVoid runTask(CompactConfig config, ArrayList<CompactTask> tasks,\n       RunTaskContext context) throws Exception {\n-    Closer closer = Closer.create();\n-    boolean closed = false;\n-    Compactor compactor = new SequentialCompactor();\n     for (CompactTask task : tasks) {\n       ArrayList<String> inputs = task.getInputs();\n       if (inputs.isEmpty()) {\n         continue;\n       }\n       AlluxioURI output = new AlluxioURI(task.getOutput());\n-      List<TableReader> readers = Lists.newArrayList();\n-      TableWriter writer = null;\n-      try {\n+\n+      TableSchema schema;\n+      try (TableReader reader = TableReader.create(new AlluxioURI(inputs.get(0)), config.getPartitionInfo())) {\n+        schema = reader.getSchema();\n+      }\n+\n+      try (TableWriter writer = TableWriter.create(schema, output)) {\n         for (String input : inputs) {\n-          readers.add(closer.register(TableReader.create(new AlluxioURI(input),\n-              config.getPartitionInfo())));\n-        }\n-        TableSchema schema = readers.get(0).getSchema();\n-        writer = closer.register(TableWriter.create(schema, output));\n-        compactor.compact(readers, writer);\n-      } catch (Throwable t) {\n-        closer.close();\n-        closed = true;\n-        try {\n-          context.getFileSystem().delete(output); // output is the compacted file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MzQzMA=="}, "originalCommit": {"oid": "3f0886ff8623fbbeb07e7e7c87fbc70c4d568738"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2062, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}