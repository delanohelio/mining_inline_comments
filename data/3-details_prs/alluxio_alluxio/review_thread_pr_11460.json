{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMTg1MzYx", "number": 11460, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo0Mzo1NFrOD_DgrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMTo0MTowMVrOD_E7sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDQ0Mzk2OnYy", "diffSide": "LEFT", "path": "stress/common/src/main/java/alluxio/stress/master/MasterBenchSummary.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo0Mzo1NFrOGZiGJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjoyNDo1OVrOGa7B2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyNjIxMw==", "bodyText": "Does this mean the actual throughput will not be in the json output itself? I think the throughput value should be in the json.", "url": "https://github.com/Alluxio/alluxio/pull/11460#discussion_r429426213", "createdAt": "2020-05-22T19:43:54Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/master/MasterBenchSummary.java", "diffHunk": "@@ -18,35 +18,28 @@\n import alluxio.stress.graph.LineGraph;\n \n import com.google.common.base.Splitter;\n-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n \n import java.text.DateFormat;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n+import java.util.zip.DataFormatException;\n \n /**\n  * The summary for the master stress tests.\n  */\n public final class MasterBenchSummary implements Summary {\n   private long mDurationMs;\n-  private long mNumSuccess;\n-  private float mThroughput;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef78b1e87c0dbc313d348d476742606e09af06c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg4MzI5MA==", "bodyText": "Do we really need this? It's so easily derivable.", "url": "https://github.com/Alluxio/alluxio/pull/11460#discussion_r430883290", "createdAt": "2020-05-27T06:24:59Z", "author": {"login": "bradyoo"}, "path": "stress/common/src/main/java/alluxio/stress/master/MasterBenchSummary.java", "diffHunk": "@@ -18,35 +18,28 @@\n import alluxio.stress.graph.LineGraph;\n \n import com.google.common.base.Splitter;\n-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n \n import java.text.DateFormat;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n+import java.util.zip.DataFormatException;\n \n /**\n  * The summary for the master stress tests.\n  */\n public final class MasterBenchSummary implements Summary {\n   private long mDurationMs;\n-  private long mNumSuccess;\n-  private float mThroughput;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyNjIxMw=="}, "originalCommit": {"oid": "8ef78b1e87c0dbc313d348d476742606e09af06c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDY2NjI2OnYy", "diffSide": "RIGHT", "path": "stress/common/src/main/java/alluxio/stress/master/MasterBenchTaskResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMTozNDo0MVrOGZkQCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMTozNDo0MVrOGZkQCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2MTUxMg==", "bodyText": "for these getters and setters which are part of mStatistics, do we need them anymore?", "url": "https://github.com/Alluxio/alluxio/pull/11460#discussion_r429461512", "createdAt": "2020-05-22T21:34:41Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/master/MasterBenchTaskResult.java", "diffHunk": "@@ -114,7 +93,7 @@ public void setDurationMs(long durationMs) {\n    * @return number of successes\n    */\n   public long getNumSuccess() {\n-    return mNumSuccess;\n+    return mStatistics.mNumSuccess;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef78b1e87c0dbc313d348d476742606e09af06c"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDY2ODk1OnYy", "diffSide": "RIGHT", "path": "stress/common/src/main/java/alluxio/stress/master/MasterBenchTaskResultStatistics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMTozNjowNlrOGZkRjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODowNDo0N1rOGa98zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2MTkwMg==", "bodyText": "Should there be getters and setters for these, for json ser/de?", "url": "https://github.com/Alluxio/alluxio/pull/11460#discussion_r429461902", "createdAt": "2020-05-22T21:36:06Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/master/MasterBenchTaskResultStatistics.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.master;\n+\n+import alluxio.Constants;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.HdrHistogram.Histogram;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.zip.DataFormatException;\n+\n+/**\n+ * Statistics class that is used in {@link MasterBenchTaskResult}.\n+ */\n+public class MasterBenchTaskResultStatistics {\n+  public static final int MAX_RESPONSE_TIME_COUNT = 20;\n+\n+  /** The response time histogram can record values up to this amount. */\n+  public static final long RESPONSE_TIME_HISTOGRAM_MAX = Constants.SECOND_NANO * 60 * 30;\n+  public static final int RESPONSE_TIME_HISTOGRAM_PRECISION = 3;\n+\n+  static final int COMPRESSION_LEVEL = 9;\n+  static final int RESPONSE_TIME_99_COUNT = 6;\n+\n+  public long mNumSuccess;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef78b1e87c0dbc313d348d476742606e09af06c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzMTE1MA==", "bodyText": "These are currently all public for json ser/de.", "url": "https://github.com/Alluxio/alluxio/pull/11460#discussion_r430931150", "createdAt": "2020-05-27T08:04:47Z", "author": {"login": "bradyoo"}, "path": "stress/common/src/main/java/alluxio/stress/master/MasterBenchTaskResultStatistics.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.master;\n+\n+import alluxio.Constants;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.HdrHistogram.Histogram;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.zip.DataFormatException;\n+\n+/**\n+ * Statistics class that is used in {@link MasterBenchTaskResult}.\n+ */\n+public class MasterBenchTaskResultStatistics {\n+  public static final int MAX_RESPONSE_TIME_COUNT = 20;\n+\n+  /** The response time histogram can record values up to this amount. */\n+  public static final long RESPONSE_TIME_HISTOGRAM_MAX = Constants.SECOND_NANO * 60 * 30;\n+  public static final int RESPONSE_TIME_HISTOGRAM_PRECISION = 3;\n+\n+  static final int COMPRESSION_LEVEL = 9;\n+  static final int RESPONSE_TIME_99_COUNT = 6;\n+\n+  public long mNumSuccess;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2MTkwMg=="}, "originalCommit": {"oid": "8ef78b1e87c0dbc313d348d476742606e09af06c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDY3Njk5OnYy", "diffSide": "RIGHT", "path": "stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMTo0MTowMVrOGZkWgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODowNToyOVrOGa9-OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2MzE2OA==", "bodyText": "I think this parsing should be pulled out into a library, since I think it will be reused in the future.", "url": "https://github.com/Alluxio/alluxio/pull/11460#discussion_r429463168", "createdAt": "2020-05-22T21:41:01Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java", "diffHunk": "@@ -202,11 +220,87 @@ public synchronized void mergeThreadResult(MasterBenchTaskResult threadResult) {\n       }\n     }\n \n+    @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+    public synchronized void addAdditionalResult() throws IOException {\n+      if (mResult == null) {\n+        return;\n+      }\n+\n+      Map<String, PartialResultStatistic> methodNameToHistogram = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef78b1e87c0dbc313d348d476742606e09af06c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzMTUxMw==", "bodyText": "I agree that it will. But I am not sure how it will be used in the future so leaving it in here for now. Refactoring this out will be easy and will go to a more appropriate place then.", "url": "https://github.com/Alluxio/alluxio/pull/11460#discussion_r430931513", "createdAt": "2020-05-27T08:05:29Z", "author": {"login": "bradyoo"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java", "diffHunk": "@@ -202,11 +220,87 @@ public synchronized void mergeThreadResult(MasterBenchTaskResult threadResult) {\n       }\n     }\n \n+    @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+    public synchronized void addAdditionalResult() throws IOException {\n+      if (mResult == null) {\n+        return;\n+      }\n+\n+      Map<String, PartialResultStatistic> methodNameToHistogram = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2MzE2OA=="}, "originalCommit": {"oid": "8ef78b1e87c0dbc313d348d476742606e09af06c"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1545, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}