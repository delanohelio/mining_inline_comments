{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0Njc1ODI5", "number": 11392, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxMToyMFrOD6PbxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzoyNDo1NlrOD7wGeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzk2ODY4OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/cli/CommandUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxMToyMFrOGR9yNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDo0MToyM1rOGT11MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MTI1Mg==", "bodyText": "This can be a Set as we mostly just put its results into a set", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421491252", "createdAt": "2020-05-07T13:11:20Z", "author": {"login": "jiacheliu3"}, "path": "core/common/src/main/java/alluxio/cli/CommandUtils.java", "diffHunk": "@@ -120,16 +117,16 @@ public static void checkNumOfArgsNoMoreThan(Command cmd, CommandLine cl, int n)\n    * @return list of the node names, null when file fails to read\n    */\n   @Nullable\n-  public static List<String> readNodeList(String confDir, String fileName) {\n+  public static Set<String> readNodeList(String confDir, String fileName) {\n     List<String> lines;\n     try {\n       lines = Files.readAllLines(Paths.get(confDir, fileName), StandardCharsets.UTF_8);\n     } catch (IOException e) {\n       System.err.format(\"Failed to read file %s/%s. Ignored.\", confDir, fileName);\n-      return new ArrayList<>();\n+      return new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4Njc4Mw==", "bodyText": "I don't quite understand the logic for this. What happens if two lines are the same? Does that matter? Should we throw an error or warn the user?", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421986783", "createdAt": "2020-05-08T07:21:56Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/cli/CommandUtils.java", "diffHunk": "@@ -120,16 +117,16 @@ public static void checkNumOfArgsNoMoreThan(Command cmd, CommandLine cl, int n)\n    * @return list of the node names, null when file fails to read\n    */\n   @Nullable\n-  public static List<String> readNodeList(String confDir, String fileName) {\n+  public static Set<String> readNodeList(String confDir, String fileName) {\n     List<String> lines;\n     try {\n       lines = Files.readAllLines(Paths.get(confDir, fileName), StandardCharsets.UTF_8);\n     } catch (IOException e) {\n       System.err.format(\"Failed to read file %s/%s. Ignored.\", confDir, fileName);\n-      return new ArrayList<>();\n+      return new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MTI1Mg=="}, "originalCommit": {"oid": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5MDYzNQ==", "bodyText": "Not at all. This method is only used to read conf/masters and conf/workers files. It's fine to put duplicated hostnames there, the duplicates are just ignored. I believe if you chase down the usage of this method the lists all end up being put into sets.", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422990635", "createdAt": "2020-05-11T12:03:53Z", "author": {"login": "jiacheliu3"}, "path": "core/common/src/main/java/alluxio/cli/CommandUtils.java", "diffHunk": "@@ -120,16 +117,16 @@ public static void checkNumOfArgsNoMoreThan(Command cmd, CommandLine cl, int n)\n    * @return list of the node names, null when file fails to read\n    */\n   @Nullable\n-  public static List<String> readNodeList(String confDir, String fileName) {\n+  public static Set<String> readNodeList(String confDir, String fileName) {\n     List<String> lines;\n     try {\n       lines = Files.readAllLines(Paths.get(confDir, fileName), StandardCharsets.UTF_8);\n     } catch (IOException e) {\n       System.err.format(\"Failed to read file %s/%s. Ignored.\", confDir, fileName);\n-      return new ArrayList<>();\n+      return new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MTI1Mg=="}, "originalCommit": {"oid": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyNjMxOQ==", "bodyText": "It would be nice to warn user of duplicates. We do iterate through all non-comment lines in some bash scripts.", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r423426319", "createdAt": "2020-05-12T02:29:24Z", "author": {"login": "bf8086"}, "path": "core/common/src/main/java/alluxio/cli/CommandUtils.java", "diffHunk": "@@ -120,16 +117,16 @@ public static void checkNumOfArgsNoMoreThan(Command cmd, CommandLine cl, int n)\n    * @return list of the node names, null when file fails to read\n    */\n   @Nullable\n-  public static List<String> readNodeList(String confDir, String fileName) {\n+  public static Set<String> readNodeList(String confDir, String fileName) {\n     List<String> lines;\n     try {\n       lines = Files.readAllLines(Paths.get(confDir, fileName), StandardCharsets.UTF_8);\n     } catch (IOException e) {\n       System.err.format(\"Failed to read file %s/%s. Ignored.\", confDir, fileName);\n-      return new ArrayList<>();\n+      return new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MTI1Mg=="}, "originalCommit": {"oid": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1ODA5Ng==", "bodyText": "Added printouts to System.out.", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r423458096", "createdAt": "2020-05-12T04:41:23Z", "author": {"login": "jiacheliu3"}, "path": "core/common/src/main/java/alluxio/cli/CommandUtils.java", "diffHunk": "@@ -120,16 +117,16 @@ public static void checkNumOfArgsNoMoreThan(Command cmd, CommandLine cl, int n)\n    * @return list of the node names, null when file fails to read\n    */\n   @Nullable\n-  public static List<String> readNodeList(String confDir, String fileName) {\n+  public static Set<String> readNodeList(String confDir, String fileName) {\n     List<String> lines;\n     try {\n       lines = Files.readAllLines(Paths.get(confDir, fileName), StandardCharsets.UTF_8);\n     } catch (IOException e) {\n       System.err.format(\"Failed to read file %s/%s. Ignored.\", confDir, fileName);\n-      return new ArrayList<>();\n+      return new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MTI1Mg=="}, "originalCommit": {"oid": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzk3MTA1OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxMTo1M1rOGR9zrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxMTo1M1rOGR9zrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MTYzMA==", "bodyText": "migrated from Utils class", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421491630", "createdAt": "2020-05-07T13:11:53Z", "author": {"login": "jiacheliu3"}, "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -810,5 +811,20 @@ private synchronized T firstTime() {\n     return result;\n   }\n \n+  /**\n+   * Validates whether a network address is reachable.\n+   *\n+   * @param hostname host name of the network address\n+   * @param port port of the network address\n+   * @return whether the network address is reachable\n+   */\n+  public static boolean isAddressReachable(String hostname, int port) {\n+    try (Socket socket = new Socket(hostname, port)) {\n+      return true;\n+    } catch (IOException e) {\n+      return false;\n+    }\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzk4MzkzOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxNDo1MFrOGR97dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxNDo1MFrOGR97dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MzYyMA==", "bodyText": "Migrated from Utils", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421493620", "createdAt": "2020-05-07T13:14:50Z", "author": {"login": "jiacheliu3"}, "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -625,4 +624,44 @@ public static String getSchemeAuthority(AlluxioConfiguration conf) {\n     return Lists.newArrayList(Splitter.on(delimiter).trimResults().omitEmptyStrings()\n         .split(value));\n   }\n+\n+  /**\n+   * Reads a list of nodes from given file name ignoring comments and empty lines.\n+   * Can be used to read conf/workers or conf/masters.\n+   * @param fileName name of a file that contains the list of the nodes\n+   * @return list of the node names, null when file fails to read\n+   */\n+  @Nullable\n+  private static Set<String> readNodeList(String fileName) {\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();\n+    String confDir = conf.get(PropertyKey.CONF_DIR);\n+    return CommandUtils.readNodeList(confDir, fileName);\n+  }\n+\n+  /**\n+   * Gets list of masters in conf directory.\n+   *\n+   * @return master hostnames\n+   */\n+  public static Set<String> getMasterHostnames() {\n+    return readNodeList(MASTERS);\n+  }\n+\n+  /**\n+   * Gets list of workers in conf directory.\n+   *\n+   * @return workers hostnames\n+   */\n+  public static Set<String> getWorkerHostnames() {\n+    return readNodeList(WORKERS);\n+  }\n+\n+  /**\n+   * Gets list of masters/workers in conf directory.\n+   *\n+   * @return server hostnames\n+   */\n+  public static Set<String> getServerHostnames() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzk4NTE5OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/ShellUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxNToxNFrOGR98Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxNToxNFrOGR98Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5Mzg0Nw==", "bodyText": "Migrated from ExtensionShellUtils", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421493847", "createdAt": "2020-05-07T13:15:14Z", "author": {"login": "jiacheliu3"}, "path": "core/common/src/main/java/alluxio/util/ShellUtils.java", "diffHunk": "@@ -134,6 +136,54 @@ public static UnixMountInfo parseMountInfo(String line) {\n     return builder.build();\n   }\n \n+  /**\n+   * Checks whether a path is the mounting point of a RAM disk volume.\n+   *\n+   * @param path  a string represents the path to be checked\n+   * @param fsTypes an array of strings represents expected file system type\n+   * @return true if the path is the mounting point of volume with one of the given fsTypes,\n+   *         false otherwise\n+   * @throws IOException if the function fails to get the mount information of the system\n+   */\n+  public static boolean isMountingPoint(String path, String[] fsTypes) throws IOException {\n+    List<UnixMountInfo> infoList = getUnixMountInfo();\n+    for (UnixMountInfo info : infoList) {\n+      Optional<String> mountPoint = info.getMountPoint();\n+      Optional<String> fsType = info.getFsType();\n+      if (mountPoint.isPresent() && mountPoint.get().equals(path) && fsType.isPresent()) {\n+        for (String expectedType : fsTypes) {\n+          if (fsType.get().equalsIgnoreCase(expectedType)) {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Checks whether an Alluxio service is running.\n+   *\n+   * @param className class name of the Alluxio service\n+   * @return whether the Alluxio service is running\n+   */\n+  public static boolean isAlluxioRunning(String className) {\n+    String[] command = {\"bash\", \"-c\",\n+            \"ps -Aww -o command | grep -i \\\"[j]ava\\\" | grep \" + className};\n+    try {\n+      Process p = Runtime.getRuntime().exec(command);\n+      try (InputStreamReader input = new InputStreamReader(p.getInputStream())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzk4ODExOnYy", "diffSide": "RIGHT", "path": "examples/src/main/java/alluxio/cli/ValidateEnv.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxNTo1M1rOGR9-Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxNTo1M1rOGR9-Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NDI4Nw==", "bodyText": "We just need one check that checks all nodes including masters and workers", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421494287", "createdAt": "2020-05-07T13:15:53Z", "author": {"login": "jiacheliu3"}, "path": "examples/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -122,12 +123,9 @@\n         new SecureHdfsValidationTask(\"worker\"), WORKER_TASKS);\n \n     // ssh validations\n-    registerTask(\"ssh.masters.reachable\",\n-        \"validate SSH port on masters are reachable\",\n-        new SshValidationTask(\"masters\"), COMMON_TASKS);\n-    registerTask(\"ssh.workers.reachable\",\n-        \"validate SSH port on workers are reachable\",\n-        new SshValidationTask(\"workers\"), COMMON_TASKS);\n+    registerTask(\"ssh.nodes.reachable\",\n+        \"validate SSH port on all Alluxio nodes are reachable\",\n+        new SshValidationTask(), COMMON_TASKS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzk5MTM5OnYy", "diffSide": "RIGHT", "path": "examples/src/main/java/alluxio/cli/ValidateEnv.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxNjozNVrOGR-ADg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxNjozNVrOGR-ADg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NDc5OA==", "bodyText": "Doesn't really matter if it's a list or set, we just for loop it.", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421494798", "createdAt": "2020-05-07T13:16:35Z", "author": {"login": "jiacheliu3"}, "path": "examples/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -188,7 +186,7 @@ private static ValidationTask registerTask(String name, String description, Vali\n     return task;\n   }\n \n-  private static boolean validateRemote(List<String> nodes, String target, String name,\n+  private static boolean validateRemote(Collection<String> nodes, String target, String name,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzk5OTk5OnYy", "diffSide": "RIGHT", "path": "examples/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxODo0MlrOGR-Frg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxODo0MlrOGR-Frg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NjIzOA==", "bodyText": "Use ShellUtils instead of a one-time util method", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421496238", "createdAt": "2020-05-07T13:18:42Z", "author": {"login": "jiacheliu3"}, "path": "examples/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java", "diffHunk": "@@ -104,15 +109,20 @@ private boolean validatePrincipalLogin() {\n     String realm = matchPrincipal.group(\"realm\");\n \n     // Login with principal and keytab\n-    String keytab = ServerConfiguration.get(mKeytabProperty);\n-    int exitVal =\n-        Utils.getResultFromProcess(new String[] {\"kinit\", \"-kt\", keytab, principal}).getExitValue();\n-    if (exitVal != 0) {\n-      System.err.format(\"Kerberos login failed for %s with keytab %s with exit value %d.%n\",\n-          principal, keytab, exitVal);\n-      System.err.format(\"Primary is %s, instance is %s and realm is %s.%n\",\n-          primary, instance, realm);\n-      return false;\n+    String keytab = conf.get(mKeytabProperty);\n+    CommandReturn cr;\n+    String[] command = new String[] {\"kinit\", \"-kt\", keytab, principal};\n+    try {\n+      cr = ShellUtils.execCommandWithOutput(command);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzE0MzAzOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzoyMjozNVrOGScCyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjozNDo1N1rOGTaSNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NzAxNw==", "bodyText": "does this make a connection? how do we know if it is reachable from this code?", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421987017", "createdAt": "2020-05-08T07:22:35Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -810,5 +811,20 @@ private synchronized T firstTime() {\n     return result;\n   }\n \n+  /**\n+   * Validates whether a network address is reachable.\n+   *\n+   * @param hostname host name of the network address\n+   * @param port port of the network address\n+   * @return whether the network address is reachable\n+   */\n+  public static boolean isAddressReachable(String hostname, int port) {\n+    try (Socket socket = new Socket(hostname, port)) {\n+      return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba32bf0b23596bf983f4bf38fd5fe9d1597e590"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwNjc3NA==", "bodyText": "AFAIK this makes the connection in constructor and throws an IOException if it fails to do so. See example https://www.geeksforgeeks.org/socket-programming-in-java/", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r423006774", "createdAt": "2020-05-11T12:34:57Z", "author": {"login": "jiacheliu3"}, "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -810,5 +811,20 @@ private synchronized T firstTime() {\n     return result;\n   }\n \n+  /**\n+   * Validates whether a network address is reachable.\n+   *\n+   * @param hostname host name of the network address\n+   * @param port port of the network address\n+   * @return whether the network address is reachable\n+   */\n+  public static boolean isAddressReachable(String hostname, int port) {\n+    try (Socket socket = new Socket(hostname, port)) {\n+      return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NzAxNw=="}, "originalCommit": {"oid": "1ba32bf0b23596bf983f4bf38fd5fe9d1597e590"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjAxMDA2OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/ShellUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoxODo0OFrOGTGX6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjowNToxOVrOGTZWAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MDU1Mw==", "bodyText": "is this code also copied or freshly-written?", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422680553", "createdAt": "2020-05-10T18:18:48Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/util/ShellUtils.java", "diffHunk": "@@ -134,6 +136,54 @@ public static UnixMountInfo parseMountInfo(String line) {\n     return builder.build();\n   }\n \n+  /**\n+   * Checks whether a path is the mounting point of a RAM disk volume.\n+   *\n+   * @param path  a string represents the path to be checked\n+   * @param fsTypes an array of strings represents expected file system type\n+   * @return true if the path is the mounting point of volume with one of the given fsTypes,\n+   *         false otherwise\n+   * @throws IOException if the function fails to get the mount information of the system\n+   */\n+  public static boolean isMountingPoint(String path, String[] fsTypes) throws IOException {\n+    List<UnixMountInfo> infoList = getUnixMountInfo();\n+    for (UnixMountInfo info : infoList) {\n+      Optional<String> mountPoint = info.getMountPoint();\n+      Optional<String> fsType = info.getFsType();\n+      if (mountPoint.isPresent() && mountPoint.get().equals(path) && fsType.isPresent()) {\n+        for (String expectedType : fsTypes) {\n+          if (fsType.get().equalsIgnoreCase(expectedType)) {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Checks whether an Alluxio service is running.\n+   *\n+   * @param className class name of the Alluxio service\n+   * @return whether the Alluxio service is running\n+   */\n+  public static boolean isAlluxioRunning(String className) {\n+    String[] command = {\"bash\", \"-c\",\n+        \"ps -Aww -o command | grep -i \\\"[j]ava\\\" | grep \" + className};\n+    try {\n+      Process p = Runtime.getRuntime().exec(command);\n+      try (InputStreamReader input = new InputStreamReader(p.getInputStream())) {\n+        if (input.read() >= 0) {\n+          return true;\n+        }\n+      }\n+      return false;\n+    } catch (IOException e) {\n+      System.err.format(\"Unable to check Alluxio status: %s.%n\", e.getMessage());\n+      return false;\n+    }\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5MTM2MA==", "bodyText": "They are copied from the old Utils.java class, which is removed in this change.", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422991360", "createdAt": "2020-05-11T12:05:19Z", "author": {"login": "jiacheliu3"}, "path": "core/common/src/main/java/alluxio/util/ShellUtils.java", "diffHunk": "@@ -134,6 +136,54 @@ public static UnixMountInfo parseMountInfo(String line) {\n     return builder.build();\n   }\n \n+  /**\n+   * Checks whether a path is the mounting point of a RAM disk volume.\n+   *\n+   * @param path  a string represents the path to be checked\n+   * @param fsTypes an array of strings represents expected file system type\n+   * @return true if the path is the mounting point of volume with one of the given fsTypes,\n+   *         false otherwise\n+   * @throws IOException if the function fails to get the mount information of the system\n+   */\n+  public static boolean isMountingPoint(String path, String[] fsTypes) throws IOException {\n+    List<UnixMountInfo> infoList = getUnixMountInfo();\n+    for (UnixMountInfo info : infoList) {\n+      Optional<String> mountPoint = info.getMountPoint();\n+      Optional<String> fsType = info.getFsType();\n+      if (mountPoint.isPresent() && mountPoint.get().equals(path) && fsType.isPresent()) {\n+        for (String expectedType : fsTypes) {\n+          if (fsType.get().equalsIgnoreCase(expectedType)) {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Checks whether an Alluxio service is running.\n+   *\n+   * @param className class name of the Alluxio service\n+   * @return whether the Alluxio service is running\n+   */\n+  public static boolean isAlluxioRunning(String className) {\n+    String[] command = {\"bash\", \"-c\",\n+        \"ps -Aww -o command | grep -i \\\"[j]ava\\\" | grep \" + className};\n+    try {\n+      Process p = Runtime.getRuntime().exec(command);\n+      try (InputStreamReader input = new InputStreamReader(p.getInputStream())) {\n+        if (input.read() >= 0) {\n+          return true;\n+        }\n+      }\n+      return false;\n+    } catch (IOException e) {\n+      System.err.format(\"Unable to check Alluxio status: %s.%n\", e.getMessage());\n+      return false;\n+    }\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MDU1Mw=="}, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjAxMjQ1OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyMTo1MlrOGTGZJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjoxMDo0N1rOGTZgZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MDg2OQ==", "bodyText": "do we gain anything by combining these two?", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422680869", "createdAt": "2020-05-10T18:21:52Z", "author": {"login": "ZacBlanco"}, "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -122,12 +123,9 @@\n         new SecureHdfsValidationTask(\"worker\"), WORKER_TASKS);\n \n     // ssh validations\n-    registerTask(\"ssh.masters.reachable\",\n-        \"validate SSH port on masters are reachable\",\n-        new SshValidationTask(\"masters\"), COMMON_TASKS);\n-    registerTask(\"ssh.workers.reachable\",\n-        \"validate SSH port on workers are reachable\",\n-        new SshValidationTask(\"workers\"), COMMON_TASKS);\n+    registerTask(\"ssh.nodes.reachable\",\n+        \"validate SSH port on all Alluxio nodes are reachable\",\n+        new SshValidationTask(), COMMON_TASKS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5NDAyMQ==", "bodyText": "To me the gain is we get rid of some hard-coded \"masters\" and \"workers\".", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422994021", "createdAt": "2020-05-11T12:10:47Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -122,12 +123,9 @@\n         new SecureHdfsValidationTask(\"worker\"), WORKER_TASKS);\n \n     // ssh validations\n-    registerTask(\"ssh.masters.reachable\",\n-        \"validate SSH port on masters are reachable\",\n-        new SshValidationTask(\"masters\"), COMMON_TASKS);\n-    registerTask(\"ssh.workers.reachable\",\n-        \"validate SSH port on workers are reachable\",\n-        new SshValidationTask(\"workers\"), COMMON_TASKS);\n+    registerTask(\"ssh.nodes.reachable\",\n+        \"validate SSH port on all Alluxio nodes are reachable\",\n+        new SshValidationTask(), COMMON_TASKS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MDg2OQ=="}, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjAxNDQ0OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/validation/HdfsValidationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyNDowMVrOGTGaIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyNDowMVrOGTGaIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTEyMg==", "bodyText": "InstancedConfiguration.defaults() could be expensive. I recommend creating the configuration object on JVM startup and then passing that into this function.", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681122", "createdAt": "2020-05-10T18:24:01Z", "author": {"login": "ZacBlanco"}, "path": "shell/src/main/java/alluxio/cli/validation/HdfsValidationTask.java", "diffHunk": "@@ -58,8 +58,8 @@ public TaskResult validate(Map<String, String> optionsMap) {\n   }\n \n   protected boolean shouldSkip() {\n-    String scheme = new AlluxioURI(ServerConfiguration.get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS))\n-        .getScheme();\n+    String scheme = new AlluxioURI(InstancedConfiguration.defaults()\n+                      .get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS)).getScheme();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjAxNDk0OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/validation/HdfsValidationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyNDo1M1rOGTGaXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyNDo1M1rOGTGaXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTE4MA==", "bodyText": "same here. Create a single AlluxioConfiguration object and pass the references around.\nAlluxioConfiguration should be used rather than InstancedConfiguration because `InstancedConfiguration is not  immutable.", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681180", "createdAt": "2020-05-10T18:24:53Z", "author": {"login": "ZacBlanco"}, "path": "shell/src/main/java/alluxio/cli/validation/HdfsValidationTask.java", "diffHunk": "@@ -85,7 +85,7 @@ private boolean validateHdfsSettingParity(Map<String, String> optionsMap) {\n     // If ServerConfiguration does not contain the key, then a {@link RuntimeException} will be\n     // thrown before calling the {@link String#split} method.\n     String[] clientHadoopConfFilePaths =\n-        ServerConfiguration.get(PropertyKey.UNDERFS_HDFS_CONFIGURATION).split(\":\");\n+        InstancedConfiguration.defaults().get(PropertyKey.UNDERFS_HDFS_CONFIGURATION).split(\":\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjAxNzIxOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/validation/PortAvailabilityValidationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyNzoyNlrOGTGbfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyNzoyNlrOGTGbfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTQ3MQ==", "bodyText": "same again with configuration", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681471", "createdAt": "2020-05-10T18:27:26Z", "author": {"login": "ZacBlanco"}, "path": "shell/src/main/java/alluxio/cli/validation/PortAvailabilityValidationTask.java", "diffHunk": "@@ -39,11 +40,11 @@ public PortAvailabilityValidationTask(ServiceType serviceType, String owner) {\n \n   @Override\n   public TaskResult validate(Map<String, String> optionsMap) {\n-    if (Utils.isAlluxioRunning(mOwner)) {\n+    if (ShellUtils.isAlluxioRunning(mOwner)) {\n       System.out.format(\"%s is already running. Skip validation.%n\", mOwner);\n       return TaskResult.SKIPPED;\n     }\n-    int port = NetworkAddressUtils.getPort(mServiceType, ServerConfiguration.global());\n+    int port = NetworkAddressUtils.getPort(mServiceType, InstancedConfiguration.defaults());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjAxNzUzOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/validation/RamDiskMountPrivilegeValidationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyNzo0MFrOGTGbog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyNzo0MFrOGTGbog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTUwNg==", "bodyText": "same again, you should pass a conf object", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681506", "createdAt": "2020-05-10T18:27:40Z", "author": {"login": "ZacBlanco"}, "path": "shell/src/main/java/alluxio/cli/validation/RamDiskMountPrivilegeValidationTask.java", "diffHunk": "@@ -35,8 +36,9 @@ public RamDiskMountPrivilegeValidationTask() {\n   @Override\n   public TaskResult validate(Map<String, String> optionsMap)\n       throws InterruptedException {\n-    String path = ServerConfiguration.get(PropertyKey.WORKER_TIERED_STORE_LEVEL0_DIRS_PATH);\n-    String alias = ServerConfiguration.get(PropertyKey.WORKER_TIERED_STORE_LEVEL0_ALIAS);\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjAxNzU4OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyNzo0OFrOGTGbpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyNzo0OFrOGTGbpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTUxMQ==", "bodyText": "pass in conf object", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681511", "createdAt": "2020-05-10T18:27:48Z", "author": {"login": "ZacBlanco"}, "path": "shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java", "diffHunk": "@@ -80,8 +83,9 @@ protected boolean shouldSkip() {\n       return true;\n     }\n     String principal = null;\n-    if (ServerConfiguration.isSet(mPrincipalProperty)) {\n-      principal = ServerConfiguration.get(mPrincipalProperty);\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjAxNzY1OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyNzo1NFrOGTGbrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyNzo1NFrOGTGbrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTUxOA==", "bodyText": "pass in conf object", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681518", "createdAt": "2020-05-10T18:27:54Z", "author": {"login": "ZacBlanco"}, "path": "shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java", "diffHunk": "@@ -93,7 +97,8 @@ protected boolean shouldSkip() {\n \n   private boolean validatePrincipalLogin() {\n     // Check whether can login with specified principal and keytab\n-    String principal = ServerConfiguration.get(mPrincipalProperty);\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjAxODA3OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyODowOVrOGTGb3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyODowOVrOGTGb3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTU2Ng==", "bodyText": "pass in conf object", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681566", "createdAt": "2020-05-10T18:28:09Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -630,4 +635,44 @@ public static String getSchemeAuthority(AlluxioConfiguration conf) {\n     return Lists.newArrayList(Splitter.on(delimiter).trimResults().omitEmptyStrings()\n         .split(value));\n   }\n+\n+  /**\n+   * Reads a list of nodes from given file name ignoring comments and empty lines.\n+   * Can be used to read conf/workers or conf/masters.\n+   * @param fileName name of a file that contains the list of the nodes\n+   * @return list of the node names, null when file fails to read\n+   */\n+  @Nullable\n+  private static Set<String> readNodeList(String fileName) {\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjAxODE1OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyODoxOVrOGTGb5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjo1MDoyMlrOGTazsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTU3NQ==", "bodyText": "pass in conf object", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681575", "createdAt": "2020-05-10T18:28:19Z", "author": {"login": "ZacBlanco"}, "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -206,14 +204,14 @@ private static boolean validateRemote(List<String> nodes, String target, String\n   private static boolean validateRemote(String node, String target, String name, CommandLine cmd)\n       throws InterruptedException {\n     System.out.format(\"Validating %s environment on %s...%n\", target, node);\n-    if (!Utils.isAddressReachable(node, 22)) {\n+    if (!CommonUtils.isAddressReachable(node, 22)) {\n       System.err.format(\"Unable to reach ssh port 22 on node %s.%n\", node);\n       return false;\n     }\n \n     // args is not null.\n     String argStr = String.join(\" \", cmd.getArgs());\n-    String homeDir = ServerConfiguration.get(PropertyKey.HOME);\n+    String homeDir = InstancedConfiguration.defaults().get(PropertyKey.HOME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxNTM0NA==", "bodyText": "This class is executed via main() so we have to instantiate conf. Saved the InstancedConf in an AlluxioConf in a field of this class.", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r423015344", "createdAt": "2020-05-11T12:50:22Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -206,14 +204,14 @@ private static boolean validateRemote(List<String> nodes, String target, String\n   private static boolean validateRemote(String node, String target, String name, CommandLine cmd)\n       throws InterruptedException {\n     System.out.format(\"Validating %s environment on %s...%n\", target, node);\n-    if (!Utils.isAddressReachable(node, 22)) {\n+    if (!CommonUtils.isAddressReachable(node, 22)) {\n       System.err.format(\"Unable to reach ssh port 22 on node %s.%n\", node);\n       return false;\n     }\n \n     // args is not null.\n     String argStr = String.join(\" \", cmd.getArgs());\n-    String homeDir = ServerConfiguration.get(PropertyKey.HOME);\n+    String homeDir = InstancedConfiguration.defaults().get(PropertyKey.HOME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTU3NQ=="}, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjAxODI4OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/validation/ClusterConfConsistencyValidationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyODoyN1rOGTGb9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyODoyN1rOGTGb9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTU4OQ==", "bodyText": "pass in conf object", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681589", "createdAt": "2020-05-10T18:28:27Z", "author": {"login": "ZacBlanco"}, "path": "shell/src/main/java/alluxio/cli/validation/ClusterConfConsistencyValidationTask.java", "diffHunk": "@@ -128,7 +129,7 @@ public TaskResult validate(Map<String, String> optionMap) throws InterruptedExce\n   @Nullable\n   private Properties getNodeConf(String node) {\n     try {\n-      String homeDir = ServerConfiguration.get(PropertyKey.HOME);\n+      String homeDir = InstancedConfiguration.defaults().get(PropertyKey.HOME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjAxODQ3OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/validation/StorageSpaceValidationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyODozOVrOGTGcCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyODozOVrOGTGcCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTYxMQ==", "bodyText": "pass in conf object", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681611", "createdAt": "2020-05-10T18:28:39Z", "author": {"login": "ZacBlanco"}, "path": "shell/src/main/java/alluxio/cli/validation/StorageSpaceValidationTask.java", "diffHunk": "@@ -39,21 +40,22 @@ public StorageSpaceValidationTask() {\n \n   @Override\n   public TaskResult validate(Map<String, String> optionsMap) {\n-    int numLevel = ServerConfiguration.getInt(PropertyKey.WORKER_TIERED_STORE_LEVELS);\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjAxODgyOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/validation/UfsDirectoryValidationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyOTowMFrOGTGcMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyOTowMFrOGTGcMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTY0OA==", "bodyText": "pass in conf object", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681648", "createdAt": "2020-05-10T18:29:00Z", "author": {"login": "ZacBlanco"}, "path": "shell/src/main/java/alluxio/cli/validation/UfsDirectoryValidationTask.java", "diffHunk": "@@ -31,8 +31,9 @@\n    * for validating root under file system.\n    */\n   public UfsDirectoryValidationTask() {\n-    mUfs = UnderFileSystem.Factory.createForRoot(ServerConfiguration.global());\n-    mPath = ServerConfiguration.get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS);\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjAxODk4OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/validation/UfsSuperUserValidationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyOTowOFrOGTGcQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODoyOTowOFrOGTGcQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTY2NQ==", "bodyText": "pass in conf object", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681665", "createdAt": "2020-05-10T18:29:08Z", "author": {"login": "ZacBlanco"}, "path": "shell/src/main/java/alluxio/cli/validation/UfsSuperUserValidationTask.java", "diffHunk": "@@ -34,8 +34,9 @@\n    * for validating root under file system.\n    */\n   public UfsSuperUserValidationTask() {\n-    mUfs = UnderFileSystem.Factory.createForRoot(ServerConfiguration.global());\n-    mPath = ServerConfiguration.get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS);\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjAyMDcwOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODozMToyNFrOGTGdHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjoxMzozOVrOGTZl6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTg4NA==", "bodyText": "will this add spaces between the command? or does it print something like {\"arg1\", \"arg2\", ...}", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681884", "createdAt": "2020-05-10T18:31:24Z", "author": {"login": "ZacBlanco"}, "path": "shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java", "diffHunk": "@@ -104,15 +109,20 @@ private boolean validatePrincipalLogin() {\n     String realm = matchPrincipal.group(\"realm\");\n \n     // Login with principal and keytab\n-    String keytab = ServerConfiguration.get(mKeytabProperty);\n-    int exitVal =\n-        Utils.getResultFromProcess(new String[] {\"kinit\", \"-kt\", keytab, principal}).getExitValue();\n-    if (exitVal != 0) {\n-      System.err.format(\"Kerberos login failed for %s with keytab %s with exit value %d.%n\",\n-          principal, keytab, exitVal);\n-      System.err.format(\"Primary is %s, instance is %s and realm is %s.%n\",\n-          primary, instance, realm);\n-      return false;\n+    String keytab = conf.get(mKeytabProperty);\n+    CommandReturn cr;\n+    String[] command = new String[] {\"kinit\", \"-kt\", keytab, principal};\n+    try {\n+      cr = ShellUtils.execCommandWithOutput(command);\n+      if (cr.getExitCode() != 0) {\n+        System.err.format(\"Kerberos login failed for %s with keytab %s with exit value %d.%n\",\n+                principal, keytab, cr.getExitCode());\n+        System.err.format(\"Primary is %s, instance is %s and realm is %s.%n\",\n+                primary, instance, realm);\n+        return false;\n+      }\n+    } catch (IOException e) {\n+      System.err.format(\"Failed to execute %s with exception: %s%n\", Arrays.toString(command), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5NTQzMg==", "bodyText": "It does the latter.", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422995432", "createdAt": "2020-05-11T12:13:39Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java", "diffHunk": "@@ -104,15 +109,20 @@ private boolean validatePrincipalLogin() {\n     String realm = matchPrincipal.group(\"realm\");\n \n     // Login with principal and keytab\n-    String keytab = ServerConfiguration.get(mKeytabProperty);\n-    int exitVal =\n-        Utils.getResultFromProcess(new String[] {\"kinit\", \"-kt\", keytab, principal}).getExitValue();\n-    if (exitVal != 0) {\n-      System.err.format(\"Kerberos login failed for %s with keytab %s with exit value %d.%n\",\n-          principal, keytab, exitVal);\n-      System.err.format(\"Primary is %s, instance is %s and realm is %s.%n\",\n-          primary, instance, realm);\n-      return false;\n+    String keytab = conf.get(mKeytabProperty);\n+    CommandReturn cr;\n+    String[] command = new String[] {\"kinit\", \"-kt\", keytab, principal};\n+    try {\n+      cr = ShellUtils.execCommandWithOutput(command);\n+      if (cr.getExitCode() != 0) {\n+        System.err.format(\"Kerberos login failed for %s with keytab %s with exit value %d.%n\",\n+                principal, keytab, cr.getExitCode());\n+        System.err.format(\"Primary is %s, instance is %s and realm is %s.%n\",\n+                primary, instance, realm);\n+        return false;\n+      }\n+    } catch (IOException e) {\n+      System.err.format(\"Failed to execute %s with exception: %s%n\", Arrays.toString(command), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTg4NA=="}, "originalCommit": {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjgzMzIwOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/cli/CommandUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjoyNjowN1rOGTz2bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjoyNjowN1rOGTz2bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyNTY0NQ==", "bodyText": "(nit) sort import", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r423425645", "createdAt": "2020-05-12T02:26:07Z", "author": {"login": "bf8086"}, "path": "core/common/src/main/java/alluxio/cli/CommandUtils.java", "diffHunk": "@@ -23,10 +23,11 @@\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.HashSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b054a4107412055648202c31a738529a1ea18aed"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjg0NTkxOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjozNToyM1rOGTz-mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjozNToyM1rOGTz-mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyNzczOA==", "bodyText": "(nit) sort import", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r423427738", "createdAt": "2020-05-12T02:35:23Z", "author": {"login": "bf8086"}, "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -11,22 +11,24 @@\n \n package alluxio.cli;\n \n-import alluxio.conf.ServerConfiguration;\n import alluxio.Constants;\n-import alluxio.conf.PropertyKey;\n+import alluxio.cli.validation.ValidationTask;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b054a4107412055648202c31a738529a1ea18aed"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTgwNjY1OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/cli/CommandUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzoyNDo1NlrOGURM6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzoxMzo1NlrOGUgArg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwNjUzOQ==", "bodyText": "Would add() return true when the set does not contain the element yet?", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r423906539", "createdAt": "2020-05-12T17:24:56Z", "author": {"login": "bf8086"}, "path": "core/common/src/main/java/alluxio/cli/CommandUtils.java", "diffHunk": "@@ -120,22 +124,25 @@ public static void checkNumOfArgsNoMoreThan(Command cmd, CommandLine cl, int n)\n    * @return list of the node names, null when file fails to read\n    */\n   @Nullable\n-  public static List<String> readNodeList(String confDir, String fileName) {\n+  public static Set<String> readNodeList(String confDir, String fileName) {\n     List<String> lines;\n+    String path = Paths.get(confDir, fileName).normalize().toString();\n     try {\n       lines = Files.readAllLines(Paths.get(confDir, fileName), StandardCharsets.UTF_8);\n     } catch (IOException e) {\n-      System.err.format(\"Failed to read file %s/%s. Ignored.\", confDir, fileName);\n-      return new ArrayList<>();\n+      System.err.format(\"Failed to read file %s/%s. Ignored.%n\", confDir, fileName);\n+      return new HashSet<>();\n     }\n \n-    List<String> nodes = new ArrayList<>();\n+    Set<String> nodes = new HashSet<>();\n     for (String line : lines) {\n       String node = line.trim();\n       if (node.startsWith(\"#\") || node.length() == 0) {\n         continue;\n       }\n-      nodes.add(node);\n+      if (nodes.add(node)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f757810dc2d5a8a852e11b48094ea8fb743b8b2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0OTE2Ng==", "bodyText": "My bad. I meant if(!nodes.add(node)) where nodes.add(node) returns false if it's a duplicate", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r424149166", "createdAt": "2020-05-13T03:13:56Z", "author": {"login": "jiacheliu3"}, "path": "core/common/src/main/java/alluxio/cli/CommandUtils.java", "diffHunk": "@@ -120,22 +124,25 @@ public static void checkNumOfArgsNoMoreThan(Command cmd, CommandLine cl, int n)\n    * @return list of the node names, null when file fails to read\n    */\n   @Nullable\n-  public static List<String> readNodeList(String confDir, String fileName) {\n+  public static Set<String> readNodeList(String confDir, String fileName) {\n     List<String> lines;\n+    String path = Paths.get(confDir, fileName).normalize().toString();\n     try {\n       lines = Files.readAllLines(Paths.get(confDir, fileName), StandardCharsets.UTF_8);\n     } catch (IOException e) {\n-      System.err.format(\"Failed to read file %s/%s. Ignored.\", confDir, fileName);\n-      return new ArrayList<>();\n+      System.err.format(\"Failed to read file %s/%s. Ignored.%n\", confDir, fileName);\n+      return new HashSet<>();\n     }\n \n-    List<String> nodes = new ArrayList<>();\n+    Set<String> nodes = new HashSet<>();\n     for (String line : lines) {\n       String node = line.trim();\n       if (node.startsWith(\"#\") || node.length() == 0) {\n         continue;\n       }\n-      nodes.add(node);\n+      if (nodes.add(node)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwNjUzOQ=="}, "originalCommit": {"oid": "8f757810dc2d5a8a852e11b48094ea8fb743b8b2"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1710, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}