{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMTM0MjE3", "number": 10719, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjo0NzozMFrODXAY_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzo1OTozNVrODXBLOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDUwMjM2OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjo0NzozMFrOFcFr9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzoxNDozNFrOFcGMxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5NzYyMw==", "bodyText": "update comment about the resource", "url": "https://github.com/Alluxio/alluxio/pull/10719#discussion_r364997623", "createdAt": "2020-01-09T22:47:30Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -471,25 +471,33 @@ public void close() {\n    * @param workerNetAddress the network address of the channel\n    * @return the acquired block worker", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "626fdf34ce3d945ab2e6b467588b434db0ac7419"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwNjAyMQ==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/10719#discussion_r365006021", "createdAt": "2020-01-09T23:14:34Z", "author": {"login": "ZacBlanco"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -471,25 +471,33 @@ public void close() {\n    * @param workerNetAddress the network address of the channel\n    * @return the acquired block worker", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5NzYyMw=="}, "originalCommit": {"oid": "626fdf34ce3d945ab2e6b467588b434db0ac7419"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDUxNDQzOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjo1MzowOVrOFcFzcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzoxNDozOVrOFcGM5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5OTUzOQ==", "bodyText": "Hrmmm, can we avoid explicitly defining it, and just define a local final var for it? It will get captured like that right?", "url": "https://github.com/Alluxio/alluxio/pull/10719#discussion_r364999539", "createdAt": "2020-01-09T22:53:09Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -471,25 +471,33 @@ public void close() {\n    * @param workerNetAddress the network address of the channel\n    * @return the acquired block worker\n    */\n-  public BlockWorkerClient acquireBlockWorkerClient(final WorkerNetAddress workerNetAddress)\n+  public CloseableResource<BlockWorkerClient> acquireBlockWorkerClient(\n+      final WorkerNetAddress workerNetAddress)\n       throws IOException {\n     try (ReinitBlockerResource r = blockReinit()) {\n-      return acquireBlockWorkerClientInternal(workerNetAddress, getClientContext().getSubject());\n+      return acquireBlockWorkerClientInternal(workerNetAddress, getClientContext());\n     }\n   }\n \n-  private BlockWorkerClient acquireBlockWorkerClientInternal(\n-      final WorkerNetAddress workerNetAddress, final Subject subject) throws IOException {\n-    SocketAddress address =\n-        NetworkAddressUtils.getDataPortSocketAddress(workerNetAddress, getClusterConf());\n+  private CloseableResource<BlockWorkerClient> acquireBlockWorkerClientInternal(\n+      final WorkerNetAddress workerNetAddress, final ClientContext context) throws IOException {\n+    SocketAddress address = NetworkAddressUtils\n+        .getDataPortSocketAddress(workerNetAddress, context.getClusterConf());\n     GrpcServerAddress serverAddress = GrpcServerAddress.create(workerNetAddress.getHost(), address);\n-    ClientPoolKey key = new ClientPoolKey(address,\n-        AuthenticationUserUtils.getImpersonationUser(subject, getClusterConf()));\n-    return mBlockWorkerClientPool.computeIfAbsent(key,\n-        k -> new BlockWorkerClientPool(subject, serverAddress,\n-            getClusterConf().getInt(PropertyKey.USER_BLOCK_WORKER_CLIENT_POOL_SIZE),\n-            getClusterConf(), mWorkerGroup))\n-        .acquire();\n+    ClientPoolKey key = new ClientPoolKey(address, AuthenticationUserUtils\n+            .getImpersonationUser(context.getSubject(), context.getClusterConf()));\n+    return new CloseableResource<BlockWorkerClient>(mBlockWorkerClientPool.computeIfAbsent(key,\n+        k -> new BlockWorkerClientPool(context.getSubject(), serverAddress,\n+            context.getClusterConf().getInt(PropertyKey.USER_BLOCK_WORKER_CLIENT_POOL_SIZE),\n+            context.getClusterConf(), mWorkerGroup))\n+        .acquire()) {\n+      // Save the reference to the original pool map.\n+      ConcurrentHashMap<ClientPoolKey, BlockWorkerClientPool> mPoolMap = mBlockWorkerClientPool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "626fdf34ce3d945ab2e6b467588b434db0ac7419"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwNjA1Mw==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/10719#discussion_r365006053", "createdAt": "2020-01-09T23:14:39Z", "author": {"login": "ZacBlanco"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -471,25 +471,33 @@ public void close() {\n    * @param workerNetAddress the network address of the channel\n    * @return the acquired block worker\n    */\n-  public BlockWorkerClient acquireBlockWorkerClient(final WorkerNetAddress workerNetAddress)\n+  public CloseableResource<BlockWorkerClient> acquireBlockWorkerClient(\n+      final WorkerNetAddress workerNetAddress)\n       throws IOException {\n     try (ReinitBlockerResource r = blockReinit()) {\n-      return acquireBlockWorkerClientInternal(workerNetAddress, getClientContext().getSubject());\n+      return acquireBlockWorkerClientInternal(workerNetAddress, getClientContext());\n     }\n   }\n \n-  private BlockWorkerClient acquireBlockWorkerClientInternal(\n-      final WorkerNetAddress workerNetAddress, final Subject subject) throws IOException {\n-    SocketAddress address =\n-        NetworkAddressUtils.getDataPortSocketAddress(workerNetAddress, getClusterConf());\n+  private CloseableResource<BlockWorkerClient> acquireBlockWorkerClientInternal(\n+      final WorkerNetAddress workerNetAddress, final ClientContext context) throws IOException {\n+    SocketAddress address = NetworkAddressUtils\n+        .getDataPortSocketAddress(workerNetAddress, context.getClusterConf());\n     GrpcServerAddress serverAddress = GrpcServerAddress.create(workerNetAddress.getHost(), address);\n-    ClientPoolKey key = new ClientPoolKey(address,\n-        AuthenticationUserUtils.getImpersonationUser(subject, getClusterConf()));\n-    return mBlockWorkerClientPool.computeIfAbsent(key,\n-        k -> new BlockWorkerClientPool(subject, serverAddress,\n-            getClusterConf().getInt(PropertyKey.USER_BLOCK_WORKER_CLIENT_POOL_SIZE),\n-            getClusterConf(), mWorkerGroup))\n-        .acquire();\n+    ClientPoolKey key = new ClientPoolKey(address, AuthenticationUserUtils\n+            .getImpersonationUser(context.getSubject(), context.getClusterConf()));\n+    return new CloseableResource<BlockWorkerClient>(mBlockWorkerClientPool.computeIfAbsent(key,\n+        k -> new BlockWorkerClientPool(context.getSubject(), serverAddress,\n+            context.getClusterConf().getInt(PropertyKey.USER_BLOCK_WORKER_CLIENT_POOL_SIZE),\n+            context.getClusterConf(), mWorkerGroup))\n+        .acquire()) {\n+      // Save the reference to the original pool map.\n+      ConcurrentHashMap<ClientPoolKey, BlockWorkerClientPool> mPoolMap = mBlockWorkerClientPool;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5OTUzOQ=="}, "originalCommit": {"oid": "626fdf34ce3d945ab2e6b467588b434db0ac7419"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDYzMDk5OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzo1OTozNVrOFcG6fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzo1OTozNVrOFcG6fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAxNzcyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return new CloseableResource<BlockWorkerClient>(mBlockWorkerClientPool.computeIfAbsent(key,\n          \n          \n            \n                return new CloseableResource<BlockWorkerClient>(poolMap.computeIfAbsent(key,", "url": "https://github.com/Alluxio/alluxio/pull/10719#discussion_r365017724", "createdAt": "2020-01-09T23:59:35Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -476,27 +473,36 @@ public void close() {\n    * create a new one.\n    *\n    * @param workerNetAddress the network address of the channel\n-   * @return the acquired block worker\n+   * @return the acquired block worker resource\n    */\n-  public BlockWorkerClient acquireBlockWorkerClient(final WorkerNetAddress workerNetAddress)\n+  public CloseableResource<BlockWorkerClient> acquireBlockWorkerClient(\n+      final WorkerNetAddress workerNetAddress)\n       throws IOException {\n     try (ReinitBlockerResource r = blockReinit()) {\n-      return acquireBlockWorkerClientInternal(workerNetAddress, getClientContext().getSubject());\n+      return acquireBlockWorkerClientInternal(workerNetAddress, getClientContext());\n     }\n   }\n \n-  private BlockWorkerClient acquireBlockWorkerClientInternal(\n-      final WorkerNetAddress workerNetAddress, final Subject subject) throws IOException {\n-    SocketAddress address =\n-        NetworkAddressUtils.getDataPortSocketAddress(workerNetAddress, getClusterConf());\n+  private CloseableResource<BlockWorkerClient> acquireBlockWorkerClientInternal(\n+      final WorkerNetAddress workerNetAddress, final ClientContext context) throws IOException {\n+    SocketAddress address = NetworkAddressUtils\n+        .getDataPortSocketAddress(workerNetAddress, context.getClusterConf());\n     GrpcServerAddress serverAddress = GrpcServerAddress.create(workerNetAddress.getHost(), address);\n-    ClientPoolKey key = new ClientPoolKey(address,\n-        AuthenticationUserUtils.getImpersonationUser(subject, getClusterConf()));\n-    return mBlockWorkerClientPool.computeIfAbsent(key,\n-        k -> new BlockWorkerClientPool(subject, serverAddress,\n-            getClusterConf().getInt(PropertyKey.USER_BLOCK_WORKER_CLIENT_POOL_SIZE),\n-            getClusterConf(), mWorkerGroup))\n-        .acquire();\n+    ClientPoolKey key = new ClientPoolKey(address, AuthenticationUserUtils\n+            .getImpersonationUser(context.getSubject(), context.getClusterConf()));\n+    final ConcurrentHashMap<ClientPoolKey, BlockWorkerClientPool> poolMap =\n+        mBlockWorkerClientPool;\n+    return new CloseableResource<BlockWorkerClient>(mBlockWorkerClientPool.computeIfAbsent(key,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3f1eca320dfaeff5e6e282fe66741d33e89b742"}, "originalPosition": 146}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2212, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}