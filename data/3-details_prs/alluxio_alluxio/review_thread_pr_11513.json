{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MTUyMzMy", "number": 11513, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMTo0MDo1NlrOECYFWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjo1OToyNVrOEEYkMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTI3MTk0OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMTo0MDo1NlrOGey8jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjo0MTo1OFrOGgCPgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NTE2NA==", "bodyText": "How is this different from the check below? https://github.com/Alluxio/alluxio/pull/11513/files#diff-7f82122f923de058e3c4a20b43cd7e4eR1565", "url": "https://github.com/Alluxio/alluxio/pull/11513#discussion_r434945164", "createdAt": "2020-06-04T01:40:56Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1548,6 +1548,7 @@ public void delete(AlluxioURI path, DeleteContext context)\n             for (LockedInodePath childPath : descendants) {\n               try {\n                 mPermissionChecker.checkPermission(Mode.Bits.WRITE, childPath);\n+                mMountTable.checkUnderWritableMountPoint(childPath.getUri());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c68d7504c671eebb639683a36f247bf856f029"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzMzYxNw==", "bodyText": "The check below won't check descendants of the path, it just check the path itself", "url": "https://github.com/Alluxio/alluxio/pull/11513#discussion_r435033617", "createdAt": "2020-06-04T07:01:08Z", "author": {"login": "tinkerrrr"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1548,6 +1548,7 @@ public void delete(AlluxioURI path, DeleteContext context)\n             for (LockedInodePath childPath : descendants) {\n               try {\n                 mPermissionChecker.checkPermission(Mode.Bits.WRITE, childPath);\n+                mMountTable.checkUnderWritableMountPoint(childPath.getUri());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NTE2NA=="}, "originalCommit": {"oid": "21c68d7504c671eebb639683a36f247bf856f029"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0NTMyMg==", "bodyText": "I see. Would checking only the descendant mount points work? I am concerned that checking every path may be unnecessarily expensive, especially for a large sub-tree of the namespace.", "url": "https://github.com/Alluxio/alluxio/pull/11513#discussion_r436045322", "createdAt": "2020-06-05T16:55:50Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1548,6 +1548,7 @@ public void delete(AlluxioURI path, DeleteContext context)\n             for (LockedInodePath childPath : descendants) {\n               try {\n                 mPermissionChecker.checkPermission(Mode.Bits.WRITE, childPath);\n+                mMountTable.checkUnderWritableMountPoint(childPath.getUri());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NTE2NA=="}, "originalCommit": {"oid": "21c68d7504c671eebb639683a36f247bf856f029"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MzIzMA==", "bodyText": "We already check the permissions of every file and directory when deleting recursively. I don't think this would make much of a difference", "url": "https://github.com/Alluxio/alluxio/pull/11513#discussion_r436073230", "createdAt": "2020-06-05T17:51:01Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1548,6 +1548,7 @@ public void delete(AlluxioURI path, DeleteContext context)\n             for (LockedInodePath childPath : descendants) {\n               try {\n                 mPermissionChecker.checkPermission(Mode.Bits.WRITE, childPath);\n+                mMountTable.checkUnderWritableMountPoint(childPath.getUri());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NTE2NA=="}, "originalCommit": {"oid": "21c68d7504c671eebb639683a36f247bf856f029"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0OTkxMA==", "bodyText": "I thought it was unnecessary to check the same mount point multiple times. Also, checkUnderWritableMountPoint() calls getMountPoint(), and that needs to iterate over all the mount points to find the longest prefix.", "url": "https://github.com/Alluxio/alluxio/pull/11513#discussion_r436149910", "createdAt": "2020-06-05T20:30:27Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1548,6 +1548,7 @@ public void delete(AlluxioURI path, DeleteContext context)\n             for (LockedInodePath childPath : descendants) {\n               try {\n                 mPermissionChecker.checkPermission(Mode.Bits.WRITE, childPath);\n+                mMountTable.checkUnderWritableMountPoint(childPath.getUri());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NTE2NA=="}, "originalCommit": {"oid": "21c68d7504c671eebb639683a36f247bf856f029"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MDc4OA==", "bodyText": "We already check the permissions of every file and directory when deleting recursively. I don't think this would make much of a difference\n\nWell, I've updated the use-case in my first comment. As it described, the scenario is, a user with the right permission did this operation, the should-be-protected sub-directory was delete unexpectedly", "url": "https://github.com/Alluxio/alluxio/pull/11513#discussion_r436240788", "createdAt": "2020-06-06T05:38:15Z", "author": {"login": "tinkerrrr"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1548,6 +1548,7 @@ public void delete(AlluxioURI path, DeleteContext context)\n             for (LockedInodePath childPath : descendants) {\n               try {\n                 mPermissionChecker.checkPermission(Mode.Bits.WRITE, childPath);\n+                mMountTable.checkUnderWritableMountPoint(childPath.getUri());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NTE2NA=="}, "originalCommit": {"oid": "21c68d7504c671eebb639683a36f247bf856f029"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NDM1NA==", "bodyText": "I thought it was unnecessary to check the same mount point multiple times. Also, checkUnderWritableMountPoint() calls getMountPoint(), and that needs to iterate over all the mount points to find the longest prefix.\n\nThanks for your advice! I think checking only the descendant mount points works", "url": "https://github.com/Alluxio/alluxio/pull/11513#discussion_r436244354", "createdAt": "2020-06-06T06:41:58Z", "author": {"login": "tinkerrrr"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1548,6 +1548,7 @@ public void delete(AlluxioURI path, DeleteContext context)\n             for (LockedInodePath childPath : descendants) {\n               try {\n                 mPermissionChecker.checkPermission(Mode.Bits.WRITE, childPath);\n+                mMountTable.checkUnderWritableMountPoint(childPath.getUri());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NTE2NA=="}, "originalCommit": {"oid": "21c68d7504c671eebb639683a36f247bf856f029"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTk2NDg4OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo0MToyMVrOGhTNSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMjo0MzowOVrOGhi8gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MDg5MQ==", "bodyText": "Instead of introducing a new method, I was thinking more like:\nif (mMountTable.isMountPoint(childPath.getUri())) {\n  mMountTable.checkUnderWritableMountPoint(childPath.getUri());\n}\n\nThis would allow not creating a new method, and also, this performs the (potentially expensive) check for only the mount point paths.\nWhat do you think?", "url": "https://github.com/Alluxio/alluxio/pull/11513#discussion_r437570891", "createdAt": "2020-06-09T16:41:21Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1548,6 +1548,7 @@ public void delete(AlluxioURI path, DeleteContext context)\n             for (LockedInodePath childPath : descendants) {\n               try {\n                 mPermissionChecker.checkPermission(Mode.Bits.WRITE, childPath);\n+                mMountTable.checkIsWritableMountPoint(childPath.getUri());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2c883be0e7053cdaab31338effc9db3845509bc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyODczOA==", "bodyText": "I see, this way is much more elegant, thanks!", "url": "https://github.com/Alluxio/alluxio/pull/11513#discussion_r437828738", "createdAt": "2020-06-10T02:43:09Z", "author": {"login": "tinkerrrr"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1548,6 +1548,7 @@ public void delete(AlluxioURI path, DeleteContext context)\n             for (LockedInodePath childPath : descendants) {\n               try {\n                 mPermissionChecker.checkPermission(Mode.Bits.WRITE, childPath);\n+                mMountTable.checkIsWritableMountPoint(childPath.getUri());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MDg5MQ=="}, "originalCommit": {"oid": "f2c883be0e7053cdaab31338effc9db3845509bc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDMyMjQwOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjo1OToyNVrOGh-MNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjo1OToyNVrOGh-MNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI3NTEyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                mMountTable.checkUnderWritableMountPoint(childPath.getUri());\n          \n          \n            \n                              mMountTable.checkUnderWritableMountPoint(childPath.getUri());\n          \n      \n    \n    \n  \n\ncheckstyle is complaining with:\nerror: 'if' child have incorrect indentation level 20, expected level should be 18.", "url": "https://github.com/Alluxio/alluxio/pull/11513#discussion_r438275126", "createdAt": "2020-06-10T16:59:25Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -1548,6 +1548,9 @@ public void delete(AlluxioURI path, DeleteContext context)\n             for (LockedInodePath childPath : descendants) {\n               try {\n                 mPermissionChecker.checkPermission(Mode.Bits.WRITE, childPath);\n+                if (mMountTable.isMountPoint(childPath.getUri())) {\n+                    mMountTable.checkUnderWritableMountPoint(childPath.getUri());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "923b0edea75e164c64c0ed146f9b71e3f98c6cb2"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1585, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}