{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTg2NTcx", "number": 10865, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMToxNzoyNVrODd4mzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMTozNjo0OFrODd4y6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjYyNzMzOnYy", "diffSide": "RIGHT", "path": "table/server/master/src/main/java/alluxio/master/table/Database.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMToxNzoyNVrOFmvmlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoxOToxOVrOFnET-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3MDEzNA==", "bodyText": "this ExecutorService is not used?", "url": "https://github.com/Alluxio/alluxio/pull/10865#discussion_r376170134", "createdAt": "2020-02-07T01:17:25Z", "author": {"login": "yuzhu"}, "path": "table/server/master/src/main/java/alluxio/master/table/Database.java", "diffHunk": "@@ -177,31 +182,46 @@ public Table createTable(String tableName, Schema schema) {\n    * external synchronization.\n    *\n    * @param context journal context\n-   * @return true if the database changed as a result of fullSync\n+   * @param service executor service for parallezing the sync\n+   * @return true if the database changed as a result of syncing with UDB\n    */\n-  public boolean sync(JournalContext context) throws IOException {\n-    boolean updated = false;\n+  public boolean sync(JournalContext context, ExecutorService service) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f19a11dafbb0abbd79c213e0d8c314d81b1c3e4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwOTQzNQ==", "bodyText": "ooops, I forgot to update invokeAll. Thanks!", "url": "https://github.com/Alluxio/alluxio/pull/10865#discussion_r376509435", "createdAt": "2020-02-07T17:19:19Z", "author": {"login": "gpang"}, "path": "table/server/master/src/main/java/alluxio/master/table/Database.java", "diffHunk": "@@ -177,31 +182,46 @@ public Table createTable(String tableName, Schema schema) {\n    * external synchronization.\n    *\n    * @param context journal context\n-   * @return true if the database changed as a result of fullSync\n+   * @param service executor service for parallezing the sync\n+   * @return true if the database changed as a result of syncing with UDB\n    */\n-  public boolean sync(JournalContext context) throws IOException {\n-    boolean updated = false;\n+  public boolean sync(JournalContext context, ExecutorService service) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3MDEzNA=="}, "originalCommit": {"oid": "0f19a11dafbb0abbd79c213e0d8c314d81b1c3e4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjY1ODMzOnYy", "diffSide": "RIGHT", "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/HiveClientPool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMTozNjo0OFrOFmv4yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyMToyM1rOFnEXlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NDc5Mw==", "bodyText": "do you think 16 may be too high a number? we are assuming there will be at least 16 concurrent udb connections?", "url": "https://github.com/Alluxio/alluxio/pull/10865#discussion_r376174793", "createdAt": "2020-02-07T01:36:48Z", "author": {"login": "yuzhu"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/HiveClientPool.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import alluxio.Constants;\n+import alluxio.resource.CloseableResource;\n+import alluxio.resource.DynamicResourcePool;\n+import alluxio.util.ThreadFactoryUtils;\n+\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.HiveMetaHookLoader;\n+import org.apache.hadoop.hive.metastore.HiveMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.RetryingMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;\n+import org.apache.thrift.TException;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * A pool for hive clients, since hive clients are not thread safe.\n+ */\n+@ThreadSafe\n+public final class HiveClientPool extends DynamicResourcePool<IMetaStoreClient> {\n+  private static final ScheduledExecutorService GC_EXECUTOR =\n+      new ScheduledThreadPoolExecutor(1, ThreadFactoryUtils.build(\"HiveClientPool-GC-%d\", true));\n+  private static final HiveMetaHookLoader NOOP_HOOK = table -> null;\n+\n+  private final long mGcThresholdMs;\n+  private final String mConnectionUri;\n+  private final String mHiveDbName;\n+  /** This tracks if the db exists in HMS. */\n+  private volatile boolean mDbExists = false;\n+\n+  /**\n+   * Creates a new hive client client pool.\n+   *\n+   * @param connectionUri the connect uri for the hive metastore\n+   * @param hiveDbName the db name in hive\n+   */\n+  public HiveClientPool(String connectionUri, String hiveDbName) {\n+    super(Options.defaultOptions()\n+        .setMinCapacity(16)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f19a11dafbb0abbd79c213e0d8c314d81b1c3e4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMDM1Nw==", "bodyText": "In a way, yes. If a database has more than 16 tables, it would easily need more concurrent hive clients. For example, tpcds has over 20 tables.", "url": "https://github.com/Alluxio/alluxio/pull/10865#discussion_r376510357", "createdAt": "2020-02-07T17:21:23Z", "author": {"login": "gpang"}, "path": "table/server/underdb/hive/src/main/java/alluxio/table/under/hive/util/HiveClientPool.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.hive.util;\n+\n+import alluxio.Constants;\n+import alluxio.resource.CloseableResource;\n+import alluxio.resource.DynamicResourcePool;\n+import alluxio.util.ThreadFactoryUtils;\n+\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.HiveMetaHookLoader;\n+import org.apache.hadoop.hive.metastore.HiveMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.RetryingMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;\n+import org.apache.thrift.TException;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * A pool for hive clients, since hive clients are not thread safe.\n+ */\n+@ThreadSafe\n+public final class HiveClientPool extends DynamicResourcePool<IMetaStoreClient> {\n+  private static final ScheduledExecutorService GC_EXECUTOR =\n+      new ScheduledThreadPoolExecutor(1, ThreadFactoryUtils.build(\"HiveClientPool-GC-%d\", true));\n+  private static final HiveMetaHookLoader NOOP_HOOK = table -> null;\n+\n+  private final long mGcThresholdMs;\n+  private final String mConnectionUri;\n+  private final String mHiveDbName;\n+  /** This tracks if the db exists in HMS. */\n+  private volatile boolean mDbExists = false;\n+\n+  /**\n+   * Creates a new hive client client pool.\n+   *\n+   * @param connectionUri the connect uri for the hive metastore\n+   * @param hiveDbName the db name in hive\n+   */\n+  public HiveClientPool(String connectionUri, String hiveDbName) {\n+    super(Options.defaultOptions()\n+        .setMinCapacity(16)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NDc5Mw=="}, "originalCommit": {"oid": "0f19a11dafbb0abbd79c213e0d8c314d81b1c3e4"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2172, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}