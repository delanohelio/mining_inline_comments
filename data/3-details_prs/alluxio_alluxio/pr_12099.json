{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0NDAyMDgz", "number": 12099, "title": "Enable new master to join an existing quorum", "bodyText": "This change implements the quorum join process for new master.\nRatis provides an API for update quorum member list. To implement an automatic join comparable with what we did with Copycat, the new master will send a join request to the quorum leader after it initialized the journal. The leader will  atomically convert the request to a raft configuration change and apply it to the quorum.\nThis operation is a noop for a master that is already in the quorum.", "createdAt": "2020-09-10T22:37:59Z", "url": "https://github.com/Alluxio/alluxio/pull/12099", "merged": true, "mergeCommit": {"oid": "7b7d639afd11e65362d8c0f99e1d87afe19f337c"}, "closed": true, "closedAt": "2020-09-15T00:29:12Z", "author": {"login": "bf8086"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHofC2gH2gAyNDg0NDAyMDgzOjgwOGVmMmU1YzFjY2U3YTg5Yjg2OThmYzcwMjc5YTY2NWY4MWIyOWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdI8ZYBgFqTQ4ODIzNjQzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "808ef2e5c1cce7a89b8698fc70279a665f81b29e", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/808ef2e5c1cce7a89b8698fc70279a665f81b29e", "committedDate": "2020-09-10T22:24:49Z", "message": "Enable new master to join an existing quorum"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3ODQ5NDU4", "url": "https://github.com/Alluxio/alluxio/pull/12099#pullrequestreview-487849458", "createdAt": "2020-09-14T14:49:09Z", "commit": {"oid": "808ef2e5c1cce7a89b8698fc70279a665f81b29e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0OTowOVrOHRYrUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0OTowOVrOHRYrUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk5MjE0NA==", "bodyText": "If joinQuorum failed, the master with raft journal system will still run?? Should we shut it down or retry joining?", "url": "https://github.com/Alluxio/alluxio/pull/12099#discussion_r487992144", "createdAt": "2020-09-14T14:49:09Z", "author": {"login": "LuQQiu"}, "path": "core/server/common/src/main/java/alluxio/master/journal/raft/RaftJournalSystem.java", "diffHunk": "@@ -562,6 +566,38 @@ public synchronized void startInternal() throws InterruptedException, IOExceptio\n       throw new IOException(errorMessage, e.getCause());\n     }\n     LOG.info(\"Started Raft Journal System in {}ms\", System.currentTimeMillis() - startTime);\n+    joinQuorum();\n+  }\n+\n+  private void joinQuorum() {\n+    InetSocketAddress localAddress = mConf.getLocalAddress();\n+    // Send a request to join the quorum.\n+    // If the server is already part of the quorum, this operation is a noop.\n+    AddQuorumServerRequest request = AddQuorumServerRequest.newBuilder()\n+        .setServerAddress(NetAddress.newBuilder()\n+            .setHost(localAddress.getHostString())\n+            .setRpcPort(localAddress.getPort()))\n+        .build();\n+    RaftClient client = createClient();\n+    client.sendReadOnlyAsync(Message.valueOf(\n+        UnsafeByteOperations.unsafeWrap(\n+            JournalQueryRequest\n+                .newBuilder()\n+                .setAddQuorumServerRequest(request)\n+                .build().toByteArray()\n+        ))).whenComplete((reply, t) -> {\n+          if (t != null) {\n+            LOG.error(\"Exception occurred while joining quorum\", t);\n+          }\n+          if (reply != null && reply.getException() != null) {\n+            LOG.error(\"Received an error while joining quorum\", reply.getException());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "808ef2e5c1cce7a89b8698fc70279a665f81b29e"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3OTU5NDcy", "url": "https://github.com/Alluxio/alluxio/pull/12099#pullrequestreview-487959472", "createdAt": "2020-09-14T16:45:12Z", "commit": {"oid": "808ef2e5c1cce7a89b8698fc70279a665f81b29e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0NToxMlrOHRdz9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0Njo1OFrOHRd5wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3NjI3Nw==", "bodyText": "This journal request can have various types of requests, like snapshot (above), and now add quorum? There should only be 1 set at a time?\nAlso, should this section be like:\nif (queryRequest.hasGetSnapshotInfoRequest()) {\n...\nelse if (queryRequest.hasGetSnapshotRequest()) {\n...\nelse if (queryRequest.hasAddQuorumServerRequest()) {\n...\n}", "url": "https://github.com/Alluxio/alluxio/pull/12099#discussion_r488076277", "createdAt": "2020-09-14T16:45:12Z", "author": {"login": "gpang"}, "path": "core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java", "diffHunk": "@@ -185,6 +187,17 @@ public StateMachineStorage getStateMachineStorage() {\n         future.complete(reply);\n         return future;\n       }\n+      if (queryRequest.hasAddQuorumServerRequest()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "808ef2e5c1cce7a89b8698fc70279a665f81b29e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3Nzc2Mg==", "bodyText": "Does whenComplete run even on failure?", "url": "https://github.com/Alluxio/alluxio/pull/12099#discussion_r488077762", "createdAt": "2020-09-14T16:46:58Z", "author": {"login": "gpang"}, "path": "core/server/common/src/main/java/alluxio/master/journal/raft/RaftJournalSystem.java", "diffHunk": "@@ -562,6 +566,38 @@ public synchronized void startInternal() throws InterruptedException, IOExceptio\n       throw new IOException(errorMessage, e.getCause());\n     }\n     LOG.info(\"Started Raft Journal System in {}ms\", System.currentTimeMillis() - startTime);\n+    joinQuorum();\n+  }\n+\n+  private void joinQuorum() {\n+    InetSocketAddress localAddress = mConf.getLocalAddress();\n+    // Send a request to join the quorum.\n+    // If the server is already part of the quorum, this operation is a noop.\n+    AddQuorumServerRequest request = AddQuorumServerRequest.newBuilder()\n+        .setServerAddress(NetAddress.newBuilder()\n+            .setHost(localAddress.getHostString())\n+            .setRpcPort(localAddress.getPort()))\n+        .build();\n+    RaftClient client = createClient();\n+    client.sendReadOnlyAsync(Message.valueOf(\n+        UnsafeByteOperations.unsafeWrap(\n+            JournalQueryRequest\n+                .newBuilder()\n+                .setAddQuorumServerRequest(request)\n+                .build().toByteArray()\n+        ))).whenComplete((reply, t) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "808ef2e5c1cce7a89b8698fc70279a665f81b29e"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MDkyMDkz", "url": "https://github.com/Alluxio/alluxio/pull/12099#pullrequestreview-488092093", "createdAt": "2020-09-14T19:51:33Z", "commit": {"oid": "808ef2e5c1cce7a89b8698fc70279a665f81b29e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTo1MTozM1rOHRkQaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTo1MTozM1rOHRkQaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE4MTg2NA==", "bodyText": "I see. Can we just add a small comment, either here or above, saying something like handleRequest() handles GetSnapshotInfoRequest and GetSnapshotRequest, or returns null, so that this part handles the other requests (AddQuorumServerRequest).", "url": "https://github.com/Alluxio/alluxio/pull/12099#discussion_r488181864", "createdAt": "2020-09-14T19:51:33Z", "author": {"login": "gpang"}, "path": "core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java", "diffHunk": "@@ -185,6 +187,17 @@ public StateMachineStorage getStateMachineStorage() {\n         future.complete(reply);\n         return future;\n       }\n+      if (queryRequest.hasAddQuorumServerRequest()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3NjI3Nw=="}, "originalCommit": {"oid": "808ef2e5c1cce7a89b8698fc70279a665f81b29e"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "384a42671e8654c2e40cd213ddd4d8ac0193a1cb", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/384a42671e8654c2e40cd213ddd4d8ac0193a1cb", "committedDate": "2020-09-14T21:51:13Z", "message": "Add comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjI4Mzg5", "url": "https://github.com/Alluxio/alluxio/pull/12099#pullrequestreview-488228389", "createdAt": "2020-09-14T23:46:45Z", "commit": {"oid": "384a42671e8654c2e40cd213ddd4d8ac0193a1cb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjM2NDMz", "url": "https://github.com/Alluxio/alluxio/pull/12099#pullrequestreview-488236433", "createdAt": "2020-09-15T00:10:39Z", "commit": {"oid": "384a42671e8654c2e40cd213ddd4d8ac0193a1cb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3569, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}