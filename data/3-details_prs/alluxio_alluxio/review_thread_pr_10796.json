{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NzE1NTg2", "number": 10796, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo0Mzo0OVrODak4fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToyMzoxOVrODalkdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTkzODU1OnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/udb/UnderDatabase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo0Mzo0OVrOFhm3FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToxNzo0OVrOFhnyvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NDAyMQ==", "bodyText": "update comment", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370784021", "createdAt": "2020-01-24T18:43:49Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/udb/UnderDatabase.java", "diffHunk": "@@ -44,4 +46,9 @@\n    * @return the {@link UdbContext}\n    */\n   UdbContext getUdbContext();\n+\n+  /**\n+   * @return get owner name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82bbe003159863043db49e6a8f20c4784ad728e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5OTI5Mw==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370799293", "createdAt": "2020-01-24T19:17:49Z", "author": {"login": "yuzhu"}, "path": "table/server/common/src/main/java/alluxio/table/common/udb/UnderDatabase.java", "diffHunk": "@@ -44,4 +46,9 @@\n    * @return the {@link UdbContext}\n    */\n   UdbContext getUdbContext();\n+\n+  /**\n+   * @return get owner name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NDAyMQ=="}, "originalCommit": {"oid": "a82bbe003159863043db49e6a8f20c4784ad728e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTk0MjgyOnYy", "diffSide": "LEFT", "path": "table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo0NToyMVrOFhm5uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo0NToyMVrOFhm5uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NDY5OQ==", "bodyText": "Why remove this processing? If we fail to sync the db, we should not have attached the db, right?", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370784699", "createdAt": "2020-01-24T18:45:21Z", "author": {"login": "gpang"}, "path": "table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java", "diffHunk": "@@ -118,17 +118,8 @@ public boolean attachDatabase(JournalContext journalContext, String udbType,\n               .setDbName(dbName)\n               .putAllConfig(map).build()).build());\n \n-      try {\n-        mDBs.get(dbName).sync(journalContext);\n-      } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82bbe003159863043db49e6a8f20c4784ad728e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTk0OTY2OnYy", "diffSide": "RIGHT", "path": "table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo0NzozNlrOFhm-Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToyNDo1NVrOFhn_CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NTc5OQ==", "bodyText": "why can't the mDBs.values() also add the DBInfo entries?", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370785799", "createdAt": "2020-01-24T18:47:36Z", "author": {"login": "gpang"}, "path": "table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java", "diffHunk": "@@ -435,11 +434,56 @@ public void remove() {\n     };\n   }\n \n+  private Iterator<Journal.JournalEntry> getDbInfoIterator() {\n+    final Iterator<Map.Entry<String, Database>> it = mDBs.entrySet().iterator();\n+    return new Iterator<Journal.JournalEntry>() {\n+      private Map.Entry<String, Database> mEntry = null;\n+\n+      @Override\n+      public boolean hasNext() {\n+        if (mEntry != null) {\n+          return true;\n+        }\n+        if (it.hasNext()) {\n+          mEntry = it.next();\n+          return true;\n+        }\n+        return false;\n+      }\n+\n+      @Override\n+      public Journal.JournalEntry next() {\n+        if (!hasNext()) {\n+          throw new NoSuchElementException();\n+        }\n+        Database database = mEntry.getValue();\n+        mEntry = null;\n+        DatabaseInfo info = database.getDatabaseInfo();\n+        return Journal.JournalEntry.newBuilder().setUpdateDatabaseInfo(\n+            alluxio.proto.journal.Table.UpdateDatabaseInfoEntry.newBuilder()\n+                .setDbName(database.getName())\n+                .setOwnerName(info.getOwnerName())\n+                .setOwnerType(info.getOwnerType())\n+                .setComment(info.getComment())\n+                .setLocation(info.getLocation())\n+                .putAllParameter(info.getParameters()).build()).build();\n+      }\n+\n+      @Override\n+      public void remove() {\n+        throw new UnsupportedOperationException(\n+            \"GetDbInfoIteratorr#Iterator#remove is not supported.\");\n+      }\n+    };\n+  }\n+\n   @Override\n   public Iterator<Journal.JournalEntry> getJournalEntryIterator() {\n     List<Iterator<Journal.JournalEntry>> componentIters = StreamUtils\n         .map(JournalEntryIterable::getJournalEntryIterator, mDBs.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82bbe003159863043db49e6a8f20c4784ad728e"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NTI5Mg==", "bodyText": "Here we are calling getJournalEntryIterator on every db, mDBs.values is a list of all DB objects.", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370795292", "createdAt": "2020-01-24T19:08:35Z", "author": {"login": "yuzhu"}, "path": "table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java", "diffHunk": "@@ -435,11 +434,56 @@ public void remove() {\n     };\n   }\n \n+  private Iterator<Journal.JournalEntry> getDbInfoIterator() {\n+    final Iterator<Map.Entry<String, Database>> it = mDBs.entrySet().iterator();\n+    return new Iterator<Journal.JournalEntry>() {\n+      private Map.Entry<String, Database> mEntry = null;\n+\n+      @Override\n+      public boolean hasNext() {\n+        if (mEntry != null) {\n+          return true;\n+        }\n+        if (it.hasNext()) {\n+          mEntry = it.next();\n+          return true;\n+        }\n+        return false;\n+      }\n+\n+      @Override\n+      public Journal.JournalEntry next() {\n+        if (!hasNext()) {\n+          throw new NoSuchElementException();\n+        }\n+        Database database = mEntry.getValue();\n+        mEntry = null;\n+        DatabaseInfo info = database.getDatabaseInfo();\n+        return Journal.JournalEntry.newBuilder().setUpdateDatabaseInfo(\n+            alluxio.proto.journal.Table.UpdateDatabaseInfoEntry.newBuilder()\n+                .setDbName(database.getName())\n+                .setOwnerName(info.getOwnerName())\n+                .setOwnerType(info.getOwnerType())\n+                .setComment(info.getComment())\n+                .setLocation(info.getLocation())\n+                .putAllParameter(info.getParameters()).build()).build();\n+      }\n+\n+      @Override\n+      public void remove() {\n+        throw new UnsupportedOperationException(\n+            \"GetDbInfoIteratorr#Iterator#remove is not supported.\");\n+      }\n+    };\n+  }\n+\n   @Override\n   public Iterator<Journal.JournalEntry> getJournalEntryIterator() {\n     List<Iterator<Journal.JournalEntry>> componentIters = StreamUtils\n         .map(JournalEntryIterable::getJournalEntryIterator, mDBs.values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NTc5OQ=="}, "originalCommit": {"oid": "a82bbe003159863043db49e6a8f20c4784ad728e"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMjQ0MQ==", "bodyText": "Yes, so when we are returning journal entries for a database (the table entries), can we also return the dbInfo one as well?", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370802441", "createdAt": "2020-01-24T19:24:55Z", "author": {"login": "gpang"}, "path": "table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java", "diffHunk": "@@ -435,11 +434,56 @@ public void remove() {\n     };\n   }\n \n+  private Iterator<Journal.JournalEntry> getDbInfoIterator() {\n+    final Iterator<Map.Entry<String, Database>> it = mDBs.entrySet().iterator();\n+    return new Iterator<Journal.JournalEntry>() {\n+      private Map.Entry<String, Database> mEntry = null;\n+\n+      @Override\n+      public boolean hasNext() {\n+        if (mEntry != null) {\n+          return true;\n+        }\n+        if (it.hasNext()) {\n+          mEntry = it.next();\n+          return true;\n+        }\n+        return false;\n+      }\n+\n+      @Override\n+      public Journal.JournalEntry next() {\n+        if (!hasNext()) {\n+          throw new NoSuchElementException();\n+        }\n+        Database database = mEntry.getValue();\n+        mEntry = null;\n+        DatabaseInfo info = database.getDatabaseInfo();\n+        return Journal.JournalEntry.newBuilder().setUpdateDatabaseInfo(\n+            alluxio.proto.journal.Table.UpdateDatabaseInfoEntry.newBuilder()\n+                .setDbName(database.getName())\n+                .setOwnerName(info.getOwnerName())\n+                .setOwnerType(info.getOwnerType())\n+                .setComment(info.getComment())\n+                .setLocation(info.getLocation())\n+                .putAllParameter(info.getParameters()).build()).build();\n+      }\n+\n+      @Override\n+      public void remove() {\n+        throw new UnsupportedOperationException(\n+            \"GetDbInfoIteratorr#Iterator#remove is not supported.\");\n+      }\n+    };\n+  }\n+\n   @Override\n   public Iterator<Journal.JournalEntry> getJournalEntryIterator() {\n     List<Iterator<Journal.JournalEntry>> componentIters = StreamUtils\n         .map(JournalEntryIterable::getJournalEntryIterator, mDBs.values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NTc5OQ=="}, "originalCommit": {"oid": "a82bbe003159863043db49e6a8f20c4784ad728e"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTk1Mzg3OnYy", "diffSide": "RIGHT", "path": "table/server/master/src/main/java/alluxio/master/table/Database.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo0OTowNVrOFhnAzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToxNzo0MVrOFhnyZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NjUwOQ==", "bodyText": "Is there ever a scenario when the dbInfo is already populated? Can't we just keep it null until it is updated? I think a failed db sync will remove the db. Then, we don't have to pass in null as a parameter.", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370786509", "createdAt": "2020-01-24T18:49:05Z", "author": {"login": "gpang"}, "path": "table/server/master/src/main/java/alluxio/master/table/Database.java", "diffHunk": "@@ -48,22 +49,21 @@\n   private final UnderDatabase mUdb;\n   private final Map<String, String> mConfig;\n \n-  /**\n-   * Creates an instance of a database.\n-   *\n-   * @param context the catalog context\n-   * @param type the database type\n-   * @param name the database name\n-   * @param udb the udb\n-   */\n+  private DatabaseInfo mDatabaseInfo;\n+\n   private Database(CatalogContext context, String type, String name, UnderDatabase udb,\n-      Map<String, String> configMap) {\n+      Map<String, String> configMap, @Nullable DatabaseInfo dbInfo) {\n     mContext = context;\n     mType = type;\n     mName = name;\n     mTables = new ConcurrentHashMap<>();\n     mUdb = udb;\n     mConfig = configMap;\n+    if (dbInfo == null) {\n+      mDatabaseInfo = new DatabaseInfo();\n+    } else {\n+      mDatabaseInfo = dbInfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82bbe003159863043db49e6a8f20c4784ad728e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5OTIwNA==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370799204", "createdAt": "2020-01-24T19:17:41Z", "author": {"login": "yuzhu"}, "path": "table/server/master/src/main/java/alluxio/master/table/Database.java", "diffHunk": "@@ -48,22 +49,21 @@\n   private final UnderDatabase mUdb;\n   private final Map<String, String> mConfig;\n \n-  /**\n-   * Creates an instance of a database.\n-   *\n-   * @param context the catalog context\n-   * @param type the database type\n-   * @param name the database name\n-   * @param udb the udb\n-   */\n+  private DatabaseInfo mDatabaseInfo;\n+\n   private Database(CatalogContext context, String type, String name, UnderDatabase udb,\n-      Map<String, String> configMap) {\n+      Map<String, String> configMap, @Nullable DatabaseInfo dbInfo) {\n     mContext = context;\n     mType = type;\n     mName = name;\n     mTables = new ConcurrentHashMap<>();\n     mUdb = udb;\n     mConfig = configMap;\n+    if (dbInfo == null) {\n+      mDatabaseInfo = new DatabaseInfo();\n+    } else {\n+      mDatabaseInfo = dbInfo;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NjUwOQ=="}, "originalCommit": {"oid": "a82bbe003159863043db49e6a8f20c4784ad728e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTk1NzA0OnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/master/table/DatabaseInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo1MDoxMlrOFhnCyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToyMDowM1rOFhn2ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NzAxOQ==", "bodyText": "We can make all of these final?", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370787019", "createdAt": "2020-01-24T18:50:12Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/master/table/DatabaseInfo.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.table;\n+\n+import alluxio.grpc.table.PrincipalType;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * The database information class.\n+ */\n+public class DatabaseInfo {\n+  private String mLocation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82bbe003159863043db49e6a8f20c4784ad728e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMDI2Ng==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370800266", "createdAt": "2020-01-24T19:20:03Z", "author": {"login": "yuzhu"}, "path": "table/server/common/src/main/java/alluxio/master/table/DatabaseInfo.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.table;\n+\n+import alluxio.grpc.table.PrincipalType;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * The database information class.\n+ */\n+public class DatabaseInfo {\n+  private String mLocation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NzAxOQ=="}, "originalCommit": {"oid": "a82bbe003159863043db49e6a8f20c4784ad728e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTk2MTExOnYy", "diffSide": "RIGHT", "path": "table/server/master/src/test/java/alluxio/master/table/TestDatabase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo1MTozMVrOFhnFVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToxNzozM1rOFhnyHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NzY3MA==", "bodyText": "can the map contain at least 1 mapping?", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370787670", "createdAt": "2020-01-24T18:51:31Z", "author": {"login": "gpang"}, "path": "table/server/master/src/test/java/alluxio/master/table/TestDatabase.java", "diffHunk": "@@ -29,6 +32,8 @@\n public class TestDatabase implements UnderDatabase {\n   public static final String TEST_UDB_NAME = \"test_udb_name\";\n   public static final String TABLE_NAME_PREFIX = \"test_table_name\";\n+  public static DatabaseInfo sTestDbInfo = new DatabaseInfo(\"test://test\", \"TestOwner\",\n+      PrincipalType.USER, \"comment\", ImmutableMap.of());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82bbe003159863043db49e6a8f20c4784ad728e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5OTEzMw==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370799133", "createdAt": "2020-01-24T19:17:33Z", "author": {"login": "yuzhu"}, "path": "table/server/master/src/test/java/alluxio/master/table/TestDatabase.java", "diffHunk": "@@ -29,6 +32,8 @@\n public class TestDatabase implements UnderDatabase {\n   public static final String TEST_UDB_NAME = \"test_udb_name\";\n   public static final String TABLE_NAME_PREFIX = \"test_table_name\";\n+  public static DatabaseInfo sTestDbInfo = new DatabaseInfo(\"test://test\", \"TestOwner\",\n+      PrincipalType.USER, \"comment\", ImmutableMap.of());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NzY3MA=="}, "originalCommit": {"oid": "a82bbe003159863043db49e6a8f20c4784ad728e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjA1MTExOnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/master/table/DatabaseInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToyMzoxOVrOFhn8Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToyMzoxOVrOFhn8Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMTc0Mw==", "bodyText": "can we use MoreObjects.toStringHelper(this) like we do elsewhere in the codebase?", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370801743", "createdAt": "2020-01-24T19:23:19Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/master/table/DatabaseInfo.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.table;\n+\n+import alluxio.grpc.table.PrincipalType;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * The database information class.\n+ */\n+public class DatabaseInfo {\n+  private final String mLocation;\n+  private final String mOwnerName;\n+  private final PrincipalType mOwnerType;\n+  private final String mComment;\n+  private final Map<String, String> mParameters;\n+\n+  /**\n+   * Construct a default databaseinfo class.\n+   */\n+  public DatabaseInfo() {\n+    mLocation = \"\";\n+    mOwnerName = \"\";\n+    mOwnerType = PrincipalType.USER;\n+    mComment = \"\";\n+    mParameters = ImmutableMap.of();\n+  }\n+\n+  /**\n+   * Full constructor for database info.\n+   * @param location location\n+   * @param ownerName owner name\n+   * @param ownerType owner type\n+   * @param comment comment\n+   * @param params parameters\n+   */\n+  public DatabaseInfo(String location, String ownerName, PrincipalType ownerType, String comment,\n+      Map<String, String> params) {\n+    mLocation = location;\n+    mOwnerName = ownerName;\n+    mOwnerType = ownerType;\n+    mComment = comment;\n+    mParameters = params;\n+  }\n+\n+  /**\n+   * @return the location\n+   */\n+  public String getLocation() {\n+    return mLocation;\n+  }\n+\n+  /**\n+   * @return the owner name\n+   */\n+  public String getOwnerName() {\n+    return mOwnerName;\n+  }\n+\n+  /**\n+   * @return the owner type\n+   */\n+  public PrincipalType getOwnerType() {\n+    return mOwnerType;\n+  }\n+\n+  /**\n+   * @return the comment\n+   */\n+  public String getComment() {\n+    return mComment;\n+  }\n+\n+  /**\n+   * @return the parameter\n+   */\n+  public Map<String, String> getParameters() {\n+    return mParameters;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    DatabaseInfo that = (DatabaseInfo) o;\n+    return Objects.equals(mLocation, that.mLocation)\n+        && Objects.equals(mOwnerName, that.mOwnerName)\n+        && mOwnerType == that.mOwnerType\n+        && Objects.equals(mComment, that.mComment)\n+        && Objects.equals(mParameters, that.mParameters);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(mLocation, mOwnerName, mOwnerType, mComment, mParameters);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"DatabaseInfo{\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f65c8b06038659d4de557ae92a287cb230ddc7"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2102, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}