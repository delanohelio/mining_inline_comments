{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NzIwMzU2", "number": 1155, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoxOToyN1rOE_JWgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoxOToyN1rOE_JWgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjQ4OTYyOnYy", "diffSide": "RIGHT", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoxOToyN1rOH8sLHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNTo1MjowM1rOH-jkFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwMDM0OA==", "bodyText": "Should event logs have enhancements run on them?", "url": "https://github.com/UNC-Libraries/box-c/pull/1155#discussion_r533400348", "createdAt": "2020-12-01T13:19:27Z", "author": {"login": "lfarrell"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouterTest.java", "diffHunk": "@@ -78,6 +84,110 @@ public void testRouteStartContainer() throws Exception {\n         assertMockEndpointsSatisfied();\n     }\n \n+    @Test\n+    public void testRouteStartTimemap() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(0);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(CONTAINER_ID + \"/\" + FCR_VERSIONS,\n+                Fcrepo4Repository.Container.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartDatafs() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(CONTAINER_ID + \"/datafs\",\n+                Fcrepo4Repository.Container.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartDepositRecord() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(DEPOSIT_ID,\n+                Fcrepo4Repository.Container.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartNotAPid() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"what/is/going/on\",\n+                Fcrepo4Repository.Container.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartCollections() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"/content/\" + RepositoryPathConstants.CONTENT_ROOT_ID,\n+                Fcrepo4Repository.Container.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartBinaryMetadata() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(CONTAINER_ID + \"/datafs/original_file/fcr:metadata\",\n+                Fcrepo4Repository.NonRdfSourceDescription.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartOriginalBinary() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(1);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(CONTAINER_ID + \"/datafs/original_file\",\n+                Fcrepo4Repository.Binary.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartPremisBinary() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7b5d7a9302213fca241bb938f41bcc4480f13eb"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1NjQzOA==", "bodyText": "The issue at the moment is that longleaf registration happens in the EnhancementRouter, while the new filtering is in MetaServicesRouter, so all binaries have to reach MetaServicesRouter at the moment. But we don't need enhancements on any binaries except originals currently. I could move the call to longleaf up into the metaservicesrouter... that might be better in some ways, as running enhancements doesn't affect the original binary, so it shouldn't need to register in longleaf again. On the other hand, we might have to add a way to trigger longleaf registration for cases where it fails. I think that's fine though. I'll try to split longleaf out of the enhancement router.", "url": "https://github.com/UNC-Libraries/box-c/pull/1155#discussion_r535356438", "createdAt": "2020-12-03T15:52:03Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouterTest.java", "diffHunk": "@@ -78,6 +84,110 @@ public void testRouteStartContainer() throws Exception {\n         assertMockEndpointsSatisfied();\n     }\n \n+    @Test\n+    public void testRouteStartTimemap() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(0);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(CONTAINER_ID + \"/\" + FCR_VERSIONS,\n+                Fcrepo4Repository.Container.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartDatafs() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(CONTAINER_ID + \"/datafs\",\n+                Fcrepo4Repository.Container.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartDepositRecord() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(DEPOSIT_ID,\n+                Fcrepo4Repository.Container.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartNotAPid() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"what/is/going/on\",\n+                Fcrepo4Repository.Container.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartCollections() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"/content/\" + RepositoryPathConstants.CONTENT_ROOT_ID,\n+                Fcrepo4Repository.Container.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartBinaryMetadata() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(CONTAINER_ID + \"/datafs/original_file/fcr:metadata\",\n+                Fcrepo4Repository.NonRdfSourceDescription.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartOriginalBinary() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(1);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(CONTAINER_ID + \"/datafs/original_file\",\n+                Fcrepo4Repository.Binary.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartPremisBinary() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwMDM0OA=="}, "originalCommit": {"oid": "f7b5d7a9302213fca241bb938f41bcc4480f13eb"}, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 594, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}