{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MDM4NTEx", "number": 890, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNzo1Mjo1N1rODcbbvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNzo1Mjo1N1rODcbbvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTM2MTg4OnYy", "diffSide": "RIGHT", "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/EditTitleIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNzo1Mjo1N1rOFkefwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNzo1Mjo1N1rOFkefwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5MjcwNQ==", "bodyText": "You probably want to be testing replacing a MODS title rather than a DC title", "url": "https://github.com/UNC-Libraries/box-c/pull/890#discussion_r373792705", "createdAt": "2020-02-01T17:52:57Z", "author": {"login": "bbpennel"}, "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/EditTitleIT.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.MODS_V3_NS;\n+import static edu.unc.lib.dl.xml.SecureXMLFactory.createSAXBuilder;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doThrow;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import edu.unc.lib.dl.fcrepo4.BinaryObject;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.jdom2.Document;\n+import org.jdom2.JDOMException;\n+import org.jdom2.input.SAXBuilder;\n+import org.junit.Test;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import edu.unc.lib.dl.acl.exception.AccessRestrictionException;\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.WorkObject;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.DcElements;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/edit-title-it-servlet.xml\")\n+})\n+public class EditTitleIT extends AbstractAPIIT {\n+    @Test\n+    public void testCreateTitleWhereNoneExists() throws Exception {\n+        PID pid = makePid();\n+        WorkObject work = repositoryObjectFactory.createWorkObject(pid, null);\n+        String title = \"work_title\";\n+\n+        MvcResult result = mvc.perform(put(\"/edit/title/\" + pid.getUUID())\n+                .param(\"title\", title))\n+                .andExpect(status().is2xxSuccessful())\n+                .andReturn();\n+\n+        // Verify response from api\n+        Map<String, Object> respMap = getMapFromResponse(result);\n+        assertEquals(pid.getUUID(), respMap.get(\"pid\"));\n+        assertEquals(\"editTitle\", respMap.get(\"action\"));\n+        hasTitleValue(getUpdatedDescriptionDocument(work.getDescription()), title);\n+    }\n+\n+    @Test\n+    public void testReplaceTitle() throws Exception {\n+        PID pid = makePid();\n+        String oldTitle = \"old_work_title\";\n+        Model workModel = ModelFactory.createDefaultModel();\n+        workModel.add(workModel.createResource(pid.getRepositoryPath()), DcElements.title,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4b47fe8364116ce9c3b9659d504f42d72bdcd0a"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 822, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}