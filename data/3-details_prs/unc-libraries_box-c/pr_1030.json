{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMDI3ODk2", "number": 1030, "title": "Add pid locking for premis files", "bodyText": "https://jira.lib.unc.edu/browse/BXC-2623\nhttps://jira.lib.unc.edu/browse/BXC-2722", "createdAt": "2020-06-30T13:26:08Z", "url": "https://github.com/UNC-Libraries/box-c/pull/1030", "merged": true, "mergeCommit": {"oid": "cc1b6da2efb477beab4b9844b321f70a8a7e85d0"}, "closed": true, "closedAt": "2020-07-20T18:29:40Z", "author": {"login": "smithjp"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcut2T_gH2gAyNDQyMDI3ODk2OjIyODc0NmJmYjRjYjdlODVjYTA3YWU5NzU0MGM1ZjhkNTY4YmE5YzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc218gZgFqTQ1MTg1NTg4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "228746bfb4cb7e85ca07ae97540c5f8d568ba9c1", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/228746bfb4cb7e85ca07ae97540c5f8d568ba9c1", "committedDate": "2020-06-25T12:31:39Z", "message": "Add pid locking for premis files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwOTE0MjA5", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#pullrequestreview-440914209", "createdAt": "2020-07-01T14:19:36Z", "commit": {"oid": "228746bfb4cb7e85ca07ae97540c5f8d568ba9c1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxOTozNlrOGrn-KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyMzo1NlrOGroJow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5Njg0MA==", "bodyText": "It may not be necessary to do locking in this client since these changes are happening outside of Fedora in a temp file, so it seems unlikely for there to be conflicts within here.", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#discussion_r448396840", "createdAt": "2020-07-01T14:19:36Z", "author": {"login": "bbpennel"}, "path": "fcrepo-clients/src/main/java/edu/unc/lib/dl/event/FilePremisLogger.java", "diffHunk": "@@ -47,6 +49,8 @@\n     private PID objectPid;\n     private Model model;\n \n+    private static final PidLockManager lockManager = PidLockManager.getDefaultPidLockManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "228746bfb4cb7e85ca07ae97540c5f8d568ba9c1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5OTc3OQ==", "bodyText": "At some point we should also add in read locking, so that it won't try to read while a write is being performed. I've created a followup ticket for doing this with the premis logger: https://jira.lib.unc.edu/browse/BXC-2722", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#discussion_r448399779", "createdAt": "2020-07-01T14:23:56Z", "author": {"login": "bbpennel"}, "path": "fcrepo-clients/src/main/java/edu/unc/lib/dl/event/RepositoryPremisLogger.java", "diffHunk": "@@ -133,6 +137,8 @@ public PremisLogger writeEvents(Resource... eventResources) {\n             log.debug(\"Adding events to PREMIS log for {}\", objPid);\n \n             PID logPid = getMdEventsPid(objPid);\n+\n+            Lock logLock = lockManager.awaitWriteLock(logPid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "228746bfb4cb7e85ca07ae97540c5f8d568ba9c1"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "960c3ac7c73829f83ce943ee92775550fc7fca54", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/960c3ac7c73829f83ce943ee92775550fc7fca54", "committedDate": "2020-07-06T20:13:03Z", "message": "Remove pid locking from file premis logger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19db4c5119158ba6bcaf4b1a113aae7de4daafaf", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/19db4c5119158ba6bcaf4b1a113aae7de4daafaf", "committedDate": "2020-07-06T20:15:49Z", "message": "Move pid locking manager and exception to fcrepo-clients package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80ad23e11390fbd70daabc5771ec19a069e72096", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/80ad23e11390fbd70daabc5771ec19a069e72096", "committedDate": "2020-07-06T20:16:33Z", "message": "Add test for repository premis logger pid locking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzODYyMzgy", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#pullrequestreview-443862382", "createdAt": "2020-07-07T12:57:08Z", "commit": {"oid": "80ad23e11390fbd70daabc5771ec19a069e72096"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1NzowOFrOGt9RZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1NzowOFrOGt9RZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0Mjk4Mw==", "bodyText": "Good work on this test. Do you know if it fails without the new pid locking code? It can sometimes be hard to trigger concurrency cases with a small number of requests.\nIt might be good to check the premis log after all the threads have completed to verify that all the expected events are present at once, just to make sure we end up with a merger of the two change sets at the end.\nIts too bad we're using a mock binary transfer session in all these tests, so we aren't getting a test of currency in the write code, but judging by the comment on the mock we're probably stuck with it.", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#discussion_r450842983", "createdAt": "2020-07-07T12:57:08Z", "author": {"login": "bbpennel"}, "path": "fcrepo-clients/src/test/java/edu/unc/lib/dl/event/RepositoryPremisLoggerIT.java", "diffHunk": "@@ -166,4 +169,65 @@ public void getEventsModelForObjectWithoutLog() throws Exception {\n \n         assertTrue(eventsModel.isEmpty());\n     }\n+\n+    @Test\n+    public void makeMultipleChangesSimultaneously() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ad23e11390fbd70daabc5771ec19a069e72096"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "204112a6c4093078583194d4b9daa546d3f43e97", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/204112a6c4093078583194d4b9daa546d3f43e97", "committedDate": "2020-07-07T13:09:35Z", "message": "Update pid locking test to check premis file after all threads finish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a729f6addaf7c8a679ebfe54d3186a1e0945a1f", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/1a729f6addaf7c8a679ebfe54d3186a1e0945a1f", "committedDate": "2020-07-07T20:01:34Z", "message": "Create premis log before testing pid locking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MDA2OTE0", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#pullrequestreview-445006914", "createdAt": "2020-07-08T18:01:30Z", "commit": {"oid": "1a729f6addaf7c8a679ebfe54d3186a1e0945a1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxODowMTozMFrOGuzZxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxODowMTozMFrOGuzZxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcyOTg2Mg==", "bodyText": "It would be more valuable to check that this event exists after the concurrent operations below take place, to show that the whole log makes it through. We can count on the other tests to already be making sure that normal addition of events works", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#discussion_r451729862", "createdAt": "2020-07-08T18:01:30Z", "author": {"login": "bbpennel"}, "path": "fcrepo-clients/src/test/java/edu/unc/lib/dl/event/RepositoryPremisLoggerIT.java", "diffHunk": "@@ -166,4 +169,70 @@ public void getEventsModelForObjectWithoutLog() throws Exception {\n \n         assertTrue(eventsModel.isEmpty());\n     }\n+\n+    @Test\n+    public void makeMultipleChangesSimultaneously() throws InterruptedException {\n+        parentObject = repoObjFactory.createDepositRecord(null);\n+        initPremisLogger(parentObject);\n+\n+        // make sure that there are no events in premis log before the writes\n+        PremisLogger retrieveLogger = new RepositoryPremisLogger(parentObject, mockSession,\n+                pidMinter, repoObjLoader, repoObjFactory);\n+        Model initialLogModel = retrieveLogger.getEventsModel();\n+        assertFalse(\"New premis already contains events\", initialLogModel.listObjects().hasNext());\n+\n+        // add original event\n+        Resource originalEvent = logger.buildEvent(Premis.note)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a729f6addaf7c8a679ebfe54d3186a1e0945a1f"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "775b6f15030de74b9d5747b5bd2102f81db94d3f", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/775b6f15030de74b9d5747b5bd2102f81db94d3f", "committedDate": "2020-07-08T18:42:33Z", "message": "Add more events to premis log for testing pid locking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a990d9eb8151752d3dde76872316afd9b115b316", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/a990d9eb8151752d3dde76872316afd9b115b316", "committedDate": "2020-07-08T18:46:49Z", "message": "Check first premis event after all events have been added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82115d33d80dca1263083dcffa2e82053bb6d628", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/82115d33d80dca1263083dcffa2e82053bb6d628", "committedDate": "2020-07-08T20:11:00Z", "message": "Add read lock to premis log"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb0fb76a8ea457f43905cd178dd3df61c1c2d1f9", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/eb0fb76a8ea457f43905cd178dd3df61c1c2d1f9", "committedDate": "2020-07-08T20:43:52Z", "message": "Close transfer session"}, "afterCommit": {"oid": "82115d33d80dca1263083dcffa2e82053bb6d628", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/82115d33d80dca1263083dcffa2e82053bb6d628", "committedDate": "2020-07-08T20:11:00Z", "message": "Add read lock to premis log"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44eb62d3ab3182b8530e5a56e6bf04723acb30d5", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/44eb62d3ab3182b8530e5a56e6bf04723acb30d5", "committedDate": "2020-07-09T12:57:24Z", "message": "Close input stream"}, "afterCommit": {"oid": "82115d33d80dca1263083dcffa2e82053bb6d628", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/82115d33d80dca1263083dcffa2e82053bb6d628", "committedDate": "2020-07-08T20:11:00Z", "message": "Add read lock to premis log"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f92d2921ab11157b6717160e89dfeb568c953baa", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/f92d2921ab11157b6717160e89dfeb568c953baa", "committedDate": "2020-07-09T13:22:58Z", "message": "Close input stream"}, "afterCommit": {"oid": "5a8513dffdaebd84f6278efd696a015e55f4948d", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/5a8513dffdaebd84f6278efd696a015e55f4948d", "committedDate": "2020-07-09T14:26:06Z", "message": "Close input streams"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a8513dffdaebd84f6278efd696a015e55f4948d", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/5a8513dffdaebd84f6278efd696a015e55f4948d", "committedDate": "2020-07-09T14:26:06Z", "message": "Close input streams"}, "afterCommit": {"oid": "532b5d8db1cf5e88d4114af258643be831a11c00", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/532b5d8db1cf5e88d4114af258643be831a11c00", "committedDate": "2020-07-09T14:51:04Z", "message": "Close input streams"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d1619359ef17cb59fe008de9ded44c5979a928e", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/8d1619359ef17cb59fe008de9ded44c5979a928e", "committedDate": "2020-07-09T15:04:38Z", "message": "Close input streams"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "532b5d8db1cf5e88d4114af258643be831a11c00", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/532b5d8db1cf5e88d4114af258643be831a11c00", "committedDate": "2020-07-09T14:51:04Z", "message": "Close input streams"}, "afterCommit": {"oid": "8d1619359ef17cb59fe008de9ded44c5979a928e", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/8d1619359ef17cb59fe008de9ded44c5979a928e", "committedDate": "2020-07-09T15:04:38Z", "message": "Close input streams"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af0f33409eed4ff2919e4e0b64ba9cf8b4856716", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/af0f33409eed4ff2919e4e0b64ba9cf8b4856716", "committedDate": "2020-07-09T15:16:48Z", "message": "Close more input streams"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b201c54b3e79ea20fc73807d1610d298dd185ffc", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/b201c54b3e79ea20fc73807d1610d298dd185ffc", "committedDate": "2020-07-13T13:04:43Z", "message": "Add tests for premis log read locks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5774c052c9a6f3064113f7788b8ccad88eb251b5", "author": {"user": {"login": "bbpennel", "name": "Ben Pennell"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/5774c052c9a6f3064113f7788b8ccad88eb251b5", "committedDate": "2020-07-14T19:18:45Z", "message": "Add unit test for PidLockManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c642f312d1c674bc95b66e6895476f637fc49537", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/c642f312d1c674bc95b66e6895476f637fc49537", "committedDate": "2020-07-16T15:39:46Z", "message": "Remove unnecessary InputStream closes and update pid locking tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "144dcc445dd1a6cdd2c6d4269492ba2215b80c93", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/144dcc445dd1a6cdd2c6d4269492ba2215b80c93", "committedDate": "2020-07-16T17:36:53Z", "message": "Wrap writeEvents method with finally block for unlocking the pid; specify pid for test events"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjI3NTgy", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#pullrequestreview-450227582", "createdAt": "2020-07-16T21:25:25Z", "commit": {"oid": "144dcc445dd1a6cdd2c6d4269492ba2215b80c93"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMToyNToyNVrOGy9Viw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMTo1MzowNFrOGy-Gxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4NjkyMw==", "bodyText": "At some point PID is going to become a interface, but this should be fine for now.", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#discussion_r456086923", "createdAt": "2020-07-16T21:25:25Z", "author": {"login": "bbpennel"}, "path": "fcrepo-clients/src/test/java/edu/unc/lib/dl/event/RepositoryPremisLoggerIT.java", "diffHunk": "@@ -166,4 +181,221 @@ public void getEventsModelForObjectWithoutLog() throws Exception {\n \n         assertTrue(eventsModel.isEmpty());\n     }\n+\n+    @Test\n+    public void makeMultipleChangesSimultaneously() throws InterruptedException {\n+        parentObject = repoObjFactory.createDepositRecord(null);\n+        initPremisLogger(parentObject);\n+\n+        // make sure that there are no events in premis log before the writes\n+        PremisLogger retrieveLogger = new RepositoryPremisLogger(parentObject, mockSession,\n+                pidMinter, repoObjLoader, repoObjFactory);\n+        Model initialLogModel = retrieveLogger.getEventsModel();\n+        assertFalse(\"New premis already contains events\", initialLogModel.listObjects().hasNext());\n+\n+        // add original event\n+        Resource originalEventResc = logger.buildEvent(Premis.note)\n+                .addEventDetail(\"first premis event\")\n+                .write();\n+\n+        // add new events\n+        List<Thread> threads = new ArrayList<>();\n+        List<Resource> events = new ArrayList<>();\n+        List<String> eventUris = new ArrayList<>();\n+\n+        Resource event1Resc = logger.buildEvent(Premis.VirusCheck)\n+                .addSoftwareAgent(SoftwareAgent.clamav.toString())\n+                .create();\n+        events.add(event1Resc);\n+\n+        Date ingestDate = Date.from(Instant.parse(\"2010-01-02T12:00:00Z\"));\n+        Resource event2Resc = logger.buildEvent(null, Premis.Ingestion, ingestDate)\n+                .addEventDetail(\"Ingested\")\n+                .create();\n+        events.add(event2Resc);\n+\n+        for (int i = 1; i <= 200; i++) {\n+            Resource anotherEvent = logger.buildEvent(new PID(\"event\" + System.currentTimeMillis() + i), Premis.note,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144dcc445dd1a6cdd2c6d4269492ba2215b80c93"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4Nzg5Nw==", "bodyText": "event1 and 2 here seem a little superfluous, seems like they are testing the same thing as the events from the loop. Maybe we should just have originalEvent and then all the events from the loop? It'd make the test a bit shorter and easier to understand what's being tested.", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#discussion_r456087897", "createdAt": "2020-07-16T21:27:38Z", "author": {"login": "bbpennel"}, "path": "fcrepo-clients/src/test/java/edu/unc/lib/dl/event/RepositoryPremisLoggerIT.java", "diffHunk": "@@ -166,4 +181,221 @@ public void getEventsModelForObjectWithoutLog() throws Exception {\n \n         assertTrue(eventsModel.isEmpty());\n     }\n+\n+    @Test\n+    public void makeMultipleChangesSimultaneously() throws InterruptedException {\n+        parentObject = repoObjFactory.createDepositRecord(null);\n+        initPremisLogger(parentObject);\n+\n+        // make sure that there are no events in premis log before the writes\n+        PremisLogger retrieveLogger = new RepositoryPremisLogger(parentObject, mockSession,\n+                pidMinter, repoObjLoader, repoObjFactory);\n+        Model initialLogModel = retrieveLogger.getEventsModel();\n+        assertFalse(\"New premis already contains events\", initialLogModel.listObjects().hasNext());\n+\n+        // add original event\n+        Resource originalEventResc = logger.buildEvent(Premis.note)\n+                .addEventDetail(\"first premis event\")\n+                .write();\n+\n+        // add new events\n+        List<Thread> threads = new ArrayList<>();\n+        List<Resource> events = new ArrayList<>();\n+        List<String> eventUris = new ArrayList<>();\n+\n+        Resource event1Resc = logger.buildEvent(Premis.VirusCheck)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144dcc445dd1a6cdd2c6d4269492ba2215b80c93"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5MDE1OQ==", "bodyText": "since the test isn't ever checking for the presence of this event, seems like we could probably remove it", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#discussion_r456090159", "createdAt": "2020-07-16T21:32:35Z", "author": {"login": "bbpennel"}, "path": "fcrepo-clients/src/test/java/edu/unc/lib/dl/event/RepositoryPremisLoggerIT.java", "diffHunk": "@@ -166,4 +181,221 @@ public void getEventsModelForObjectWithoutLog() throws Exception {\n \n         assertTrue(eventsModel.isEmpty());\n     }\n+\n+    @Test\n+    public void makeMultipleChangesSimultaneously() throws InterruptedException {\n+        parentObject = repoObjFactory.createDepositRecord(null);\n+        initPremisLogger(parentObject);\n+\n+        // make sure that there are no events in premis log before the writes\n+        PremisLogger retrieveLogger = new RepositoryPremisLogger(parentObject, mockSession,\n+                pidMinter, repoObjLoader, repoObjFactory);\n+        Model initialLogModel = retrieveLogger.getEventsModel();\n+        assertFalse(\"New premis already contains events\", initialLogModel.listObjects().hasNext());\n+\n+        // add original event\n+        Resource originalEventResc = logger.buildEvent(Premis.note)\n+                .addEventDetail(\"first premis event\")\n+                .write();\n+\n+        // add new events\n+        List<Thread> threads = new ArrayList<>();\n+        List<Resource> events = new ArrayList<>();\n+        List<String> eventUris = new ArrayList<>();\n+\n+        Resource event1Resc = logger.buildEvent(Premis.VirusCheck)\n+                .addSoftwareAgent(SoftwareAgent.clamav.toString())\n+                .create();\n+        events.add(event1Resc);\n+\n+        Date ingestDate = Date.from(Instant.parse(\"2010-01-02T12:00:00Z\"));\n+        Resource event2Resc = logger.buildEvent(null, Premis.Ingestion, ingestDate)\n+                .addEventDetail(\"Ingested\")\n+                .create();\n+        events.add(event2Resc);\n+\n+        for (int i = 1; i <= 200; i++) {\n+            Resource anotherEvent = logger.buildEvent(new PID(\"event\" + System.currentTimeMillis() + i), Premis.note,\n+                    ingestDate)\n+                    .addEventDetail(\"another premis event \" + i)\n+                    .create();\n+            eventUris.add(anotherEvent.getURI());\n+            events.add(anotherEvent);\n+        }\n+\n+        for (Resource event : events) {\n+            Runnable commitThread = new Runnable() {\n+                @Override\n+                public void run() {\n+                    logger.writeEvents(event);\n+                }\n+            };\n+            Thread thread = new Thread(commitThread);\n+            threads.add(thread);\n+        }\n+\n+        for (Thread thread : threads) {\n+            thread.start();\n+        }\n+\n+        for (Thread thread : threads) {\n+            thread.join();\n+        }\n+\n+        // check that the first event was added correctly\n+        Model logModel = retrieveLogger.getEventsModel();\n+        Resource logOriginalEventResc = logModel.getResource(originalEventResc.getURI());\n+        assertEquals(\"first premis event\", logOriginalEventResc.getProperty(Premis.note).getString());\n+\n+        // check rest of events\n+        Resource logEvent1Resc = logModel.getResource(event1Resc.getURI());\n+        assertTrue(logEvent1Resc.hasProperty(RDF.type, Premis.VirusCheck));\n+\n+        Resource logEvent2Resc = logModel.getResource(event2Resc.getURI());\n+        assertTrue(logEvent2Resc.hasProperty(RDF.type, Premis.Ingestion));\n+        assertEquals(\"2010-01-02T12:00:00.000Z\", logEvent2Resc.getProperty(DCTerms.date).getString());\n+\n+        int i = 1;\n+        for (String uri : eventUris) {\n+            Resource logEventResc = logModel.getResource(uri);\n+            assertEquals(\"another premis event \" + i, logEventResc.getProperty(Premis.note).getString());\n+            i++;\n+        }\n+    }\n+\n+    @Test\n+    public void allowSimultaneousReadLocks() throws InterruptedException {\n+        parentObject = repoObjFactory.createDepositRecord(null);\n+        initPremisLogger(parentObject);\n+\n+        // make sure that there are no events in premis log before the writes\n+        PremisLogger retrieveLogger = new RepositoryPremisLogger(parentObject, mockSession,\n+                pidMinter, repoObjLoader, repoObjFactory);\n+        Model initialLogModel = retrieveLogger.getEventsModel();\n+        assertFalse(\"New premis already contains events\", initialLogModel.listObjects().hasNext());\n+\n+        // add an event\n+        Resource event = logger.buildEvent(Premis.note)\n+                .addEventDetail(\"first premis event\")\n+                .write();\n+\n+        // create a read lock\n+        PID logPid = DatastreamPids.getMdEventsPid(parentObject.getPid());\n+        Lock logLock = lockManager.awaitReadLock(logPid);\n+\n+        // start a thread to read the log\n+        List<String> premisNotes = new ArrayList<>();\n+        Runnable readThreadRunnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                Model logModel = retrieveLogger.getEventsModel();\n+                Resource logEventResc = logModel.getResource(event.getURI());\n+                premisNotes.add(logEventResc.getProperty(Premis.note).getString());\n+            }\n+        };\n+        Thread readThread = new Thread(readThreadRunnable);\n+        readThread.start();\n+        readThread.join();\n+        assertEquals(\"first premis event\", premisNotes.get(0));\n+\n+        // release read lock\n+        logLock.unlock();\n+    }\n+\n+    @Test\n+    public void readLockWaitsForWriteLock() throws InterruptedException {\n+        parentObject = repoObjFactory.createDepositRecord(null);\n+        initPremisLogger(parentObject);\n+\n+        // make sure that there are no events in premis log before the writes\n+        PremisLogger retrieveLogger = new RepositoryPremisLogger(parentObject, mockSession,\n+                pidMinter, repoObjLoader, repoObjFactory);\n+        Model initialLogModel = retrieveLogger.getEventsModel();\n+        assertFalse(\"New premis already contains events\", initialLogModel.listObjects().hasNext());\n+\n+        // add event\n+        Resource event = logger.buildEvent(Premis.note)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144dcc445dd1a6cdd2c6d4269492ba2215b80c93"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5NTc0MQ==", "bodyText": "i'm not sure this is showing that the read waited for the write, since we aren't verifying the read hasn't completed before the write\nI think you would need to start the read and write threads at the same time, so set up threads in advance and then writeThread.start(); immediately followed by readThread.start();. You'd want to show that the read thread had not completed yet with premisNotes.size() == 0 before the writeThread.join();, and then that the event was present after.\nIn order to get the timing to work out reliably, in the writeThread you could do:\n\nget a write lock for the object\nstart the writeEvents operation\nsleep for 25ms\nrelease the write lock", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#discussion_r456095741", "createdAt": "2020-07-16T21:44:55Z", "author": {"login": "bbpennel"}, "path": "fcrepo-clients/src/test/java/edu/unc/lib/dl/event/RepositoryPremisLoggerIT.java", "diffHunk": "@@ -166,4 +181,221 @@ public void getEventsModelForObjectWithoutLog() throws Exception {\n \n         assertTrue(eventsModel.isEmpty());\n     }\n+\n+    @Test\n+    public void makeMultipleChangesSimultaneously() throws InterruptedException {\n+        parentObject = repoObjFactory.createDepositRecord(null);\n+        initPremisLogger(parentObject);\n+\n+        // make sure that there are no events in premis log before the writes\n+        PremisLogger retrieveLogger = new RepositoryPremisLogger(parentObject, mockSession,\n+                pidMinter, repoObjLoader, repoObjFactory);\n+        Model initialLogModel = retrieveLogger.getEventsModel();\n+        assertFalse(\"New premis already contains events\", initialLogModel.listObjects().hasNext());\n+\n+        // add original event\n+        Resource originalEventResc = logger.buildEvent(Premis.note)\n+                .addEventDetail(\"first premis event\")\n+                .write();\n+\n+        // add new events\n+        List<Thread> threads = new ArrayList<>();\n+        List<Resource> events = new ArrayList<>();\n+        List<String> eventUris = new ArrayList<>();\n+\n+        Resource event1Resc = logger.buildEvent(Premis.VirusCheck)\n+                .addSoftwareAgent(SoftwareAgent.clamav.toString())\n+                .create();\n+        events.add(event1Resc);\n+\n+        Date ingestDate = Date.from(Instant.parse(\"2010-01-02T12:00:00Z\"));\n+        Resource event2Resc = logger.buildEvent(null, Premis.Ingestion, ingestDate)\n+                .addEventDetail(\"Ingested\")\n+                .create();\n+        events.add(event2Resc);\n+\n+        for (int i = 1; i <= 200; i++) {\n+            Resource anotherEvent = logger.buildEvent(new PID(\"event\" + System.currentTimeMillis() + i), Premis.note,\n+                    ingestDate)\n+                    .addEventDetail(\"another premis event \" + i)\n+                    .create();\n+            eventUris.add(anotherEvent.getURI());\n+            events.add(anotherEvent);\n+        }\n+\n+        for (Resource event : events) {\n+            Runnable commitThread = new Runnable() {\n+                @Override\n+                public void run() {\n+                    logger.writeEvents(event);\n+                }\n+            };\n+            Thread thread = new Thread(commitThread);\n+            threads.add(thread);\n+        }\n+\n+        for (Thread thread : threads) {\n+            thread.start();\n+        }\n+\n+        for (Thread thread : threads) {\n+            thread.join();\n+        }\n+\n+        // check that the first event was added correctly\n+        Model logModel = retrieveLogger.getEventsModel();\n+        Resource logOriginalEventResc = logModel.getResource(originalEventResc.getURI());\n+        assertEquals(\"first premis event\", logOriginalEventResc.getProperty(Premis.note).getString());\n+\n+        // check rest of events\n+        Resource logEvent1Resc = logModel.getResource(event1Resc.getURI());\n+        assertTrue(logEvent1Resc.hasProperty(RDF.type, Premis.VirusCheck));\n+\n+        Resource logEvent2Resc = logModel.getResource(event2Resc.getURI());\n+        assertTrue(logEvent2Resc.hasProperty(RDF.type, Premis.Ingestion));\n+        assertEquals(\"2010-01-02T12:00:00.000Z\", logEvent2Resc.getProperty(DCTerms.date).getString());\n+\n+        int i = 1;\n+        for (String uri : eventUris) {\n+            Resource logEventResc = logModel.getResource(uri);\n+            assertEquals(\"another premis event \" + i, logEventResc.getProperty(Premis.note).getString());\n+            i++;\n+        }\n+    }\n+\n+    @Test\n+    public void allowSimultaneousReadLocks() throws InterruptedException {\n+        parentObject = repoObjFactory.createDepositRecord(null);\n+        initPremisLogger(parentObject);\n+\n+        // make sure that there are no events in premis log before the writes\n+        PremisLogger retrieveLogger = new RepositoryPremisLogger(parentObject, mockSession,\n+                pidMinter, repoObjLoader, repoObjFactory);\n+        Model initialLogModel = retrieveLogger.getEventsModel();\n+        assertFalse(\"New premis already contains events\", initialLogModel.listObjects().hasNext());\n+\n+        // add an event\n+        Resource event = logger.buildEvent(Premis.note)\n+                .addEventDetail(\"first premis event\")\n+                .write();\n+\n+        // create a read lock\n+        PID logPid = DatastreamPids.getMdEventsPid(parentObject.getPid());\n+        Lock logLock = lockManager.awaitReadLock(logPid);\n+\n+        // start a thread to read the log\n+        List<String> premisNotes = new ArrayList<>();\n+        Runnable readThreadRunnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                Model logModel = retrieveLogger.getEventsModel();\n+                Resource logEventResc = logModel.getResource(event.getURI());\n+                premisNotes.add(logEventResc.getProperty(Premis.note).getString());\n+            }\n+        };\n+        Thread readThread = new Thread(readThreadRunnable);\n+        readThread.start();\n+        readThread.join();\n+        assertEquals(\"first premis event\", premisNotes.get(0));\n+\n+        // release read lock\n+        logLock.unlock();\n+    }\n+\n+    @Test\n+    public void readLockWaitsForWriteLock() throws InterruptedException {\n+        parentObject = repoObjFactory.createDepositRecord(null);\n+        initPremisLogger(parentObject);\n+\n+        // make sure that there are no events in premis log before the writes\n+        PremisLogger retrieveLogger = new RepositoryPremisLogger(parentObject, mockSession,\n+                pidMinter, repoObjLoader, repoObjFactory);\n+        Model initialLogModel = retrieveLogger.getEventsModel();\n+        assertFalse(\"New premis already contains events\", initialLogModel.listObjects().hasNext());\n+\n+        // add event\n+        Resource event = logger.buildEvent(Premis.note)\n+                .addEventDetail(\"first premis event\")\n+                .write();\n+\n+        // start write thread\n+        Resource anotherEvent = logger.buildEvent(Premis.note)\n+                .addEventDetail(\"second premis event\")\n+                .create();\n+        Runnable writeThreadRunnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                logger.writeEvents(anotherEvent);\n+            }\n+        };\n+        Thread writeThread = new Thread(writeThreadRunnable);\n+        writeThread.start();\n+\n+        // start read thread\n+        List<String> premisNotes = new ArrayList<>();\n+        Runnable readThreadRunnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                Model logModel = retrieveLogger.getEventsModel();\n+                Resource logEventResc = logModel.getResource(anotherEvent.getURI());\n+                premisNotes.add(logEventResc.getProperty(Premis.note).getString());\n+            }\n+        };\n+        Thread readThread = new Thread(readThreadRunnable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144dcc445dd1a6cdd2c6d4269492ba2215b80c93"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5NzA2Mw==", "bodyText": "This test looks good, my only suggestion is that this event seems unnecessary", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#discussion_r456097063", "createdAt": "2020-07-16T21:47:54Z", "author": {"login": "bbpennel"}, "path": "fcrepo-clients/src/test/java/edu/unc/lib/dl/event/RepositoryPremisLoggerIT.java", "diffHunk": "@@ -166,4 +181,221 @@ public void getEventsModelForObjectWithoutLog() throws Exception {\n \n         assertTrue(eventsModel.isEmpty());\n     }\n+\n+    @Test\n+    public void makeMultipleChangesSimultaneously() throws InterruptedException {\n+        parentObject = repoObjFactory.createDepositRecord(null);\n+        initPremisLogger(parentObject);\n+\n+        // make sure that there are no events in premis log before the writes\n+        PremisLogger retrieveLogger = new RepositoryPremisLogger(parentObject, mockSession,\n+                pidMinter, repoObjLoader, repoObjFactory);\n+        Model initialLogModel = retrieveLogger.getEventsModel();\n+        assertFalse(\"New premis already contains events\", initialLogModel.listObjects().hasNext());\n+\n+        // add original event\n+        Resource originalEventResc = logger.buildEvent(Premis.note)\n+                .addEventDetail(\"first premis event\")\n+                .write();\n+\n+        // add new events\n+        List<Thread> threads = new ArrayList<>();\n+        List<Resource> events = new ArrayList<>();\n+        List<String> eventUris = new ArrayList<>();\n+\n+        Resource event1Resc = logger.buildEvent(Premis.VirusCheck)\n+                .addSoftwareAgent(SoftwareAgent.clamav.toString())\n+                .create();\n+        events.add(event1Resc);\n+\n+        Date ingestDate = Date.from(Instant.parse(\"2010-01-02T12:00:00Z\"));\n+        Resource event2Resc = logger.buildEvent(null, Premis.Ingestion, ingestDate)\n+                .addEventDetail(\"Ingested\")\n+                .create();\n+        events.add(event2Resc);\n+\n+        for (int i = 1; i <= 200; i++) {\n+            Resource anotherEvent = logger.buildEvent(new PID(\"event\" + System.currentTimeMillis() + i), Premis.note,\n+                    ingestDate)\n+                    .addEventDetail(\"another premis event \" + i)\n+                    .create();\n+            eventUris.add(anotherEvent.getURI());\n+            events.add(anotherEvent);\n+        }\n+\n+        for (Resource event : events) {\n+            Runnable commitThread = new Runnable() {\n+                @Override\n+                public void run() {\n+                    logger.writeEvents(event);\n+                }\n+            };\n+            Thread thread = new Thread(commitThread);\n+            threads.add(thread);\n+        }\n+\n+        for (Thread thread : threads) {\n+            thread.start();\n+        }\n+\n+        for (Thread thread : threads) {\n+            thread.join();\n+        }\n+\n+        // check that the first event was added correctly\n+        Model logModel = retrieveLogger.getEventsModel();\n+        Resource logOriginalEventResc = logModel.getResource(originalEventResc.getURI());\n+        assertEquals(\"first premis event\", logOriginalEventResc.getProperty(Premis.note).getString());\n+\n+        // check rest of events\n+        Resource logEvent1Resc = logModel.getResource(event1Resc.getURI());\n+        assertTrue(logEvent1Resc.hasProperty(RDF.type, Premis.VirusCheck));\n+\n+        Resource logEvent2Resc = logModel.getResource(event2Resc.getURI());\n+        assertTrue(logEvent2Resc.hasProperty(RDF.type, Premis.Ingestion));\n+        assertEquals(\"2010-01-02T12:00:00.000Z\", logEvent2Resc.getProperty(DCTerms.date).getString());\n+\n+        int i = 1;\n+        for (String uri : eventUris) {\n+            Resource logEventResc = logModel.getResource(uri);\n+            assertEquals(\"another premis event \" + i, logEventResc.getProperty(Premis.note).getString());\n+            i++;\n+        }\n+    }\n+\n+    @Test\n+    public void allowSimultaneousReadLocks() throws InterruptedException {\n+        parentObject = repoObjFactory.createDepositRecord(null);\n+        initPremisLogger(parentObject);\n+\n+        // make sure that there are no events in premis log before the writes\n+        PremisLogger retrieveLogger = new RepositoryPremisLogger(parentObject, mockSession,\n+                pidMinter, repoObjLoader, repoObjFactory);\n+        Model initialLogModel = retrieveLogger.getEventsModel();\n+        assertFalse(\"New premis already contains events\", initialLogModel.listObjects().hasNext());\n+\n+        // add an event\n+        Resource event = logger.buildEvent(Premis.note)\n+                .addEventDetail(\"first premis event\")\n+                .write();\n+\n+        // create a read lock\n+        PID logPid = DatastreamPids.getMdEventsPid(parentObject.getPid());\n+        Lock logLock = lockManager.awaitReadLock(logPid);\n+\n+        // start a thread to read the log\n+        List<String> premisNotes = new ArrayList<>();\n+        Runnable readThreadRunnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                Model logModel = retrieveLogger.getEventsModel();\n+                Resource logEventResc = logModel.getResource(event.getURI());\n+                premisNotes.add(logEventResc.getProperty(Premis.note).getString());\n+            }\n+        };\n+        Thread readThread = new Thread(readThreadRunnable);\n+        readThread.start();\n+        readThread.join();\n+        assertEquals(\"first premis event\", premisNotes.get(0));\n+\n+        // release read lock\n+        logLock.unlock();\n+    }\n+\n+    @Test\n+    public void readLockWaitsForWriteLock() throws InterruptedException {\n+        parentObject = repoObjFactory.createDepositRecord(null);\n+        initPremisLogger(parentObject);\n+\n+        // make sure that there are no events in premis log before the writes\n+        PremisLogger retrieveLogger = new RepositoryPremisLogger(parentObject, mockSession,\n+                pidMinter, repoObjLoader, repoObjFactory);\n+        Model initialLogModel = retrieveLogger.getEventsModel();\n+        assertFalse(\"New premis already contains events\", initialLogModel.listObjects().hasNext());\n+\n+        // add event\n+        Resource event = logger.buildEvent(Premis.note)\n+                .addEventDetail(\"first premis event\")\n+                .write();\n+\n+        // start write thread\n+        Resource anotherEvent = logger.buildEvent(Premis.note)\n+                .addEventDetail(\"second premis event\")\n+                .create();\n+        Runnable writeThreadRunnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                logger.writeEvents(anotherEvent);\n+            }\n+        };\n+        Thread writeThread = new Thread(writeThreadRunnable);\n+        writeThread.start();\n+\n+        // start read thread\n+        List<String> premisNotes = new ArrayList<>();\n+        Runnable readThreadRunnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                Model logModel = retrieveLogger.getEventsModel();\n+                Resource logEventResc = logModel.getResource(anotherEvent.getURI());\n+                premisNotes.add(logEventResc.getProperty(Premis.note).getString());\n+            }\n+        };\n+        Thread readThread = new Thread(readThreadRunnable);\n+        readThread.start();\n+\n+        // release write lock\n+        writeThread.join();\n+\n+        // attempt to read log and succeed\n+        readThread.join();\n+        assertEquals(\"second premis event\", premisNotes.get(0));\n+    }\n+\n+    @Test\n+    public void writeLockWaitsForReadLock() throws InterruptedException {\n+        parentObject = repoObjFactory.createDepositRecord(null);\n+        initPremisLogger(parentObject);\n+\n+        // make sure that there are no events in premis log before the writes\n+        PremisLogger retrieveLogger = new RepositoryPremisLogger(parentObject, mockSession,\n+                pidMinter, repoObjLoader, repoObjFactory);\n+        Model initialLogModel = retrieveLogger.getEventsModel();\n+        assertFalse(\"New premis already contains events\", initialLogModel.listObjects().hasNext());\n+\n+        // add an event\n+        logger.buildEvent(Premis.note)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144dcc445dd1a6cdd2c6d4269492ba2215b80c93"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5OTE5Mg==", "bodyText": "Its not doing any harm, but you don't need to close the stream in this case. Most InputStream read operations close the stream, and this particular one specifies that it does so https://commons.apache.org/proper/commons-io/javadocs/api-2.5/org/apache/commons/io/FileUtils.html#copyInputStreamToFile(java.io.InputStream,%20java.io.File)", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#discussion_r456099192", "createdAt": "2020-07-16T21:52:23Z", "author": {"login": "bbpennel"}, "path": "fcrepo-clients/src/test/java/edu/unc/lib/dl/event/RepositoryPremisLoggerIT.java", "diffHunk": "@@ -81,7 +93,10 @@ public void init() throws Exception {\n                     @Override\n                     public URI answer(InvocationOnMock invocation) throws Throwable {\n                         InputStream contentStream = invocation.getArgumentAt(1, InputStream.class);\n-                        copyInputStreamToFile(contentStream, path.toFile());\n+                        Path tempFilePath = createTempFile(\"temp_content\", null);\n+                        copyInputStreamToFile(contentStream, tempFilePath.toFile());\n+                        contentStream.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144dcc445dd1a6cdd2c6d4269492ba2215b80c93"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5OTUyNg==", "bodyText": "It should be fine to remove this catch and just go directly to the finally", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#discussion_r456099526", "createdAt": "2020-07-16T21:53:04Z", "author": {"login": "bbpennel"}, "path": "fcrepo-clients/src/main/java/edu/unc/lib/dl/event/RepositoryPremisLogger.java", "diffHunk": "@@ -101,54 +105,60 @@ public PremisEventBuilder buildEvent(Resource eventType) {\n \n     @Override\n     public PremisLogger writeEvents(Resource... eventResources) {\n-        Model logModel = ModelFactory.createDefaultModel();\n-\n-        Statement s = repoObject.getResource().getProperty(Cdr.hasEvents);\n-        boolean isNewLog = s == null;\n-\n-        // For new logs, add in representation statement\n-        if (isNewLog) {\n-            Resource repoObjResc = logModel.getResource(repoObject.getPid().getRepositoryPath());\n-            repoObjResc.addProperty(RDF.type, Premis.Representation);\n-        }\n-\n-        // Add new events to log\n-        for (Resource eventResc: eventResources) {\n-            logModel.add(eventResc.getModel());\n-        }\n-\n-        // Stream the event RDF as NTriples\n-        InputStream modelStream;\n+        PID objPid = repoObject.getPid();\n+        PID logPid = getMdEventsPid(objPid);\n+        Lock logLock = lockManager.awaitWriteLock(logPid);\n         try {\n-            modelStream = RDFModelUtil.streamModel(logModel, RDFFormat.NTRIPLES);\n-        } catch (IOException e) {\n-            throw new ObjectPersistenceException(\"Failed to serialize event to RDF for \" + repoObject.getPid(), e);\n-        }\n-\n-        // Premis event log not created yet\n-        if (isNewLog) {\n-            createLog(modelStream);\n-        } else {\n-            PID objPid = repoObject.getPid();\n-            log.debug(\"Adding events to PREMIS log for {}\", objPid);\n+            Model logModel = ModelFactory.createDefaultModel();\n \n-            PID logPid = getMdEventsPid(objPid);\n-            // Event log exists, append new events to it\n-            BinaryObject logObj = repoObjLoader.getBinaryObject(logPid);\n+            Statement s = repoObject.getResource().getProperty(Cdr.hasEvents);\n+            boolean isNewLog = s == null;\n \n-            InputStream newContentStream = new SequenceInputStream(\n-                    new ByteArrayInputStream(lineSeparator().getBytes(UTF_8)),\n-                    modelStream);\n+            // For new logs, add in representation statement\n+            if (isNewLog) {\n+                Resource repoObjResc = logModel.getResource(objPid.getRepositoryPath());\n+                repoObjResc.addProperty(RDF.type, Premis.Representation);\n+            }\n \n-            try (InputStream existingLogStream = logObj.getBinaryStream()) {\n-                InputStream mergedStream = new SequenceInputStream(\n-                        existingLogStream,\n-                        newContentStream);\n+            // Add new events to log\n+            for (Resource eventResc: eventResources) {\n+                logModel.add(eventResc.getModel());\n+            }\n \n-                updateOrCreateLog(mergedStream);\n+            // Stream the event RDF as NTriples\n+            InputStream modelStream;\n+            try {\n+                modelStream = RDFModelUtil.streamModel(logModel, RDFFormat.NTRIPLES);\n             } catch (IOException e) {\n-                throw new RepositoryException(\"Failed to close log existing stream\", e);\n+                throw new ObjectPersistenceException(\"Failed to serialize event to RDF for \" + objPid, e);\n+            }\n+\n+            // Premis event log not created yet\n+            if (isNewLog) {\n+                createLog(modelStream);\n+            } else {\n+                log.debug(\"Adding events to PREMIS log for {}\", objPid);\n+                // Event log exists, append new events to it\n+                BinaryObject logObj = repoObjLoader.getBinaryObject(logPid);\n+\n+                InputStream newContentStream = new SequenceInputStream(\n+                        new ByteArrayInputStream(lineSeparator().getBytes(UTF_8)),\n+                        modelStream);\n+\n+                try (InputStream existingLogStream = logObj.getBinaryStream()) {\n+                    InputStream mergedStream = new SequenceInputStream(\n+                            existingLogStream,\n+                            newContentStream);\n+\n+                    updateOrCreateLog(mergedStream);\n+                } catch (IOException e) {\n+                    throw new RepositoryException(\"Failed to close log existing stream\", e);\n+                }\n             }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144dcc445dd1a6cdd2c6d4269492ba2215b80c93"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70ee8b5d06a65a815f7b9159e22945e7fdbc593a", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/70ee8b5d06a65a815f7b9159e22945e7fdbc593a", "committedDate": "2020-07-17T13:22:22Z", "message": "Clean up and update tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57b041ceded1e2d69e90f40a6694b5f42e1c62da", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/57b041ceded1e2d69e90f40a6694b5f42e1c62da", "committedDate": "2020-07-20T16:53:49Z", "message": "Add sleep between write and read threads in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a92b8b25c160640a4bc1d62fde0e6c926d954e3", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/9a92b8b25c160640a4bc1d62fde0e6c926d954e3", "committedDate": "2020-07-20T17:31:34Z", "message": "Add sleep before releasing write lock in test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODU1ODgx", "url": "https://github.com/UNC-Libraries/box-c/pull/1030#pullrequestreview-451855881", "createdAt": "2020-07-20T18:29:03Z", "commit": {"oid": "9a92b8b25c160640a4bc1d62fde0e6c926d954e3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2236, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}