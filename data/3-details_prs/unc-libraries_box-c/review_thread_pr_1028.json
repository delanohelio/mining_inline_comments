{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NDQ2MTE5", "number": 1028, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoyNzo1M1rOEIhHYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTowMTo0NFrOEJPD3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzY2NjI3OnYy", "diffSide": "RIGHT", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoyNzo1M1rOGoh7xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoyNzo1M1rOGoh7xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MjE5Ng==", "bodyText": "Since we are starting from a valid URI (destUri) and adding components to it which are pretty tightly controlled and would represent a programming error if it produced an invalid uri, I think it would be fine to use URI.create and skip the error handling. The copy/move operation won't have taken place before the two calls of this method, so it should be just as safe without the rollback logic here, in which case you should be able to also remove the oldFileURI param from the method.\nOne other thing, it might be simpler to have this method take and produce a Paths, since I don't think you need the URI representation of new or old for any other purpose.", "url": "https://github.com/UNC-Libraries/box-c/pull/1028#discussion_r445152196", "createdAt": "2020-06-24T20:27:53Z", "author": {"login": "bbpennel"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "diffHunk": "@@ -69,30 +70,83 @@ public URI transferReplaceExisting(PID binPid, URI sourceFileUri) {\n \n     public URI transfer(PID binPid, URI sourceFileUri, boolean allowOverwrite) {\n         URI destUri = destination.getStorageUri(binPid);\n+        long currentTime = System.nanoTime();\n+        URI oldFileUri = createFileURI(destUri, \"old\", currentTime, null);\n \n         try {\n             // Fill in parent directories if they are not present\n             Path parentPath = Paths.get(destUri).getParent();\n             Files.createDirectories(parentPath);\n+            Path destinationPath = Paths.get(destUri);\n+            URI newFileUri = createFileURI(destUri, \"new\", currentTime, oldFileUri);\n \n+            // Rename old file .old extension\n+            if (allowOverwrite && Files.exists(destinationPath)) {\n+                Files.move(destinationPath, Paths.get(oldFileUri));\n+            }\n+\n+            // Copy/move new file\n             if (source.isReadOnly()) {\n-                Files.copy(Paths.get(sourceFileUri), Paths.get(destUri),\n+                Files.copy(Paths.get(sourceFileUri), Paths.get(newFileUri),\n                         allowOverwrite ? COPY_ALLOW_OVERWRITE : COPY_NO_OVERWRITE);\n             } else {\n-                Files.move(Paths.get(sourceFileUri), Paths.get(destUri),\n+                Files.move(Paths.get(sourceFileUri), Paths.get(newFileUri),\n                         allowOverwrite ? MOVE_ALLOW_OVERWRITE : MOVE_NO_OVERWRITE);\n             }\n+\n+            // Rename new file from .new extension\n+            Files.move(Paths.get(newFileUri), destinationPath);\n+\n+            // Delete old file\n+            Files.deleteIfExists(Paths.get(oldFileUri));\n         } catch (FileAlreadyExistsException e) {\n+            rollBackOldFile(oldFileUri, destUri);\n             throw new BinaryAlreadyExistsException(\"Failed to transfer \" + sourceFileUri\n                     + \", a binary already exists in \" + destination.getId() + \" at path \" + destUri);\n         } catch (IOException e) {\n+            rollBackOldFile(oldFileUri, destUri);\n             throw new BinaryTransferException(\"Failed to transfer \" + sourceFileUri\n                     + \" to destination \" + destination.getId(), e);\n         }\n \n         return destUri;\n     }\n \n+    private URI createFileURI(URI destUri, String type, long currentTime, URI oldFileURI) {\n+        URI fileUri;\n+\n+        try {\n+            fileUri = new URI(destUri + \".\" + type + \"-\" + currentTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a39367c69ba260d2c5ba3c60797008a210221327"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzY4MzA3OnYy", "diffSide": "RIGHT", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDozMjo1OFrOGoiGHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDozMjo1OFrOGoiGHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1NDg0Ng==", "bodyText": "you don't need to move the current file to old until after the new file is written. Waiting as long as possible to rename the current file should minimize the amount of time that there is no current file. Having no current file would make it so that reads would fail", "url": "https://github.com/UNC-Libraries/box-c/pull/1028#discussion_r445154846", "createdAt": "2020-06-24T20:32:58Z", "author": {"login": "bbpennel"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "diffHunk": "@@ -69,30 +70,83 @@ public URI transferReplaceExisting(PID binPid, URI sourceFileUri) {\n \n     public URI transfer(PID binPid, URI sourceFileUri, boolean allowOverwrite) {\n         URI destUri = destination.getStorageUri(binPid);\n+        long currentTime = System.nanoTime();\n+        URI oldFileUri = createFileURI(destUri, \"old\", currentTime, null);\n \n         try {\n             // Fill in parent directories if they are not present\n             Path parentPath = Paths.get(destUri).getParent();\n             Files.createDirectories(parentPath);\n+            Path destinationPath = Paths.get(destUri);\n+            URI newFileUri = createFileURI(destUri, \"new\", currentTime, oldFileUri);\n \n+            // Rename old file .old extension", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a39367c69ba260d2c5ba3c60797008a210221327"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzcwNzY2OnYy", "diffSide": "RIGHT", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo0MDo0OFrOGoiVzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo0MDo0OFrOGoiVzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1ODg2Mw==", "bodyText": "Since the new file will be written to a file with the .new-<nano> extension, you should be able to remove COPY_ALLOW_OVERWRITE and MOVE_ALLOW_OVERWRITE since it should be almost impossible to produce a naming collision, and if there is one then we would want it to fail one of the writes.\nInstead, I would suggest checking !allowOverwrite && Files.exists(destinationPath) before it starts doing any copies or moves, and throw the BinaryAlreadyExistsException right away. You might want to record the results of Files.exists(destinationPath) once since i think you're going to need to know that info for this purpose and for deciding if you need to move the current file to old.", "url": "https://github.com/UNC-Libraries/box-c/pull/1028#discussion_r445158863", "createdAt": "2020-06-24T20:40:48Z", "author": {"login": "bbpennel"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "diffHunk": "@@ -69,30 +70,83 @@ public URI transferReplaceExisting(PID binPid, URI sourceFileUri) {\n \n     public URI transfer(PID binPid, URI sourceFileUri, boolean allowOverwrite) {\n         URI destUri = destination.getStorageUri(binPid);\n+        long currentTime = System.nanoTime();\n+        URI oldFileUri = createFileURI(destUri, \"old\", currentTime, null);\n \n         try {\n             // Fill in parent directories if they are not present\n             Path parentPath = Paths.get(destUri).getParent();\n             Files.createDirectories(parentPath);\n+            Path destinationPath = Paths.get(destUri);\n+            URI newFileUri = createFileURI(destUri, \"new\", currentTime, oldFileUri);\n \n+            // Rename old file .old extension\n+            if (allowOverwrite && Files.exists(destinationPath)) {\n+                Files.move(destinationPath, Paths.get(oldFileUri));\n+            }\n+\n+            // Copy/move new file\n             if (source.isReadOnly()) {\n-                Files.copy(Paths.get(sourceFileUri), Paths.get(destUri),\n+                Files.copy(Paths.get(sourceFileUri), Paths.get(newFileUri),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a39367c69ba260d2c5ba3c60797008a210221327"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzcyOTc3OnYy", "diffSide": "RIGHT", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo0NzozOVrOGoijrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo0NzozOVrOGoijrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2MjQxNA==", "bodyText": "You can likely pass Paths in here instead of URIs", "url": "https://github.com/UNC-Libraries/box-c/pull/1028#discussion_r445162414", "createdAt": "2020-06-24T20:47:39Z", "author": {"login": "bbpennel"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "diffHunk": "@@ -69,30 +70,83 @@ public URI transferReplaceExisting(PID binPid, URI sourceFileUri) {\n \n     public URI transfer(PID binPid, URI sourceFileUri, boolean allowOverwrite) {\n         URI destUri = destination.getStorageUri(binPid);\n+        long currentTime = System.nanoTime();\n+        URI oldFileUri = createFileURI(destUri, \"old\", currentTime, null);\n \n         try {\n             // Fill in parent directories if they are not present\n             Path parentPath = Paths.get(destUri).getParent();\n             Files.createDirectories(parentPath);\n+            Path destinationPath = Paths.get(destUri);\n+            URI newFileUri = createFileURI(destUri, \"new\", currentTime, oldFileUri);\n \n+            // Rename old file .old extension\n+            if (allowOverwrite && Files.exists(destinationPath)) {\n+                Files.move(destinationPath, Paths.get(oldFileUri));\n+            }\n+\n+            // Copy/move new file\n             if (source.isReadOnly()) {\n-                Files.copy(Paths.get(sourceFileUri), Paths.get(destUri),\n+                Files.copy(Paths.get(sourceFileUri), Paths.get(newFileUri),\n                         allowOverwrite ? COPY_ALLOW_OVERWRITE : COPY_NO_OVERWRITE);\n             } else {\n-                Files.move(Paths.get(sourceFileUri), Paths.get(destUri),\n+                Files.move(Paths.get(sourceFileUri), Paths.get(newFileUri),\n                         allowOverwrite ? MOVE_ALLOW_OVERWRITE : MOVE_NO_OVERWRITE);\n             }\n+\n+            // Rename new file from .new extension\n+            Files.move(Paths.get(newFileUri), destinationPath);\n+\n+            // Delete old file\n+            Files.deleteIfExists(Paths.get(oldFileUri));\n         } catch (FileAlreadyExistsException e) {\n+            rollBackOldFile(oldFileUri, destUri);\n             throw new BinaryAlreadyExistsException(\"Failed to transfer \" + sourceFileUri\n                     + \", a binary already exists in \" + destination.getId() + \" at path \" + destUri);\n         } catch (IOException e) {\n+            rollBackOldFile(oldFileUri, destUri);\n             throw new BinaryTransferException(\"Failed to transfer \" + sourceFileUri\n                     + \" to destination \" + destination.getId(), e);\n         }\n \n         return destUri;\n     }\n \n+    private URI createFileURI(URI destUri, String type, long currentTime, URI oldFileURI) {\n+        URI fileUri;\n+\n+        try {\n+            fileUri = new URI(destUri + \".\" + type + \"-\" + currentTime);\n+            return fileUri;\n+        } catch (URISyntaxException e) {\n+            if (oldFileURI != null) {\n+                rollBackOldFile(oldFileURI, destUri);\n+            }\n+\n+            throw new BinaryTransferException(\"Failed to to create temp uri \"\n+                    + destUri + \".\" + type + \" for transfer \" + destUri\n+                    + \" to destination \" + destination.getId(), e);\n+        }\n+    }\n+\n+    /**\n+     * Roll back the file name if an error is thrown\n+     * @param oldFileUri\n+     * @param destUri\n+     */\n+    private void rollBackOldFile(URI oldFileUri, URI destUri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a39367c69ba260d2c5ba3c60797008a210221327"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzczMzAzOnYy", "diffSide": "RIGHT", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo0ODo0NVrOGoilyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo0ODo0NVrOGoilyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2Mjk1NQ==", "bodyText": "After this you should also check to see if the new file exists, and delete it if it does, so we don't end up with leftover new files.", "url": "https://github.com/UNC-Libraries/box-c/pull/1028#discussion_r445162955", "createdAt": "2020-06-24T20:48:45Z", "author": {"login": "bbpennel"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "diffHunk": "@@ -69,30 +70,83 @@ public URI transferReplaceExisting(PID binPid, URI sourceFileUri) {\n \n     public URI transfer(PID binPid, URI sourceFileUri, boolean allowOverwrite) {\n         URI destUri = destination.getStorageUri(binPid);\n+        long currentTime = System.nanoTime();\n+        URI oldFileUri = createFileURI(destUri, \"old\", currentTime, null);\n \n         try {\n             // Fill in parent directories if they are not present\n             Path parentPath = Paths.get(destUri).getParent();\n             Files.createDirectories(parentPath);\n+            Path destinationPath = Paths.get(destUri);\n+            URI newFileUri = createFileURI(destUri, \"new\", currentTime, oldFileUri);\n \n+            // Rename old file .old extension\n+            if (allowOverwrite && Files.exists(destinationPath)) {\n+                Files.move(destinationPath, Paths.get(oldFileUri));\n+            }\n+\n+            // Copy/move new file\n             if (source.isReadOnly()) {\n-                Files.copy(Paths.get(sourceFileUri), Paths.get(destUri),\n+                Files.copy(Paths.get(sourceFileUri), Paths.get(newFileUri),\n                         allowOverwrite ? COPY_ALLOW_OVERWRITE : COPY_NO_OVERWRITE);\n             } else {\n-                Files.move(Paths.get(sourceFileUri), Paths.get(destUri),\n+                Files.move(Paths.get(sourceFileUri), Paths.get(newFileUri),\n                         allowOverwrite ? MOVE_ALLOW_OVERWRITE : MOVE_NO_OVERWRITE);\n             }\n+\n+            // Rename new file from .new extension\n+            Files.move(Paths.get(newFileUri), destinationPath);\n+\n+            // Delete old file\n+            Files.deleteIfExists(Paths.get(oldFileUri));\n         } catch (FileAlreadyExistsException e) {\n+            rollBackOldFile(oldFileUri, destUri);\n             throw new BinaryAlreadyExistsException(\"Failed to transfer \" + sourceFileUri\n                     + \", a binary already exists in \" + destination.getId() + \" at path \" + destUri);\n         } catch (IOException e) {\n+            rollBackOldFile(oldFileUri, destUri);\n             throw new BinaryTransferException(\"Failed to transfer \" + sourceFileUri\n                     + \" to destination \" + destination.getId(), e);\n         }\n \n         return destUri;\n     }\n \n+    private URI createFileURI(URI destUri, String type, long currentTime, URI oldFileURI) {\n+        URI fileUri;\n+\n+        try {\n+            fileUri = new URI(destUri + \".\" + type + \"-\" + currentTime);\n+            return fileUri;\n+        } catch (URISyntaxException e) {\n+            if (oldFileURI != null) {\n+                rollBackOldFile(oldFileURI, destUri);\n+            }\n+\n+            throw new BinaryTransferException(\"Failed to to create temp uri \"\n+                    + destUri + \".\" + type + \" for transfer \" + destUri\n+                    + \" to destination \" + destination.getId(), e);\n+        }\n+    }\n+\n+    /**\n+     * Roll back the file name if an error is thrown\n+     * @param oldFileUri\n+     * @param destUri\n+     */\n+    private void rollBackOldFile(URI oldFileUri, URI destUri) {\n+        Path oldPath = Paths.get(oldFileUri);\n+\n+        if (Files.exists(oldPath)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a39367c69ba260d2c5ba3c60797008a210221327"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzcyMTgxOnYy", "diffSide": "RIGHT", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTo1ODoxNlrOGpJurQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTo1ODoxNlrOGpJurQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwNDIwNQ==", "bodyText": "this should be outside of the if since the new file can exist when there is no old file.", "url": "https://github.com/UNC-Libraries/box-c/pull/1028#discussion_r445804205", "createdAt": "2020-06-25T19:58:16Z", "author": {"login": "bbpennel"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "diffHunk": "@@ -69,30 +59,69 @@ public URI transferReplaceExisting(PID binPid, URI sourceFileUri) {\n \n     public URI transfer(PID binPid, URI sourceFileUri, boolean allowOverwrite) {\n         URI destUri = destination.getStorageUri(binPid);\n+        long currentTime = System.nanoTime();\n+        Path oldFilePath = createFilePath(destUri, \"old\", currentTime);\n+        Path newFilePath = createFilePath(destUri, \"new\", currentTime);\n+        Path destinationPath = Paths.get(destUri);\n \n         try {\n             // Fill in parent directories if they are not present\n             Path parentPath = Paths.get(destUri).getParent();\n             Files.createDirectories(parentPath);\n \n+            boolean destFileExists = Files.exists(destinationPath);\n+\n+            if (!allowOverwrite && destFileExists) {\n+                throw new BinaryAlreadyExistsException(\"Failed to transfer \" + sourceFileUri\n+                        + \", a binary already exists in \" + destination.getId() + \" at path \" + destUri);\n+            }\n+\n+            // Copy/move new file\n             if (source.isReadOnly()) {\n-                Files.copy(Paths.get(sourceFileUri), Paths.get(destUri),\n-                        allowOverwrite ? COPY_ALLOW_OVERWRITE : COPY_NO_OVERWRITE);\n+                Files.copy(Paths.get(sourceFileUri), newFilePath);\n             } else {\n-                Files.move(Paths.get(sourceFileUri), Paths.get(destUri),\n-                        allowOverwrite ? MOVE_ALLOW_OVERWRITE : MOVE_NO_OVERWRITE);\n+                Files.move(Paths.get(sourceFileUri), newFilePath);\n+            }\n+\n+            // Rename old file to .old extension\n+            if (destFileExists) {\n+                Files.move(destinationPath, oldFilePath);\n             }\n-        } catch (FileAlreadyExistsException e) {\n-            throw new BinaryAlreadyExistsException(\"Failed to transfer \" + sourceFileUri\n-                    + \", a binary already exists in \" + destination.getId() + \" at path \" + destUri);\n+            // Rename new file from .new extension\n+            Files.move(newFilePath, destinationPath);\n+            // Delete old file\n+            Files.deleteIfExists(oldFilePath);\n         } catch (IOException e) {\n+            rollBackOldFile(oldFilePath, newFilePath, destinationPath);\n             throw new BinaryTransferException(\"Failed to transfer \" + sourceFileUri\n                     + \" to destination \" + destination.getId(), e);\n         }\n \n         return destUri;\n     }\n \n+    private Path createFilePath(URI destUri, String type, long currentTime) {\n+            URI fileUri = URI.create(destUri + \".\" + type + \"-\" + currentTime);\n+            return Paths.get(fileUri);\n+    }\n+\n+    /**\n+     * Roll back the file name if an error is thrown\n+     * @param oldFilePath\n+     * @param destPath\n+     */\n+    private void rollBackOldFile(Path oldFilePath, Path newFilePath, Path destPath) {\n+        if (Files.exists(oldFilePath)) {\n+            try {\n+                Files.move(oldFilePath, destPath);\n+                Files.deleteIfExists(newFilePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47d51e18822f16220887b19fb370e73e51bb4e74"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzcyNDE4OnYy", "diffSide": "RIGHT", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTo1OTowN1rOGpJwRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTo1OTowN1rOGpJwRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwNDYxNQ==", "bodyText": "I believe we still want to include the COPY_ATTRIBUTES option here", "url": "https://github.com/UNC-Libraries/box-c/pull/1028#discussion_r445804615", "createdAt": "2020-06-25T19:59:07Z", "author": {"login": "bbpennel"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "diffHunk": "@@ -69,30 +59,69 @@ public URI transferReplaceExisting(PID binPid, URI sourceFileUri) {\n \n     public URI transfer(PID binPid, URI sourceFileUri, boolean allowOverwrite) {\n         URI destUri = destination.getStorageUri(binPid);\n+        long currentTime = System.nanoTime();\n+        Path oldFilePath = createFilePath(destUri, \"old\", currentTime);\n+        Path newFilePath = createFilePath(destUri, \"new\", currentTime);\n+        Path destinationPath = Paths.get(destUri);\n \n         try {\n             // Fill in parent directories if they are not present\n             Path parentPath = Paths.get(destUri).getParent();\n             Files.createDirectories(parentPath);\n \n+            boolean destFileExists = Files.exists(destinationPath);\n+\n+            if (!allowOverwrite && destFileExists) {\n+                throw new BinaryAlreadyExistsException(\"Failed to transfer \" + sourceFileUri\n+                        + \", a binary already exists in \" + destination.getId() + \" at path \" + destUri);\n+            }\n+\n+            // Copy/move new file\n             if (source.isReadOnly()) {\n-                Files.copy(Paths.get(sourceFileUri), Paths.get(destUri),\n-                        allowOverwrite ? COPY_ALLOW_OVERWRITE : COPY_NO_OVERWRITE);\n+                Files.copy(Paths.get(sourceFileUri), newFilePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47d51e18822f16220887b19fb370e73e51bb4e74"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzczODA5OnYy", "diffSide": "RIGHT", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDowMzozN1rOGpJ49g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDowMzozN1rOGpJ49g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwNjgzOA==", "bodyText": "There's actually already a transferFileAlreadyExists test which you could extend to check that no extra files are left over. For a test that could fail part way through, from my previous comment\n\nOne test would be to write a file to a directory, then call file.setReadOnly() on that file, then try to overwrite the file (with replace allowed). It should fail partway through, then you will want to verify that the current file still exists, and that there are no extra files in the directory. You'll might need to set file.setWriteable(true) afterwards so that you can delete the file when the test ends, but i haven't verified that.", "url": "https://github.com/UNC-Libraries/box-c/pull/1028#discussion_r445806838", "createdAt": "2020-06-25T20:03:37Z", "author": {"login": "bbpennel"}, "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClientTest.java", "diffHunk": "@@ -163,6 +163,22 @@ public void transferReplaceFileAlreadyExists() throws Exception {\n         assertFalse(\"Source file should not exist after transfer\", sourceFile.toFile().exists());\n     }\n \n+    @Test\n+    public void rollbackOnTransferInterruption() throws Exception {\n+        String existingContent = \"I exist\";\n+\n+        Files.createDirectories(binDestPath.getParent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47d51e18822f16220887b19fb370e73e51bb4e74"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDY5MTAwOnYy", "diffSide": "RIGHT", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxMDoyM1rOGpmmBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxMDoyM1rOGpmmBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3NzEyNQ==", "bodyText": "I think we only need COPY_NO_OVERWRITE at this point, an overwrite shouldn't occur and if it does we would want it to fail, which is what would happen in the move case", "url": "https://github.com/UNC-Libraries/box-c/pull/1028#discussion_r446277125", "createdAt": "2020-06-26T16:10:23Z", "author": {"login": "bbpennel"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "diffHunk": "@@ -69,30 +70,77 @@ public URI transferReplaceExisting(PID binPid, URI sourceFileUri) {\n \n     public URI transfer(PID binPid, URI sourceFileUri, boolean allowOverwrite) {\n         URI destUri = destination.getStorageUri(binPid);\n+        long currentTime = System.nanoTime();\n+        Path oldFilePath = createFilePath(destUri, \"old\", currentTime);\n+        Path newFilePath = createFilePath(destUri, \"new\", currentTime);\n+        Path destinationPath = Paths.get(destUri);\n \n         try {\n             // Fill in parent directories if they are not present\n             Path parentPath = Paths.get(destUri).getParent();\n             Files.createDirectories(parentPath);\n \n+            boolean destFileExists = Files.exists(destinationPath);\n+\n+            if (!allowOverwrite && destFileExists) {\n+                throw new BinaryAlreadyExistsException(\"Failed to transfer \" + sourceFileUri\n+                        + \", a binary already exists in \" + destination.getId() + \" at path \" + destUri);\n+            }\n+\n+            // Copy/move new file\n             if (source.isReadOnly()) {\n-                Files.copy(Paths.get(sourceFileUri), Paths.get(destUri),\n+                Files.copy(Paths.get(sourceFileUri), newFilePath,\n                         allowOverwrite ? COPY_ALLOW_OVERWRITE : COPY_NO_OVERWRITE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e010c153cf9765558aa6140b814a138495f8f1de"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDY5ODUxOnYy", "diffSide": "RIGHT", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxMjo0MFrOGpmqrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxMjo0MFrOGpmqrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3ODMxNg==", "bodyText": "You will also need to update the StreamToFSTransferClient with the roughly same safe write procedure.", "url": "https://github.com/UNC-Libraries/box-c/pull/1028#discussion_r446278316", "createdAt": "2020-06-26T16:12:40Z", "author": {"login": "bbpennel"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "diffHunk": "@@ -49,8 +50,8 @@\n \n     private static final CopyOption[] COPY_NO_OVERWRITE = { COPY_ATTRIBUTES };\n     private static final CopyOption[] COPY_ALLOW_OVERWRITE = { COPY_ATTRIBUTES, REPLACE_EXISTING };\n-    private static final CopyOption[] MOVE_NO_OVERWRITE = { };\n-    private static final CopyOption[] MOVE_ALLOW_OVERWRITE = { REPLACE_EXISTING };\n+\n+    private static final Logger log = LoggerFactory.getLogger(FSToFSTransferClient.class);\n \n     public FSToFSTransferClient(IngestSource source, StorageLocation destination) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e010c153cf9765558aa6140b814a138495f8f1de"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcwMjEzOnYy", "diffSide": "RIGHT", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxMzo1M1rOGpms9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxMzo1M1rOGpms9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3ODkwMQ==", "bodyText": "you can just delete the file here rather than waiting for exit", "url": "https://github.com/UNC-Libraries/box-c/pull/1028#discussion_r446278901", "createdAt": "2020-06-26T16:13:53Z", "author": {"login": "bbpennel"}, "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClientTest.java", "diffHunk": "@@ -163,6 +164,30 @@ public void transferReplaceFileAlreadyExists() throws Exception {\n         assertFalse(\"Source file should not exist after transfer\", sourceFile.toFile().exists());\n     }\n \n+    @Test\n+    public void rollbackOnTransferInterruption() throws Exception {\n+        String existingContent = \"I exist\";\n+        Path parentPath = binDestPath.getParent();\n+        Files.createDirectories(parentPath);\n+\n+        createFile(binDestPath, existingContent);\n+        Path sourceFile = createSourceFile();\n+\n+        File destFile = binDestPath.toFile();\n+        File parentDir = parentPath.toFile();\n+        parentDir.setReadOnly();\n+\n+        try {\n+            client.transferReplaceExisting(binPid, sourceFile.toUri());\n+        } catch (BinaryTransferException e) {\n+            assertTrue(\"Original file should be present\", destFile.exists());\n+            assertEquals(1, binDestPath.getParent().toFile().listFiles().length);\n+        } finally {\n+            parentDir.setWritable(true);\n+            destFile.deleteOnExit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e010c153cf9765558aa6140b814a138495f8f1de"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTE2NTA2OnYy", "diffSide": "RIGHT", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/StreamToFSTransferClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODo1MToxMlrOGprTxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODo1MToxMlrOGprTxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1NDM3NQ==", "bodyText": "I think you could move Path newFilePath = FileTransferHelpers.createFilePath(destUri, \"new\", currentTime); up from line 107 to be next to the Path oldFilePath initialization at line 80, and remove tmpPath here. I think tmpPath was trying to solve the same thing that createFilePath is doing. createTempFile comes with more protections against duplicate file names, but we would probably end up with a super long file name between the nano-time and the createTempFile generated suffix.", "url": "https://github.com/UNC-Libraries/box-c/pull/1028#discussion_r446354375", "createdAt": "2020-06-26T18:51:12Z", "author": {"login": "bbpennel"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/StreamToFSTransferClient.java", "diffHunk": "@@ -65,24 +69,43 @@ public URI transferReplaceExisting(PID binPid, InputStream sourceStream) {\n     protected URI writeStream(PID binPid, InputStream sourceStream, boolean allowOverwrite) {\n         URI destUri = destination.getStorageUri(binPid);\n         Path destPath = Paths.get(destUri);\n+        boolean destFileExists = destPath.toFile().exists();\n \n-        if (!allowOverwrite && destPath.toFile().exists()) {\n+        if (!allowOverwrite && destFileExists) {\n             throw new BinaryAlreadyExistsException(\"Failed to write stream, a binary already exists in \"\n                      + destination.getId() + \" at path \" + destUri);\n         }\n \n+        long currentTime = System.nanoTime();\n+        Path oldFilePath = FileTransferHelpers.createFilePath(destUri, \"old\", currentTime);\n+\n         try {\n             // Fill in parent directories if they are not present\n             Path parentPath = Paths.get(destUri).getParent();\n             createDirectories(parentPath);\n \n             // Write content to temp file in case of interruption\n-            Path tmpPath = createTempFile(parentPath, null, \".new\");\n+            Path tmpPath = createTempFile(parentPath, null, \".new-\" + currentTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57593b266fb52993da8c5ff0bf77bd9cb922d094"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTE4MjU2OnYy", "diffSide": "RIGHT", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/transfer/StreamToFSTransferClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODo1NzoyMVrOGprexg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODo1NzoyMVrOGprexg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1NzE5MA==", "bodyText": "Hmm, I'm a little confused, it seems like its using a mocked stream and then overwriting the file at the destination on the next line? Could you just merge these two lines into\nInputStream sourceStream = toStream(ORIGINAL_CONTENT);\n?", "url": "https://github.com/UNC-Libraries/box-c/pull/1028#discussion_r446357190", "createdAt": "2020-06-26T18:57:21Z", "author": {"login": "bbpennel"}, "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/transfer/StreamToFSTransferClientTest.java", "diffHunk": "@@ -139,6 +143,30 @@ public void transferReplaceExisting_ExistingFile_WriteFails() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void rollbackOnTransferInterruption() throws Exception {\n+        String existingContent = \"I exist\";\n+\n+        Files.createDirectories(binDestPath.getParent());\n+        createFile(binDestPath, existingContent);\n+        File destFile = binDestPath.toFile();\n+        File parentDir = binDestPath.getParent().toFile();\n+        parentDir.setReadOnly();\n+\n+        InputStream sourceStream = mock(InputStream.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57593b266fb52993da8c5ff0bf77bd9cb922d094"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTE5MzkwOnYy", "diffSide": "RIGHT", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/transfer/StreamToFSTransferClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTowMTo0NFrOGprl6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTowMTo0NFrOGprl6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1OTAxOQ==", "bodyText": "since you're adding this helper method, you should probably update the existing ExistingFile tests to use it since they are all doing it themselves with stuff like FileUtils.copyInputStreamToFile(toStream(ORIGINAL_CONTENT), binDestPath.toFile());", "url": "https://github.com/UNC-Libraries/box-c/pull/1028#discussion_r446359019", "createdAt": "2020-06-26T19:01:44Z", "author": {"login": "bbpennel"}, "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/transfer/StreamToFSTransferClientTest.java", "diffHunk": "@@ -147,4 +175,9 @@ protected void assertContent(Path path, String content) throws Exception {\n     protected InputStream toStream(String content) {\n         return new ByteArrayInputStream(content.getBytes());\n     }\n+\n+    private Path createFile(Path filePath, String content) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57593b266fb52993da8c5ff0bf77bd9cb922d094"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 635, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}