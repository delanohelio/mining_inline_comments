{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNTgzMTYy", "number": 1099, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1MzozNlrOEtKFfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1NTozMlrOEtKIcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzg2NjIzOnYy", "diffSide": "RIGHT", "path": "deposit/src/main/java/edu/unc/lib/deposit/fcrepo4/IngestContentObjectsJob.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1MzozNlrOHgywEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1MzozNlrOHgywEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0Nzk4Nw==", "bodyText": "might be simpler to perform the delay in the ChecksumMismatchException catch, it already has a block to check if retries are remaining and the automatic result would be there wouldn't be a delay until after the first try.", "url": "https://github.com/UNC-Libraries/box-c/pull/1099#discussion_r504147987", "createdAt": "2020-10-13T17:53:36Z", "author": {"login": "bbpennel"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/fcrepo4/IngestContentObjectsJob.java", "diffHunk": "@@ -396,6 +396,15 @@ private FileObject addFileToWork(WorkObject work, Resource childResc)\n         // Retry if there are checksum failures\n         for (int retryCnt = 1; retryCnt <= CHECKSUM_RETRIES; retryCnt++) {\n             try {\n+                if (retryCnt > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f75caf4ee8bbc42a0f15f77acabf18316464c26"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzg3Mzc5OnYy", "diffSide": "RIGHT", "path": "deposit/src/main/java/edu/unc/lib/deposit/fcrepo4/IngestContentObjectsJob.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1NTozMlrOHgy0iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1NTozMlrOHgy0iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0OTEyOQ==", "bodyText": "rather than eating the interrupt, could you rethrow it as a JobInterruptedException? Shouldn't need an extra log statement in that case.", "url": "https://github.com/UNC-Libraries/box-c/pull/1099#discussion_r504149129", "createdAt": "2020-10-13T17:55:32Z", "author": {"login": "bbpennel"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/fcrepo4/IngestContentObjectsJob.java", "diffHunk": "@@ -396,6 +396,15 @@ private FileObject addFileToWork(WorkObject work, Resource childResc)\n         // Retry if there are checksum failures\n         for (int retryCnt = 1; retryCnt <= CHECKSUM_RETRIES; retryCnt++) {\n             try {\n+                if (retryCnt > 1) {\n+                    try {\n+                        Thread.sleep(retryCnt * 1000);\n+                    } catch (InterruptedException e) {\n+                        log.debug(\"Retry ingest pause for {} due to a checksum mismatch, {} retries remaining: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f75caf4ee8bbc42a0f15f77acabf18316464c26"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 570, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}