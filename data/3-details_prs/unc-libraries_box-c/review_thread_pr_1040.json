{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NDI0ODcx", "number": 1040, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzowNDo1OVrOENRIag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzoxMDozOFrOENRQHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQ3NjI2OnYy", "diffSide": "RIGHT", "path": "deposit/src/main/java/edu/unc/lib/deposit/normalize/BagIt2N3BagJob.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzowNDo1OVrOGv2jJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDozNjozN1rOGv52hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyOTk5MQ==", "bodyText": "Would this cause any noticeable slowdown in ingest, checking for interruptions so often in succession?", "url": "https://github.com/UNC-Libraries/box-c/pull/1040#discussion_r452829991", "createdAt": "2020-07-10T13:04:59Z", "author": {"login": "lfarrell"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/normalize/BagIt2N3BagJob.java", "diffHunk": "@@ -92,10 +92,14 @@ public void runJob() {\n             MandatoryVerifier.checkBagitFileExists(bagReader.getRootDir(), bagReader.getVersion());\n \n             try (BagVerifier verifier = new BagVerifier()) {\n+                interruptJobIfStopped();\n                 verifier.isComplete(bagReader, false);\n+                interruptJobIfStopped();\n                 verifier.isValid(bagReader, false);\n             }\n \n+            interruptJobIfStopped();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7726e75942f5796d8948c8fe7a860a8999e5c98"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg4NDEwMA==", "bodyText": "I tried to balance that by not adding too many of these checks in, and not adding them at all for some of the jobs that finish quickly. I decided which jobs to add it to by looking at the runtimes for each job in previous testing tickets. These checks should be pretty fast since redis is on the same server, and is generally very fast. But it is still a new cost.\nIn this particular case, there is a max of 3 calls for the job, unlike some of the others where it depends on the number of objects, so I'm not too worried about it in this case. I tried to place them in between long running steps, before it starts writing to the deposit model.", "url": "https://github.com/UNC-Libraries/box-c/pull/1040#discussion_r452884100", "createdAt": "2020-07-10T14:36:37Z", "author": {"login": "bbpennel"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/normalize/BagIt2N3BagJob.java", "diffHunk": "@@ -92,10 +92,14 @@ public void runJob() {\n             MandatoryVerifier.checkBagitFileExists(bagReader.getRootDir(), bagReader.getVersion());\n \n             try (BagVerifier verifier = new BagVerifier()) {\n+                interruptJobIfStopped();\n                 verifier.isComplete(bagReader, false);\n+                interruptJobIfStopped();\n                 verifier.isValid(bagReader, false);\n             }\n \n+            interruptJobIfStopped();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyOTk5MQ=="}, "originalCommit": {"oid": "f7726e75942f5796d8948c8fe7a860a8999e5c98"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQ4OTg2OnYy", "diffSide": "RIGHT", "path": "deposit/src/test/java/edu/unc/lib/deposit/fcrepo4/IngestContentObjectsJobTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzowODo1OVrOGv2rRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDozOTo0MVrOGv59ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzMjA2OA==", "bodyText": "Does DepositState.running need to be here twice?", "url": "https://github.com/UNC-Libraries/box-c/pull/1040#discussion_r452832068", "createdAt": "2020-07-10T13:08:59Z", "author": {"login": "lfarrell"}, "path": "deposit/src/test/java/edu/unc/lib/deposit/fcrepo4/IngestContentObjectsJobTest.java", "diffHunk": "@@ -441,6 +450,52 @@ public void resumeIngestWorkObjectTest() throws Exception {\n         verify(jobStatusFactory).setTotalCompletion(eq(jobUUID), eq(3));\n     }\n \n+    @Test\n+    public void pauseAndResumeTest() throws Exception {\n+        PID workPid = makePid(RepositoryPathConstants.CONTENT_BASE);\n+        WorkObject work = mock(WorkObject.class);\n+        Bag workBag = setupWork(workPid, work);\n+\n+        String mainLoc = \"pdf.pdf\";\n+        String mainMime = \"application/pdf\";\n+        PID mainPid = addFileObject(workBag, mainLoc, mainMime);\n+\n+        workBag.addProperty(Cdr.primaryObject, model.getResource(mainPid.getRepositoryPath()));\n+\n+        job.closeModel();\n+\n+        when(work.addDataFile(any(PID.class), any(URI.class),\n+                anyString(), anyString(), anyString(), anyString(), any(Model.class)))\n+                .thenReturn(mockFileObj);\n+        when(mockFileObj.getPid()).thenReturn(mainPid);\n+\n+        when(depositStatusFactory.getState(depositUUID))\n+                .thenReturn(DepositState.running)\n+                .thenReturn(DepositState.running)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7726e75942f5796d8948c8fe7a860a8999e5c98"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg4NTg2MQ==", "bodyText": "when multiple thenReturns are chained like this, it means the first and second calls of getState will return running, and then all calls after that will return paused. So the number of runnings depended on the number of calls expected", "url": "https://github.com/UNC-Libraries/box-c/pull/1040#discussion_r452885861", "createdAt": "2020-07-10T14:39:41Z", "author": {"login": "bbpennel"}, "path": "deposit/src/test/java/edu/unc/lib/deposit/fcrepo4/IngestContentObjectsJobTest.java", "diffHunk": "@@ -441,6 +450,52 @@ public void resumeIngestWorkObjectTest() throws Exception {\n         verify(jobStatusFactory).setTotalCompletion(eq(jobUUID), eq(3));\n     }\n \n+    @Test\n+    public void pauseAndResumeTest() throws Exception {\n+        PID workPid = makePid(RepositoryPathConstants.CONTENT_BASE);\n+        WorkObject work = mock(WorkObject.class);\n+        Bag workBag = setupWork(workPid, work);\n+\n+        String mainLoc = \"pdf.pdf\";\n+        String mainMime = \"application/pdf\";\n+        PID mainPid = addFileObject(workBag, mainLoc, mainMime);\n+\n+        workBag.addProperty(Cdr.primaryObject, model.getResource(mainPid.getRepositoryPath()));\n+\n+        job.closeModel();\n+\n+        when(work.addDataFile(any(PID.class), any(URI.class),\n+                anyString(), anyString(), anyString(), anyString(), any(Model.class)))\n+                .thenReturn(mockFileObj);\n+        when(mockFileObj.getPid()).thenReturn(mainPid);\n+\n+        when(depositStatusFactory.getState(depositUUID))\n+                .thenReturn(DepositState.running)\n+                .thenReturn(DepositState.running)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzMjA2OA=="}, "originalCommit": {"oid": "f7726e75942f5796d8948c8fe7a860a8999e5c98"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQ5NTk2OnYy", "diffSide": "RIGHT", "path": "deposit/src/test/java/edu/unc/lib/deposit/validate/VirusScanJobTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzoxMDozOFrOGv2u1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDo0MDo1OFrOGv6AqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzMjk4MA==", "bodyText": "Same here, does it need to be here twice?", "url": "https://github.com/UNC-Libraries/box-c/pull/1040#discussion_r452832980", "createdAt": "2020-07-10T13:10:38Z", "author": {"login": "lfarrell"}, "path": "deposit/src/test/java/edu/unc/lib/deposit/validate/VirusScanJobTest.java", "diffHunk": "@@ -233,6 +234,49 @@ public void errorScanTest() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void pauseScanTest() throws Exception {\n+        when(scanResult.getStatus()).thenReturn(Status.PASSED);\n+\n+        Model model = job.getWritableModel();\n+        Bag depBag = model.createBag(depositPid.getRepositoryPath());\n+\n+        File pdfFile = new File(depositDir, \"pdf.pdf\");\n+        File textFile = new File(depositDir, \"text.txt\");\n+        PID file1Pid = addFileObject(depBag, pdfFile);\n+        PID file2Pid = addFileObject(depBag, textFile);\n+\n+        // Should be running for the first file, then paused\n+        when(depositStatusFactory.getState(depositUUID))\n+                .thenReturn(DepositState.running)\n+                .thenReturn(DepositState.running)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7726e75942f5796d8948c8fe7a860a8999e5c98"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg4NjY5Ng==", "bodyText": "this was so it would register as \"paused\" on the second file, since there is now an interrupt check at the beginning of every deposit job.", "url": "https://github.com/UNC-Libraries/box-c/pull/1040#discussion_r452886696", "createdAt": "2020-07-10T14:40:58Z", "author": {"login": "bbpennel"}, "path": "deposit/src/test/java/edu/unc/lib/deposit/validate/VirusScanJobTest.java", "diffHunk": "@@ -233,6 +234,49 @@ public void errorScanTest() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void pauseScanTest() throws Exception {\n+        when(scanResult.getStatus()).thenReturn(Status.PASSED);\n+\n+        Model model = job.getWritableModel();\n+        Bag depBag = model.createBag(depositPid.getRepositoryPath());\n+\n+        File pdfFile = new File(depositDir, \"pdf.pdf\");\n+        File textFile = new File(depositDir, \"text.txt\");\n+        PID file1Pid = addFileObject(depBag, pdfFile);\n+        PID file2Pid = addFileObject(depBag, textFile);\n+\n+        // Should be running for the first file, then paused\n+        when(depositStatusFactory.getState(depositUUID))\n+                .thenReturn(DepositState.running)\n+                .thenReturn(DepositState.running)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzMjk4MA=="}, "originalCommit": {"oid": "f7726e75942f5796d8948c8fe7a860a8999e5c98"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 660, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}