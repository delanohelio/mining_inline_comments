{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjA2NzM3", "number": 983, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMjo1NDo0NVrOD6oVeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoxOTo0MFrOD8I_5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODA0ODU4OnYy", "diffSide": "RIGHT", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMjo1NDo0NVrOGSki0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMjo1NDo0NVrOGSki0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEyNjI4OQ==", "bodyText": "think you can remove this one, its not used in this test", "url": "https://github.com/UNC-Libraries/box-c/pull/983#discussion_r422126289", "createdAt": "2020-05-08T12:54:45Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "diffHunk": "@@ -121,6 +122,9 @@\n     @BeanInject(value = \"fulltextProcessor\")\n     private FulltextProcessor fulltextProcessor;\n \n+    @BeanInject(value = \"addFullTextDerivativeProcessor\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6131c1af48c73bf94a3b63c60b2e498a295bdfcf"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODA2OTkxOnYy", "diffSide": "RIGHT", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/fulltext/FulltextRouterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzowMjowMlrOGSkvqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzowMjowMlrOGSkvqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEyOTU3Ng==", "bodyText": "You can probably skip these delete steps since you have the @After method which recursively deletes the dir. If you didn't, this delete could be problematic since if the test failed it wouldn't delete the file.", "url": "https://github.com/UNC-Libraries/box-c/pull/983#discussion_r422129576", "createdAt": "2020-05-08T13:02:02Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/fulltext/FulltextRouterTest.java", "diffHunk": "@@ -60,14 +74,60 @@ protected AbstractApplicationContext createApplicationContext() {\n         return new ClassPathXmlApplicationContext(\"/service-context.xml\", \"/fulltext-context.xml\");\n     }\n \n+    @After\n+    public void cleanup() throws IOException {\n+        FileUtils.deleteDirectory(new File(\"target/34\"));\n+    }\n+\n+    @Test\n+    public void testFullTextExtractionFilterValidMimeTypeNoForceNoExistingFile() throws Exception {\n+        getMockEndpoint(\"mock:direct:fulltext.extraction\").expectedMessageCount(1);\n+        createContext(ENHANCEMENT_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent());\n+        assertMockEndpointsSatisfied();\n+    }\n+\n     @Test\n-    public void testFullTextExtractionFilterValidMimeType() throws Exception {\n+    public void testFullTextExtractionFilterValidMimeTypeForceNoExistingFile() throws Exception {\n         getMockEndpoint(\"mock:direct:fulltext.extraction\").expectedMessageCount(1);\n         createContext(ENHANCEMENT_ROUTE);\n \n+        Map<String, Object> headers = createEvent();\n+        headers.put(\"force\", \"true\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testFullTextExtractionFilterValidMimeTypeNoForceExistingFile() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".txt\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        getMockEndpoint(\"mock:direct:fulltext.extraction\").expectedMessageCount(0);\n+        createContext(ENHANCEMENT_ROUTE);\n+\n+        Map<String, Object> headers = createEvent();\n         template.sendBodyAndHeaders(\"\", createEvent());\n+        assertMockEndpointsSatisfied();\n+        existingFile.delete();\n+    }\n+\n+    @Test\n+    public void testFullTextExtractionFilterValidMimeTypeForceExistingFile() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".txt\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        getMockEndpoint(\"mock:direct:fulltext.extraction\").expectedMessageCount(1);\n+        createContext(ENHANCEMENT_ROUTE);\n \n+        Map<String, Object> headers = createEvent();\n+        headers.put(\"force\", \"true\");\n+        template.sendBodyAndHeaders(\"\", headers);\n         assertMockEndpointsSatisfied();\n+        existingFile.delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6131c1af48c73bf94a3b63c60b2e498a295bdfcf"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODA3NzAzOnYy", "diffSide": "RIGHT", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzowNDoyN1rOGSk0Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzowNDoyN1rOGSk0Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMDY5MA==", "bodyText": "Can remove these in this class as well", "url": "https://github.com/UNC-Libraries/box-c/pull/983#discussion_r422130690", "createdAt": "2020-05-08T13:04:27Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java", "diffHunk": "@@ -123,40 +150,146 @@ public void testThumbDisallowedImageType() throws Exception {\n     }\n \n     @Test\n-    public void testThumbSmallRoute() throws Exception {\n+    public void testThumbSmallRouteNoForceNoFileExists() throws Exception {\n         createContext(smallThumbRoute);\n \n         getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n-        Map<String, Object> headers = createEvent(fileID, eventTypes);\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testThumbSmallRouteForceNoFileExists() throws Exception {\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n         template.sendBodyAndHeaders(\"\", headers);\n \n         verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n         assertMockEndpointsSatisfied();\n     }\n \n     @Test\n-    public void testThumbLargeRoute() throws Exception {\n+    public void testThumbSmallRouteNoForceFileExists() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".png\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(0);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+        existingFile.delete();\n+    }\n+\n+    @Test\n+    public void testThumbSmallRouteForceFileExists() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".png\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+        existingFile.delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6131c1af48c73bf94a3b63c60b2e498a295bdfcf"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODA4MjE0OnYy", "diffSide": "RIGHT", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzowNjoxNVrOGSk3Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzowNjoxNVrOGSk3Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMTQ5NA==", "bodyText": "Is this throw serving a purpose here? Doesn't seem like what you'd expect in a successful case", "url": "https://github.com/UNC-Libraries/box-c/pull/983#discussion_r422131494", "createdAt": "2020-05-08T13:06:15Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java", "diffHunk": "@@ -123,40 +150,146 @@ public void testThumbDisallowedImageType() throws Exception {\n     }\n \n     @Test\n-    public void testThumbSmallRoute() throws Exception {\n+    public void testThumbSmallRouteNoForceNoFileExists() throws Exception {\n         createContext(smallThumbRoute);\n \n         getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n-        Map<String, Object> headers = createEvent(fileID, eventTypes);\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testThumbSmallRouteForceNoFileExists() throws Exception {\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n         template.sendBodyAndHeaders(\"\", headers);\n \n         verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n         assertMockEndpointsSatisfied();\n     }\n \n     @Test\n-    public void testThumbLargeRoute() throws Exception {\n+    public void testThumbSmallRouteNoForceFileExists() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".png\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(0);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+        existingFile.delete();\n+    }\n+\n+    @Test\n+    public void testThumbSmallRouteForceFileExists() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".png\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+        existingFile.delete();\n+    }\n+\n+    @Test\n+    public void testThumbLargeRouteNoForceNoFileExists() throws Exception {\n         createContext(largeThumbRoute);\n \n         getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n-        Map<String, Object> headers = createEvent(fileID, eventTypes);\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n \n         template.sendBodyAndHeaders(\"\", headers);\n \n+        doThrow(Exception.class).when(addLargeThumbnailProcessor).process(any(Exchange.class));\n+\n         verify(addLargeThumbnailProcessor).process(any(Exchange.class));\n         assertMockEndpointsSatisfied();\n     }\n \n     @Test\n-    public void testAccessCopyRoute() throws Exception {\n+    public void testThumbLargeRouteForceNoFileExists() throws Exception {\n+        createContext(largeThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n+\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        doThrow(Exception.class).when(addLargeThumbnailProcessor).process(any(Exchange.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6131c1af48c73bf94a3b63c60b2e498a295bdfcf"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODA4NDU0OnYy", "diffSide": "RIGHT", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzowNzowMVrOGSk4mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzowNzowMVrOGSk4mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMTg2Nw==", "bodyText": "same question for this throw, plus you can probably remove the delete below", "url": "https://github.com/UNC-Libraries/box-c/pull/983#discussion_r422131867", "createdAt": "2020-05-08T13:07:01Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java", "diffHunk": "@@ -123,40 +150,146 @@ public void testThumbDisallowedImageType() throws Exception {\n     }\n \n     @Test\n-    public void testThumbSmallRoute() throws Exception {\n+    public void testThumbSmallRouteNoForceNoFileExists() throws Exception {\n         createContext(smallThumbRoute);\n \n         getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n-        Map<String, Object> headers = createEvent(fileID, eventTypes);\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testThumbSmallRouteForceNoFileExists() throws Exception {\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n         template.sendBodyAndHeaders(\"\", headers);\n \n         verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n         assertMockEndpointsSatisfied();\n     }\n \n     @Test\n-    public void testThumbLargeRoute() throws Exception {\n+    public void testThumbSmallRouteNoForceFileExists() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".png\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(0);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+        existingFile.delete();\n+    }\n+\n+    @Test\n+    public void testThumbSmallRouteForceFileExists() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".png\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+        existingFile.delete();\n+    }\n+\n+    @Test\n+    public void testThumbLargeRouteNoForceNoFileExists() throws Exception {\n         createContext(largeThumbRoute);\n \n         getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n-        Map<String, Object> headers = createEvent(fileID, eventTypes);\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n \n         template.sendBodyAndHeaders(\"\", headers);\n \n+        doThrow(Exception.class).when(addLargeThumbnailProcessor).process(any(Exchange.class));\n+\n         verify(addLargeThumbnailProcessor).process(any(Exchange.class));\n         assertMockEndpointsSatisfied();\n     }\n \n     @Test\n-    public void testAccessCopyRoute() throws Exception {\n+    public void testThumbLargeRouteForceNoFileExists() throws Exception {\n+        createContext(largeThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n+\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        doThrow(Exception.class).when(addLargeThumbnailProcessor).process(any(Exchange.class));\n+\n+        verify(addLargeThumbnailProcessor).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testThumbLargeRouteNoForceFileExists() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".png\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+        createContext(largeThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(0);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n+\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        doThrow(Exception.class).when(addLargeThumbnailProcessor).process(any(Exchange.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6131c1af48c73bf94a3b63c60b2e498a295bdfcf"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzg4NTgzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoxOTo0MFrOGU5diQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoxOTo0MFrOGU5diQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2NjE1Mw==", "bodyText": "Hmm, I would rather leave it up to the enhancement processors to decide if anything needs to be done to an object rather than do it here, which we would need to remember to update in the future if more types of derivatives are added for non-files. So I'd suggest removing this and the conditional at 119. The shortcut to jump to the original ds is probably fine to keep.", "url": "https://github.com/UNC-Libraries/box-c/pull/983#discussion_r424566153", "createdAt": "2020-05-13T16:19:40Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "diffHunk": "@@ -110,11 +115,12 @@ public void setAclService(AccessControlService aclService) {\n     private void createMessage(BriefObjectMetadata metadata, String username, Boolean force) {\n         PID pid = metadata.getPid();\n         Datastream originalDs = metadata.getDatastreamObject(ORIGINAL_FILE.getId());\n-        if (originalDs == null) {\n+        Datastream hasThumbnail = metadata.getDatastreamObject(THUMBNAIL_SMALL.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81fa282484aa1c80de9b0fb170cea398dcd137d7"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 779, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}