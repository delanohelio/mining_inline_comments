{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3OTk5MTgx", "number": 959, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzozNDowOFrOD1ZJDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjoxOTowMFrOD2xgYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzEzMDM3OnYy", "diffSide": "RIGHT", "path": "access/src/main/java/edu/unc/lib/dl/ui/controller/FullRecordController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzozNDowOFrOGKz_RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzozNDowOFrOGKz_RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5MDcyNA==", "bodyText": "Would you be willing to break this out into its own utility class? Maybe in access-common. And then add a unit test for it so we can verify the behavior in a number of variations. I can help with the unit test if you would like, this just seems like something that is testable and would benefit from it.\nSome cases I would like to test:\n\nEmpty mods element\nMods document with a single top level element which is empty\nEmpty top level element\nEmpty nested element\nEmpty element with attributes\nDocument with multiple elements, 1 populated, 1 empty, 1 populated (to verify that both the preceding and succeeding elements are not lost or cause an error)\nElement containing only white space\nTriple nested empty element (for example, name/alternativeName/namePart)\nTop level element containing two children, one empty, one populated", "url": "https://github.com/UNC-Libraries/box-c/pull/959#discussion_r413990724", "createdAt": "2020-04-23T17:34:08Z", "author": {"login": "bbpennel"}, "path": "access/src/main/java/edu/unc/lib/dl/ui/controller/FullRecordController.java", "diffHunk": "@@ -260,6 +261,39 @@ private String Jp2Pid(List<String> datastream) {\n         return \"\";\n     }\n \n+    private Document removeEmptyNodes(Document doc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b546503f2157f22e3b8b26ec1ae9dc0dfa6253"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzI2NzM4OnYy", "diffSide": "RIGHT", "path": "access/src/main/webapp/WEB-INF/jsp/fullRecord/aggregateRecord.jsp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODowNToxNFrOGK1RQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODowNToxNFrOGK1RQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxMTcxNA==", "bodyText": "The inclusion of this section should be conditional on there being a MODS datastream. You might need to modify PermissionsHelper to add a hasDescriptionAccess method like the other ones in that file.", "url": "https://github.com/UNC-Libraries/box-c/pull/959#discussion_r414011714", "createdAt": "2020-04-23T18:05:14Z", "author": {"login": "bbpennel"}, "path": "access/src/main/webapp/WEB-INF/jsp/fullRecord/aggregateRecord.jsp", "diffHunk": "@@ -174,5 +174,6 @@\n \t\t</table>\n \t</div>\n </c:if>\n-\n+<h2 class=\"full-metadata\">Detailed Metadata</h2>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b546503f2157f22e3b8b26ec1ae9dc0dfa6253"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzI3ODYxOnYy", "diffSide": "RIGHT", "path": "static/js/public/fullRecord.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODowNzo0OFrOGK1YGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODowNzo0OFrOGK1YGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxMzQ2Nw==", "bodyText": "Might make more sense to return a response status of 404, but if it doesn't seem worth while at this time, we can live with it.", "url": "https://github.com/UNC-Libraries/box-c/pull/959#discussion_r414013467", "createdAt": "2020-04-23T18:07:48Z", "author": {"login": "bbpennel"}, "path": "static/js/public/fullRecord.js", "diffHunk": "@@ -73,6 +74,24 @@ define('fullRecord', ['module', 'jquery', 'JP2Viewer', 'StructureView', 'dataTab\n \t\t});\n \t}\n \n+\tif ($modsDisplay.length > 0) {\n+\t\t$.ajax({\n+\t\t\turl: \"/record/\" + $modsDisplay.attr(\"data-pid\") + \"/metadataView\",\n+\t\t\tdataType: \"html\",\n+\t\t\tsuccess: function(data) {\n+\t\t\t\tif (/^no.metadata/i.test($.trim(data))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b546503f2157f22e3b8b26ec1ae9dc0dfa6253"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzU5NjQxOnYy", "diffSide": "RIGHT", "path": "access-common/src/test/java/edu/unc/lib/dl/ui/util/ModsUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjoxNjo0MFrOGMry3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjoxNjo0MFrOGMry3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1MzYyOA==", "bodyText": "maybe rename this to \"emptyNestedWithAttributes\"?", "url": "https://github.com/UNC-Libraries/box-c/pull/959#discussion_r415953628", "createdAt": "2020-04-27T16:16:40Z", "author": {"login": "bbpennel"}, "path": "access-common/src/test/java/edu/unc/lib/dl/ui/util/ModsUtilTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.ui.util;\n+\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.MODS_V3_NS;\n+import static edu.unc.lib.dl.xml.SecureXMLFactory.createSAXBuilder;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.jdom2.JDOMException;\n+import org.jdom2.input.SAXBuilder;\n+import org.junit.Test;\n+\n+/**\n+ * @author lfarrell\n+ */\n+public class ModsUtilTest {\n+    @Test\n+    public void emptyMods() throws JDOMException, IOException {\n+        String modsString = \"<mods xmlns=\\\"http://www.loc.gov/mods/v3\\\"></mods>\";\n+        Document modsDoc = buildMods(modsString);\n+        assertEquals(0, modsDoc.getRootElement().getChildren().size());\n+    }\n+\n+    @Test\n+    public void emptyTopLevel() throws JDOMException, IOException {\n+        String modsString = \"<mods xmlns=\\\"http://www.loc.gov/mods/v3\\\">\" +\n+                \"  <titleInfo>\" +\n+                \"  </titleInfo>\" +\n+                \"</mods>\";\n+\n+        Document modsDoc = buildMods(modsString);\n+        assertEquals(0, modsDoc.getRootElement().getChildren().size());\n+    }\n+\n+    @Test\n+    public void emptyNested() throws JDOMException, IOException {\n+    String modsString = \"<mods xmlns=\\\"http://www.loc.gov/mods/v3\\\">\" +\n+            \"  <titleInfo>\" +\n+            \"    <title></title>\" +\n+            \"  </titleInfo>\" +\n+            \"</mods>\";\n+\n+        Document modsDoc = buildMods(modsString);\n+        assertEquals(0, modsDoc.getRootElement().getChildren().size());\n+    }\n+\n+    @Test\n+    public void emptyNestedWithAttributes() throws JDOMException, IOException {\n+        String modsString = \"<mods xmlns=\\\"http://www.loc.gov/mods/v3\\\">\" +\n+                \"  <titleInfo displayLabel=\\\"test item\\\">\" +\n+                \"    <title></title>\" +\n+                \"  </titleInfo>\" +\n+                \"</mods>\";\n+\n+        Document modsDoc = buildMods(modsString);\n+        assertEquals(0, modsDoc.getRootElement().getChildren().size());\n+    }\n+\n+    @Test\n+    public void sameLevelAllEmpty() throws JDOMException, IOException {\n+        String modsString = \"<mods xmlns=\\\"http://www.loc.gov/mods/v3\\\">\" +\n+                \"  <titleInfo>\" +\n+                \"    <title></title>\" +\n+                \"  </titleInfo>\" +\n+                \"  <genre authority=\\\"gmgpc\\\"></genre>\" +\n+                \"</mods>\";\n+\n+        Document modsDoc = buildMods(modsString);\n+        assertEquals(0, modsDoc.getRootElement().getChildren().size());\n+    }\n+\n+    @Test\n+    public void deeplyNestedWithText() throws JDOMException, IOException {\n+        String modsString = \"<mods xmlns=\\\"http://www.loc.gov/mods/v3\\\">\" +\n+                \"  <titleInfo>\" +\n+                \"     <title></title>\" +\n+                \"   </titleInfo>\" +\n+                \"  <relatedItem>\" +\n+                \"    <relatedItem>\" +\n+                \"      <relatedItem>\" +\n+                \"        <relatedItem>\" +\n+                \"          <abstract />\" +\n+                \"        </relatedItem>\" +\n+                \"        <abstract>Test Pic</abstract>\" +\n+                \"      </relatedItem>\" +\n+                \"    </relatedItem>\" +\n+                \"  </relatedItem>\" +\n+                \"</mods>\";\n+\n+        Document modsDoc = buildMods(modsString);\n+        Element docRoot = modsDoc.getRootElement();\n+        assertEquals(1, docRoot.getChildren().size());\n+\n+        Element relatedItems = docRoot.getChild(\"relatedItem\", MODS_V3_NS)\n+                .getChild(\"relatedItem\", MODS_V3_NS)\n+                .getChild(\"relatedItem\", MODS_V3_NS);\n+\n+        assertEquals(1, relatedItems.getChildren().size());\n+        assertEquals(\"Test Pic\",\n+                relatedItems.getChildText(\"abstract\", MODS_V3_NS));\n+    }\n+\n+    @Test\n+    public void deeplyNestedWithOutText() throws JDOMException, IOException {\n+        String modsString = \"<mods xmlns=\\\"http://www.loc.gov/mods/v3\\\">\" +\n+                \"  <titleInfo>\" +\n+                \"     <title></title>\" +\n+                \"   </titleInfo>\" +\n+                \"  <relatedItem>\" +\n+                \"    <relatedItem>\" +\n+                \"      <relatedItem>\" +\n+                \"        <relatedItem>\" +\n+                \"          <abstract />\" +\n+                \"        </relatedItem>\" +\n+                \"        <abstract></abstract>\" +\n+                \"      </relatedItem>\" +\n+                \"    </relatedItem>\" +\n+                \"  </relatedItem>\" +\n+                \"</mods>\";\n+\n+        Document modsDoc = buildMods(modsString);\n+        Element docRoot = modsDoc.getRootElement();\n+        assertEquals(0, docRoot.getChildren().size());\n+    }\n+\n+    @Test\n+    public void deeplyNestedWithTextVariation() throws JDOMException, IOException {\n+        String modsString = \"<mods xmlns=\\\"http://www.loc.gov/mods/v3\\\">\" +\n+                \"  <relatedItem>\" +\n+                \"    <relatedItem>\" +\n+                \"      <relatedItem>\" +\n+                \"        <relatedItem>\" +\n+                \"          <abstract />\" +\n+                \"        </relatedItem>\" +\n+                \"        <abstract>Test Pic</abstract>\" +\n+                \"      </relatedItem>\" +\n+                \"    </relatedItem>\" +\n+                \"  </relatedItem>\" +\n+                \"</mods>\";\n+\n+        Document modsDoc = buildMods(modsString);\n+        Element docRoot = modsDoc.getRootElement();\n+        assertEquals(1, docRoot.getChildren().size());\n+\n+        Element relatedItems = docRoot.getChild(\"relatedItem\", MODS_V3_NS)\n+                .getChild(\"relatedItem\", MODS_V3_NS)\n+                .getChild(\"relatedItem\", MODS_V3_NS);\n+\n+        assertEquals(1, relatedItems.getChildren().size());\n+        assertEquals(\"Test Pic\",\n+                relatedItems.getChildText(\"abstract\", MODS_V3_NS));\n+    }\n+\n+    @Test\n+    public void nestedPartiallyPopulated() throws JDOMException, IOException {\n+        String modsString = \"<mods xmlns=\\\"http://www.loc.gov/mods/v3\\\">\" +\n+                \"  <titleInfo>\" +\n+                \"    <title>Test Image</title>\" +\n+                \"  </titleInfo>\" +\n+                \"  <typeOfResource>still image</typeOfResource>\" +\n+                \"  <genre authority=\\\"gmgpc\\\">digital images</genre>\" +\n+                \"  <originInfo>\" +\n+                \"    <place>\" +\n+                \"      <placeTerm type=\\\"text\\\" />\" +\n+                \"    </place>\" +\n+                \"  </originInfo>\" +\n+                \"</mods>\";\n+\n+        Document modsDoc = buildMods(modsString);\n+        Element docRoot = modsDoc.getRootElement();\n+\n+        assertEquals(3, docRoot.getChildren().size());\n+        assertEquals(\"Test Image\",\n+                docRoot.getChild(\"titleInfo\", MODS_V3_NS).getChildText(\"title\", MODS_V3_NS));\n+        assertEquals(\"still image\",\n+                docRoot.getChild(\"typeOfResource\", MODS_V3_NS).getTextTrim());\n+        assertEquals(\"digital images\",\n+                docRoot.getChild(\"genre\", MODS_V3_NS).getTextTrim());\n+        assertNull(docRoot.getChild(\"originInfo\", MODS_V3_NS));\n+    }\n+\n+    @Test\n+    public void whiteSpaceOnly() throws JDOMException, IOException {\n+        String modsString = \"<mods xmlns=\\\"http://www.loc.gov/mods/v3\\\">\" +\n+                \"  <titleInfo>\" +\n+                \"    <title>  \\n  \\n</title>\" +\n+                \"  </titleInfo>\" +\n+                \"</mods>\";\n+\n+        Document modsDoc = buildMods(modsString);\n+        assertEquals(0, modsDoc.getRootElement().getChildren().size());\n+    }\n+\n+    @Test\n+    public void emptyDeepNested() throws JDOMException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c681dea6abfb394ac90c199b66af418ae39759"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzYwODAxOnYy", "diffSide": "RIGHT", "path": "access-common/src/test/java/edu/unc/lib/dl/ui/util/ModsUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjoxOTowMFrOGMr5yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjoxOTowMFrOGMr5yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1NTQwMw==", "bodyText": "One more case to test, make sure that if all elements are populated, nothing gets removed.", "url": "https://github.com/UNC-Libraries/box-c/pull/959#discussion_r415955403", "createdAt": "2020-04-27T16:19:00Z", "author": {"login": "bbpennel"}, "path": "access-common/src/test/java/edu/unc/lib/dl/ui/util/ModsUtilTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.ui.util;\n+\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.MODS_V3_NS;\n+import static edu.unc.lib.dl.xml.SecureXMLFactory.createSAXBuilder;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.jdom2.JDOMException;\n+import org.jdom2.input.SAXBuilder;\n+import org.junit.Test;\n+\n+/**\n+ * @author lfarrell\n+ */\n+public class ModsUtilTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c681dea6abfb394ac90c199b66af418ae39759"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 758, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}