{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MDczODE1", "number": 1002, "title": "BXC-2622 - Register updates to longleaf ", "bodyText": "https://jira.lib.unc.edu/browse/BXC-2622\n\nSupport registration of binary updates and creations to longleaf via camel routes.\nRegistration to longleaf performed in batches\nDeposit longleaf registration job switched into camel processor\n\nDepends on:\nUNC-Libraries/longleaf-preservation#26", "createdAt": "2020-06-01T16:03:54Z", "url": "https://github.com/UNC-Libraries/box-c/pull/1002", "merged": true, "mergeCommit": {"oid": "80c9cd42cdd1792746f5cc21da9f3b7c7e31e025"}, "closed": true, "closedAt": "2020-06-04T19:21:22Z", "author": {"login": "bbpennel"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnCYInAH2gAyNDI2MDczODE1OjJlZDQ5ZDM5NWJmNDliZmJjY2Q5ZDljNWQzZTc0MTM3YjBjNTMxOGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoCjofgH2gAyNDI2MDczODE1OmY4YWYzODdkOWZhN2Y2MzVlYzI4ZjM0YjRlYzlhZjIzYWI1NjU3NjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2ed49d395bf49bfbccd9d9c5d3e74137b0c5318c", "author": {"user": {"login": "bbpennel", "name": "Ben Pennell"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/2ed49d395bf49bfbccd9d9c5d3e74137b0c5318c", "committedDate": "2020-06-01T15:55:18Z", "message": "Add sjms dependency for batch support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3319162d27d972ed711588ab186204145b82303a", "author": {"user": {"login": "bbpennel", "name": "Ben Pennell"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/3319162d27d972ed711588ab186204145b82303a", "committedDate": "2020-06-01T16:01:24Z", "message": "Add batched processing of longleaf registration jobs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "810b15210ea2ce06832543eff1aa46f34fe52367", "author": {"user": {"login": "bbpennel", "name": "Ben Pennell"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/810b15210ea2ce06832543eff1aa46f34fe52367", "committedDate": "2020-06-01T16:01:24Z", "message": "Remove deposit longleaf registration job in favor of camel based approach"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjU2Njkx", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#pullrequestreview-424656691", "createdAt": "2020-06-04T17:07:51Z", "commit": {"oid": "810b15210ea2ce06832543eff1aa46f34fe52367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzowNzo1MVrOGfPmtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzowNzo1MVrOGfPmtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNDcxMA==", "bodyText": "How is this getting to the next route, the only from() goes to sjms-batch?", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#discussion_r435414710", "createdAt": "2020-06-04T17:07:51Z", "author": {"login": "lfarrell"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/longleaf/LongleafRouter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.longleaf;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.LoggingLevel;\n+import org.apache.camel.builder.RouteBuilder;\n+\n+/**\n+ * Router for longleaf operations\n+ *\n+ * @author bbpennel\n+ */\n+public class LongleafRouter extends RouteBuilder {\n+\n+    @BeanInject(value = \"registerLongleafProcessor\")\n+    private RegisterToLongleafProcessor registerProcessor;\n+\n+    @Override\n+    public void configure() throws Exception {\n+        from(\"direct-vm:filter.longleaf\")\n+            .filter().method(RegisterToLongleafProcessor.class, \"registerableBinary\")\n+            .log(LoggingLevel.DEBUG, \"Queuing ${headers[CamelFcrepoUri]} for registration to longleaf\")\n+            .to(\"sjms:register.longleaf?transacted=true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b15210ea2ce06832543eff1aa46f34fe52367"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjU3NzM2", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#pullrequestreview-424657736", "createdAt": "2020-06-04T17:09:15Z", "commit": {"oid": "810b15210ea2ce06832543eff1aa46f34fe52367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzowOToxNVrOGfPpuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzowOToxNVrOGfPpuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNTQ4Mw==", "bodyText": "What is this \"one or more\" of?", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#discussion_r435415483", "createdAt": "2020-06-04T17:09:15Z", "author": {"login": "lfarrell"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/longleaf/RegisterToLongleafProcessor.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.longleaf;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Arrays.asList;\n+import static org.apache.commons.lang3.StringUtils.substringAfterLast;\n+import static org.fcrepo.camel.FcrepoHeaders.FCREPO_URI;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.apache.commons.lang3.StringUtils;\n+import org.fcrepo.client.FcrepoClient;\n+import org.fcrepo.client.FcrepoOperationFailedException;\n+import org.fcrepo.client.FcrepoResponse;\n+import org.fcrepo.client.FedoraHeaderConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.fcrepo4.BinaryObject;\n+import edu.unc.lib.dl.fcrepo4.ClientFaultResolver;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPathConstants;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.fedora.ServiceException;\n+import edu.unc.lib.dl.model.DatastreamType;\n+\n+/**\n+ * Processor which registers binaries in longleaf\n+ *\n+ * @author bbpennel\n+ * @author smithjp\n+ */\n+public class RegisterToLongleafProcessor implements Processor {\n+    private static final Logger log = LoggerFactory.getLogger(RegisterToLongleafProcessor.class);\n+    private static final Logger longleafLog = LoggerFactory.getLogger(\"longleaf\");\n+\n+    public static final List<String> REGISTERABLE_IDS = asList(\n+            DatastreamType.MD_DESCRIPTIVE.getId(),\n+            DatastreamType.MD_DESCRIPTIVE_HISTORY.getId(),\n+            DatastreamType.MD_EVENTS.getId(),\n+            DatastreamType.ORIGINAL_FILE.getId(),\n+            DatastreamType.TECHNICAL_METADATA.getId()\n+        );\n+\n+    private String longleafBaseCommand;\n+\n+    private RepositoryObjectLoader repoObjLoader;\n+\n+    private FcrepoClient fcrepoClient;\n+\n+    /**\n+     * The exchange here is expected to be a batch message with one or more", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b15210ea2ce06832543eff1aa46f34fe52367"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjYxMTI2", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#pullrequestreview-424661126", "createdAt": "2020-06-04T17:13:38Z", "commit": {"oid": "810b15210ea2ce06832543eff1aa46f34fe52367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxMzozOFrOGfPz3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxMzozOFrOGfPz3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxODA3OA==", "bodyText": "Why isn't this just a regular int?", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#discussion_r435418078", "createdAt": "2020-06-04T17:13:38Z", "author": {"login": "lfarrell"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/longleaf/RegisterToLongleafProcessor.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.longleaf;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Arrays.asList;\n+import static org.apache.commons.lang3.StringUtils.substringAfterLast;\n+import static org.fcrepo.camel.FcrepoHeaders.FCREPO_URI;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.apache.commons.lang3.StringUtils;\n+import org.fcrepo.client.FcrepoClient;\n+import org.fcrepo.client.FcrepoOperationFailedException;\n+import org.fcrepo.client.FcrepoResponse;\n+import org.fcrepo.client.FedoraHeaderConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.fcrepo4.BinaryObject;\n+import edu.unc.lib.dl.fcrepo4.ClientFaultResolver;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPathConstants;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.fedora.ServiceException;\n+import edu.unc.lib.dl.model.DatastreamType;\n+\n+/**\n+ * Processor which registers binaries in longleaf\n+ *\n+ * @author bbpennel\n+ * @author smithjp\n+ */\n+public class RegisterToLongleafProcessor implements Processor {\n+    private static final Logger log = LoggerFactory.getLogger(RegisterToLongleafProcessor.class);\n+    private static final Logger longleafLog = LoggerFactory.getLogger(\"longleaf\");\n+\n+    public static final List<String> REGISTERABLE_IDS = asList(\n+            DatastreamType.MD_DESCRIPTIVE.getId(),\n+            DatastreamType.MD_DESCRIPTIVE_HISTORY.getId(),\n+            DatastreamType.MD_EVENTS.getId(),\n+            DatastreamType.ORIGINAL_FILE.getId(),\n+            DatastreamType.TECHNICAL_METADATA.getId()\n+        );\n+\n+    private String longleafBaseCommand;\n+\n+    private RepositoryObjectLoader repoObjLoader;\n+\n+    private FcrepoClient fcrepoClient;\n+\n+    /**\n+     * The exchange here is expected to be a batch message with one or more\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        Message aggrMsg = exchange.getIn();\n+\n+        // Key is the digest key, value is a map of storage uri to digest value\n+        Map<String, Map<URI, String>> digestsMap = new HashMap<>();\n+        Map<URI, String> md5Map = new HashMap<>();\n+        Map<URI, String> sha1Map = new HashMap<>();\n+        digestsMap.put(\"md5\", md5Map);\n+        digestsMap.put(\"sha1\", sha1Map);\n+\n+        List<String> messages = aggrMsg.getBody(List.class);\n+        for (String fcrepoUri : messages) {\n+            try {\n+                PID pid = PIDs.get(fcrepoUri);\n+                BinaryObject binObj = repoObjLoader.getBinaryObject(pid);\n+\n+                String md5 = trimFedoraDigest(binObj.getMd5Checksum(), \":\");\n+                String sha1 = trimFedoraDigest(binObj.getSha1Checksum(), \":\");\n+                URI storageUri = binObj.getContentUri();\n+\n+                if (md5 != null) {\n+                    md5Map.put(storageUri, md5);\n+                }\n+                if (sha1 != null) {\n+                    sha1Map.put(storageUri, sha1);\n+                }\n+                if (md5 == null && sha1 == null) {\n+                    sha1Map.put(storageUri, calculateSha1(pid));\n+                }\n+            } catch (Exception e) {\n+                log.error(\"Failed to add {} to batch for regisration to longleaf\", fcrepoUri, e);\n+            }\n+        }\n+\n+        registerFiles(digestsMap);\n+    }\n+\n+    private String calculateSha1(PID pid) {\n+        try (FcrepoResponse response = fcrepoClient.head(pid.getRepositoryUri())\n+                .addHeader(FedoraHeaderConstants.WANT_DIGEST, \"sha\")\n+                .perform()) {\n+            String digestVal = response.getHeaderValue(FedoraHeaderConstants.DIGEST);\n+            if (digestVal == null) {\n+                throw new ServiceException(\"Failed to calculate sha1 for \" + pid.getRepositoryPath());\n+            } else {\n+                return trimFedoraDigest(digestVal, \"=\");\n+            }\n+        } catch (IOException e) {\n+            throw new ServiceException(e);\n+        } catch (FcrepoOperationFailedException e) {\n+            ClientFaultResolver.resolve(e);\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Executes longleaf register command for a batch of files with digests\n+     *\n+     * @param digestsMap mapping of digest algorithms to paths plus digest values\n+     */\n+    private void registerFiles(Map<String, Map<URI, String>> digestsMap) {\n+        long start = System.currentTimeMillis();\n+\n+        StringBuilder sb = new StringBuilder();\n+        final int[] cntArray = { 0 };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b15210ea2ce06832543eff1aa46f34fe52367"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0Njc1MjQx", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#pullrequestreview-424675241", "createdAt": "2020-06-04T17:32:31Z", "commit": {"oid": "810b15210ea2ce06832543eff1aa46f34fe52367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzozMjozMVrOGfQfow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzozMjozMVrOGfQfow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyOTI4Mw==", "bodyText": "Should there still be a test for this endpoint somewhere?", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#discussion_r435429283", "createdAt": "2020-06-04T17:32:31Z", "author": {"login": "lfarrell"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouterTest.java", "diffHunk": "@@ -77,8 +80,7 @@ public void testRouteStartContainer() throws Exception {\n \n     @Test\n     public void testEventTypeFilter() throws Exception {\n-        getMockEndpoint(\"mock:{{cdr.enhancement.stream.camel}}\").expectedMessageCount(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b15210ea2ce06832543eff1aa46f34fe52367"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8af387d9fa7f635ec28f34b4ec9af23ab565763", "author": {"user": {"login": "bbpennel", "name": "Ben Pennell"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/f8af387d9fa7f635ec28f34b4ec9af23ab565763", "committedDate": "2020-06-04T18:41:47Z", "message": "Switch counter over to a MutableInt, and finish comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2211, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}