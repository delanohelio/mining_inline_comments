{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4Nzc5NDg0", "number": 873, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNDoxOTowM1rODVqvFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNTozNDo1MFrODVr4qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDQ2ODcxOnYy", "diffSide": "RIGHT", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNDoxOTowM1rOFaA_YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNDo0NjoyMVrOFaBnGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgyMzUyMQ==", "bodyText": "Does the timer get used?", "url": "https://github.com/UNC-Libraries/box-c/pull/873#discussion_r362823521", "createdAt": "2020-01-03T14:19:03Z", "author": {"login": "lfarrell"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionService.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import static edu.unc.lib.dl.model.DatastreamPids.getMdDescriptivePid;\n+import static java.util.Arrays.asList;\n+import static org.apache.commons.io.IOUtils.toByteArray;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.ContentObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.persist.services.storage.StorageLocation;\n+import edu.unc.lib.dl.persist.services.storage.StorageLocationManager;\n+import edu.unc.lib.dl.persist.services.transfer.BinaryTransferService;\n+import edu.unc.lib.dl.persist.services.transfer.BinaryTransferSession;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.validation.MODSValidator;\n+import edu.unc.lib.dl.validation.MetadataValidationException;\n+import io.dropwizard.metrics5.Timer;\n+\n+/**\n+ * Service that manages description, e.g., MODS, updates\n+ *\n+ * @author harring\n+ *\n+ */\n+public class UpdateDescriptionService {\n+    private static final Logger log = LoggerFactory.getLogger(UpdateDescriptionService.class);\n+\n+    private AccessControlService aclService;\n+    private RepositoryObjectLoader repoObjLoader;\n+    private OperationsMessageSender operationsMessageSender;\n+    private MODSValidator modsValidator;\n+    private BinaryTransferService transferService;\n+    private StorageLocationManager locationManager;\n+\n+    private boolean validate;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(UpdateDescriptionService.class);\n+\n+    public UpdateDescriptionService() {\n+        validate = true;\n+    }\n+\n+    /**\n+     * Updates the MODS description of a single object\n+     *\n+     * @param agent\n+     * @param pid\n+     * @param modsStream\n+     * @throws MetadataValidationException\n+     * @throws IOException\n+     */\n+    public void updateDescription(AgentPrincipals agent, PID pid, InputStream modsStream)\n+            throws MetadataValidationException, IOException {\n+\n+        ContentObject obj = (ContentObject) repoObjLoader.getRepositoryObject(pid);\n+        StorageLocation destLocation = locationManager.getStorageLocation(obj);\n+\n+        try (BinaryTransferSession transferSession = transferService.getSession(destLocation)) {\n+            updateDescription(transferSession, agent, obj, modsStream);\n+        }\n+    }\n+\n+    /**\n+     * Updates the MODS description of an object as part of the provided ongoing session.\n+     *\n+     * @param transferSession ongoing transfer session\n+     * @param agent\n+     * @param pid\n+     * @param modsStream\n+     * @throws MetadataValidationException\n+     * @throws IOException\n+     */\n+    public void updateDescription(BinaryTransferSession transferSession, AgentPrincipals agent,\n+            PID pid, InputStream modsStream) throws MetadataValidationException, IOException {\n+\n+        ContentObject obj = (ContentObject) repoObjLoader.getRepositoryObject(pid);\n+\n+        updateDescription(transferSession, agent, obj, modsStream);\n+    }\n+\n+    private void updateDescription(BinaryTransferSession transferSession, AgentPrincipals agent,\n+            ContentObject obj, InputStream modsStream) throws IOException {\n+\n+        log.debug(\"Updating description for {}\", obj.getPid().getId());\n+        try (Timer.Context context = timer.time()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e86d7b2b3c29ef93b246ce25d3c7899a7ee6d7"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgzMzY5MA==", "bodyText": "If I remember correctly, when the try block ends the timer gets closed which writes the result to the metrics client, which gets dumped to a log periodically", "url": "https://github.com/UNC-Libraries/box-c/pull/873#discussion_r362833690", "createdAt": "2020-01-03T14:46:21Z", "author": {"login": "bbpennel"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionService.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import static edu.unc.lib.dl.model.DatastreamPids.getMdDescriptivePid;\n+import static java.util.Arrays.asList;\n+import static org.apache.commons.io.IOUtils.toByteArray;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.ContentObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.persist.services.storage.StorageLocation;\n+import edu.unc.lib.dl.persist.services.storage.StorageLocationManager;\n+import edu.unc.lib.dl.persist.services.transfer.BinaryTransferService;\n+import edu.unc.lib.dl.persist.services.transfer.BinaryTransferSession;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.validation.MODSValidator;\n+import edu.unc.lib.dl.validation.MetadataValidationException;\n+import io.dropwizard.metrics5.Timer;\n+\n+/**\n+ * Service that manages description, e.g., MODS, updates\n+ *\n+ * @author harring\n+ *\n+ */\n+public class UpdateDescriptionService {\n+    private static final Logger log = LoggerFactory.getLogger(UpdateDescriptionService.class);\n+\n+    private AccessControlService aclService;\n+    private RepositoryObjectLoader repoObjLoader;\n+    private OperationsMessageSender operationsMessageSender;\n+    private MODSValidator modsValidator;\n+    private BinaryTransferService transferService;\n+    private StorageLocationManager locationManager;\n+\n+    private boolean validate;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(UpdateDescriptionService.class);\n+\n+    public UpdateDescriptionService() {\n+        validate = true;\n+    }\n+\n+    /**\n+     * Updates the MODS description of a single object\n+     *\n+     * @param agent\n+     * @param pid\n+     * @param modsStream\n+     * @throws MetadataValidationException\n+     * @throws IOException\n+     */\n+    public void updateDescription(AgentPrincipals agent, PID pid, InputStream modsStream)\n+            throws MetadataValidationException, IOException {\n+\n+        ContentObject obj = (ContentObject) repoObjLoader.getRepositoryObject(pid);\n+        StorageLocation destLocation = locationManager.getStorageLocation(obj);\n+\n+        try (BinaryTransferSession transferSession = transferService.getSession(destLocation)) {\n+            updateDescription(transferSession, agent, obj, modsStream);\n+        }\n+    }\n+\n+    /**\n+     * Updates the MODS description of an object as part of the provided ongoing session.\n+     *\n+     * @param transferSession ongoing transfer session\n+     * @param agent\n+     * @param pid\n+     * @param modsStream\n+     * @throws MetadataValidationException\n+     * @throws IOException\n+     */\n+    public void updateDescription(BinaryTransferSession transferSession, AgentPrincipals agent,\n+            PID pid, InputStream modsStream) throws MetadataValidationException, IOException {\n+\n+        ContentObject obj = (ContentObject) repoObjLoader.getRepositoryObject(pid);\n+\n+        updateDescription(transferSession, agent, obj, modsStream);\n+    }\n+\n+    private void updateDescription(BinaryTransferSession transferSession, AgentPrincipals agent,\n+            ContentObject obj, InputStream modsStream) throws IOException {\n+\n+        log.debug(\"Updating description for {}\", obj.getPid().getId());\n+        try (Timer.Context context = timer.time()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgyMzUyMQ=="}, "originalCommit": {"oid": "11e86d7b2b3c29ef93b246ce25d3c7899a7ee6d7"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDY1NzA3OnYy", "diffSide": "RIGHT", "path": "deposit/src/main/java/edu/unc/lib/deposit/transfer/TransferBinariesToStorageJob.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNTozNDo1MFrOFaCvHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNTozNDo1MFrOFaCvHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1MjEyNA==", "bodyText": "Can probably get rid of this blank line", "url": "https://github.com/UNC-Libraries/box-c/pull/873#discussion_r362852124", "createdAt": "2020-01-03T15:34:50Z", "author": {"login": "lfarrell"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/transfer/TransferBinariesToStorageJob.java", "diffHunk": "@@ -91,9 +100,17 @@ public void runJob() {\n     private void transferBinaries(Resource resc, BinaryTransferSession transferSession) {\n         PID objPid = PIDs.get(resc.toString());\n \n-        if (resc.hasProperty(RDF.type, Cdr.FileObject)) {\n+        Set<Resource> rescTypes = resc.listProperties(RDF.type).toList().stream()\n+                .map(Statement::getResource).collect(toSet());\n+\n+        if (TYPES_ALLOWING_DESC.stream().anyMatch(rescTypes::contains)) {\n+            transferModsFile(objPid, resc, transferSession);\n+        }\n+\n+        if (rescTypes.contains(Cdr.FileObject)) {\n             transferOriginalFile(objPid, resc, transferSession);\n             transferFitsExtract(objPid, resc, transferSession);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e659b634e6aa514bb489b0c12fe1c1476e8e7af2"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 807, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}