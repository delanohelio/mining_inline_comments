{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MzgyOTU1", "number": 924, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODozMjowOVrODnlFGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOToxMDozNlrODn8esw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODI4NTcwOnYy", "diffSide": "RIGHT", "path": "security/src/main/java/edu/unc/lib/dl/acl/util/UserRole.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODozMjowOVrOF1qfLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODozMjowOVrOF1qfLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNDk1Nw==", "bodyText": "you can remove this permission for all users except administrators", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391814957", "createdAt": "2020-03-12T18:32:09Z", "author": {"login": "bbpennel"}, "path": "security/src/main/java/edu/unc/lib/dl/acl/util/UserRole.java", "diffHunk": "@@ -72,19 +73,19 @@\n     canIngest(\"canIngest\", true, viewHidden, viewMetadata, viewAccessCopies, viewOriginal,\n             ingest),\n     canDescribe(\"canDescribe\", true, viewHidden, viewMetadata, viewAccessCopies, viewOriginal,\n-            editDescription, bulkUpdateDescription),\n+            editDescription, bulkUpdateDescription, runEnhancements),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODMxODU4OnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODo0MjowMVrOF1q0Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODo0MjowMVrOF1q0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgyMDM0Mw==", "bodyText": "Add a description of what this class does", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391820343", "createdAt": "2020-03-12T18:42:01Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessor.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel;\n+\n+import static edu.unc.lib.dl.rdf.Fcrepo4Repository.Binary;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static org.fcrepo.camel.FcrepoHeaders.FCREPO_URI;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.services.camel.util.MessageUtil;\n+\n+/**\n+ * @author lfarrell", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODQzOTg4OnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOToyMTowOFrOF1sB0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOToyMTowOFrOF1sB0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDIwOA==", "bodyText": "Might as well make a constant out of this", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391840208", "createdAt": "2020-03-12T19:21:08Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessor.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel;\n+\n+import static edu.unc.lib.dl.rdf.Fcrepo4Repository.Binary;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static org.fcrepo.camel.FcrepoHeaders.FCREPO_URI;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.services.camel.util.MessageUtil;\n+\n+/**\n+ * @author lfarrell\n+ */\n+public class BinaryEnhancementProcessor implements Processor {\n+    private static final Logger log = LoggerFactory.getLogger(BinaryEnhancementProcessor.class);\n+\n+    @Override\n+    public void process(final Exchange exchange) throws Exception {\n+        final Message in = exchange.getIn();\n+        String fcrepoBinaryUri = (String) in.getHeader(FCREPO_URI);\n+\n+        if (fcrepoBinaryUri == null) {\n+            Document msgBody = MessageUtil.getDocumentBody(in);\n+            Element body = msgBody.getRootElement();\n+\n+            String pidValue = body.getChild(\"pid\", ATOM_NS).getTextTrim();\n+            String mimeType = body.getChild(\"mimeType\", ATOM_NS).getTextTrim();\n+\n+            log.info(\"Adding enhancement headers for \" + pidValue);\n+            in.setHeader(FCREPO_URI, pidValue);\n+            in.setHeader(CdrBinaryMimeType, mimeType);\n+            in.setHeader(\"org.fcrepo.jms.resourceType\", Binary.getURI());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODQ1OTI2OnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/fulltext/FulltextProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOToyNzoxM1rOF1sNog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOToyNzoxM1rOF1sNog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MzIzNA==", "bodyText": "For this block, I don't think it can receive anything other than an IOException, so you should probably change the catch to that. Also, it'd probably be good to add the exception as the cause of the exception you end up throwing.\nYou may also not need this log statement. If you feel like it is useful though, it might be good to add a little more info to it, like the PID of the object that failed was, or the path of the file. This might already be covered by the exception you through though, which will end up in the logs.", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391843234", "createdAt": "2020-03-12T19:27:13Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/fulltext/FulltextProcessor.java", "diffHunk": "@@ -82,11 +83,16 @@ public void process(Exchange exchange) throws Exception {\n         File parentDir = derivative.getParentFile();\n \n         // Create missing parent directories if necessary\n-        if (parentDir != null && !parentDir.mkdirs()) {\n-            throw new IOException(\"Failed to create parent directories for \" + derivativePath);\n+        if (parentDir != null) {\n+            try {\n+                Files.createDirectories(parentDir.toPath());\n+            } catch (Exception e) {\n+                log.error(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODc4NjM1OnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowNjozMVrOF1vTRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowNjozMVrOF1vTRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5MzgyOA==", "bodyText": "Hmm, this route kind of doesn't do anything anymore. I'm tempted to remove it to skip a step, but i think that's going to happen anyways in one of the follow up tickets so i think this is okay for now", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391893828", "createdAt": "2020-03-12T21:06:31Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouter.java", "diffHunk": "@@ -55,11 +59,12 @@ public void configure() throws Exception {\n         from(\"direct-vm:enhancements.fedora\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODc5Njc5OnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/webapp/WEB-INF/service-context.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToxMDoyN1rOF1vZ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToxMDoyN1rOF1vZ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5NTUyNg==", "bodyText": "Is this needed? It doesn't appear to be getting injected anywhere. I think you only need this template in the service app, not the services-camel app", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391895526", "createdAt": "2020-03-12T21:10:27Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/webapp/WEB-INF/service-context.xml", "diffHunk": "@@ -167,6 +167,12 @@\n         <property name=\"pubSubDomain\" value=\"false\" />\n     </bean>\n \n+    <bean id=\"enhancementsUpdateJmsTemplate\" class=\"org.springframework.jms.core.JmsTemplate\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODgzMzcxOnYy", "diffSide": "RIGHT", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyMzowMlrOF1vwMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyMzowMlrOF1vwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMTIzNQ==", "bodyText": "you don't need to inject this into the test, you aren't using it for anything here", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391901235", "createdAt": "2020-03-12T21:23:02Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "diffHunk": "@@ -111,6 +112,9 @@\n     @BeanInject(value = \"binaryMetadataProcessor\")\n     private BinaryMetadataProcessor binaryMetadataProcessor;\n \n+    @BeanInject(value = \"binaryEnhancementProcessor\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODgzODEwOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyMzo0N1rOF1vyWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyMzo0N1rOF1vyWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMTc4Ng==", "bodyText": "Move this comment down to just above public class RunEnhancementsService and add a description of the class", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391901786", "createdAt": "2020-03-12T21:23:47Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODg0ODk2OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/RunEnhancementsController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyNTozOVrOF1v4KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyNTozOVrOF1v4KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMzI3Mg==", "bodyText": "I wrote this? Also, add a description of the class", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391903272", "createdAt": "2020-03-12T21:25:39Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/RunEnhancementsController.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import edu.unc.lib.dl.acl.exception.AccessRestrictionException;\n+import edu.unc.lib.dl.fedora.AuthorizationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import edu.unc.lib.dl.acl.util.GroupsThreadStore;\n+import edu.unc.lib.dl.cdr.services.processing.RunEnhancementsService;\n+\n+/**\n+ * @author bbpennel", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODg1NzgzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/RunEnhancementsController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyNzoxMlrOF1v9GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjo1ODo1N1rOF2Crgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNDUzNg==", "bodyText": "If possible, use @PostMapping , and also there's a constant that you can use for the produces type org.springframework.http.MediaType.APPLICATION_JSON_VALUE.\nAlso, you're not using either request or response, i think you can remove both", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391904536", "createdAt": "2020-03-12T21:27:12Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/RunEnhancementsController.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import edu.unc.lib.dl.acl.exception.AccessRestrictionException;\n+import edu.unc.lib.dl.fedora.AuthorizationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import edu.unc.lib.dl.acl.util.GroupsThreadStore;\n+import edu.unc.lib.dl.cdr.services.processing.RunEnhancementsService;\n+\n+/**\n+ * @author bbpennel\n+ * @author lfarrell\n+ */\n+@Controller\n+public class RunEnhancementsController {\n+    private static final Logger log = LoggerFactory.getLogger(RunEnhancementsController.class);\n+\n+    @Autowired\n+    private RunEnhancementsService enhService;\n+\n+    @RequestMapping(value = \"runEnhancements\", method = RequestMethod.POST, produces = \"application/json\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIxMTMzMA==", "bodyText": "Was wondering about that. Seems some of our controllers pass in request, response, but don't always use them.", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r392211330", "createdAt": "2020-03-13T12:58:57Z", "author": {"login": "lfarrell"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/RunEnhancementsController.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import edu.unc.lib.dl.acl.exception.AccessRestrictionException;\n+import edu.unc.lib.dl.fedora.AuthorizationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import edu.unc.lib.dl.acl.util.GroupsThreadStore;\n+import edu.unc.lib.dl.cdr.services.processing.RunEnhancementsService;\n+\n+/**\n+ * @author bbpennel\n+ * @author lfarrell\n+ */\n+@Controller\n+public class RunEnhancementsController {\n+    private static final Logger log = LoggerFactory.getLogger(RunEnhancementsController.class);\n+\n+    @Autowired\n+    private RunEnhancementsService enhService;\n+\n+    @RequestMapping(value = \"runEnhancements\", method = RequestMethod.POST, produces = \"application/json\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNDUzNg=="}, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODkwMjU1OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/RunEnhancementsController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTozNTowMFrOF1wUqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTozNTowMFrOF1wUqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxMDU2OA==", "bodyText": "I'd recommend just passing the ids of the objects to process in rather than passing in the object type too. You can retrieve the object type from the ids using RepositoryObjectLoader, which should be more trustworthy as well.\nAdditionally, its usually a best practice to not specify a concrete implementation for collections unless you really need to, so you should change this to just List<String>", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391910568", "createdAt": "2020-03-12T21:35:00Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/RunEnhancementsController.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import edu.unc.lib.dl.acl.exception.AccessRestrictionException;\n+import edu.unc.lib.dl.fedora.AuthorizationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import edu.unc.lib.dl.acl.util.GroupsThreadStore;\n+import edu.unc.lib.dl.cdr.services.processing.RunEnhancementsService;\n+\n+/**\n+ * @author bbpennel\n+ * @author lfarrell\n+ */\n+@Controller\n+public class RunEnhancementsController {\n+    private static final Logger log = LoggerFactory.getLogger(RunEnhancementsController.class);\n+\n+    @Autowired\n+    private RunEnhancementsService enhService;\n+\n+    @RequestMapping(value = \"runEnhancements\", method = RequestMethod.POST, produces = \"application/json\")\n+    public @ResponseBody ResponseEntity<Object> runEnhancements(@RequestBody RunEnhancementsRequest data,\n+            HttpServletRequest request, HttpServletResponse response) {\n+        Map<String, Object> result = new HashMap<>();\n+\n+        try {\n+            enhService.run(GroupsThreadStore.getAgentPrincipals(), data.getPids(), data.isForce());\n+            result.put(\"message\", \"Enhancement of \" + data.getPids().size()\n+                    + \" object(s) and their children has begun\");\n+            result.put(\"action\", \"runEnhancements\");\n+        } catch (Exception e) {\n+            result.put(\"message\", \"Unable to run enhancements of \" + data.getPids().size()\n+                    + \" object(s) and their children\");\n+            result.put(\"error\", e.getMessage());\n+            if (e instanceof AuthorizationException || e instanceof AccessRestrictionException) {\n+                return new ResponseEntity<>(result, HttpStatus.FORBIDDEN);\n+            } else {\n+                log.error(\"Failed to run enhancements for {}\", data.getPids().toString(), e);\n+                return new ResponseEntity<>(result, HttpStatus.INTERNAL_SERVER_ERROR);\n+            }\n+        }\n+\n+        result.put(\"timestamp\", System.currentTimeMillis());\n+        return new ResponseEntity<>(result, HttpStatus.OK);\n+    }\n+\n+    public static class RunEnhancementsRequest {\n+        private ArrayList<HashMap> pids;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODkzOTQ0OnYy", "diffSide": "RIGHT", "path": "static/js/admin/src/EditThumbnailForm.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo0MTo0MVrOF1wobA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzowOTo1M1rOF2C_9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxNTYyOA==", "bodyText": "Wrong PR, remove", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391915628", "createdAt": "2020-03-12T21:41:41Z", "author": {"login": "bbpennel"}, "path": "static/js/admin/src/EditThumbnailForm.js", "diffHunk": "@@ -0,0 +1,40 @@\n+define('EditThumbnailForm', [ 'jquery', 'jquery-ui', 'underscore', 'RemoteStateChangeMonitor', 'tpl!../templates/admin/editThumbnailForm',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIxNjU2NQ==", "bodyText": "Ugh, yeah forgot to remove these", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r392216565", "createdAt": "2020-03-13T13:09:53Z", "author": {"login": "lfarrell"}, "path": "static/js/admin/src/EditThumbnailForm.js", "diffHunk": "@@ -0,0 +1,40 @@\n+define('EditThumbnailForm', [ 'jquery', 'jquery-ui', 'underscore', 'RemoteStateChangeMonitor', 'tpl!../templates/admin/editThumbnailForm',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxNTYyOA=="}, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODk0MzExOnYy", "diffSide": "RIGHT", "path": "static/js/admin/src/ResultObjectActionMenu.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo0MjoxNVrOF1wqJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo0MjoxNVrOF1wqJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxNjA3MQ==", "bodyText": "These changes also appear to be from the collection thumbnail pr, so remove", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391916071", "createdAt": "2020-03-12T21:42:15Z", "author": {"login": "bbpennel"}, "path": "static/js/admin/src/ResultObjectActionMenu.js", "diffHunk": "@@ -1,5 +1,5 @@\n-define('ResultObjectActionMenu', [ 'jquery', 'jquery-ui', 'StringUtilities',  'AddFileForm', 'EditLabelForm', 'EditFilenameForm', 'EditTitleForm', 'DeleteForm', 'contextMenu'],\n-\t\tfunction($, ui, StringUtilities, AddFileForm, EditLabelForm, EditFilenameForm, EditTitleForm, DeleteForm) {\n+define('ResultObjectActionMenu', [ 'jquery', 'jquery-ui', 'StringUtilities',  'AddFileForm', 'EditThumbnailForm', 'EditLabelForm', 'EditFilenameForm', 'EditTitleForm', 'DeleteForm', 'contextMenu'],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODk0NzIxOnYy", "diffSide": "RIGHT", "path": "static/js/admin/src/action/RunEnhancementsBatchAction.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo0Mjo1NVrOF1wsHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo0Mjo1NVrOF1wsHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxNjU3Mg==", "bodyText": "Just pass in the pids rather than the object type", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391916572", "createdAt": "2020-03-12T21:42:55Z", "author": {"login": "bbpennel"}, "path": "static/js/admin/src/action/RunEnhancementsBatchAction.js", "diffHunk": "@@ -47,11 +47,11 @@ define('RunEnhancementsBatchAction', [ 'jquery', 'AbstractBatchAction', \"tpl!../\n \n \t\t\tvar pids = [];\n \t\t\tfor (var index in self.targets) {\n-\t\t\t\tpids.push(self.targets[index].getPid());\n+\t\t\t\tpids.push({ pid: self.targets[index].getPid(), objectType: self.targets[index].getMetadata().type });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODk0ODAxOnYy", "diffSide": "RIGHT", "path": "static/templates/admin/editThumbnailForm.html", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo0MzowNFrOF1wsfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo0MzowNFrOF1wsfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxNjY3MA==", "bodyText": "These changes also appear to be from the collection thumbnail pr, so remove", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391916670", "createdAt": "2020-03-12T21:43:04Z", "author": {"login": "bbpennel"}, "path": "static/templates/admin/editThumbnailForm.html", "diffHunk": "@@ -0,0 +1,18 @@\n+<iframe id=\"upload_file_frame\" name=\"upload_file_frame\" height=\"0\" width=\"0\" style=\"display: none;\"></iframe>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODk3NjY1OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo0ODoxN1rOF1w7rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo0ODoxN1rOF1w7rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkyMDU1Nw==", "bodyText": "This service is a singleton, so you can't hold onto variables that are only used for a single invocation, otherwise there will be problems if the service is invoked twice at the same time. recordInfo is only used in createMessage anyways, so it should be very easy to declare it as local to that. Although I'd recommend changing the name too, its a datastream rather than a record", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391920557", "createdAt": "2020-03-12T21:48:17Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+/**\n+ * @author lfarrell\n+ */\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.CDR_MESSAGE_NS;\n+\n+import io.dropwizard.metrics5.Timer;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.HashMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.model.DatastreamPids;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.model.SimpleIdRequest;\n+import edu.unc.lib.dl.services.AbstractMessageSender;\n+import edu.unc.lib.dl.ui.service.SolrQueryLayerService;\n+\n+public class RunEnhancementsService extends AbstractMessageSender {\n+    private static final Logger LOG = LoggerFactory.getLogger(RunEnhancementsService.class);\n+    private static final Timer timer = TimerFactory.createTimerForClass(RunEnhancementsService.class);\n+\n+    private AccessControlService aclService;\n+\n+    @Autowired\n+    protected SolrQueryLayerService queryLayer;\n+    private Datastream recordInfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODk4MjQ0OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo0OToxNFrOF1w-nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo0OToxNFrOF1w-nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkyMTMwOQ==", "bodyText": "how about datastreams instead of ids since there's a lot more info in there than ids?", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391921309", "createdAt": "2020-03-12T21:49:14Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+/**\n+ * @author lfarrell\n+ */\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.CDR_MESSAGE_NS;\n+\n+import io.dropwizard.metrics5.Timer;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.HashMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.model.DatastreamPids;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.model.SimpleIdRequest;\n+import edu.unc.lib.dl.services.AbstractMessageSender;\n+import edu.unc.lib.dl.ui.service.SolrQueryLayerService;\n+\n+public class RunEnhancementsService extends AbstractMessageSender {\n+    private static final Logger LOG = LoggerFactory.getLogger(RunEnhancementsService.class);\n+    private static final Timer timer = TimerFactory.createTimerForClass(RunEnhancementsService.class);\n+\n+    private AccessControlService aclService;\n+\n+    @Autowired\n+    protected SolrQueryLayerService queryLayer;\n+    private Datastream recordInfo;\n+\n+    public void run(AgentPrincipals agent, ArrayList<HashMap> objectPids, Boolean force) {\n+        try (Timer.Context context = timer.time()) {\n+            for (HashMap objectPid : objectPids) {\n+                String uuid = (String) objectPid.get(\"pid\");\n+                PID pid = PIDs.get(uuid);\n+\n+                aclService.assertHasAccess(\"User does not have permission to run enhancements\",\n+                        pid, agent.getPrincipals(), Permission.runEnhancements);\n+\n+                LOG.debug(\"sending solr update message for {} of type {}\", pid, \"runEnhancements\");\n+\n+                String objectType = (String) objectPid.get(\"objectType\");\n+\n+                if (!objectType.equals(\"File\")) {\n+                    SearchRequest searchRequest = new SearchRequest();\n+                    searchRequest.setAccessGroups(agent.getPrincipals());\n+                    searchRequest.setSearchState(new SearchState());\n+                    searchRequest.setRootPid(pid);\n+                    searchRequest.setApplyCutoffs(false);\n+                    SearchResultResponse resultResponse = queryLayer.performSearch(searchRequest);\n+\n+                    for (BriefObjectMetadata metadata : resultResponse.getResultList()) {\n+                        createMessage(metadata, pid, agent.getUsername(), force);\n+                    }\n+                } else {\n+                    SimpleIdRequest searchRequest = new SimpleIdRequest(uuid, agent.getPrincipals());\n+                    BriefObjectMetadata metadata = queryLayer.getObjectById(searchRequest);\n+                    createMessage(metadata, pid, agent.getUsername(), force);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.warn(e.getMessage());\n+            throw e;\n+        }\n+    }\n+\n+    public void setAclService(AccessControlService aclService) {\n+        this.aclService = aclService;\n+    }\n+\n+    private void createMessage(BriefObjectMetadata metadata, PID pid, String username, Boolean force) {\n+        List<String> ids = metadata.getDatastream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODk4OTgzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo1MDozM1rOF1xCZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo1MDozM1rOF1xCZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkyMjI3Nw==", "bodyText": "Use the constant for this, which is available at edu.unc.lib.dl.model.DatastreamType.ORIGINAL_FILE.getId()", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391922277", "createdAt": "2020-03-12T21:50:33Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+/**\n+ * @author lfarrell\n+ */\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.CDR_MESSAGE_NS;\n+\n+import io.dropwizard.metrics5.Timer;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.HashMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.model.DatastreamPids;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.model.SimpleIdRequest;\n+import edu.unc.lib.dl.services.AbstractMessageSender;\n+import edu.unc.lib.dl.ui.service.SolrQueryLayerService;\n+\n+public class RunEnhancementsService extends AbstractMessageSender {\n+    private static final Logger LOG = LoggerFactory.getLogger(RunEnhancementsService.class);\n+    private static final Timer timer = TimerFactory.createTimerForClass(RunEnhancementsService.class);\n+\n+    private AccessControlService aclService;\n+\n+    @Autowired\n+    protected SolrQueryLayerService queryLayer;\n+    private Datastream recordInfo;\n+\n+    public void run(AgentPrincipals agent, ArrayList<HashMap> objectPids, Boolean force) {\n+        try (Timer.Context context = timer.time()) {\n+            for (HashMap objectPid : objectPids) {\n+                String uuid = (String) objectPid.get(\"pid\");\n+                PID pid = PIDs.get(uuid);\n+\n+                aclService.assertHasAccess(\"User does not have permission to run enhancements\",\n+                        pid, agent.getPrincipals(), Permission.runEnhancements);\n+\n+                LOG.debug(\"sending solr update message for {} of type {}\", pid, \"runEnhancements\");\n+\n+                String objectType = (String) objectPid.get(\"objectType\");\n+\n+                if (!objectType.equals(\"File\")) {\n+                    SearchRequest searchRequest = new SearchRequest();\n+                    searchRequest.setAccessGroups(agent.getPrincipals());\n+                    searchRequest.setSearchState(new SearchState());\n+                    searchRequest.setRootPid(pid);\n+                    searchRequest.setApplyCutoffs(false);\n+                    SearchResultResponse resultResponse = queryLayer.performSearch(searchRequest);\n+\n+                    for (BriefObjectMetadata metadata : resultResponse.getResultList()) {\n+                        createMessage(metadata, pid, agent.getUsername(), force);\n+                    }\n+                } else {\n+                    SimpleIdRequest searchRequest = new SimpleIdRequest(uuid, agent.getPrincipals());\n+                    BriefObjectMetadata metadata = queryLayer.getObjectById(searchRequest);\n+                    createMessage(metadata, pid, agent.getUsername(), force);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.warn(e.getMessage());\n+            throw e;\n+        }\n+    }\n+\n+    public void setAclService(AccessControlService aclService) {\n+        this.aclService = aclService;\n+    }\n+\n+    private void createMessage(BriefObjectMetadata metadata, PID pid, String username, Boolean force) {\n+        List<String> ids = metadata.getDatastream();\n+\n+        for (String id : ids) {\n+            recordInfo = new Datastream(id);\n+            String filePath = DatastreamPids.getOriginalFilePid(pid).toString();\n+\n+            if (recordInfo.getName().equals(\"original_file\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTAxNTgzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo1NDo0OVrOF1xPlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo1NDo0OVrOF1xPlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkyNTY1NQ==", "bodyText": "Use the interface here, List<String>. Also, related to my comment in the controller, just pass in the ids and then use a repositoryObjectLoader.getRepositoryObject to get the object type according to the server. Then you can do instanceof to see what kind of object it is.\nAlso, you can change Boolean force to the primitive boolean force since you don't appear to be expecting a null value, and you're using the primitive over in the controller\nAnd you should also add javadoc for this method. It can be brief, but helpful to describe what the params are.", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391925655", "createdAt": "2020-03-12T21:54:49Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+/**\n+ * @author lfarrell\n+ */\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.CDR_MESSAGE_NS;\n+\n+import io.dropwizard.metrics5.Timer;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.HashMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.model.DatastreamPids;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.model.SimpleIdRequest;\n+import edu.unc.lib.dl.services.AbstractMessageSender;\n+import edu.unc.lib.dl.ui.service.SolrQueryLayerService;\n+\n+public class RunEnhancementsService extends AbstractMessageSender {\n+    private static final Logger LOG = LoggerFactory.getLogger(RunEnhancementsService.class);\n+    private static final Timer timer = TimerFactory.createTimerForClass(RunEnhancementsService.class);\n+\n+    private AccessControlService aclService;\n+\n+    @Autowired\n+    protected SolrQueryLayerService queryLayer;\n+    private Datastream recordInfo;\n+\n+    public void run(AgentPrincipals agent, ArrayList<HashMap> objectPids, Boolean force) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTAyODk0OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo1Njo1MVrOF1xWag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo1Njo1MVrOF1xWag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkyNzQwMg==", "bodyText": "you can put \"runEnhancements\" directly into the message since its not coming from a variable or constant.", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391927402", "createdAt": "2020-03-12T21:56:51Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+/**\n+ * @author lfarrell\n+ */\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.CDR_MESSAGE_NS;\n+\n+import io.dropwizard.metrics5.Timer;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.HashMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.model.DatastreamPids;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.model.SimpleIdRequest;\n+import edu.unc.lib.dl.services.AbstractMessageSender;\n+import edu.unc.lib.dl.ui.service.SolrQueryLayerService;\n+\n+public class RunEnhancementsService extends AbstractMessageSender {\n+    private static final Logger LOG = LoggerFactory.getLogger(RunEnhancementsService.class);\n+    private static final Timer timer = TimerFactory.createTimerForClass(RunEnhancementsService.class);\n+\n+    private AccessControlService aclService;\n+\n+    @Autowired\n+    protected SolrQueryLayerService queryLayer;\n+    private Datastream recordInfo;\n+\n+    public void run(AgentPrincipals agent, ArrayList<HashMap> objectPids, Boolean force) {\n+        try (Timer.Context context = timer.time()) {\n+            for (HashMap objectPid : objectPids) {\n+                String uuid = (String) objectPid.get(\"pid\");\n+                PID pid = PIDs.get(uuid);\n+\n+                aclService.assertHasAccess(\"User does not have permission to run enhancements\",\n+                        pid, agent.getPrincipals(), Permission.runEnhancements);\n+\n+                LOG.debug(\"sending solr update message for {} of type {}\", pid, \"runEnhancements\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTA0OTk1OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjowMzoyOVrOF1xixw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjowMzoyOVrOF1xixw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzMDU2Nw==", "bodyText": "Since all of our enhancements are for files at the moment, you could limit the search to just return file objects. You can do that by adding a facet filter, something like:\nsearchState.getFacets().put(SearchFieldKeys.RESOURCE_TYPE.name(), ResourceType.File.name());", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391930567", "createdAt": "2020-03-12T22:03:29Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+/**\n+ * @author lfarrell\n+ */\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.CDR_MESSAGE_NS;\n+\n+import io.dropwizard.metrics5.Timer;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.HashMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.model.DatastreamPids;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.model.SimpleIdRequest;\n+import edu.unc.lib.dl.services.AbstractMessageSender;\n+import edu.unc.lib.dl.ui.service.SolrQueryLayerService;\n+\n+public class RunEnhancementsService extends AbstractMessageSender {\n+    private static final Logger LOG = LoggerFactory.getLogger(RunEnhancementsService.class);\n+    private static final Timer timer = TimerFactory.createTimerForClass(RunEnhancementsService.class);\n+\n+    private AccessControlService aclService;\n+\n+    @Autowired\n+    protected SolrQueryLayerService queryLayer;\n+    private Datastream recordInfo;\n+\n+    public void run(AgentPrincipals agent, ArrayList<HashMap> objectPids, Boolean force) {\n+        try (Timer.Context context = timer.time()) {\n+            for (HashMap objectPid : objectPids) {\n+                String uuid = (String) objectPid.get(\"pid\");\n+                PID pid = PIDs.get(uuid);\n+\n+                aclService.assertHasAccess(\"User does not have permission to run enhancements\",\n+                        pid, agent.getPrincipals(), Permission.runEnhancements);\n+\n+                LOG.debug(\"sending solr update message for {} of type {}\", pid, \"runEnhancements\");\n+\n+                String objectType = (String) objectPid.get(\"objectType\");\n+\n+                if (!objectType.equals(\"File\")) {\n+                    SearchRequest searchRequest = new SearchRequest();\n+                    searchRequest.setAccessGroups(agent.getPrincipals());\n+                    searchRequest.setSearchState(new SearchState());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTA1NzMwOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjowNjoyOFrOF1xnPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjowNjoyOFrOF1xnPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzMTcxMA==", "bodyText": "Hmm, I think you can remove this catch and leave it up to the thing that calls it to decide whether or not to log the error. Similarly, you might want to add some logging to the controller to log the error in the catch block it already has.", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391931710", "createdAt": "2020-03-12T22:06:28Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+/**\n+ * @author lfarrell\n+ */\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.CDR_MESSAGE_NS;\n+\n+import io.dropwizard.metrics5.Timer;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.HashMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.model.DatastreamPids;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.model.SimpleIdRequest;\n+import edu.unc.lib.dl.services.AbstractMessageSender;\n+import edu.unc.lib.dl.ui.service.SolrQueryLayerService;\n+\n+public class RunEnhancementsService extends AbstractMessageSender {\n+    private static final Logger LOG = LoggerFactory.getLogger(RunEnhancementsService.class);\n+    private static final Timer timer = TimerFactory.createTimerForClass(RunEnhancementsService.class);\n+\n+    private AccessControlService aclService;\n+\n+    @Autowired\n+    protected SolrQueryLayerService queryLayer;\n+    private Datastream recordInfo;\n+\n+    public void run(AgentPrincipals agent, ArrayList<HashMap> objectPids, Boolean force) {\n+        try (Timer.Context context = timer.time()) {\n+            for (HashMap objectPid : objectPids) {\n+                String uuid = (String) objectPid.get(\"pid\");\n+                PID pid = PIDs.get(uuid);\n+\n+                aclService.assertHasAccess(\"User does not have permission to run enhancements\",\n+                        pid, agent.getPrincipals(), Permission.runEnhancements);\n+\n+                LOG.debug(\"sending solr update message for {} of type {}\", pid, \"runEnhancements\");\n+\n+                String objectType = (String) objectPid.get(\"objectType\");\n+\n+                if (!objectType.equals(\"File\")) {\n+                    SearchRequest searchRequest = new SearchRequest();\n+                    searchRequest.setAccessGroups(agent.getPrincipals());\n+                    searchRequest.setSearchState(new SearchState());\n+                    searchRequest.setRootPid(pid);\n+                    searchRequest.setApplyCutoffs(false);\n+                    SearchResultResponse resultResponse = queryLayer.performSearch(searchRequest);\n+\n+                    for (BriefObjectMetadata metadata : resultResponse.getResultList()) {\n+                        createMessage(metadata, pid, agent.getUsername(), force);\n+                    }\n+                } else {\n+                    SimpleIdRequest searchRequest = new SimpleIdRequest(uuid, agent.getPrincipals());\n+                    BriefObjectMetadata metadata = queryLayer.getObjectById(searchRequest);\n+                    createMessage(metadata, pid, agent.getUsername(), force);\n+                }\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTA2MDA4OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjowNzoyN1rOF1xo0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjowNzoyN1rOF1xo0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzMjExNA==", "bodyText": "doesn't matter too much, but maybe submit the value \"true\"?", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391932114", "createdAt": "2020-03-12T22:07:27Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+/**\n+ * @author lfarrell\n+ */\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.CDR_MESSAGE_NS;\n+\n+import io.dropwizard.metrics5.Timer;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.HashMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.model.DatastreamPids;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.model.SimpleIdRequest;\n+import edu.unc.lib.dl.services.AbstractMessageSender;\n+import edu.unc.lib.dl.ui.service.SolrQueryLayerService;\n+\n+public class RunEnhancementsService extends AbstractMessageSender {\n+    private static final Logger LOG = LoggerFactory.getLogger(RunEnhancementsService.class);\n+    private static final Timer timer = TimerFactory.createTimerForClass(RunEnhancementsService.class);\n+\n+    private AccessControlService aclService;\n+\n+    @Autowired\n+    protected SolrQueryLayerService queryLayer;\n+    private Datastream recordInfo;\n+\n+    public void run(AgentPrincipals agent, ArrayList<HashMap> objectPids, Boolean force) {\n+        try (Timer.Context context = timer.time()) {\n+            for (HashMap objectPid : objectPids) {\n+                String uuid = (String) objectPid.get(\"pid\");\n+                PID pid = PIDs.get(uuid);\n+\n+                aclService.assertHasAccess(\"User does not have permission to run enhancements\",\n+                        pid, agent.getPrincipals(), Permission.runEnhancements);\n+\n+                LOG.debug(\"sending solr update message for {} of type {}\", pid, \"runEnhancements\");\n+\n+                String objectType = (String) objectPid.get(\"objectType\");\n+\n+                if (!objectType.equals(\"File\")) {\n+                    SearchRequest searchRequest = new SearchRequest();\n+                    searchRequest.setAccessGroups(agent.getPrincipals());\n+                    searchRequest.setSearchState(new SearchState());\n+                    searchRequest.setRootPid(pid);\n+                    searchRequest.setApplyCutoffs(false);\n+                    SearchResultResponse resultResponse = queryLayer.performSearch(searchRequest);\n+\n+                    for (BriefObjectMetadata metadata : resultResponse.getResultList()) {\n+                        createMessage(metadata, pid, agent.getUsername(), force);\n+                    }\n+                } else {\n+                    SimpleIdRequest searchRequest = new SimpleIdRequest(uuid, agent.getPrincipals());\n+                    BriefObjectMetadata metadata = queryLayer.getObjectById(searchRequest);\n+                    createMessage(metadata, pid, agent.getUsername(), force);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.warn(e.getMessage());\n+            throw e;\n+        }\n+    }\n+\n+    public void setAclService(AccessControlService aclService) {\n+        this.aclService = aclService;\n+    }\n+\n+    private void createMessage(BriefObjectMetadata metadata, PID pid, String username, Boolean force) {\n+        List<String> ids = metadata.getDatastream();\n+\n+        for (String id : ids) {\n+            recordInfo = new Datastream(id);\n+            String filePath = DatastreamPids.getOriginalFilePid(pid).toString();\n+\n+            if (recordInfo.getName().equals(\"original_file\")) {\n+                Document msg = makeEnhancementOperationBody(username,\n+                        filePath, recordInfo.getMimetype(), force);\n+                sendMessage(msg);\n+            }\n+        }\n+    }\n+\n+    private Document makeEnhancementOperationBody(String userid, String filePath, String mimeType, Boolean force) {\n+        Document msg = new Document();\n+        Element entry = new Element(\"entry\", ATOM_NS);\n+        entry.addContent(new Element(\"author\", ATOM_NS)\n+                .addContent(new Element(\"name\", ATOM_NS).setText(userid)));\n+        entry.addContent(new Element(\"pid\", ATOM_NS).setText(filePath));\n+        entry.addContent(new Element(\"mimeType\", ATOM_NS).setText(mimeType));\n+\n+        if (force) {\n+            Element paramForce = new Element(\"force\", CDR_MESSAGE_NS);\n+            paramForce.setText(\"force\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTA2OTkxOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/RunEnhancementsController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjoxMTozNVrOF1xuyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjoxMTozNVrOF1xuyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzMzY0Mw==", "bodyText": "Totally optional, but wanted to mention that you could pass RunEnhancementsRequest into the service as the input rather than PIDS and force separately. I don't really have that much of an opinion on this though. If you do, you might want to move the declaration of this class into the service though.", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r391933643", "createdAt": "2020-03-12T22:11:35Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/RunEnhancementsController.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import edu.unc.lib.dl.acl.exception.AccessRestrictionException;\n+import edu.unc.lib.dl.fedora.AuthorizationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import edu.unc.lib.dl.acl.util.GroupsThreadStore;\n+import edu.unc.lib.dl.cdr.services.processing.RunEnhancementsService;\n+\n+/**\n+ * @author bbpennel\n+ * @author lfarrell\n+ */\n+@Controller\n+public class RunEnhancementsController {\n+    private static final Logger log = LoggerFactory.getLogger(RunEnhancementsController.class);\n+\n+    @Autowired\n+    private RunEnhancementsService enhService;\n+\n+    @RequestMapping(value = \"runEnhancements\", method = RequestMethod.POST, produces = \"application/json\")\n+    public @ResponseBody ResponseEntity<Object> runEnhancements(@RequestBody RunEnhancementsRequest data,\n+            HttpServletRequest request, HttpServletResponse response) {\n+        Map<String, Object> result = new HashMap<>();\n+\n+        try {\n+            enhService.run(GroupsThreadStore.getAgentPrincipals(), data.getPids(), data.isForce());\n+            result.put(\"message\", \"Enhancement of \" + data.getPids().size()\n+                    + \" object(s) and their children has begun\");\n+            result.put(\"action\", \"runEnhancements\");\n+        } catch (Exception e) {\n+            result.put(\"message\", \"Unable to run enhancements of \" + data.getPids().size()\n+                    + \" object(s) and their children\");\n+            result.put(\"error\", e.getMessage());\n+            if (e instanceof AuthorizationException || e instanceof AccessRestrictionException) {\n+                return new ResponseEntity<>(result, HttpStatus.FORBIDDEN);\n+            } else {\n+                log.error(\"Failed to run enhancements for {}\", data.getPids().toString(), e);\n+                return new ResponseEntity<>(result, HttpStatus.INTERNAL_SERVER_ERROR);\n+            }\n+        }\n+\n+        result.put(\"timestamp\", System.currentTimeMillis());\n+        return new ResponseEntity<>(result, HttpStatus.OK);\n+    }\n+\n+    public static class RunEnhancementsRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7f2be40b8c711104c63d06c3977b86422da043"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjA4MDgxOnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/fulltext/FulltextProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo1NjoxNFrOF2PC7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo1NjoxNFrOF2PC7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxMzkzMg==", "bodyText": "use\nthrow new IOException(\"Failed to create parent directories for \" + derivativePath, e);", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r392413932", "createdAt": "2020-03-13T18:56:14Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/fulltext/FulltextProcessor.java", "diffHunk": "@@ -86,9 +86,9 @@ public void process(Exchange exchange) throws Exception {\n         if (parentDir != null) {\n             try {\n                 Files.createDirectories(parentDir.toPath());\n-            } catch (Exception e) {\n-                log.error(e.getMessage());\n-                throw new IOException(\"Failed to create parent directories for \" + derivativePath);\n+            } catch (IOException e) {\n+                throw new IOException(\"Failed to create parent directories for \" + derivativePath + \".\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e95e4c3ccafe5cfdfa4b9d4cd458aeb0c5d405c3"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjA4ODE3OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo1ODozNVrOF2PHrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo1ODozNVrOF2PHrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNTE1MQ==", "bodyText": "Might be helpful to state that it searches for file objects which are in the list of pids or children of those objects.", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r392415151", "createdAt": "2020-03-13T18:58:35Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "diffHunk": "@@ -45,36 +43,52 @@\n import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n import edu.unc.lib.dl.search.solr.model.SearchState;\n import edu.unc.lib.dl.search.solr.model.SimpleIdRequest;\n+import edu.unc.lib.dl.search.solr.util.SearchFieldKeys;\n import edu.unc.lib.dl.services.AbstractMessageSender;\n import edu.unc.lib.dl.ui.service.SolrQueryLayerService;\n+import edu.unc.lib.dl.util.ResourceType;\n \n+/**\n+ * Queries solr and creates JMS message(s) to run enhancements on returned File objects\n+ *\n+ * @author lfarrell\n+ */\n public class RunEnhancementsService extends AbstractMessageSender {\n     private static final Logger LOG = LoggerFactory.getLogger(RunEnhancementsService.class);\n     private static final Timer timer = TimerFactory.createTimerForClass(RunEnhancementsService.class);\n \n     private AccessControlService aclService;\n \n+    @Autowired\n+    private RepositoryObjectLoader repositoryObjectLoader;\n+\n     @Autowired\n     protected SolrQueryLayerService queryLayer;\n-    private Datastream recordInfo;\n \n-    public void run(AgentPrincipals agent, ArrayList<HashMap> objectPids, Boolean force) {\n+    /**\n+     * Service to take a list of pids to search for file objects and run enhancements on.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e95e4c3ccafe5cfdfa4b9d4cd458aeb0c5d405c3"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjExOTU1OnYy", "diffSide": "RIGHT", "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/RunEnhancementsIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOToxMDozNlrOF2Pb4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOToxMDozNlrOF2Pb4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQyMDMyMQ==", "bodyText": "If you call createFileObject(null) then it will make a PID for you and you don't have to worry about collisions between test runs. You can get the pid back by calling fileObj.getPid(). This would allow you to remove hard coded pids too.", "url": "https://github.com/UNC-Libraries/box-c/pull/924#discussion_r392420321", "createdAt": "2020-03-13T19:10:36Z", "author": {"login": "bbpennel"}, "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/RunEnhancementsIT.java", "diffHunk": "@@ -108,10 +127,12 @@ public void setup() throws Exception {\n \n     @Test\n     public void runEnhancementsFileObject() throws Exception {\n+        FileObject fileObj = repositoryObjectFactory.createFileObject(PIDs.get(UUID_TEST), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e95e4c3ccafe5cfdfa4b9d4cd458aeb0c5d405c3"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 721, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}