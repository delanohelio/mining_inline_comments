{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MzE5OTEw", "number": 1088, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDowMjozN1rOEgIxpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDowMjoxMVrOEhsDUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTMzNjY4OnYy", "diffSide": "RIGHT", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/deposit/DepositModelManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDowMjozN1rOHM1k_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDowMjozN1rOHM1k_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyMjc4Mw==", "bodyText": "Should this variant of the method not worry about checking if the dataset is null and just assume it is? Then there's no need to pass it in \"null\".", "url": "https://github.com/UNC-Libraries/box-c/pull/1088#discussion_r483222783", "createdAt": "2020-09-03T20:02:37Z", "author": {"login": "lfarrell"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/deposit/DepositModelManager.java", "diffHunk": "@@ -0,0 +1,479 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.deposit;\n+\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.nio.file.DirectoryNotEmptyException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.locks.Lock;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.query.Dataset;\n+import org.apache.jena.query.Query;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QueryExecutionFactory;\n+import org.apache.jena.query.QueryFactory;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ReadWrite;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Bag;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.tdb.TDBFactory;\n+import org.apache.jena.tdb.transaction.TDBTransactionException;\n+import org.apache.jena.update.UpdateAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.util.concurrent.Striped;\n+\n+import edu.unc.lib.dl.exceptions.InterruptedRuntimeException;\n+import edu.unc.lib.dl.exceptions.RepositoryException;\n+import edu.unc.lib.dl.fedora.PID;\n+\n+/**\n+ * Manager which provides synchronized access to a common deposit model, allowing\n+ * multiple transformation jobs to write to it at the same time.\n+ *\n+ * @author bbpennel\n+ */\n+public class DepositModelManager {\n+\n+    private static final Logger log = LoggerFactory.getLogger(DepositModelManager.class);\n+    private static final int DEPOSIT_LOCK_STRIPES = 5;\n+\n+    private Path tdbBasePath;\n+    // Locks to prevent simultaneous attempts to get the same dataset\n+    private Striped<Lock> depositLocker;\n+\n+    /**\n+     * Construct a deposit model manager\n+     * @param tdbBaseDir path to the tdb directory\n+     */\n+    public DepositModelManager(String tdbBaseDir) {\n+        this(Paths.get(tdbBaseDir));\n+    }\n+\n+    /**\n+     * Construct and initialize a deposit model manager\n+     * @param depositsPtdbBasePathath\n+     */\n+    public DepositModelManager(Path tdbBasePath) {\n+        this();\n+        this.tdbBasePath = tdbBasePath;\n+    }\n+\n+    /**\n+     * Cleanup leftover empty dataset directories in the tdb directory\n+     */\n+    public void cleanupEmptyDatasets() {\n+        try (DirectoryStream<Path> dirStream = Files.newDirectoryStream(tdbBasePath)) {\n+            for (Path childPath : dirStream) {\n+                // delete the child if it is both a directory and is empty\n+                if (Files.isDirectory(childPath)) {\n+                    try (DirectoryStream<Path> childDirStream = Files.newDirectoryStream(childPath)) {\n+                        if (!childDirStream.iterator().hasNext()) {\n+                            Files.delete(childPath);\n+                        }\n+                    } catch (DirectoryNotEmptyException e) {\n+                        // Ignore attempts to delete directories that contain files\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            log.error(\"Failed to cleanup empty directories in {}\", tdbBasePath, e);\n+        }\n+    }\n+\n+    /**\n+     * Construct a deposit model manager\n+     */\n+    public DepositModelManager() {\n+        depositLocker = Striped.lazyWeakLock(DEPOSIT_LOCK_STRIPES);\n+    }\n+\n+    private Dataset loadDataset(PID depositPid) {\n+        long start = System.currentTimeMillis();\n+        Path datasetTdbPath = getDatasetPath(depositPid);\n+        if (Files.notExists(datasetTdbPath)) {\n+            try {\n+                Files.createDirectories(datasetTdbPath);\n+            } catch (IOException e) {\n+                throw new RepositoryException(\"Failed to create dataset directory for deposit\", e);\n+            }\n+        }\n+        Dataset dataset = TDBFactory.createDataset(datasetTdbPath.toString());\n+        log.debug(\"Loaded dataset for {} at {} in {}ms\",\n+                depositPid.getId(), datasetTdbPath, (System.currentTimeMillis() - start));\n+        return dataset;\n+    }\n+\n+    private Path getDatasetPath(PID depositPid) {\n+        return tdbBasePath.resolve(depositPid.getId());\n+    }\n+\n+    /**\n+     * Close the model and dataset for a deposit\n+     * @param depositPid\n+     */\n+    public void close(PID depositPid) {\n+        Path datasetTdbPath = getDatasetPath(depositPid);\n+        // Skip further closing if the dataset does not exist\n+        if (Files.notExists(datasetTdbPath)) {\n+            return;\n+        }\n+        Dataset dataset = loadDataset(depositPid);\n+        dataset.close();\n+    }\n+\n+    /**\n+     * Close the provided model\n+     * @param model must be a DatasetModelDecorator\n+     */\n+    public void close(Model model) {\n+        if (!(model instanceof DatasetModelDecorator)) {\n+            throw new IllegalArgumentException(\"Must provide a DatasetModelDecorator\");\n+        }\n+        ((DatasetModelDecorator) model).getDataset().close();\n+    }\n+\n+    /**\n+     * Start a write transaction for the deposit model/dataset\n+     *\n+     * @param depositPid pid of the deposit\n+     * @return\n+     */\n+    public Model getWriteModel(PID depositPid) {\n+        String depositUri = depositPid.getURI();\n+\n+        Lock lock = depositLocker.get(depositUri);\n+        try {\n+            lock.lockInterruptibly();\n+\n+            Dataset dataset = loadDataset(depositPid);\n+            return getWriteModel(depositUri, dataset);\n+        } catch (InterruptedException e) {\n+            throw new InterruptedRuntimeException(e);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    private Model getWriteModel(String depositUri, Dataset dataset) {\n+        long start = System.currentTimeMillis();\n+        try {\n+            dataset.begin(ReadWrite.WRITE);\n+            if (!dataset.containsNamedModel(depositUri)) {\n+                dataset.addNamedModel(depositUri, createDefaultModel());\n+            }\n+            return new DatasetModelDecorator(dataset.getNamedModel(depositUri), dataset);\n+        } catch (TDBTransactionException e) {\n+            if (e.getCause() instanceof InterruptedException) {\n+                throw new InterruptedRuntimeException(\"Interrupted while waiting for TDB write lock for deposit \"\n+                        + depositUri, e);\n+            }\n+            throw e;\n+        } finally {\n+            log.debug(\"Created write model for {} in {}ms\", depositUri, (System.currentTimeMillis() - start));\n+        }\n+    }\n+\n+    /**\n+     * Get a read only model for a deposit\n+     *\n+     * @param depositPid pid of the deposit\n+     * @return the model\n+     */\n+    public Model getReadModel(PID depositPid) {\n+        long start = System.currentTimeMillis();\n+        String depositUri = depositPid.getURI();\n+\n+        Lock lock = depositLocker.get(depositUri);\n+        try {\n+            lock.lockInterruptibly();\n+\n+            Dataset dataset = loadDataset(depositPid);\n+            dataset.begin(ReadWrite.READ);\n+            return new DatasetModelDecorator(dataset.getNamedModel(depositUri), dataset);\n+        } catch (InterruptedException e) {\n+            throw new InterruptedRuntimeException(e);\n+        } catch (TDBTransactionException e) {\n+            if (e.getCause() instanceof InterruptedException) {\n+                throw new InterruptedRuntimeException(\"Interrupted while waiting for TDB read lock for deposit \"\n+                        + depositUri, e);\n+            }\n+            throw e;\n+        } finally {\n+            lock.unlock();\n+            log.debug(\"Created write model for {} in {}ms\", depositUri, (System.currentTimeMillis() - start));\n+        }\n+    }\n+\n+    /**\n+     * Removes and closes the model for a deposit from the manager\n+     *\n+     * @param depositPid\n+     */\n+    public synchronized void removeModel(PID depositPid) {\n+        Dataset dataset = loadDataset(depositPid);\n+        removeModel(depositPid, dataset);\n+    }\n+\n+    /**\n+     * Removes and closes the model for the given dataset\n+     * @param depositPid\n+     * @param dataset\n+     */\n+    public void removeModel(PID depositPid, Dataset dataset) {\n+        String uri = depositPid.getURI();\n+        if (!dataset.isInTransaction()) {\n+            dataset.begin(ReadWrite.WRITE);\n+        }\n+        dataset.removeNamedModel(uri);\n+        dataset.commit();\n+        dataset.end();\n+        dataset.close();\n+\n+        Path datasetPath = getDatasetPath(depositPid);\n+        try {\n+            FileUtils.deleteDirectory(datasetPath.toFile());\n+        } catch (IOException e) {\n+            log.debug(\"Unable to delete TDB directory {}\", datasetPath);\n+        }\n+    }\n+\n+    /**\n+     * Add triples from the provided model to the deposit model\n+     *\n+     * @param depositPid pid of the deposit\n+     * @param model\n+     */\n+    public void addTriples(PID depositPid, Model model) {\n+        addTriples(depositPid, model, null, null);\n+    }\n+\n+    /**\n+     * Add triples from the provided model to the deposit model, inserting the\n+     * new resource as the child of the provided parent\n+     *\n+     * @param depositPid pid of the deposit\n+     * @param model\n+     * @param newPid\n+     * @param parentPid\n+     */\n+    public void addTriples(PID depositPid, Model model, PID newPid, PID parentPid) {\n+        String depositUri = depositPid.getURI();\n+\n+        Lock lock = depositLocker.get(depositUri);\n+        try {\n+            lock.lockInterruptibly();\n+\n+            Dataset dataset = loadDataset(depositPid);\n+\n+            Model depositModel = getWriteModel(depositUri, dataset);\n+            try {\n+                // Insert reference from parent to new resource\n+                if (newPid != null && parentPid != null) {\n+                    Resource newResc = model.getResource(newPid.getRepositoryPath());\n+                    Bag parentBag = depositModel.getBag(parentPid.getRepositoryPath());\n+\n+                    parentBag.add(newResc);\n+                }\n+\n+                log.debug(\"Adding triples to deposit model: {}\", model);\n+                depositModel.add(model);\n+                dataset.commit();\n+            } finally {\n+                dataset.end();\n+            }\n+        } catch (InterruptedException e) {\n+            throw new InterruptedRuntimeException(e);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    /**\n+     * Perform a sparql update against the deposit model\n+     *\n+     * @param depositPid pid of the deposit\n+     * @param query sparql update query\n+     */\n+    public void performUpdate(PID depositPid, String query) {\n+        String depositUri = depositPid.getURI();\n+\n+        Lock lock = depositLocker.get(depositUri);\n+        try {\n+            lock.lockInterruptibly();\n+\n+            Dataset dataset = loadDataset(depositPid);\n+            Model depositModel = getWriteModel(depositUri, dataset);\n+            try {\n+                UpdateAction.parseExecute(query, depositModel);\n+                dataset.commit();\n+            } finally {\n+                dataset.end();\n+            }\n+        } catch (InterruptedException e) {\n+            throw new InterruptedRuntimeException(e);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    /**\n+     * Perform a sparql query against the deposit model\n+     *\n+     * @param depositPid pid of the deposit\n+     * @param queryString sparql query\n+     * @return results of the query, serialized as csv in an output stream\n+     * @throws IOException\n+     */\n+    public String performQuery(PID depositPid, String queryString) throws IOException {\n+        Model depositModel = getReadModel(depositPid);\n+\n+        Query query = QueryFactory.create(queryString);\n+\n+        ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n+\n+        try (\n+                QueryExecution qexec = QueryExecutionFactory.create(query, depositModel);\n+                Writer writer = new PrintWriter(outStream);\n+                CSVPrinter printer = new CSVPrinter(writer, CSVFormat.DEFAULT);\n+                ) {\n+            ResultSet results = qexec.execSelect();\n+            List<String> varNames = results.getResultVars();\n+\n+            while (results.hasNext()) {\n+                QuerySolution soln = results.nextSolution();\n+\n+                for (String varName : varNames) {\n+                    printer.print(soln.get(varName));\n+                }\n+                printer.println();\n+            }\n+        }\n+\n+        return outStream.toString(\"UTF-8\");\n+    }\n+\n+    /**\n+     * Commit changes to the dataset\n+     * @param depositPid pid of the deposit\n+     * @param dataset dataset to commit, or null, in which case the dataset will be retrieved\n+     * @param endTx end the transaction if true\n+     */\n+    public void commit(PID depositPid, Dataset dataset, boolean endTx) {\n+        if (dataset == null) {\n+            commit(depositPid, endTx);\n+        } else {\n+            commit(dataset, endTx);\n+        }\n+    }\n+\n+    /**\n+     * Commit changes to the dataset for the specified deposit\n+     * @param depositPid pid of the deposit\n+     * @param endTx end the transaction if true\n+     */\n+    public void commit(PID depositPid, boolean endTx) {\n+        String depositUri = depositPid.getURI();\n+\n+        Lock lock = depositLocker.get(depositUri);\n+        try {\n+            lock.lockInterruptibly();\n+\n+            Dataset dataset = loadDataset(depositPid);\n+            commit(dataset, endTx);\n+        } catch (InterruptedException e) {\n+            throw new InterruptedRuntimeException(e);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    private void commit(Dataset dataset, boolean endTx) {\n+        if (dataset.isInTransaction()) {\n+            dataset.commit();\n+            if (endTx) {\n+                dataset.end();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Commit or abort changes in the dataset\n+     * @param depositPid pid of the deposit\n+     * @param dataset dataset to commit, or null, in which case the dataset will be retrieved\n+     * @param abort if true, the commit will be aborted\n+     */\n+    public void commitOrAbort(PID depositPid, Dataset dataset, boolean abort) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd12e5d4e6c895fb46758ac81e3a5bef8a6a1ae"}, "originalPosition": 434}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTM2MTcyOnYy", "diffSide": "RIGHT", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/deposit/DepositModelManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoxMTowMFrOHM10nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyODo1MlrOHM2bKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyNjc4Mw==", "bodyText": "JavaDoc and method signature don't match", "url": "https://github.com/UNC-Libraries/box-c/pull/1088#discussion_r483226783", "createdAt": "2020-09-03T20:11:00Z", "author": {"login": "lfarrell"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/deposit/DepositModelManager.java", "diffHunk": "@@ -0,0 +1,479 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.deposit;\n+\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.nio.file.DirectoryNotEmptyException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.locks.Lock;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.query.Dataset;\n+import org.apache.jena.query.Query;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QueryExecutionFactory;\n+import org.apache.jena.query.QueryFactory;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ReadWrite;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Bag;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.tdb.TDBFactory;\n+import org.apache.jena.tdb.transaction.TDBTransactionException;\n+import org.apache.jena.update.UpdateAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.util.concurrent.Striped;\n+\n+import edu.unc.lib.dl.exceptions.InterruptedRuntimeException;\n+import edu.unc.lib.dl.exceptions.RepositoryException;\n+import edu.unc.lib.dl.fedora.PID;\n+\n+/**\n+ * Manager which provides synchronized access to a common deposit model, allowing\n+ * multiple transformation jobs to write to it at the same time.\n+ *\n+ * @author bbpennel\n+ */\n+public class DepositModelManager {\n+\n+    private static final Logger log = LoggerFactory.getLogger(DepositModelManager.class);\n+    private static final int DEPOSIT_LOCK_STRIPES = 5;\n+\n+    private Path tdbBasePath;\n+    // Locks to prevent simultaneous attempts to get the same dataset\n+    private Striped<Lock> depositLocker;\n+\n+    /**\n+     * Construct a deposit model manager\n+     * @param tdbBaseDir path to the tdb directory\n+     */\n+    public DepositModelManager(String tdbBaseDir) {\n+        this(Paths.get(tdbBaseDir));\n+    }\n+\n+    /**\n+     * Construct and initialize a deposit model manager\n+     * @param depositsPtdbBasePathath\n+     */\n+    public DepositModelManager(Path tdbBasePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd12e5d4e6c895fb46758ac81e3a5bef8a6a1ae"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNjY0OA==", "bodyText": "Javadoc is butchered. Let me fix that", "url": "https://github.com/UNC-Libraries/box-c/pull/1088#discussion_r483236648", "createdAt": "2020-09-03T20:28:52Z", "author": {"login": "bbpennel"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/deposit/DepositModelManager.java", "diffHunk": "@@ -0,0 +1,479 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.deposit;\n+\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.nio.file.DirectoryNotEmptyException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.locks.Lock;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.query.Dataset;\n+import org.apache.jena.query.Query;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QueryExecutionFactory;\n+import org.apache.jena.query.QueryFactory;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ReadWrite;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Bag;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.tdb.TDBFactory;\n+import org.apache.jena.tdb.transaction.TDBTransactionException;\n+import org.apache.jena.update.UpdateAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.util.concurrent.Striped;\n+\n+import edu.unc.lib.dl.exceptions.InterruptedRuntimeException;\n+import edu.unc.lib.dl.exceptions.RepositoryException;\n+import edu.unc.lib.dl.fedora.PID;\n+\n+/**\n+ * Manager which provides synchronized access to a common deposit model, allowing\n+ * multiple transformation jobs to write to it at the same time.\n+ *\n+ * @author bbpennel\n+ */\n+public class DepositModelManager {\n+\n+    private static final Logger log = LoggerFactory.getLogger(DepositModelManager.class);\n+    private static final int DEPOSIT_LOCK_STRIPES = 5;\n+\n+    private Path tdbBasePath;\n+    // Locks to prevent simultaneous attempts to get the same dataset\n+    private Striped<Lock> depositLocker;\n+\n+    /**\n+     * Construct a deposit model manager\n+     * @param tdbBaseDir path to the tdb directory\n+     */\n+    public DepositModelManager(String tdbBaseDir) {\n+        this(Paths.get(tdbBaseDir));\n+    }\n+\n+    /**\n+     * Construct and initialize a deposit model manager\n+     * @param depositsPtdbBasePathath\n+     */\n+    public DepositModelManager(Path tdbBasePath) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyNjc4Mw=="}, "originalCommit": {"oid": "6cd12e5d4e6c895fb46758ac81e3a5bef8a6a1ae"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzYwMjEwOnYy", "diffSide": "RIGHT", "path": "deposit/src/main/java/edu/unc/lib/deposit/normalize/BagIt2N3BagJob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDowMjoxMVrOHPI5Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxMjoyOFrOHPJY9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYzNjQ0Mw==", "bodyText": "Should this be below the gov imports?", "url": "https://github.com/UNC-Libraries/box-c/pull/1088#discussion_r485636443", "createdAt": "2020-09-09T14:02:11Z", "author": {"login": "lfarrell"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/normalize/BagIt2N3BagJob.java", "diffHunk": "@@ -32,11 +32,13 @@\n import java.util.Set;\n \n import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n import org.apache.jena.rdf.model.Property;\n import org.apache.jena.rdf.model.Resource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import edu.unc.lib.dl.util.RedisWorkerConstants.DepositField;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5afa10c9abff436ae8ff3411abad5382ca239f3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0NDUzNA==", "bodyText": "Answered my own question", "url": "https://github.com/UNC-Libraries/box-c/pull/1088#discussion_r485644534", "createdAt": "2020-09-09T14:12:28Z", "author": {"login": "lfarrell"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/normalize/BagIt2N3BagJob.java", "diffHunk": "@@ -32,11 +32,13 @@\n import java.util.Set;\n \n import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n import org.apache.jena.rdf.model.Property;\n import org.apache.jena.rdf.model.Resource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import edu.unc.lib.dl.util.RedisWorkerConstants.DepositField;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYzNjQ0Mw=="}, "originalCommit": {"oid": "c5afa10c9abff436ae8ff3411abad5382ca239f3"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 685, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}