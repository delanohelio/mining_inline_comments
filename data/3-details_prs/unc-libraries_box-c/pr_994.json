{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMjMyODky", "number": 994, "title": "BXC-2537/2638 - Deposit migrated timestamps and deposit links", "bodyText": "https://jira.lib.unc.edu/browse/BXC-2638\nhttps://jira.lib.unc.edu/browse/BXC-2537\n\nApplies created/modified timestamps supplied in a deposit if the overrideTimestamps flag if provided\nOverrides the deposit record link on objects in an ingest if one was set in the deposit model\n\nfixes a bug where the deposit id had the wrong pid type\n\n\nFixes issue with longleaf registration which occurs when a deposit does not create a deposit record", "createdAt": "2020-05-19T16:32:02Z", "url": "https://github.com/UNC-Libraries/box-c/pull/994", "merged": true, "mergeCommit": {"oid": "58a78dcbf525a1b195ea452a8ac395b11892690a"}, "closed": true, "closedAt": "2020-05-19T19:53:35Z", "author": {"login": "bbpennel"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcikeCfAH2gAyNDIwMjMyODkyOjE3NWU2YTIxZDBjODY5MDQ1YTZjNTdlOTMwMzY0NmJiYmNhODk0ZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABci55DmgFqTQxNDc2OTYyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "175e6a21d0c869045a6c57e9303646bbbca894e0", "author": {"user": {"login": "bbpennel", "name": "Ben Pennell"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/175e6a21d0c869045a6c57e9303646bbbca894e0", "committedDate": "2020-05-18T18:48:54Z", "message": "Honor original deposit record link overrides during ingest of content objects. Resolves BXC-2537"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "756772c6d309502e0c2f759cc7031dabe3e909e7", "author": {"user": {"login": "bbpennel", "name": "Ben Pennell"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/756772c6d309502e0c2f759cc7031dabe3e909e7", "committedDate": "2020-05-19T15:31:43Z", "message": "Support overriding of timestamps during ingest of content objects. Longleaf registration skip deposit record files if no deposit record generated"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NzY5NjI1", "url": "https://github.com/UNC-Libraries/box-c/pull/994#pullrequestreview-414769625", "createdAt": "2020-05-19T19:46:25Z", "commit": {"oid": "756772c6d309502e0c2f759cc7031dabe3e909e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTo0NjoyNVrOGXwBMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTo0NjoyNVrOGXwBMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1NzE3MQ==", "bodyText": "does .addLiteral() overwrite the previous value, or is the last modified on the deposit not set by default?", "url": "https://github.com/UNC-Libraries/box-c/pull/994#discussion_r427557171", "createdAt": "2020-05-19T19:46:25Z", "author": {"login": "lfarrell"}, "path": "deposit/src/test/java/edu/unc/lib/deposit/fcrepo4/IngestContentObjectsJobIT.java", "diffHunk": "@@ -728,6 +734,135 @@ public void onlyIngestionEventAddedTest() throws Exception {\n         assertTrue(logModel.contains(null, RDF.type, Premis.Ingestion));\n     }\n \n+    @Test\n+    public void fromMultipleDepositsTest() throws Exception {\n+\n+        PID folderObj1Pid = pidMinter.mintContentPid();\n+        PID folderObj2Pid = pidMinter.mintContentPid();\n+        PID folderObj3Pid = pidMinter.mintContentPid();\n+\n+        PID deposit2Pid = pidMinter.mintDepositRecordPid();\n+        PID deposit3Pid = pidMinter.mintDepositRecordPid();\n+\n+        // Create the deposit records since the references must resolve\n+        repoObjFactory.createDepositRecord(deposit2Pid, null);\n+        repoObjFactory.createDepositRecord(deposit3Pid, null);\n+\n+        Model model = job.getWritableModel();\n+        Bag depBag = model.createBag(depositPid.getRepositoryPath());\n+\n+        // First folder from deposit 2\n+        Bag folder1Bag = model.createBag(folderObj1Pid.getRepositoryPath());\n+        folder1Bag.addProperty(RDF.type, Cdr.Folder);\n+        folder1Bag.addProperty(CdrDeposit.originalDeposit, createResource(deposit2Pid.getRepositoryPath()));\n+        depBag.add(folder1Bag);\n+\n+        // Second folder from default deposit\n+        Bag folder2Bag = model.createBag(folderObj2Pid.getRepositoryPath());\n+        folder2Bag.addProperty(RDF.type, Cdr.Folder);\n+        depBag.add(folder2Bag);\n+\n+        // Third folder from deposit 3\n+        Bag folder3Bag = model.createBag(folderObj3Pid.getRepositoryPath());\n+        folder3Bag.addProperty(RDF.type, Cdr.Folder);\n+        folder3Bag.addProperty(CdrDeposit.originalDeposit, createResource(deposit3Pid.getRepositoryPath()));\n+        depBag.add(folder3Bag);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        // Verify that the correct original deposit ids are assigned to each folder\n+        FolderObject folder1 = repoObjLoader.getFolderObject(folderObj1Pid);\n+        Resource f1DepositResc = folder1.getResource().getProperty(Cdr.originalDeposit).getResource();\n+        assertEquals(deposit2Pid.getRepositoryPath(), f1DepositResc.getURI());\n+\n+        FolderObject folder2 = repoObjLoader.getFolderObject(folderObj2Pid);\n+        Resource f2DepositResc = folder2.getResource().getProperty(Cdr.originalDeposit).getResource();\n+        assertEquals(depositPid.getRepositoryPath(), f2DepositResc.getURI());\n+\n+        FolderObject folder3 = repoObjLoader.getFolderObject(folderObj3Pid);\n+        Resource f3DepositResc = folder3.getResource().getProperty(Cdr.originalDeposit).getResource();\n+        assertEquals(deposit3Pid.getRepositoryPath(), f3DepositResc.getURI());\n+    }\n+\n+    private final static String CREATED_STRING = \"2011-10-04T20:36:44.902Z\";\n+    private final static String LAST_MODIFIED_STRING = \"2013-10-06T10:16:44.111Z\";\n+    private final static Date CREATED_DATE = DateTimeUtil.parseUTCToDate(CREATED_STRING);\n+    private final static Date LAST_MODIFIED_DATE = DateTimeUtil.parseUTCToDate(LAST_MODIFIED_STRING);\n+\n+    @Test\n+    public void overrideTimestampsTest() throws Exception {\n+        Map<String, String> status = new HashMap<>();\n+        status.put(DepositField.containerId.name(), RepositoryPaths.getContentRootPid().getRepositoryPath());\n+        status.put(DepositField.permissionGroups.name(), \"adminGroup\");\n+        status.put(DepositField.overrideTimestamps.name(), \"true\");\n+        depositStatusFactory.save(depositUUID, status);\n+\n+        Model model = job.getWritableModel();\n+        Bag depBag = model.createBag(depositPid.getRepositoryPath());\n+\n+        PID unitPid = pidMinter.mintContentPid();\n+        Bag unitBag = model.createBag(unitPid.getRepositoryPath());\n+        unitBag.addProperty(RDF.type, Cdr.AdminUnit);\n+        unitBag.addLiteral(CdrDeposit.lastModifiedTime, LAST_MODIFIED_STRING);\n+        unitBag.addLiteral(CdrDeposit.createTime, CREATED_STRING);\n+        depBag.add(unitBag);\n+\n+        PID collPid = pidMinter.mintContentPid();\n+        Bag collBag = model.createBag(collPid.getRepositoryPath());\n+        collBag.addProperty(RDF.type, Cdr.Collection);\n+        collBag.addLiteral(CdrDeposit.lastModifiedTime, LAST_MODIFIED_STRING);\n+        collBag.addLiteral(CdrDeposit.createTime, CREATED_STRING);\n+        unitBag.add(collBag);\n+\n+        PID folderPid = pidMinter.mintContentPid();\n+        Bag folderBag = model.createBag(folderPid.getRepositoryPath());\n+        folderBag.addProperty(RDF.type, Cdr.Folder);\n+        folderBag.addLiteral(CdrDeposit.lastModifiedTime, LAST_MODIFIED_STRING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "756772c6d309502e0c2f759cc7031dabe3e909e7"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2379, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}