{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1Njk1Nzcx", "number": 1094, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoxOTo0MlrOEpf0gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoyNjoxMlrOEpgAuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTQ4NDE5OnYy", "diffSide": "LEFT", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/StreamToFSTransferClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoxOTo0MlrOHbMstw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoxOTo0MlrOHbMstw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4MTY1NQ==", "bodyText": "we still want to use move for renaming the temp/old files since it is within the same storage location, its just for source files (which doesn't exist for this client) that we want to switch to copy", "url": "https://github.com/UNC-Libraries/box-c/pull/1094#discussion_r498281655", "createdAt": "2020-10-01T14:19:42Z", "author": {"login": "bbpennel"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/StreamToFSTransferClient.java", "diffHunk": "@@ -98,7 +98,7 @@ protected URI writeStream(PID binPid, InputStream sourceStream, boolean allowOve\n             }\n \n             // Move temp file into final location\n-            Files.move(newFilePath, destPath, REPLACE_EXISTING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d643c485877b96718fddb7a1638332f1fc3e3065"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTUxNTQ0OnYy", "diffSide": "RIGHT", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoyNjoxMlrOHbNArg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoyNjoxMlrOHbNArg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4Njc2Ng==", "bodyText": "We don't want to perform cleanup in here, the code calling the transfer client should now be responsible for cleanup of the source file. For instance, with deposits the cleanup deposit job should handle this (you should verify that it does so after these changes. To test on your vm I suggest setting the cleanup time property for the deposit application to something very low, like 20second). The intention of switching to copy is so that we don't lose the source data in the case that the larger operation fails.\nYou should also check if there are other uses of this transfer method from non-deposit related activities, since they should now be doing their own source file cleanup.", "url": "https://github.com/UNC-Libraries/box-c/pull/1094#discussion_r498286766", "createdAt": "2020-10-01T14:26:12Z", "author": {"login": "bbpennel"}, "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java", "diffHunk": "@@ -112,6 +108,16 @@ public URI transfer(PID binPid, URI sourceFileUri, boolean allowOverwrite) {\n                 // Ignore. New file is already in place\n                 log.warn(\"Unable to delete {}. Reason {}\", oldFilePath, e.getMessage());\n             }\n+\n+            // Remove source file after deposited\n+            if (!source.isReadOnly()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d643c485877b96718fddb7a1638332f1fc3e3065"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 702, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}