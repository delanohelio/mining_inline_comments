{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDc0MzE2", "number": 955, "reviewThreads": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1NToxOVrODwAS-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1NjoyNFrOD0Qh0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjYzMDk5OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/CollectionThumbnailController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1NToxOVrOGCwb1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1NToxOVrOGCwb1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0Mzg5NA==", "bodyText": "What you have with tika is probably more reliable, but wanted to mention that MultipartFile has a getContentType() which would give you the mimetype provided by the user's browser:\nhttps://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/MultipartFile.html\nI don't really have an opinion at the moment about which approach to go with", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r405543894", "createdAt": "2020-04-08T13:55:19Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/CollectionThumbnailController.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.GroupsThreadStore;\n+import edu.unc.lib.dl.cdr.services.processing.ImportThumbnailService;\n+\n+/**\n+ * Controller for handling submission requests for collection display thumbnails\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@Controller\n+public class CollectionThumbnailController {\n+    private static final Logger log = LoggerFactory.getLogger(CollectionThumbnailController.class);\n+\n+    @Autowired\n+    private ImportThumbnailService service;\n+\n+    @PostMapping(value = \"edit/collectionThumbnail/{pid}\")\n+    public @ResponseBody\n+    ResponseEntity<Object> ImportCollectionThumbnail(@PathVariable(\"pid\") String pid,\n+                                                     @RequestParam(\"file\") MultipartFile thumbnailFile)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0879122b3e6c44f726cd09361aa02c5bdb82662"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjYzNDY2OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/CollectionThumbnailController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1NjowOFrOGCweOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1NjowOFrOGCweOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NDUwNw==", "bodyText": "we don't usually add the email to the response do we?", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r405544507", "createdAt": "2020-04-08T13:56:08Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/CollectionThumbnailController.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.GroupsThreadStore;\n+import edu.unc.lib.dl.cdr.services.processing.ImportThumbnailService;\n+\n+/**\n+ * Controller for handling submission requests for collection display thumbnails\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@Controller\n+public class CollectionThumbnailController {\n+    private static final Logger log = LoggerFactory.getLogger(CollectionThumbnailController.class);\n+\n+    @Autowired\n+    private ImportThumbnailService service;\n+\n+    @PostMapping(value = \"edit/collectionThumbnail/{pid}\")\n+    public @ResponseBody\n+    ResponseEntity<Object> ImportCollectionThumbnail(@PathVariable(\"pid\") String pid,\n+                                                     @RequestParam(\"file\") MultipartFile thumbnailFile)\n+            throws Exception {\n+\n+        AgentPrincipals agent = AgentPrincipals.createFromThread();\n+        String userEmail = GroupsThreadStore.getEmail();\n+\n+        Map<String, Object> result = new HashMap<>();\n+        result.put(\"action\", \"edit collection thumbnail\");\n+        result.put(\"username\", agent.getUsername());\n+        result.put(\"user email\", userEmail);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0879122b3e6c44f726cd09361aa02c5bdb82662"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY0MTUxOnYy", "diffSide": "RIGHT", "path": "services/src/main/webapp/WEB-INF/service-context.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1Nzo0M1rOGCwiyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1Nzo0M1rOGCwiyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NTY3Mw==", "bodyText": "You can reuse the run enhancements template if its going to the same destination", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r405545673", "createdAt": "2020-04-08T13:57:43Z", "author": {"login": "bbpennel"}, "path": "services/src/main/webapp/WEB-INF/service-context.xml", "diffHunk": "@@ -311,6 +311,23 @@\n       <property name=\"modsValidator\" ref=\"modsValidator\" />\n       <property name=\"versionedDatastreamService\" ref=\"versionedDatastreamService\" />\n   </bean>\n+\n+    <bean id=\"editCollectionThumbnailMessageSender\" class=\"edu.unc.lib.dl.services.MessageSender\">\n+        <property name=\"jmsTemplate\" ref=\"editCollectionThumbnailJmsTemplate\"/>\n+    </bean>\n+\n+    <bean id=\"editCollectionThumbnailJmsTemplate\" class=\"org.springframework.jms.core.JmsTemplate\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0879122b3e6c44f726cd09361aa02c5bdb82662"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY0NTcwOnYy", "diffSide": "RIGHT", "path": "services/src/main/webapp/WEB-INF/service-context.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1ODozM1rOGCwlRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1ODozM1rOGCwlRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NjMxMQ==", "bodyText": "You can probably reuse the one from run enhancements here since it can use the same template", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r405546311", "createdAt": "2020-04-08T13:58:33Z", "author": {"login": "bbpennel"}, "path": "services/src/main/webapp/WEB-INF/service-context.xml", "diffHunk": "@@ -311,6 +311,23 @@\n       <property name=\"modsValidator\" ref=\"modsValidator\" />\n       <property name=\"versionedDatastreamService\" ref=\"versionedDatastreamService\" />\n   </bean>\n+\n+    <bean id=\"editCollectionThumbnailMessageSender\" class=\"edu.unc.lib.dl.services.MessageSender\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0879122b3e6c44f726cd09361aa02c5bdb82662"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjcxNjMyOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/ImportThumbnailService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxNDowNVrOGCxRUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODozMDo0MVrOGC7wEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NzU4Nw==", "bodyText": "One thing I'm not sure about with this approach, is the importStream getting consumed? When you write the importStream out to file, is it writing anything? Normally inputstreams can only be read once, but some types of input streams can be reset and read multiple times. I don't know if that is happening here or not.\nI guess if you used the user supplied mimetype from the upload request it might not be an issue. But if necessary you can also duplicate the inputstream, similiar to what is happening in the edit description service.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r405557587", "createdAt": "2020-04-08T14:14:05Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/ImportThumbnailService.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static org.apache.commons.io.FileUtils.copyInputStreamToFile;\n+import static org.apache.commons.lang3.StringUtils.containsIgnoreCase;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.apache.tika.Tika;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.services.MessageSender;\n+\n+/**\n+ * Service to process requests to add/update display thumbnail for collection pages\n+ *\n+ * @author lfarrell\n+ */\n+public class ImportThumbnailService extends MessageSender {\n+    private static final Logger log = LoggerFactory.getLogger(ImportThumbnailService.class);\n+\n+    private String dataDir;\n+    private Path storagePath;\n+    private AccessControlService aclService;\n+    private MessageSender messageSender;\n+\n+    public void init() throws IOException {\n+        storagePath = Paths.get(dataDir);\n+\n+        // Create the directory if it doesn't already exist\n+        Files.createDirectories(storagePath);\n+    }\n+\n+    public void run(InputStream importStream, AgentPrincipals agent, String uuid) throws Exception {\n+        PID pid = PIDs.get(uuid);\n+\n+        aclService.assertHasAccess(\"User does not have permission to add/update collection thumbnails\",\n+                pid, agent.getPrincipals(), Permission.createCollection);\n+\n+        try {\n+            Tika tika = new Tika();\n+            String mimeType = tika.detect(importStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0879122b3e6c44f726cd09361aa02c5bdb82662"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyOTI5Nw==", "bodyText": "This seems to have been the issue with the thumbnail generation. Switching to the uploaded mime-type seems to have resolved it.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r405729297", "createdAt": "2020-04-08T18:30:41Z", "author": {"login": "lfarrell"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/ImportThumbnailService.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static org.apache.commons.io.FileUtils.copyInputStreamToFile;\n+import static org.apache.commons.lang3.StringUtils.containsIgnoreCase;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.apache.tika.Tika;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.services.MessageSender;\n+\n+/**\n+ * Service to process requests to add/update display thumbnail for collection pages\n+ *\n+ * @author lfarrell\n+ */\n+public class ImportThumbnailService extends MessageSender {\n+    private static final Logger log = LoggerFactory.getLogger(ImportThumbnailService.class);\n+\n+    private String dataDir;\n+    private Path storagePath;\n+    private AccessControlService aclService;\n+    private MessageSender messageSender;\n+\n+    public void init() throws IOException {\n+        storagePath = Paths.get(dataDir);\n+\n+        // Create the directory if it doesn't already exist\n+        Files.createDirectories(storagePath);\n+    }\n+\n+    public void run(InputStream importStream, AgentPrincipals agent, String uuid) throws Exception {\n+        PID pid = PIDs.get(uuid);\n+\n+        aclService.assertHasAccess(\"User does not have permission to add/update collection thumbnails\",\n+                pid, agent.getPrincipals(), Permission.createCollection);\n+\n+        try {\n+            Tika tika = new Tika();\n+            String mimeType = tika.detect(importStream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NzU4Nw=="}, "originalCommit": {"oid": "c0879122b3e6c44f726cd09361aa02c5bdb82662"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjc3NDAwOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/ImportThumbnailService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyNjo1MlrOGCx1zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyNjo1MlrOGCx1zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2NjkyNQ==", "bodyText": "I'd like to avoid locking this workflow down to collections, since I think we'll want to be able to use it for admin units too, and maybe even folders. EditDescription permission might be reasonable for this.\nMore generally, it'd be good to go with naming like \"EditThumbnail\" rather than including \"collection\" in the names of stuff.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r405566925", "createdAt": "2020-04-08T14:26:52Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/ImportThumbnailService.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static org.apache.commons.io.FileUtils.copyInputStreamToFile;\n+import static org.apache.commons.lang3.StringUtils.containsIgnoreCase;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.apache.tika.Tika;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.services.MessageSender;\n+\n+/**\n+ * Service to process requests to add/update display thumbnail for collection pages\n+ *\n+ * @author lfarrell\n+ */\n+public class ImportThumbnailService extends MessageSender {\n+    private static final Logger log = LoggerFactory.getLogger(ImportThumbnailService.class);\n+\n+    private String dataDir;\n+    private Path storagePath;\n+    private AccessControlService aclService;\n+    private MessageSender messageSender;\n+\n+    public void init() throws IOException {\n+        storagePath = Paths.get(dataDir);\n+\n+        // Create the directory if it doesn't already exist\n+        Files.createDirectories(storagePath);\n+    }\n+\n+    public void run(InputStream importStream, AgentPrincipals agent, String uuid) throws Exception {\n+        PID pid = PIDs.get(uuid);\n+\n+        aclService.assertHasAccess(\"User does not have permission to add/update collection thumbnails\",\n+                pid, agent.getPrincipals(), Permission.createCollection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0879122b3e6c44f726cd09361aa02c5bdb82662"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjc4NTA4OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/ImportThumbnailService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyOToxMlrOGCx8cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyOToxMlrOGCx8cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2ODYyNw==", "bodyText": "Another option is to do storagePath.resolve(thumbnailBasePath).resolve(uuid), might not make much difference but i guess if you'd rather not have to convert to a string", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r405568627", "createdAt": "2020-04-08T14:29:12Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/ImportThumbnailService.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static org.apache.commons.io.FileUtils.copyInputStreamToFile;\n+import static org.apache.commons.lang3.StringUtils.containsIgnoreCase;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.apache.tika.Tika;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.services.MessageSender;\n+\n+/**\n+ * Service to process requests to add/update display thumbnail for collection pages\n+ *\n+ * @author lfarrell\n+ */\n+public class ImportThumbnailService extends MessageSender {\n+    private static final Logger log = LoggerFactory.getLogger(ImportThumbnailService.class);\n+\n+    private String dataDir;\n+    private Path storagePath;\n+    private AccessControlService aclService;\n+    private MessageSender messageSender;\n+\n+    public void init() throws IOException {\n+        storagePath = Paths.get(dataDir);\n+\n+        // Create the directory if it doesn't already exist\n+        Files.createDirectories(storagePath);\n+    }\n+\n+    public void run(InputStream importStream, AgentPrincipals agent, String uuid) throws Exception {\n+        PID pid = PIDs.get(uuid);\n+\n+        aclService.assertHasAccess(\"User does not have permission to add/update collection thumbnails\",\n+                pid, agent.getPrincipals(), Permission.createCollection);\n+\n+        try {\n+            Tika tika = new Tika();\n+            String mimeType = tika.detect(importStream);\n+\n+            if (!containsIgnoreCase(mimeType, \"image\")) {\n+                throw new IllegalArgumentException(\"Uploaded file is not an image\");\n+            }\n+\n+            String thumbnailBasePath = idToPath(uuid, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+            String filePath = Paths.get(storagePath.toString(), thumbnailBasePath, uuid).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0879122b3e6c44f726cd09361aa02c5bdb82662"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjg5MzYzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/ImportThumbnailService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDo1MzowNFrOGCzAmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDo1MzowNFrOGCzAmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU4NjA3NQ==", "bodyText": "If we can get this to just be a regular RunEnhancements call, then you should be able to use the helper method for generating enhancement messages.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r405586075", "createdAt": "2020-04-08T14:53:04Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/ImportThumbnailService.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static org.apache.commons.io.FileUtils.copyInputStreamToFile;\n+import static org.apache.commons.lang3.StringUtils.containsIgnoreCase;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.apache.tika.Tika;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.services.MessageSender;\n+\n+/**\n+ * Service to process requests to add/update display thumbnail for collection pages\n+ *\n+ * @author lfarrell\n+ */\n+public class ImportThumbnailService extends MessageSender {\n+    private static final Logger log = LoggerFactory.getLogger(ImportThumbnailService.class);\n+\n+    private String dataDir;\n+    private Path storagePath;\n+    private AccessControlService aclService;\n+    private MessageSender messageSender;\n+\n+    public void init() throws IOException {\n+        storagePath = Paths.get(dataDir);\n+\n+        // Create the directory if it doesn't already exist\n+        Files.createDirectories(storagePath);\n+    }\n+\n+    public void run(InputStream importStream, AgentPrincipals agent, String uuid) throws Exception {\n+        PID pid = PIDs.get(uuid);\n+\n+        aclService.assertHasAccess(\"User does not have permission to add/update collection thumbnails\",\n+                pid, agent.getPrincipals(), Permission.createCollection);\n+\n+        try {\n+            Tika tika = new Tika();\n+            String mimeType = tika.detect(importStream);\n+\n+            if (!containsIgnoreCase(mimeType, \"image\")) {\n+                throw new IllegalArgumentException(\"Uploaded file is not an image\");\n+            }\n+\n+            String thumbnailBasePath = idToPath(uuid, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+            String filePath = Paths.get(storagePath.toString(), thumbnailBasePath, uuid).toString();\n+            File finalLocation = new File(filePath);\n+            copyInputStreamToFile(importStream, finalLocation);\n+\n+            Document msg = createEnhancementMsg(agent.getUsername(), finalLocation.getAbsolutePath(), mimeType);\n+            messageSender.sendMessage(msg);\n+\n+            log.info(\"Job to to add thumbnail to collection {} has been queued by {}\",\n+                    uuid, agent.getUsername());\n+        } catch (IllegalArgumentException e) {\n+            log.error(\"Uploaded file for collection {} is not an image file\", uuid);\n+            throw e;\n+        }\n+    }\n+\n+    private Document createEnhancementMsg(String userid, String filePath, String mimeType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0879122b3e6c44f726cd09361aa02c5bdb82662"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDc4NjMxOnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo1NDo1M1rOGFYBeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo1NDo1M1rOGFYBeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4OTY1Nw==", "bodyText": "I think this will throw an error if the object pid isn't a collection. You would want to use getRepositoryObject and then check the type of the result. Also, if these methods don't find an object, they throw an exception rather than returning null.\nHowever, I don't think i'd recommend the line in.setHeader(FCREPO_RESOURCE_TYPE, Binary.getURI()); below since it's effectively declaring that a collection/folder/work/whatever is a binary for the sake of getting through the router.\nMy suggestion would be to populate FCREPO_RESOURCE_TYPE with the comma separated join of repoObj.getTypes(). Then add a new route here:\nhttps://github.com/UNC-Libraries/Carolina-Digital-Repository/blob/65d5e3c120736859fb9c397d6b9ad4151213232d/services-camel/src/main/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouter.java#L71\nfor processing non-binaries. In that route, there can be a new processor that does most of what you have in this if statement. This way, we don't need to give an inaccurate resource type, and it clearly separates the behavior for binaries vs others where they diverge. We also shouldn't need the CdrEditThumbnail header in this case. I think all the changes to BinaryEnhancementProcessor could be backed out except for the new stuff to set the resource types header.\nThe non-binary route would be similar to the binary one. After it goes through the new processor (Maybe NonBinaryEnhancementProcessor), if enhancements are needed it should have CdrBinaryPath set, then you can set CdrEnhancementSet and call \"direct:process.enhancements\", \"direct-vm:solrIndexing\". Otherwise, you'd just want to call solrIndexing.\nA few other things:\n\nthe run enhancement message pid file should have a value you can just pass into PIDs.get without any extra splitting.\nthumbnailBasePath should actually be the path for where the source image is, not where thumbnails would be. This should be updated in the ImportThumbnailService as well, and we should double check that it is using the correct directory.\nOnly set CdrBinaryPath for non-binaries if a file exists at the generated source image path. That way the router can decide whether to perform binary specific enhancements on if there is a binary.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r408289657", "createdAt": "2020-04-14T16:54:53Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessor.java", "diffHunk": "@@ -52,23 +60,35 @@ public void process(final Exchange exchange) throws Exception {\n             Element body = msgBody.getRootElement();\n \n             String pidValue = body.getChild(\"pid\", ATOM_NS).getTextTrim();\n-            Element isEditThumbnail = body.getChild(\"editThumbnail\", ATOM_NS);\n \n-            if (isEditThumbnail != null) {\n-                String mimeType = body.getChild(\"mimeType\", ATOM_NS).getTextTrim();\n+            String[] collThumbPath = pidValue.split(\"/\");\n+            String uuid = collThumbPath[collThumbPath.length - 1];\n+            PID objPid = PIDs.get(uuid);\n+\n+            if (repoObjLoader.getCollectionObject(objPid) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d5e3c120736859fb9c397d6b9ad4151213232d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzEzMjc3OnYy", "diffSide": "RIGHT", "path": "access/src/main/webapp/WEB-INF/jsp/fullRecord/adminUnit.jsp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDozNDowMFrOGGoX2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDozNDowMFrOGGoX2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwNjEwNw==", "bodyText": "Looking at the implementation of thumbnail.jsp, it seems that target determines what the thumbnail links to. Specifying \"file\" apparently generates a link to the original file, which doesn't really make sense with anything other than FileObject and maybe WorkObject (can't remember if it'll work for that one). I think you can just remove this parameter, then it will link to the record page (although really it probably doesn't need to link anywhere).\nI think you'll want to do this with the other object types too.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r409606107", "createdAt": "2020-04-16T14:34:00Z", "author": {"login": "bbpennel"}, "path": "access/src/main/webapp/WEB-INF/jsp/fullRecord/adminUnit.jsp", "diffHunk": "@@ -46,16 +46,12 @@\n         <div class=\"column is-12\">\n             <c:import url=\"fullRecord/navigationBar.jsp\" />\n             <h2 class=\"${isDeleted}\">\n-                <i class=\"fa fa-university\" aria-hidden=\"true\">\n-                    <c:if test=\"${not empty badgeIcon}\">\n-                        <div class=\"thumbnail-badge thumbnail-badge-${badgeIcon}\">\n-                            <div class=\"fa-stack\">\n-                                <i class=\"fas fa-circle fa-stack-2x background\"></i>\n-                                <i class=\"fas fa-${badgeIcon} fa-stack-1x foreground\"></i>\n-                            </div>\n-                        </div>\n-                    </c:if>\n-                </i> <c:out value=\"${briefObject.title}\" />\n+                <c:set var=\"thumbnailObject\" value=\"${briefObject}\" scope=\"request\" />\n+                <c:import url=\"common/thumbnail.jsp\">\n+                    <c:param name=\"target\" value=\"file\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzE0OTUyOnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDozNzozN1rOGGoibg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDozNzozN1rOGGoibg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwODgxNA==", "bodyText": "It'd probably actually be okay to call getTypes() for all objects. I think for binaries it'd still work, and we want to be able to process AdminUnits and likely folders too.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r409608814", "createdAt": "2020-04-16T14:37:37Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessor.java", "diffHunk": "@@ -48,10 +56,30 @@ public void process(final Exchange exchange) throws Exception {\n             Element body = msgBody.getRootElement();\n \n             String pidValue = body.getChild(\"pid\", ATOM_NS).getTextTrim();\n+            PID objPid = PIDs.get(pidValue);\n+\n+            try {\n+                RepositoryObject repoObj = repoObjLoader.getRepositoryObject(objPid);\n+\n+                log.info(\"Adding enhancement headers for \" + pidValue);\n+                in.setHeader(FCREPO_URI, pidValue);\n \n-            log.info(\"Adding enhancement headers for \" + pidValue);\n-            in.setHeader(FCREPO_URI, pidValue);\n-            in.setHeader(FCREPO_RESOURCE_TYPE, Binary.getURI());\n+                if (repoObj instanceof CollectionObject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzE1NDM1OnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDozODo0MVrOGGolnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDozODo0MVrOGGolnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwOTYzMQ==", "bodyText": "I believe the resource type header expects a comma separated list of values. I'll admin i don't know how camel handles getting a header with a List as the value though. Does this work?", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r409609631", "createdAt": "2020-04-16T14:38:41Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessor.java", "diffHunk": "@@ -48,10 +56,30 @@ public void process(final Exchange exchange) throws Exception {\n             Element body = msgBody.getRootElement();\n \n             String pidValue = body.getChild(\"pid\", ATOM_NS).getTextTrim();\n+            PID objPid = PIDs.get(pidValue);\n+\n+            try {\n+                RepositoryObject repoObj = repoObjLoader.getRepositoryObject(objPid);\n+\n+                log.info(\"Adding enhancement headers for \" + pidValue);\n+                in.setHeader(FCREPO_URI, pidValue);\n \n-            log.info(\"Adding enhancement headers for \" + pidValue);\n-            in.setHeader(FCREPO_URI, pidValue);\n-            in.setHeader(FCREPO_RESOURCE_TYPE, Binary.getURI());\n+                if (repoObj instanceof CollectionObject) {\n+                    in.setHeader(FCREPO_RESOURCE_TYPE, repoObj.getTypes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzE2ODQyOnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/NonBinaryEnhancementProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo0MTozOVrOGGourg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo0NTo0NlrOGGo7zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxMTk1MA==", "bodyText": "Spaces after commas", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r409611950", "createdAt": "2020-04-16T14:41:39Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/NonBinaryEnhancementProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPath;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrEditThumbnail;\n+import static org.fcrepo.camel.FcrepoHeaders.FCREPO_URI;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+\n+/**\n+ * Processor to add headers to create display thumbnails for non-file objects\n+ *\n+ * @author lfarrell\n+ */\n+public class NonBinaryEnhancementProcessor implements Processor {\n+    private static final Logger log = LoggerFactory.getLogger(NonBinaryEnhancementProcessor.class);\n+\n+    private String dataDir;\n+\n+    @Override\n+    public void process(final Exchange exchange) throws Exception {\n+        final Message in = exchange.getIn();\n+\n+        String uri = (String) in.getHeader(FCREPO_URI);\n+        String uuid = PIDs.get(uri).getUUID();\n+        String objBasePath = idToPath(uuid, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+\n+        File imgFile = new File(Paths.get(dataDir,objBasePath, uuid).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNTMxMQ==", "bodyText": "Also, you could save some steps and just keep imgFile as a Path. To check if the path is a file, there is Files.isRegularFile(path)", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r409615311", "createdAt": "2020-04-16T14:45:46Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/NonBinaryEnhancementProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPath;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrEditThumbnail;\n+import static org.fcrepo.camel.FcrepoHeaders.FCREPO_URI;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+\n+/**\n+ * Processor to add headers to create display thumbnails for non-file objects\n+ *\n+ * @author lfarrell\n+ */\n+public class NonBinaryEnhancementProcessor implements Processor {\n+    private static final Logger log = LoggerFactory.getLogger(NonBinaryEnhancementProcessor.class);\n+\n+    private String dataDir;\n+\n+    @Override\n+    public void process(final Exchange exchange) throws Exception {\n+        final Message in = exchange.getIn();\n+\n+        String uri = (String) in.getHeader(FCREPO_URI);\n+        String uuid = PIDs.get(uri).getUUID();\n+        String objBasePath = idToPath(uuid, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+\n+        File imgFile = new File(Paths.get(dataDir,objBasePath, uuid).toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxMTk1MA=="}, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzI0NzM5OnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo1NzoyM1rOGGpg2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo1NzoyM1rOGGpg2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNDc5NA==", "bodyText": "You shouldn't need to double check the resource types here.\nI would really recommend not calling process.binary for non-binaries. It calls a couple extra things, and BinaryMetadataProcessor doesn't do anything for non-binary objects, so there's no need to call it.\nIf you split out a nonbinary route, you could call it immediately after nbProcessor and it could look like:\n        from(\"direct:process.nonbinary\")\n            .routeId(\"ProcessNonBinary\")\n            .choice()\n                .when(simple(\"<check that a binary path is set>\"))\n                    .setHeader(CdrEnhancementSet, constant(THUMBNAIL_ENHANCEMENTS))\n                    .log(INFO, \"Processing queued enhancements ${headers[CdrEnhancementSet]} for ${headers[CamelFcrepoUri]}\")\n                    .threads(enhancementThreads, enhancementThreads, \"CdrEnhancementThread\")\n                    .multicast()\n                    .to(\"direct:process.enhancements\", \"direct-vm:solrIndexing\");\n                .otherwise()\n                    .to(\"direct-vm:solrIndexing\")\n            .end();\n\nThen process.binary could have all the CdrEditThumbnail stuff trimmed out. I think you could actually remove the header entirely at that point", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r409624794", "createdAt": "2020-04-16T14:57:23Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouter.java", "diffHunk": "@@ -69,23 +72,42 @@ public void configure() throws Exception {\n                         + \" || ${headers[org.fcrepo.jms.resourceType]} contains '\" + Cdr.ContentRoot.getURI() + \"'\"\n                         ))\n                     .log(DEBUG, \"Processing enhancements for non-binary ${headers[CamelFcrepoUri]}\")\n-                    .to(\"direct-vm:solrIndexing\")\n+                    .process(nbProcessor)\n+                    .choice()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzM5MTc4OnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/solr/SolrIngestProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNToyODoyOVrOGGq8cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNToyODoyOVrOGGq8cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY0ODI0MQ==", "bodyText": "seems like we probably don't need to check the CdrEditThumbnail header, the resource type restriction should be enough to prevent bad indexing?", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r409648241", "createdAt": "2020-04-16T15:28:29Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/solr/SolrIngestProcessor.java", "diffHunk": "@@ -69,13 +70,15 @@ public SolrIngestProcessor(DocumentIndexingPackageFactory factory,\n     public void process(Exchange exchange) throws Exception {\n         final Message in = exchange.getIn();\n         String fcrepoUri = (String) in.getHeader(FCREPO_URI);\n+        String editThumbnail = (String) in.getHeader(CdrEditThumbnail);\n \n         List<PID> targetPids = new ArrayList<>();\n         PID targetPid = PIDs.get(fcrepoUri);\n         String resourceTypes = (String) in.getHeader(FCREPO_RESOURCE_TYPE);\n \n         // for binaries, need to index the file and work objects which contain it\n-        if (resourceTypes != null && resourceTypes.contains(Fcrepo4Repository.Binary.getURI())) {\n+        if (!Boolean.parseBoolean(editThumbnail) && resourceTypes != null &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzM5MzI3OnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/util/CdrFcrepoHeaders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNToyODo0MlrOGGq9Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNToyODo0MlrOGGq9Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY0ODQ1NQ==", "bodyText": "Hopefully can remove this", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r409648455", "createdAt": "2020-04-16T15:28:42Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/util/CdrFcrepoHeaders.java", "diffHunk": "@@ -37,5 +37,7 @@\n \n     public static final String CdrEnhancementSet = \"CdrEnhancementSet\";\n \n+    public static final String CdrEditThumbnail = \"CdrEditThumbnail\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzQyMjQxOnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/webapp/WEB-INF/service-context.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNTozNTowM1rOGGrPhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNTozNTowM1rOGGrPhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1MzEyNg==", "bodyText": "would you be willing to rename this property? sourceImages.dir would be fine, looking at some of the other properties we have. Keeps the source image language more consistent. Might not be a bad idea to rename the variable as well", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r409653126", "createdAt": "2020-04-16T15:35:03Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/webapp/WEB-INF/service-context.xml", "diffHunk": "@@ -186,6 +186,11 @@\n     </bean>\n \n     <bean id=\"binaryEnhancementProcessor\" class=\"edu.unc.lib.dl.services.camel.BinaryEnhancementProcessor\">\n+        <property name=\"repositoryObjectLoader\" ref=\"repositoryObjectLoader\" />\n+    </bean>\n+\n+    <bean id=\"nonBinaryEnhancementProcessor\" class=\"edu.unc.lib.dl.services.camel.NonBinaryEnhancementProcessor\">\n+        <property name=\"dataDir\" value=\"${data.editThumb.dir}\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzg1MDQ3OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/EditThumbnailController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoyMToxMFrOGGvgig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoyMToxMFrOGGvgig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyMzAxOA==", "bodyText": "What kind of operation would throw IllegalArgumentException? I'd usually expect a 4xx for bad input.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r409723018", "createdAt": "2020-04-16T17:21:10Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/EditThumbnailController.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.cdr.services.processing.ImportThumbnailService;\n+\n+/**\n+ * Controller for handling submission requests for collection display thumbnails\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@Controller\n+public class EditThumbnailController {\n+    private static final Logger log = LoggerFactory.getLogger(EditThumbnailController.class);\n+\n+    @Autowired\n+    private ImportThumbnailService service;\n+\n+    @PostMapping(value = \"edit/displayThumbnail/{pid}\")\n+    public @ResponseBody\n+    ResponseEntity<Object> ImportThumbnail(@PathVariable(\"pid\") String pid,\n+                                                     @RequestParam(\"file\") MultipartFile thumbnailFile)\n+            throws Exception {\n+\n+        AgentPrincipals agent = AgentPrincipals.createFromThread();\n+        String mimeType = thumbnailFile.getContentType();\n+\n+        Map<String, Object> result = new HashMap<>();\n+        result.put(\"action\", \"editThumbnail\");\n+        result.put(\"username\", agent.getUsername());\n+\n+        try (InputStream importStream = thumbnailFile.getInputStream()) {\n+            service.run(importStream, agent, pid, mimeType);\n+        } catch (IOException e) {\n+            log.error(\"Failed to get submitted file\", e);\n+            result.put(\"error\", e.getMessage());\n+            return new ResponseEntity<>(result, HttpStatus.INTERNAL_SERVER_ERROR);\n+        } catch (IllegalArgumentException e) {\n+            log.error(\"Error queueing the job\", e);\n+            result.put(\"error\", e.getMessage());\n+            return new ResponseEntity<>(result, HttpStatus.INTERNAL_SERVER_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzg1MjcyOnYy", "diffSide": "RIGHT", "path": "services/src/main/webapp/WEB-INF/service-context.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoyMTo0OFrOGGviAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoyMTo0OFrOGGviAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyMzM5NQ==", "bodyText": "would need to update this property name too", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r409723395", "createdAt": "2020-04-16T17:21:48Z", "author": {"login": "bbpennel"}, "path": "services/src/main/webapp/WEB-INF/service-context.xml", "diffHunk": "@@ -311,6 +311,13 @@\n       <property name=\"modsValidator\" ref=\"modsValidator\" />\n       <property name=\"versionedDatastreamService\" ref=\"versionedDatastreamService\" />\n   </bean>\n+\n+    <bean id=\"editThumbnailService\" class=\"edu.unc.lib.dl.cdr.services.processing.ImportThumbnailService\"\n+          init-method=\"init\">\n+        <property name=\"aclService\" ref=\"aclService\" />\n+        <property name=\"messageSender\" ref=\"runEnhancementMessageSender\" />\n+        <property name=\"dataDir\" value=\"${data.editThumb.dir}\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzg2Njc5OnYy", "diffSide": "RIGHT", "path": "services/src/test/resources/add-thumb-it-servlet.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoyNToyOVrOGGvq6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoyNToyOVrOGGvq6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyNTY3NQ==", "bodyText": "use the target directory for temp space, its used for throw away and build stuff that shouldn't get checked into git.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r409725675", "createdAt": "2020-04-16T17:25:29Z", "author": {"login": "bbpennel"}, "path": "services/src/test/resources/add-thumb-it-servlet.xml", "diffHunk": "@@ -0,0 +1,52 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright 2008 The University of North Carolina at Chapel Hill\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+            http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xsi:schemaLocation=\"\n+        http://www.springframework.org/schema/beans\n+        http://www.springframework.org/schema/beans/spring-beans.xsd\n+        http://www.springframework.org/schema/context\n+        http://www.springframework.org/schema/context/spring-context-3.0.xsd\n+        http://www.springframework.org/schema/mvc\n+        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd\">\n+\n+    <mvc:annotation-driven/>\n+\n+    <context:component-scan resource-pattern=\"**/EditThumbnailController*\" base-package=\"edu.unc.lib.dl.cdr.services.rest\"/>\n+\n+    <bean id=\"messageSender\" class=\"org.mockito.Mockito\" factory-method=\"mock\">\n+        <constructor-arg value=\"edu.unc.lib.dl.services.MessageSender\"/>\n+    </bean>\n+\n+    <bean id=\"importThumbnailService\" class=\"edu.unc.lib.dl.cdr.services.processing.ImportThumbnailService\">\n+        <property name=\"aclService\" ref=\"aclServices\" />\n+        <property name=\"messageSender\" ref=\"messageSender\" />\n+        <property name=\"dataDir\" value=\"dataDir\" />\n+    </bean>\n+\n+    <bean id=\"aclServices\" class=\"org.mockito.Mockito\" factory-method=\"mock\">\n+        <constructor-arg value=\"edu.unc.lib.dl.acl.fcrepo4.AccessControlServiceImpl\"/>\n+    </bean>\n+\n+    <bean id=\"dataDir\" class=\"java.lang.String\">\n+        <constructor-arg value=\"src/test/resources/temp\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzg4ODk1OnYy", "diffSide": "RIGHT", "path": "solr-ingest/src/main/java/edu/unc/lib/dl/data/ingest/solr/filter/SetDatastreamFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozMDo1M1rOGGv41Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo1NjozN1rOGHc1qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyOTIzNw==", "bodyText": "indexing derivatives is sufficiently generic that i think you can remove the collection object restriction", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r409729237", "createdAt": "2020-04-16T17:30:53Z", "author": {"login": "bbpennel"}, "path": "solr-ingest/src/main/java/edu/unc/lib/dl/data/ingest/solr/filter/SetDatastreamFilter.java", "diffHunk": "@@ -60,22 +62,27 @@ public void filter(DocumentIndexingPackage dip) throws IndexingException {\n         ContentObject contentObj = dip.getContentObject();\n \n         FileObject fileObj = getFileObject(contentObj);\n-        if (fileObj == null) {\n-            return;\n+        if (fileObj != null) {\n+            boolean ownedByOtherObject = contentObj instanceof WorkObject;\n+            // Retrieve list of datastreams associated with this object\n+            List<Datastream> datastreams = getDatastreams(fileObj, ownedByOtherObject);\n+            // Retrieve list of derivatives associated with the object\n+            List<Datastream> derivatives = getDerivatives(fileObj.getPid(), ownedByOtherObject);\n+            datastreams.addAll(derivatives);\n+\n+            IndexDocumentBean doc = dip.getDocument();\n+\n+            doc.setDatastream(getDatastreamStrings(datastreams));\n+            doc.setFilesizeTotal(getFilesizeTotal(datastreams));\n+            doc.setFilesizeSort(getFilesize(datastreams));\n+        } else if (contentObj instanceof CollectionObject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2NTcwNw==", "bodyText": "I see that you have a commit about tests failing when you remove this. I think that means the tests need to be updated, since we now want to allow derivatives to be index for other types of objects", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r410465707", "createdAt": "2020-04-17T20:56:37Z", "author": {"login": "bbpennel"}, "path": "solr-ingest/src/main/java/edu/unc/lib/dl/data/ingest/solr/filter/SetDatastreamFilter.java", "diffHunk": "@@ -60,22 +62,27 @@ public void filter(DocumentIndexingPackage dip) throws IndexingException {\n         ContentObject contentObj = dip.getContentObject();\n \n         FileObject fileObj = getFileObject(contentObj);\n-        if (fileObj == null) {\n-            return;\n+        if (fileObj != null) {\n+            boolean ownedByOtherObject = contentObj instanceof WorkObject;\n+            // Retrieve list of datastreams associated with this object\n+            List<Datastream> datastreams = getDatastreams(fileObj, ownedByOtherObject);\n+            // Retrieve list of derivatives associated with the object\n+            List<Datastream> derivatives = getDerivatives(fileObj.getPid(), ownedByOtherObject);\n+            datastreams.addAll(derivatives);\n+\n+            IndexDocumentBean doc = dip.getDocument();\n+\n+            doc.setDatastream(getDatastreamStrings(datastreams));\n+            doc.setFilesizeTotal(getFilesizeTotal(datastreams));\n+            doc.setFilesizeSort(getFilesize(datastreams));\n+        } else if (contentObj instanceof CollectionObject) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyOTIzNw=="}, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzg5NDg4OnYy", "diffSide": "RIGHT", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozMjozM1rOGGv8zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozMjozM1rOGGv8zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMDI1NQ==", "bodyText": "Cant this be revived as a non-binary with source image test?", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r409730255", "createdAt": "2020-04-16T17:32:33Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "diffHunk": "@@ -194,6 +212,26 @@ public void testImageFile() throws Exception {\n         verify(solrIngestProcessor).process(any(Exchange.class));\n     }\n \n+   /* @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzkxMzk0OnYy", "diffSide": "RIGHT", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozNzo0M1rOGGwI5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDo0Nzo0N1rOGHRFKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMzM1MQ==", "bodyText": "I think this test is out of date? It should probably just be \"testNonBinary\". I'm not sure the setMessageBody(\"image/*\"); bit is doing anything either?", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r409733351", "createdAt": "2020-04-16T17:37:43Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessorTest.java", "diffHunk": "@@ -101,11 +116,23 @@ public void testExistingUriHeader() throws Exception {\n         verify(message, never()).setHeader(FCREPO_RESOURCE_TYPE, Binary.getURI());\n     }\n \n+    @Test\n+    public void testEditThumbnail() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3MzA2Nw==", "bodyText": "Looks like it needs the message body, otherwise the processor will give a NPE", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r410273067", "createdAt": "2020-04-17T14:47:47Z", "author": {"login": "lfarrell"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessorTest.java", "diffHunk": "@@ -101,11 +116,23 @@ public void testExistingUriHeader() throws Exception {\n         verify(message, never()).setHeader(FCREPO_RESOURCE_TYPE, Binary.getURI());\n     }\n \n+    @Test\n+    public void testEditThumbnail() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMzM1MQ=="}, "originalCommit": {"oid": "3b5f4dcd506886893fe51b679bc45b371b89266c"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODI5NTMwOnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo0NToyMFrOGHa8Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo0NToyMFrOGHa8Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzNDU4Ng==", "bodyText": "Does an unset header default to ''? I think we need to add a test for this router for non-binaries that don't have a source image.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r410434586", "createdAt": "2020-04-17T19:45:20Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouter.java", "diffHunk": "@@ -68,24 +70,37 @@ public void configure() throws Exception {\n                         + \" || ${headers[org.fcrepo.jms.resourceType]} contains '\" + Cdr.AdminUnit.getURI() + \"'\"\n                         + \" || ${headers[org.fcrepo.jms.resourceType]} contains '\" + Cdr.ContentRoot.getURI() + \"'\"\n                         ))\n-                    .log(DEBUG, \"Processing enhancements for non-binary ${headers[CamelFcrepoUri]}\")\n-                    .to(\"direct-vm:solrIndexing\")\n+                .log(DEBUG, \"Processing enhancements for non-binary ${headers[CamelFcrepoUri]}\")\n+                .process(nbProcessor)\n+                .choice()\n+                    .when(simple(\"${headers[\" + CdrBinaryPath + \"]} == ''\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19693ce6c4725456f68eaeab5f5f00e97c32d93c"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODMwMTQwOnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo0NzoyNFrOGHa_7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo0NzoyNFrOGHa_7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzNTU2NQ==", "bodyText": "Could you either indent lines 73 through 85 to indicate they are part of their when clause, or move those same lines to a separate route? (process.nonbinary or some such)", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r410435565", "createdAt": "2020-04-17T19:47:24Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouter.java", "diffHunk": "@@ -68,24 +70,37 @@ public void configure() throws Exception {\n                         + \" || ${headers[org.fcrepo.jms.resourceType]} contains '\" + Cdr.AdminUnit.getURI() + \"'\"\n                         + \" || ${headers[org.fcrepo.jms.resourceType]} contains '\" + Cdr.ContentRoot.getURI() + \"'\"\n                         ))\n-                    .log(DEBUG, \"Processing enhancements for non-binary ${headers[CamelFcrepoUri]}\")\n-                    .to(\"direct-vm:solrIndexing\")\n+                .log(DEBUG, \"Processing enhancements for non-binary ${headers[CamelFcrepoUri]}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19693ce6c4725456f68eaeab5f5f00e97c32d93c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODMyMjk2OnYy", "diffSide": "RIGHT", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/NonBinaryEnhancementProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1NDo1NVrOGHbN7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1NDo1NVrOGHbN7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzOTE0OA==", "bodyText": "shortcut for writing to a file FileUtils.writeStringToFile(imgFile, \"image file\", StandardCharsets.UTF_8).\nYou also dont' need to delete files that are created inside of a TemporaryFolder, so that can be removed from these tests.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r410439148", "createdAt": "2020-04-17T19:54:55Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/NonBinaryEnhancementProcessorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel;\n+\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPath;\n+import static org.fcrepo.camel.FcrepoHeaders.FCREPO_URI;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import edu.unc.lib.dl.test.TestHelper;\n+\n+/**\n+ * @author lfarrell\n+ */\n+public class NonBinaryEnhancementProcessorTest {\n+    private NonBinaryEnhancementProcessor processor;\n+\n+    @Rule\n+    public final TemporaryFolder tmpDir = new TemporaryFolder();\n+\n+    private static final String FEDORA_BASE = \"http://example.com/rest/\";\n+\n+    private static final String RESC_ID = \"de75d811-9e0f-4b1f-8631-2060ab3580cc\";\n+    private static final String RESC_URI = FEDORA_BASE + \"content/de/75/d8/11/\" + RESC_ID;\n+\n+    @Mock\n+    private Exchange exchange;\n+    @Mock\n+    private Message message;\n+    private File imgFile;\n+    private String dataDir;\n+\n+    @Before\n+    public void init() throws Exception {\n+        initMocks(this);\n+        dataDir = tmpDir.newFolder().getAbsolutePath();\n+\n+        TestHelper.setContentBase(FEDORA_BASE);\n+        processor = new NonBinaryEnhancementProcessor();\n+        processor.setSourceImagesDir(dataDir);\n+\n+        when(exchange.getIn()).thenReturn(message);\n+        when(message.getHeader(FCREPO_URI)).thenReturn(RESC_URI);\n+    }\n+\n+    @Test\n+    public void testCollectionWithImage() throws Exception {\n+        String derivativeFinalPath = \"de/75/d8/11/\" + RESC_ID;\n+        Path uploadedFilePath = Paths.get(dataDir, derivativeFinalPath);\n+        Files.createDirectories(uploadedFilePath.getParent());\n+\n+        imgFile = new File(uploadedFilePath.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19693ce6c4725456f68eaeab5f5f00e97c32d93c"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODMyNjkzOnYy", "diffSide": "RIGHT", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1NjoyNlrOGHbQbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1NjoyNlrOGHbQbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzOTc4OQ==", "bodyText": "Should this test be removed since there is nonBinaryWithSourceImages already?\nAlso, I mentioned it elsewhere, but we should have a test for a nonbinary without a source image.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r410439789", "createdAt": "2020-04-17T19:56:26Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "diffHunk": "@@ -194,6 +210,26 @@ public void testImageFile() throws Exception {\n         verify(solrIngestProcessor).process(any(Exchange.class));\n     }\n \n+   /* @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19693ce6c4725456f68eaeab5f5f00e97c32d93c"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODQzOTIwOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/ImportThumbnailService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozODoyMVrOGHcXpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozODoyMVrOGHcXpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1ODAyMQ==", "bodyText": "Call .toFile() instead of toString()", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r410458021", "createdAt": "2020-04-17T20:38:21Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/ImportThumbnailService.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static edu.unc.lib.dl.services.RunEnhancementsMessageHelpers.makeEnhancementOperationBody;\n+import static org.apache.commons.io.FileUtils.copyInputStreamToFile;\n+import static org.apache.commons.lang3.StringUtils.containsIgnoreCase;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.jdom2.Document;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.services.MessageSender;\n+\n+/**\n+ * Service to process requests to add/update display thumbnail for collection pages\n+ *\n+ * @author lfarrell\n+ */\n+public class ImportThumbnailService extends MessageSender {\n+    private static final Logger log = LoggerFactory.getLogger(ImportThumbnailService.class);\n+\n+    private String sourceImagesDir;\n+    private Path storagePath;\n+    private AccessControlService aclService;\n+    private MessageSender messageSender;\n+\n+    public void init() throws IOException {\n+        storagePath = Paths.get(sourceImagesDir);\n+\n+        // Create the directory if it doesn't already exist\n+        Files.createDirectories(storagePath);\n+    }\n+\n+    public void run(InputStream importStream, AgentPrincipals agent, String uuid, String mimeType) throws Exception {\n+        PID pid = PIDs.get(uuid);\n+\n+        aclService.assertHasAccess(\"User does not have permission to add/update collection thumbnails\",\n+                pid, agent.getPrincipals(), Permission.editDescription);\n+\n+        try {\n+            if (!containsIgnoreCase(mimeType, \"image\")) {\n+                throw new IllegalArgumentException(\"Uploaded file is not an image\");\n+            }\n+\n+            String thumbnailBasePath = idToPath(uuid, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+            String filePath = storagePath.resolve(thumbnailBasePath).resolve(uuid).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19693ce6c4725456f68eaeab5f5f00e97c32d93c"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODQ0NTMyOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/ImportThumbnailService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo0MDo0MlrOGHcblA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo0MDo0MlrOGHcblA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1OTAyOA==", "bodyText": "Since its not restricted to collections anymore, change to \"add thumbnail to object\". Probably do the same for the access control message too, and I guess the javadoc for the class as well.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r410459028", "createdAt": "2020-04-17T20:40:42Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/ImportThumbnailService.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static edu.unc.lib.dl.services.RunEnhancementsMessageHelpers.makeEnhancementOperationBody;\n+import static org.apache.commons.io.FileUtils.copyInputStreamToFile;\n+import static org.apache.commons.lang3.StringUtils.containsIgnoreCase;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.jdom2.Document;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.services.MessageSender;\n+\n+/**\n+ * Service to process requests to add/update display thumbnail for collection pages\n+ *\n+ * @author lfarrell\n+ */\n+public class ImportThumbnailService extends MessageSender {\n+    private static final Logger log = LoggerFactory.getLogger(ImportThumbnailService.class);\n+\n+    private String sourceImagesDir;\n+    private Path storagePath;\n+    private AccessControlService aclService;\n+    private MessageSender messageSender;\n+\n+    public void init() throws IOException {\n+        storagePath = Paths.get(sourceImagesDir);\n+\n+        // Create the directory if it doesn't already exist\n+        Files.createDirectories(storagePath);\n+    }\n+\n+    public void run(InputStream importStream, AgentPrincipals agent, String uuid, String mimeType) throws Exception {\n+        PID pid = PIDs.get(uuid);\n+\n+        aclService.assertHasAccess(\"User does not have permission to add/update collection thumbnails\",\n+                pid, agent.getPrincipals(), Permission.editDescription);\n+\n+        try {\n+            if (!containsIgnoreCase(mimeType, \"image\")) {\n+                throw new IllegalArgumentException(\"Uploaded file is not an image\");\n+            }\n+\n+            String thumbnailBasePath = idToPath(uuid, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+            String filePath = storagePath.resolve(thumbnailBasePath).resolve(uuid).toString();\n+            File finalLocation = new File(filePath);\n+            copyInputStreamToFile(importStream, finalLocation);\n+\n+            Document msg = makeEnhancementOperationBody(agent.getUsername(), pid, false);\n+            messageSender.sendMessage(msg);\n+\n+            log.info(\"Job to to add thumbnail to collection {} has been queued by {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19693ce6c4725456f68eaeab5f5f00e97c32d93c"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODQ1MTQwOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/ImportThumbnailService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo0MzoxNFrOGHcftQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo0MzoxNFrOGHcftQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2MDA4NQ==", "bodyText": "Realizing this is catching an exception that you're explicitly throwing above, and then rethrowing. You can probably remove this try block", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r410460085", "createdAt": "2020-04-17T20:43:14Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/ImportThumbnailService.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.processing;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static edu.unc.lib.dl.services.RunEnhancementsMessageHelpers.makeEnhancementOperationBody;\n+import static org.apache.commons.io.FileUtils.copyInputStreamToFile;\n+import static org.apache.commons.lang3.StringUtils.containsIgnoreCase;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.jdom2.Document;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.acl.util.Permission;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.services.MessageSender;\n+\n+/**\n+ * Service to process requests to add/update display thumbnail for collection pages\n+ *\n+ * @author lfarrell\n+ */\n+public class ImportThumbnailService extends MessageSender {\n+    private static final Logger log = LoggerFactory.getLogger(ImportThumbnailService.class);\n+\n+    private String sourceImagesDir;\n+    private Path storagePath;\n+    private AccessControlService aclService;\n+    private MessageSender messageSender;\n+\n+    public void init() throws IOException {\n+        storagePath = Paths.get(sourceImagesDir);\n+\n+        // Create the directory if it doesn't already exist\n+        Files.createDirectories(storagePath);\n+    }\n+\n+    public void run(InputStream importStream, AgentPrincipals agent, String uuid, String mimeType) throws Exception {\n+        PID pid = PIDs.get(uuid);\n+\n+        aclService.assertHasAccess(\"User does not have permission to add/update collection thumbnails\",\n+                pid, agent.getPrincipals(), Permission.editDescription);\n+\n+        try {\n+            if (!containsIgnoreCase(mimeType, \"image\")) {\n+                throw new IllegalArgumentException(\"Uploaded file is not an image\");\n+            }\n+\n+            String thumbnailBasePath = idToPath(uuid, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+            String filePath = storagePath.resolve(thumbnailBasePath).resolve(uuid).toString();\n+            File finalLocation = new File(filePath);\n+            copyInputStreamToFile(importStream, finalLocation);\n+\n+            Document msg = makeEnhancementOperationBody(agent.getUsername(), pid, false);\n+            messageSender.sendMessage(msg);\n+\n+            log.info(\"Job to to add thumbnail to collection {} has been queued by {}\",\n+                    uuid, agent.getUsername());\n+        } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19693ce6c4725456f68eaeab5f5f00e97c32d93c"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODQ1OTkyOnYy", "diffSide": "RIGHT", "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/EditThumbIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo0NjozMFrOGHclSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo0NjozMFrOGHclSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2MTUxMw==", "bodyText": "remove extra semi-colon", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r410461513", "createdAt": "2020-04-17T20:46:30Z", "author": {"login": "bbpennel"}, "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/EditThumbIT.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest;\n+\n+import static edu.unc.lib.dl.acl.util.Permission.editDescription;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.net.URI;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+import edu.unc.lib.dl.acl.exception.AccessRestrictionException;\n+import edu.unc.lib.dl.acl.fcrepo4.AccessControlServiceImpl;\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.acl.util.GroupsThreadStore;\n+import edu.unc.lib.dl.cdr.services.rest.modify.AbstractAPIIT;\n+import edu.unc.lib.dl.cdr.services.processing.ImportThumbnailService;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.services.MessageSender;\n+\n+/**\n+ * @author lfarrell\n+ */\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/add-thumb-it-servlet.xml\")\n+})\n+public class EditThumbIT extends AbstractAPIIT {\n+    private static final String USER_NAME = \"user\";\n+    private static final String ADMIN_GROUP = \"adminGroup\";\n+    private CollectionObject collection;\n+\n+    @Rule\n+    public final TemporaryFolder tmpFolder = new TemporaryFolder();\n+\n+    @Captor\n+    private ArgumentCaptor<Document> docCaptor;\n+\n+    @Autowired\n+    private ImportThumbnailService service;\n+    @Autowired\n+    private AccessControlServiceImpl aclServices;\n+    @Autowired\n+    private MessageSender messageSender;\n+    @Autowired\n+    private RepositoryObjectFactory repositoryObjectFactory;\n+\n+    private File tempDir;\n+\n+    @Before\n+    public void init_() throws Exception {\n+        tempDir = tmpFolder.newFolder();\n+        service.setSourceImagesDir(tempDir.getAbsolutePath());\n+        service.init();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        initMocks(this);\n+        reset(messageSender);\n+\n+        AccessGroupSet testPrincipals = new AccessGroupSet(ADMIN_GROUP);\n+\n+        GroupsThreadStore.storeUsername(USER_NAME);\n+        GroupsThreadStore.storeGroups(testPrincipals);\n+\n+        setupContentRoot();\n+        collection = repositoryObjectFactory.createCollectionObject(null);\n+    }\n+\n+    @Test\n+    public void addEditThumbnail() throws Exception {\n+        FileInputStream input = new FileInputStream(\"src/test/resources/upload-files/burndown.png\");\n+        MockMultipartFile thumbnailFile = new MockMultipartFile(\"file\", \"burndown.png\", \"image/png\", IOUtils.toByteArray(input));\n+\n+        mvc.perform(MockMvcRequestBuilders.multipart(URI.create(\"/edit/displayThumbnail/\" + collection.getPid().getUUID()))\n+                .file(thumbnailFile))\n+                .andExpect(status().is2xxSuccessful())\n+                .andReturn();\n+\n+        verify(messageSender).sendMessage(docCaptor.capture());\n+        Document msgDoc = docCaptor.getValue();\n+        assertMessageValues(msgDoc, collection.getPid());\n+    }\n+\n+    @Test\n+    public void addCollectionThumbWrongFileType() throws Exception {\n+        MockMultipartFile thumbnailFile = new MockMultipartFile(\"file\", \"file.txt\", \"plain/text\", textStream());\n+\n+        mvc.perform(MockMvcRequestBuilders.multipart(URI.create(\"/edit/displayThumbnail/\" + collection.getPid().getUUID()))\n+                .file(thumbnailFile))\n+                .andExpect(status().is4xxClientError())\n+                .andReturn();\n+\n+        verify(messageSender, never()).sendMessage(any(Document.class));\n+    }\n+\n+    @Test\n+    public void addCollectionThumbNoAccess() throws Exception {\n+        MockMultipartFile thumbnailFile = new MockMultipartFile(\"file\", \"file.txt\", \"plain/text\", textStream());\n+\n+        doThrow(new AccessRestrictionException()).when(aclServices)\n+                .assertHasAccess(anyString(), eq(collection.getPid()), any(AccessGroupSet.class), eq(editDescription));\n+\n+        mvc.perform(MockMvcRequestBuilders.multipart(URI.create(\"/edit/displayThumbnail/\" + collection.getPid().getUUID()))\n+                .file(thumbnailFile))\n+                .andExpect(status().isForbidden())\n+                .andReturn();\n+\n+        verify(messageSender, never()).sendMessage(any(Document.class));\n+    }\n+\n+    byte[] textStream() {\n+        return \"I am not an image\".getBytes();\n+    }\n+\n+    private void assertMessageValues(Document msgDoc, PID expectedPid) {\n+        Element entry = msgDoc.getRootElement();\n+        String pidString = entry.getChildText(\"pid\", ATOM_NS);;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19693ce6c4725456f68eaeab5f5f00e97c32d93c"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODQ2MDI2OnYy", "diffSide": "RIGHT", "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/EditThumbIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo0NjozN1rOGHcleg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo0NjozN1rOGHcleg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2MTU2Mg==", "bodyText": "make method private", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r410461562", "createdAt": "2020-04-17T20:46:37Z", "author": {"login": "bbpennel"}, "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/EditThumbIT.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest;\n+\n+import static edu.unc.lib.dl.acl.util.Permission.editDescription;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.net.URI;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+import edu.unc.lib.dl.acl.exception.AccessRestrictionException;\n+import edu.unc.lib.dl.acl.fcrepo4.AccessControlServiceImpl;\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.acl.util.GroupsThreadStore;\n+import edu.unc.lib.dl.cdr.services.rest.modify.AbstractAPIIT;\n+import edu.unc.lib.dl.cdr.services.processing.ImportThumbnailService;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.services.MessageSender;\n+\n+/**\n+ * @author lfarrell\n+ */\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/add-thumb-it-servlet.xml\")\n+})\n+public class EditThumbIT extends AbstractAPIIT {\n+    private static final String USER_NAME = \"user\";\n+    private static final String ADMIN_GROUP = \"adminGroup\";\n+    private CollectionObject collection;\n+\n+    @Rule\n+    public final TemporaryFolder tmpFolder = new TemporaryFolder();\n+\n+    @Captor\n+    private ArgumentCaptor<Document> docCaptor;\n+\n+    @Autowired\n+    private ImportThumbnailService service;\n+    @Autowired\n+    private AccessControlServiceImpl aclServices;\n+    @Autowired\n+    private MessageSender messageSender;\n+    @Autowired\n+    private RepositoryObjectFactory repositoryObjectFactory;\n+\n+    private File tempDir;\n+\n+    @Before\n+    public void init_() throws Exception {\n+        tempDir = tmpFolder.newFolder();\n+        service.setSourceImagesDir(tempDir.getAbsolutePath());\n+        service.init();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        initMocks(this);\n+        reset(messageSender);\n+\n+        AccessGroupSet testPrincipals = new AccessGroupSet(ADMIN_GROUP);\n+\n+        GroupsThreadStore.storeUsername(USER_NAME);\n+        GroupsThreadStore.storeGroups(testPrincipals);\n+\n+        setupContentRoot();\n+        collection = repositoryObjectFactory.createCollectionObject(null);\n+    }\n+\n+    @Test\n+    public void addEditThumbnail() throws Exception {\n+        FileInputStream input = new FileInputStream(\"src/test/resources/upload-files/burndown.png\");\n+        MockMultipartFile thumbnailFile = new MockMultipartFile(\"file\", \"burndown.png\", \"image/png\", IOUtils.toByteArray(input));\n+\n+        mvc.perform(MockMvcRequestBuilders.multipart(URI.create(\"/edit/displayThumbnail/\" + collection.getPid().getUUID()))\n+                .file(thumbnailFile))\n+                .andExpect(status().is2xxSuccessful())\n+                .andReturn();\n+\n+        verify(messageSender).sendMessage(docCaptor.capture());\n+        Document msgDoc = docCaptor.getValue();\n+        assertMessageValues(msgDoc, collection.getPid());\n+    }\n+\n+    @Test\n+    public void addCollectionThumbWrongFileType() throws Exception {\n+        MockMultipartFile thumbnailFile = new MockMultipartFile(\"file\", \"file.txt\", \"plain/text\", textStream());\n+\n+        mvc.perform(MockMvcRequestBuilders.multipart(URI.create(\"/edit/displayThumbnail/\" + collection.getPid().getUUID()))\n+                .file(thumbnailFile))\n+                .andExpect(status().is4xxClientError())\n+                .andReturn();\n+\n+        verify(messageSender, never()).sendMessage(any(Document.class));\n+    }\n+\n+    @Test\n+    public void addCollectionThumbNoAccess() throws Exception {\n+        MockMultipartFile thumbnailFile = new MockMultipartFile(\"file\", \"file.txt\", \"plain/text\", textStream());\n+\n+        doThrow(new AccessRestrictionException()).when(aclServices)\n+                .assertHasAccess(anyString(), eq(collection.getPid()), any(AccessGroupSet.class), eq(editDescription));\n+\n+        mvc.perform(MockMvcRequestBuilders.multipart(URI.create(\"/edit/displayThumbnail/\" + collection.getPid().getUUID()))\n+                .file(thumbnailFile))\n+                .andExpect(status().isForbidden())\n+                .andReturn();\n+\n+        verify(messageSender, never()).sendMessage(any(Document.class));\n+    }\n+\n+    byte[] textStream() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19693ce6c4725456f68eaeab5f5f00e97c32d93c"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODQ3NzI5OnYy", "diffSide": "RIGHT", "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/EditThumbIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo1MzoyMlrOGHcwKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo1MzoyMlrOGHcwKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2NDI5OA==", "bodyText": "I'm now realizing for the first time that the run enhancement messages don't say anything about run enhancement. We should add that in and filter for it (maybe in the BinaryEnhancementProcessor where it is currently checking for the fcrepo uri), otherwise if at some point in the future we have an error that sends messages to the wrong queue, it shouldn't trigger anything. Its also possible we might have more message types going through the router at some point.\nIt looks like the other operations in OperationsMessageSender create an element within the message with the name of the action, so it'd be \"\" in this case. \"pid\" and \"force\" should be inside of it. Also, the element and those two sub-elements should all be in the CDR_MESSAGE_NS.\nAnd the reason I realized that here, is that it would be good to test the sent message to see if it's marked as a runEnhancements message.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r410464298", "createdAt": "2020-04-17T20:53:22Z", "author": {"login": "bbpennel"}, "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/EditThumbIT.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest;\n+\n+import static edu.unc.lib.dl.acl.util.Permission.editDescription;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.net.URI;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+import edu.unc.lib.dl.acl.exception.AccessRestrictionException;\n+import edu.unc.lib.dl.acl.fcrepo4.AccessControlServiceImpl;\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.acl.util.GroupsThreadStore;\n+import edu.unc.lib.dl.cdr.services.rest.modify.AbstractAPIIT;\n+import edu.unc.lib.dl.cdr.services.processing.ImportThumbnailService;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.services.MessageSender;\n+\n+/**\n+ * @author lfarrell\n+ */\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/add-thumb-it-servlet.xml\")\n+})\n+public class EditThumbIT extends AbstractAPIIT {\n+    private static final String USER_NAME = \"user\";\n+    private static final String ADMIN_GROUP = \"adminGroup\";\n+    private CollectionObject collection;\n+\n+    @Rule\n+    public final TemporaryFolder tmpFolder = new TemporaryFolder();\n+\n+    @Captor\n+    private ArgumentCaptor<Document> docCaptor;\n+\n+    @Autowired\n+    private ImportThumbnailService service;\n+    @Autowired\n+    private AccessControlServiceImpl aclServices;\n+    @Autowired\n+    private MessageSender messageSender;\n+    @Autowired\n+    private RepositoryObjectFactory repositoryObjectFactory;\n+\n+    private File tempDir;\n+\n+    @Before\n+    public void init_() throws Exception {\n+        tempDir = tmpFolder.newFolder();\n+        service.setSourceImagesDir(tempDir.getAbsolutePath());\n+        service.init();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        initMocks(this);\n+        reset(messageSender);\n+\n+        AccessGroupSet testPrincipals = new AccessGroupSet(ADMIN_GROUP);\n+\n+        GroupsThreadStore.storeUsername(USER_NAME);\n+        GroupsThreadStore.storeGroups(testPrincipals);\n+\n+        setupContentRoot();\n+        collection = repositoryObjectFactory.createCollectionObject(null);\n+    }\n+\n+    @Test\n+    public void addEditThumbnail() throws Exception {\n+        FileInputStream input = new FileInputStream(\"src/test/resources/upload-files/burndown.png\");\n+        MockMultipartFile thumbnailFile = new MockMultipartFile(\"file\", \"burndown.png\", \"image/png\", IOUtils.toByteArray(input));\n+\n+        mvc.perform(MockMvcRequestBuilders.multipart(URI.create(\"/edit/displayThumbnail/\" + collection.getPid().getUUID()))\n+                .file(thumbnailFile))\n+                .andExpect(status().is2xxSuccessful())\n+                .andReturn();\n+\n+        verify(messageSender).sendMessage(docCaptor.capture());\n+        Document msgDoc = docCaptor.getValue();\n+        assertMessageValues(msgDoc, collection.getPid());\n+    }\n+\n+    @Test\n+    public void addCollectionThumbWrongFileType() throws Exception {\n+        MockMultipartFile thumbnailFile = new MockMultipartFile(\"file\", \"file.txt\", \"plain/text\", textStream());\n+\n+        mvc.perform(MockMvcRequestBuilders.multipart(URI.create(\"/edit/displayThumbnail/\" + collection.getPid().getUUID()))\n+                .file(thumbnailFile))\n+                .andExpect(status().is4xxClientError())\n+                .andReturn();\n+\n+        verify(messageSender, never()).sendMessage(any(Document.class));\n+    }\n+\n+    @Test\n+    public void addCollectionThumbNoAccess() throws Exception {\n+        MockMultipartFile thumbnailFile = new MockMultipartFile(\"file\", \"file.txt\", \"plain/text\", textStream());\n+\n+        doThrow(new AccessRestrictionException()).when(aclServices)\n+                .assertHasAccess(anyString(), eq(collection.getPid()), any(AccessGroupSet.class), eq(editDescription));\n+\n+        mvc.perform(MockMvcRequestBuilders.multipart(URI.create(\"/edit/displayThumbnail/\" + collection.getPid().getUUID()))\n+                .file(thumbnailFile))\n+                .andExpect(status().isForbidden())\n+                .andReturn();\n+\n+        verify(messageSender, never()).sendMessage(any(Document.class));\n+    }\n+\n+    byte[] textStream() {\n+        return \"I am not an image\".getBytes();\n+    }\n+\n+    private void assertMessageValues(Document msgDoc, PID expectedPid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19693ce6c4725456f68eaeab5f5f00e97c32d93c"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODQ5MTk2OnYy", "diffSide": "RIGHT", "path": "solr-ingest/src/main/java/edu/unc/lib/dl/data/ingest/solr/filter/SetDatastreamFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo1ODo0MVrOGHc5Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo1ODo0MVrOGHc5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2NjYxMA==", "bodyText": "I think you can get rid of this list, its just a copy of the first one, and is the only thing the first one is used for.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r410466610", "createdAt": "2020-04-17T20:58:41Z", "author": {"login": "bbpennel"}, "path": "solr-ingest/src/main/java/edu/unc/lib/dl/data/ingest/solr/filter/SetDatastreamFilter.java", "diffHunk": "@@ -60,22 +62,27 @@ public void filter(DocumentIndexingPackage dip) throws IndexingException {\n         ContentObject contentObj = dip.getContentObject();\n \n         FileObject fileObj = getFileObject(contentObj);\n-        if (fileObj == null) {\n-            return;\n+        if (fileObj != null) {\n+            boolean ownedByOtherObject = contentObj instanceof WorkObject;\n+            // Retrieve list of datastreams associated with this object\n+            List<Datastream> datastreams = getDatastreams(fileObj, ownedByOtherObject);\n+            // Retrieve list of derivatives associated with the object\n+            List<Datastream> derivatives = getDerivatives(fileObj.getPid(), ownedByOtherObject);\n+            datastreams.addAll(derivatives);\n+\n+            IndexDocumentBean doc = dip.getDocument();\n+\n+            doc.setDatastream(getDatastreamStrings(datastreams));\n+            doc.setFilesizeTotal(getFilesizeTotal(datastreams));\n+            doc.setFilesizeSort(getFilesize(datastreams));\n+        } else if (contentObj instanceof CollectionObject) {\n+            List<Datastream> derivatives = getDerivatives(contentObj.getPid(), false);\n+            List<Datastream> datastreams = new ArrayList<>(derivatives);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19693ce6c4725456f68eaeab5f5f00e97c32d93c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Njk5MjY1OnYy", "diffSide": "RIGHT", "path": "persistence/src/main/java/edu/unc/lib/dl/services/RunEnhancementsMessageHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODowMjoxNVrOGIg8ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODowMjoxNVrOGIg8ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MTU0MA==", "bodyText": "use the cdr message namespace for the enhancement element and the pid element", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r411581540", "createdAt": "2020-04-20T18:02:15Z", "author": {"login": "bbpennel"}, "path": "persistence/src/main/java/edu/unc/lib/dl/services/RunEnhancementsMessageHelpers.java", "diffHunk": "@@ -47,12 +47,20 @@ public static Document makeEnhancementOperationBody(String userid, PID pid, Bool\n         Element entry = new Element(\"entry\", ATOM_NS);\n         entry.addContent(new Element(\"author\", ATOM_NS)\n                 .addContent(new Element(\"name\", ATOM_NS).setText(userid)));\n-        entry.addContent(new Element(\"pid\", ATOM_NS).setText(pid.getRepositoryPath()));\n+\n+        Element paramForce = new Element(\"force\", CDR_MESSAGE_NS);\n \n         if (force) {\n-            Element paramForce = new Element(\"force\", CDR_MESSAGE_NS);\n             paramForce.setText(\"true\");\n+        } else {\n+            paramForce.setText(\"false\");\n         }\n+\n+        Element enhancements = new Element(ENHANCEMENTS.getName(), ATOM_NS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4119d4ad93f2316df8da163ae0f4bb7caa5690"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Njk5NTU0OnYy", "diffSide": "RIGHT", "path": "metadata/src/main/java/edu/unc/lib/dl/util/JMSMessageUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODowMjo1OVrOGIg-EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODowMjo1OVrOGIg-EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MTk2OQ==", "bodyText": "good idea to add a constant. My only suggestion is to make it a verb/action since all the other ones are", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r411581969", "createdAt": "2020-04-20T18:02:59Z", "author": {"login": "bbpennel"}, "path": "metadata/src/main/java/edu/unc/lib/dl/util/JMSMessageUtil.java", "diffHunk": "@@ -110,6 +110,7 @@ public static FedoraActions getAction(String value) {\n         ADD(\"add\"),\n         EDIT_ACCESS_CONTROL(\"editAccess\"),\n         EDIT_TYPE(\"editType\"),\n+        ENHANCEMENTS(\"enhancements\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4119d4ad93f2316df8da163ae0f4bb7caa5690"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzAwMTIwOnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODowNDoxOVrOGIhBbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODowNjoxM1rOGIhFvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MjgzMA==", "bodyText": "has usually implies a boolean and isn't really what this is storing, maybe just enhancementEl or something like that?", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r411582830", "createdAt": "2020-04-20T18:04:19Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessor.java", "diffHunk": "@@ -47,11 +53,28 @@ public void process(final Exchange exchange) throws Exception {\n             Document msgBody = MessageUtil.getDocumentBody(in);\n             Element body = msgBody.getRootElement();\n \n-            String pidValue = body.getChild(\"pid\", ATOM_NS).getTextTrim();\n+            Element hasEnhancementPid = body.getChild(\"enhancements\", ATOM_NS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4119d4ad93f2316df8da163ae0f4bb7caa5690"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MzkzMw==", "bodyText": "also, use the constant from JMSElementUtil for the name of this element", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r411583933", "createdAt": "2020-04-20T18:06:13Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessor.java", "diffHunk": "@@ -47,11 +53,28 @@ public void process(final Exchange exchange) throws Exception {\n             Document msgBody = MessageUtil.getDocumentBody(in);\n             Element body = msgBody.getRootElement();\n \n-            String pidValue = body.getChild(\"pid\", ATOM_NS).getTextTrim();\n+            Element hasEnhancementPid = body.getChild(\"enhancements\", ATOM_NS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MjgzMA=="}, "originalCommit": {"oid": "bc4119d4ad93f2316df8da163ae0f4bb7caa5690"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzAzMTMwOnYy", "diffSide": "RIGHT", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoxMTo1NlrOGIhTgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo1ODo0MlrOGJEW9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4NzQ1OQ==", "bodyText": "Should check verify(solrIngestProcessor).process(any(Exchange.class));  too", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r411587459", "createdAt": "2020-04-20T18:11:56Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "diffHunk": "@@ -162,14 +179,32 @@ public void testFolderEnhancements() throws Exception {\n     }\n \n     @Test\n-    public void testImageFile() throws Exception {\n+    public void nonBinaryNoSourceImages() throws Exception {\n+        CollectionObject collObject = repoObjectFactory.createCollectionObject(null);\n+        final Map<String, Object> headers = createEvent(false, collObject.getPid(),\n+                Cdr.Collection.getURI(), Container.getURI());\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        NotifyBuilder notify1 = new NotifyBuilder(cdrEnhancements)\n+                .whenCompleted(1)\n+                .create();\n+\n+        boolean result1 = notify1.matches(5l, TimeUnit.SECONDS);\n+        assertTrue(\"Enhancement route not satisfied\", result1);\n+\n+        verify(addSmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(addLargeThumbnailProcessor, never()).process(any(Exchange.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4119d4ad93f2316df8da163ae0f4bb7caa5690"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE2MTc4Mg==", "bodyText": "The solr ingest processor should run in this case, if its not then that would be a bug", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r412161782", "createdAt": "2020-04-21T12:58:42Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "diffHunk": "@@ -162,14 +179,32 @@ public void testFolderEnhancements() throws Exception {\n     }\n \n     @Test\n-    public void testImageFile() throws Exception {\n+    public void nonBinaryNoSourceImages() throws Exception {\n+        CollectionObject collObject = repoObjectFactory.createCollectionObject(null);\n+        final Map<String, Object> headers = createEvent(false, collObject.getPid(),\n+                Cdr.Collection.getURI(), Container.getURI());\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        NotifyBuilder notify1 = new NotifyBuilder(cdrEnhancements)\n+                .whenCompleted(1)\n+                .create();\n+\n+        boolean result1 = notify1.matches(5l, TimeUnit.SECONDS);\n+        assertTrue(\"Enhancement route not satisfied\", result1);\n+\n+        verify(addSmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(addLargeThumbnailProcessor, never()).process(any(Exchange.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4NzQ1OQ=="}, "originalCommit": {"oid": "bc4119d4ad93f2316df8da163ae0f4bb7caa5690"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzA2NTk4OnYy", "diffSide": "RIGHT", "path": "solr-ingest/src/main/java/edu/unc/lib/dl/data/ingest/solr/filter/SetDatastreamFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyMDo0NVrOGIhoMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo1NTo1OVrOGJEOvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5Mjc1Mg==", "bodyText": "No datastreams are going to get indexed for objects other than works and files, i think? Did you need to get rid of the other side of this conditional? We still need to index other objects, we just don't need to restrict it to CollectionObjects, which is what you had before.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r411592752", "createdAt": "2020-04-20T18:20:45Z", "author": {"login": "bbpennel"}, "path": "solr-ingest/src/main/java/edu/unc/lib/dl/data/ingest/solr/filter/SetDatastreamFilter.java", "diffHunk": "@@ -60,22 +60,20 @@ public void filter(DocumentIndexingPackage dip) throws IndexingException {\n         ContentObject contentObj = dip.getContentObject();\n \n         FileObject fileObj = getFileObject(contentObj);\n-        if (fileObj == null) {\n-            return;\n+        if (fileObj != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4119d4ad93f2316df8da163ae0f4bb7caa5690"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY3MDQwNQ==", "bodyText": "So are we back to this?\n  if (fileObj != null) {\n            boolean ownedByOtherObject = contentObj instanceof WorkObject;\n            // Retrieve list of datastreams associated with this object\n            List<Datastream> datastreams = getDatastreams(fileObj, ownedByOtherObject);\n            // Retrieve list of derivatives associated with the object\n            List<Datastream> derivatives = getDerivatives(fileObj.getPid(), ownedByOtherObject);\n            datastreams.addAll(derivatives);\n\n            IndexDocumentBean doc = dip.getDocument();\n\n            doc.setDatastream(getDatastreamStrings(datastreams));\n            doc.setFilesizeTotal(getFilesizeTotal(datastreams));\n            doc.setFilesizeSort(getFilesize(datastreams));\n        } else {\n            List<Datastream> derivatives = getDerivatives(contentObj.getPid(), false);\n            List<Datastream> datastreams = new ArrayList<>(derivatives);\n\n            IndexDocumentBean doc = dip.getDocument();\n\n            doc.setDatastream(getDatastreamStrings(datastreams));\n        }```", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r411670405", "createdAt": "2020-04-20T20:29:20Z", "author": {"login": "lfarrell"}, "path": "solr-ingest/src/main/java/edu/unc/lib/dl/data/ingest/solr/filter/SetDatastreamFilter.java", "diffHunk": "@@ -60,22 +60,20 @@ public void filter(DocumentIndexingPackage dip) throws IndexingException {\n         ContentObject contentObj = dip.getContentObject();\n \n         FileObject fileObj = getFileObject(contentObj);\n-        if (fileObj == null) {\n-            return;\n+        if (fileObj != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5Mjc1Mg=="}, "originalCommit": {"oid": "bc4119d4ad93f2316df8da163ae0f4bb7caa5690"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1OTY3Ng==", "bodyText": "yes almost, my last comment was that in the second block, derivatives and datastreams have the exact same stuff in them, so there's no reason to make the second variable. We do need the else block which covers objects besides works and files.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r412159676", "createdAt": "2020-04-21T12:55:59Z", "author": {"login": "bbpennel"}, "path": "solr-ingest/src/main/java/edu/unc/lib/dl/data/ingest/solr/filter/SetDatastreamFilter.java", "diffHunk": "@@ -60,22 +60,20 @@ public void filter(DocumentIndexingPackage dip) throws IndexingException {\n         ContentObject contentObj = dip.getContentObject();\n \n         FileObject fileObj = getFileObject(contentObj);\n-        if (fileObj == null) {\n-            return;\n+        if (fileObj != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5Mjc1Mg=="}, "originalCommit": {"oid": "bc4119d4ad93f2316df8da163ae0f4bb7caa5690"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDkzNjc3OnYy", "diffSide": "RIGHT", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo1Nzo1MFrOGJEUQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo1Nzo1MFrOGJEUQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE2MTA5MQ==", "bodyText": "use the JMSMessageUtil.CDRActions.RUN_ENHANCEMENTS constant here", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r412161091", "createdAt": "2020-04-21T12:57:50Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryEnhancementProcessor.java", "diffHunk": "@@ -53,9 +53,9 @@ public void process(final Exchange exchange) throws Exception {\n             Document msgBody = MessageUtil.getDocumentBody(in);\n             Element body = msgBody.getRootElement();\n \n-            Element hasEnhancementPid = body.getChild(\"enhancements\", ATOM_NS);\n-            if (hasEnhancementPid != null) {\n-                String pidValue = hasEnhancementPid.getChild(\"pid\", ATOM_NS).getTextTrim();\n+            Element enhancementsEl = body.getChild(\"runEnhancements\", CDR_MESSAGE_NS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012de7ff652a17aa2d93ec0dd0600bd1983431be"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTIxNzgyOnYy", "diffSide": "RIGHT", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1MzozMVrOGJG9sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1MzozMVrOGJG9sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNDQ2Nw==", "bodyText": "This test should verify that thumbnail enhancements are being called. You could also check that the access copy is not called.", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r412204467", "createdAt": "2020-04-21T13:53:31Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "diffHunk": "@@ -137,11 +154,11 @@ public void init() throws Exception {\n     }\n \n     @Test\n-    public void testFolderEnhancements() throws Exception {\n+    public void nonBinaryWithSourceImages() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d44fbefd2b3c0cdf3d2672692fd5c39574ea74af"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTIzMzQ2OnYy", "diffSide": "RIGHT", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1NjoyNFrOGJHHTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1NjoyNFrOGJHHTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNjkyNg==", "bodyText": "I think this and the if (editThumb) should be removed, since the router and its processes should be setting these headers. You should also be able to remove the boolean editThumb parameter from this method", "url": "https://github.com/UNC-Libraries/box-c/pull/955#discussion_r412206926", "createdAt": "2020-04-21T13:56:24Z", "author": {"login": "bbpennel"}, "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "diffHunk": "@@ -268,13 +304,20 @@ public void testProcessFilterOutDescriptiveMDSolr() throws Exception {\n         verify(solrIngestProcessor, never()).process(any(Exchange.class));\n     }\n \n-    private static Map<String, Object> createEvent(PID pid, String... type) {\n-\n+    private Map<String, Object> createEvent(boolean editThumb, PID pid, String... type) {\n         final Map<String, Object> headers = new HashMap<>();\n         headers.put(IDENTIFIER, pid.getRepositoryPath());\n         headers.put(EVENT_TYPE, \"ResourceCreation\");\n         headers.put(\"CamelFcrepoUri\", pid.getRepositoryPath());\n         headers.put(RESOURCE_TYPE, String.join(\",\", type));\n+        headers.put(CdrBinaryMimeType, \"text/plain\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d44fbefd2b3c0cdf3d2672692fd5c39574ea74af"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 752, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}