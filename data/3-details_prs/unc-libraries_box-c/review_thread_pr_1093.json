{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NjIwNDE2", "number": 1093, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozNjozMVrOEpIr_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1NDo1M1rOEtKHhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTY5NDA3OnYy", "diffSide": "RIGHT", "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozNjozMVrOHaoZfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoxMDo0MlrOHd1Vfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4NjkwOQ==", "bodyText": "just curious why this one required a different annotation, and alternatively if it could just be @Resource without the package stuff inline here?", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r497686909", "createdAt": "2020-09-30T17:36:31Z", "author": {"login": "bbpennel"}, "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.acl.util.AccessPrincipalConstants.AUTHENTICATED_PRINC;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.getContentRootPid;\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;\n+import org.apache.solr.common.SolrInputDocument;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.DocumentIndexingPackageFactory;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.SolrUpdateDriver;\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.FolderObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryInitializer;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.CdrAcl;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.service.SolrSearchService;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.util.ResourceType;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/export-csv-it-servlet.xml\")\n+})\n+public class ExportCsvIT extends AbstractAPIIT {\n+    @Autowired\n+    protected String baseAddress;\n+    @Autowired\n+    protected File solrDataDir;\n+    @Autowired\n+    protected EmbeddedSolrServer server;\n+    @Autowired\n+    protected ChildrenCountService childrenCountService;\n+    @Autowired\n+    protected SolrUpdateDriver driver;\n+    @Autowired\n+    protected SolrSearchService solrSearchService;\n+    @javax.annotation.Resource(name = \"accessGroups\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2294477767c25b3670337cf99085f08deb81452"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0NDYwNw==", "bodyText": "I just took it from another test :)", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r501044607", "createdAt": "2020-10-07T14:10:42Z", "author": {"login": "lfarrell"}, "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.acl.util.AccessPrincipalConstants.AUTHENTICATED_PRINC;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.getContentRootPid;\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;\n+import org.apache.solr.common.SolrInputDocument;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.DocumentIndexingPackageFactory;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.SolrUpdateDriver;\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.FolderObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryInitializer;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.CdrAcl;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.service.SolrSearchService;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.util.ResourceType;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/export-csv-it-servlet.xml\")\n+})\n+public class ExportCsvIT extends AbstractAPIIT {\n+    @Autowired\n+    protected String baseAddress;\n+    @Autowired\n+    protected File solrDataDir;\n+    @Autowired\n+    protected EmbeddedSolrServer server;\n+    @Autowired\n+    protected ChildrenCountService childrenCountService;\n+    @Autowired\n+    protected SolrUpdateDriver driver;\n+    @Autowired\n+    protected SolrSearchService solrSearchService;\n+    @javax.annotation.Resource(name = \"accessGroups\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4NjkwOQ=="}, "originalCommit": {"oid": "f2294477767c25b3670337cf99085f08deb81452"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTY5ODkzOnYy", "diffSide": "RIGHT", "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozNzo1MlrOHaockg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozNzo1MlrOHaockg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4NzY5OA==", "bodyText": "For a invalid pid, the expected outcome should probably be a 4xx, maybe a 400?", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r497687698", "createdAt": "2020-09-30T17:37:52Z", "author": {"login": "bbpennel"}, "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.acl.util.AccessPrincipalConstants.AUTHENTICATED_PRINC;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.getContentRootPid;\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;\n+import org.apache.solr.common.SolrInputDocument;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.DocumentIndexingPackageFactory;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.SolrUpdateDriver;\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.FolderObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryInitializer;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.CdrAcl;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.service.SolrSearchService;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.util.ResourceType;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/export-csv-it-servlet.xml\")\n+})\n+public class ExportCsvIT extends AbstractAPIIT {\n+    @Autowired\n+    protected String baseAddress;\n+    @Autowired\n+    protected File solrDataDir;\n+    @Autowired\n+    protected EmbeddedSolrServer server;\n+    @Autowired\n+    protected ChildrenCountService childrenCountService;\n+    @Autowired\n+    protected SolrUpdateDriver driver;\n+    @Autowired\n+    protected SolrSearchService solrSearchService;\n+    @javax.annotation.Resource(name = \"accessGroups\")\n+    protected AccessGroupSet accessGroups;\n+    @Autowired\n+    protected Model queryModel;\n+    @Autowired\n+    protected RepositoryObjectLoader repositoryObjectLoader;\n+    @Autowired\n+    protected RepositoryObjectFactory repositoryObjectFactory;\n+    @Autowired\n+    protected DocumentIndexingPackageFactory dipFactory;\n+    @Autowired\n+    protected RepositoryPIDMinter pidMinter;\n+    @Autowired\n+    private RepositoryInitializer repoInitializer;\n+    @Autowired\n+    private RepositoryObjectTreeIndexer treeIndexer;\n+\n+    protected ContentRootObject rootObj;\n+    protected AdminUnit unitObj;\n+    protected CollectionObject collObj;\n+    protected FolderObject folderObj;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        setupContentRoot();\n+        generateBaseStructure();\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        setField(solrSearchService, \"solrClient\", server);\n+        setField(childrenCountService, \"solrClient\", server);\n+\n+        indexDummyDocument(rootObj);\n+        indexDummyDocument(unitObj);\n+        indexDummyDocument(collObj);\n+        indexDummyDocument(folderObj);\n+    }\n+\n+    @Test\n+    public void exportCsv() throws Exception {\n+        String id = collObj.getPid().getUUID();\n+        MvcResult result = mvc.perform(get(\"/exportTree/csv/\" + id))\n+                .andExpect(status().is2xxSuccessful())\n+                .andReturn();\n+\n+        MockHttpServletResponse response = result.getResponse();\n+        assertEquals(\"text/csv\", response.getContentType());\n+\n+        String expectedCsv = \"Object Type,PID,Title,Path,Label,Depth,Deleted,Date Added,Date Updated,MIME Type,\" +\n+                \"Checksum,File Size (bytes),Number of Children,Description\\r\\n\" +\n+                \"Collection,\" + collObj.getPid().getUUID() + \",dummy title,,,2,,,,,,,,Described\\r\\n\";\n+        assertEquals(expectedCsv, response.getContentAsString());\n+    }\n+\n+    @Test\n+    public void exportInvalidPidCsv() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2294477767c25b3670337cf99085f08deb81452"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTcwMzc0OnYy", "diffSide": "RIGHT", "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozOTowOVrOHaofhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozOTowOVrOHaofhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4ODQ1NQ==", "bodyText": "For a pid not found, the expected outcome should probably be a 4xx, maybe a 404", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r497688455", "createdAt": "2020-09-30T17:39:09Z", "author": {"login": "bbpennel"}, "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.acl.util.AccessPrincipalConstants.AUTHENTICATED_PRINC;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.getContentRootPid;\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;\n+import org.apache.solr.common.SolrInputDocument;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.DocumentIndexingPackageFactory;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.SolrUpdateDriver;\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.FolderObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryInitializer;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.CdrAcl;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.service.SolrSearchService;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.util.ResourceType;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/export-csv-it-servlet.xml\")\n+})\n+public class ExportCsvIT extends AbstractAPIIT {\n+    @Autowired\n+    protected String baseAddress;\n+    @Autowired\n+    protected File solrDataDir;\n+    @Autowired\n+    protected EmbeddedSolrServer server;\n+    @Autowired\n+    protected ChildrenCountService childrenCountService;\n+    @Autowired\n+    protected SolrUpdateDriver driver;\n+    @Autowired\n+    protected SolrSearchService solrSearchService;\n+    @javax.annotation.Resource(name = \"accessGroups\")\n+    protected AccessGroupSet accessGroups;\n+    @Autowired\n+    protected Model queryModel;\n+    @Autowired\n+    protected RepositoryObjectLoader repositoryObjectLoader;\n+    @Autowired\n+    protected RepositoryObjectFactory repositoryObjectFactory;\n+    @Autowired\n+    protected DocumentIndexingPackageFactory dipFactory;\n+    @Autowired\n+    protected RepositoryPIDMinter pidMinter;\n+    @Autowired\n+    private RepositoryInitializer repoInitializer;\n+    @Autowired\n+    private RepositoryObjectTreeIndexer treeIndexer;\n+\n+    protected ContentRootObject rootObj;\n+    protected AdminUnit unitObj;\n+    protected CollectionObject collObj;\n+    protected FolderObject folderObj;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        setupContentRoot();\n+        generateBaseStructure();\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        setField(solrSearchService, \"solrClient\", server);\n+        setField(childrenCountService, \"solrClient\", server);\n+\n+        indexDummyDocument(rootObj);\n+        indexDummyDocument(unitObj);\n+        indexDummyDocument(collObj);\n+        indexDummyDocument(folderObj);\n+    }\n+\n+    @Test\n+    public void exportCsv() throws Exception {\n+        String id = collObj.getPid().getUUID();\n+        MvcResult result = mvc.perform(get(\"/exportTree/csv/\" + id))\n+                .andExpect(status().is2xxSuccessful())\n+                .andReturn();\n+\n+        MockHttpServletResponse response = result.getResponse();\n+        assertEquals(\"text/csv\", response.getContentType());\n+\n+        String expectedCsv = \"Object Type,PID,Title,Path,Label,Depth,Deleted,Date Added,Date Updated,MIME Type,\" +\n+                \"Checksum,File Size (bytes),Number of Children,Description\\r\\n\" +\n+                \"Collection,\" + collObj.getPid().getUUID() + \",dummy title,,,2,,,,,,,,Described\\r\\n\";\n+        assertEquals(expectedCsv, response.getContentAsString());\n+    }\n+\n+    @Test\n+    public void exportInvalidPidCsv() throws Exception {\n+        mvc.perform(get(\"/exportTree/csv/1234\"))\n+                .andExpect(status().is5xxServerError())\n+                .andReturn();\n+    }\n+\n+    @Test\n+    public void exportNonExistentPidCsv() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2294477767c25b3670337cf99085f08deb81452"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODk3NzQxOnYy", "diffSide": "RIGHT", "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1MzowNlrOHclp4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1MzowNlrOHclp4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczOTEwNw==", "bodyText": "There are a few more cases we should test:\n\nExport container which contains a work with a file (missing file metadata fields was what demonstrated the need for a test in the first place)\nExport from the root\nExport with only one result\nExport containing a described resource\nExport containing a delete resource (I'd suggest deleting a container that contains a child, to verify both the \"Deleted\" and \"Parent Deleted\" cases)\nExport a file resource directly (this is disallowed in the admin ui, I'm not really sure what the outcome would be, but returning just the file would be fine, or throwing an error, whichever seems better)\n\nCould you also verify the filename for the csv file itself is set in at least one test?", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r499739107", "createdAt": "2020-10-05T16:53:06Z", "author": {"login": "bbpennel"}, "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.acl.util.AccessPrincipalConstants.AUTHENTICATED_PRINC;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.getContentRootPid;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.CONTENT_DESCRIBED;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.CONTENT_NOT_DESCRIBED;\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.File;\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVRecord;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.DocumentIndexingPackageFactory;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.SolrUpdateDriver;\n+import edu.unc.lib.dl.data.ingest.solr.test.RepositoryObjectSolrIndexer;\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.FolderObject;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryInitializer;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.service.SolrSearchService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.util.ResourceType;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/solr-indexing-context.xml\"),\n+        @ContextConfiguration(\"/export-csv-it-servlet.xml\")\n+})\n+public class ExportCsvIT extends AbstractAPIIT {\n+    private static final String COLLECTION_PATH =\n+            \"/Content Collections Root/Admin unit/Collection\";\n+    private static final String FOLDER_PATH =\n+            \"/Content Collections Root/Admin unit/Collection/Folder\";\n+\n+    @Autowired\n+    protected String baseAddress;\n+    @Autowired\n+    protected File solrDataDir;\n+    @Autowired\n+    protected EmbeddedSolrServer server;\n+    @Autowired\n+    protected ChildrenCountService childrenCountService;\n+    @Autowired\n+    protected SolrUpdateDriver driver;\n+    @Autowired\n+    protected SolrSearchService solrSearchService;\n+    @javax.annotation.Resource(name = \"accessGroups\")\n+    protected AccessGroupSet accessGroups;\n+    @Autowired\n+    protected Model queryModel;\n+    @Autowired\n+    protected RepositoryObjectLoader repositoryObjectLoader;\n+    @Autowired\n+    protected RepositoryObjectFactory repositoryObjectFactory;\n+    @Autowired\n+    protected DocumentIndexingPackageFactory dipFactory;\n+    @Autowired\n+    protected RepositoryPIDMinter pidMinter;\n+    @Autowired\n+    private RepositoryInitializer repoInitializer;\n+    @Autowired\n+    private RepositoryObjectTreeIndexer treeIndexer;\n+    @Autowired\n+    private RepositoryObjectSolrIndexer solrIndexer;\n+\n+    protected ContentRootObject rootObj;\n+    protected AdminUnit unitObj;\n+    protected CollectionObject collObj;\n+    protected FolderObject folderObj;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        setupContentRoot();\n+        generateBaseStructure();\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        setField(solrSearchService, \"solrClient\", server);\n+        setField(childrenCountService, \"solrClient\", server);\n+\n+        solrIndexer.index(rootObj.getPid(),\n+                unitObj.getPid(),\n+                collObj.getPid(),\n+                folderObj.getPid());\n+    }\n+\n+    @Test\n+    public void exportCsv() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8097d774580faa77713a29432109bf93e490ca6a"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjYzMDg1OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDozMzo1OVrOHgBU5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDozMzo1OVrOHgBU5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzODIxMg==", "bodyText": "use edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.CONTENT_ROOT_ID. Also, its generally safer to put a constant first to avoid null pointer exceptions\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (pidString.equals(\"collections\")) {\n          \n          \n            \n                        if (CONTENT_ROOT_ID.equals(pidString)) {", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r503338212", "createdAt": "2020-10-12T14:33:59Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvController.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.model.DatastreamType.ORIGINAL_FILE;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.MARKED_FOR_DELETION;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.FedoraException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.util.FacetConstants;\n+import edu.unc.lib.dl.search.solr.util.SearchFieldKeys;\n+import edu.unc.lib.dl.ui.controller.AbstractSolrSearchController;\n+\n+/**\n+ * Controller which generates a CSV listing of a repository object\n+ * and all of its children, recursively depth first.\n+ *\n+ * @author bbpennel\n+ */\n+@Controller\n+@RequestMapping(\"exportTree/csv\")\n+public class ExportCsvController extends AbstractSolrSearchController {\n+    private static final Logger log = LoggerFactory.getLogger(ExportCsvController.class);\n+\n+    public static final String OBJ_TYPE_HEADER = \"Object Type\";\n+    public static final String PID_HEADER = \"PID\";\n+    public static final String TITLE_HEADER = \"Title\";\n+    public static final String PATH_HEADER = \"Path\";\n+    public static final String LABEL_HEADER = \"Label\";\n+    public static final String DEPTH_HEADER = \"Depth\";\n+    public static final String DELETED_HEADER = \"Deleted\";\n+    public static final String DATE_ADDED_HEADER = \"Date Added\";\n+    public static final String DATE_UPDATED_HEADER = \"Date Updated\";\n+    public static final String MIME_TYPE_HEADER = \"MIME Type\";\n+    public static final String CHECKSUM_HEADER = \"Checksum\";\n+    public static final String FILE_SIZE_HEADER = \"File Size (bytes)\";\n+    public static final String NUM_CHILDREN_HEADER = \"Number of Children\";\n+    public static final String DESCRIBED_HEADER = \"Description\";\n+\n+    private static final String[] CSV_HEADERS = new String[] {\n+            OBJ_TYPE_HEADER, PID_HEADER, TITLE_HEADER, PATH_HEADER, LABEL_HEADER,\n+            DEPTH_HEADER, DELETED_HEADER, DATE_ADDED_HEADER, DATE_UPDATED_HEADER,\n+            MIME_TYPE_HEADER, CHECKSUM_HEADER, FILE_SIZE_HEADER, NUM_CHILDREN_HEADER,\n+            DESCRIBED_HEADER};\n+\n+    @Autowired\n+    private ChildrenCountService childrenCountService;\n+\n+    protected SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd kk:mm:ss\");\n+\n+    @RequestMapping(value = \"{pid}\", method = RequestMethod.GET)\n+    public ResponseEntity<Map<String, Object>> export(@PathVariable(\"pid\") String pidString, HttpServletRequest request,\n+                                                      HttpServletResponse response) throws IOException {\n+\n+        Map<String, Object> result = new HashMap<>();\n+        result.put(\"action\", \"exportCsv\");\n+        result.put(\"username\", request.getRemoteUser());\n+\n+        try {\n+            if (pidString.equals(\"collections\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ba61d5cd8293cbae406781ea0645d012d2b7f1"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjY2MjIzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDo0MToyMFrOHgBnpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDo0MToyMFrOHgBnpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM0MzAxMg==", "bodyText": "Rather than throwing an error, it would be better to return a response with an appropriate status and message. I'm guessing either BAD_REQUEST, or maybe FORBIDDEN\nreturn new ResponseEntity<>(result, HttpStatus.BAD_REQUESt);", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r503343012", "createdAt": "2020-10-12T14:41:20Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvController.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.model.DatastreamType.ORIGINAL_FILE;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.MARKED_FOR_DELETION;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.FedoraException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.util.FacetConstants;\n+import edu.unc.lib.dl.search.solr.util.SearchFieldKeys;\n+import edu.unc.lib.dl.ui.controller.AbstractSolrSearchController;\n+\n+/**\n+ * Controller which generates a CSV listing of a repository object\n+ * and all of its children, recursively depth first.\n+ *\n+ * @author bbpennel\n+ */\n+@Controller\n+@RequestMapping(\"exportTree/csv\")\n+public class ExportCsvController extends AbstractSolrSearchController {\n+    private static final Logger log = LoggerFactory.getLogger(ExportCsvController.class);\n+\n+    public static final String OBJ_TYPE_HEADER = \"Object Type\";\n+    public static final String PID_HEADER = \"PID\";\n+    public static final String TITLE_HEADER = \"Title\";\n+    public static final String PATH_HEADER = \"Path\";\n+    public static final String LABEL_HEADER = \"Label\";\n+    public static final String DEPTH_HEADER = \"Depth\";\n+    public static final String DELETED_HEADER = \"Deleted\";\n+    public static final String DATE_ADDED_HEADER = \"Date Added\";\n+    public static final String DATE_UPDATED_HEADER = \"Date Updated\";\n+    public static final String MIME_TYPE_HEADER = \"MIME Type\";\n+    public static final String CHECKSUM_HEADER = \"Checksum\";\n+    public static final String FILE_SIZE_HEADER = \"File Size (bytes)\";\n+    public static final String NUM_CHILDREN_HEADER = \"Number of Children\";\n+    public static final String DESCRIBED_HEADER = \"Description\";\n+\n+    private static final String[] CSV_HEADERS = new String[] {\n+            OBJ_TYPE_HEADER, PID_HEADER, TITLE_HEADER, PATH_HEADER, LABEL_HEADER,\n+            DEPTH_HEADER, DELETED_HEADER, DATE_ADDED_HEADER, DATE_UPDATED_HEADER,\n+            MIME_TYPE_HEADER, CHECKSUM_HEADER, FILE_SIZE_HEADER, NUM_CHILDREN_HEADER,\n+            DESCRIBED_HEADER};\n+\n+    @Autowired\n+    private ChildrenCountService childrenCountService;\n+\n+    protected SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd kk:mm:ss\");\n+\n+    @RequestMapping(value = \"{pid}\", method = RequestMethod.GET)\n+    public ResponseEntity<Map<String, Object>> export(@PathVariable(\"pid\") String pidString, HttpServletRequest request,\n+                                                      HttpServletResponse response) throws IOException {\n+\n+        Map<String, Object> result = new HashMap<>();\n+        result.put(\"action\", \"exportCsv\");\n+        result.put(\"username\", request.getRemoteUser());\n+\n+        try {\n+            if (pidString.equals(\"collections\")) {\n+                throw new FedoraException(\"Not allowed to download repository root\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ba61d5cd8293cbae406781ea0645d012d2b7f1"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mjc3OTY3OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTowOTo1OVrOHgCvLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo1Mjo0NlrOHgEScg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2MTMyNA==", "bodyText": "After making the suggested change about returning a response at line 108 you shouldn't need the FedoraException catch anymore", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r503361324", "createdAt": "2020-10-12T15:09:59Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvController.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.model.DatastreamType.ORIGINAL_FILE;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.MARKED_FOR_DELETION;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.FedoraException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.util.FacetConstants;\n+import edu.unc.lib.dl.search.solr.util.SearchFieldKeys;\n+import edu.unc.lib.dl.ui.controller.AbstractSolrSearchController;\n+\n+/**\n+ * Controller which generates a CSV listing of a repository object\n+ * and all of its children, recursively depth first.\n+ *\n+ * @author bbpennel\n+ */\n+@Controller\n+@RequestMapping(\"exportTree/csv\")\n+public class ExportCsvController extends AbstractSolrSearchController {\n+    private static final Logger log = LoggerFactory.getLogger(ExportCsvController.class);\n+\n+    public static final String OBJ_TYPE_HEADER = \"Object Type\";\n+    public static final String PID_HEADER = \"PID\";\n+    public static final String TITLE_HEADER = \"Title\";\n+    public static final String PATH_HEADER = \"Path\";\n+    public static final String LABEL_HEADER = \"Label\";\n+    public static final String DEPTH_HEADER = \"Depth\";\n+    public static final String DELETED_HEADER = \"Deleted\";\n+    public static final String DATE_ADDED_HEADER = \"Date Added\";\n+    public static final String DATE_UPDATED_HEADER = \"Date Updated\";\n+    public static final String MIME_TYPE_HEADER = \"MIME Type\";\n+    public static final String CHECKSUM_HEADER = \"Checksum\";\n+    public static final String FILE_SIZE_HEADER = \"File Size (bytes)\";\n+    public static final String NUM_CHILDREN_HEADER = \"Number of Children\";\n+    public static final String DESCRIBED_HEADER = \"Description\";\n+\n+    private static final String[] CSV_HEADERS = new String[] {\n+            OBJ_TYPE_HEADER, PID_HEADER, TITLE_HEADER, PATH_HEADER, LABEL_HEADER,\n+            DEPTH_HEADER, DELETED_HEADER, DATE_ADDED_HEADER, DATE_UPDATED_HEADER,\n+            MIME_TYPE_HEADER, CHECKSUM_HEADER, FILE_SIZE_HEADER, NUM_CHILDREN_HEADER,\n+            DESCRIBED_HEADER};\n+\n+    @Autowired\n+    private ChildrenCountService childrenCountService;\n+\n+    protected SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd kk:mm:ss\");\n+\n+    @RequestMapping(value = \"{pid}\", method = RequestMethod.GET)\n+    public ResponseEntity<Map<String, Object>> export(@PathVariable(\"pid\") String pidString, HttpServletRequest request,\n+                                                      HttpServletResponse response) throws IOException {\n+\n+        Map<String, Object> result = new HashMap<>();\n+        result.put(\"action\", \"exportCsv\");\n+        result.put(\"username\", request.getRemoteUser());\n+\n+        try {\n+            if (pidString.equals(\"collections\")) {\n+                throw new FedoraException(\"Not allowed to download repository root\");\n+            }\n+\n+            PID pid = PIDs.get(pidString);\n+\n+            SearchRequest searchRequest = generateSearchRequest(request, searchStateFactory.createSearchState());\n+            searchRequest.setRootPid(pid);\n+            searchRequest.setApplyCutoffs(false);\n+\n+            SearchState searchState = searchRequest.getSearchState();\n+            searchState.setResultFields(Arrays.asList(SearchFieldKeys.ID.name(), SearchFieldKeys.TITLE.name(),\n+                    SearchFieldKeys.RESOURCE_TYPE.name(), SearchFieldKeys.ANCESTOR_IDS.name(),\n+                    SearchFieldKeys.STATUS.name(), SearchFieldKeys.DATASTREAM.name(),\n+                    SearchFieldKeys.ANCESTOR_PATH.name(), SearchFieldKeys.CONTENT_MODEL.name(),\n+                    SearchFieldKeys.DATE_ADDED.name(), SearchFieldKeys.DATE_UPDATED.name(),\n+                    SearchFieldKeys.LABEL.name(), SearchFieldKeys.CONTENT_STATUS.name()));\n+            searchState.setSortType(\"export\");\n+            searchState.setRowsPerPage(searchSettings.maxPerPage);\n+\n+            BriefObjectMetadata container = queryLayer.addSelectedContainer(pid, searchState, false,\n+                    searchRequest.getAccessGroups());\n+            SearchResultResponse resultResponse = queryLayer.getSearchResults(searchRequest);\n+\n+            List<BriefObjectMetadata> objects = resultResponse.getResultList();\n+            objects.add(0, container);\n+\n+            childrenCountService.addChildrenCounts(objects, searchRequest.getAccessGroups());\n+\n+            String filename = pid.getId().replace(\":\", \"_\") + \".csv\";\n+            response.addHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + filename + \"\\\"\");\n+            response.addHeader(\"Content-Type\", \"text/csv\");\n+\n+            try (ServletOutputStream out = response.getOutputStream()) {\n+                Writer writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n+\n+                try (CSVPrinter printer = getPrinter(writer)) {\n+                    for (BriefObjectMetadata object : objects) {\n+                        printObject(printer, object);\n+                    }\n+                }\n+            }\n+        } catch (FedoraException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ba61d5cd8293cbae406781ea0645d012d2b7f1"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4NjczOA==", "bodyText": "One other suggestion generally with errors, if the issue is a client error we probably don't need to dump a stack trace at error level. So for invalid ids, access control errors, resources not found, we would probably either want to log nothing or do it at debug level.", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r503386738", "createdAt": "2020-10-12T15:52:46Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvController.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.model.DatastreamType.ORIGINAL_FILE;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.MARKED_FOR_DELETION;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.FedoraException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.util.FacetConstants;\n+import edu.unc.lib.dl.search.solr.util.SearchFieldKeys;\n+import edu.unc.lib.dl.ui.controller.AbstractSolrSearchController;\n+\n+/**\n+ * Controller which generates a CSV listing of a repository object\n+ * and all of its children, recursively depth first.\n+ *\n+ * @author bbpennel\n+ */\n+@Controller\n+@RequestMapping(\"exportTree/csv\")\n+public class ExportCsvController extends AbstractSolrSearchController {\n+    private static final Logger log = LoggerFactory.getLogger(ExportCsvController.class);\n+\n+    public static final String OBJ_TYPE_HEADER = \"Object Type\";\n+    public static final String PID_HEADER = \"PID\";\n+    public static final String TITLE_HEADER = \"Title\";\n+    public static final String PATH_HEADER = \"Path\";\n+    public static final String LABEL_HEADER = \"Label\";\n+    public static final String DEPTH_HEADER = \"Depth\";\n+    public static final String DELETED_HEADER = \"Deleted\";\n+    public static final String DATE_ADDED_HEADER = \"Date Added\";\n+    public static final String DATE_UPDATED_HEADER = \"Date Updated\";\n+    public static final String MIME_TYPE_HEADER = \"MIME Type\";\n+    public static final String CHECKSUM_HEADER = \"Checksum\";\n+    public static final String FILE_SIZE_HEADER = \"File Size (bytes)\";\n+    public static final String NUM_CHILDREN_HEADER = \"Number of Children\";\n+    public static final String DESCRIBED_HEADER = \"Description\";\n+\n+    private static final String[] CSV_HEADERS = new String[] {\n+            OBJ_TYPE_HEADER, PID_HEADER, TITLE_HEADER, PATH_HEADER, LABEL_HEADER,\n+            DEPTH_HEADER, DELETED_HEADER, DATE_ADDED_HEADER, DATE_UPDATED_HEADER,\n+            MIME_TYPE_HEADER, CHECKSUM_HEADER, FILE_SIZE_HEADER, NUM_CHILDREN_HEADER,\n+            DESCRIBED_HEADER};\n+\n+    @Autowired\n+    private ChildrenCountService childrenCountService;\n+\n+    protected SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd kk:mm:ss\");\n+\n+    @RequestMapping(value = \"{pid}\", method = RequestMethod.GET)\n+    public ResponseEntity<Map<String, Object>> export(@PathVariable(\"pid\") String pidString, HttpServletRequest request,\n+                                                      HttpServletResponse response) throws IOException {\n+\n+        Map<String, Object> result = new HashMap<>();\n+        result.put(\"action\", \"exportCsv\");\n+        result.put(\"username\", request.getRemoteUser());\n+\n+        try {\n+            if (pidString.equals(\"collections\")) {\n+                throw new FedoraException(\"Not allowed to download repository root\");\n+            }\n+\n+            PID pid = PIDs.get(pidString);\n+\n+            SearchRequest searchRequest = generateSearchRequest(request, searchStateFactory.createSearchState());\n+            searchRequest.setRootPid(pid);\n+            searchRequest.setApplyCutoffs(false);\n+\n+            SearchState searchState = searchRequest.getSearchState();\n+            searchState.setResultFields(Arrays.asList(SearchFieldKeys.ID.name(), SearchFieldKeys.TITLE.name(),\n+                    SearchFieldKeys.RESOURCE_TYPE.name(), SearchFieldKeys.ANCESTOR_IDS.name(),\n+                    SearchFieldKeys.STATUS.name(), SearchFieldKeys.DATASTREAM.name(),\n+                    SearchFieldKeys.ANCESTOR_PATH.name(), SearchFieldKeys.CONTENT_MODEL.name(),\n+                    SearchFieldKeys.DATE_ADDED.name(), SearchFieldKeys.DATE_UPDATED.name(),\n+                    SearchFieldKeys.LABEL.name(), SearchFieldKeys.CONTENT_STATUS.name()));\n+            searchState.setSortType(\"export\");\n+            searchState.setRowsPerPage(searchSettings.maxPerPage);\n+\n+            BriefObjectMetadata container = queryLayer.addSelectedContainer(pid, searchState, false,\n+                    searchRequest.getAccessGroups());\n+            SearchResultResponse resultResponse = queryLayer.getSearchResults(searchRequest);\n+\n+            List<BriefObjectMetadata> objects = resultResponse.getResultList();\n+            objects.add(0, container);\n+\n+            childrenCountService.addChildrenCounts(objects, searchRequest.getAccessGroups());\n+\n+            String filename = pid.getId().replace(\":\", \"_\") + \".csv\";\n+            response.addHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + filename + \"\\\"\");\n+            response.addHeader(\"Content-Type\", \"text/csv\");\n+\n+            try (ServletOutputStream out = response.getOutputStream()) {\n+                Writer writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n+\n+                try (CSVPrinter printer = getPrinter(writer)) {\n+                    for (BriefObjectMetadata object : objects) {\n+                        printObject(printer, object);\n+                    }\n+                }\n+            }\n+        } catch (FedoraException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2MTMyNA=="}, "originalCommit": {"oid": "02ba61d5cd8293cbae406781ea0645d012d2b7f1"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mjg0NDQ0OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNToyNjo0NVrOHgDW9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNToyNjo0NVrOHgDW9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM3MTUxMQ==", "bodyText": "If the id 1234 is provided, I think that should produce a 404. I'm inclined to update the PIDs class to throw an informative exception (maybe NotFoundException). I can make that update", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r503371511", "createdAt": "2020-10-12T15:26:45Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvController.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.model.DatastreamType.ORIGINAL_FILE;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.MARKED_FOR_DELETION;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.FedoraException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.util.FacetConstants;\n+import edu.unc.lib.dl.search.solr.util.SearchFieldKeys;\n+import edu.unc.lib.dl.ui.controller.AbstractSolrSearchController;\n+\n+/**\n+ * Controller which generates a CSV listing of a repository object\n+ * and all of its children, recursively depth first.\n+ *\n+ * @author bbpennel\n+ */\n+@Controller\n+@RequestMapping(\"exportTree/csv\")\n+public class ExportCsvController extends AbstractSolrSearchController {\n+    private static final Logger log = LoggerFactory.getLogger(ExportCsvController.class);\n+\n+    public static final String OBJ_TYPE_HEADER = \"Object Type\";\n+    public static final String PID_HEADER = \"PID\";\n+    public static final String TITLE_HEADER = \"Title\";\n+    public static final String PATH_HEADER = \"Path\";\n+    public static final String LABEL_HEADER = \"Label\";\n+    public static final String DEPTH_HEADER = \"Depth\";\n+    public static final String DELETED_HEADER = \"Deleted\";\n+    public static final String DATE_ADDED_HEADER = \"Date Added\";\n+    public static final String DATE_UPDATED_HEADER = \"Date Updated\";\n+    public static final String MIME_TYPE_HEADER = \"MIME Type\";\n+    public static final String CHECKSUM_HEADER = \"Checksum\";\n+    public static final String FILE_SIZE_HEADER = \"File Size (bytes)\";\n+    public static final String NUM_CHILDREN_HEADER = \"Number of Children\";\n+    public static final String DESCRIBED_HEADER = \"Description\";\n+\n+    private static final String[] CSV_HEADERS = new String[] {\n+            OBJ_TYPE_HEADER, PID_HEADER, TITLE_HEADER, PATH_HEADER, LABEL_HEADER,\n+            DEPTH_HEADER, DELETED_HEADER, DATE_ADDED_HEADER, DATE_UPDATED_HEADER,\n+            MIME_TYPE_HEADER, CHECKSUM_HEADER, FILE_SIZE_HEADER, NUM_CHILDREN_HEADER,\n+            DESCRIBED_HEADER};\n+\n+    @Autowired\n+    private ChildrenCountService childrenCountService;\n+\n+    protected SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd kk:mm:ss\");\n+\n+    @RequestMapping(value = \"{pid}\", method = RequestMethod.GET)\n+    public ResponseEntity<Map<String, Object>> export(@PathVariable(\"pid\") String pidString, HttpServletRequest request,\n+                                                      HttpServletResponse response) throws IOException {\n+\n+        Map<String, Object> result = new HashMap<>();\n+        result.put(\"action\", \"exportCsv\");\n+        result.put(\"username\", request.getRemoteUser());\n+\n+        try {\n+            if (pidString.equals(\"collections\")) {\n+                throw new FedoraException(\"Not allowed to download repository root\");\n+            }\n+\n+            PID pid = PIDs.get(pidString);\n+\n+            SearchRequest searchRequest = generateSearchRequest(request, searchStateFactory.createSearchState());\n+            searchRequest.setRootPid(pid);\n+            searchRequest.setApplyCutoffs(false);\n+\n+            SearchState searchState = searchRequest.getSearchState();\n+            searchState.setResultFields(Arrays.asList(SearchFieldKeys.ID.name(), SearchFieldKeys.TITLE.name(),\n+                    SearchFieldKeys.RESOURCE_TYPE.name(), SearchFieldKeys.ANCESTOR_IDS.name(),\n+                    SearchFieldKeys.STATUS.name(), SearchFieldKeys.DATASTREAM.name(),\n+                    SearchFieldKeys.ANCESTOR_PATH.name(), SearchFieldKeys.CONTENT_MODEL.name(),\n+                    SearchFieldKeys.DATE_ADDED.name(), SearchFieldKeys.DATE_UPDATED.name(),\n+                    SearchFieldKeys.LABEL.name(), SearchFieldKeys.CONTENT_STATUS.name()));\n+            searchState.setSortType(\"export\");\n+            searchState.setRowsPerPage(searchSettings.maxPerPage);\n+\n+            BriefObjectMetadata container = queryLayer.addSelectedContainer(pid, searchState, false,\n+                    searchRequest.getAccessGroups());\n+            SearchResultResponse resultResponse = queryLayer.getSearchResults(searchRequest);\n+\n+            List<BriefObjectMetadata> objects = resultResponse.getResultList();\n+            objects.add(0, container);\n+\n+            childrenCountService.addChildrenCounts(objects, searchRequest.getAccessGroups());\n+\n+            String filename = pid.getId().replace(\":\", \"_\") + \".csv\";\n+            response.addHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + filename + \"\\\"\");\n+            response.addHeader(\"Content-Type\", \"text/csv\");\n+\n+            try (ServletOutputStream out = response.getOutputStream()) {\n+                Writer writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n+\n+                try (CSVPrinter printer = getPrinter(writer)) {\n+                    for (BriefObjectMetadata object : objects) {\n+                        printObject(printer, object);\n+                    }\n+                }\n+            }\n+        } catch (FedoraException e) {\n+            log.error(\"Error exporting CSV for {}. Not allowed to export collection root\", pidString);\n+            result.put(\"error\", e.getMessage());\n+            return new ResponseEntity<>(result, HttpStatus.FORBIDDEN);\n+        } catch (NullPointerException e) {\n+            log.error(\"Error exporting CSV for {}. Unable to find PID, {}\", pidString, e.getMessage());\n+            result.put(\"error\", e.getMessage());\n+            return new ResponseEntity<>(result, HttpStatus.NOT_FOUND);\n+        } catch (StringIndexOutOfBoundsException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ba61d5cd8293cbae406781ea0645d012d2b7f1"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mjg2OTI1OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTozMjo1NFrOHgDlwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTozMjo1NFrOHgDlwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM3NTI5Nw==", "bodyText": "My understanding is this is to catch if container comes back as null, since that throws an NPE when calculating child size? It would be better/more accurate to do a null check right after assigning container a value and return a response with a 404 immediately.", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r503375297", "createdAt": "2020-10-12T15:32:54Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvController.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.model.DatastreamType.ORIGINAL_FILE;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.MARKED_FOR_DELETION;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.FedoraException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.util.FacetConstants;\n+import edu.unc.lib.dl.search.solr.util.SearchFieldKeys;\n+import edu.unc.lib.dl.ui.controller.AbstractSolrSearchController;\n+\n+/**\n+ * Controller which generates a CSV listing of a repository object\n+ * and all of its children, recursively depth first.\n+ *\n+ * @author bbpennel\n+ */\n+@Controller\n+@RequestMapping(\"exportTree/csv\")\n+public class ExportCsvController extends AbstractSolrSearchController {\n+    private static final Logger log = LoggerFactory.getLogger(ExportCsvController.class);\n+\n+    public static final String OBJ_TYPE_HEADER = \"Object Type\";\n+    public static final String PID_HEADER = \"PID\";\n+    public static final String TITLE_HEADER = \"Title\";\n+    public static final String PATH_HEADER = \"Path\";\n+    public static final String LABEL_HEADER = \"Label\";\n+    public static final String DEPTH_HEADER = \"Depth\";\n+    public static final String DELETED_HEADER = \"Deleted\";\n+    public static final String DATE_ADDED_HEADER = \"Date Added\";\n+    public static final String DATE_UPDATED_HEADER = \"Date Updated\";\n+    public static final String MIME_TYPE_HEADER = \"MIME Type\";\n+    public static final String CHECKSUM_HEADER = \"Checksum\";\n+    public static final String FILE_SIZE_HEADER = \"File Size (bytes)\";\n+    public static final String NUM_CHILDREN_HEADER = \"Number of Children\";\n+    public static final String DESCRIBED_HEADER = \"Description\";\n+\n+    private static final String[] CSV_HEADERS = new String[] {\n+            OBJ_TYPE_HEADER, PID_HEADER, TITLE_HEADER, PATH_HEADER, LABEL_HEADER,\n+            DEPTH_HEADER, DELETED_HEADER, DATE_ADDED_HEADER, DATE_UPDATED_HEADER,\n+            MIME_TYPE_HEADER, CHECKSUM_HEADER, FILE_SIZE_HEADER, NUM_CHILDREN_HEADER,\n+            DESCRIBED_HEADER};\n+\n+    @Autowired\n+    private ChildrenCountService childrenCountService;\n+\n+    protected SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd kk:mm:ss\");\n+\n+    @RequestMapping(value = \"{pid}\", method = RequestMethod.GET)\n+    public ResponseEntity<Map<String, Object>> export(@PathVariable(\"pid\") String pidString, HttpServletRequest request,\n+                                                      HttpServletResponse response) throws IOException {\n+\n+        Map<String, Object> result = new HashMap<>();\n+        result.put(\"action\", \"exportCsv\");\n+        result.put(\"username\", request.getRemoteUser());\n+\n+        try {\n+            if (pidString.equals(\"collections\")) {\n+                throw new FedoraException(\"Not allowed to download repository root\");\n+            }\n+\n+            PID pid = PIDs.get(pidString);\n+\n+            SearchRequest searchRequest = generateSearchRequest(request, searchStateFactory.createSearchState());\n+            searchRequest.setRootPid(pid);\n+            searchRequest.setApplyCutoffs(false);\n+\n+            SearchState searchState = searchRequest.getSearchState();\n+            searchState.setResultFields(Arrays.asList(SearchFieldKeys.ID.name(), SearchFieldKeys.TITLE.name(),\n+                    SearchFieldKeys.RESOURCE_TYPE.name(), SearchFieldKeys.ANCESTOR_IDS.name(),\n+                    SearchFieldKeys.STATUS.name(), SearchFieldKeys.DATASTREAM.name(),\n+                    SearchFieldKeys.ANCESTOR_PATH.name(), SearchFieldKeys.CONTENT_MODEL.name(),\n+                    SearchFieldKeys.DATE_ADDED.name(), SearchFieldKeys.DATE_UPDATED.name(),\n+                    SearchFieldKeys.LABEL.name(), SearchFieldKeys.CONTENT_STATUS.name()));\n+            searchState.setSortType(\"export\");\n+            searchState.setRowsPerPage(searchSettings.maxPerPage);\n+\n+            BriefObjectMetadata container = queryLayer.addSelectedContainer(pid, searchState, false,\n+                    searchRequest.getAccessGroups());\n+            SearchResultResponse resultResponse = queryLayer.getSearchResults(searchRequest);\n+\n+            List<BriefObjectMetadata> objects = resultResponse.getResultList();\n+            objects.add(0, container);\n+\n+            childrenCountService.addChildrenCounts(objects, searchRequest.getAccessGroups());\n+\n+            String filename = pid.getId().replace(\":\", \"_\") + \".csv\";\n+            response.addHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + filename + \"\\\"\");\n+            response.addHeader(\"Content-Type\", \"text/csv\");\n+\n+            try (ServletOutputStream out = response.getOutputStream()) {\n+                Writer writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n+\n+                try (CSVPrinter printer = getPrinter(writer)) {\n+                    for (BriefObjectMetadata object : objects) {\n+                        printObject(printer, object);\n+                    }\n+                }\n+            }\n+        } catch (FedoraException e) {\n+            log.error(\"Error exporting CSV for {}. Not allowed to export collection root\", pidString);\n+            result.put(\"error\", e.getMessage());\n+            return new ResponseEntity<>(result, HttpStatus.FORBIDDEN);\n+        } catch (NullPointerException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ba61d5cd8293cbae406781ea0645d012d2b7f1"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mjg5ODk0OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo0MDozN1rOHgD3Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo0MDozN1rOHgD3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM3OTc2Mw==", "bodyText": "Could you add in an access control check before this step to verify that the user has viewHidden to the requested resource before pulling back solr results? As a side note, I can't remember if checking that will throw a NotFoundException if it can't find the resource.", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r503379763", "createdAt": "2020-10-12T15:40:37Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvController.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.model.DatastreamType.ORIGINAL_FILE;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.MARKED_FOR_DELETION;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.FedoraException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.util.FacetConstants;\n+import edu.unc.lib.dl.search.solr.util.SearchFieldKeys;\n+import edu.unc.lib.dl.ui.controller.AbstractSolrSearchController;\n+\n+/**\n+ * Controller which generates a CSV listing of a repository object\n+ * and all of its children, recursively depth first.\n+ *\n+ * @author bbpennel\n+ */\n+@Controller\n+@RequestMapping(\"exportTree/csv\")\n+public class ExportCsvController extends AbstractSolrSearchController {\n+    private static final Logger log = LoggerFactory.getLogger(ExportCsvController.class);\n+\n+    public static final String OBJ_TYPE_HEADER = \"Object Type\";\n+    public static final String PID_HEADER = \"PID\";\n+    public static final String TITLE_HEADER = \"Title\";\n+    public static final String PATH_HEADER = \"Path\";\n+    public static final String LABEL_HEADER = \"Label\";\n+    public static final String DEPTH_HEADER = \"Depth\";\n+    public static final String DELETED_HEADER = \"Deleted\";\n+    public static final String DATE_ADDED_HEADER = \"Date Added\";\n+    public static final String DATE_UPDATED_HEADER = \"Date Updated\";\n+    public static final String MIME_TYPE_HEADER = \"MIME Type\";\n+    public static final String CHECKSUM_HEADER = \"Checksum\";\n+    public static final String FILE_SIZE_HEADER = \"File Size (bytes)\";\n+    public static final String NUM_CHILDREN_HEADER = \"Number of Children\";\n+    public static final String DESCRIBED_HEADER = \"Description\";\n+\n+    private static final String[] CSV_HEADERS = new String[] {\n+            OBJ_TYPE_HEADER, PID_HEADER, TITLE_HEADER, PATH_HEADER, LABEL_HEADER,\n+            DEPTH_HEADER, DELETED_HEADER, DATE_ADDED_HEADER, DATE_UPDATED_HEADER,\n+            MIME_TYPE_HEADER, CHECKSUM_HEADER, FILE_SIZE_HEADER, NUM_CHILDREN_HEADER,\n+            DESCRIBED_HEADER};\n+\n+    @Autowired\n+    private ChildrenCountService childrenCountService;\n+\n+    protected SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd kk:mm:ss\");\n+\n+    @RequestMapping(value = \"{pid}\", method = RequestMethod.GET)\n+    public ResponseEntity<Map<String, Object>> export(@PathVariable(\"pid\") String pidString, HttpServletRequest request,\n+                                                      HttpServletResponse response) throws IOException {\n+\n+        Map<String, Object> result = new HashMap<>();\n+        result.put(\"action\", \"exportCsv\");\n+        result.put(\"username\", request.getRemoteUser());\n+\n+        try {\n+            if (pidString.equals(\"collections\")) {\n+                throw new FedoraException(\"Not allowed to download repository root\");\n+            }\n+\n+            PID pid = PIDs.get(pidString);\n+\n+            SearchRequest searchRequest = generateSearchRequest(request, searchStateFactory.createSearchState());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ba61d5cd8293cbae406781ea0645d012d2b7f1"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjkxOTMwOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo0NjoxMVrOHgEDlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo0NjoxMVrOHgEDlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4MjkzNA==", "bodyText": "With this catch all here you probably don't need to have the controller method throw IOException", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r503382934", "createdAt": "2020-10-12T15:46:11Z", "author": {"login": "bbpennel"}, "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvController.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.model.DatastreamType.ORIGINAL_FILE;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.MARKED_FOR_DELETION;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.FedoraException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.search.solr.model.BriefObjectMetadata;\n+import edu.unc.lib.dl.search.solr.model.Datastream;\n+import edu.unc.lib.dl.search.solr.model.SearchRequest;\n+import edu.unc.lib.dl.search.solr.model.SearchResultResponse;\n+import edu.unc.lib.dl.search.solr.model.SearchState;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.util.FacetConstants;\n+import edu.unc.lib.dl.search.solr.util.SearchFieldKeys;\n+import edu.unc.lib.dl.ui.controller.AbstractSolrSearchController;\n+\n+/**\n+ * Controller which generates a CSV listing of a repository object\n+ * and all of its children, recursively depth first.\n+ *\n+ * @author bbpennel\n+ */\n+@Controller\n+@RequestMapping(\"exportTree/csv\")\n+public class ExportCsvController extends AbstractSolrSearchController {\n+    private static final Logger log = LoggerFactory.getLogger(ExportCsvController.class);\n+\n+    public static final String OBJ_TYPE_HEADER = \"Object Type\";\n+    public static final String PID_HEADER = \"PID\";\n+    public static final String TITLE_HEADER = \"Title\";\n+    public static final String PATH_HEADER = \"Path\";\n+    public static final String LABEL_HEADER = \"Label\";\n+    public static final String DEPTH_HEADER = \"Depth\";\n+    public static final String DELETED_HEADER = \"Deleted\";\n+    public static final String DATE_ADDED_HEADER = \"Date Added\";\n+    public static final String DATE_UPDATED_HEADER = \"Date Updated\";\n+    public static final String MIME_TYPE_HEADER = \"MIME Type\";\n+    public static final String CHECKSUM_HEADER = \"Checksum\";\n+    public static final String FILE_SIZE_HEADER = \"File Size (bytes)\";\n+    public static final String NUM_CHILDREN_HEADER = \"Number of Children\";\n+    public static final String DESCRIBED_HEADER = \"Description\";\n+\n+    private static final String[] CSV_HEADERS = new String[] {\n+            OBJ_TYPE_HEADER, PID_HEADER, TITLE_HEADER, PATH_HEADER, LABEL_HEADER,\n+            DEPTH_HEADER, DELETED_HEADER, DATE_ADDED_HEADER, DATE_UPDATED_HEADER,\n+            MIME_TYPE_HEADER, CHECKSUM_HEADER, FILE_SIZE_HEADER, NUM_CHILDREN_HEADER,\n+            DESCRIBED_HEADER};\n+\n+    @Autowired\n+    private ChildrenCountService childrenCountService;\n+\n+    protected SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd kk:mm:ss\");\n+\n+    @RequestMapping(value = \"{pid}\", method = RequestMethod.GET)\n+    public ResponseEntity<Map<String, Object>> export(@PathVariable(\"pid\") String pidString, HttpServletRequest request,\n+                                                      HttpServletResponse response) throws IOException {\n+\n+        Map<String, Object> result = new HashMap<>();\n+        result.put(\"action\", \"exportCsv\");\n+        result.put(\"username\", request.getRemoteUser());\n+\n+        try {\n+            if (pidString.equals(\"collections\")) {\n+                throw new FedoraException(\"Not allowed to download repository root\");\n+            }\n+\n+            PID pid = PIDs.get(pidString);\n+\n+            SearchRequest searchRequest = generateSearchRequest(request, searchStateFactory.createSearchState());\n+            searchRequest.setRootPid(pid);\n+            searchRequest.setApplyCutoffs(false);\n+\n+            SearchState searchState = searchRequest.getSearchState();\n+            searchState.setResultFields(Arrays.asList(SearchFieldKeys.ID.name(), SearchFieldKeys.TITLE.name(),\n+                    SearchFieldKeys.RESOURCE_TYPE.name(), SearchFieldKeys.ANCESTOR_IDS.name(),\n+                    SearchFieldKeys.STATUS.name(), SearchFieldKeys.DATASTREAM.name(),\n+                    SearchFieldKeys.ANCESTOR_PATH.name(), SearchFieldKeys.CONTENT_MODEL.name(),\n+                    SearchFieldKeys.DATE_ADDED.name(), SearchFieldKeys.DATE_UPDATED.name(),\n+                    SearchFieldKeys.LABEL.name(), SearchFieldKeys.CONTENT_STATUS.name()));\n+            searchState.setSortType(\"export\");\n+            searchState.setRowsPerPage(searchSettings.maxPerPage);\n+\n+            BriefObjectMetadata container = queryLayer.addSelectedContainer(pid, searchState, false,\n+                    searchRequest.getAccessGroups());\n+            SearchResultResponse resultResponse = queryLayer.getSearchResults(searchRequest);\n+\n+            List<BriefObjectMetadata> objects = resultResponse.getResultList();\n+            objects.add(0, container);\n+\n+            childrenCountService.addChildrenCounts(objects, searchRequest.getAccessGroups());\n+\n+            String filename = pid.getId().replace(\":\", \"_\") + \".csv\";\n+            response.addHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + filename + \"\\\"\");\n+            response.addHeader(\"Content-Type\", \"text/csv\");\n+\n+            try (ServletOutputStream out = response.getOutputStream()) {\n+                Writer writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n+\n+                try (CSVPrinter printer = getPrinter(writer)) {\n+                    for (BriefObjectMetadata object : objects) {\n+                        printObject(printer, object);\n+                    }\n+                }\n+            }\n+        } catch (FedoraException e) {\n+            log.error(\"Error exporting CSV for {}. Not allowed to export collection root\", pidString);\n+            result.put(\"error\", e.getMessage());\n+            return new ResponseEntity<>(result, HttpStatus.FORBIDDEN);\n+        } catch (NullPointerException e) {\n+            log.error(\"Error exporting CSV for {}. Unable to find PID, {}\", pidString, e.getMessage());\n+            result.put(\"error\", e.getMessage());\n+            return new ResponseEntity<>(result, HttpStatus.NOT_FOUND);\n+        } catch (StringIndexOutOfBoundsException e) {\n+            log.error(\"Error exporting CSV for {}. Invalid PID, {}\", pidString, e.getMessage());\n+            result.put(\"error\", e.getMessage());\n+            return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ba61d5cd8293cbae406781ea0645d012d2b7f1"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjkyNjk3OnYy", "diffSide": "RIGHT", "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo0ODoxOVrOHgEIJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODo1Mjo1M1rOHgJuiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4NDEwMQ==", "bodyText": "When I run these tests I get the following error. I think we just need to add a missing property services.indexing.collectionFilters, can probably be blank:\n8262 ERROR [main] e.u.l.d.d.i.s.f.SetCollectionSupplementalInformationFilter - Failed to load collection filters properties file ${services.indexing.collectionFilters}\njava.io.FileNotFoundException: ${services.indexing.collectionFilters} (No such file or directory)\n\tat java.io.FileInputStream.open0(Native Method)\n\tat java.io.FileInputStream.open(FileInputStream.java:195)\n\tat java.io.FileInputStream.<init>(FileInputStream.java:138)\n\tat java.io.FileInputStream.<init>(FileInputStream.java:93)\n\tat edu.unc.lib.dl.data.ingest.solr.filter.SetCollectionSupplementalInformationFilter.setCollectionFilters(SetCollectionSupplementalInformationFilter.java:64)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler.setValue(BeanWrapperImpl.java:332)\n\tat org.springframework.beans.AbstractNestablePropertyAccessor.processLocalProperty(AbstractNestablePropertyAccessor.java:458)\n\tat org.springframework.beans.AbstractNestablePropertyAccessor.setPropertyValue(AbstractNestablePropertyAccessor.java:278)\n\tat org.springframework.beans.AbstractNestablePropertyAccessor.setPropertyValue(AbstractNestablePropertyAccessor.java:266)\n\tat org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:97)\n\tat org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:77)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1732)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1444)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$41/0000000000000000.getObject(Unknown Source)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:330)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:427)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:173)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1699)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1444)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$41/0000000000000000.getObject(Unknown Source)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879)\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)\n\tat org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:129)\n\tat org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:61)\n\tat org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:275)\n\tat org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:243)\n\tat org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)\n\tat org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)\n\tat org.springframework.test.context.MergedContextConfiguration.getParentApplicationContext(MergedContextConfiguration.java:399)\n\tat org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:119)\n\tat org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:61)\n\tat org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:275)\n\tat org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:243)\n\tat org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)\n\tat org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)\n\tat org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)\n\tat org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)\n\tat org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)\n\tat org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)\n\tat org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:542)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:770)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:464)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r503384101", "createdAt": "2020-10-12T15:48:19Z", "author": {"login": "bbpennel"}, "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "diffHunk": "@@ -0,0 +1,482 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.acl.util.AccessPrincipalConstants.AUTHENTICATED_PRINC;\n+import static edu.unc.lib.dl.acl.util.GroupsThreadStore.getAgentPrincipals;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.getContentRootPid;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.CONTENT_DESCRIBED;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.CONTENT_NOT_DESCRIBED;\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.File;\n+import java.io.StringReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.annotation.Resource;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVRecord;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.DocumentIndexingPackageFactory;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.SolrUpdateDriver;\n+import edu.unc.lib.dl.data.ingest.solr.test.RepositoryObjectSolrIndexer;\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.FileObject;\n+import edu.unc.lib.dl.fcrepo4.FolderObject;\n+import edu.unc.lib.dl.fcrepo4.WorkObject;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryInitializer;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.services.delete.MarkForDeletionJob;\n+import edu.unc.lib.dl.persist.services.edit.UpdateDescriptionService;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.service.SolrSearchService;\n+import edu.unc.lib.dl.sparql.FedoraSparqlUpdateService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.util.ResourceType;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/solr-indexing-context.xml\"),\n+        @ContextConfiguration(\"/export-csv-it-servlet.xml\")\n+})\n+public class ExportCsvIT extends AbstractAPIIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ba61d5cd8293cbae406781ea0645d012d2b7f1"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MzI1Nw==", "bodyText": "Hmm, strange. There is a setting for services.indexing.collectionFilters and all the tests pass for me.", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r503463257", "createdAt": "2020-10-12T18:23:12Z", "author": {"login": "lfarrell"}, "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "diffHunk": "@@ -0,0 +1,482 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.acl.util.AccessPrincipalConstants.AUTHENTICATED_PRINC;\n+import static edu.unc.lib.dl.acl.util.GroupsThreadStore.getAgentPrincipals;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.getContentRootPid;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.CONTENT_DESCRIBED;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.CONTENT_NOT_DESCRIBED;\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.File;\n+import java.io.StringReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.annotation.Resource;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVRecord;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.DocumentIndexingPackageFactory;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.SolrUpdateDriver;\n+import edu.unc.lib.dl.data.ingest.solr.test.RepositoryObjectSolrIndexer;\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.FileObject;\n+import edu.unc.lib.dl.fcrepo4.FolderObject;\n+import edu.unc.lib.dl.fcrepo4.WorkObject;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryInitializer;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.services.delete.MarkForDeletionJob;\n+import edu.unc.lib.dl.persist.services.edit.UpdateDescriptionService;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.service.SolrSearchService;\n+import edu.unc.lib.dl.sparql.FedoraSparqlUpdateService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.util.ResourceType;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/solr-indexing-context.xml\"),\n+        @ContextConfiguration(\"/export-csv-it-servlet.xml\")\n+})\n+public class ExportCsvIT extends AbstractAPIIT {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4NDEwMQ=="}, "originalCommit": {"oid": "02ba61d5cd8293cbae406781ea0645d012d2b7f1"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NTg0OA==", "bodyText": "yes, they passed for me too, but that error was in the logs/console", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r503475848", "createdAt": "2020-10-12T18:52:53Z", "author": {"login": "bbpennel"}, "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "diffHunk": "@@ -0,0 +1,482 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.acl.util.AccessPrincipalConstants.AUTHENTICATED_PRINC;\n+import static edu.unc.lib.dl.acl.util.GroupsThreadStore.getAgentPrincipals;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.getContentRootPid;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.CONTENT_DESCRIBED;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.CONTENT_NOT_DESCRIBED;\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.File;\n+import java.io.StringReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.annotation.Resource;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVRecord;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.DocumentIndexingPackageFactory;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.SolrUpdateDriver;\n+import edu.unc.lib.dl.data.ingest.solr.test.RepositoryObjectSolrIndexer;\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.FileObject;\n+import edu.unc.lib.dl.fcrepo4.FolderObject;\n+import edu.unc.lib.dl.fcrepo4.WorkObject;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryInitializer;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.services.delete.MarkForDeletionJob;\n+import edu.unc.lib.dl.persist.services.edit.UpdateDescriptionService;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.service.SolrSearchService;\n+import edu.unc.lib.dl.sparql.FedoraSparqlUpdateService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.util.ResourceType;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/solr-indexing-context.xml\"),\n+        @ContextConfiguration(\"/export-csv-it-servlet.xml\")\n+})\n+public class ExportCsvIT extends AbstractAPIIT {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4NDEwMQ=="}, "originalCommit": {"oid": "02ba61d5cd8293cbae406781ea0645d012d2b7f1"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mjk0NzY3OnYy", "diffSide": "RIGHT", "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo1MzozNVrOHgEUag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo1MzozNVrOHgEUag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4NzI0Mg==", "bodyText": "Please remove (sorry I probably left that in)", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r503387242", "createdAt": "2020-10-12T15:53:35Z", "author": {"login": "bbpennel"}, "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "diffHunk": "@@ -0,0 +1,482 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.acl.util.AccessPrincipalConstants.AUTHENTICATED_PRINC;\n+import static edu.unc.lib.dl.acl.util.GroupsThreadStore.getAgentPrincipals;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.getContentRootPid;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.CONTENT_DESCRIBED;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.CONTENT_NOT_DESCRIBED;\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.File;\n+import java.io.StringReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.annotation.Resource;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVRecord;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.DocumentIndexingPackageFactory;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.SolrUpdateDriver;\n+import edu.unc.lib.dl.data.ingest.solr.test.RepositoryObjectSolrIndexer;\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.FileObject;\n+import edu.unc.lib.dl.fcrepo4.FolderObject;\n+import edu.unc.lib.dl.fcrepo4.WorkObject;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryInitializer;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.services.delete.MarkForDeletionJob;\n+import edu.unc.lib.dl.persist.services.edit.UpdateDescriptionService;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.service.SolrSearchService;\n+import edu.unc.lib.dl.sparql.FedoraSparqlUpdateService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.util.ResourceType;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/solr-indexing-context.xml\"),\n+        @ContextConfiguration(\"/export-csv-it-servlet.xml\")\n+})\n+public class ExportCsvIT extends AbstractAPIIT {\n+    private static final String COLLECTION_PATH =\n+            \"/Content Collections Root/Admin unit/Collection\";\n+    private static final String FOLDER_PATH =\n+            \"/Content Collections Root/Admin unit/Collection/Folder\";\n+    private static final Path MODS_PATH_1 = Paths.get(\"src/test/resources/mods/valid-mods.xml\");\n+    private static final Path MODS_PATH_2 = Paths.get(\"src/test/resources/mods/work-mods.xml\");\n+\n+    @Autowired\n+    protected String baseAddress;\n+    @Autowired\n+    protected File solrDataDir;\n+    @Autowired\n+    protected EmbeddedSolrServer server;\n+    @Autowired\n+    protected ChildrenCountService childrenCountService;\n+    @Autowired\n+    protected SolrUpdateDriver driver;\n+    @Autowired\n+    protected SolrSearchService solrSearchService;\n+    @Resource(name = \"accessGroups\")\n+    protected AccessGroupSet accessGroups;\n+    @Autowired\n+    protected Model queryModel;\n+    @Autowired\n+    protected RepositoryObjectLoader repositoryObjectLoader;\n+    @Autowired\n+    protected RepositoryObjectFactory repositoryObjectFactory;\n+    @Autowired\n+    protected DocumentIndexingPackageFactory dipFactory;\n+    @Autowired\n+    protected RepositoryPIDMinter pidMinter;\n+    @Autowired\n+    private RepositoryInitializer repoInitializer;\n+    @Autowired\n+    private RepositoryObjectTreeIndexer treeIndexer;\n+    @Autowired\n+    private RepositoryObjectSolrIndexer solrIndexer;\n+    @Autowired\n+    private FedoraSparqlUpdateService sparqlUpdateService;\n+    @Autowired\n+    private UpdateDescriptionService updateDescService;\n+\n+    protected ContentRootObject rootObj;\n+    protected AdminUnit unitObj;\n+    protected CollectionObject collObj;\n+    protected CollectionObject collObj2;\n+    protected FolderObject folderObj;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        setupContentRoot();\n+        generateBaseStructure();\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        setField(solrSearchService, \"solrClient\", server);\n+        setField(childrenCountService, \"solrClient\", server);\n+\n+        solrIndexer.index(rootObj.getPid(),\n+                unitObj.getPid(),\n+                collObj.getPid(),\n+                collObj2.getPid(),\n+                folderObj.getPid());\n+    }\n+\n+    @Test\n+    public void exportCollectionCsv() throws Exception {\n+        String id = collObj.getPid().getId();\n+        MvcResult result = mvc.perform(get(\"/exportTree/csv/\" + id))\n+                .andExpect(status().is2xxSuccessful())\n+                .andReturn();\n+\n+        MockHttpServletResponse response = result.getResponse();\n+        assertValidFileInfo(response, id);\n+\n+        List<CSVRecord> csvList = parseCsvResponse(response);\n+        assertEquals(\"Unexpected number of results\", 2, csvList.size());\n+        assertContainerRecord(csvList, ResourceType.Collection, collObj.getPid(), \"Collection\",\n+                COLLECTION_PATH, 2, false, 1, false);\n+        assertContainerRecord(csvList, ResourceType.Folder, folderObj.getPid(), \"Folder\",\n+                FOLDER_PATH, 3, false, null, false);\n+    }\n+\n+    @Test\n+    public void exportWorkWithFile() throws Exception {\n+        Map<String, PID> pidList = addFolderAndWork(\"Folder\", \"TestWork\");\n+        PID folderPid = pidList.get(\"folderPid\");\n+        String id = folderPid.getId();\n+\n+        MvcResult result = mvc.perform(get(\"/exportTree/csv/\" + id))\n+                .andExpect(status().is2xxSuccessful())\n+                .andReturn();\n+\n+        MockHttpServletResponse response = result.getResponse();\n+        assertValidFileInfo(response, id);\n+\n+        List<CSVRecord> csvList = parseCsvResponse(response);\n+        assertEquals(\"Unexpected number of results\", 3, csvList.size());\n+\n+        String pathToFolder = \"/Content Collections Root/Admin unit/Collection2/Folder\";\n+        assertContainerRecord(csvList, ResourceType.Folder, folderPid, \"Folder\",\n+                pathToFolder, 3, false, 1, false);\n+\n+        String pathToWork = pathToFolder + \"/TestWork\";\n+        assertCsvRecord(csvList, ResourceType.Work, pidList.get(\"workPid\"), \"TestWork\",\n+                pathToWork, 4, false, null, null, null,\n+                1, false);\n+\n+        String pathToFile = pathToWork + \"/\" + pidList.get(\"filePid\").getId();\n+        assertCsvRecord(csvList, ResourceType.File, pidList.get(\"filePid\"), \"TestWork\",\n+                pathToFile, 5, false, \"text/plain\", null, (long) 7,\n+                null, false);\n+    }\n+\n+    @Test\n+    public void exportDescribedResource() throws Exception {\n+        Map<String, PID> pidList = addFolderAndWork(\"Folder2\", \"TestWork2\");\n+        PID folderPid = pidList.get(\"folderPid\");\n+        PID workPid = pidList.get(\"workPid\");\n+        PID filePid = pidList.get(\"filePid\");\n+\n+        updateDescService.updateDescription(getAgentPrincipals(), folderPid, Files.newInputStream(MODS_PATH_1));\n+        updateDescService.updateDescription(getAgentPrincipals(), workPid, Files.newInputStream(MODS_PATH_2));\n+\n+        treeIndexer.indexAll(baseAddress);\n+        solrIndexer.index(collObj2.getPid(), folderPid, workPid, pidList.get(\"filePid\"));\n+\n+        String id = folderPid.getId();\n+        MvcResult result = mvc.perform(get(\"/exportTree/csv/\" + id))\n+                .andExpect(status().is2xxSuccessful())\n+                .andReturn();\n+\n+        MockHttpServletResponse response = result.getResponse();\n+        assertValidFileInfo(response, id);\n+\n+        List<CSVRecord> csvList = parseCsvResponse(response);\n+\n+        // MODS title supersedes folder name\n+        String pathToFolder = \"/Content Collections Root/Admin unit/Collection2/Test\";\n+        assertContainerRecord(csvList, ResourceType.Folder, folderPid, \"Test\",\n+                pathToFolder, 3, false, 1, true);\n+\n+        // MODS title supersedes work name\n+        String pathToWork = pathToFolder + \"/Work Test\";\n+        assertCsvRecord(csvList, ResourceType.Work, workPid, \"Work Test\",\n+                pathToWork, 4, false, null, null, null,\n+                1, true);\n+\n+        String pathToFile = pathToWork + \"/\" + filePid.getId();\n+        assertCsvRecord(csvList, ResourceType.File, filePid, \"TestWork2\",\n+                pathToFile, 5, false, \"text/plain\", null, (long) 7,\n+                null, false);\n+    }\n+\n+    @Test\n+    public void exportDeletedResource() throws Exception {\n+        Map<String, PID> pidList = addFolderAndWork(\"FolderDeleted\", \"TestWorkDeleted\");\n+        PID folderPid = pidList.get(\"folderPid\");\n+        PID workPid = pidList.get(\"workPid\");\n+        PID filePid = pidList.get(\"filePid\");\n+\n+        new MarkForDeletionJob(folderPid, \"\", getAgentPrincipals(), repositoryObjectLoader,\n+                sparqlUpdateService, aclService).run();\n+\n+        treeIndexer.indexAll(baseAddress);\n+        solrIndexer.index(collObj2.getPid(), folderPid, workPid, filePid);\n+\n+        String id = folderPid.getId();\n+        MvcResult result = mvc.perform(get(\"/exportTree/csv/\" + id))\n+                .andExpect(status().is2xxSuccessful())\n+                .andReturn();\n+\n+        MockHttpServletResponse response = result.getResponse();\n+        assertValidFileInfo(response, id);\n+\n+        List<CSVRecord> csvList = parseCsvResponse(response);\n+\n+        String pathToFolder = \"/Content Collections Root/Admin unit/Collection2/FolderDeleted\";\n+        assertContainerRecord(csvList, ResourceType.Folder, folderPid, \"FolderDeleted\",\n+                pathToFolder, 3, true, 1, false);\n+\n+        String pathToWork = pathToFolder + \"/TestWorkDeleted\";\n+        assertCsvRecord(csvList, ResourceType.Work, workPid, \"TestWorkDeleted\",\n+                pathToWork, 4, true, null, null, null,\n+                1, false);\n+\n+        String pathToFile = pathToWork + \"/\" + filePid.getId();\n+        assertCsvRecord(csvList, ResourceType.File, filePid, \"TestWork2\",\n+                pathToFile, 5, true, \"text/plain\", null, (long) 7,\n+                null, false);\n+    }\n+\n+    @Test\n+    public void exportFileResourceDirectly() throws Exception {\n+        Map<String, PID> pidList = addFolderAndWork(\"Folder3\", \"TestWork3\");\n+        PID filePid = pidList.get(\"filePid\");\n+        String id = filePid.getId();\n+\n+        MvcResult result = mvc.perform(get(\"/exportTree/csv/\" + id))\n+                .andExpect(status().is2xxSuccessful())\n+                .andReturn();\n+\n+        MockHttpServletResponse response = result.getResponse();\n+        assertValidFileInfo(response, id);\n+\n+        List<CSVRecord> csvList = parseCsvResponse(response);\n+        assertEquals(\"Unexpected number of results\", 1, csvList.size());\n+\n+        String pathToFile = \"/Content Collections Root/Admin unit/Collection2/Folder3/TestWork3/\" +\n+                filePid.getId();\n+        assertCsvRecord(csvList, ResourceType.File, filePid, \"TestWork3\",\n+                pathToFile, 5, false, \"text/plain\", null, (long) 7,\n+                null, false);\n+    }\n+\n+    @Test\n+    public void exportOneResult() throws Exception {\n+        PID folderPid = pidMinter.mintContentPid();\n+        FolderObject folder = repositoryObjectFactory.createFolderObject(folderPid,\n+                new AclModelBuilder(\"Folder4\")\n+                        .addCanViewOriginals(AUTHENTICATED_PRINC).model);\n+        collObj2.addMember(folder);\n+\n+        treeIndexer.indexAll(baseAddress);\n+        solrIndexer.index(collObj2.getPid(), folderPid);\n+\n+        String id = folderPid.getId();\n+        MvcResult result = mvc.perform(get(\"/exportTree/csv/\" + id))\n+                .andExpect(status().is2xxSuccessful())\n+                .andReturn();\n+\n+        MockHttpServletResponse response = result.getResponse();\n+        assertValidFileInfo(response, id);\n+\n+        List<CSVRecord> csvList = parseCsvResponse(response);\n+        assertEquals(\"Unexpected number of results\", 1, csvList.size());\n+        String folderPath = \"/Content Collections Root/Admin unit/Collection2/Folder4\";\n+        assertContainerRecord(csvList, ResourceType.Folder, folderPid, \"Folder4\",\n+                folderPath, 3, false, null, false);\n+    }\n+\n+    @Test\n+    public void exportContentRoot() throws Exception {\n+        String id = rootObj.getPid().getId();\n+        mvc.perform(get(\"/exportTree/csv/\" + id))\n+                .andExpect(status().is4xxClientError())\n+                .andReturn();\n+    }\n+\n+    @Test\n+    public void exportInvalidPidCsv() throws Exception {\n+        mvc.perform(get(\"/exportTree/csv/1234\"))\n+                .andExpect(status().is4xxClientError())\n+                .andReturn();\n+    }\n+\n+    @Test\n+    public void exportNonExistentPidCsv() throws Exception {\n+        String id = UUID.randomUUID().toString();\n+        mvc.perform(get(\"/exportTree/csv/\" + id))\n+                .andExpect(status().is4xxClientError())\n+                .andReturn();\n+    }\n+\n+    private Map<String, PID> addFolderAndWork(String folderName, String workName) throws Exception {\n+        PID folderPid = pidMinter.mintContentPid();\n+        FolderObject folder = repositoryObjectFactory.createFolderObject(folderPid,\n+                new AclModelBuilder(folderName)\n+                        .addCanViewOriginals(AUTHENTICATED_PRINC).model);\n+        collObj2.addMember(folder);\n+\n+        PID workPid = pidMinter.mintContentPid();\n+        WorkObject workObj = repositoryObjectFactory.createWorkObject(workPid,\n+                new AclModelBuilder(workName)\n+                        .addCanViewOriginals(AUTHENTICATED_PRINC).model);\n+\n+        String bodyString = \"Content\";\n+        String filename = \"file.txt\";\n+        String mimetype = \"text/plain\";\n+        Path contentPath = Files.createTempFile(\"file\", \".txt\");\n+        FileUtils.writeStringToFile(contentPath.toFile(), bodyString, \"UTF-8\");\n+\n+        FileObject fileObj = repositoryObjectFactory.createFileObject(null);\n+        fileObj.addOriginalFile(contentPath.toUri(), filename, mimetype, null, null);\n+        PID filePid = fileObj.getPid();\n+\n+        workObj.addMember(fileObj);\n+        folder.addMember(workObj);\n+\n+        treeIndexer.indexAll(baseAddress);\n+        solrIndexer.index(collObj2.getPid(), folderPid, workPid, filePid);\n+\n+        Map<String, PID> pidList = new HashMap<>();\n+        pidList.put(\"folderPid\", folderPid);\n+        pidList.put(\"workPid\", workPid);\n+        pidList.put(\"filePid\", filePid);\n+\n+        return pidList;\n+    }\n+\n+    private void generateBaseStructure() throws Exception {\n+        repoInitializer.initializeRepository();\n+        rootObj = repositoryObjectLoader.getContentRootObject(getContentRootPid());\n+\n+        PID unitPid = pidMinter.mintContentPid();\n+        unitObj = repositoryObjectFactory.createAdminUnit(unitPid,\n+                new AclModelBuilder(\"Admin unit\")\n+                    .addUnitOwner(\"admin\").model);\n+        rootObj.addMember(unitObj);\n+\n+        PID collPid = pidMinter.mintContentPid();\n+        collObj = repositoryObjectFactory.createCollectionObject(collPid,\n+                new AclModelBuilder(\"Collection\")\n+                    .addCanViewOriginals(AUTHENTICATED_PRINC).model);\n+\n+        PID collPid2 = pidMinter.mintContentPid();\n+        collObj2 = repositoryObjectFactory.createCollectionObject(collPid2,\n+                new AclModelBuilder(\"Collection2\")\n+                        .addCanViewOriginals(AUTHENTICATED_PRINC).model);\n+\n+        PID folderPid = pidMinter.mintContentPid();\n+        folderObj = repositoryObjectFactory.createFolderObject(folderPid,\n+                new AclModelBuilder(\"Folder\")\n+                    .addCanViewOriginals(AUTHENTICATED_PRINC).model);\n+        collObj.addMember(folderObj);\n+\n+        unitObj.addMember(collObj);\n+        unitObj.addMember(collObj2);\n+    }\n+\n+    private void assertValidFileInfo(MockHttpServletResponse response, String id) {\n+        String filename = String.format(\"\\\"%s.csv\\\"\", id);\n+        assertTrue(response.getHeader(\"Content-Disposition\").endsWith(filename));\n+        assertEquals(\"text/csv\", response.getContentType());\n+    }\n+\n+    private void assertContainerRecord(List<CSVRecord> csvList, ResourceType objType, PID expectedPid, String title,\n+            String path, int depth, boolean deleted, Integer numChildren, boolean described) {\n+        assertCsvRecord(csvList, objType, expectedPid, title, path, depth, deleted,\n+                null, null, null, numChildren, described);\n+    }\n+\n+    private void assertCsvRecord(List<CSVRecord> csvList, ResourceType objType, PID expectedPid, String title,\n+            String path, int depth, boolean deleted, String mimetype, String checksum, Long fileSize,\n+            Integer numChildren, boolean described) {\n+        path = path == null ? \"\" : path;\n+        mimetype = mimetype == null ? \"\" : mimetype;\n+        checksum = checksum == null ? \"\" : checksum;\n+\n+        for (CSVRecord rec : csvList) {\n+            PID pid = PIDs.get(rec.get(ExportCsvController.PID_HEADER));\n+            if (!pid.equals(expectedPid)) {\n+                continue;\n+            }\n+            assertEquals(objType.name(), rec.get(ExportCsvController.OBJ_TYPE_HEADER));\n+            assertEquals(path, rec.get(ExportCsvController.PATH_HEADER));\n+            assertEquals(depth, Integer.parseInt(rec.get(ExportCsvController.DEPTH_HEADER)));\n+            assertEquals(deleted, Boolean.parseBoolean(rec.get(ExportCsvController.DELETED_HEADER)));\n+            assertEquals(mimetype, rec.get(ExportCsvController.MIME_TYPE_HEADER));\n+            assertEquals(checksum, rec.get(ExportCsvController.CHECKSUM_HEADER));\n+            if (fileSize == null) {\n+                assertTrue(StringUtils.isBlank(rec.get(ExportCsvController.FILE_SIZE_HEADER)));\n+            } else {\n+                assertEquals(fileSize, new Long(rec.get(ExportCsvController.FILE_SIZE_HEADER)));\n+            }\n+            if (numChildren == null) {\n+                assertTrue(StringUtils.isBlank(rec.get(ExportCsvController.NUM_CHILDREN_HEADER)));\n+            } else {\n+                assertEquals(numChildren, new Integer(rec.get(ExportCsvController.NUM_CHILDREN_HEADER)));\n+            }\n+\n+            String expectedDescribed = described ? CONTENT_DESCRIBED : CONTENT_NOT_DESCRIBED;\n+            assertEquals(\"Unexpected description field value\",\n+                    expectedDescribed, rec.get(ExportCsvController.DESCRIBED_HEADER));\n+            return;\n+        }\n+        fail(\"No CSV record with PID \" + expectedPid.getId() + \" present\");\n+    }\n+\n+    private List<CSVRecord> parseCsvResponse(MockHttpServletResponse response) throws Exception {\n+        List<CSVRecord> csvList = new ArrayList<>();\n+        System.out.println(response.getContentAsString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ba61d5cd8293cbae406781ea0645d012d2b7f1"}, "originalPosition": 475}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDAyMTUyOnYy", "diffSide": "RIGHT", "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTo0OToyNlrOHgOXwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTo0OToyNlrOHgOXwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1MTkzNg==", "bodyText": "One other note, this test class takes a rather long time, on my local machine it is taking 40-60 seconds. Some of that is the cost of starting up fedora and solr, which may be unavoidable. But I think the test can be a good bit shorter if we reduce the number of calls to treeIndexer and solrIndexer, since some of those are taking a few seconds per call. For the solrIndexer in particular, it should be okay to wait until everything has been set up and then call it, rather than call it in the setup method and then once or twice more in the body. I'm happy to help out with this after other changes have been made if you'd prefer.\nAdditionally, creating fewer fedora objects may help some. For example, in addFolderAndWork you could add works directly to folderObj rather than creating a new folder\nAt some point we could probably make treeIndexer.indexAll more efficient by pointing at specific objects rather than the content root, which might make the test suite faster over all, but we can do that another time.", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r503551936", "createdAt": "2020-10-12T21:49:26Z", "author": {"login": "bbpennel"}, "path": "services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/ExportCsvIT.java", "diffHunk": "@@ -0,0 +1,482 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.cdr.services.rest.modify;\n+\n+import static edu.unc.lib.dl.acl.util.AccessPrincipalConstants.AUTHENTICATED_PRINC;\n+import static edu.unc.lib.dl.acl.util.GroupsThreadStore.getAgentPrincipals;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.getContentRootPid;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.CONTENT_DESCRIBED;\n+import static edu.unc.lib.dl.search.solr.util.FacetConstants.CONTENT_NOT_DESCRIBED;\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.File;\n+import java.io.StringReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.annotation.Resource;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVRecord;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.DocumentIndexingPackageFactory;\n+import edu.unc.lib.dl.data.ingest.solr.indexing.SolrUpdateDriver;\n+import edu.unc.lib.dl.data.ingest.solr.test.RepositoryObjectSolrIndexer;\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.FileObject;\n+import edu.unc.lib.dl.fcrepo4.FolderObject;\n+import edu.unc.lib.dl.fcrepo4.WorkObject;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryInitializer;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.services.delete.MarkForDeletionJob;\n+import edu.unc.lib.dl.persist.services.edit.UpdateDescriptionService;\n+import edu.unc.lib.dl.search.solr.service.ChildrenCountService;\n+import edu.unc.lib.dl.search.solr.service.SolrSearchService;\n+import edu.unc.lib.dl.sparql.FedoraSparqlUpdateService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.util.ResourceType;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/solr-indexing-context.xml\"),\n+        @ContextConfiguration(\"/export-csv-it-servlet.xml\")\n+})\n+public class ExportCsvIT extends AbstractAPIIT {\n+    private static final String COLLECTION_PATH =\n+            \"/Content Collections Root/Admin unit/Collection\";\n+    private static final String FOLDER_PATH =\n+            \"/Content Collections Root/Admin unit/Collection/Folder\";\n+    private static final Path MODS_PATH_1 = Paths.get(\"src/test/resources/mods/valid-mods.xml\");\n+    private static final Path MODS_PATH_2 = Paths.get(\"src/test/resources/mods/work-mods.xml\");\n+\n+    @Autowired\n+    protected String baseAddress;\n+    @Autowired\n+    protected File solrDataDir;\n+    @Autowired\n+    protected EmbeddedSolrServer server;\n+    @Autowired\n+    protected ChildrenCountService childrenCountService;\n+    @Autowired\n+    protected SolrUpdateDriver driver;\n+    @Autowired\n+    protected SolrSearchService solrSearchService;\n+    @Resource(name = \"accessGroups\")\n+    protected AccessGroupSet accessGroups;\n+    @Autowired\n+    protected Model queryModel;\n+    @Autowired\n+    protected RepositoryObjectLoader repositoryObjectLoader;\n+    @Autowired\n+    protected RepositoryObjectFactory repositoryObjectFactory;\n+    @Autowired\n+    protected DocumentIndexingPackageFactory dipFactory;\n+    @Autowired\n+    protected RepositoryPIDMinter pidMinter;\n+    @Autowired\n+    private RepositoryInitializer repoInitializer;\n+    @Autowired\n+    private RepositoryObjectTreeIndexer treeIndexer;\n+    @Autowired\n+    private RepositoryObjectSolrIndexer solrIndexer;\n+    @Autowired\n+    private FedoraSparqlUpdateService sparqlUpdateService;\n+    @Autowired\n+    private UpdateDescriptionService updateDescService;\n+\n+    protected ContentRootObject rootObj;\n+    protected AdminUnit unitObj;\n+    protected CollectionObject collObj;\n+    protected CollectionObject collObj2;\n+    protected FolderObject folderObj;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        setupContentRoot();\n+        generateBaseStructure();\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        setField(solrSearchService, \"solrClient\", server);\n+        setField(childrenCountService, \"solrClient\", server);\n+\n+        solrIndexer.index(rootObj.getPid(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5e1d5564d07e8655f1dc5a1b7f62f80839379f8"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzg3MTQzOnYy", "diffSide": "RIGHT", "path": "fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/PIDs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1NDo1M1rOHgyzIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjo0NDoxMlrOHhRG6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0ODc3MA==", "bodyText": "Is this needed for documentation purposes?", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r504148770", "createdAt": "2020-10-13T17:54:53Z", "author": {"login": "smithjp"}, "path": "fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/PIDs.java", "diffHunk": "@@ -43,6 +44,8 @@\n \n     private static final Logger log = LoggerFactory.getLogger(PIDs.class);\n \n+    //[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535a1760a37fad070a160578be673432d8666330"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NTM1Mw==", "bodyText": "Nope, forgot to delete that while I was still deciding where to incorporate it. Removed it.", "url": "https://github.com/UNC-Libraries/box-c/pull/1093#discussion_r504645353", "createdAt": "2020-10-14T12:44:12Z", "author": {"login": "bbpennel"}, "path": "fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/PIDs.java", "diffHunk": "@@ -43,6 +44,8 @@\n \n     private static final Logger log = LoggerFactory.getLogger(PIDs.class);\n \n+    //[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0ODc3MA=="}, "originalCommit": {"oid": "535a1760a37fad070a160578be673432d8666330"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 699, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}