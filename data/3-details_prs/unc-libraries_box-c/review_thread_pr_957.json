{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2Mjc3MjU2", "number": 957, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozOTo0MlrOD06IWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo0ODowM1rOD07-8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODA0OTUzOnYy", "diffSide": "LEFT", "path": ".travis.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozOTo0MlrOGKFW3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozOTo0MlrOGKFW3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyNjcxNw==", "bodyText": "Undo", "url": "https://github.com/UNC-Libraries/box-c/pull/957#discussion_r413226717", "createdAt": "2020-04-22T18:39:42Z", "author": {"login": "bbpennel"}, "path": ".travis.yml", "diffHunk": "@@ -7,7 +7,7 @@ matrix:\n         - gem install sass\n       services:\n         - redis-server\n-      script: mvn verify -pl access,access-common,admin,deposit,fcrepo-clients,metadata,persistence,security,services,services-camel,solr-ingest,solr-search,sword-server,migration-util", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d15e14a3f5671f98a223c1d7825f6c4507d8ea5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODEyNTg3OnYy", "diffSide": "RIGHT", "path": "migration-util/src/main/java/edu/unc/lib/dcr/migration/TransformDepositRecordsCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODo1NjoyNVrOGKGFcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODo1NjoyNVrOGKGFcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzODY0MQ==", "bodyText": "Javadoc", "url": "https://github.com/UNC-Libraries/box-c/pull/957#discussion_r413238641", "createdAt": "2020-04-22T18:56:25Z", "author": {"login": "bbpennel"}, "path": "migration-util/src/main/java/edu/unc/lib/dcr/migration/TransformDepositRecordsCommand.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dcr.migration;\n+\n+import static edu.unc.lib.dcr.migration.MigrationConstants.OUTPUT_LOGGER;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.nio.file.Path;\n+import java.util.concurrent.Callable;\n+\n+import org.slf4j.Logger;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+import edu.unc.lib.dcr.migration.deposit.DepositRecordTransformationService;\n+import edu.unc.lib.dcr.migration.paths.PathIndex;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+import picocli.CommandLine.Parameters;\n+import picocli.CommandLine.ParentCommand;\n+\n+/**\n+ * @author bbpennel", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d15e14a3f5671f98a223c1d7825f6c4507d8ea5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODIwOTAzOnYy", "diffSide": "RIGHT", "path": "migration-util/src/main/java/edu/unc/lib/dcr/migration/deposit/DepositRecordTransformer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxNTozOVrOGKG3ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxNTozOVrOGKG3ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MTQ1MQ==", "bodyText": "Remove", "url": "https://github.com/UNC-Libraries/box-c/pull/957#discussion_r413251451", "createdAt": "2020-04-22T19:15:39Z", "author": {"login": "bbpennel"}, "path": "migration-util/src/main/java/edu/unc/lib/dcr/migration/deposit/DepositRecordTransformer.java", "diffHunk": "@@ -0,0 +1,314 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dcr.migration.deposit;\n+\n+import static edu.unc.lib.dcr.migration.MigrationConstants.toBxc3Uri;\n+import static edu.unc.lib.dcr.migration.fcrepo3.FoxmlDocumentHelpers.getObjectModel;\n+import static edu.unc.lib.dcr.migration.paths.PathIndex.MANIFEST_TYPE;\n+import static edu.unc.lib.dl.model.DatastreamPids.getDepositManifestPid;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.FOXML_NS;\n+import static edu.unc.lib.dl.xml.SecureXMLFactory.createSAXBuilder;\n+import static java.nio.file.Files.newInputStream;\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.RecursiveAction;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.jena.datatypes.xsd.XSDDatatype;\n+import org.apache.jena.rdf.model.Literal;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Property;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.vocabulary.DC;\n+import org.apache.jena.vocabulary.RDF;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.jdom2.JDOMException;\n+import org.slf4j.Logger;\n+\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.CDRProperty;\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.ContentModel;\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.FedoraProperty;\n+import edu.unc.lib.dcr.migration.fcrepo3.FoxmlDocumentHelpers;\n+import edu.unc.lib.dcr.migration.paths.PathIndex;\n+import edu.unc.lib.dcr.migration.premis.DepositRecordPremisToRdfTransformer;\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.event.PremisLoggerFactory;\n+import edu.unc.lib.dl.exceptions.RepositoryException;\n+import edu.unc.lib.dl.fcrepo4.DepositRecord;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.api.transfer.BinaryTransferSession;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.Fcrepo4Repository;\n+\n+/**\n+ * Action to transform a deposit record from bxc3 into a bxc5 repository object.\n+ *\n+ * @author bbpennel\n+ */\n+public class DepositRecordTransformer extends RecursiveAction {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = getLogger(DepositRecordTransformer.class);\n+\n+    private PathIndex pathIndex;\n+\n+    private PremisLoggerFactory premisLoggerFactory;\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+\n+    private TransactionManager txManager;\n+\n+    private BinaryTransferSession transferSession;\n+\n+    private PID bxc3Pid;\n+    private PID bxc5Pid;\n+\n+    private Document foxml;\n+\n+    public DepositRecordTransformer(PID bxc3Pid, PID bxc5Pid, BinaryTransferSession transferSession) {\n+        this.bxc3Pid = bxc3Pid;\n+        this.bxc5Pid = bxc5Pid;\n+        this.transferSession = transferSession;\n+    }\n+\n+    @Override\n+    protected void compute() {\n+        log.info(\"Tranforming deposit record {}\", bxc3Pid.getId());\n+        Path foxmlPath = pathIndex.getPath(bxc3Pid);\n+        if (foxmlPath == null) {\n+            throw new RepositoryException(\"Unable to find foxml for \" + bxc3Pid.getId());\n+        }\n+\n+        // Deserialize the foxml document\n+        try {\n+            foxml = createSAXBuilder().build(newInputStream(foxmlPath));\n+        } catch (IOException | JDOMException e) {\n+            throw new RepositoryException(\"Failed to read FOXML for \" + bxc3Pid, e);\n+        }\n+\n+        // Retrieve all properties/relationships for the object\n+        Model bxc3Model = getObjectModel(foxml);\n+        Resource bxc3Resc = bxc3Model.getResource(toBxc3Uri(bxc3Pid));\n+\n+        if (!isDepositRecord(bxc3Resc)) {\n+            throw new RepositoryException(\"Skipping transformation of object \" + bxc3Pid\n+                    + \", it is not a deposit record\");\n+        }\n+\n+        Model bxc5Model = createDefaultModel();\n+        Resource bxc5Resc = bxc5Model.getResource(bxc5Pid.getRepositoryPath());\n+        bxc5Resc.addProperty(RDF.type, Cdr.DepositRecord);\n+\n+        populateDepositProperties(bxc3Resc, bxc5Resc);\n+\n+        FedoraTransaction tx = txManager.startTransaction();\n+        try {\n+            log.info(\"Ingesting deposit record {} as {}\", bxc3Pid.getId(), bxc5Pid.getRepositoryPath());\n+            DepositRecord depRecord = repoObjFactory.createDepositRecord(bxc5Pid, bxc5Model);\n+\n+            log.info(\"Adding manifests for {}\", bxc3Pid.getId());\n+            addManifests();\n+            log.info(\"Transforming premis for {}\", bxc3Pid.getId());\n+            transformAndPopulatePremis(depRecord);\n+            // Need this to be last\n+            log.info(\"Overriding modification time for {}\", bxc3Pid.getId());\n+            overrideLastModified(bxc3Resc, depRecord);\n+        } catch (Exception e) {\n+            tx.cancelAndIgnore();\n+            throw e;\n+        } finally {\n+            tx.close();\n+        }\n+\n+        log.debug(\"Finished ingest of deposit record {}\", bxc3Pid.getId());\n+    }\n+\n+    private boolean isDepositRecord(Resource bxc3Resc) {\n+        return bxc3Resc.hasProperty(FedoraProperty.hasModel.getProperty(),\n+                ContentModel.DEPOSIT_RECORD.getResource());\n+    }\n+\n+    private void overrideLastModified(Resource bxc3Resc, DepositRecord depRec) {\n+        String val = bxc3Resc.getProperty(FedoraProperty.lastModifiedDate.getProperty()).getString();\n+        Literal modifiedLiteral = depRec.getModel().createTypedLiteral(val, XSDDatatype.XSDdateTime);\n+        repoObjFactory.createExclusiveRelationship(depRec, Fcrepo4Repository.lastModified, modifiedLiteral);\n+    }\n+\n+    private void populateDepositProperties(Resource bxc3Resc, Resource bxc5Resc) {\n+        String fedoraLabel = bxc3Resc.getProperty(FedoraProperty.label.getProperty()).getString();\n+        if (StringUtils.isBlank(fedoraLabel)) {\n+            bxc5Resc.addLiteral(DC.title, \"Deposit Record \" + bxc5Pid.getId());\n+        } else {\n+            bxc5Resc.addLiteral(DC.title, fedoraLabel);\n+        }\n+        if (bxc3Resc.hasProperty(FedoraProperty.createdDate.getProperty())) {\n+            String val = bxc3Resc.getProperty(FedoraProperty.createdDate.getProperty()).getString();\n+            bxc5Resc.addProperty(Fcrepo4Repository.created, val, XSDDatatype.XSDdateTime);\n+        }\n+        addLiteralIfPresent(bxc3Resc, CDRProperty.depositedOnBehalfOf.getProperty(),\n+                bxc5Resc, Cdr.depositedOnBehalfOf);\n+        addLiteralIfPresent(bxc3Resc, CDRProperty.depositMethod.getProperty(),\n+                bxc5Resc, Cdr.depositMethod);\n+        addLiteralIfPresent(bxc3Resc, CDRProperty.depositPackageSubType.getProperty(),\n+                bxc5Resc, Cdr.depositPackageProfile);\n+        addLiteralIfPresent(bxc3Resc, CDRProperty.depositPackageType.getProperty(),\n+                bxc5Resc, Cdr.depositPackageType);\n+    }\n+\n+    private void addLiteralIfPresent(Resource bxc3Resc, Property bxc3Property,\n+            Resource bxc5Resc, Property bxc5Property) {\n+        if (bxc3Resc.hasProperty(bxc3Property)) {\n+            Statement prop = bxc3Resc.getProperty(bxc3Property);\n+            String val;\n+            if (prop.getObject().isResource()) {\n+                val = prop.getResource().getURI();\n+            } else {\n+                val = prop.getString();\n+            }\n+            bxc5Resc.addLiteral(bxc5Property, val);\n+        }\n+    }\n+\n+    private void transformAndPopulatePremis(DepositRecord depRecord) {\n+        Path originalPremisPath = pathIndex.getPath(bxc3Pid, PathIndex.PREMIS_TYPE);\n+        if (originalPremisPath == null || !Files.exists(originalPremisPath)) {\n+            log.info(\"No premis for {}, skipping transformation\", bxc3Pid.getId());\n+            return;\n+        }\n+\n+        try {\n+            Path transformedPremisPath = Files.createTempFile(\"premis\", \".xml\");\n+            try {\n+                PID bxc5Pid = depRecord.getPid();\n+                PremisLogger filePremisLogger = premisLoggerFactory.createPremisLogger(\n+                        bxc5Pid, transformedPremisPath.toFile());\n+                DepositRecordPremisToRdfTransformer premisTransformer =\n+                        new DepositRecordPremisToRdfTransformer(bxc5Pid, filePremisLogger, originalPremisPath);\n+\n+                premisTransformer.compute();\n+\n+                PremisLogger repoPremisLogger = premisLoggerFactory.createPremisLogger(depRecord, transferSession);\n+                repoPremisLogger.createLog(Files.newInputStream(transformedPremisPath));\n+            } finally {\n+                Files.delete(transformedPremisPath);\n+            }\n+        } catch (IOException e) {\n+            throw new RepositoryException(\"Failed to write premis file for \" + bxc3Pid, e);\n+        }\n+    }\n+\n+    private void addManifests() {\n+        List<Path> paths = pathIndex.getPathVersions(bxc3Pid, MANIFEST_TYPE);\n+\n+        int manifestNum = 0;\n+        do {\n+            String dsName = \"DATA_MANIFEST\" + manifestNum;\n+            Element dsEl = FoxmlDocumentHelpers.getDatastreamElByName(foxml, dsName);\n+            if (dsEl == null) {\n+                break;\n+            }\n+            Element versionEl = dsEl.getChild(\"datastreamVersion\", FOXML_NS);\n+            String created = versionEl.getAttributeValue(\"CREATED\");\n+            String mimetype = versionEl.getAttributeValue(\"MIMETYPE\");\n+            String label = versionEl.getAttributeValue(\"ID\");\n+\n+            String md5 = null;\n+            Element digestEl = versionEl.getChild(\"contentDigest\", FOXML_NS);\n+            if (digestEl != null) {\n+                md5 = digestEl.getAttributeValue(\"DIGEST\");\n+            }\n+\n+            // Seek the path to the staged file for this manifest\n+            Path manifestPath = paths.stream()\n+                    .filter(p -> p.toString().endsWith(dsName + \".0\"))\n+                    .findFirst()\n+                    .orElse(null);\n+\n+            if (manifestPath == null) {\n+                manifestNum++;\n+                log.error(\"Failed to find path for recorded manifest {} on object {}\", dsName, bxc3Pid);\n+                continue;\n+            }\n+\n+            if (Files.notExists(manifestPath)) {\n+                manifestNum++;\n+                log.error(\"Manifest file {} does not exist for {}\", manifestPath, bxc3Pid);\n+                continue;\n+            }\n+\n+            PID manifestPid = getDepositManifestPid(bxc5Pid, dsName);\n+            // Transfer the manifest to its permanent storage location\n+            URI manifestStoredUri = transferSession.transfer(manifestPid, manifestPath.toUri());\n+            log.error(\"Transferred manifest {}, exists? {}\", manifestStoredUri,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d15e14a3f5671f98a223c1d7825f6c4507d8ea5"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODIxNDQzOnYy", "diffSide": "RIGHT", "path": "migration-util/src/main/java/edu/unc/lib/dcr/migration/deposit/DepositRecordTransformer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxNjo0OVrOGKG6pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxNjo0OVrOGKG6pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MjI2MA==", "bodyText": "Remove the debug stuff here", "url": "https://github.com/UNC-Libraries/box-c/pull/957#discussion_r413252260", "createdAt": "2020-04-22T19:16:49Z", "author": {"login": "bbpennel"}, "path": "migration-util/src/main/java/edu/unc/lib/dcr/migration/deposit/DepositRecordTransformer.java", "diffHunk": "@@ -0,0 +1,314 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dcr.migration.deposit;\n+\n+import static edu.unc.lib.dcr.migration.MigrationConstants.toBxc3Uri;\n+import static edu.unc.lib.dcr.migration.fcrepo3.FoxmlDocumentHelpers.getObjectModel;\n+import static edu.unc.lib.dcr.migration.paths.PathIndex.MANIFEST_TYPE;\n+import static edu.unc.lib.dl.model.DatastreamPids.getDepositManifestPid;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.FOXML_NS;\n+import static edu.unc.lib.dl.xml.SecureXMLFactory.createSAXBuilder;\n+import static java.nio.file.Files.newInputStream;\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.RecursiveAction;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.jena.datatypes.xsd.XSDDatatype;\n+import org.apache.jena.rdf.model.Literal;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Property;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.vocabulary.DC;\n+import org.apache.jena.vocabulary.RDF;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.jdom2.JDOMException;\n+import org.slf4j.Logger;\n+\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.CDRProperty;\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.ContentModel;\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.FedoraProperty;\n+import edu.unc.lib.dcr.migration.fcrepo3.FoxmlDocumentHelpers;\n+import edu.unc.lib.dcr.migration.paths.PathIndex;\n+import edu.unc.lib.dcr.migration.premis.DepositRecordPremisToRdfTransformer;\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.event.PremisLoggerFactory;\n+import edu.unc.lib.dl.exceptions.RepositoryException;\n+import edu.unc.lib.dl.fcrepo4.DepositRecord;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.api.transfer.BinaryTransferSession;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.Fcrepo4Repository;\n+\n+/**\n+ * Action to transform a deposit record from bxc3 into a bxc5 repository object.\n+ *\n+ * @author bbpennel\n+ */\n+public class DepositRecordTransformer extends RecursiveAction {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = getLogger(DepositRecordTransformer.class);\n+\n+    private PathIndex pathIndex;\n+\n+    private PremisLoggerFactory premisLoggerFactory;\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+\n+    private TransactionManager txManager;\n+\n+    private BinaryTransferSession transferSession;\n+\n+    private PID bxc3Pid;\n+    private PID bxc5Pid;\n+\n+    private Document foxml;\n+\n+    public DepositRecordTransformer(PID bxc3Pid, PID bxc5Pid, BinaryTransferSession transferSession) {\n+        this.bxc3Pid = bxc3Pid;\n+        this.bxc5Pid = bxc5Pid;\n+        this.transferSession = transferSession;\n+    }\n+\n+    @Override\n+    protected void compute() {\n+        log.info(\"Tranforming deposit record {}\", bxc3Pid.getId());\n+        Path foxmlPath = pathIndex.getPath(bxc3Pid);\n+        if (foxmlPath == null) {\n+            throw new RepositoryException(\"Unable to find foxml for \" + bxc3Pid.getId());\n+        }\n+\n+        // Deserialize the foxml document\n+        try {\n+            foxml = createSAXBuilder().build(newInputStream(foxmlPath));\n+        } catch (IOException | JDOMException e) {\n+            throw new RepositoryException(\"Failed to read FOXML for \" + bxc3Pid, e);\n+        }\n+\n+        // Retrieve all properties/relationships for the object\n+        Model bxc3Model = getObjectModel(foxml);\n+        Resource bxc3Resc = bxc3Model.getResource(toBxc3Uri(bxc3Pid));\n+\n+        if (!isDepositRecord(bxc3Resc)) {\n+            throw new RepositoryException(\"Skipping transformation of object \" + bxc3Pid\n+                    + \", it is not a deposit record\");\n+        }\n+\n+        Model bxc5Model = createDefaultModel();\n+        Resource bxc5Resc = bxc5Model.getResource(bxc5Pid.getRepositoryPath());\n+        bxc5Resc.addProperty(RDF.type, Cdr.DepositRecord);\n+\n+        populateDepositProperties(bxc3Resc, bxc5Resc);\n+\n+        FedoraTransaction tx = txManager.startTransaction();\n+        try {\n+            log.info(\"Ingesting deposit record {} as {}\", bxc3Pid.getId(), bxc5Pid.getRepositoryPath());\n+            DepositRecord depRecord = repoObjFactory.createDepositRecord(bxc5Pid, bxc5Model);\n+\n+            log.info(\"Adding manifests for {}\", bxc3Pid.getId());\n+            addManifests();\n+            log.info(\"Transforming premis for {}\", bxc3Pid.getId());\n+            transformAndPopulatePremis(depRecord);\n+            // Need this to be last\n+            log.info(\"Overriding modification time for {}\", bxc3Pid.getId());\n+            overrideLastModified(bxc3Resc, depRecord);\n+        } catch (Exception e) {\n+            tx.cancelAndIgnore();\n+            throw e;\n+        } finally {\n+            tx.close();\n+        }\n+\n+        log.debug(\"Finished ingest of deposit record {}\", bxc3Pid.getId());\n+    }\n+\n+    private boolean isDepositRecord(Resource bxc3Resc) {\n+        return bxc3Resc.hasProperty(FedoraProperty.hasModel.getProperty(),\n+                ContentModel.DEPOSIT_RECORD.getResource());\n+    }\n+\n+    private void overrideLastModified(Resource bxc3Resc, DepositRecord depRec) {\n+        String val = bxc3Resc.getProperty(FedoraProperty.lastModifiedDate.getProperty()).getString();\n+        Literal modifiedLiteral = depRec.getModel().createTypedLiteral(val, XSDDatatype.XSDdateTime);\n+        repoObjFactory.createExclusiveRelationship(depRec, Fcrepo4Repository.lastModified, modifiedLiteral);\n+    }\n+\n+    private void populateDepositProperties(Resource bxc3Resc, Resource bxc5Resc) {\n+        String fedoraLabel = bxc3Resc.getProperty(FedoraProperty.label.getProperty()).getString();\n+        if (StringUtils.isBlank(fedoraLabel)) {\n+            bxc5Resc.addLiteral(DC.title, \"Deposit Record \" + bxc5Pid.getId());\n+        } else {\n+            bxc5Resc.addLiteral(DC.title, fedoraLabel);\n+        }\n+        if (bxc3Resc.hasProperty(FedoraProperty.createdDate.getProperty())) {\n+            String val = bxc3Resc.getProperty(FedoraProperty.createdDate.getProperty()).getString();\n+            bxc5Resc.addProperty(Fcrepo4Repository.created, val, XSDDatatype.XSDdateTime);\n+        }\n+        addLiteralIfPresent(bxc3Resc, CDRProperty.depositedOnBehalfOf.getProperty(),\n+                bxc5Resc, Cdr.depositedOnBehalfOf);\n+        addLiteralIfPresent(bxc3Resc, CDRProperty.depositMethod.getProperty(),\n+                bxc5Resc, Cdr.depositMethod);\n+        addLiteralIfPresent(bxc3Resc, CDRProperty.depositPackageSubType.getProperty(),\n+                bxc5Resc, Cdr.depositPackageProfile);\n+        addLiteralIfPresent(bxc3Resc, CDRProperty.depositPackageType.getProperty(),\n+                bxc5Resc, Cdr.depositPackageType);\n+    }\n+\n+    private void addLiteralIfPresent(Resource bxc3Resc, Property bxc3Property,\n+            Resource bxc5Resc, Property bxc5Property) {\n+        if (bxc3Resc.hasProperty(bxc3Property)) {\n+            Statement prop = bxc3Resc.getProperty(bxc3Property);\n+            String val;\n+            if (prop.getObject().isResource()) {\n+                val = prop.getResource().getURI();\n+            } else {\n+                val = prop.getString();\n+            }\n+            bxc5Resc.addLiteral(bxc5Property, val);\n+        }\n+    }\n+\n+    private void transformAndPopulatePremis(DepositRecord depRecord) {\n+        Path originalPremisPath = pathIndex.getPath(bxc3Pid, PathIndex.PREMIS_TYPE);\n+        if (originalPremisPath == null || !Files.exists(originalPremisPath)) {\n+            log.info(\"No premis for {}, skipping transformation\", bxc3Pid.getId());\n+            return;\n+        }\n+\n+        try {\n+            Path transformedPremisPath = Files.createTempFile(\"premis\", \".xml\");\n+            try {\n+                PID bxc5Pid = depRecord.getPid();\n+                PremisLogger filePremisLogger = premisLoggerFactory.createPremisLogger(\n+                        bxc5Pid, transformedPremisPath.toFile());\n+                DepositRecordPremisToRdfTransformer premisTransformer =\n+                        new DepositRecordPremisToRdfTransformer(bxc5Pid, filePremisLogger, originalPremisPath);\n+\n+                premisTransformer.compute();\n+\n+                PremisLogger repoPremisLogger = premisLoggerFactory.createPremisLogger(depRecord, transferSession);\n+                repoPremisLogger.createLog(Files.newInputStream(transformedPremisPath));\n+            } finally {\n+                Files.delete(transformedPremisPath);\n+            }\n+        } catch (IOException e) {\n+            throw new RepositoryException(\"Failed to write premis file for \" + bxc3Pid, e);\n+        }\n+    }\n+\n+    private void addManifests() {\n+        List<Path> paths = pathIndex.getPathVersions(bxc3Pid, MANIFEST_TYPE);\n+\n+        int manifestNum = 0;\n+        do {\n+            String dsName = \"DATA_MANIFEST\" + manifestNum;\n+            Element dsEl = FoxmlDocumentHelpers.getDatastreamElByName(foxml, dsName);\n+            if (dsEl == null) {\n+                break;\n+            }\n+            Element versionEl = dsEl.getChild(\"datastreamVersion\", FOXML_NS);\n+            String created = versionEl.getAttributeValue(\"CREATED\");\n+            String mimetype = versionEl.getAttributeValue(\"MIMETYPE\");\n+            String label = versionEl.getAttributeValue(\"ID\");\n+\n+            String md5 = null;\n+            Element digestEl = versionEl.getChild(\"contentDigest\", FOXML_NS);\n+            if (digestEl != null) {\n+                md5 = digestEl.getAttributeValue(\"DIGEST\");\n+            }\n+\n+            // Seek the path to the staged file for this manifest\n+            Path manifestPath = paths.stream()\n+                    .filter(p -> p.toString().endsWith(dsName + \".0\"))\n+                    .findFirst()\n+                    .orElse(null);\n+\n+            if (manifestPath == null) {\n+                manifestNum++;\n+                log.error(\"Failed to find path for recorded manifest {} on object {}\", dsName, bxc3Pid);\n+                continue;\n+            }\n+\n+            if (Files.notExists(manifestPath)) {\n+                manifestNum++;\n+                log.error(\"Manifest file {} does not exist for {}\", manifestPath, bxc3Pid);\n+                continue;\n+            }\n+\n+            PID manifestPid = getDepositManifestPid(bxc5Pid, dsName);\n+            // Transfer the manifest to its permanent storage location\n+            URI manifestStoredUri = transferSession.transfer(manifestPid, manifestPath.toUri());\n+            log.error(\"Transferred manifest {}, exists? {}\", manifestStoredUri,\n+                    Files.exists(Paths.get(manifestStoredUri)));\n+\n+            // Populate manifest timestamps\n+            Model manifestModel = ModelFactory.createDefaultModel();\n+            Resource selfResc = manifestModel.getResource(\"\");\n+            selfResc.addLiteral(DC.title, StringUtils.isBlank(label) ? dsName : label);\n+            selfResc.addProperty(Fcrepo4Repository.lastModified, created, XSDDatatype.XSDdateTime);\n+            selfResc.addProperty(Fcrepo4Repository.created, created, XSDDatatype.XSDdateTime);\n+\n+            // Create the manifest in fedora\n+            try {\n+                repoObjFactory.createOrUpdateBinary(manifestPid, manifestStoredUri, dsName,\n+                        mimetype, null, md5, manifestModel);\n+            } catch (Exception e) {\n+                log.error(\"Failed stuff for {}\", manifestStoredUri, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d15e14a3f5671f98a223c1d7825f6c4507d8ea5"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODIyODM3OnYy", "diffSide": "RIGHT", "path": "migration-util/src/main/java/edu/unc/lib/dcr/migration/deposit/DepositRecordTransformer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToyMDoxMFrOGKHC7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToyMDoxMFrOGKHC7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1NDM4MQ==", "bodyText": "debug", "url": "https://github.com/UNC-Libraries/box-c/pull/957#discussion_r413254381", "createdAt": "2020-04-22T19:20:10Z", "author": {"login": "bbpennel"}, "path": "migration-util/src/main/java/edu/unc/lib/dcr/migration/deposit/DepositRecordTransformer.java", "diffHunk": "@@ -0,0 +1,314 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dcr.migration.deposit;\n+\n+import static edu.unc.lib.dcr.migration.MigrationConstants.toBxc3Uri;\n+import static edu.unc.lib.dcr.migration.fcrepo3.FoxmlDocumentHelpers.getObjectModel;\n+import static edu.unc.lib.dcr.migration.paths.PathIndex.MANIFEST_TYPE;\n+import static edu.unc.lib.dl.model.DatastreamPids.getDepositManifestPid;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.FOXML_NS;\n+import static edu.unc.lib.dl.xml.SecureXMLFactory.createSAXBuilder;\n+import static java.nio.file.Files.newInputStream;\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.RecursiveAction;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.jena.datatypes.xsd.XSDDatatype;\n+import org.apache.jena.rdf.model.Literal;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Property;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.vocabulary.DC;\n+import org.apache.jena.vocabulary.RDF;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.jdom2.JDOMException;\n+import org.slf4j.Logger;\n+\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.CDRProperty;\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.ContentModel;\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.FedoraProperty;\n+import edu.unc.lib.dcr.migration.fcrepo3.FoxmlDocumentHelpers;\n+import edu.unc.lib.dcr.migration.paths.PathIndex;\n+import edu.unc.lib.dcr.migration.premis.DepositRecordPremisToRdfTransformer;\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.event.PremisLoggerFactory;\n+import edu.unc.lib.dl.exceptions.RepositoryException;\n+import edu.unc.lib.dl.fcrepo4.DepositRecord;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.api.transfer.BinaryTransferSession;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.Fcrepo4Repository;\n+\n+/**\n+ * Action to transform a deposit record from bxc3 into a bxc5 repository object.\n+ *\n+ * @author bbpennel\n+ */\n+public class DepositRecordTransformer extends RecursiveAction {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = getLogger(DepositRecordTransformer.class);\n+\n+    private PathIndex pathIndex;\n+\n+    private PremisLoggerFactory premisLoggerFactory;\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+\n+    private TransactionManager txManager;\n+\n+    private BinaryTransferSession transferSession;\n+\n+    private PID bxc3Pid;\n+    private PID bxc5Pid;\n+\n+    private Document foxml;\n+\n+    public DepositRecordTransformer(PID bxc3Pid, PID bxc5Pid, BinaryTransferSession transferSession) {\n+        this.bxc3Pid = bxc3Pid;\n+        this.bxc5Pid = bxc5Pid;\n+        this.transferSession = transferSession;\n+    }\n+\n+    @Override\n+    protected void compute() {\n+        log.info(\"Tranforming deposit record {}\", bxc3Pid.getId());\n+        Path foxmlPath = pathIndex.getPath(bxc3Pid);\n+        if (foxmlPath == null) {\n+            throw new RepositoryException(\"Unable to find foxml for \" + bxc3Pid.getId());\n+        }\n+\n+        // Deserialize the foxml document\n+        try {\n+            foxml = createSAXBuilder().build(newInputStream(foxmlPath));\n+        } catch (IOException | JDOMException e) {\n+            throw new RepositoryException(\"Failed to read FOXML for \" + bxc3Pid, e);\n+        }\n+\n+        // Retrieve all properties/relationships for the object\n+        Model bxc3Model = getObjectModel(foxml);\n+        Resource bxc3Resc = bxc3Model.getResource(toBxc3Uri(bxc3Pid));\n+\n+        if (!isDepositRecord(bxc3Resc)) {\n+            throw new RepositoryException(\"Skipping transformation of object \" + bxc3Pid\n+                    + \", it is not a deposit record\");\n+        }\n+\n+        Model bxc5Model = createDefaultModel();\n+        Resource bxc5Resc = bxc5Model.getResource(bxc5Pid.getRepositoryPath());\n+        bxc5Resc.addProperty(RDF.type, Cdr.DepositRecord);\n+\n+        populateDepositProperties(bxc3Resc, bxc5Resc);\n+\n+        FedoraTransaction tx = txManager.startTransaction();\n+        try {\n+            log.info(\"Ingesting deposit record {} as {}\", bxc3Pid.getId(), bxc5Pid.getRepositoryPath());\n+            DepositRecord depRecord = repoObjFactory.createDepositRecord(bxc5Pid, bxc5Model);\n+\n+            log.info(\"Adding manifests for {}\", bxc3Pid.getId());\n+            addManifests();\n+            log.info(\"Transforming premis for {}\", bxc3Pid.getId());\n+            transformAndPopulatePremis(depRecord);\n+            // Need this to be last\n+            log.info(\"Overriding modification time for {}\", bxc3Pid.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d15e14a3f5671f98a223c1d7825f6c4507d8ea5"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODMxNzkxOnYy", "diffSide": "RIGHT", "path": "migration-util/src/test/java/edu/unc/lib/dcr/migration/TransformDepositRecordsCommandIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTozOToyNFrOGKH6Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTozOToyNFrOGKH6Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2ODQ5NA==", "bodyText": "typo", "url": "https://github.com/UNC-Libraries/box-c/pull/957#discussion_r413268494", "createdAt": "2020-04-22T19:39:24Z", "author": {"login": "bbpennel"}, "path": "migration-util/src/test/java/edu/unc/lib/dcr/migration/TransformDepositRecordsCommandIT.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dcr.migration;\n+\n+import static edu.unc.lib.dcr.migration.MigrationConstants.toBxc3Uri;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.commons.io.FileUtils.writeStringToFile;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.vocabulary.DC;\n+import org.fcrepo.client.FcrepoClient;\n+import org.fcrepo.client.FcrepoResponse;\n+import org.jdom2.Document;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import edu.unc.lib.dcr.migration.deposit.AbstractDepositRecordTransformationIT;\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.CDRProperty;\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.ContentModel;\n+import edu.unc.lib.dcr.migration.fcrepo3.DatastreamVersion;\n+import edu.unc.lib.dcr.migration.fcrepo3.FoxmlDocumentBuilder;\n+import edu.unc.lib.dl.fcrepo4.BinaryObject;\n+import edu.unc.lib.dl.fcrepo4.DepositRecord;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPaths;\n+import edu.unc.lib.dl.fedora.NotFoundException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.Ldp;\n+import edu.unc.lib.dl.test.TestHelper;\n+import edu.unc.lib.dl.util.RDFModelUtil;\n+import picocli.CommandLine;\n+\n+/**\n+ * @author bbpennel\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+    @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+    @ContextConfiguration(\"/spring-test/cdr-client-container.xml\")\n+})\n+public class TransformDepositRecordsCommandIT extends AbstractDepositRecordTransformationIT {\n+    private static final String MANIFEST_NAME = \"DATA_MANIFEST0\";\n+    private static final String MANIFEST_CONTENT = \"content for m0\";\n+    private static final String DEPOSITOR = \"the_depositor\";\n+\n+    final PrintStream originalOut = System.out;\n+    final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+\n+    private PID bxc3Pid;\n+\n+    @Autowired\n+    private RepositoryObjectLoader repoObjLoader;\n+    @Autowired\n+    private FcrepoClient fcrepoClient;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        TestHelper.setContentBase(\"http://localhost:48085/rest\");\n+\n+        out.reset();\n+        System.setOut(new PrintStream(out));\n+\n+        datastreamsPath = tmpFolder.newFolder(\"datastreams\").toPath();\n+        objectsPath = tmpFolder.newFolder(\"objects\").toPath();\n+\n+        bxc3Pid = new RepositoryPIDMinter().mintDepositRecordPid();\n+\n+        File dbFile = tmpFolder.newFile(\"index_db\");\n+        System.setProperty(\"dcr.migration.index.url\", dbFile.toPath().toUri().toString());\n+        System.setProperty(\"dcr.it.tdr.ingestSource\", tmpFolder.getRoot().getAbsolutePath());\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        System.setOut(originalOut);\n+        System.clearProperty(\"dcr.migration.index.url\");\n+        System.clearProperty(\"dcr.it.tdr.ingestSource\");\n+    }\n+\n+    @Test\n+    public void transformDepositRecords() throws Exception {\n+        CommandLine migrationCommand = new CommandLine(new MigrationCLI());\n+\n+        File pidListFile = setupDepositRecord(migrationCommand,\n+                \"Deposit Record with Manifest\");\n+\n+        String[] args = new String[] { \"tdr\", pidListFile.getAbsolutePath(),\n+                \"-s\", \"loc1\" };\n+        int result = migrationCommand.execute(args);\n+\n+        assertEquals(\"Incorrect exit status\", 0, result);\n+        String output = out.toString();\n+        assertTrue(\"Expected one transformation successful\",\n+                output.contains(\" 1/1 \"));\n+        assertTrue(\"Expected transformation completed message\",\n+                output.contains(\"Finished transformation\"));\n+\n+\n+        DepositRecord depRec = repoObjLoader.getDepositRecord(bxc3Pid);\n+        assertTrue(depRec.getResource().hasProperty(DC.title, \"Deposit Record with Manifest\"));\n+        assertTrue(depRec.getResource().hasLiteral(Cdr.depositedOnBehalfOf, DEPOSITOR));\n+\n+        assertPremisTransformed(depRec);\n+\n+        assertManifestPopulated(depRec);\n+    }\n+\n+    private File setupDepositRecord(CommandLine migrationCommand, String title) throws Exception {\n+        // Set the application context path for the test environment\n+        Map<String, CommandLine> subs = migrationCommand.getSubcommands();\n+        CommandLine transformCommand = subs.get(\"tdr\");\n+\n+        TransformDepositRecordsCommand tdrCommand = (TransformDepositRecordsCommand) transformCommand.getCommand();\n+        Path contextPath = Paths.get(\"src\", \"test\", \"resources\", \"spring-test\",\n+                \"transform-deposit-record-command-it.xml\");\n+        tdrCommand.setApplicationContextPath(contextPath.toUri().toString());\n+\n+        // Setup the object to be ingested\n+        Model bxc3Model = createModelWithTypes(bxc3Pid, ContentModel.DEPOSIT_RECORD);\n+        Resource resc = bxc3Model.getResource(toBxc3Uri(bxc3Pid));\n+        resc.addLiteral(CDRProperty.depositedOnBehalfOf.getProperty(), DEPOSITOR);\n+\n+        writeManifestFile(bxc3Pid, MANIFEST_NAME, MANIFEST_CONTENT);\n+        DatastreamVersion manifest0 = new DatastreamVersion(null,\n+                MANIFEST_NAME, \"0\",\n+                FoxmlDocumentBuilder.DEFAULT_CREATED_DATE,\n+                Integer.toString(MANIFEST_CONTENT.length()),\n+                \"text/xml\",\n+                null);\n+\n+        Document foxml = new FoxmlDocumentBuilder(bxc3Pid, title)\n+                .relsExtModel(bxc3Model)\n+                .withDatastreamVersion(manifest0)\n+                .build();\n+        serializeFoxml(bxc3Pid, foxml);\n+\n+        addPremisLog(bxc3Pid);\n+\n+        // Index files\n+        String[] indexArgs = new String[] { \"pi\", \"populate\",\n+                objectsPath.toString(),\n+                datastreamsPath.toString(),\n+                \"-l\" };\n+        migrationCommand.execute(indexArgs);\n+\n+        // Setup list file\n+        File pidListFile = tmpFolder.newFile(\"deposit_rec_pids.txt\");\n+        writeStringToFile(pidListFile, bxc3Pid.getId(), UTF_8);\n+\n+        return pidListFile;\n+    }\n+\n+    @Test\n+    public void transformDepositRecordsGeneratedIds() throws Exception {\n+        CommandLine migrationCommand = new CommandLine(new MigrationCLI());\n+\n+        String title = \"Deposit Recorded Generated ID \" + System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d15e14a3f5671f98a223c1d7825f6c4507d8ea5"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODMxOTc2OnYy", "diffSide": "RIGHT", "path": "migration-util/src/test/java/edu/unc/lib/dcr/migration/TransformDepositRecordsCommandIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTozOTo1MlrOGKH7PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTozOTo1MlrOGKH7PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2ODc5Ng==", "bodyText": "fix indent", "url": "https://github.com/UNC-Libraries/box-c/pull/957#discussion_r413268796", "createdAt": "2020-04-22T19:39:52Z", "author": {"login": "bbpennel"}, "path": "migration-util/src/test/java/edu/unc/lib/dcr/migration/TransformDepositRecordsCommandIT.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dcr.migration;\n+\n+import static edu.unc.lib.dcr.migration.MigrationConstants.toBxc3Uri;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.commons.io.FileUtils.writeStringToFile;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.vocabulary.DC;\n+import org.fcrepo.client.FcrepoClient;\n+import org.fcrepo.client.FcrepoResponse;\n+import org.jdom2.Document;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import edu.unc.lib.dcr.migration.deposit.AbstractDepositRecordTransformationIT;\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.CDRProperty;\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.ContentModel;\n+import edu.unc.lib.dcr.migration.fcrepo3.DatastreamVersion;\n+import edu.unc.lib.dcr.migration.fcrepo3.FoxmlDocumentBuilder;\n+import edu.unc.lib.dl.fcrepo4.BinaryObject;\n+import edu.unc.lib.dl.fcrepo4.DepositRecord;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPaths;\n+import edu.unc.lib.dl.fedora.NotFoundException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.Ldp;\n+import edu.unc.lib.dl.test.TestHelper;\n+import edu.unc.lib.dl.util.RDFModelUtil;\n+import picocli.CommandLine;\n+\n+/**\n+ * @author bbpennel\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+    @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+    @ContextConfiguration(\"/spring-test/cdr-client-container.xml\")\n+})\n+public class TransformDepositRecordsCommandIT extends AbstractDepositRecordTransformationIT {\n+    private static final String MANIFEST_NAME = \"DATA_MANIFEST0\";\n+    private static final String MANIFEST_CONTENT = \"content for m0\";\n+    private static final String DEPOSITOR = \"the_depositor\";\n+\n+    final PrintStream originalOut = System.out;\n+    final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+\n+    private PID bxc3Pid;\n+\n+    @Autowired\n+    private RepositoryObjectLoader repoObjLoader;\n+    @Autowired\n+    private FcrepoClient fcrepoClient;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        TestHelper.setContentBase(\"http://localhost:48085/rest\");\n+\n+        out.reset();\n+        System.setOut(new PrintStream(out));\n+\n+        datastreamsPath = tmpFolder.newFolder(\"datastreams\").toPath();\n+        objectsPath = tmpFolder.newFolder(\"objects\").toPath();\n+\n+        bxc3Pid = new RepositoryPIDMinter().mintDepositRecordPid();\n+\n+        File dbFile = tmpFolder.newFile(\"index_db\");\n+        System.setProperty(\"dcr.migration.index.url\", dbFile.toPath().toUri().toString());\n+        System.setProperty(\"dcr.it.tdr.ingestSource\", tmpFolder.getRoot().getAbsolutePath());\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        System.setOut(originalOut);\n+        System.clearProperty(\"dcr.migration.index.url\");\n+        System.clearProperty(\"dcr.it.tdr.ingestSource\");\n+    }\n+\n+    @Test\n+    public void transformDepositRecords() throws Exception {\n+        CommandLine migrationCommand = new CommandLine(new MigrationCLI());\n+\n+        File pidListFile = setupDepositRecord(migrationCommand,\n+                \"Deposit Record with Manifest\");\n+\n+        String[] args = new String[] { \"tdr\", pidListFile.getAbsolutePath(),\n+                \"-s\", \"loc1\" };\n+        int result = migrationCommand.execute(args);\n+\n+        assertEquals(\"Incorrect exit status\", 0, result);\n+        String output = out.toString();\n+        assertTrue(\"Expected one transformation successful\",\n+                output.contains(\" 1/1 \"));\n+        assertTrue(\"Expected transformation completed message\",\n+                output.contains(\"Finished transformation\"));\n+\n+\n+        DepositRecord depRec = repoObjLoader.getDepositRecord(bxc3Pid);\n+        assertTrue(depRec.getResource().hasProperty(DC.title, \"Deposit Record with Manifest\"));\n+        assertTrue(depRec.getResource().hasLiteral(Cdr.depositedOnBehalfOf, DEPOSITOR));\n+\n+        assertPremisTransformed(depRec);\n+\n+        assertManifestPopulated(depRec);\n+    }\n+\n+    private File setupDepositRecord(CommandLine migrationCommand, String title) throws Exception {\n+        // Set the application context path for the test environment\n+        Map<String, CommandLine> subs = migrationCommand.getSubcommands();\n+        CommandLine transformCommand = subs.get(\"tdr\");\n+\n+        TransformDepositRecordsCommand tdrCommand = (TransformDepositRecordsCommand) transformCommand.getCommand();\n+        Path contextPath = Paths.get(\"src\", \"test\", \"resources\", \"spring-test\",\n+                \"transform-deposit-record-command-it.xml\");\n+        tdrCommand.setApplicationContextPath(contextPath.toUri().toString());\n+\n+        // Setup the object to be ingested\n+        Model bxc3Model = createModelWithTypes(bxc3Pid, ContentModel.DEPOSIT_RECORD);\n+        Resource resc = bxc3Model.getResource(toBxc3Uri(bxc3Pid));\n+        resc.addLiteral(CDRProperty.depositedOnBehalfOf.getProperty(), DEPOSITOR);\n+\n+        writeManifestFile(bxc3Pid, MANIFEST_NAME, MANIFEST_CONTENT);\n+        DatastreamVersion manifest0 = new DatastreamVersion(null,\n+                MANIFEST_NAME, \"0\",\n+                FoxmlDocumentBuilder.DEFAULT_CREATED_DATE,\n+                Integer.toString(MANIFEST_CONTENT.length()),\n+                \"text/xml\",\n+                null);\n+\n+        Document foxml = new FoxmlDocumentBuilder(bxc3Pid, title)\n+                .relsExtModel(bxc3Model)\n+                .withDatastreamVersion(manifest0)\n+                .build();\n+        serializeFoxml(bxc3Pid, foxml);\n+\n+        addPremisLog(bxc3Pid);\n+\n+        // Index files\n+        String[] indexArgs = new String[] { \"pi\", \"populate\",\n+                objectsPath.toString(),\n+                datastreamsPath.toString(),\n+                \"-l\" };\n+        migrationCommand.execute(indexArgs);\n+\n+        // Setup list file\n+        File pidListFile = tmpFolder.newFile(\"deposit_rec_pids.txt\");\n+        writeStringToFile(pidListFile, bxc3Pid.getId(), UTF_8);\n+\n+        return pidListFile;\n+    }\n+\n+    @Test\n+    public void transformDepositRecordsGeneratedIds() throws Exception {\n+        CommandLine migrationCommand = new CommandLine(new MigrationCLI());\n+\n+        String title = \"Deposit Recorded Generated ID \" + System.currentTimeMillis();\n+        File pidListFile = setupDepositRecord(migrationCommand,\n+                title);\n+\n+        String[] args = new String[] { \"tdr\", pidListFile.getAbsolutePath(),\n+                \"-g\",\n+                \"-s\", \"loc1\" };\n+        int result = migrationCommand.execute(args);\n+        assertEquals(\"Incorrect exit status\", 0, result);\n+\n+        String output = out.toString();\n+        assertTrue(\"Expected one transformation successful\",\n+                output.contains(\" 1/1 \"));\n+        assertTrue(\"Expected transformation completed message\",\n+                output.contains(\"Finished transformation\"));\n+\n+        try {\n+            repoObjLoader.getDepositRecord(bxc3Pid);\n+            fail(\"Must not find deposit record at the original pid with generated ids flag\");\n+        } catch(NotFoundException e) {\n+            // expected\n+        }\n+\n+        // Retrieve all the deposit records in the test repository to find the new one\n+        List<DepositRecord> depRecs;\n+        URI depRecsBaseUri = URI.create(RepositoryPaths.getDepositRecordBase());\n+        try (FcrepoResponse resp = fcrepoClient.get(depRecsBaseUri).perform()) {\n+            Model depBaseModel = RDFModelUtil.createModel(resp.getBody());\n+            depRecs = depBaseModel.listObjectsOfProperty(Ldp.contains).toList().stream()\n+                .map(o -> PIDs.get(o.asResource().getURI()))\n+                .map(repoObjLoader::getDepositRecord)\n+                .collect(Collectors.toList());\n+        }\n+\n+        // Find the correct deposit record by title\n+        DepositRecord depRec = depRecs.stream()\n+                .filter(d -> d.getResource().hasLiteral(DC.title, title))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d15e14a3f5671f98a223c1d7825f6c4507d8ea5"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODM0MDUzOnYy", "diffSide": "RIGHT", "path": "migration-util/src/test/java/edu/unc/lib/dcr/migration/deposit/DepositRecordTransformerIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo0NTowOVrOGKIIAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo0NTowOVrOGKIIAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI3MjA2NA==", "bodyText": "Duplicate?", "url": "https://github.com/UNC-Libraries/box-c/pull/957#discussion_r413272064", "createdAt": "2020-04-22T19:45:09Z", "author": {"login": "bbpennel"}, "path": "migration-util/src/test/java/edu/unc/lib/dcr/migration/deposit/DepositRecordTransformerIT.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dcr.migration.deposit;\n+\n+import static edu.unc.lib.dcr.migration.MigrationConstants.toBxc3Uri;\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.vocabulary.DC;\n+import org.apache.jena.vocabulary.RDF;\n+import org.jdom2.Document;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.CDRProperty;\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.ContentModel;\n+import edu.unc.lib.dcr.migration.fcrepo3.DatastreamVersion;\n+import edu.unc.lib.dcr.migration.fcrepo3.FoxmlDocumentBuilder;\n+import edu.unc.lib.dcr.migration.paths.PathIndex;\n+import edu.unc.lib.dcr.migration.paths.PathIndexingService;\n+import edu.unc.lib.dl.event.PremisLoggerFactory;\n+import edu.unc.lib.dl.exceptions.RepositoryException;\n+import edu.unc.lib.dl.fcrepo4.BinaryObject;\n+import edu.unc.lib.dl.fcrepo4.DepositRecord;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.api.storage.StorageLocation;\n+import edu.unc.lib.dl.persist.api.storage.StorageLocationManager;\n+import edu.unc.lib.dl.persist.api.transfer.BinaryTransferService;\n+import edu.unc.lib.dl.persist.api.transfer.BinaryTransferSession;\n+import edu.unc.lib.dl.persist.services.storage.StorageLocationTestHelper;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.test.TestHelper;\n+\n+/**\n+ * @author bbpennel\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+    @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+    @ContextConfiguration(\"/spring-test/cdr-client-container.xml\")\n+})\n+public class DepositRecordTransformerIT extends AbstractDepositRecordTransformationIT {\n+    private static final Logger log = getLogger(DepositRecordTransformerIT.class);\n+\n+    private static Path ingestSourcePath;\n+\n+    static {\n+        try {\n+            // Injecting path of the ingest source so it can be picked up by spring\n+            ingestSourcePath = Files.createTempDirectory(\"ingestSource\");\n+            System.setProperty(\"dcr.it.tdr.ingestSource\", ingestSourcePath.toString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    @Autowired\n+    private RepositoryPIDMinter pidMinter;\n+    @Autowired\n+    private RepositoryObjectFactory repoObjFactory;\n+    @Autowired\n+    private RepositoryObjectLoader repoObjLoader;\n+    @Autowired\n+    private PremisLoggerFactory premisLoggerFactory;\n+    @Autowired\n+    private TransactionManager txManager;\n+    @Autowired\n+    private StorageLocationManager locManager;\n+    @Autowired\n+    private BinaryTransferService transferService;\n+\n+    private BinaryTransferSession transferSession;\n+    @Autowired\n+    private PathIndex pathIndex;\n+    @Autowired\n+    PathIndexingService pathIndexingService;\n+\n+    private DepositRecordTransformer transformer;\n+\n+    private PID bxc3Pid;\n+    private PID bxc5Pid;\n+\n+    @Before\n+    public void init() throws Exception {\n+        TestHelper.setContentBase(\"http://localhost:48085/rest\");\n+\n+        datastreamsPath = ingestSourcePath.resolve(\"datastreams\");\n+        objectsPath = ingestSourcePath.resolve(\"objects\");\n+        Files.createDirectories(datastreamsPath);\n+        Files.createDirectories(objectsPath);\n+\n+        StorageLocation loc = locManager.getStorageLocationById(StorageLocationTestHelper.LOC1_ID);\n+        transferSession = transferService.getSession(loc);\n+\n+        bxc3Pid = pidMinter.mintDepositRecordPid();\n+        bxc5Pid = pidMinter.mintDepositRecordPid();\n+        transformer = new DepositRecordTransformer(bxc3Pid, bxc5Pid, transferSession);\n+        transformer.setPathIndex(pathIndex);\n+        transformer.setPremisLoggerFactory(premisLoggerFactory);\n+        transformer.setRepositoryObjectFactory(repoObjFactory);\n+        transformer.setTransactionManager(txManager);\n+\n+        System.setProperty(\"dcr.it.tdr.ingestSource\", tmpFolder.getRoot().getAbsolutePath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d15e14a3f5671f98a223c1d7825f6c4507d8ea5"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODM1MzEyOnYy", "diffSide": "RIGHT", "path": "migration-util/src/test/java/edu/unc/lib/dcr/migration/deposit/DepositRecordTransformerIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo0ODowM1rOGKIPdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo0ODowM1rOGKIPdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI3Mzk3Mg==", "bodyText": "REmove", "url": "https://github.com/UNC-Libraries/box-c/pull/957#discussion_r413273972", "createdAt": "2020-04-22T19:48:03Z", "author": {"login": "bbpennel"}, "path": "migration-util/src/test/java/edu/unc/lib/dcr/migration/deposit/DepositRecordTransformerIT.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dcr.migration.deposit;\n+\n+import static edu.unc.lib.dcr.migration.MigrationConstants.toBxc3Uri;\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.vocabulary.DC;\n+import org.apache.jena.vocabulary.RDF;\n+import org.jdom2.Document;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.CDRProperty;\n+import edu.unc.lib.dcr.migration.fcrepo3.ContentModelHelper.ContentModel;\n+import edu.unc.lib.dcr.migration.fcrepo3.DatastreamVersion;\n+import edu.unc.lib.dcr.migration.fcrepo3.FoxmlDocumentBuilder;\n+import edu.unc.lib.dcr.migration.paths.PathIndex;\n+import edu.unc.lib.dcr.migration.paths.PathIndexingService;\n+import edu.unc.lib.dl.event.PremisLoggerFactory;\n+import edu.unc.lib.dl.exceptions.RepositoryException;\n+import edu.unc.lib.dl.fcrepo4.BinaryObject;\n+import edu.unc.lib.dl.fcrepo4.DepositRecord;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.api.storage.StorageLocation;\n+import edu.unc.lib.dl.persist.api.storage.StorageLocationManager;\n+import edu.unc.lib.dl.persist.api.transfer.BinaryTransferService;\n+import edu.unc.lib.dl.persist.api.transfer.BinaryTransferSession;\n+import edu.unc.lib.dl.persist.services.storage.StorageLocationTestHelper;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.test.TestHelper;\n+\n+/**\n+ * @author bbpennel\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+    @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+    @ContextConfiguration(\"/spring-test/cdr-client-container.xml\")\n+})\n+public class DepositRecordTransformerIT extends AbstractDepositRecordTransformationIT {\n+    private static final Logger log = getLogger(DepositRecordTransformerIT.class);\n+\n+    private static Path ingestSourcePath;\n+\n+    static {\n+        try {\n+            // Injecting path of the ingest source so it can be picked up by spring\n+            ingestSourcePath = Files.createTempDirectory(\"ingestSource\");\n+            System.setProperty(\"dcr.it.tdr.ingestSource\", ingestSourcePath.toString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    @Autowired\n+    private RepositoryPIDMinter pidMinter;\n+    @Autowired\n+    private RepositoryObjectFactory repoObjFactory;\n+    @Autowired\n+    private RepositoryObjectLoader repoObjLoader;\n+    @Autowired\n+    private PremisLoggerFactory premisLoggerFactory;\n+    @Autowired\n+    private TransactionManager txManager;\n+    @Autowired\n+    private StorageLocationManager locManager;\n+    @Autowired\n+    private BinaryTransferService transferService;\n+\n+    private BinaryTransferSession transferSession;\n+    @Autowired\n+    private PathIndex pathIndex;\n+    @Autowired\n+    PathIndexingService pathIndexingService;\n+\n+    private DepositRecordTransformer transformer;\n+\n+    private PID bxc3Pid;\n+    private PID bxc5Pid;\n+\n+    @Before\n+    public void init() throws Exception {\n+        TestHelper.setContentBase(\"http://localhost:48085/rest\");\n+\n+        datastreamsPath = ingestSourcePath.resolve(\"datastreams\");\n+        objectsPath = ingestSourcePath.resolve(\"objects\");\n+        Files.createDirectories(datastreamsPath);\n+        Files.createDirectories(objectsPath);\n+\n+        StorageLocation loc = locManager.getStorageLocationById(StorageLocationTestHelper.LOC1_ID);\n+        transferSession = transferService.getSession(loc);\n+\n+        bxc3Pid = pidMinter.mintDepositRecordPid();\n+        bxc5Pid = pidMinter.mintDepositRecordPid();\n+        transformer = new DepositRecordTransformer(bxc3Pid, bxc5Pid, transferSession);\n+        transformer.setPathIndex(pathIndex);\n+        transformer.setPremisLoggerFactory(premisLoggerFactory);\n+        transformer.setRepositoryObjectFactory(repoObjFactory);\n+        transformer.setTransactionManager(txManager);\n+\n+        System.setProperty(\"dcr.it.tdr.ingestSource\", tmpFolder.getRoot().getAbsolutePath());\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        FileUtils.deleteDirectory(ingestSourcePath.toFile());\n+        transferSession.close();\n+    }\n+\n+    @Test(expected = RepositoryException.class)\n+    public void transform_NoFoxml() throws Exception {\n+        transformer.compute();\n+    }\n+\n+    @Test(expected = RepositoryException.class)\n+    public void transform_NonDepositRecord() throws Exception {\n+        Model bxc3Model = createModelWithTypes(bxc3Pid, ContentModel.CONTAINER);\n+\n+        Document foxml = new FoxmlDocumentBuilder(bxc3Pid, \"work\")\n+                .relsExtModel(bxc3Model)\n+                .build();\n+        serializeFoxml(bxc3Pid, foxml);\n+\n+        updatePathIndex();\n+\n+        transformer.compute();\n+    }\n+\n+    @Test\n+    public void transform_DepositRecord() throws Exception {\n+        Model bxc3Model = createModelWithTypes(bxc3Pid, ContentModel.DEPOSIT_RECORD);\n+\n+        Document foxml = new FoxmlDocumentBuilder(bxc3Pid, \"Migrated Deposit Record\")\n+                .relsExtModel(bxc3Model)\n+                .build();\n+        serializeFoxml(bxc3Pid, foxml);\n+\n+        addPremisLog(bxc3Pid);\n+\n+        updatePathIndex();\n+\n+        transformer.compute();\n+\n+        DepositRecord depRec = repoObjLoader.getDepositRecord(bxc5Pid);\n+        Resource recResc = depRec.getResource();\n+\n+        assertTrue(\"Did not have deposit record type\", recResc.hasProperty(RDF.type, Cdr.DepositRecord));\n+        assertTrue(recResc.hasProperty(DC.title, \"Migrated Deposit Record\"));\n+        assertEquals(DEFAULT_CREATED_DATE, depRec.getCreatedDate());\n+        assertEquals(DEFAULT_MODIFIED_DATE, depRec.getLastModified());\n+\n+        assertPremisTransformed(depRec);\n+    }\n+\n+    @Test\n+    public void transform_DepositRecord_WithDepositProperties() throws Exception {\n+        Model bxc3Model = createModelWithTypes(bxc3Pid, ContentModel.DEPOSIT_RECORD);\n+        Resource bxc3Resc = bxc3Model.getResource(toBxc3Uri(bxc3Pid));\n+        bxc3Resc.addLiteral(CDRProperty.depositedOnBehalfOf.getProperty(), \"some depositor\");\n+        bxc3Resc.addLiteral(CDRProperty.depositMethod.getProperty(), \"dep method\");\n+        bxc3Resc.addLiteral(CDRProperty.depositPackageType.getProperty(), \"mets package\");\n+        bxc3Resc.addLiteral(CDRProperty.depositPackageSubType.getProperty(), \"package subtype\");\n+\n+        Document foxml = new FoxmlDocumentBuilder(bxc3Pid, \"Migrated Deposit Record\")\n+                .relsExtModel(bxc3Model)\n+                .build();\n+        serializeFoxml(bxc3Pid, foxml);\n+\n+        addPremisLog(bxc3Pid);\n+\n+        updatePathIndex();\n+\n+        transformer.compute();\n+\n+        DepositRecord depRec = repoObjLoader.getDepositRecord(bxc5Pid);\n+        System.out.println(depRec.getModel());\n+        Resource recResc = depRec.getResource();\n+\n+        assertTrue(\"Did not have deposit record type\", recResc.hasProperty(RDF.type, Cdr.DepositRecord));\n+        assertTrue(recResc.hasProperty(DC.title, \"Migrated Deposit Record\"));\n+        assertEquals(DEFAULT_CREATED_DATE, depRec.getCreatedDate());\n+        assertEquals(DEFAULT_MODIFIED_DATE, depRec.getLastModified());\n+\n+        assertPremisTransformed(depRec);\n+\n+        assertTrue(recResc.hasProperty(Cdr.depositedOnBehalfOf, \"some depositor\"));\n+        assertTrue(recResc.hasProperty(Cdr.depositMethod, \"dep method\"));\n+        assertTrue(recResc.hasProperty(Cdr.depositPackageType, \"mets package\"));\n+        assertTrue(recResc.hasProperty(Cdr.depositPackageProfile, \"package subtype\"));\n+    }\n+\n+    @Test\n+    public void transform_DepositRecord_withManifests() throws Exception {\n+        Model bxc3Model = createModelWithTypes(bxc3Pid, ContentModel.DEPOSIT_RECORD);\n+\n+        String manifest0Name = \"DATA_MANIFEST0\";\n+        String manifest0Content = \"content for m0\";\n+        Path mPath = writeManifestFile(bxc3Pid, manifest0Name, manifest0Content);\n+        DatastreamVersion manifest0 = new DatastreamVersion(null,\n+                manifest0Name, \"0\",\n+                FoxmlDocumentBuilder.DEFAULT_CREATED_DATE,\n+                Integer.toString(manifest0Content.length()),\n+                \"text/xml\",\n+                null);\n+\n+        String manifest1Name = \"DATA_MANIFEST1\";\n+        String manifest1Content = \"additional content\";\n+        Path mPath2 = writeManifestFile(bxc3Pid, manifest1Name, manifest1Content);\n+        DatastreamVersion manifest1 = new DatastreamVersion(null,\n+                manifest1Name, \"0\",\n+                FoxmlDocumentBuilder.DEFAULT_LAST_MODIFIED,\n+                Integer.toString(manifest1Content.length()),\n+                \"text/plain\",\n+                null);\n+        log.error(\"Mpath1 = {} {}\", mPath, Files.exists(mPath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d15e14a3f5671f98a223c1d7825f6c4507d8ea5"}, "originalPosition": 251}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 755, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}