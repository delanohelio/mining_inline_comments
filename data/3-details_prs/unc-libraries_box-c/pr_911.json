{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNDUxMDM3", "number": 911, "title": "longleaf registration", "bodyText": "https://jira.lib.unc.edu/browse/BXC-2424", "createdAt": "2020-03-02T15:33:31Z", "url": "https://github.com/UNC-Libraries/box-c/pull/911", "merged": true, "mergeCommit": {"oid": "54e15c23fe0af62425eb8628c329e98960bcc948"}, "closed": true, "closedAt": "2020-04-01T20:54:23Z", "author": {"login": "smithjp"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIc3IPAH2gAyMzgyNDUxMDM3OjMyMGJmNjI1MGIxMmJkMDExMzgwYTRiMjcxYzA0YjQ0NTU4MGY4ZGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTbUmjgH2gAyMzgyNDUxMDM3OmU4ODRhNDEwYjJmMzgyYWYxM2Y2NDZhMDE1MDZmMmNkZTg1OGEwNmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "320bf6250b12bd011380a4b271c04b445580f8df", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/320bf6250b12bd011380a4b271c04b445580f8df", "committedDate": "2020-02-27T15:15:02Z", "message": "Add files for longleaf registration job and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2253843a195c33ad79189a82c3948d58967b91e", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/b2253843a195c33ad79189a82c3948d58967b91e", "committedDate": "2020-02-27T15:15:02Z", "message": "Add longleaf registration job to deposit supervisor list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96e0260ee053a048b00544c3c095e4fde4cb5c03", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/96e0260ee053a048b00544c3c095e4fde4cb5c03", "committedDate": "2020-02-27T15:15:02Z", "message": "Call longleaf script to register files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afc05b4dea45e55eefd9fa5c3b1d46151a686c1c", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/afc05b4dea45e55eefd9fa5c3b1d46151a686c1c", "committedDate": "2020-03-02T15:31:26Z", "message": "Add longleaf log file path and switch to md5 checksums"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzAzNTYy", "url": "https://github.com/UNC-Libraries/box-c/pull/911#pullrequestreview-367303562", "createdAt": "2020-03-02T15:46:30Z", "commit": {"oid": "afc05b4dea45e55eefd9fa5c3b1d46151a686c1c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NjozMFrOFwkdyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjo0NzoyN1rOFwm7fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MzQxNw==", "bodyText": "you might need to bump this up out of the FileObject block since Units, Collections, Folders, Works and Files can all have MODS descriptions.", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r386473417", "createdAt": "2020-03-02T15:46:30Z", "author": {"login": "bbpennel"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJob.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.deposit.work.AbstractDepositJob;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Bag;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.NodeIterator;\n+import org.apache.jena.vocabulary.RDF;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+/**\n+ * Job which registers ingested files to longleaf\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class RegisterToLongleafJob extends AbstractDepositJob {\n+    private static final Logger log = LoggerFactory.getLogger(RegisterToLongleafJob.class);\n+\n+    private String longleafBaseCommand;\n+    private String longleafLogPath;\n+\n+    public RegisterToLongleafJob() {\n+        super();\n+    }\n+\n+    public RegisterToLongleafJob(String uuid, String depositUUID) {\n+        super(uuid, depositUUID);\n+    }\n+\n+    @Override\n+    public void runJob() {\n+        log.info(\"Registering files from deposit {} to longleaf\", getDepositPID());\n+\n+        Model model = getReadOnlyModel();\n+        Bag depositBag = model.getBag(getDepositPID().getRepositoryPath());\n+\n+        registerFilesToLongleaf(depositBag);\n+    }\n+\n+    public void registerFilesToLongleaf(Resource resc) {\n+        Set<Resource> rescTypes = resc.listProperties(RDF.type).toList().stream()\n+                .map(Statement::getResource).collect(toSet());\n+\n+        if (rescTypes.contains(Cdr.FileObject)) {\n+            String checksum = resc.getProperty(CdrDeposit.md5sum).getString();\n+            if (resc.hasProperty(CdrDeposit.storageUri)) {\n+                registerFile(resc.getProperty(CdrDeposit.storageUri).getString().replace(\"file:\", \"\"),\n+                        resc.getURI(), checksum);\n+            } else if (resc.hasProperty(CdrDeposit.descriptiveStorageUri)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc05b4dea45e55eefd9fa5c3b1d46151a686c1c"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NzMwMg==", "bodyText": "Minor suggestion, but it would probably be best to parse the value into a URI (URI.create(string) should be fine here) which gets passed into registerFile. Then in register file, you can do Paths.get(storageUri) and then I believe toString on the path gives you the file path without the scheme. I know its more steps, but lets you use the standard java mechanisms for working with uris/paths and gets things a little more ready for the future in which we may not have file uris in all cases.", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r386477302", "createdAt": "2020-03-02T15:51:57Z", "author": {"login": "bbpennel"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJob.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.deposit.work.AbstractDepositJob;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Bag;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.NodeIterator;\n+import org.apache.jena.vocabulary.RDF;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+/**\n+ * Job which registers ingested files to longleaf\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class RegisterToLongleafJob extends AbstractDepositJob {\n+    private static final Logger log = LoggerFactory.getLogger(RegisterToLongleafJob.class);\n+\n+    private String longleafBaseCommand;\n+    private String longleafLogPath;\n+\n+    public RegisterToLongleafJob() {\n+        super();\n+    }\n+\n+    public RegisterToLongleafJob(String uuid, String depositUUID) {\n+        super(uuid, depositUUID);\n+    }\n+\n+    @Override\n+    public void runJob() {\n+        log.info(\"Registering files from deposit {} to longleaf\", getDepositPID());\n+\n+        Model model = getReadOnlyModel();\n+        Bag depositBag = model.getBag(getDepositPID().getRepositoryPath());\n+\n+        registerFilesToLongleaf(depositBag);\n+    }\n+\n+    public void registerFilesToLongleaf(Resource resc) {\n+        Set<Resource> rescTypes = resc.listProperties(RDF.type).toList().stream()\n+                .map(Statement::getResource).collect(toSet());\n+\n+        if (rescTypes.contains(Cdr.FileObject)) {\n+            String checksum = resc.getProperty(CdrDeposit.md5sum).getString();\n+            if (resc.hasProperty(CdrDeposit.storageUri)) {\n+                registerFile(resc.getProperty(CdrDeposit.storageUri).getString().replace(\"file:\", \"\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc05b4dea45e55eefd9fa5c3b1d46151a686c1c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3OTAyNA==", "bodyText": "We would also want to register manifest files from deposit records (they use storageUri as well), and fits extracts for FileObjects (fitsStorageUri), and PREMIS logs for everything. The premis logs don't get their location recorded in the deposit model at the moment, it might make sense to start recording that in there, or to have the PremisLogger class have a way to get the location of the log back. I am happy to add a way to get the PREMIS file location if that'd be helpful.\nYou might actually just want to seek the uris that are available rather than checking object types now that I think about it.", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r386479024", "createdAt": "2020-03-02T15:54:21Z", "author": {"login": "bbpennel"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJob.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.deposit.work.AbstractDepositJob;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Bag;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.NodeIterator;\n+import org.apache.jena.vocabulary.RDF;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+/**\n+ * Job which registers ingested files to longleaf\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class RegisterToLongleafJob extends AbstractDepositJob {\n+    private static final Logger log = LoggerFactory.getLogger(RegisterToLongleafJob.class);\n+\n+    private String longleafBaseCommand;\n+    private String longleafLogPath;\n+\n+    public RegisterToLongleafJob() {\n+        super();\n+    }\n+\n+    public RegisterToLongleafJob(String uuid, String depositUUID) {\n+        super(uuid, depositUUID);\n+    }\n+\n+    @Override\n+    public void runJob() {\n+        log.info(\"Registering files from deposit {} to longleaf\", getDepositPID());\n+\n+        Model model = getReadOnlyModel();\n+        Bag depositBag = model.getBag(getDepositPID().getRepositoryPath());\n+\n+        registerFilesToLongleaf(depositBag);\n+    }\n+\n+    public void registerFilesToLongleaf(Resource resc) {\n+        Set<Resource> rescTypes = resc.listProperties(RDF.type).toList().stream()\n+                .map(Statement::getResource).collect(toSet());\n+\n+        if (rescTypes.contains(Cdr.FileObject)) {\n+            String checksum = resc.getProperty(CdrDeposit.md5sum).getString();\n+            if (resc.hasProperty(CdrDeposit.storageUri)) {\n+                registerFile(resc.getProperty(CdrDeposit.storageUri).getString().replace(\"file:\", \"\"),\n+                        resc.getURI(), checksum);\n+            } else if (resc.hasProperty(CdrDeposit.descriptiveStorageUri)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MzQxNw=="}, "originalCommit": {"oid": "afc05b4dea45e55eefd9fa5c3b1d46151a686c1c"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3OTc3Ng==", "bodyText": "Can remove this or replace it with a log.debug", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r386479776", "createdAt": "2020-03-02T15:55:24Z", "author": {"login": "bbpennel"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJob.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.deposit.work.AbstractDepositJob;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Bag;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.NodeIterator;\n+import org.apache.jena.vocabulary.RDF;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+/**\n+ * Job which registers ingested files to longleaf\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class RegisterToLongleafJob extends AbstractDepositJob {\n+    private static final Logger log = LoggerFactory.getLogger(RegisterToLongleafJob.class);\n+\n+    private String longleafBaseCommand;\n+    private String longleafLogPath;\n+\n+    public RegisterToLongleafJob() {\n+        super();\n+    }\n+\n+    public RegisterToLongleafJob(String uuid, String depositUUID) {\n+        super(uuid, depositUUID);\n+    }\n+\n+    @Override\n+    public void runJob() {\n+        log.info(\"Registering files from deposit {} to longleaf\", getDepositPID());\n+\n+        Model model = getReadOnlyModel();\n+        Bag depositBag = model.getBag(getDepositPID().getRepositoryPath());\n+\n+        registerFilesToLongleaf(depositBag);\n+    }\n+\n+    public void registerFilesToLongleaf(Resource resc) {\n+        Set<Resource> rescTypes = resc.listProperties(RDF.type).toList().stream()\n+                .map(Statement::getResource).collect(toSet());\n+\n+        if (rescTypes.contains(Cdr.FileObject)) {\n+            String checksum = resc.getProperty(CdrDeposit.md5sum).getString();\n+            if (resc.hasProperty(CdrDeposit.storageUri)) {\n+                registerFile(resc.getProperty(CdrDeposit.storageUri).getString().replace(\"file:\", \"\"),\n+                        resc.getURI(), checksum);\n+            } else if (resc.hasProperty(CdrDeposit.descriptiveStorageUri)) {\n+                registerFile(resc.getProperty(CdrDeposit.descriptiveStorageUri).getString(), resc.getURI(), checksum);\n+            } else {\n+                log.info(\"File {} does not have storageUri or descriptiveStorageUri properties\", resc.getURI());\n+            }\n+        }\n+\n+        NodeIterator iterator = getChildIterator(resc);\n+        // No more children, nothing further to do in this tree\n+        if (iterator == null) {\n+            return;\n+        }\n+\n+        try {\n+            while (iterator.hasNext()) {\n+                Resource childResc = (Resource) iterator.next();\n+                registerFilesToLongleaf(childResc);\n+            }\n+        } finally {\n+            iterator.close();\n+        }\n+    }\n+\n+    private void registerFile(String fileLocation, String fileId, String checksum) {\n+        long start = System.currentTimeMillis();\n+\n+        try {\n+            System.out.println(fileLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc05b4dea45e55eefd9fa5c3b1d46151a686c1c"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ5Nzk2OA==", "bodyText": "Having a separate log file is a good idea. I would suggest using the logging framework to make it a bit easier to control though. You can add something like:\nprivate static final Logger longleafLog = LoggerFactory.getLogger(\"longleaf\");\nto the top of this file, and then call longleafLog.info or whatever in order to write to it. I think it will automatically send the output to the root logger if you don't configure it. But then we can also update the logback config file for dev and test to send it to a particular path, rather than having to inject a property into this job.\nIts also possible to redirect info versus error statements to different log files, which may be helpful in production-like environments.", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r386497968", "createdAt": "2020-03-02T16:22:38Z", "author": {"login": "bbpennel"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJob.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.deposit.work.AbstractDepositJob;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Bag;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.NodeIterator;\n+import org.apache.jena.vocabulary.RDF;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+/**\n+ * Job which registers ingested files to longleaf\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class RegisterToLongleafJob extends AbstractDepositJob {\n+    private static final Logger log = LoggerFactory.getLogger(RegisterToLongleafJob.class);\n+\n+    private String longleafBaseCommand;\n+    private String longleafLogPath;\n+\n+    public RegisterToLongleafJob() {\n+        super();\n+    }\n+\n+    public RegisterToLongleafJob(String uuid, String depositUUID) {\n+        super(uuid, depositUUID);\n+    }\n+\n+    @Override\n+    public void runJob() {\n+        log.info(\"Registering files from deposit {} to longleaf\", getDepositPID());\n+\n+        Model model = getReadOnlyModel();\n+        Bag depositBag = model.getBag(getDepositPID().getRepositoryPath());\n+\n+        registerFilesToLongleaf(depositBag);\n+    }\n+\n+    public void registerFilesToLongleaf(Resource resc) {\n+        Set<Resource> rescTypes = resc.listProperties(RDF.type).toList().stream()\n+                .map(Statement::getResource).collect(toSet());\n+\n+        if (rescTypes.contains(Cdr.FileObject)) {\n+            String checksum = resc.getProperty(CdrDeposit.md5sum).getString();\n+            if (resc.hasProperty(CdrDeposit.storageUri)) {\n+                registerFile(resc.getProperty(CdrDeposit.storageUri).getString().replace(\"file:\", \"\"),\n+                        resc.getURI(), checksum);\n+            } else if (resc.hasProperty(CdrDeposit.descriptiveStorageUri)) {\n+                registerFile(resc.getProperty(CdrDeposit.descriptiveStorageUri).getString(), resc.getURI(), checksum);\n+            } else {\n+                log.info(\"File {} does not have storageUri or descriptiveStorageUri properties\", resc.getURI());\n+            }\n+        }\n+\n+        NodeIterator iterator = getChildIterator(resc);\n+        // No more children, nothing further to do in this tree\n+        if (iterator == null) {\n+            return;\n+        }\n+\n+        try {\n+            while (iterator.hasNext()) {\n+                Resource childResc = (Resource) iterator.next();\n+                registerFilesToLongleaf(childResc);\n+            }\n+        } finally {\n+            iterator.close();\n+        }\n+    }\n+\n+    private void registerFile(String fileLocation, String fileId, String checksum) {\n+        long start = System.currentTimeMillis();\n+\n+        try {\n+            System.out.println(fileLocation);\n+            String longleafCommmand = longleafBaseCommand + \" register -f \" + fileLocation + \" --checksums 'md5:\" +\n+                    checksum + \"' --force\";\n+            log.info(\"Registering with longleaf: {}\", longleafCommmand);\n+\n+            Process process = Runtime.getRuntime().exec(longleafCommmand);\n+\n+            int exitVal = process.waitFor();\n+\n+            // log longleaf output\n+            String line;\n+            BufferedWriter longleafLogWriter = new BufferedWriter(new FileWriter(longleafLogPath, true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc05b4dea45e55eefd9fa5c3b1d46151a686c1c"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMTIxMA==", "bodyText": "Use try (BufferedReader in = new BufferedReader(...)) { syntax so you don't need to worry about closing the reader. Otherwise you'll need to add the close into a finally block here.", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r386501210", "createdAt": "2020-03-02T16:27:41Z", "author": {"login": "bbpennel"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJob.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.deposit.work.AbstractDepositJob;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Bag;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.NodeIterator;\n+import org.apache.jena.vocabulary.RDF;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+/**\n+ * Job which registers ingested files to longleaf\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class RegisterToLongleafJob extends AbstractDepositJob {\n+    private static final Logger log = LoggerFactory.getLogger(RegisterToLongleafJob.class);\n+\n+    private String longleafBaseCommand;\n+    private String longleafLogPath;\n+\n+    public RegisterToLongleafJob() {\n+        super();\n+    }\n+\n+    public RegisterToLongleafJob(String uuid, String depositUUID) {\n+        super(uuid, depositUUID);\n+    }\n+\n+    @Override\n+    public void runJob() {\n+        log.info(\"Registering files from deposit {} to longleaf\", getDepositPID());\n+\n+        Model model = getReadOnlyModel();\n+        Bag depositBag = model.getBag(getDepositPID().getRepositoryPath());\n+\n+        registerFilesToLongleaf(depositBag);\n+    }\n+\n+    public void registerFilesToLongleaf(Resource resc) {\n+        Set<Resource> rescTypes = resc.listProperties(RDF.type).toList().stream()\n+                .map(Statement::getResource).collect(toSet());\n+\n+        if (rescTypes.contains(Cdr.FileObject)) {\n+            String checksum = resc.getProperty(CdrDeposit.md5sum).getString();\n+            if (resc.hasProperty(CdrDeposit.storageUri)) {\n+                registerFile(resc.getProperty(CdrDeposit.storageUri).getString().replace(\"file:\", \"\"),\n+                        resc.getURI(), checksum);\n+            } else if (resc.hasProperty(CdrDeposit.descriptiveStorageUri)) {\n+                registerFile(resc.getProperty(CdrDeposit.descriptiveStorageUri).getString(), resc.getURI(), checksum);\n+            } else {\n+                log.info(\"File {} does not have storageUri or descriptiveStorageUri properties\", resc.getURI());\n+            }\n+        }\n+\n+        NodeIterator iterator = getChildIterator(resc);\n+        // No more children, nothing further to do in this tree\n+        if (iterator == null) {\n+            return;\n+        }\n+\n+        try {\n+            while (iterator.hasNext()) {\n+                Resource childResc = (Resource) iterator.next();\n+                registerFilesToLongleaf(childResc);\n+            }\n+        } finally {\n+            iterator.close();\n+        }\n+    }\n+\n+    private void registerFile(String fileLocation, String fileId, String checksum) {\n+        long start = System.currentTimeMillis();\n+\n+        try {\n+            System.out.println(fileLocation);\n+            String longleafCommmand = longleafBaseCommand + \" register -f \" + fileLocation + \" --checksums 'md5:\" +\n+                    checksum + \"' --force\";\n+            log.info(\"Registering with longleaf: {}\", longleafCommmand);\n+\n+            Process process = Runtime.getRuntime().exec(longleafCommmand);\n+\n+            int exitVal = process.waitFor();\n+\n+            // log longleaf output\n+            String line;\n+            BufferedWriter longleafLogWriter = new BufferedWriter(new FileWriter(longleafLogPath, true));\n+            BufferedReader in = new BufferedReader(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc05b4dea45e55eefd9fa5c3b1d46151a686c1c"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwODUzNQ==", "bodyText": "this approach for test files works too, but wanted to mentioned that junit has a built in mechanism for making files and directories that get cleaned up:\nhttps://github.com/UNC-Libraries/Carolina-Digital-Repository/blob/fcrepo4/persistence/src/test/java/edu/unc/lib/dl/persist/services/storage/StorageLocationManagerImplTest.java#L73", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r386508535", "createdAt": "2020-03-02T16:38:51Z", "author": {"login": "bbpennel"}, "path": "deposit/src/test/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJobTest.java", "diffHunk": "@@ -0,0 +1,237 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.query.Dataset;\n+import org.apache.jena.rdf.model.*;\n+import org.apache.jena.tdb.TDBFactory;\n+import org.apache.jena.vocabulary.RDF;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.nio.file.Path;\n+\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+public class RegisterToLongleafJobTest extends AbstractDepositJobTest {\n+\n+    private final static String LOC1_ID = \"loc1\";\n+    private final static String LOC2_ID = \"loc2\";\n+    private final static String LOC3_ID = \"loc3\";\n+    private final static String FILE_CONTENT1 = \"Some content\";\n+    private final static String FILE_CONTENT2 = \"Other stuff\";\n+    private final static String MD5 = \"MD5 checksum\";\n+\n+    private RegisterToLongleafJob job;\n+    private PID depositPid;\n+    private Bag depBag;\n+    private Model model;\n+    private Path storageLocPath;\n+    private String outputPath;\n+    private String logPath;\n+    private String longleafScript;\n+\n+    @Before\n+    public void init() throws Exception {\n+        Dataset dataset = TDBFactory.createDataset();\n+\n+        job = new RegisterToLongleafJob();\n+        job.setJobUUID(jobUUID);\n+        job.setDepositUUID(depositUUID);\n+        job.setDepositDirectory(depositDir);\n+        setField(job, \"dataset\", dataset);\n+\n+        outputPath = createOutputFile();\n+        logPath = createOutputFile();\n+        longleafScript = getLongleafScript(outputPath);\n+        job.setLongleafBaseCommand(longleafScript);\n+        job.setLongleafLogPath(logPath);\n+\n+        job.init();\n+\n+        // Get a writeable model\n+        model = job.getWritableModel();\n+\n+        depositPid = job.getDepositPID();\n+        storageLocPath = tmpFolder.newFolder(\"storageLoc\").toPath();\n+        depBag = model.createBag(depositPid.getRepositoryPath());\n+        depBag.addProperty(Cdr.storageLocation, LOC1_ID);\n+    }\n+\n+    /**\n+     * Test that a single file in an ingested work is registered to longleaf\n+     */\n+    @Test\n+    public void registerSingleFileToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc.addProperty(CdrDeposit.storageUri, LOC2_ID);\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC2_ID + \" --checksums 'md5:\" + MD5 + \"' --force\";\n+\n+        File file = new File(outputPath);\n+        BufferedReader br = new BufferedReader(new FileReader(file));\n+        String output = br.readLine();\n+\n+        assertEquals(registrationArguments, output);\n+    }\n+\n+    /**\n+     * Test that longleaf registration is not triggered for works with no files\n+     */\n+    @Test\n+    public void registerWorkWithNoFilesToLongleaf() throws Exception {\n+        addContainerObject(depBag, Cdr.Work);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        File file = new File(outputPath);\n+        BufferedReader br = new BufferedReader(new FileReader(file));\n+        String output = br.readLine();\n+\n+        assertNull(output);\n+    }\n+\n+    /**\n+     * Test that multiple files in an ingested work are registered to longleaf\n+     */\n+    @Test\n+    public void registerWorkWithMultipleFilesToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc1 = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc1.addProperty(CdrDeposit.storageUri, LOC2_ID);\n+        workBag.addProperty(Cdr.primaryObject, fileResc1);\n+        Resource fileResc2 = addFileObject(workBag, FILE_CONTENT2, true);\n+        fileResc2.addProperty(CdrDeposit.storageUri, LOC3_ID);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments1 = \"register -f \" + LOC2_ID + \" --checksums 'md5:\" + MD5 + \"' --force\";\n+        String registrationArguments2 = \"register -f \" + LOC3_ID + \" --checksums 'md5:\" + MD5 + \"' --force\";\n+\n+        File file = new File(outputPath);\n+        BufferedReader br = new BufferedReader(new FileReader(file));\n+        String firstLine = br.readLine();\n+        String secondLine = br.readLine();\n+\n+        assertEquals(registrationArguments1, firstLine);\n+        assertEquals(registrationArguments2, secondLine);\n+    }\n+\n+    /**\n+     * Test that a mods file in an ingested work is registered to longleaf\n+     */\n+    @Test\n+    public void registerModsFilesToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc.addProperty(CdrDeposit.descriptiveStorageUri, LOC3_ID);\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC3_ID + \" --checksums 'md5:\" + MD5 + \"' --force\";\n+\n+        File file = new File(outputPath);\n+        BufferedReader br = new BufferedReader(new FileReader(file));\n+        String output = br.readLine();\n+\n+        assertEquals(registrationArguments, output);\n+    }\n+\n+    /**\n+     * Test that a file in a non-ingested work is not registered to longleaf\n+     */\n+    @Test\n+    public void registerFilesWhichHaveNotBeenIngestedToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        File file = new File(outputPath);\n+        BufferedReader br = new BufferedReader(new FileReader(file));\n+        String output = br.readLine();\n+\n+        assertNull(output);\n+    }\n+\n+    private Resource addFileObject(Bag parent, String content, boolean withFits) throws Exception {\n+        PID objPid = makePid();\n+        Resource objResc = model.getResource(objPid.getRepositoryPath());\n+        objResc.addProperty(RDF.type, Cdr.FileObject);\n+\n+        File originalFile = storageLocPath.resolve(objPid.getId() + \".txt\").toFile();\n+        FileUtils.writeStringToFile(originalFile, content, \"UTF-8\");\n+        objResc.addProperty(CdrDeposit.stagingLocation, originalFile.toPath().toUri().toString());\n+        objResc.addProperty(CdrDeposit.md5sum, MD5);\n+\n+        parent.add(objResc);\n+        return objResc;\n+    }\n+\n+    private Bag addContainerObject(Bag parent, Resource type) {\n+        PID objPid = makePid();\n+        Bag objBag = model.createBag(objPid.getRepositoryPath());\n+        objBag.addProperty(RDF.type, type);\n+        parent.add(objBag);\n+\n+        return objBag;\n+    }\n+\n+    private String createOutputFile() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc05b4dea45e55eefd9fa5c3b1d46151a686c1c"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxMDYwNQ==", "bodyText": "There are some built in java utilities for setting file permissions these days:\nhttps://stackoverflow.com/questions/664432/how-do-i-programmatically-change-file-permissions", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r386510605", "createdAt": "2020-03-02T16:42:15Z", "author": {"login": "bbpennel"}, "path": "deposit/src/test/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJobTest.java", "diffHunk": "@@ -0,0 +1,237 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.query.Dataset;\n+import org.apache.jena.rdf.model.*;\n+import org.apache.jena.tdb.TDBFactory;\n+import org.apache.jena.vocabulary.RDF;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.nio.file.Path;\n+\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+public class RegisterToLongleafJobTest extends AbstractDepositJobTest {\n+\n+    private final static String LOC1_ID = \"loc1\";\n+    private final static String LOC2_ID = \"loc2\";\n+    private final static String LOC3_ID = \"loc3\";\n+    private final static String FILE_CONTENT1 = \"Some content\";\n+    private final static String FILE_CONTENT2 = \"Other stuff\";\n+    private final static String MD5 = \"MD5 checksum\";\n+\n+    private RegisterToLongleafJob job;\n+    private PID depositPid;\n+    private Bag depBag;\n+    private Model model;\n+    private Path storageLocPath;\n+    private String outputPath;\n+    private String logPath;\n+    private String longleafScript;\n+\n+    @Before\n+    public void init() throws Exception {\n+        Dataset dataset = TDBFactory.createDataset();\n+\n+        job = new RegisterToLongleafJob();\n+        job.setJobUUID(jobUUID);\n+        job.setDepositUUID(depositUUID);\n+        job.setDepositDirectory(depositDir);\n+        setField(job, \"dataset\", dataset);\n+\n+        outputPath = createOutputFile();\n+        logPath = createOutputFile();\n+        longleafScript = getLongleafScript(outputPath);\n+        job.setLongleafBaseCommand(longleafScript);\n+        job.setLongleafLogPath(logPath);\n+\n+        job.init();\n+\n+        // Get a writeable model\n+        model = job.getWritableModel();\n+\n+        depositPid = job.getDepositPID();\n+        storageLocPath = tmpFolder.newFolder(\"storageLoc\").toPath();\n+        depBag = model.createBag(depositPid.getRepositoryPath());\n+        depBag.addProperty(Cdr.storageLocation, LOC1_ID);\n+    }\n+\n+    /**\n+     * Test that a single file in an ingested work is registered to longleaf\n+     */\n+    @Test\n+    public void registerSingleFileToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc.addProperty(CdrDeposit.storageUri, LOC2_ID);\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC2_ID + \" --checksums 'md5:\" + MD5 + \"' --force\";\n+\n+        File file = new File(outputPath);\n+        BufferedReader br = new BufferedReader(new FileReader(file));\n+        String output = br.readLine();\n+\n+        assertEquals(registrationArguments, output);\n+    }\n+\n+    /**\n+     * Test that longleaf registration is not triggered for works with no files\n+     */\n+    @Test\n+    public void registerWorkWithNoFilesToLongleaf() throws Exception {\n+        addContainerObject(depBag, Cdr.Work);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        File file = new File(outputPath);\n+        BufferedReader br = new BufferedReader(new FileReader(file));\n+        String output = br.readLine();\n+\n+        assertNull(output);\n+    }\n+\n+    /**\n+     * Test that multiple files in an ingested work are registered to longleaf\n+     */\n+    @Test\n+    public void registerWorkWithMultipleFilesToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc1 = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc1.addProperty(CdrDeposit.storageUri, LOC2_ID);\n+        workBag.addProperty(Cdr.primaryObject, fileResc1);\n+        Resource fileResc2 = addFileObject(workBag, FILE_CONTENT2, true);\n+        fileResc2.addProperty(CdrDeposit.storageUri, LOC3_ID);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments1 = \"register -f \" + LOC2_ID + \" --checksums 'md5:\" + MD5 + \"' --force\";\n+        String registrationArguments2 = \"register -f \" + LOC3_ID + \" --checksums 'md5:\" + MD5 + \"' --force\";\n+\n+        File file = new File(outputPath);\n+        BufferedReader br = new BufferedReader(new FileReader(file));\n+        String firstLine = br.readLine();\n+        String secondLine = br.readLine();\n+\n+        assertEquals(registrationArguments1, firstLine);\n+        assertEquals(registrationArguments2, secondLine);\n+    }\n+\n+    /**\n+     * Test that a mods file in an ingested work is registered to longleaf\n+     */\n+    @Test\n+    public void registerModsFilesToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc.addProperty(CdrDeposit.descriptiveStorageUri, LOC3_ID);\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC3_ID + \" --checksums 'md5:\" + MD5 + \"' --force\";\n+\n+        File file = new File(outputPath);\n+        BufferedReader br = new BufferedReader(new FileReader(file));\n+        String output = br.readLine();\n+\n+        assertEquals(registrationArguments, output);\n+    }\n+\n+    /**\n+     * Test that a file in a non-ingested work is not registered to longleaf\n+     */\n+    @Test\n+    public void registerFilesWhichHaveNotBeenIngestedToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        File file = new File(outputPath);\n+        BufferedReader br = new BufferedReader(new FileReader(file));\n+        String output = br.readLine();\n+\n+        assertNull(output);\n+    }\n+\n+    private Resource addFileObject(Bag parent, String content, boolean withFits) throws Exception {\n+        PID objPid = makePid();\n+        Resource objResc = model.getResource(objPid.getRepositoryPath());\n+        objResc.addProperty(RDF.type, Cdr.FileObject);\n+\n+        File originalFile = storageLocPath.resolve(objPid.getId() + \".txt\").toFile();\n+        FileUtils.writeStringToFile(originalFile, content, \"UTF-8\");\n+        objResc.addProperty(CdrDeposit.stagingLocation, originalFile.toPath().toUri().toString());\n+        objResc.addProperty(CdrDeposit.md5sum, MD5);\n+\n+        parent.add(objResc);\n+        return objResc;\n+    }\n+\n+    private Bag addContainerObject(Bag parent, Resource type) {\n+        PID objPid = makePid();\n+        Bag objBag = model.createBag(objPid.getRepositoryPath());\n+        objBag.addProperty(RDF.type, type);\n+        parent.add(objBag);\n+\n+        return objBag;\n+    }\n+\n+    private String createOutputFile() throws Exception {\n+        File outputFile = File.createTempFile(\"output\", \".txt\");\n+        outputFile.deleteOnExit();\n+\n+        return outputFile.getAbsolutePath();\n+    }\n+\n+    private String getLongleafScript(String outputPath) throws Exception {\n+        String scriptContent = \"#!/usr/bin/env bash\\necho $@ >> \" + outputPath;\n+        File longleafScript = File.createTempFile(\"longleaf\", \".sh\");\n+\n+        FileUtils.write(longleafScript, scriptContent, \"UTF-8\");\n+\n+        longleafScript.deleteOnExit();\n+\n+        Runtime.getRuntime().exec(\"chmod u+x \" + longleafScript.getAbsolutePath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc05b4dea45e55eefd9fa5c3b1d46151a686c1c"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxMjM3Mg==", "bodyText": "i think you can skip the force flag here since that is just needed for registering files that have previous been registered, which shouldn't be the case for ingest.", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r386512372", "createdAt": "2020-03-02T16:45:01Z", "author": {"login": "bbpennel"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJob.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.deposit.work.AbstractDepositJob;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Bag;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.NodeIterator;\n+import org.apache.jena.vocabulary.RDF;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+/**\n+ * Job which registers ingested files to longleaf\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class RegisterToLongleafJob extends AbstractDepositJob {\n+    private static final Logger log = LoggerFactory.getLogger(RegisterToLongleafJob.class);\n+\n+    private String longleafBaseCommand;\n+    private String longleafLogPath;\n+\n+    public RegisterToLongleafJob() {\n+        super();\n+    }\n+\n+    public RegisterToLongleafJob(String uuid, String depositUUID) {\n+        super(uuid, depositUUID);\n+    }\n+\n+    @Override\n+    public void runJob() {\n+        log.info(\"Registering files from deposit {} to longleaf\", getDepositPID());\n+\n+        Model model = getReadOnlyModel();\n+        Bag depositBag = model.getBag(getDepositPID().getRepositoryPath());\n+\n+        registerFilesToLongleaf(depositBag);\n+    }\n+\n+    public void registerFilesToLongleaf(Resource resc) {\n+        Set<Resource> rescTypes = resc.listProperties(RDF.type).toList().stream()\n+                .map(Statement::getResource).collect(toSet());\n+\n+        if (rescTypes.contains(Cdr.FileObject)) {\n+            String checksum = resc.getProperty(CdrDeposit.md5sum).getString();\n+            if (resc.hasProperty(CdrDeposit.storageUri)) {\n+                registerFile(resc.getProperty(CdrDeposit.storageUri).getString().replace(\"file:\", \"\"),\n+                        resc.getURI(), checksum);\n+            } else if (resc.hasProperty(CdrDeposit.descriptiveStorageUri)) {\n+                registerFile(resc.getProperty(CdrDeposit.descriptiveStorageUri).getString(), resc.getURI(), checksum);\n+            } else {\n+                log.info(\"File {} does not have storageUri or descriptiveStorageUri properties\", resc.getURI());\n+            }\n+        }\n+\n+        NodeIterator iterator = getChildIterator(resc);\n+        // No more children, nothing further to do in this tree\n+        if (iterator == null) {\n+            return;\n+        }\n+\n+        try {\n+            while (iterator.hasNext()) {\n+                Resource childResc = (Resource) iterator.next();\n+                registerFilesToLongleaf(childResc);\n+            }\n+        } finally {\n+            iterator.close();\n+        }\n+    }\n+\n+    private void registerFile(String fileLocation, String fileId, String checksum) {\n+        long start = System.currentTimeMillis();\n+\n+        try {\n+            System.out.println(fileLocation);\n+            String longleafCommmand = longleafBaseCommand + \" register -f \" + fileLocation + \" --checksums 'md5:\" +\n+                    checksum + \"' --force\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc05b4dea45e55eefd9fa5c3b1d46151a686c1c"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxMzc5MA==", "bodyText": "You can do FileUtils.readFileToString(file, encoding) as a shortcut for reading the output file.", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r386513790", "createdAt": "2020-03-02T16:47:27Z", "author": {"login": "bbpennel"}, "path": "deposit/src/test/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJobTest.java", "diffHunk": "@@ -0,0 +1,237 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.query.Dataset;\n+import org.apache.jena.rdf.model.*;\n+import org.apache.jena.tdb.TDBFactory;\n+import org.apache.jena.vocabulary.RDF;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.nio.file.Path;\n+\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+public class RegisterToLongleafJobTest extends AbstractDepositJobTest {\n+\n+    private final static String LOC1_ID = \"loc1\";\n+    private final static String LOC2_ID = \"loc2\";\n+    private final static String LOC3_ID = \"loc3\";\n+    private final static String FILE_CONTENT1 = \"Some content\";\n+    private final static String FILE_CONTENT2 = \"Other stuff\";\n+    private final static String MD5 = \"MD5 checksum\";\n+\n+    private RegisterToLongleafJob job;\n+    private PID depositPid;\n+    private Bag depBag;\n+    private Model model;\n+    private Path storageLocPath;\n+    private String outputPath;\n+    private String logPath;\n+    private String longleafScript;\n+\n+    @Before\n+    public void init() throws Exception {\n+        Dataset dataset = TDBFactory.createDataset();\n+\n+        job = new RegisterToLongleafJob();\n+        job.setJobUUID(jobUUID);\n+        job.setDepositUUID(depositUUID);\n+        job.setDepositDirectory(depositDir);\n+        setField(job, \"dataset\", dataset);\n+\n+        outputPath = createOutputFile();\n+        logPath = createOutputFile();\n+        longleafScript = getLongleafScript(outputPath);\n+        job.setLongleafBaseCommand(longleafScript);\n+        job.setLongleafLogPath(logPath);\n+\n+        job.init();\n+\n+        // Get a writeable model\n+        model = job.getWritableModel();\n+\n+        depositPid = job.getDepositPID();\n+        storageLocPath = tmpFolder.newFolder(\"storageLoc\").toPath();\n+        depBag = model.createBag(depositPid.getRepositoryPath());\n+        depBag.addProperty(Cdr.storageLocation, LOC1_ID);\n+    }\n+\n+    /**\n+     * Test that a single file in an ingested work is registered to longleaf\n+     */\n+    @Test\n+    public void registerSingleFileToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc.addProperty(CdrDeposit.storageUri, LOC2_ID);\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC2_ID + \" --checksums 'md5:\" + MD5 + \"' --force\";\n+\n+        File file = new File(outputPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc05b4dea45e55eefd9fa5c3b1d46151a686c1c"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e294f8294d0e1e15448c9b844a27d58fa400a9c0", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/e294f8294d0e1e15448c9b844a27d58fa400a9c0", "committedDate": "2020-03-05T17:15:38Z", "message": "Add premis log location to deposit model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc483fd3cc3bb614b515fe7a6a5f1a32020fac5d", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/bc483fd3cc3bb614b515fe7a6a5f1a32020fac5d", "committedDate": "2020-03-05T17:33:57Z", "message": "Update RegisterLongleafJob to register all files associated with deposit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODA4Mjc4", "url": "https://github.com/UNC-Libraries/box-c/pull/911#pullrequestreview-369808278", "createdAt": "2020-03-05T18:25:13Z", "commit": {"oid": "bc483fd3cc3bb614b515fe7a6a5f1a32020fac5d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODoyNToxM1rOFye03g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1NjoyMFrOFyf2Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3ODE3NA==", "bodyText": "one minor suggestion, i'd recommend using null to represent the absence of something rather than an empty string", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r388478174", "createdAt": "2020-03-05T18:25:13Z", "author": {"login": "bbpennel"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJob.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.deposit.work.AbstractDepositJob;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Bag;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.NodeIterator;\n+import org.apache.jena.rdf.model.StmtIterator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URI;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Job which registers ingested files to longleaf\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class RegisterToLongleafJob extends AbstractDepositJob {\n+    private static final Logger log = LoggerFactory.getLogger(RegisterToLongleafJob.class);\n+    private static final Logger longleafLog = LoggerFactory.getLogger(\"longleaf\");\n+\n+    private String longleafBaseCommand;\n+\n+    public RegisterToLongleafJob() {\n+        super();\n+    }\n+\n+    public RegisterToLongleafJob(String uuid, String depositUUID) {\n+        super(uuid, depositUUID);\n+    }\n+\n+    @Override\n+    public void runJob() {\n+        log.info(\"Registering files from deposit {} to longleaf\", getDepositPID());\n+\n+        Model model = getReadOnlyModel();\n+        Bag depositBag = model.getBag(getDepositPID().getRepositoryPath());\n+\n+        registerFilesToLongleaf(depositBag);\n+    }\n+\n+    /**\n+     * Iterates through deposit bag to find files which can be registered with\n+     * longleaf\n+     *\n+     * @param resc\n+     */\n+    public void registerFilesToLongleaf(Resource resc) {\n+        StmtIterator statementIterator = resc.listProperties();\n+        try {\n+            while (statementIterator.hasNext()) {\n+                Statement currentStatement = statementIterator.nextStatement();\n+\n+                // find storageUri, descriptiveStorageUri, fitsStorageUri, premisStorageUri\n+                if (currentStatement.getPredicate().toString().matches(\".*Uri\")) {\n+                    URI storageUri = URI.create(currentStatement.getString());\n+                    if (currentStatement.getString().matches(\".*original_file\")) {\n+                        String checksum = resc.getProperty(CdrDeposit.md5sum).getString();\n+                        registerFile(storageUri, checksum);\n+                    } else {\n+                        registerFile(storageUri, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc483fd3cc3bb614b515fe7a6a5f1a32020fac5d"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NDEzMQ==", "bodyText": "Could you verify that this is the right path? My memory is that this is the pre-ingest location where the premis file is stored, rather than post-ingest. I don't think the path of the post-ingest log exists until after IngestContentObjectJob and IngestDepositRecordJob have completed.\nThe following might be a way to get the path in RegisterToLongleafJob, but i haven't tested it:\nBinaryObject premisBin = repositoryObjectLoader.getBinaryObject(DatastreamPids.getMdEventsPid(pid));\nURI premisStorageUri = premisBin.getContentUri();\n\nBut only after the ingest content/deposit jobs have completed, meaning it wouldn't work in this job since the objects haven't been ingested into fedora yet.", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r388484131", "createdAt": "2020-03-05T18:36:19Z", "author": {"login": "bbpennel"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/transfer/TransferBinariesToStorageJob.java", "diffHunk": "@@ -103,6 +103,10 @@ private void transferBinaries(Resource resc, BinaryTransferSession transferSessi\n             transferDepositManifests(objPid, resc, transferSession);\n         }\n \n+        // Add premis log location to deposit model\n+        Path premisLogPath = getPremisFile(objPid).toPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc483fd3cc3bb614b515fe7a6a5f1a32020fac5d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NzM2Ng==", "bodyText": "Just to make sure i understand this test, its to verify that a file that is in the deposit but has no storage uri is not registered to longleaf?", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r388487366", "createdAt": "2020-03-05T18:42:45Z", "author": {"login": "bbpennel"}, "path": "deposit/src/test/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJobTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.query.Dataset;\n+import org.apache.jena.rdf.model.*;\n+import org.apache.jena.tdb.TDBFactory;\n+import org.apache.jena.vocabulary.RDF;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Set;\n+\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+\n+public class RegisterToLongleafJobTest extends AbstractDepositJobTest {\n+    @Rule\n+    public final TemporaryFolder tmpFolder = new TemporaryFolder();\n+\n+    private final static String FILE_SCHEME = \"file:\";\n+    private final static String LOC1_ID = \"/some/path/loc1\";\n+    private final static String LOC2_ID = \"/some/path/loc2\";\n+    private final static String LOC3_ID = \"/some/path/loc3\";\n+    private final static String FILE_CONTENT1 = \"Some content\";\n+    private final static String FILE_CONTENT2 = \"Other stuff\";\n+    private final static String MD5 = \"MD5 checksum\";\n+\n+    private RegisterToLongleafJob job;\n+    private PID depositPid;\n+    private Bag depBag;\n+    private Model model;\n+    private Path storageLocPath;\n+    private String outputPath;\n+    private String longleafScript;\n+\n+    @Before\n+    public void init() throws Exception {\n+        tmpFolder.create();\n+\n+        Dataset dataset = TDBFactory.createDataset();\n+\n+        job = new RegisterToLongleafJob();\n+        job.setJobUUID(jobUUID);\n+        job.setDepositUUID(depositUUID);\n+        job.setDepositDirectory(depositDir);\n+        setField(job, \"dataset\", dataset);\n+\n+        outputPath = tmpFolder.newFile().getPath();\n+        longleafScript = getLongleafScript(outputPath);\n+        job.setLongleafBaseCommand(longleafScript);\n+\n+        job.init();\n+\n+        // Get a writeable model\n+        model = job.getWritableModel();\n+\n+        depositPid = job.getDepositPID();\n+        storageLocPath = tmpFolder.newFolder(\"storageLoc\").toPath();\n+        depBag = model.createBag(depositPid.getRepositoryPath());\n+        depBag.addProperty(Cdr.storageLocation, LOC1_ID);\n+    }\n+\n+    @Test\n+    public void registerSingleFileToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc.addProperty(CdrDeposit.storageUri, FILE_SCHEME + LOC2_ID + \"/original_file\");\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC2_ID  + \"/original_file --checksums 'md5:\" + MD5 + \"'\\n\";\n+        String output = FileUtils.readFileToString(new File(outputPath));\n+\n+        assertEquals(registrationArguments, output);\n+    }\n+\n+    @Test\n+    public void registerWorkWithNoFilesToLongleaf() throws Exception {\n+        addContainerObject(depBag, Cdr.Work);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String output = FileUtils.readFileToString(new File(outputPath));\n+\n+        assertEquals(\"\", output);\n+    }\n+\n+    @Test\n+    public void registerWorkWithMultipleFilesToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc1 = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc1.addProperty(CdrDeposit.storageUri, FILE_SCHEME + LOC2_ID + \"/original_file\");\n+        workBag.addProperty(Cdr.primaryObject, fileResc1);\n+        Resource fileResc2 = addFileObject(workBag, FILE_CONTENT2, true);\n+        fileResc2.addProperty(CdrDeposit.storageUri, FILE_SCHEME + LOC3_ID);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC2_ID + \"/original_file --checksums 'md5:\" + MD5 + \"'\\n\" +\n+                \"register -f \" + LOC3_ID + \"\\n\";\n+        String output = FileUtils.readFileToString(new File(outputPath));\n+\n+        assertEquals(registrationArguments, output);\n+    }\n+\n+    @Test\n+    public void registerModsFilesToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc.addProperty(CdrDeposit.descriptiveStorageUri, FILE_SCHEME + LOC3_ID);\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC3_ID + \"\\n\";\n+        String output = FileUtils.readFileToString(new File(outputPath));\n+\n+        assertEquals(registrationArguments, output);\n+    }\n+\n+    @Test\n+    public void registerFitsExtractFilesToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc.addProperty(CdrDeposit.fitsStorageUri, FILE_SCHEME + LOC3_ID);\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC3_ID + \"\\n\";\n+        String output = FileUtils.readFileToString(new File(outputPath));\n+\n+        assertEquals(registrationArguments, output);\n+    }\n+\n+    @Test\n+    public void registerPremisLogFilesToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc.addProperty(CdrDeposit.premisStorageUri, FILE_SCHEME + LOC3_ID);\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC3_ID + \"\\n\";\n+        String output = FileUtils.readFileToString(new File(outputPath));\n+\n+        assertEquals(registrationArguments, output);\n+    }\n+\n+    @Test\n+    public void registerFilesWhichHaveNotBeenIngestedToLongleaf() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc483fd3cc3bb614b515fe7a6a5f1a32020fac5d"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MjAxMQ==", "bodyText": "add a StandardCharsets.UTF-8 to each of these readFileToString, my IDE gets grumpy without it :)\nAlso, just a suggestion, but if you hold onto the File object representation of the outputPath when its first created you could save a bit of effort on instantiating new file objects.", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r388492011", "createdAt": "2020-03-05T18:51:25Z", "author": {"login": "bbpennel"}, "path": "deposit/src/test/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJobTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.query.Dataset;\n+import org.apache.jena.rdf.model.*;\n+import org.apache.jena.tdb.TDBFactory;\n+import org.apache.jena.vocabulary.RDF;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Set;\n+\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+\n+public class RegisterToLongleafJobTest extends AbstractDepositJobTest {\n+    @Rule\n+    public final TemporaryFolder tmpFolder = new TemporaryFolder();\n+\n+    private final static String FILE_SCHEME = \"file:\";\n+    private final static String LOC1_ID = \"/some/path/loc1\";\n+    private final static String LOC2_ID = \"/some/path/loc2\";\n+    private final static String LOC3_ID = \"/some/path/loc3\";\n+    private final static String FILE_CONTENT1 = \"Some content\";\n+    private final static String FILE_CONTENT2 = \"Other stuff\";\n+    private final static String MD5 = \"MD5 checksum\";\n+\n+    private RegisterToLongleafJob job;\n+    private PID depositPid;\n+    private Bag depBag;\n+    private Model model;\n+    private Path storageLocPath;\n+    private String outputPath;\n+    private String longleafScript;\n+\n+    @Before\n+    public void init() throws Exception {\n+        tmpFolder.create();\n+\n+        Dataset dataset = TDBFactory.createDataset();\n+\n+        job = new RegisterToLongleafJob();\n+        job.setJobUUID(jobUUID);\n+        job.setDepositUUID(depositUUID);\n+        job.setDepositDirectory(depositDir);\n+        setField(job, \"dataset\", dataset);\n+\n+        outputPath = tmpFolder.newFile().getPath();\n+        longleafScript = getLongleafScript(outputPath);\n+        job.setLongleafBaseCommand(longleafScript);\n+\n+        job.init();\n+\n+        // Get a writeable model\n+        model = job.getWritableModel();\n+\n+        depositPid = job.getDepositPID();\n+        storageLocPath = tmpFolder.newFolder(\"storageLoc\").toPath();\n+        depBag = model.createBag(depositPid.getRepositoryPath());\n+        depBag.addProperty(Cdr.storageLocation, LOC1_ID);\n+    }\n+\n+    @Test\n+    public void registerSingleFileToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc.addProperty(CdrDeposit.storageUri, FILE_SCHEME + LOC2_ID + \"/original_file\");\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC2_ID  + \"/original_file --checksums 'md5:\" + MD5 + \"'\\n\";\n+        String output = FileUtils.readFileToString(new File(outputPath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc483fd3cc3bb614b515fe7a6a5f1a32020fac5d"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NDg3NA==", "bodyText": "These tests look good. Could you add one more which verifies things work properly if the same object has multiple types of file? So mods, fits, premis, original file, or some subset of them.", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r388494874", "createdAt": "2020-03-05T18:56:20Z", "author": {"login": "bbpennel"}, "path": "deposit/src/test/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJobTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.query.Dataset;\n+import org.apache.jena.rdf.model.*;\n+import org.apache.jena.tdb.TDBFactory;\n+import org.apache.jena.vocabulary.RDF;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Set;\n+\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+\n+public class RegisterToLongleafJobTest extends AbstractDepositJobTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc483fd3cc3bb614b515fe7a6a5f1a32020fac5d"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6742c4d6e48b5a2cc36e5f412d5f9f12d1ec4807", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/6742c4d6e48b5a2cc36e5f412d5f9f12d1ec4807", "committedDate": "2020-03-05T21:33:33Z", "message": "Register premis file in post-ingest location"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjMzOTE0", "url": "https://github.com/UNC-Libraries/box-c/pull/911#pullrequestreview-370633914", "createdAt": "2020-03-06T21:21:12Z", "commit": {"oid": "6742c4d6e48b5a2cc36e5f412d5f9f12d1ec4807"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMToyMToxMlrOFzH1Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMToyMToxMlrOFzH1Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1MDAzNQ==", "bodyText": "Sorry I missed this in the previous commit. Since RDF doesn't guarantee order, these tests might end up failing if the properties come back in a different order. One approach might be to add an helper method like assertRegisterCalled(LOC1_ID + \"/event_log, registrationArguments) which basically just calls registrationArguments.contains(\"register -f \" + expected), or something similar. Won't need as much string building either :)\nThis might run into problems when there is more than one file, as it would hide the number of invocations. You could have assertRegisterCalled take a count of expected number of invocations. Or you could include the pid of the object in the file path. That could be accomplished by mocking getBinary to return BinaryObject instances with different pids. Here's a similar example from another test of something that takes a pid and returns an object with that pid:\nwhen(repoObjFactory.createWorkObject(any(PID.class), any(Model.class))).thenAnswer(new Answer<WorkObject>() {\n            @Override\n            public WorkObject answer(InvocationOnMock invocation) throws Throwable {\n                childPid = (PID) invocation.getArguments()[0];\n                when(work.getPid()).thenReturn(childPid);\n                return work;\n            }\n        });", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r389150035", "createdAt": "2020-03-06T21:21:12Z", "author": {"login": "bbpennel"}, "path": "deposit/src/test/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJobTest.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.dl.fcrepo4.BinaryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.query.Dataset;\n+import org.apache.jena.rdf.model.*;\n+import org.apache.jena.tdb.TDBFactory;\n+import org.apache.jena.vocabulary.RDF;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Set;\n+\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class RegisterToLongleafJobTest extends AbstractDepositJobTest {\n+    @Rule\n+    public final TemporaryFolder tmpFolder = new TemporaryFolder();\n+\n+    private final static String FILE_SCHEME = \"file:\";\n+    private final static String LOC1_ID = \"/some/path/loc1\";\n+    private final static String LOC2_ID = \"/some/path/loc2\";\n+    private final static String LOC3_ID = \"/some/path/loc3\";\n+    private final static String FILE_CONTENT1 = \"Some content\";\n+    private final static String FILE_CONTENT2 = \"Other stuff\";\n+    private final static String MD5 = \"MD5 checksum\";\n+\n+    private RegisterToLongleafJob job;\n+    private PID depositPid;\n+    private Bag depBag;\n+    private Model model;\n+    private Path storageLocPath;\n+    private String outputPath;\n+    private String longleafScript;\n+    private BinaryObject destinationObj;\n+    private URI desitnationUri;\n+\n+    @Mock\n+    private RepositoryObjectLoader repoObjLoader;\n+\n+    @Before\n+    public void init() throws Exception {\n+        tmpFolder.create();\n+\n+        Dataset dataset = TDBFactory.createDataset();\n+\n+        job = new RegisterToLongleafJob();\n+        job.setJobUUID(jobUUID);\n+        job.setDepositUUID(depositUUID);\n+        job.setDepositDirectory(depositDir);\n+        setField(job, \"repoObjLoader\", repoObjLoader);\n+        setField(job, \"dataset\", dataset);\n+\n+        outputPath = tmpFolder.newFile().getPath();\n+        longleafScript = getLongleafScript(outputPath);\n+        job.setLongleafBaseCommand(longleafScript);\n+\n+        job.init();\n+\n+        // Get a writeable model\n+        model = job.getWritableModel();\n+\n+        depositPid = job.getDepositPID();\n+        storageLocPath = tmpFolder.newFolder(\"storageLoc\").toPath();\n+        depBag = model.createBag(depositPid.getRepositoryPath());\n+        depBag.addProperty(Cdr.storageLocation, LOC1_ID);\n+\n+        // set up mock for premis uri\n+        destinationObj = mock(BinaryObject.class);\n+        when(repoObjLoader.getBinaryObject(any(PID.class))).thenReturn(destinationObj);\n+        desitnationUri = URI.create(FILE_SCHEME + LOC1_ID + \"/event_log\");\n+        when(destinationObj.getContentUri()).thenReturn(desitnationUri);\n+    }\n+\n+    @Test\n+    public void registerSingleFileToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc.addProperty(CdrDeposit.storageUri, FILE_SCHEME + LOC2_ID + \"/original_file\");\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC1_ID + \"/event_log\\n\" + // bag\n+                \"register -f \" + LOC1_ID + \"/event_log\\n\" + // work\n+                \"register -f \" + LOC1_ID + \"/event_log\\n\" + // file\n+                \"register -f \" + LOC2_ID  + \"/original_file --checksums 'md5:\" + MD5 + \"'\\n\";\n+        String output = FileUtils.readFileToString(new File(outputPath), StandardCharsets.UTF_8);\n+\n+        assertEquals(registrationArguments, output);\n+    }\n+\n+    @Test\n+    public void registerWorkWithNoFilesToLongleaf() throws Exception {\n+        addContainerObject(depBag, Cdr.Work);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC1_ID + \"/event_log\\n\" + // bag\n+                \"register -f \" + LOC1_ID + \"/event_log\\n\"; // work\n+        String output = FileUtils.readFileToString(new File(outputPath), StandardCharsets.UTF_8);\n+\n+        assertEquals(registrationArguments, output);\n+    }\n+\n+    @Test\n+    public void registerWorkWithMultipleFilesToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc1 = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc1.addProperty(CdrDeposit.storageUri, FILE_SCHEME + LOC2_ID + \"/original_file\");\n+        workBag.addProperty(Cdr.primaryObject, fileResc1);\n+        Resource fileResc2 = addFileObject(workBag, FILE_CONTENT2, true);\n+        fileResc2.addProperty(CdrDeposit.storageUri, FILE_SCHEME + LOC3_ID);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC1_ID + \"/event_log\\n\" + // bag\n+                \"register -f \" + LOC1_ID + \"/event_log\\n\" + // work\n+                \"register -f \" + LOC1_ID + \"/event_log\\n\" + // file1\n+                \"register -f \" + LOC2_ID + \"/original_file --checksums 'md5:\" + MD5 + \"'\\n\" +\n+                \"register -f \" + LOC1_ID + \"/event_log\\n\" + // file2\n+                \"register -f \" + LOC3_ID + \"\\n\";\n+        String output = FileUtils.readFileToString(new File(outputPath), StandardCharsets.UTF_8);\n+\n+        assertEquals(registrationArguments, output);\n+    }\n+\n+    @Test\n+    public void registerWorkWithMetadataFilesToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc.addProperty(CdrDeposit.storageUri, FILE_SCHEME + LOC2_ID + \"/original_file\");\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+        fileResc.addProperty(CdrDeposit.fitsStorageUri, FILE_SCHEME + LOC3_ID + \"/techmd_fits\");\n+        fileResc.addProperty(CdrDeposit.descriptiveStorageUri, FILE_SCHEME + LOC3_ID + \"/md_descriptive\");\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC1_ID + \"/event_log\\n\" + // bag", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6742c4d6e48b5a2cc36e5f412d5f9f12d1ec4807"}, "originalPosition": 180}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NTE2ODUw", "url": "https://github.com/UNC-Libraries/box-c/pull/911#pullrequestreview-378516850", "createdAt": "2020-03-20T14:12:21Z", "commit": {"oid": "6742c4d6e48b5a2cc36e5f412d5f9f12d1ec4807"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDoxMjoyMlrOF5VVDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTowNjowNlrOF5XiWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY2MjYwNQ==", "bodyText": "something weird is happening here with the checksums. on my vm it is generating records with the following metadata:\n  checksums:\n    \"'md5\": 6da75e45469b88aeaa5415e574c385e2'\n\nnote the extra single quotes. To produce the same affect on the commandline i had to double quote the param:\n sudo scl enable rh-ruby24 -- longleaf register -c /opt/longleaf/config.yml -f /opt/data/primary_storage/37/e8/fa/f5/37e8faf5-2a33-4a8c-b96b-0a19deadc5fe/datafs/original_file --checksums \"'md5:6da75e45469b88aeaa5415e574c385e2'\" --force\nmaybe exec is wrapping the value? could also try double quotes", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r395662605", "createdAt": "2020-03-20T14:12:22Z", "author": {"login": "bbpennel"}, "path": "deposit/src/main/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJob.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.deposit.work.AbstractDepositJob;\n+import edu.unc.lib.dl.fcrepo4.BinaryObject;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.model.DatastreamPids;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Bag;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.NodeIterator;\n+import org.apache.jena.rdf.model.StmtIterator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URI;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Job which registers ingested files to longleaf\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class RegisterToLongleafJob extends AbstractDepositJob {\n+    private static final Logger log = LoggerFactory.getLogger(RegisterToLongleafJob.class);\n+    private static final Logger longleafLog = LoggerFactory.getLogger(\"longleaf\");\n+\n+    private String longleafBaseCommand;\n+\n+    @Autowired\n+    private RepositoryObjectLoader repoObjLoader;\n+\n+    public RegisterToLongleafJob() {\n+        super();\n+    }\n+\n+    public RegisterToLongleafJob(String uuid, String depositUUID) {\n+        super(uuid, depositUUID);\n+    }\n+\n+    @Override\n+    public void runJob() {\n+        log.info(\"Registering files from deposit {} to longleaf\", getDepositPID());\n+\n+        Model model = getReadOnlyModel();\n+        Bag depositBag = model.getBag(getDepositPID().getRepositoryPath());\n+\n+        registerFilesToLongleaf(depositBag);\n+    }\n+\n+    /**\n+     * Iterates through deposit bag to find files which can be registered with\n+     * longleaf\n+     *\n+     * @param resc\n+     */\n+    public void registerFilesToLongleaf(Resource resc) {\n+        PID objPid = PIDs.get(resc.toString());\n+        BinaryObject premisBin = repoObjLoader.getBinaryObject(DatastreamPids.getMdEventsPid(objPid));\n+        URI premisStorageUri = premisBin.getContentUri();\n+\n+        if (premisStorageUri != null) {\n+            registerFile(premisStorageUri, null);\n+        }\n+\n+        StmtIterator statementIterator = resc.listProperties();\n+        try {\n+            while (statementIterator.hasNext()) {\n+                Statement currentStatement = statementIterator.nextStatement();\n+\n+                // find storageUri, descriptiveStorageUri, fitsStorageUri\n+                if (currentStatement.getPredicate().toString().matches(\".*Uri\")) {\n+                    URI storageUri = URI.create(currentStatement.getString());\n+                    if (currentStatement.getString().matches(\".*original_file\")) {\n+                        String checksum = resc.getProperty(CdrDeposit.md5sum).getString();\n+                        registerFile(storageUri, checksum);\n+                    } else {\n+                        registerFile(storageUri, null);\n+                    }\n+                }\n+            }\n+        } finally {\n+            statementIterator.close();\n+        }\n+\n+        NodeIterator nodeIterator = getChildIterator(resc);\n+        // No more children, nothing further to do in this tree\n+        if (nodeIterator == null) {\n+            return;\n+        }\n+\n+        try {\n+            while (nodeIterator.hasNext()) {\n+                Resource childResc = (Resource) nodeIterator.next();\n+                registerFilesToLongleaf(childResc);\n+            }\n+        } finally {\n+            nodeIterator.close();\n+        }\n+    }\n+\n+    /**\n+     * Executes longleaf register command for file\n+     *\n+     * @param storageUri\n+     * @param checksum\n+     */\n+    private void registerFile(URI storageUri, String checksum) {\n+        long start = System.currentTimeMillis();\n+\n+        String fileLocation = Paths.get(storageUri).toString();\n+\n+        try {\n+            // only register binaries with md5sum\n+            String longleafCommmand;\n+            if (checksum != null) {\n+                longleafCommmand = longleafBaseCommand + \" register -f \" + fileLocation + \" --checksums 'md5:\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6742c4d6e48b5a2cc36e5f412d5f9f12d1ec4807"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5ODc3Ng==", "bodyText": "Not sure if you saw this comment", "url": "https://github.com/UNC-Libraries/box-c/pull/911#discussion_r395698776", "createdAt": "2020-03-20T15:06:06Z", "author": {"login": "bbpennel"}, "path": "deposit/src/test/java/edu/unc/lib/deposit/fcrepo4/RegisterToLongleafJobTest.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.deposit.fcrepo4;\n+\n+import edu.unc.lib.dl.fcrepo4.BinaryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.rdf.CdrDeposit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.query.Dataset;\n+import org.apache.jena.rdf.model.*;\n+import org.apache.jena.tdb.TDBFactory;\n+import org.apache.jena.vocabulary.RDF;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Set;\n+\n+import static edu.unc.lib.dl.test.TestHelpers.setField;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class RegisterToLongleafJobTest extends AbstractDepositJobTest {\n+    @Rule\n+    public final TemporaryFolder tmpFolder = new TemporaryFolder();\n+\n+    private final static String FILE_SCHEME = \"file:\";\n+    private final static String LOC1_ID = \"/some/path/loc1\";\n+    private final static String LOC2_ID = \"/some/path/loc2\";\n+    private final static String LOC3_ID = \"/some/path/loc3\";\n+    private final static String FILE_CONTENT1 = \"Some content\";\n+    private final static String FILE_CONTENT2 = \"Other stuff\";\n+    private final static String MD5 = \"MD5 checksum\";\n+\n+    private RegisterToLongleafJob job;\n+    private PID depositPid;\n+    private Bag depBag;\n+    private Model model;\n+    private Path storageLocPath;\n+    private String outputPath;\n+    private String longleafScript;\n+    private BinaryObject destinationObj;\n+    private URI desitnationUri;\n+\n+    @Mock\n+    private RepositoryObjectLoader repoObjLoader;\n+\n+    @Before\n+    public void init() throws Exception {\n+        tmpFolder.create();\n+\n+        Dataset dataset = TDBFactory.createDataset();\n+\n+        job = new RegisterToLongleafJob();\n+        job.setJobUUID(jobUUID);\n+        job.setDepositUUID(depositUUID);\n+        job.setDepositDirectory(depositDir);\n+        setField(job, \"repoObjLoader\", repoObjLoader);\n+        setField(job, \"dataset\", dataset);\n+\n+        outputPath = tmpFolder.newFile().getPath();\n+        longleafScript = getLongleafScript(outputPath);\n+        job.setLongleafBaseCommand(longleafScript);\n+\n+        job.init();\n+\n+        // Get a writeable model\n+        model = job.getWritableModel();\n+\n+        depositPid = job.getDepositPID();\n+        storageLocPath = tmpFolder.newFolder(\"storageLoc\").toPath();\n+        depBag = model.createBag(depositPid.getRepositoryPath());\n+        depBag.addProperty(Cdr.storageLocation, LOC1_ID);\n+\n+        // set up mock for premis uri\n+        destinationObj = mock(BinaryObject.class);\n+        when(repoObjLoader.getBinaryObject(any(PID.class))).thenReturn(destinationObj);\n+        desitnationUri = URI.create(FILE_SCHEME + LOC1_ID + \"/event_log\");\n+        when(destinationObj.getContentUri()).thenReturn(desitnationUri);\n+    }\n+\n+    @Test\n+    public void registerSingleFileToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc.addProperty(CdrDeposit.storageUri, FILE_SCHEME + LOC2_ID + \"/original_file\");\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC1_ID + \"/event_log\\n\" + // bag\n+                \"register -f \" + LOC1_ID + \"/event_log\\n\" + // work\n+                \"register -f \" + LOC1_ID + \"/event_log\\n\" + // file\n+                \"register -f \" + LOC2_ID  + \"/original_file --checksums 'md5:\" + MD5 + \"'\\n\";\n+        String output = FileUtils.readFileToString(new File(outputPath), StandardCharsets.UTF_8);\n+\n+        assertEquals(registrationArguments, output);\n+    }\n+\n+    @Test\n+    public void registerWorkWithNoFilesToLongleaf() throws Exception {\n+        addContainerObject(depBag, Cdr.Work);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC1_ID + \"/event_log\\n\" + // bag\n+                \"register -f \" + LOC1_ID + \"/event_log\\n\"; // work\n+        String output = FileUtils.readFileToString(new File(outputPath), StandardCharsets.UTF_8);\n+\n+        assertEquals(registrationArguments, output);\n+    }\n+\n+    @Test\n+    public void registerWorkWithMultipleFilesToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc1 = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc1.addProperty(CdrDeposit.storageUri, FILE_SCHEME + LOC2_ID + \"/original_file\");\n+        workBag.addProperty(Cdr.primaryObject, fileResc1);\n+        Resource fileResc2 = addFileObject(workBag, FILE_CONTENT2, true);\n+        fileResc2.addProperty(CdrDeposit.storageUri, FILE_SCHEME + LOC3_ID);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC1_ID + \"/event_log\\n\" + // bag\n+                \"register -f \" + LOC1_ID + \"/event_log\\n\" + // work\n+                \"register -f \" + LOC1_ID + \"/event_log\\n\" + // file1\n+                \"register -f \" + LOC2_ID + \"/original_file --checksums 'md5:\" + MD5 + \"'\\n\" +\n+                \"register -f \" + LOC1_ID + \"/event_log\\n\" + // file2\n+                \"register -f \" + LOC3_ID + \"\\n\";\n+        String output = FileUtils.readFileToString(new File(outputPath), StandardCharsets.UTF_8);\n+\n+        assertEquals(registrationArguments, output);\n+    }\n+\n+    @Test\n+    public void registerWorkWithMetadataFilesToLongleaf() throws Exception {\n+        Bag workBag = addContainerObject(depBag, Cdr.Work);\n+        Resource fileResc = addFileObject(workBag, FILE_CONTENT1, true);\n+        fileResc.addProperty(CdrDeposit.storageUri, FILE_SCHEME + LOC2_ID + \"/original_file\");\n+        workBag.addProperty(Cdr.primaryObject, fileResc);\n+        fileResc.addProperty(CdrDeposit.fitsStorageUri, FILE_SCHEME + LOC3_ID + \"/techmd_fits\");\n+        fileResc.addProperty(CdrDeposit.descriptiveStorageUri, FILE_SCHEME + LOC3_ID + \"/md_descriptive\");\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        String registrationArguments = \"register -f \" + LOC1_ID + \"/event_log\\n\" + // bag", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1MDAzNQ=="}, "originalCommit": {"oid": "6742c4d6e48b5a2cc36e5f412d5f9f12d1ec4807"}, "originalPosition": 180}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NTY0NzE5", "url": "https://github.com/UNC-Libraries/box-c/pull/911#pullrequestreview-378564719", "createdAt": "2020-03-20T15:07:05Z", "commit": {"oid": "6742c4d6e48b5a2cc36e5f412d5f9f12d1ec4807"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b979f68dfc696ef44f01da4cc1ec6c42900864ed", "author": {"user": {"login": "smithjp", "name": "Jennifer Smith"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/b979f68dfc696ef44f01da4cc1ec6c42900864ed", "committedDate": "2020-03-23T12:46:26Z", "message": "Update longleaf register command and longleaf registration tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1Nzg4ODI3", "url": "https://github.com/UNC-Libraries/box-c/pull/911#pullrequestreview-385788827", "createdAt": "2020-04-01T17:15:03Z", "commit": {"oid": "b979f68dfc696ef44f01da4cc1ec6c42900864ed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e884a410b2f382af13f646a01506f2cde858a06d", "author": {"user": {"login": "bbpennel", "name": "Ben Pennell"}}, "url": "https://github.com/UNC-Libraries/box-c/commit/e884a410b2f382af13f646a01506f2cde858a06d", "committedDate": "2020-04-01T17:40:35Z", "message": "Disable longleaf deposit job temporarily until test env is ready for it"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2295, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}