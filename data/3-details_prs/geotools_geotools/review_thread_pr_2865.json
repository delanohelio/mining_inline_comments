{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwOTUyOTM0", "number": 2865, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo1ODo1NlrODwhzZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowNTo0MVrODwh70w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjEyMDcwOnYy", "diffSide": "RIGHT", "path": "modules/plugin/mongodb/src/main/java/org/geotools/data/mongodb/MongoQueryCapabilities.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo1ODo1NlrOGDletQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwODoxMjo0OFrOGD0OhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxMjk4MQ==", "bodyText": "Not sure about this one @taba90, even if the default implementation supports it we still want to override the default check no?", "url": "https://github.com/geotools/geotools/pull/2865#discussion_r406412981", "createdAt": "2020-04-09T18:58:56Z", "author": {"login": "nmco"}, "path": "modules/plugin/mongodb/src/main/java/org/geotools/data/mongodb/MongoQueryCapabilities.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+\n+package org.geotools.data.mongodb;\n+\n+import org.geotools.data.QueryCapabilities;\n+import org.locationtech.jts.geom.Geometry;\n+import org.opengis.feature.type.AttributeDescriptor;\n+import org.opengis.filter.expression.PropertyName;\n+import org.opengis.filter.sort.SortBy;\n+\n+/** A QueryCapabilities implementation for a MongoSource. */\n+class MongoQueryCapabilities extends QueryCapabilities {\n+\n+    private MongoFeatureSource source;\n+\n+    MongoQueryCapabilities(MongoFeatureSource source) {\n+        this.source = source;\n+    }\n+\n+    @Override\n+    public boolean supportsSorting(SortBy[] sortAttributes) {\n+        if (super.supportsSorting(sortAttributes)) return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1cca899eebda7bca9e80044851d7379739789be"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1NDU5Nw==", "bodyText": "fixed", "url": "https://github.com/geotools/geotools/pull/2865#discussion_r406654597", "createdAt": "2020-04-10T08:12:48Z", "author": {"login": "taba90"}, "path": "modules/plugin/mongodb/src/main/java/org/geotools/data/mongodb/MongoQueryCapabilities.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+\n+package org.geotools.data.mongodb;\n+\n+import org.geotools.data.QueryCapabilities;\n+import org.locationtech.jts.geom.Geometry;\n+import org.opengis.feature.type.AttributeDescriptor;\n+import org.opengis.filter.expression.PropertyName;\n+import org.opengis.filter.sort.SortBy;\n+\n+/** A QueryCapabilities implementation for a MongoSource. */\n+class MongoQueryCapabilities extends QueryCapabilities {\n+\n+    private MongoFeatureSource source;\n+\n+    MongoQueryCapabilities(MongoFeatureSource source) {\n+        this.source = source;\n+    }\n+\n+    @Override\n+    public boolean supportsSorting(SortBy[] sortAttributes) {\n+        if (super.supportsSorting(sortAttributes)) return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxMjk4MQ=="}, "originalCommit": {"oid": "c1cca899eebda7bca9e80044851d7379739789be"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjEyNTE4OnYy", "diffSide": "RIGHT", "path": "modules/plugin/mongodb/src/main/java/org/geotools/data/mongodb/MongoQueryCapabilities.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowMDoyMFrOGDlhkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwODoxNDoyOFrOGD0RIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxMzcxNQ==", "bodyText": "This would deserve a comment explaining why the descriptor may be NULL.", "url": "https://github.com/geotools/geotools/pull/2865#discussion_r406413715", "createdAt": "2020-04-09T19:00:20Z", "author": {"login": "nmco"}, "path": "modules/plugin/mongodb/src/main/java/org/geotools/data/mongodb/MongoQueryCapabilities.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+\n+package org.geotools.data.mongodb;\n+\n+import org.geotools.data.QueryCapabilities;\n+import org.locationtech.jts.geom.Geometry;\n+import org.opengis.feature.type.AttributeDescriptor;\n+import org.opengis.filter.expression.PropertyName;\n+import org.opengis.filter.sort.SortBy;\n+\n+/** A QueryCapabilities implementation for a MongoSource. */\n+class MongoQueryCapabilities extends QueryCapabilities {\n+\n+    private MongoFeatureSource source;\n+\n+    MongoQueryCapabilities(MongoFeatureSource source) {\n+        this.source = source;\n+    }\n+\n+    @Override\n+    public boolean supportsSorting(SortBy[] sortAttributes) {\n+        if (super.supportsSorting(sortAttributes)) return true;\n+        for (SortBy sort : sortAttributes) {\n+            if (!supportsPropertySorting(sort.getPropertyName())) return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Check if the property name corresponds to one of the FeatureType attributes.\n+     *\n+     * @param propertyName\n+     * @return true if a correspondence is found, false if not or the attribute is a Geometry.\n+     */\n+    private boolean supportsPropertySorting(PropertyName propertyName) {\n+        AttributeDescriptor descriptor =\n+                (AttributeDescriptor) propertyName.evaluate(source.getSchema());\n+        if (descriptor == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1cca899eebda7bca9e80044851d7379739789be"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1NTI2NQ==", "bodyText": "I removed that part, seems to be redundat cause PropertyName will use propertyAccessors one of which access the property in that exact way.", "url": "https://github.com/geotools/geotools/pull/2865#discussion_r406655265", "createdAt": "2020-04-10T08:14:28Z", "author": {"login": "taba90"}, "path": "modules/plugin/mongodb/src/main/java/org/geotools/data/mongodb/MongoQueryCapabilities.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+\n+package org.geotools.data.mongodb;\n+\n+import org.geotools.data.QueryCapabilities;\n+import org.locationtech.jts.geom.Geometry;\n+import org.opengis.feature.type.AttributeDescriptor;\n+import org.opengis.filter.expression.PropertyName;\n+import org.opengis.filter.sort.SortBy;\n+\n+/** A QueryCapabilities implementation for a MongoSource. */\n+class MongoQueryCapabilities extends QueryCapabilities {\n+\n+    private MongoFeatureSource source;\n+\n+    MongoQueryCapabilities(MongoFeatureSource source) {\n+        this.source = source;\n+    }\n+\n+    @Override\n+    public boolean supportsSorting(SortBy[] sortAttributes) {\n+        if (super.supportsSorting(sortAttributes)) return true;\n+        for (SortBy sort : sortAttributes) {\n+            if (!supportsPropertySorting(sort.getPropertyName())) return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Check if the property name corresponds to one of the FeatureType attributes.\n+     *\n+     * @param propertyName\n+     * @return true if a correspondence is found, false if not or the attribute is a Geometry.\n+     */\n+    private boolean supportsPropertySorting(PropertyName propertyName) {\n+        AttributeDescriptor descriptor =\n+                (AttributeDescriptor) propertyName.evaluate(source.getSchema());\n+        if (descriptor == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxMzcxNQ=="}, "originalCommit": {"oid": "c1cca899eebda7bca9e80044851d7379739789be"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjEzMDcxOnYy", "diffSide": "RIGHT", "path": "modules/plugin/mongodb/src/test/java/org/geotools/data/mongodb/MongoDataStoreTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowMTo1NlrOGDllEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowMzo1N1rOGDlpJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNDYxMQ==", "bodyText": "This is an online test right? I would also add a test for DESCENDING.", "url": "https://github.com/geotools/geotools/pull/2865#discussion_r406414611", "createdAt": "2020-04-09T19:01:56Z", "author": {"login": "nmco"}, "path": "modules/plugin/mongodb/src/test/java/org/geotools/data/mongodb/MongoDataStoreTest.java", "diffHunk": "@@ -198,4 +206,27 @@ private void clearSchemaStore(MongoDataStore mongoStore) {\n         }\n         mongoStore.cleanEntries();\n     }\n+\n+    public void testSortBy() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1cca899eebda7bca9e80044851d7379739789be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNTY1NA==", "bodyText": "Forget about this just notice that you have that test on MongoFeatureSourceTest.", "url": "https://github.com/geotools/geotools/pull/2865#discussion_r406415654", "createdAt": "2020-04-09T19:03:57Z", "author": {"login": "nmco"}, "path": "modules/plugin/mongodb/src/test/java/org/geotools/data/mongodb/MongoDataStoreTest.java", "diffHunk": "@@ -198,4 +206,27 @@ private void clearSchemaStore(MongoDataStore mongoStore) {\n         }\n         mongoStore.cleanEntries();\n     }\n+\n+    public void testSortBy() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNDYxMQ=="}, "originalCommit": {"oid": "c1cca899eebda7bca9e80044851d7379739789be"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjE0MjI3OnYy", "diffSide": "RIGHT", "path": "modules/plugin/mongodb/src/test/java/org/geotools/data/mongodb/MongoFeatureSourceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowNTo0MVrOGDlsUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwODoxNDo1NFrOGD0Rsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNjQ2NA==", "bodyText": "I would add a test or one more attribute, where one doesn't override it ignores the NULL, sort by the next attribute and then by the next one, makes sense?", "url": "https://github.com/geotools/geotools/pull/2865#discussion_r406416464", "createdAt": "2020-04-09T19:05:41Z", "author": {"login": "nmco"}, "path": "modules/plugin/mongodb/src/test/java/org/geotools/data/mongodb/MongoFeatureSourceTest.java", "diffHunk": "@@ -315,6 +320,62 @@ public void testAndPostFilter() throws Exception {\n         checkBinaryLogicOperatorFilterSplitting(and);\n     }\n \n+    public void testSingleSortBy() throws Exception {\n+        FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();\n+        SortBy[] sorts =\n+                new SortBy[] {\n+                    ff.sort(\"properties.doubleProperty\", SortOrder.DESCENDING),\n+                };\n+\n+        SimpleFeatureSource source = dataStore.getFeatureSource(\"ft1\");\n+        assertTrue(source.getQueryCapabilities().supportsSorting(sorts));\n+        Query q = new Query(\"ft1\", Filter.INCLUDE);\n+        q.setSortBy(sorts);\n+\n+        SimpleFeatureCollection features = source.getFeatures(q);\n+        SimpleFeatureIterator it = features.features();\n+        List<Double> doubleValues = new ArrayList<>(3);\n+        while (it.hasNext()) {\n+            SimpleFeature feature = it.next();\n+            doubleValues.add((Double) feature.getAttribute(\"properties.doubleProperty\"));\n+        }\n+        assertEquals(doubleValues.size(), 3);\n+        Double first = doubleValues.get(0);\n+        Double second = doubleValues.get(1);\n+        Double third = doubleValues.get(2);\n+        assertTrue(first > second);\n+        assertTrue(second > third);\n+    }\n+\n+    public void testTwoSortBy() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1cca899eebda7bca9e80044851d7379739789be"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1NTQxMQ==", "bodyText": "fixed", "url": "https://github.com/geotools/geotools/pull/2865#discussion_r406655411", "createdAt": "2020-04-10T08:14:54Z", "author": {"login": "taba90"}, "path": "modules/plugin/mongodb/src/test/java/org/geotools/data/mongodb/MongoFeatureSourceTest.java", "diffHunk": "@@ -315,6 +320,62 @@ public void testAndPostFilter() throws Exception {\n         checkBinaryLogicOperatorFilterSplitting(and);\n     }\n \n+    public void testSingleSortBy() throws Exception {\n+        FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();\n+        SortBy[] sorts =\n+                new SortBy[] {\n+                    ff.sort(\"properties.doubleProperty\", SortOrder.DESCENDING),\n+                };\n+\n+        SimpleFeatureSource source = dataStore.getFeatureSource(\"ft1\");\n+        assertTrue(source.getQueryCapabilities().supportsSorting(sorts));\n+        Query q = new Query(\"ft1\", Filter.INCLUDE);\n+        q.setSortBy(sorts);\n+\n+        SimpleFeatureCollection features = source.getFeatures(q);\n+        SimpleFeatureIterator it = features.features();\n+        List<Double> doubleValues = new ArrayList<>(3);\n+        while (it.hasNext()) {\n+            SimpleFeature feature = it.next();\n+            doubleValues.add((Double) feature.getAttribute(\"properties.doubleProperty\"));\n+        }\n+        assertEquals(doubleValues.size(), 3);\n+        Double first = doubleValues.get(0);\n+        Double second = doubleValues.get(1);\n+        Double third = doubleValues.get(2);\n+        assertTrue(first > second);\n+        assertTrue(second > third);\n+    }\n+\n+    public void testTwoSortBy() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNjQ2NA=="}, "originalCommit": {"oid": "c1cca899eebda7bca9e80044851d7379739789be"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3587, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}