{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwOTY1OTEy", "number": 2841, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDoxNjo0N1rODqUCoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDoxOToxMlrODqUGRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Njk1MTM2OnYy", "diffSide": "RIGHT", "path": "modules/library/coverage/src/main/java/org/geotools/image/ImageWorker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDoxNjo0N1rOF5-yAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDoyMjozOVrOF5-_SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM0MTc2Mw==", "bodyText": "What happened here, lots of reformats?", "url": "https://github.com/geotools/geotools/pull/2841#discussion_r396341763", "createdAt": "2020-03-23T10:16:47Z", "author": {"login": "aaime"}, "path": "modules/library/coverage/src/main/java/org/geotools/image/ImageWorker.java", "diffHunk": "@@ -1137,75 +1137,83 @@ private Object getComputedProperty(final String name) {\n     /** Returns the histogram of the image. */\n     public Histogram getHistogram(int[] numBins, double[] lowValues, double[] highValues) {\n         Object histogram = getComputedProperty(HISTOGRAM);\n-        if (!(histogram instanceof Histogram)) {\n-            // Create the parameterBlock\n-            ParameterBlock pb = new ParameterBlock();\n-            pb.setSource(image, 0);\n-            if (JAIExt.isJAIExtOperation(\"Stats\")) {\n-                StatsType[] stats = new StatsType[] {StatsType.HISTOGRAM};\n-                // Band definition\n-                int numBands = getNumBands();\n-                int[] bands = new int[numBands];\n-                for (int i = 0; i < numBands; i++) {\n-                    bands[i] = i;\n-                }\n+        if (histogram instanceof HistogramWrapper) {\n+            HistogramWrapper wrapper = (HistogramWrapper) histogram;\n+            double[] prevHighs = wrapper.getHighValue();\n+            double[] prevLows = wrapper.getLowValue();\n+            int[] prevNumBins = wrapper.getNumBins();\n+            if (Arrays.equals(prevHighs, highValues)\n+                    && Arrays.equals(prevLows, lowValues)\n+                    && Arrays.equals(prevNumBins, numBins)) {\n+                return wrapper;\n+            }\n+        }\n+        // Create the parameterBlock\n+        ParameterBlock pb = new ParameterBlock();\n+        pb.setSource(image, 0);\n+        if (JAIExt.isJAIExtOperation(\"Stats\")) {\n+            StatsType[] stats = new StatsType[] {StatsType.HISTOGRAM};\n+            // Band definition\n+            int numBands = getNumBands();\n+            int[] bands = new int[numBands];\n+            for (int i = 0; i < numBands; i++) {\n+                bands[i] = i;\n+            }\n \n-                // Image parameters\n-                pb.set(xPeriod, 0); // xPeriod\n-                pb.set(yPeriod, 1); // yPeriod\n-                pb.set(roi, 2); // ROI\n-                pb.set(nodata, 3); // NoData\n-                pb.set(bands, 5); // band indexes\n-                pb.set(stats, 6); // statistic operation\n-                pb.set(numBins, 9); // Bin number.\n-                pb.set(lowValues, 7); // Lower values per band.\n-                pb.set(highValues, 8); // Higher values per band.\n-                image = JAI.create(\"Stats\", pb, getRenderingHints());\n-                // Retrieving the statistics\n-                Statistics[][] results =\n-                        (Statistics[][]) getComputedProperty(Statistics.STATS_PROPERTY);\n-                int[][] bins = new int[numBands][];\n-\n-                // Cycle on the bands\n-                for (int i = 0; i < results.length; i++) {\n-                    Statistics stat = results[i][0];\n-                    double[] binsDouble = (double[]) stat.getResult();\n-                    bins[i] = new int[binsDouble.length];\n-                    for (int j = 0; j < binsDouble.length; j++) {\n-                        bins[i][j] = (int) binsDouble[j];\n-                    }\n-                }\n-                ParameterBlock parameterBlock = getRenderedOperation().getParameterBlock();\n-                if (numBins == null) {\n-                    numBins = (int[]) parameterBlock.getObjectParameter(9);\n-                }\n-                if (lowValues == null) {\n-                    lowValues = (double[]) parameterBlock.getObjectParameter(7);\n-                }\n-                if (highValues == null) {\n-                    highValues = (double[]) parameterBlock.getObjectParameter(8);\n-                }\n-                HistogramWrapper wrapper =\n-                        new HistogramWrapper(numBins, lowValues, highValues, bins);\n-                // Setting the property\n-                if (image instanceof PlanarImage) {\n-                    ((PlanarImage) image).setProperty(HISTOGRAM, wrapper);\n-                } else {\n-                    PlanarImage p = getPlanarImage();\n-                    p.setProperty(HISTOGRAM, wrapper);\n-                    image = p;\n+            // Image parameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7307ac39a16ecb9f41cee5022bc824728ec7133"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM0NTE2MA==", "bodyText": "Ah ok, saw it now, the caching check was inverted, which un-indented the block below one level.", "url": "https://github.com/geotools/geotools/pull/2841#discussion_r396345160", "createdAt": "2020-03-23T10:22:39Z", "author": {"login": "aaime"}, "path": "modules/library/coverage/src/main/java/org/geotools/image/ImageWorker.java", "diffHunk": "@@ -1137,75 +1137,83 @@ private Object getComputedProperty(final String name) {\n     /** Returns the histogram of the image. */\n     public Histogram getHistogram(int[] numBins, double[] lowValues, double[] highValues) {\n         Object histogram = getComputedProperty(HISTOGRAM);\n-        if (!(histogram instanceof Histogram)) {\n-            // Create the parameterBlock\n-            ParameterBlock pb = new ParameterBlock();\n-            pb.setSource(image, 0);\n-            if (JAIExt.isJAIExtOperation(\"Stats\")) {\n-                StatsType[] stats = new StatsType[] {StatsType.HISTOGRAM};\n-                // Band definition\n-                int numBands = getNumBands();\n-                int[] bands = new int[numBands];\n-                for (int i = 0; i < numBands; i++) {\n-                    bands[i] = i;\n-                }\n+        if (histogram instanceof HistogramWrapper) {\n+            HistogramWrapper wrapper = (HistogramWrapper) histogram;\n+            double[] prevHighs = wrapper.getHighValue();\n+            double[] prevLows = wrapper.getLowValue();\n+            int[] prevNumBins = wrapper.getNumBins();\n+            if (Arrays.equals(prevHighs, highValues)\n+                    && Arrays.equals(prevLows, lowValues)\n+                    && Arrays.equals(prevNumBins, numBins)) {\n+                return wrapper;\n+            }\n+        }\n+        // Create the parameterBlock\n+        ParameterBlock pb = new ParameterBlock();\n+        pb.setSource(image, 0);\n+        if (JAIExt.isJAIExtOperation(\"Stats\")) {\n+            StatsType[] stats = new StatsType[] {StatsType.HISTOGRAM};\n+            // Band definition\n+            int numBands = getNumBands();\n+            int[] bands = new int[numBands];\n+            for (int i = 0; i < numBands; i++) {\n+                bands[i] = i;\n+            }\n \n-                // Image parameters\n-                pb.set(xPeriod, 0); // xPeriod\n-                pb.set(yPeriod, 1); // yPeriod\n-                pb.set(roi, 2); // ROI\n-                pb.set(nodata, 3); // NoData\n-                pb.set(bands, 5); // band indexes\n-                pb.set(stats, 6); // statistic operation\n-                pb.set(numBins, 9); // Bin number.\n-                pb.set(lowValues, 7); // Lower values per band.\n-                pb.set(highValues, 8); // Higher values per band.\n-                image = JAI.create(\"Stats\", pb, getRenderingHints());\n-                // Retrieving the statistics\n-                Statistics[][] results =\n-                        (Statistics[][]) getComputedProperty(Statistics.STATS_PROPERTY);\n-                int[][] bins = new int[numBands][];\n-\n-                // Cycle on the bands\n-                for (int i = 0; i < results.length; i++) {\n-                    Statistics stat = results[i][0];\n-                    double[] binsDouble = (double[]) stat.getResult();\n-                    bins[i] = new int[binsDouble.length];\n-                    for (int j = 0; j < binsDouble.length; j++) {\n-                        bins[i][j] = (int) binsDouble[j];\n-                    }\n-                }\n-                ParameterBlock parameterBlock = getRenderedOperation().getParameterBlock();\n-                if (numBins == null) {\n-                    numBins = (int[]) parameterBlock.getObjectParameter(9);\n-                }\n-                if (lowValues == null) {\n-                    lowValues = (double[]) parameterBlock.getObjectParameter(7);\n-                }\n-                if (highValues == null) {\n-                    highValues = (double[]) parameterBlock.getObjectParameter(8);\n-                }\n-                HistogramWrapper wrapper =\n-                        new HistogramWrapper(numBins, lowValues, highValues, bins);\n-                // Setting the property\n-                if (image instanceof PlanarImage) {\n-                    ((PlanarImage) image).setProperty(HISTOGRAM, wrapper);\n-                } else {\n-                    PlanarImage p = getPlanarImage();\n-                    p.setProperty(HISTOGRAM, wrapper);\n-                    image = p;\n+            // Image parameters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM0MTc2Mw=="}, "originalCommit": {"oid": "f7307ac39a16ecb9f41cee5022bc824728ec7133"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Njk2MDY5OnYy", "diffSide": "RIGHT", "path": "modules/library/coverage/src/main/java/org/geotools/image/ImageWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDoxOToxMlrOF5-3sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDoxOToxMlrOF5-3sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM0MzIxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (histogram instanceof HistogramWrapper) {\n          \n          \n            \n                    // can reuse cached histogram only if the bucket definitions are the same\n          \n          \n            \n                    if (histogram instanceof HistogramWrapper) {", "url": "https://github.com/geotools/geotools/pull/2841#discussion_r396343216", "createdAt": "2020-03-23T10:19:12Z", "author": {"login": "aaime"}, "path": "modules/library/coverage/src/main/java/org/geotools/image/ImageWorker.java", "diffHunk": "@@ -1137,75 +1137,83 @@ private Object getComputedProperty(final String name) {\n     /** Returns the histogram of the image. */\n     public Histogram getHistogram(int[] numBins, double[] lowValues, double[] highValues) {\n         Object histogram = getComputedProperty(HISTOGRAM);\n-        if (!(histogram instanceof Histogram)) {\n-            // Create the parameterBlock\n-            ParameterBlock pb = new ParameterBlock();\n-            pb.setSource(image, 0);\n-            if (JAIExt.isJAIExtOperation(\"Stats\")) {\n-                StatsType[] stats = new StatsType[] {StatsType.HISTOGRAM};\n-                // Band definition\n-                int numBands = getNumBands();\n-                int[] bands = new int[numBands];\n-                for (int i = 0; i < numBands; i++) {\n-                    bands[i] = i;\n-                }\n+        if (histogram instanceof HistogramWrapper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7307ac39a16ecb9f41cee5022bc824728ec7133"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3685, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}