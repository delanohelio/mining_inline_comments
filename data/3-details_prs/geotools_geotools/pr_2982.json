{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMTQyNTIx", "number": 2982, "title": "[GEOT-6623] Add support for jsonPointer to SQL translation in a Postg\u2026", "bodyText": "\u2026reSQL database\nJira ticket https://osgeo-org.atlassian.net/browse/GEOT-6623\nThis pr add support to translate jsonPointer function to PostgreSQL dialect.\neg. jsonPointer( property, '/path/to/json/attribute') to property::json -> path -> to -> json ->> attribute.\nChecklist\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n The changes are not breaking the build in downstream projects using SNAPSHOT dependencies, GeoWebCache and GeoServer.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for unsupported modules):\n\n There is an issue in Jira describing the bug/task/new feature (a notable exemptions is, changes not visible to end users). The ticket is for the GeoTools project, if the issue was found elsewhere it's a good practice to link to the origin ticket/issue.\n The pull request contains changes related to a single objective. If multiple focuses cannot be avoided, each one is in its own commit and has a separate ticket describing it.\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOT-XYZW] Title of the Jira ticket\"\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by travis-ci after opening this PR)\n Documentation has been updated accordingly.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.", "createdAt": "2020-06-11T15:05:19Z", "url": "https://github.com/geotools/geotools/pull/2982", "merged": true, "mergeCommit": {"oid": "14581f990ab83893e25728851b9f5e0b6213d1ba"}, "closed": true, "closedAt": "2020-07-02T14:43:25Z", "author": {"login": "taba90"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqQChMABqjM0MzQ3MTg2OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcv-uL2gH2gAyNDMzMTQyNTIxOmRhN2VhYmJkMzYyZWMwYjFiZmZlYjJmMzc3NjEyOGFhOGY0MjkzYjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23ab262fdc5c44dcb1867873eef380e86e3e7133", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geotools/geotools/commit/23ab262fdc5c44dcb1867873eef380e86e3e7133", "committedDate": "2020-06-11T15:03:45Z", "message": "[GEOT-6623] Add support for jsonPointer to SQL translation in a PostgreSQL database"}, "afterCommit": {"oid": "a4104a1cce8b5ddd2a1b3cfd30d1b4d1ab9433a8", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geotools/geotools/commit/a4104a1cce8b5ddd2a1b3cfd30d1b4d1ab9433a8", "committedDate": "2020-06-11T15:30:33Z", "message": "[GEOT-6623] Add support for jsonPointer to SQL translation in a PostgreSQL database"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNTA4Mjc5", "url": "https://github.com/geotools/geotools/pull/2982#pullrequestreview-430508279", "createdAt": "2020-06-15T10:16:49Z", "commit": {"oid": "a4104a1cce8b5ddd2a1b3cfd30d1b4d1ab9433a8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDoxNjo0OVrOGjsAaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDozNjowM1rOGjsm6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NDM0NQ==", "bodyText": "Does the same as the overridden method, should be removed.", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r440074345", "createdAt": "2020-06-15T10:16:49Z", "author": {"login": "aaime"}, "path": "modules/library/main/src/main/java/org/geotools/filter/function/JsonPointerFunction.java", "diffHunk": "@@ -152,4 +154,9 @@ private void serializeObject(JsonParser parser, JsonGenerator generator) throws\n         }\n         generator.writeEndObject();\n     }\n+\n+    @Override\n+    public Object accept(ExpressionVisitor visitor, Object extraData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4104a1cce8b5ddd2a1b3cfd30d1b4d1ab9433a8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NDYxOQ==", "bodyText": "This class is extended for all databases, please add javadoc for this method so that subclassers know what it is for.", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r440074619", "createdAt": "2020-06-15T10:17:22Z", "author": {"login": "aaime"}, "path": "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/FilterToSQL.java", "diffHunk": "@@ -824,6 +824,16 @@ protected void visitBinaryComparisonOperator(BinaryComparisonOperator filter, Ob\n         Class rightContext = getExpressionType(left);\n         Class leftContext = getExpressionType(right);\n \n+        encodeBinaryComparisonOperator(filter, extraData, left, right, leftContext, rightContext);\n+    }\n+\n+    protected void encodeBinaryComparisonOperator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4104a1cce8b5ddd2a1b3cfd30d1b4d1ab9433a8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4MjUxMg==", "bodyText": "In general you cannot assume it's going to be a Literal, functions must work with whatever expression they are given as input. The existing function, without the postgresql encoding, would work even if the pointer was specified with a complex expression, possibly attribute based.\nIf you check SQLDialect, it gets called for splitting filters. For this case, I suggest to override it, and check if there is a pointer function, and if the function is called in a \"static\" way. Static does not mean \"literal\" directly, it just means that the expression tree referenced by  \"pointer\" :\n\ndoes not use any attribute\ndoes not use any VolatileFunction\n\nIf those conditions are met, you can include the function in the capabilities, otherwise, you exclude it from them and have the splitter move it to the post-filter.\nI think (please verify) that the JDBCDataStore code makes the filter go through a SimplfyingFilterVisitor, which is already doing this job for you:\n\n  \n    \n      geotools/modules/library/main/src/main/java/org/geotools/filter/visitor/SimplifyingFilterVisitor.java\n    \n    \n         Line 453\n      in\n      029dc5c\n    \n    \n    \n    \n\n        \n          \n           public Object visit(org.opengis.filter.expression.Function function, Object extraData) { \n        \n    \n  \n\n\nIf so, all you need to do is to write a DefaultFilterVisitor, if it finds a JSONPointerFunction, it means it was not eliminated by the simplifier, and thus it's dynamic, cannot be encoded in SQL.", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r440082512", "createdAt": "2020-06-15T10:32:35Z", "author": {"login": "aaime"}, "path": "modules/plugin/jdbc/jdbc-postgis/src/main/java/org/geotools/data/postgis/FilterToSqlHelper.java", "diffHunk": "@@ -625,6 +633,42 @@ public boolean visitFunction(Function function, Object extraData) throws IOExcep\n         return true;\n     }\n \n+    private void encodeJsonPointer(Function jsonPointer, Object extraData) throws IOException {\n+        Expression json = getParameter(jsonPointer, 0, true);\n+        Expression pointer = getParameter(jsonPointer, 1, true);\n+        if (json instanceof PropertyName && pointer instanceof Literal) {\n+            // if not a string need to cast the json attribute\n+            boolean needCast =\n+                    extraData != null\n+                            && extraData instanceof Class\n+                            && !extraData.equals(String.class);\n+\n+            if (needCast) out.write('(');\n+            json.accept(delegate, null);\n+            out.write(\" ::json \");\n+            String strPointer = ((Literal) pointer).getValue().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4104a1cce8b5ddd2a1b3cfd30d1b4d1ab9433a8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4NDIwMg==", "bodyText": "Please add a test for nested properties, like a/b (instead of array case) and also one for a non-encodable case, like, the pointer value is contained in a second attribute of the feature.", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r440084202", "createdAt": "2020-06-15T10:36:03Z", "author": {"login": "aaime"}, "path": "modules/plugin/jdbc/jdbc-postgis/src/test/java/org/geotools/data/postgis/PostgisFilterToSQLTest.java", "diffHunk": "@@ -248,4 +250,27 @@ public void testFunctionLike() throws Exception {\n         String sql = writer.toString().toLowerCase().trim();\n         assertEquals(\"where lower(teststring) like 'a_literal'\", sql);\n     }\n+\n+    @Test\n+    public void testFunctionJsonPointer() throws Exception {\n+        filterToSql.setFeatureType(testSchema);\n+        Function pointer =\n+                ff.function(\"jsonPointer\", ff.property(\"testJSON\"), ff.literal(\"/arr/0\"));\n+\n+        filterToSql.encode(pointer);\n+        String sql = writer.toString().toLowerCase().trim();\n+        assertEquals(\"testjson ::json  -> 'arr' ->> 0\", sql);\n+    }\n+\n+    @Test\n+    public void testBinaryComparisonWithJsonPointer() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4104a1cce8b5ddd2a1b3cfd30d1b4d1ab9433a8"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0d68f5458e02a11d8e8cad5345252cee0bf7178", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geotools/geotools/commit/f0d68f5458e02a11d8e8cad5345252cee0bf7178", "committedDate": "2020-06-17T09:29:32Z", "message": "[GEOT-6623] Add support for jsonPointer to SQL translation in a PostgreSQL database"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71423e684efbf214370745287fad42b2ec8d1ae3", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geotools/geotools/commit/71423e684efbf214370745287fad42b2ec8d1ae3", "committedDate": "2020-06-17T10:14:00Z", "message": "reviewer's suggestion applied"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a4104a1cce8b5ddd2a1b3cfd30d1b4d1ab9433a8", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geotools/geotools/commit/a4104a1cce8b5ddd2a1b3cfd30d1b4d1ab9433a8", "committedDate": "2020-06-11T15:30:33Z", "message": "[GEOT-6623] Add support for jsonPointer to SQL translation in a PostgreSQL database"}, "afterCommit": {"oid": "71423e684efbf214370745287fad42b2ec8d1ae3", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geotools/geotools/commit/71423e684efbf214370745287fad42b2ec8d1ae3", "committedDate": "2020-06-17T10:14:00Z", "message": "reviewer's suggestion applied"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTk5NDE0", "url": "https://github.com/geotools/geotools/pull/2982#pullrequestreview-434999414", "createdAt": "2020-06-22T14:49:13Z", "commit": {"oid": "71423e684efbf214370745287fad42b2ec8d1ae3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDo0OToxM1rOGnEKJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDo0OTo0MFrOGnELZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxNTc4Mg==", "bodyText": "Thread safety issue here. The capabilities object is big and normally shared, you should not be modifying it. Since it's large, cloning it is also somehow expensive.\nSuggestion: change the PostPreProcessFilterSplittingVisitor so that the \"!fcs.supports(expression.getClass())\" check is delegated to a separate method that you can override here.", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r443615782", "createdAt": "2020-06-22T14:49:13Z", "author": {"login": "aaime"}, "path": "modules/plugin/jdbc/jdbc-postgis/src/main/java/org/geotools/data/postgis/PostGISDialect.java", "diffHunk": "@@ -1490,4 +1499,42 @@ protected String getEstimatedExtentFunction() {\n                 ? \"ST_EstimatedExtent\"\n                 : \"ST_Estimated_Extent\";\n     }\n+\n+    public Filter[] splitFilter(Filter filter, SimpleFeatureType schema) {\n+        PostPreProcessFilterSplittingVisitor splitter =\n+                new PostPreProcessFilterSplittingVisitor(\n+                        dataStore.getFilterCapabilities(), schema, null) {\n+                    private FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();\n+\n+                    @Override\n+                    public Object visit(Function expression, Object notUsed) {\n+                        if (expression instanceof JsonPointerFunction) {\n+                            // takes the json pointer param to check if\n+                            // can be encoded\n+                            Expression param = expression.getParameters().get(1);\n+                            if ((expression.getParameters().get(1) instanceof Literal))\n+                                // can encode\n+                                fcs.addType(JsonPointerFunction.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71423e684efbf214370745287fad42b2ec8d1ae3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxNjEwMg==", "bodyText": "The filter to sql will fail if the expression is not a Literal though (class cast exception).", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r443616102", "createdAt": "2020-06-22T14:49:40Z", "author": {"login": "aaime"}, "path": "modules/plugin/jdbc/jdbc-postgis/src/main/java/org/geotools/data/postgis/PostGISDialect.java", "diffHunk": "@@ -1490,4 +1499,42 @@ protected String getEstimatedExtentFunction() {\n                 ? \"ST_EstimatedExtent\"\n                 : \"ST_Estimated_Extent\";\n     }\n+\n+    public Filter[] splitFilter(Filter filter, SimpleFeatureType schema) {\n+        PostPreProcessFilterSplittingVisitor splitter =\n+                new PostPreProcessFilterSplittingVisitor(\n+                        dataStore.getFilterCapabilities(), schema, null) {\n+                    private FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();\n+\n+                    @Override\n+                    public Object visit(Function expression, Object notUsed) {\n+                        if (expression instanceof JsonPointerFunction) {\n+                            // takes the json pointer param to check if\n+                            // can be encoded\n+                            Expression param = expression.getParameters().get(1);\n+                            if ((expression.getParameters().get(1) instanceof Literal))\n+                                // can encode\n+                                fcs.addType(JsonPointerFunction.class);\n+                            else {\n+                                FilterAttributeExtractor extractor = new FilterAttributeExtractor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71423e684efbf214370745287fad42b2ec8d1ae3"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19d172a88948f1a4e5e79148e7863f7bdb45a833", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geotools/geotools/commit/19d172a88948f1a4e5e79148e7863f7bdb45a833", "committedDate": "2020-06-24T16:14:58Z", "message": "proper handling of capabilities + defensive filter copy before manipulating it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da7eabbd362ec0b1bffeb2f3776128aa8f4293b3", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geotools/geotools/commit/da7eabbd362ec0b1bffeb2f3776128aa8f4293b3", "committedDate": "2020-06-29T10:45:05Z", "message": "check for JsonPointer function support inside support method"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2783, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}