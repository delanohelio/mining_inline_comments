{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxODY4MDk0", "number": 2741, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQyMzoyMjoyM1rODXZxGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo0NDoyN1rODXdnNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODY2MDEwOnYy", "diffSide": "LEFT", "path": "modules/plugin/csv/src/main/java/org/geotools/data/csv/CSVFeatureSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQyMzoyMjoyM1rOFcrpmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNTo1NToxMlrOFh0ovw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYxOTYwOQ==", "bodyText": "Is this just left over from the old tutorial code? Just want to make sure we aren't breaking a docs reference.", "url": "https://github.com/geotools/geotools/pull/2741#discussion_r365619609", "createdAt": "2020-01-12T23:22:23Z", "author": {"login": "bradh"}, "path": "modules/plugin/csv/src/main/java/org/geotools/data/csv/CSVFeatureSource.java", "diffHunk": "@@ -45,11 +45,12 @@ public CSVFeatureSource(ContentEntry entry, Query query) {\n         super(entry, query);\n     }\n \n+    @Override\n     public CSVDataStore getDataStore() {\n         return (CSVDataStore) super.getDataStore();\n     }\n \n-    // docs start getBoundsInternal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac76183724eb10d21cab4604347f56d013ad9ee5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAwOTcyNw==", "bodyText": "The docs code is now completely broken out and I think I've finally found all of these.", "url": "https://github.com/geotools/geotools/pull/2741#discussion_r371009727", "createdAt": "2020-01-26T15:55:12Z", "author": {"login": "ianturton"}, "path": "modules/plugin/csv/src/main/java/org/geotools/data/csv/CSVFeatureSource.java", "diffHunk": "@@ -45,11 +45,12 @@ public CSVFeatureSource(ContentEntry entry, Query query) {\n         super(entry, query);\n     }\n \n+    @Override\n     public CSVDataStore getDataStore() {\n         return (CSVDataStore) super.getDataStore();\n     }\n \n-    // docs start getBoundsInternal", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYxOTYwOQ=="}, "originalCommit": {"oid": "ac76183724eb10d21cab4604347f56d013ad9ee5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTI5MDEyOnYy", "diffSide": "RIGHT", "path": "modules/plugin/csv/src/test/java/org/geotools/data/csv/TestCRSHandling.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo0NDoyN1rOFcxTNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNjo0MDowMVrOFh01Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxMjE4MA==", "bodyText": "Suggestion, check that the contents can be read and have the expected value. Maybe by just round tripping, that, is, read back the file with a new store instance and checking that the CRS associated to the feature type is the expected one.", "url": "https://github.com/geotools/geotools/pull/2741#discussion_r365712180", "createdAt": "2020-01-13T09:44:27Z", "author": {"login": "aaime"}, "path": "modules/plugin/csv/src/test/java/org/geotools/data/csv/TestCRSHandling.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.geotools.data.csv;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.io.FilenameUtils;\n+import org.geotools.data.DataStore;\n+import org.geotools.data.DataStoreFinder;\n+import org.geotools.data.simple.SimpleFeatureSource;\n+import org.geotools.data.simple.SimpleFeatureStore;\n+import org.geotools.referencing.CRS;\n+import org.geotools.test.TestData;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.opengis.referencing.FactoryException;\n+import org.opengis.referencing.NoSuchAuthorityCodeException;\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\n+\n+public class TestCRSHandling {\n+\n+    private static File tmp;\n+    private static File statesfile;\n+    private static DataStore stateStore;\n+\n+    /**\n+     * Check that CRS are handled correctly\n+     *\n+     * @throws Exception\n+     */\n+    @Before\n+    public void setUp() throws Exception {}\n+\n+    @BeforeClass\n+    public static void createTemporaryLocations() throws IOException {\n+        tmp = File.createTempFile(\"example\", \"\");\n+        boolean exists = tmp.exists();\n+        if (exists) {\n+            tmp.delete();\n+        }\n+        boolean created = tmp.mkdirs();\n+        if (!created) {\n+            System.exit(1);\n+        }\n+        statesfile = new File(tmp, \"locations.csv\");\n+\n+        URL resource = TestData.getResource(CSVWriteTest.class, \"locations.csv\");\n+        Files.copy(resource.openStream(), statesfile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(CSVDataStoreFactory.FILE_PARAM.key, statesfile.toString());\n+        stateStore = DataStoreFinder.getDataStore(params);\n+    }\n+\n+    @Test\n+    public void testPrjFileRead()\n+            throws FileNotFoundException, IOException, NoSuchAuthorityCodeException,\n+                    FactoryException {\n+        File f = TestData.file(this, \"coastal2.csv\");\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(CSVDataStoreFactory.FILE_PARAM.key, f.toString());\n+        params.put(CSVDataStoreFactory.STRATEGYP.key, CSVDataStoreFactory.WKT_STRATEGY);\n+        params.put(CSVDataStoreFactory.WKTP.key, \"WKT\");\n+\n+        DataStore store = DataStoreFinder.getDataStore(params);\n+        String name = store.getTypeNames()[0];\n+        CoordinateReferenceSystem crs =\n+                store.getFeatureSource(name).getSchema().getCoordinateReferenceSystem();\n+        CoordinateReferenceSystem expected = CRS.decode(\"EPSG:27700\");\n+        assertEquals(\n+                expected.getIdentifiers().iterator().next().getCode(),\n+                crs.getIdentifiers().iterator().next().getCode());\n+    }\n+\n+    @Test\n+    public void testWritePrj() throws IOException {\n+        File f = new File(tmp, \"testcrs.csv\");\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(CSVDataStoreFactory.FILE_PARAM.key, f.toString());\n+        params.put(CSVDataStoreFactory.STRATEGYP.key, CSVDataStoreFactory.WKT_STRATEGY);\n+        params.put(CSVDataStoreFactory.WKTP.key, \"WKT\");\n+        params.put(CSVDataStoreFactory.WRITEPRJ.key, \"true\");\n+        DataStore store = DataStoreFinder.getDataStore(params);\n+        store.createSchema(stateStore.getSchema(stateStore.getTypeNames()[0]));\n+        SimpleFeatureSource source = store.getFeatureSource(store.getTypeNames()[0]);\n+        if (!(source instanceof SimpleFeatureStore)) {\n+            fail(\"can't create output file\");\n+        }\n+        SimpleFeatureStore outstore = (SimpleFeatureStore) source;\n+        outstore.addFeatures(\n+                stateStore.getFeatureSource(stateStore.getTypeNames()[0]).getFeatures());\n+        store.dispose();\n+        String prjName = FilenameUtils.getBaseName(f.getName()) + \".prj\";\n+        File prj = new File(f.getParent(), prjName);\n+        assertTrue(prj.exists());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac76183724eb10d21cab4604347f56d013ad9ee5"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMjk0Mg==", "bodyText": "Just as well I checked - it was wrong :-(", "url": "https://github.com/geotools/geotools/pull/2741#discussion_r371012942", "createdAt": "2020-01-26T16:40:01Z", "author": {"login": "ianturton"}, "path": "modules/plugin/csv/src/test/java/org/geotools/data/csv/TestCRSHandling.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.geotools.data.csv;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.io.FilenameUtils;\n+import org.geotools.data.DataStore;\n+import org.geotools.data.DataStoreFinder;\n+import org.geotools.data.simple.SimpleFeatureSource;\n+import org.geotools.data.simple.SimpleFeatureStore;\n+import org.geotools.referencing.CRS;\n+import org.geotools.test.TestData;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.opengis.referencing.FactoryException;\n+import org.opengis.referencing.NoSuchAuthorityCodeException;\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\n+\n+public class TestCRSHandling {\n+\n+    private static File tmp;\n+    private static File statesfile;\n+    private static DataStore stateStore;\n+\n+    /**\n+     * Check that CRS are handled correctly\n+     *\n+     * @throws Exception\n+     */\n+    @Before\n+    public void setUp() throws Exception {}\n+\n+    @BeforeClass\n+    public static void createTemporaryLocations() throws IOException {\n+        tmp = File.createTempFile(\"example\", \"\");\n+        boolean exists = tmp.exists();\n+        if (exists) {\n+            tmp.delete();\n+        }\n+        boolean created = tmp.mkdirs();\n+        if (!created) {\n+            System.exit(1);\n+        }\n+        statesfile = new File(tmp, \"locations.csv\");\n+\n+        URL resource = TestData.getResource(CSVWriteTest.class, \"locations.csv\");\n+        Files.copy(resource.openStream(), statesfile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(CSVDataStoreFactory.FILE_PARAM.key, statesfile.toString());\n+        stateStore = DataStoreFinder.getDataStore(params);\n+    }\n+\n+    @Test\n+    public void testPrjFileRead()\n+            throws FileNotFoundException, IOException, NoSuchAuthorityCodeException,\n+                    FactoryException {\n+        File f = TestData.file(this, \"coastal2.csv\");\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(CSVDataStoreFactory.FILE_PARAM.key, f.toString());\n+        params.put(CSVDataStoreFactory.STRATEGYP.key, CSVDataStoreFactory.WKT_STRATEGY);\n+        params.put(CSVDataStoreFactory.WKTP.key, \"WKT\");\n+\n+        DataStore store = DataStoreFinder.getDataStore(params);\n+        String name = store.getTypeNames()[0];\n+        CoordinateReferenceSystem crs =\n+                store.getFeatureSource(name).getSchema().getCoordinateReferenceSystem();\n+        CoordinateReferenceSystem expected = CRS.decode(\"EPSG:27700\");\n+        assertEquals(\n+                expected.getIdentifiers().iterator().next().getCode(),\n+                crs.getIdentifiers().iterator().next().getCode());\n+    }\n+\n+    @Test\n+    public void testWritePrj() throws IOException {\n+        File f = new File(tmp, \"testcrs.csv\");\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(CSVDataStoreFactory.FILE_PARAM.key, f.toString());\n+        params.put(CSVDataStoreFactory.STRATEGYP.key, CSVDataStoreFactory.WKT_STRATEGY);\n+        params.put(CSVDataStoreFactory.WKTP.key, \"WKT\");\n+        params.put(CSVDataStoreFactory.WRITEPRJ.key, \"true\");\n+        DataStore store = DataStoreFinder.getDataStore(params);\n+        store.createSchema(stateStore.getSchema(stateStore.getTypeNames()[0]));\n+        SimpleFeatureSource source = store.getFeatureSource(store.getTypeNames()[0]);\n+        if (!(source instanceof SimpleFeatureStore)) {\n+            fail(\"can't create output file\");\n+        }\n+        SimpleFeatureStore outstore = (SimpleFeatureStore) source;\n+        outstore.addFeatures(\n+                stateStore.getFeatureSource(stateStore.getTypeNames()[0]).getFeatures());\n+        store.dispose();\n+        String prjName = FilenameUtils.getBaseName(f.getName()) + \".prj\";\n+        File prj = new File(f.getParent(), prjName);\n+        assertTrue(prj.exists());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxMjE4MA=="}, "originalCommit": {"oid": "ac76183724eb10d21cab4604347f56d013ad9ee5"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3693, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}