{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxOTQ4Mzc2", "number": 2977, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoyMToxMFrOED-2Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoyMToxMFrOED-2Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjEwODYzOnYy", "diffSide": "RIGHT", "path": "modules/library/main/src/main/java/org/geotools/filter/function/MapGetFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoyMToxMFrOGhUqcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoyMToxMFrOGhUqcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NDczOQ==", "bodyText": "NPE prone, check if map is not null. Also, no need to check if the map contains, one can simply call get:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (map.containsKey(key)) {\n          \n          \n            \n                    if (map != null) {\n          \n          \n            \n                      return map.get(key);\n          \n          \n            \n                    }", "url": "https://github.com/geotools/geotools/pull/2977#discussion_r437594739", "createdAt": "2020-06-09T17:21:10Z", "author": {"login": "aaime"}, "path": "modules/library/main/src/main/java/org/geotools/filter/function/MapGetFunction.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.filter.function;\n+\n+import static org.geotools.filter.capability.FunctionNameImpl.parameter;\n+\n+import java.util.Map;\n+import org.geotools.factory.CommonFactoryFinder;\n+import org.geotools.filter.FunctionExpressionImpl;\n+import org.geotools.filter.capability.FunctionNameImpl;\n+import org.geotools.util.Converters;\n+import org.opengis.filter.FilterFactory2;\n+import org.opengis.filter.capability.FunctionName;\n+import org.opengis.filter.expression.VolatileFunction;\n+\n+/** Extracts a value from a map given the map name and the needed key as parameters */\n+public class MapGetFunction extends FunctionExpressionImpl implements VolatileFunction {\n+\n+    FilterFactory2 FF = CommonFactoryFinder.getFilterFactory2();\n+\n+    public static FunctionName NAME =\n+            new FunctionNameImpl(\n+                    \"mapGet\",\n+                    parameter(\"value\", Object.class),\n+                    parameter(\"map\", Map.class),\n+                    parameter(\"key\", String.class));\n+\n+    public MapGetFunction() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public Object evaluate(Object object, Class context) {\n+        Object result = evaluate(object);\n+        if (result == null) {\n+            return null;\n+        } else {\n+            return Converters.convert(result, context);\n+        }\n+    }\n+\n+    public Object evaluate(Object feature) {\n+        Map map = getExpression(0).evaluate(feature, Map.class);\n+        String key = getExpression(1).evaluate(feature, String.class);\n+        if (map.containsKey(key)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2710015d1e9a9a9b7091d1af199489a23995aef5"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3543, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}