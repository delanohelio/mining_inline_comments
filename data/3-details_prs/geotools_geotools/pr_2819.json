{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MDE5MjA3", "number": 2819, "title": "[GEOT-6518]: Heterogeneous CRS ImageMosaic supporting output in Targe\u2026", "bodyText": "\u2026tCRS matching one of the internal CRSs\n\nChecklist\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n The changes are not breaking the build in downstream projects using SNAPSHOT dependencies, GeoWebCache and GeoServer.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for unsupported modules):\n\n There is a ticket in Jira describing the issue/improvement/feature (a notable exemptions is, changes not visible to end users)\n The pull request contains changes related to a single objective. If multiple focuses cannot be avoided, each one is in its own commit and has a separate ticket describing it.\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOT-XYZW] Title of the Jira ticket\"\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by travis-ci after opening this PR)\n Documentation has been updated accordingly.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.", "createdAt": "2020-02-24T14:27:03Z", "url": "https://github.com/geotools/geotools/pull/2819", "merged": true, "mergeCommit": {"oid": "93119c65f8691e7c5caf239fcccae262e589db7f"}, "closed": true, "closedAt": "2020-03-02T09:30:39Z", "author": {"login": "dromagnoli"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHeiDdAFqTM2MzQzNDU2Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJqVMpAFqTM2NzA1MzA5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNDM0NTYy", "url": "https://github.com/geotools/geotools/pull/2819#pullrequestreview-363434562", "createdAt": "2020-02-24T14:37:53Z", "commit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDozNzo1M1rOFti2NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDozNzo1M1rOFti2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMwMTE3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * contain the list of internal EPSG Codes of the mulitple CRS, if the reader implement it.\n          \n          \n            \n                 * contain the list of internal EPSG Codes of the multiple CRS, if the reader implements it.", "url": "https://github.com/geotools/geotools/pull/2819#discussion_r383301173", "createdAt": "2020-02-24T14:37:53Z", "author": {"login": "aaime"}, "path": "modules/library/coverage/src/main/java/org/geotools/coverage/grid/io/GridCoverage2DReader.java", "diffHunk": "@@ -117,6 +117,12 @@\n      */\n     public static final String MULTICRS_READER = \"MultiCRSReader\";\n \n+    /**\n+     * When the above MULTICRS_READER property is present and evaluates to \"true\", this property may\n+     * contain the list of internal EPSG Codes of the mulitple CRS, if the reader implement it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNDY0Mzgy", "url": "https://github.com/geotools/geotools/pull/2819#pullrequestreview-363464382", "createdAt": "2020-02-24T15:15:45Z", "commit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNToxNTo0NVrOFtkQxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTo0MzoyMFrOFtlWqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNDM1Ng==", "bodyText": "\"When this read parameter is set to true, the reader will produce output in the requested CRS, assuming it matches one of the native CRSs, as reported by the MULTICRS_EPSGCODES metadata entry, and that the requested grid geometry is expressed in said CRS. When set to false (default), then only the native CRS declared by GridCoverage2DReader.getCoordinateReferenceSystem will be produced in output\".\n(I skipped adding the links)", "url": "https://github.com/geotools/geotools/pull/2819#discussion_r383324356", "createdAt": "2020-02-24T15:15:45Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/ImageMosaicFormat.java", "diffHunk": "@@ -190,6 +190,18 @@\n                     new Boolean[] {Boolean.TRUE, Boolean.FALSE},\n                     Boolean.FALSE);\n \n+    /**\n+     * A multi-crs reader supporting alternative CRSs can produce output to one of them when the\n+     * requested grid geometry is expressed in that CRS and this flag is set to true. No\n+     * reprojections will be performed on granules having native CRS matching the target one.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNTk0MQ==", "bodyText": "Hum... say we have a bunch of granules and some are in the requested CRS, others are not. Is the padding going to be applied to the ones that are getting reprojected?", "url": "https://github.com/geotools/geotools/pull/2819#discussion_r383325941", "createdAt": "2020-02-24T15:18:23Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/RasterLayerRequest.java", "diffHunk": "@@ -278,6 +298,53 @@ public RasterLayerRequest(\n         spatialRequestHelper.compute();\n     }\n \n+    private void checkAlternativeCRSIsSupported() throws IOException {\n+        if (heterogeneousCRS && useAlternativeCRS && requestedBounds != null) {\n+            CoordinateReferenceSystem requestedCRS = requestedBounds.getCoordinateReferenceSystem();\n+            String requestedEpsgCode = Utils.getEpsgCodeNumber(requestedCRS);\n+            // Enable alternative CRS Output support only when the requested CRS doesn't match\n+            // the coverage's one. In that case, proceed with the standard approach\n+            if (rasterManager.hasAlternativeCRS(requestedEpsgCode)\n+                    && !CRS.equalsIgnoreMetadata(\n+                            requestedCRS, spatialRequestHelper.getReferenceCRS(false))) {\n+                // Initialize the alternativeCRS Output Coverage properties\n+                spatialRequestHelper.setSupportingAlternativeCRSOutput(true);\n+                CoverageProperties alternativeProperties = new CoverageProperties();\n+                alternativeProperties.setCrs2D(requestedCRS);\n+                alternativeProperties.setBBox(ReferencedEnvelope.reference(requestedBounds));\n+                spatialRequestHelper.setAlternativeProperties(alternativeProperties);\n+            } else {\n+                // We can't support the alternative CRS so let's disable it\n+                useAlternativeCRS = false;\n+            }\n+        }\n+    }\n+\n+    private void computeRequestedGridGeometry() throws IOException {\n+        if (requestedGridGeometry != null) {\n+            if (heterogeneousCRS && !useAlternativeCRS) {\n+                GridEnvelope2D paddedRange =\n+                        new GridEnvelope2D(requestedGridGeometry.getGridRange2D());\n+                paddedRange.setBounds(\n+                        paddedRange.x - DEFAULT_PADDING,\n+                        paddedRange.y - DEFAULT_PADDING,\n+                        paddedRange.width + DEFAULT_PADDING * 2,\n+                        paddedRange.height + DEFAULT_PADDING * 2);\n+\n+                GridGeometry2D padded =\n+                        new GridGeometry2D(\n+                                paddedRange,\n+                                requestedGridGeometry.getGridToCRS(),\n+                                requestedGridGeometry.getCoordinateReferenceSystem());\n+                spatialRequestHelper.setRequestedGridGeometry(padded.toCanonical());\n+            } else {\n+                // Do not apply any padding if we are going to produce output in requested CRS.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyODE4Mw==", "bodyText": "This looks like a broken version of \"CRS.lookupEpsgCode(crs, false)\", in that it will fail if the CRS happens to have alternative authorities that are not \"EPSG\". Setting the second parameter to \"false\" avoids scans.", "url": "https://github.com/geotools/geotools/pull/2819#discussion_r383328183", "createdAt": "2020-02-24T15:21:51Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/Utils.java", "diffHunk": "@@ -208,6 +212,51 @@\n         MOSAIC_SUPPORT_FILES_FILTER = initMosaicSupportFilesFilter();\n     }\n \n+    /** Check if the provided reader is a MultiCRS Reader and it can support the specified crs. */\n+    public static boolean isSupportedCRS(GridCoverage2DReader reader, CoordinateReferenceSystem crs)\n+            throws FactoryException, IOException {\n+        String multiCrsReader =\n+                reader.getMetadataValue(AbstractGridCoverage2DReader.MULTICRS_READER);\n+        boolean isMultiCRS = multiCrsReader != null && Boolean.valueOf(multiCrsReader);\n+        String supportedEpsgCodes = \"\";\n+        if (isMultiCRS) {\n+            supportedEpsgCodes =\n+                    reader.getMetadataValue(AbstractGridCoverage2DReader.MULTICRS_EPSGCODES);\n+        }\n+        if (!StringUtils.isBlank(supportedEpsgCodes) && crs != null) {\n+            Integer targetCRSEpsgCode = CRS.lookupEpsgCode(crs, true);\n+            if (targetCRSEpsgCode != null) {\n+                String code = String.valueOf(targetCRSEpsgCode);\n+                supportedEpsgCodes = supportedEpsgCodes.replaceAll(\"[^0-9,]\", \"\");\n+                String[] epsgCodes = supportedEpsgCodes.split(\",\");\n+                for (String epsgCode : epsgCodes) {\n+                    if (code.equalsIgnoreCase(epsgCode)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Return the EPSG code number of a provided coordinate reference system by just returning the\n+     * identifier's code (not doing any lookup or scan).\n+     *\n+     * @param crs the CoordinateReferenceSystem to be checked\n+     * @return null if no code is available\n+     */\n+    public static String getEpsgCodeNumber(CoordinateReferenceSystem crs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyODgwMA==", "bodyText": "Here is does a full scan... is this intended?", "url": "https://github.com/geotools/geotools/pull/2819#discussion_r383328800", "createdAt": "2020-02-24T15:22:53Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/Utils.java", "diffHunk": "@@ -208,6 +212,51 @@\n         MOSAIC_SUPPORT_FILES_FILTER = initMosaicSupportFilesFilter();\n     }\n \n+    /** Check if the provided reader is a MultiCRS Reader and it can support the specified crs. */\n+    public static boolean isSupportedCRS(GridCoverage2DReader reader, CoordinateReferenceSystem crs)\n+            throws FactoryException, IOException {\n+        String multiCrsReader =\n+                reader.getMetadataValue(AbstractGridCoverage2DReader.MULTICRS_READER);\n+        boolean isMultiCRS = multiCrsReader != null && Boolean.valueOf(multiCrsReader);\n+        String supportedEpsgCodes = \"\";\n+        if (isMultiCRS) {\n+            supportedEpsgCodes =\n+                    reader.getMetadataValue(AbstractGridCoverage2DReader.MULTICRS_EPSGCODES);\n+        }\n+        if (!StringUtils.isBlank(supportedEpsgCodes) && crs != null) {\n+            Integer targetCRSEpsgCode = CRS.lookupEpsgCode(crs, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyOTM2Mg==", "bodyText": "Do these methods need to be public?", "url": "https://github.com/geotools/geotools/pull/2819#discussion_r383329362", "createdAt": "2020-02-24T15:23:41Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/Utils.java", "diffHunk": "@@ -208,6 +212,51 @@\n         MOSAIC_SUPPORT_FILES_FILTER = initMosaicSupportFilesFilter();\n     }\n \n+    /** Check if the provided reader is a MultiCRS Reader and it can support the specified crs. */\n+    public static boolean isSupportedCRS(GridCoverage2DReader reader, CoordinateReferenceSystem crs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyOTkwNQ==", "bodyText": "Euh? :-D", "url": "https://github.com/geotools/geotools/pull/2819#discussion_r383329905", "createdAt": "2020-02-24T15:24:36Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/RasterLayerResponse.java", "diffHunk": "@@ -477,6 +479,13 @@ public SubmosaicProducerFactory getGranuleCollectorsFactory() {\n \n     private ReferencedEnvelope mosaicBBox;\n \n+    /**\n+     * With Heterogeneous CRS, all the geometries in the catalog are expressed in a single CRS, even\n+     * if the granules have a different native CRS. This variable is the mosaicBBOX to be used in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzMzk1MA==", "bodyText": "Magic number, best to make it a system variable if not a read parameter.\nI'd also suggest to switch the default to something larger, a classic world wide satellite mosaic case is having all UTM zones (60 zones, further split into south and north) and the two polar caps, making for 122 CRSs present at the same time in the mosaic.", "url": "https://github.com/geotools/geotools/pull/2819#discussion_r383333950", "createdAt": "2020-02-24T15:30:46Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/RasterManager.java", "diffHunk": "@@ -1040,6 +1050,32 @@ public RasterManager(\n                 }\n             }\n         }\n+        if (heterogeneousCRS) {\n+            // If the reader is kept open (and the rasterManager doesn't change)\n+            // it would be useful to cache the result of a query for\n+            // a specific EPSG code on the index, so that a DB access won't be\n+            // repeated while the info is in cache.\n+\n+            alternativeCRSCache =\n+                    CacheBuilder.newBuilder()\n+                            .maximumSize(50)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzNDAwMw==", "bodyText": "Magic number, best to make it a system variable if not a read parameter.", "url": "https://github.com/geotools/geotools/pull/2819#discussion_r383334003", "createdAt": "2020-02-24T15:30:52Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/RasterManager.java", "diffHunk": "@@ -1040,6 +1050,32 @@ public RasterManager(\n                 }\n             }\n         }\n+        if (heterogeneousCRS) {\n+            // If the reader is kept open (and the rasterManager doesn't change)\n+            // it would be useful to cache the result of a query for\n+            // a specific EPSG code on the index, so that a DB access won't be\n+            // repeated while the info is in cache.\n+\n+            alternativeCRSCache =\n+                    CacheBuilder.newBuilder()\n+                            .maximumSize(50)\n+                            .expireAfterWrite(60, TimeUnit.SECONDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzOTQwOA==", "bodyText": "Painful... \"isReprojectionNeeded\" reads better.", "url": "https://github.com/geotools/geotools/pull/2819#discussion_r383339408", "createdAt": "2020-02-24T15:38:57Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/SpatialRequestHelper.java", "diffHunk": "@@ -115,8 +116,23 @@ public void setGeographicCRS2D(CoordinateReferenceSystem geographicCRS2D) {\n             this.geographicCRS = geographicCRS2D;\n         }\n \n+        public ReferencedEnvelope getComputedBBox() {\n+            return computedBBox;\n+        }\n+\n+        public void setComputedBBox(ReferencedEnvelope computedBBox) {\n+            this.computedBBox = computedBBox;\n+        }\n+\n+        public boolean isNeedsReprojection() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0MTM5Nw==", "bodyText": "Well done using constants", "url": "https://github.com/geotools/geotools/pull/2819#discussion_r383341397", "createdAt": "2020-02-24T15:41:58Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicReaderTest.java", "diffHunk": "@@ -192,6 +192,10 @@\n \n     private static final Logger LOGGER = Logger.getLogger(ImageMosaicReaderTest.class.toString());\n \n+    private static final int BASE_METADATANAMES_LENGTH = 13;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0MTY5Mg==", "bodyText": "What happened here? I see it does not match any of the constants.", "url": "https://github.com/geotools/geotools/pull/2819#discussion_r383341692", "createdAt": "2020-02-24T15:42:23Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicReaderTest.java", "diffHunk": "@@ -2491,7 +2495,7 @@ public void multipleDimensionsStackedSar() throws Exception {\n \n         final String[] metadataNames = reader.getMetadataNames();\n         assertNotNull(metadataNames);\n-        assertEquals(15, metadataNames.length);\n+        assertEquals(16, metadataNames.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0MjI1MQ==", "bodyText": "Are these resolution attributes needed?", "url": "https://github.com/geotools/geotools/pull/2819#discussion_r383342251", "createdAt": "2020-02-24T15:43:20Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/test/resources/org/geotools/gce/imagemosaic/test-data/heterogeneous_crs_2/indexer.properties", "diffHunk": "@@ -0,0 +1,10 @@\n+GranuleAcceptors=org.geotools.gce.imagemosaic.acceptors.HeterogeneousCRSAcceptorFactory\n+GranuleHandler=org.geotools.gce.imagemosaic.granulehandler.ReprojectingGranuleHandlerFactory\n+HeterogeneousCRS=true\n+MosaicCRS=EPSG\\:4326\n+Schema=*the_geom:Polygon,location:String,crs:String,resX:double,resY:double\n+ResolutionXAttribute=resX", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNDkzODI1", "url": "https://github.com/geotools/geotools/pull/2819#pullrequestreview-363493825", "createdAt": "2020-02-24T15:51:39Z", "commit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTo1MTozOVrOFtlr3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTo1MTozOVrOFtlr3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0NzY3OA==", "bodyText": "This seems like opportunistic caching, as in \"while we computed the list of epsg codes supported, let's add them in the cache for the code by code checks\", but I'm just guessing here. Would be best if it was clear.", "url": "https://github.com/geotools/geotools/pull/2819#discussion_r383347678", "createdAt": "2020-02-24T15:51:39Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/RasterManager.java", "diffHunk": "@@ -1660,9 +1718,31 @@ String getMetadataValue(String name) {\n \n         // check if heterogeneous CRS\n         if (name.equalsIgnoreCase(AbstractGridCoverage2DReader.MULTICRS_READER)) {\n-            return String.valueOf(configuration.getCatalogConfigurationBean().isHeterogeneousCRS());\n+            return String.valueOf(heterogeneousCRS);\n         }\n \n+        if (name.equalsIgnoreCase(AbstractGridCoverage2DReader.MULTICRS_EPSGCODES)\n+                && heterogeneousCRS) {\n+\n+            // Extract the internal EPSG Codes found on the catalog\n+            String crsAttribute = null;\n+            try {\n+                crsAttribute = getCrsAttribute();\n+                if (crsAttribute != null) {\n+                    Set<String> crsSet = extractDomain(crsAttribute);\n+                    for (String crs : crsSet) {\n+                        // Cache the results for future queries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82"}, "originalPosition": 160}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "204a516041a94408e5eb90a0ceb1d0fde496a6fe", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/204a516041a94408e5eb90a0ceb1d0fde496a6fe", "committedDate": "2020-02-25T09:58:11Z", "message": "[GEOT-6518]: Heterogeneous CRS ImageMosaic supporting output in TargetCRS matching one of the internal CRSs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28a6b3e8fe683e8779c48e946279b87a29850c82", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/28a6b3e8fe683e8779c48e946279b87a29850c82", "committedDate": "2020-02-24T14:25:26Z", "message": "[GEOT-6518]: Heterogeneous CRS ImageMosaic supporting output in TargetCRS matching one of the internal CRSs"}, "afterCommit": {"oid": "204a516041a94408e5eb90a0ceb1d0fde496a6fe", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/204a516041a94408e5eb90a0ceb1d0fde496a6fe", "committedDate": "2020-02-25T09:58:11Z", "message": "[GEOT-6518]: Heterogeneous CRS ImageMosaic supporting output in TargetCRS matching one of the internal CRSs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MDUzMDk1", "url": "https://github.com/geotools/geotools/pull/2819#pullrequestreview-367053095", "createdAt": "2020-03-02T09:30:34Z", "commit": {"oid": "204a516041a94408e5eb90a0ceb1d0fde496a6fe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2926, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}