{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxODY4MDk0", "number": 2741, "title": "[GEOT-6487] CSVDatastore ignores the projection of output geometry", "bodyText": "Checklist\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n The changes are not breaking the build in downstream projects using SNAPSHOT dependencies, GeoWebCache and GeoServer.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for unsupported modules):\n\n There is a ticket in Jira describing the issue/improvement/feature (a notable exemptions is, changes not visible to end users)\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOT-XYZW] Title of the Jira ticket\"\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by travis-ci after opening this PR)\n Documentation has been updated accordingly.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.", "createdAt": "2020-01-12T20:30:11Z", "url": "https://github.com/geotools/geotools/pull/2741", "merged": true, "mergeCommit": {"oid": "8ab1b4310cc7aff8f722bf46f62cabddaf9dbe3b"}, "closed": true, "closedAt": "2020-01-27T07:59:22Z", "author": {"login": "ianturton"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5teX7gH2gAyMzYxODY4MDk0OjkyOGY4NTA2ZmUxODAzYzhhZjJkOGQxN2I4NDNlZjUxMjliMTk4NGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-K44kgH2gAyMzYxODY4MDk0Ojc0ZjkxMmYwZDYxM2MyNTU4M2UxODM2Nzk4NjM4ODBmNDU4YjUwNGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "928f8506fe1803c8af2d8d17b843ef5129b1984f", "author": {"user": {"login": "ianturton", "name": "Ian Turton"}}, "url": "https://github.com/geotools/geotools/commit/928f8506fe1803c8af2d8d17b843ef5129b1984f", "committedDate": "2020-01-12T20:07:31Z", "message": "read and write .prj files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d836aa535af07ac7780e468b8df8e40bcaa0d972", "author": {"user": {"login": "ianturton", "name": "Ian Turton"}}, "url": "https://github.com/geotools/geotools/commit/d836aa535af07ac7780e468b8df8e40bcaa0d972", "committedDate": "2020-01-12T20:22:20Z", "message": "read and write .prj files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0609c5e6b52b20e26f48e2897d3977e65ac370f", "author": {"user": {"login": "ianturton", "name": "Ian Turton"}}, "url": "https://github.com/geotools/geotools/commit/e0609c5e6b52b20e26f48e2897d3977e65ac370f", "committedDate": "2020-01-12T20:22:20Z", "message": "read and write .prj files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac76183724eb10d21cab4604347f56d013ad9ee5", "author": {"user": {"login": "ianturton", "name": "Ian Turton"}}, "url": "https://github.com/geotools/geotools/commit/ac76183724eb10d21cab4604347f56d013ad9ee5", "committedDate": "2020-01-12T20:29:47Z", "message": "rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNjA3MjQ3", "url": "https://github.com/geotools/geotools/pull/2741#pullrequestreview-341607247", "createdAt": "2020-01-12T23:22:23Z", "commit": {"oid": "ac76183724eb10d21cab4604347f56d013ad9ee5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQyMzoyMjoyM1rOFcrpmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQyMzoyMjoyM1rOFcrpmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYxOTYwOQ==", "bodyText": "Is this just left over from the old tutorial code? Just want to make sure we aren't breaking a docs reference.", "url": "https://github.com/geotools/geotools/pull/2741#discussion_r365619609", "createdAt": "2020-01-12T23:22:23Z", "author": {"login": "bradh"}, "path": "modules/plugin/csv/src/main/java/org/geotools/data/csv/CSVFeatureSource.java", "diffHunk": "@@ -45,11 +45,12 @@ public CSVFeatureSource(ContentEntry entry, Query query) {\n         super(entry, query);\n     }\n \n+    @Override\n     public CSVDataStore getDataStore() {\n         return (CSVDataStore) super.getDataStore();\n     }\n \n-    // docs start getBoundsInternal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac76183724eb10d21cab4604347f56d013ad9ee5"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNzIzOTA5", "url": "https://github.com/geotools/geotools/pull/2741#pullrequestreview-341723909", "createdAt": "2020-01-13T09:44:27Z", "commit": {"oid": "ac76183724eb10d21cab4604347f56d013ad9ee5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo0NDoyN1rOFcxTNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo0NDoyN1rOFcxTNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxMjE4MA==", "bodyText": "Suggestion, check that the contents can be read and have the expected value. Maybe by just round tripping, that, is, read back the file with a new store instance and checking that the CRS associated to the feature type is the expected one.", "url": "https://github.com/geotools/geotools/pull/2741#discussion_r365712180", "createdAt": "2020-01-13T09:44:27Z", "author": {"login": "aaime"}, "path": "modules/plugin/csv/src/test/java/org/geotools/data/csv/TestCRSHandling.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.geotools.data.csv;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.io.FilenameUtils;\n+import org.geotools.data.DataStore;\n+import org.geotools.data.DataStoreFinder;\n+import org.geotools.data.simple.SimpleFeatureSource;\n+import org.geotools.data.simple.SimpleFeatureStore;\n+import org.geotools.referencing.CRS;\n+import org.geotools.test.TestData;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.opengis.referencing.FactoryException;\n+import org.opengis.referencing.NoSuchAuthorityCodeException;\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\n+\n+public class TestCRSHandling {\n+\n+    private static File tmp;\n+    private static File statesfile;\n+    private static DataStore stateStore;\n+\n+    /**\n+     * Check that CRS are handled correctly\n+     *\n+     * @throws Exception\n+     */\n+    @Before\n+    public void setUp() throws Exception {}\n+\n+    @BeforeClass\n+    public static void createTemporaryLocations() throws IOException {\n+        tmp = File.createTempFile(\"example\", \"\");\n+        boolean exists = tmp.exists();\n+        if (exists) {\n+            tmp.delete();\n+        }\n+        boolean created = tmp.mkdirs();\n+        if (!created) {\n+            System.exit(1);\n+        }\n+        statesfile = new File(tmp, \"locations.csv\");\n+\n+        URL resource = TestData.getResource(CSVWriteTest.class, \"locations.csv\");\n+        Files.copy(resource.openStream(), statesfile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(CSVDataStoreFactory.FILE_PARAM.key, statesfile.toString());\n+        stateStore = DataStoreFinder.getDataStore(params);\n+    }\n+\n+    @Test\n+    public void testPrjFileRead()\n+            throws FileNotFoundException, IOException, NoSuchAuthorityCodeException,\n+                    FactoryException {\n+        File f = TestData.file(this, \"coastal2.csv\");\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(CSVDataStoreFactory.FILE_PARAM.key, f.toString());\n+        params.put(CSVDataStoreFactory.STRATEGYP.key, CSVDataStoreFactory.WKT_STRATEGY);\n+        params.put(CSVDataStoreFactory.WKTP.key, \"WKT\");\n+\n+        DataStore store = DataStoreFinder.getDataStore(params);\n+        String name = store.getTypeNames()[0];\n+        CoordinateReferenceSystem crs =\n+                store.getFeatureSource(name).getSchema().getCoordinateReferenceSystem();\n+        CoordinateReferenceSystem expected = CRS.decode(\"EPSG:27700\");\n+        assertEquals(\n+                expected.getIdentifiers().iterator().next().getCode(),\n+                crs.getIdentifiers().iterator().next().getCode());\n+    }\n+\n+    @Test\n+    public void testWritePrj() throws IOException {\n+        File f = new File(tmp, \"testcrs.csv\");\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(CSVDataStoreFactory.FILE_PARAM.key, f.toString());\n+        params.put(CSVDataStoreFactory.STRATEGYP.key, CSVDataStoreFactory.WKT_STRATEGY);\n+        params.put(CSVDataStoreFactory.WKTP.key, \"WKT\");\n+        params.put(CSVDataStoreFactory.WRITEPRJ.key, \"true\");\n+        DataStore store = DataStoreFinder.getDataStore(params);\n+        store.createSchema(stateStore.getSchema(stateStore.getTypeNames()[0]));\n+        SimpleFeatureSource source = store.getFeatureSource(store.getTypeNames()[0]);\n+        if (!(source instanceof SimpleFeatureStore)) {\n+            fail(\"can't create output file\");\n+        }\n+        SimpleFeatureStore outstore = (SimpleFeatureStore) source;\n+        outstore.addFeatures(\n+                stateStore.getFeatureSource(stateStore.getTypeNames()[0]).getFeatures());\n+        store.dispose();\n+        String prjName = FilenameUtils.getBaseName(f.getName()) + \".prj\";\n+        File prj = new File(f.getParent(), prjName);\n+        assertTrue(prj.exists());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac76183724eb10d21cab4604347f56d013ad9ee5"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74f912f0d613c25583e183679863880f458b504d", "author": {"user": {"login": "ianturton", "name": "Ian Turton"}}, "url": "https://github.com/geotools/geotools/commit/74f912f0d613c25583e183679863880f458b504d", "committedDate": "2020-01-26T16:39:25Z", "message": "finished up CRS fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2972, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}