{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5NjA1ODY5", "number": 3132, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNTozOTo0M1rOEgbyRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNTozOTo0M1rOEgbyRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDQ1MTI1OnYy", "diffSide": "RIGHT", "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/ImageMosaicReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNTozOTo0M1rOHNSupg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNjowMDozOVrOHNTiTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzcwMDM5MA==", "bodyText": "So, if I understand correctly, it first attempt to locate the configuration file using the parent folder name, and stops there if found (common case). If not, goes for the uncommon case, looking for a valid config file in property form with any other name (which is the current behavior)?", "url": "https://github.com/geotools/geotools/pull/3132#discussion_r483700390", "createdAt": "2020-09-04T15:39:43Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/ImageMosaicReader.java", "diffHunk": "@@ -549,47 +550,71 @@ private void initReaderFromURL(final Object source, final Hints hints) throws Ex\n                             \"The specified sourceURL doesn't refer to an existing file\");\n                 }\n             }\n+            File sourceParent = null;\n             if (sourceURL != null) {\n                 parentDirectory = URLs.urlToFile(sourceURL);\n+                sourceParent = parentDirectory;\n                 if (!parentDirectory.isDirectory()) {\n                     parentDirectory = parentDirectory.getParentFile();\n                 }\n             }\n+            final File datastoreProperties = new File(parentDirectory, Utils.DATASTORE_PROPERTIES);\n+            // 1st attempt of mosaic configuration loading.\n+            // Old Style\n             configuration = Utils.loadMosaicProperties(sourceURL);\n-            if (configuration == null) {\n-                //\n-                // do we have a datastore properties file? It will preempt on the shapefile\n-                //\n-                final File parent = URLs.urlToFile(sourceURL).getParentFile();\n-\n-                // this can be used to look for properties files that do NOT define a datastore\n-                final File[] properties =\n-                        parent.listFiles(\n-                                (FilenameFilter)\n-                                        FileFilterUtils.and(\n-                                                FileFilterUtils.notFileFilter(\n-                                                        FileFilterUtils.nameFileFilter(\n-                                                                \"indexer.properties\")),\n-                                                FileFilterUtils.and(\n-                                                        FileFilterUtils.notFileFilter(\n-                                                                FileFilterUtils.nameFileFilter(\n-                                                                        \"datastore.properties\")),\n-                                                        FileFilterUtils.makeFileOnly(\n-                                                                FileFilterUtils.suffixFileFilter(\n-                                                                        \".properties\")))));\n-\n-                // do we have a valid datastore + mosaic properties pair?\n-                final File datastoreProperties = new File(parent, \"datastore.properties\");\n-\n-                // Scan for MosaicConfigurationBeans from properties files\n+            if (configuration != null) {\n+                // Old style code: we have a single MosaicConfigurationBean. Use that\n+                // to create the catalog\n+                granuleCatalog =\n+                        ImageMosaicConfigHandler.createCatalog(\n+                                sourceURL, configuration, this.hints);\n+                File parent = URLs.urlToFile(sourceURL).getParentFile();\n+                MultiLevelROIProvider rois =\n+                        MultiLevelROIProviderMosaicFactory.createFootprintProvider(parent);\n+                granuleCatalog.setMultiScaleROIProvider(rois);\n+                addRasterManager(configuration, true);\n+            } else {\n+                // 2nd attempt: look for a property file with same name of the mosaic\n                 List<MosaicConfigurationBean> beans = new ArrayList<>();\n-                if (properties != null) {\n-                    for (File propFile : properties) {\n-                        if (Utils.checkFileReadable(propFile)\n-                                && Utils.loadMosaicProperties(URLs.fileToUrl(propFile)) != null) {\n-                            configuration = Utils.loadMosaicProperties(URLs.fileToUrl(propFile));\n-                            if (configuration != null) {\n-                                beans.add(configuration);\n+                if (configuration == null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5934bcc709a29753d076d7d93d39cca29f5233ef"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzcxMzYxNA==", "bodyText": "yep.\nSo if you have\nmyMosaic/myMosaic.properties\nmyMosaic/file1.tif\nmyMosaic/file2.tif\n...\nmyMosaic/file20000.tif\nIt will quickly look for a myMosaic/myMosaic.properties file.\nif missing, it will go through current behaviour via a listFiles.(*.properties as filefilter)", "url": "https://github.com/geotools/geotools/pull/3132#discussion_r483713614", "createdAt": "2020-09-04T16:00:39Z", "author": {"login": "dromagnoli"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/ImageMosaicReader.java", "diffHunk": "@@ -549,47 +550,71 @@ private void initReaderFromURL(final Object source, final Hints hints) throws Ex\n                             \"The specified sourceURL doesn't refer to an existing file\");\n                 }\n             }\n+            File sourceParent = null;\n             if (sourceURL != null) {\n                 parentDirectory = URLs.urlToFile(sourceURL);\n+                sourceParent = parentDirectory;\n                 if (!parentDirectory.isDirectory()) {\n                     parentDirectory = parentDirectory.getParentFile();\n                 }\n             }\n+            final File datastoreProperties = new File(parentDirectory, Utils.DATASTORE_PROPERTIES);\n+            // 1st attempt of mosaic configuration loading.\n+            // Old Style\n             configuration = Utils.loadMosaicProperties(sourceURL);\n-            if (configuration == null) {\n-                //\n-                // do we have a datastore properties file? It will preempt on the shapefile\n-                //\n-                final File parent = URLs.urlToFile(sourceURL).getParentFile();\n-\n-                // this can be used to look for properties files that do NOT define a datastore\n-                final File[] properties =\n-                        parent.listFiles(\n-                                (FilenameFilter)\n-                                        FileFilterUtils.and(\n-                                                FileFilterUtils.notFileFilter(\n-                                                        FileFilterUtils.nameFileFilter(\n-                                                                \"indexer.properties\")),\n-                                                FileFilterUtils.and(\n-                                                        FileFilterUtils.notFileFilter(\n-                                                                FileFilterUtils.nameFileFilter(\n-                                                                        \"datastore.properties\")),\n-                                                        FileFilterUtils.makeFileOnly(\n-                                                                FileFilterUtils.suffixFileFilter(\n-                                                                        \".properties\")))));\n-\n-                // do we have a valid datastore + mosaic properties pair?\n-                final File datastoreProperties = new File(parent, \"datastore.properties\");\n-\n-                // Scan for MosaicConfigurationBeans from properties files\n+            if (configuration != null) {\n+                // Old style code: we have a single MosaicConfigurationBean. Use that\n+                // to create the catalog\n+                granuleCatalog =\n+                        ImageMosaicConfigHandler.createCatalog(\n+                                sourceURL, configuration, this.hints);\n+                File parent = URLs.urlToFile(sourceURL).getParentFile();\n+                MultiLevelROIProvider rois =\n+                        MultiLevelROIProviderMosaicFactory.createFootprintProvider(parent);\n+                granuleCatalog.setMultiScaleROIProvider(rois);\n+                addRasterManager(configuration, true);\n+            } else {\n+                // 2nd attempt: look for a property file with same name of the mosaic\n                 List<MosaicConfigurationBean> beans = new ArrayList<>();\n-                if (properties != null) {\n-                    for (File propFile : properties) {\n-                        if (Utils.checkFileReadable(propFile)\n-                                && Utils.loadMosaicProperties(URLs.fileToUrl(propFile)) != null) {\n-                            configuration = Utils.loadMosaicProperties(URLs.fileToUrl(propFile));\n-                            if (configuration != null) {\n-                                beans.add(configuration);\n+                if (configuration == null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzcwMDM5MA=="}, "originalCommit": {"oid": "5934bcc709a29753d076d7d93d39cca29f5233ef"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3812, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}