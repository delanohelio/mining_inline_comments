{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0OTE5NDAw", "number": 3050, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo1MTo0NlrOEL-9sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo1NjoyNFrOEL_EtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDAxMzkyOnYy", "diffSide": "RIGHT", "path": "modules/library/render/src/main/java/org/geotools/renderer/lite/MemoryFilterOptimizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo1MTo0NlrOGt1IHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDo0MToxM1rOGuX32Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwOTUzNQ==", "bodyText": "This code does repeated passes over data structures as long as the or children, while a traditional loop could have done everything in a single pass, just keeping track of the first property name found, and the list of literals found in the process.\nJust saying, streams are not always an improvement, had this been in a performance critical section of code, the penalty would have been severe. But it's in a one-off, so it does not matter much, you can leave it as is.", "url": "https://github.com/geotools/geotools/pull/3050#discussion_r450709535", "createdAt": "2020-07-07T08:51:46Z", "author": {"login": "aaime"}, "path": "modules/library/render/src/main/java/org/geotools/renderer/lite/MemoryFilterOptimizer.java", "diffHunk": "@@ -111,7 +117,58 @@ public Object visit(Not filter, Object extraData) {\n \n     @Override\n     public Object visit(Or filter, Object extraData) {\n-        return memoize(filter, extraData, super::visit);\n+        return memoize(filter, extraData, this::inFilterOptimizer);\n+    }\n+\n+    /** Checks if an Or filter can be replaced by a single IN condition. */\n+    private Object inFilterOptimizer(Or filter, Object extraData) {\n+        InFunction inFilter = replaceWithInFilter(filter);\n+        if (inFilter == null) return super.visit(filter, extraData);\n+        return ff.equals(inFilter, ff.literal(true));\n+    }\n+\n+    private InFunction replaceWithInFilter(Or filter) {\n+        List<Filter> children = filter.getChildren();\n+        if (children.size() == 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82232810e5fcbaa8a5db88b53717e298a85111a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI3ODgwOQ==", "bodyText": "Indeed a single iteration over the collection is possible and faster, so I did the fix, thanks!", "url": "https://github.com/geotools/geotools/pull/3050#discussion_r451278809", "createdAt": "2020-07-08T04:41:13Z", "author": {"login": "fernandor777"}, "path": "modules/library/render/src/main/java/org/geotools/renderer/lite/MemoryFilterOptimizer.java", "diffHunk": "@@ -111,7 +117,58 @@ public Object visit(Not filter, Object extraData) {\n \n     @Override\n     public Object visit(Or filter, Object extraData) {\n-        return memoize(filter, extraData, super::visit);\n+        return memoize(filter, extraData, this::inFilterOptimizer);\n+    }\n+\n+    /** Checks if an Or filter can be replaced by a single IN condition. */\n+    private Object inFilterOptimizer(Or filter, Object extraData) {\n+        InFunction inFilter = replaceWithInFilter(filter);\n+        if (inFilter == null) return super.visit(filter, extraData);\n+        return ff.equals(inFilter, ff.literal(true));\n+    }\n+\n+    private InFunction replaceWithInFilter(Or filter) {\n+        List<Filter> children = filter.getChildren();\n+        if (children.size() == 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwOTUzNQ=="}, "originalCommit": {"oid": "f82232810e5fcbaa8a5db88b53717e298a85111a"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDAxODA2OnYy", "diffSide": "RIGHT", "path": "modules/library/render/src/test/java/org/geotools/renderer/lite/MemoryFilterOptimizerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo1Mjo1MlrOGt1Krg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDo0MTo1NVrOGuX4fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMDE5MA==", "bodyText": "This test covers only the happy case, could you write tests for the exception paths, like or with different properties, and with comparisons other than equality?", "url": "https://github.com/geotools/geotools/pull/3050#discussion_r450710190", "createdAt": "2020-07-07T08:52:52Z", "author": {"login": "aaime"}, "path": "modules/library/render/src/test/java/org/geotools/renderer/lite/MemoryFilterOptimizerTest.java", "diffHunk": "@@ -144,4 +148,35 @@ public void testEqualFeatureTypes() throws Exception {\n         Mockito.verify(spy, Mockito.times(0)).getAttribute(name);\n         Mockito.verify(spy, Mockito.times(1)).getAttribute(0);\n     }\n+\n+    public void testInFunctionOptimizer() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82232810e5fcbaa8a5db88b53717e298a85111a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI3ODk3Mg==", "bodyText": "Agreed, added test cases when the In function optimization is not accomplished.", "url": "https://github.com/geotools/geotools/pull/3050#discussion_r451278972", "createdAt": "2020-07-08T04:41:55Z", "author": {"login": "fernandor777"}, "path": "modules/library/render/src/test/java/org/geotools/renderer/lite/MemoryFilterOptimizerTest.java", "diffHunk": "@@ -144,4 +148,35 @@ public void testEqualFeatureTypes() throws Exception {\n         Mockito.verify(spy, Mockito.times(0)).getAttribute(name);\n         Mockito.verify(spy, Mockito.times(1)).getAttribute(0);\n     }\n+\n+    public void testInFunctionOptimizer() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMDE5MA=="}, "originalCommit": {"oid": "f82232810e5fcbaa8a5db88b53717e298a85111a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDAzMTg5OnYy", "diffSide": "RIGHT", "path": "modules/library/render/src/main/java/org/geotools/renderer/lite/MemoryFilterOptimizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo1NjoyNFrOGt1TFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNToxODozM1rOGuYeLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMjM0MQ==", "bodyText": "Nitpicking here, an \"in\" optimization can be performed over pairs of \"Expression, Literal\", e.g., strLow(myAtt) = 'abc' or strLow(myAtt) = 'def' or (a + b) = 10 or (a + 10) = 12 can be both optimized with the in function. The only requirement is that all non literal bits in the comparison are equal. Again, probably not the most common case, up to you if you want to generalize or not.", "url": "https://github.com/geotools/geotools/pull/3050#discussion_r450712341", "createdAt": "2020-07-07T08:56:24Z", "author": {"login": "aaime"}, "path": "modules/library/render/src/main/java/org/geotools/renderer/lite/MemoryFilterOptimizer.java", "diffHunk": "@@ -111,7 +117,58 @@ public Object visit(Not filter, Object extraData) {\n \n     @Override\n     public Object visit(Or filter, Object extraData) {\n-        return memoize(filter, extraData, super::visit);\n+        return memoize(filter, extraData, this::inFilterOptimizer);\n+    }\n+\n+    /** Checks if an Or filter can be replaced by a single IN condition. */\n+    private Object inFilterOptimizer(Or filter, Object extraData) {\n+        InFunction inFilter = replaceWithInFilter(filter);\n+        if (inFilter == null) return super.visit(filter, extraData);\n+        return ff.equals(inFilter, ff.literal(true));\n+    }\n+\n+    private InFunction replaceWithInFilter(Or filter) {\n+        List<Filter> children = filter.getChildren();\n+        if (children.size() == 0\n+                || !children.stream().allMatch(f -> f instanceof PropertyIsEqualTo)) return null;\n+        @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+        List<PropertyIsEqualTo> equalsList = (List) children;\n+        // get the parameters pairs, including nulls when the requirements are not accomplished\n+        List<Pair<PropertyName, Literal>> parameters =\n+                equalsList.stream().map(eq -> getEqualsParameters(eq)).collect(Collectors.toList());\n+        // check if any pair is null\n+        if (parameters.stream().anyMatch(Objects::isNull)) return null;\n+        // check all the property names are the same\n+        String propertyName = parameters.get(0).getKey().getPropertyName();\n+        if (!parameters\n+                .stream()\n+                .allMatch(pair -> Objects.equals(propertyName, pair.getKey().getPropertyName())))\n+            return null;\n+        // build the In function\n+        List<Expression> inParameters = new ArrayList<>(parameters.size() + 1);\n+        inParameters.add(parameters.get(0).getKey());\n+        inParameters.addAll(\n+                parameters.stream().map(p -> p.getValue()).collect(Collectors.toList()));\n+        InFunction inFunction = new InFunction();\n+        inFunction.setParameters(inParameters);\n+        return inFunction;\n+    }\n+\n+    private Pair<PropertyName, Literal> getEqualsParameters(PropertyIsEqualTo equals) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82232810e5fcbaa8a5db88b53717e298a85111a"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI4ODYyMA==", "bodyText": "Nice hint, added expression support.", "url": "https://github.com/geotools/geotools/pull/3050#discussion_r451288620", "createdAt": "2020-07-08T05:18:33Z", "author": {"login": "fernandor777"}, "path": "modules/library/render/src/main/java/org/geotools/renderer/lite/MemoryFilterOptimizer.java", "diffHunk": "@@ -111,7 +117,58 @@ public Object visit(Not filter, Object extraData) {\n \n     @Override\n     public Object visit(Or filter, Object extraData) {\n-        return memoize(filter, extraData, super::visit);\n+        return memoize(filter, extraData, this::inFilterOptimizer);\n+    }\n+\n+    /** Checks if an Or filter can be replaced by a single IN condition. */\n+    private Object inFilterOptimizer(Or filter, Object extraData) {\n+        InFunction inFilter = replaceWithInFilter(filter);\n+        if (inFilter == null) return super.visit(filter, extraData);\n+        return ff.equals(inFilter, ff.literal(true));\n+    }\n+\n+    private InFunction replaceWithInFilter(Or filter) {\n+        List<Filter> children = filter.getChildren();\n+        if (children.size() == 0\n+                || !children.stream().allMatch(f -> f instanceof PropertyIsEqualTo)) return null;\n+        @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+        List<PropertyIsEqualTo> equalsList = (List) children;\n+        // get the parameters pairs, including nulls when the requirements are not accomplished\n+        List<Pair<PropertyName, Literal>> parameters =\n+                equalsList.stream().map(eq -> getEqualsParameters(eq)).collect(Collectors.toList());\n+        // check if any pair is null\n+        if (parameters.stream().anyMatch(Objects::isNull)) return null;\n+        // check all the property names are the same\n+        String propertyName = parameters.get(0).getKey().getPropertyName();\n+        if (!parameters\n+                .stream()\n+                .allMatch(pair -> Objects.equals(propertyName, pair.getKey().getPropertyName())))\n+            return null;\n+        // build the In function\n+        List<Expression> inParameters = new ArrayList<>(parameters.size() + 1);\n+        inParameters.add(parameters.get(0).getKey());\n+        inParameters.addAll(\n+                parameters.stream().map(p -> p.getValue()).collect(Collectors.toList()));\n+        InFunction inFunction = new InFunction();\n+        inFunction.setParameters(inParameters);\n+        return inFunction;\n+    }\n+\n+    private Pair<PropertyName, Literal> getEqualsParameters(PropertyIsEqualTo equals) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMjM0MQ=="}, "originalCommit": {"oid": "f82232810e5fcbaa8a5db88b53717e298a85111a"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3575, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}