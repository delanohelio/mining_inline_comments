{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxODU0NDA0", "number": 2822, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMTozNTowOFrODkC2NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMTozOTozNFrODkC3Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTIxOTcyOnYy", "diffSide": "RIGHT", "path": "modules/library/main/src/main/java/org/geotools/feature/visitor/AverageVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMTozNTowOFrOFwLD3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwODo0ODowOVrOFwNAOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1NzE4MQ==", "bodyText": "Did we want Double here? Like standard deviation below?", "url": "https://github.com/geotools/geotools/pull/2822#discussion_r386057181", "createdAt": "2020-02-29T21:35:08Z", "author": {"login": "jodygarnett"}, "path": "modules/library/main/src/main/java/org/geotools/feature/visitor/AverageVisitor.java", "diffHunk": "@@ -86,6 +87,20 @@ public void init(SimpleFeatureCollection collection) {\n         return Arrays.asList(expr);\n     }\n \n+    @Override\n+    public Optional<List<Class>> getResultType(List<Class> inputTypes) {\n+        if (inputTypes == null || inputTypes.size() != 1)\n+            throw new IllegalArgumentException(\n+                    \"Expecting a single type in input, not \" + inputTypes);\n+\n+        Class type = inputTypes.get(0);\n+        if (Number.class.isAssignableFrom(type)) {\n+            return Optional.of(inputTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddbb2453834c97f6e77ae3a885d3d217c8297592"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4OTAxOQ==", "bodyText": "Well spotted. I've fixed it and added tests, along with some other type related fixes. They are not used by the aggregation fix, but they better be right anyways, could be of use down the road.", "url": "https://github.com/geotools/geotools/pull/2822#discussion_r386089019", "createdAt": "2020-03-01T08:48:09Z", "author": {"login": "aaime"}, "path": "modules/library/main/src/main/java/org/geotools/feature/visitor/AverageVisitor.java", "diffHunk": "@@ -86,6 +87,20 @@ public void init(SimpleFeatureCollection collection) {\n         return Arrays.asList(expr);\n     }\n \n+    @Override\n+    public Optional<List<Class>> getResultType(List<Class> inputTypes) {\n+        if (inputTypes == null || inputTypes.size() != 1)\n+            throw new IllegalArgumentException(\n+                    \"Expecting a single type in input, not \" + inputTypes);\n+\n+        Class type = inputTypes.get(0);\n+        if (Number.class.isAssignableFrom(type)) {\n+            return Optional.of(inputTypes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1NzE4MQ=="}, "originalCommit": {"oid": "ddbb2453834c97f6e77ae3a885d3d217c8297592"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTIyMTc5OnYy", "diffSide": "RIGHT", "path": "modules/plugin/geopkg/src/test/java/org/geotools/geopkg/GeoPkgDatetimeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMTozOTozNFrOFwLE2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMTozOTozNFrOFwLE2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1NzQzNA==", "bodyText": "Thanks for testing/fixing this!", "url": "https://github.com/geotools/geotools/pull/2822#discussion_r386057434", "createdAt": "2020-02-29T21:39:34Z", "author": {"login": "jodygarnett"}, "path": "modules/plugin/geopkg/src/test/java/org/geotools/geopkg/GeoPkgDatetimeTest.java", "diffHunk": "@@ -102,10 +115,53 @@ public void testUnique() throws IOException {\n         SimpleFeatureSource fs = gpkg.getFeatureSource(gpkg.getTypeNames()[0]);\n \n         SimpleFeatureCollection features = fs.getFeatures();\n-        features.accepts(highlander, new NullProgressListener());\n+        features.accepts(highlander, NULL_LISTENER);\n \n-        Set<Date> uniqueSet = highlander.getUnique();\n+        Set uniqueSet = highlander.getUnique();\n         assertEquals(uniqueSet.size(), features.size());\n+        for (Object value : uniqueSet) {\n+            assertThat(value, CoreMatchers.instanceOf(Date.class));\n+        }\n+    }\n+\n+    @Test\n+    public void testMax() throws IOException {\n+        MaxVisitor max = new MaxVisitor(\"date\");\n+        SimpleFeatureSource fs = gpkg.getFeatureSource(gpkg.getTypeNames()[0]);\n+\n+        SimpleFeatureCollection features = fs.getFeatures();\n+        features.accepts(max, NULL_LISTENER);\n+\n+        assertEquals(java.sql.Date.valueOf(\"2020-02-23\"), max.getMax());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddbb2453834c97f6e77ae3a885d3d217c8297592"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3667, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}