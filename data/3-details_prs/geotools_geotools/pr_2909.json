{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNjc1NjYw", "number": 2909, "title": "[GEOT-6578] equalTo support for matchAction and postgis optimization", "bodyText": "An optional parameter for MatchAction (ANY, ONE or ALL) has been added to FilterFunction_equalTo.\nThis is particularly useful if arguments are arrays.\nAn optimization for the postgis jdbc driver is also introduced, so that the function is translated to the postgresql overlap (&&) operator when both arguments are arrays and the match action is ANY.\nChecklist\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n The changes are not breaking the build in downstream projects using SNAPSHOT dependencies, GeoWebCache and GeoServer.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for unsupported modules):\n\n There is an issue in Jira describing the bug/task/new feature (a notable exemptions is, changes not visible to end users). The ticket is for the GeoTools project, if the issue was found elsewhere it's a good practice to link to the origin ticket/issue.\n The pull request contains changes related to a single objective. If multiple focuses cannot be avoided, each one is in its own commit and has a separate ticket describing it.\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOT-XYZW] Title of the Jira ticket\"\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by travis-ci after opening this PR)\n Documentation has been updated accordingly.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.", "createdAt": "2020-04-30T16:04:44Z", "url": "https://github.com/geotools/geotools/pull/2909", "merged": true, "mergeCommit": {"oid": "003ea03c0243c53e578af28fa3776262db9ed16b"}, "closed": true, "closedAt": "2020-05-05T10:07:25Z", "author": {"login": "mbarto"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccu6oRAH2gAyNDExNjc1NjYwOmYxOGYwOTk3YTExN2YwOTQ2ZTUxNzgyYjVhODZiMWFkY2I5MDdkMjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceQJcCAH2gAyNDExNjc1NjYwOjMwODY2NGIxYTBlODliOWViYjk2NjQ2MzE3OWE1MGI3NjVlNjE3MTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f18f0997a117f0946e51782b5a86b1adcb907d24", "author": {"user": {"login": "mbarto", "name": null}}, "url": "https://github.com/geotools/geotools/commit/f18f0997a117f0946e51782b5a86b1adcb907d24", "committedDate": "2020-04-30T15:35:38Z", "message": "[GEOT-6578] equalTo function support for matchAction and postgis optmization to overlap for array ANY match"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTY1OTE5", "url": "https://github.com/geotools/geotools/pull/2909#pullrequestreview-403965919", "createdAt": "2020-05-01T00:36:43Z", "commit": {"oid": "f18f0997a117f0946e51782b5a86b1adcb907d24"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNjo0M1rOGO-7Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDo1MDo0N1rOGO_Ifg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDIzMA==", "bodyText": "I call these methods \"toCollection( obj )\" as they are format shifting rather than accessing content.", "url": "https://github.com/geotools/geotools/pull/2909#discussion_r418364230", "createdAt": "2020-05-01T00:36:43Z", "author": {"login": "jodygarnett"}, "path": "modules/library/main/src/main/java/org/geotools/filter/MultiCompareFilterImpl.java", "diffHunk": "@@ -54,21 +55,34 @@ public MatchAction getMatchAction() {\n         return matchAction;\n     }\n \n+    private Collection<Object> getCollection(Object obj) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18f0997a117f0946e51782b5a86b1adcb907d24"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NTAyMQ==", "bodyText": "I try and stay away from this kind of logic (assuming the value is useful as provided and making methods to cast). Would the following work?\nfinal Collection<Object> collection1 = expression1.evaulate( feature, Collection.class )\nfinal Collection<Object> collection2 = expression2.evaulate( feature, Collection.class )", "url": "https://github.com/geotools/geotools/pull/2909#discussion_r418365021", "createdAt": "2020-05-01T00:39:42Z", "author": {"login": "jodygarnett"}, "path": "modules/library/main/src/main/java/org/geotools/filter/MultiCompareFilterImpl.java", "diffHunk": "@@ -54,21 +55,34 @@ public MatchAction getMatchAction() {\n         return matchAction;\n     }\n \n+    private Collection<Object> getCollection(Object obj) {\n+        if (obj instanceof Collection) {\n+            return (Collection<Object>) obj;\n+        }\n+        if (obj != null && obj.getClass().isArray()) {\n+            return Arrays.asList((Object[]) obj);\n+        }\n+        return null;\n+    }\n+\n     public final boolean evaluate(Object feature) {\n         final Object object1 = eval(expression1, feature);\n         final Object object2 = eval(expression2, feature);\n \n-        if (!(object1 instanceof Collection) && !(object2 instanceof Collection)) {\n+        Collection<Object> collection1 = getCollection(object1);\n+        Collection<Object> collection2 = getCollection(object2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18f0997a117f0946e51782b5a86b1adcb907d24"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NjAzMg==", "bodyText": "I am not sure how well this would work with a primitive array like int[]", "url": "https://github.com/geotools/geotools/pull/2909#discussion_r418366032", "createdAt": "2020-05-01T00:43:46Z", "author": {"login": "jodygarnett"}, "path": "modules/library/main/src/main/java/org/geotools/filter/MultiCompareFilterImpl.java", "diffHunk": "@@ -54,21 +55,34 @@ public MatchAction getMatchAction() {\n         return matchAction;\n     }\n \n+    private Collection<Object> getCollection(Object obj) {\n+        if (obj instanceof Collection) {\n+            return (Collection<Object>) obj;\n+        }\n+        if (obj != null && obj.getClass().isArray()) {\n+            return Arrays.asList((Object[]) obj);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18f0997a117f0946e51782b5a86b1adcb907d24"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NjczMg==", "bodyText": "Where is expression3 evacuated? That could be a dynamic expression rather than a constant ...\nMatchAction matchAction = expression3.evaluate( feature, MatchAction.class)", "url": "https://github.com/geotools/geotools/pull/2909#discussion_r418366732", "createdAt": "2020-05-01T00:46:45Z", "author": {"login": "jodygarnett"}, "path": "modules/library/main/src/main/java/org/geotools/filter/MultiCompareFilterImpl.java", "diffHunk": "@@ -54,21 +55,34 @@ public MatchAction getMatchAction() {\n         return matchAction;\n     }\n \n+    private Collection<Object> getCollection(Object obj) {\n+        if (obj instanceof Collection) {\n+            return (Collection<Object>) obj;\n+        }\n+        if (obj != null && obj.getClass().isArray()) {\n+            return Arrays.asList((Object[]) obj);\n+        }\n+        return null;\n+    }\n+\n     public final boolean evaluate(Object feature) {\n         final Object object1 = eval(expression1, feature);\n         final Object object2 = eval(expression2, feature);\n \n-        if (!(object1 instanceof Collection) && !(object2 instanceof Collection)) {\n+        Collection<Object> collection1 = getCollection(object1);\n+        Collection<Object> collection2 = getCollection(object2);\n+\n+        if (collection1 == null && collection2 == null) {\n             return evaluateInternal(object1, object2);\n         }\n \n         Collection<Object> leftValues =\n-                object1 instanceof Collection\n-                        ? (Collection<Object>) object1\n+                collection1 instanceof Collection\n+                        ? collection1\n                         : Collections.<Object>singletonList(object1);\n         Collection<Object> rightValues =\n-                object2 instanceof Collection\n-                        ? (Collection<Object>) object2\n+                collection2 instanceof Collection\n+                        ? collection2\n                         : Collections.<Object>singletonList(object2);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18f0997a117f0946e51782b5a86b1adcb907d24"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NzEzNA==", "bodyText": "getExpression(2).evaualte( feature, MatchAction.class ) should work (there should be a converter that can convert from a string to an enum as required).", "url": "https://github.com/geotools/geotools/pull/2909#discussion_r418367134", "createdAt": "2020-05-01T00:48:43Z", "author": {"login": "jodygarnett"}, "path": "modules/library/main/src/main/java/org/geotools/filter/function/FilterFunction_equalTo.java", "diffHunk": "@@ -68,7 +71,16 @@ public Object evaluate(Object feature) {\n             throw new IllegalArgumentException(\n                     \"Filter Function problem for function equalTo argument #1 - expected type Object\");\n         }\n+        if (getParameters().size() > 2) {\n+            try { // attempt to get value and perform conversion\n+                matchAction = MatchAction.valueOf((String) getExpression(2).evaluate(feature));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18f0997a117f0946e51782b5a86b1adcb907d24"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NzYxNA==", "bodyText": "Yeah this function is far weaker than the filter, compare:\n\nStaticGeometry.equalTo\nIsEqualsTo\n\nYou could consider just calling the filter so we have consistent handling:\nFilter equalsTo = ff.equalsTo( expression1, expression2);\nreturn equalsTo.evaualte( feature );\n\nIt would be easier to maintain and a stronger implementation, and if you play your cards right it could handle the matchAction for you.", "url": "https://github.com/geotools/geotools/pull/2909#discussion_r418367614", "createdAt": "2020-05-01T00:50:47Z", "author": {"login": "jodygarnett"}, "path": "modules/library/main/src/main/java/org/geotools/filter/function/FilterFunction_equalTo.java", "diffHunk": "@@ -68,7 +71,16 @@ public Object evaluate(Object feature) {\n             throw new IllegalArgumentException(\n                     \"Filter Function problem for function equalTo argument #1 - expected type Object\");\n         }\n+        if (getParameters().size() > 2) {\n+            try { // attempt to get value and perform conversion\n+                matchAction = MatchAction.valueOf((String) getExpression(2).evaluate(feature));\n+            } catch (Exception e) // probably a type error\n+            {\n+                throw new IllegalArgumentException(\n+                        \"Filter Function problem for function equalTo argument #2 - expected one of ANY, ONE or ALL\");\n+            }\n+        }\n \n-        return Boolean.valueOf(StaticGeometry.equalTo(arg0, arg1));\n+        return Boolean.valueOf(StaticGeometry.equalTo(arg0, arg1, matchAction));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18f0997a117f0946e51782b5a86b1adcb907d24"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc7d53d5170ce327fed6ed139ee8ce27aac12f8a", "author": {"user": {"login": "mbarto", "name": null}}, "url": "https://github.com/geotools/geotools/commit/bc7d53d5170ce327fed6ed139ee8ce27aac12f8a", "committedDate": "2020-05-04T07:41:56Z", "message": "[GEOT-6578] some cleanup, and tested support for array of primitives"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c9db291735214f95a5c78e8b9e94bbad8f44c6d", "author": {"user": {"login": "mbarto", "name": null}}, "url": "https://github.com/geotools/geotools/commit/4c9db291735214f95a5c78e8b9e94bbad8f44c6d", "committedDate": "2020-05-04T08:36:32Z", "message": "[GEOT-6578]: fix for regression in MultiCompareFilterImpl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NTQyNDEz", "url": "https://github.com/geotools/geotools/pull/2909#pullrequestreview-405542413", "createdAt": "2020-05-05T07:15:58Z", "commit": {"oid": "4c9db291735214f95a5c78e8b9e94bbad8f44c6d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzoxNTo1OFrOGQdHUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzoxNTo1OFrOGQdHUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwNzQwOA==", "bodyText": "This is so much cleaner!\nIf you would like to be slightly more lazy there is no need to evaulate arg0 and arg1, only to wrap them up as a literal again, if you replace this line with:\nreturn equalTo.evaualte(feature)", "url": "https://github.com/geotools/geotools/pull/2909#discussion_r419907408", "createdAt": "2020-05-05T07:15:58Z", "author": {"login": "jodygarnett"}, "path": "modules/library/main/src/main/java/org/geotools/filter/function/FilterFunction_equalTo.java", "diffHunk": "@@ -68,7 +82,21 @@ public Object evaluate(Object feature) {\n             throw new IllegalArgumentException(\n                     \"Filter Function problem for function equalTo argument #1 - expected type Object\");\n         }\n+        if (getParameters().size() > 2) {\n+            try { // attempt to get value and perform conversion\n+                matchAction = (MatchAction) getExpression(2).evaluate(feature, MatchAction.class);\n+            } catch (Exception e) // probably a type error\n+            {\n+                throw new IllegalArgumentException(\n+                        \"Filter Function problem for function equalTo argument #2 - expected one of ANY, ONE or ALL\");\n+            }\n+        }\n+        Filter equalTo =\n+                matchAction == null\n+                        ? getFilterFactory2().equal(ff.literal(arg0), ff.literal(arg1), false)\n+                        : getFilterFactory2()\n+                                .equal(ff.literal(arg0), ff.literal(arg1), false, matchAction);\n \n-        return Boolean.valueOf(StaticGeometry.equalTo(arg0, arg1));\n+        return equalTo.evaluate(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9db291735214f95a5c78e8b9e94bbad8f44c6d"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "308664b1a0e89b9ebb966463179a50b765e61711", "author": {"user": {"login": "mbarto", "name": null}}, "url": "https://github.com/geotools/geotools/commit/308664b1a0e89b9ebb966463179a50b765e61711", "committedDate": "2020-05-05T08:52:36Z", "message": "[GEOT-6578]: more simplification and additional test for property to array comparison"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2841, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}