{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0ODk0MDE5", "number": 2830, "title": "Additional map projection: Homolosine", "bodyText": "This is a literal implementation of the projection described by John Paul Goode, relying on the existing projection classes for the Mollweide and the Sinusoidal. Thus no actual mathematical transformation is performed in the new class. This implementation applies tow essential steps:\n\nIdentify the Homolosine lobe to which the points belongs and apply the respective central meridian.\nDeduct the offset between the transformed northing values of the Sinusoidal and Homolosine at the treshold latitude.\n\nAll projection unit tests are currently passing with this commit.\nChecklist\n\nWill submit CLA to OSGeo in the coming days.\n\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n The changes are not breaking the build in downstream projects using SNAPSHOT dependencies, GeoWebCache and GeoServer.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for unsupported modules):\n\n There is a ticket in Jira describing the issue/improvement/feature (a notable exemptions is, changes not visible to end users)\n The pull request contains changes related to a single objective. If multiple focuses cannot be avoided, each one is in its own commit and has a separate ticket describing it.\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOT-XYZW] Title of the Jira ticket\"\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by travis-ci after opening this PR)\n Documentation has been updated accordingly.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.", "createdAt": "2020-03-06T15:55:07Z", "url": "https://github.com/geotools/geotools/pull/2830", "merged": true, "mergeCommit": {"oid": "f9a05fe2ee8d0b6bfefeb89195c8904ad1f09b01"}, "closed": true, "closedAt": "2020-04-26T09:55:40Z", "author": {"login": "ldesousa"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLBbS1AH2gAyMzg0ODk0MDE5OjEyZTQ2YjBkOTlmMzliNThhY2Y5NGI3OTIwOTQ5NmU5NmQyNTc3YzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZHfp7AH2gAyMzg0ODk0MDE5OjMxZTU4NzVkOTRiMGI3MzMxYjVlN2EzZWNkY2VjN2IwYWVlOTFjMTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "12e46b0d99f39b58acf94b79209496e96d2577c0", "author": {"user": {"login": "ldesousa", "name": "Lu\u00eds de Sousa"}}, "url": "https://github.com/geotools/geotools/commit/12e46b0d99f39b58acf94b79209496e96d2577c0", "committedDate": "2020-03-06T14:58:58Z", "message": "Additional map projection: Homolosine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ef6df558e15907016fd92bc9508c87b5a255af3", "author": {"user": {"login": "ldesousa", "name": "Lu\u00eds de Sousa"}}, "url": "https://github.com/geotools/geotools/commit/5ef6df558e15907016fd92bc9508c87b5a255af3", "committedDate": "2020-03-09T07:45:53Z", "message": "Additional map projection: Homolosine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4f81d9ca8dafc0526ad492c7523acc1686cce6b", "author": {"user": {"login": "ldesousa", "name": "Lu\u00eds de Sousa"}}, "url": "https://github.com/geotools/geotools/commit/e4f81d9ca8dafc0526ad492c7523acc1686cce6b", "committedDate": "2020-03-09T07:53:10Z", "message": "Merge branch 'master' of github.com:ldesousa/geotools"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6d06dd8b3494633d99a69c915e23da8800f7370", "author": {"user": {"login": "ldesousa", "name": "Lu\u00eds de Sousa"}}, "url": "https://github.com/geotools/geotools/commit/c6d06dd8b3494633d99a69c915e23da8800f7370", "committedDate": "2020-03-09T07:54:01Z", "message": "Removed forgotten scratch file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "968c61ba41c1fd208a100fb135ad4245ca8695d8", "author": {"user": {"login": "ldesousa", "name": "Lu\u00eds de Sousa"}}, "url": "https://github.com/geotools/geotools/commit/968c61ba41c1fd208a100fb135ad4245ca8695d8", "committedDate": "2020-03-09T07:55:01Z", "message": "Applied correct formatting to Homolosine.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9305df76fdb2283d805b1debcb729ebf188e7fc4", "author": {"user": {"login": "ldesousa", "name": "Lu\u00eds de Sousa"}}, "url": "https://github.com/geotools/geotools/commit/9305df76fdb2283d805b1debcb729ebf188e7fc4", "committedDate": "2020-03-09T09:17:21Z", "message": "Tweaked while commands to Maven's liking and added extra checks for points outside projection domain and co-domain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e1df12646a8599f19b0506dd4c86bd210002061", "author": {"user": {"login": "ldesousa", "name": "Lu\u00eds de Sousa"}}, "url": "https://github.com/geotools/geotools/commit/0e1df12646a8599f19b0506dd4c86bd210002061", "committedDate": "2020-03-13T14:59:19Z", "message": "Homolosine projection with Sinusoidal used internally in spherical mode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1Mjg1ODQw", "url": "https://github.com/geotools/geotools/pull/2830#pullrequestreview-375285840", "createdAt": "2020-03-16T14:45:08Z", "commit": {"oid": "0e1df12646a8599f19b0506dd4c86bd210002061"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo0NTowOFrOF23nyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo0NTowOFrOF23nyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA3ODcyOA==", "bodyText": "I searched the EPSG database, to my surprise the projection is not recognized/documented.\nHowever, the name as is seems too generic, as we have 3 variants in the wild\n\nNon interrupted Homolosine (implemented in proj as \"goode\", see https://proj.org/operations/projections/goode.html. ESRI does not seem to have it.\nInterrupted Homolosine, land centric, implemented in proj as \"igh\", see \"https://proj.org/operations/projections/igh.html\", and called \"Goode_Homolosine\" by ESRI, choosing \"option=1\"\nInterrupted Homolosine, water centric, not implemented in proj as far as I can see, and called \"Goode_Homolosine\" by ESRI, choosing \"option=2\"\n\nFor ESRI references see:\n\nhttps://desktop.arcgis.com/en/arcmap/10.3/guide-books/map-projections/goodes-homolosine.htm\nhttps://github.com/Esri/projection-engine-db-doc/blob/master/text/pe_list_projection.txt#L600\nhttps://raw.githubusercontent.com/Esri/projection-engine-db-doc/master/text/pe_list_projcs.txt (warning, big file, 6+MB, search for homolosine in it, you'll fine two examples)\n\nSuggestions:\n\nFor ESRI named identifier, use \"Goode_Homolosine\"\nFor GeoTools, maybe \"Interrupted_Homolosine\" to tell it apart from the non interrupted version?\n\nWhile now they won't present a big problem, I want to avoid issues in a future where the other two variants are implemented, and make sure we don't end up having conflicts.\nThe different name for GeoTools tries to be a match with the PROJ convention (calling interrupted what interrupted is), while the land/water difference can be handled by a parameter just like ESRI did, the day someone wants to implement the ocean centric math.", "url": "https://github.com/geotools/geotools/pull/2830#discussion_r393078728", "createdAt": "2020-03-16T14:45:08Z", "author": {"login": "aaime"}, "path": "modules/library/referencing/src/main/java/org/geotools/referencing/operation/projection/Homolosine.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ *\n+ *    This package contains formulas from the PROJ package of USGS.\n+ *    USGS's work is fully acknowledged here. This derived work has\n+ *    been relicensed under LGPL with Frank Warmerdam's permission.\n+ */\n+package org.geotools.referencing.operation.projection;\n+\n+import static java.lang.Math.toRadians;\n+\n+import java.awt.geom.Point2D;\n+import org.geotools.metadata.iso.citation.Citations;\n+import org.geotools.referencing.NamedIdentifier;\n+import org.opengis.parameter.ParameterDescriptor;\n+import org.opengis.parameter.ParameterDescriptorGroup;\n+import org.opengis.parameter.ParameterNotFoundException;\n+import org.opengis.parameter.ParameterValueGroup;\n+import org.opengis.referencing.operation.MathTransform;\n+\n+/**\n+ * Homolosine projection\n+ *\n+ * @see <A HREF=\"https://doi.org/10.2307%2F2560812\">Goode, J.P. (1925). \"The Homolosine projection -\n+ *     a new device for portraying the Earth's surface entire\". Annals of the Association of\n+ *     American Geographers. 15 (3): 119\u2013125</A>\n+ * @see <A HREF=\"https://en.wikipedia.org/wiki/Goode_homolosine_projection\">The Homolosine\n+ *     projection on Wikipedia</A>\n+ * @since 22.x\n+ * @author Lu\u00eds M. de Sousa\n+ */\n+public class Homolosine extends MapProjection {\n+    /** For cross-version compatibility. */\n+    private static final long serialVersionUID = 4740760391570944118L;\n+\n+    private static double LAT_THRESH = toRadians(40 + 44 / 60. + 11.8 / 3600.);\n+\n+    private static final double[] INTERRUP_NORTH = {\n+        toRadians(-180), toRadians(-40), toRadians(180)\n+    };\n+    private static final double[] INTERRUP_SOUTH = {\n+        toRadians(-180), toRadians(-100), toRadians(-20), toRadians(80), toRadians(180)\n+    };\n+\n+    private static final double[] CENTRAL_MERID_NORTH = {toRadians(-100), toRadians(30)};\n+    private static final double[] CENTRAL_MERID_SOUTH = {\n+        toRadians(-160), toRadians(-60), toRadians(20), toRadians(140)\n+    };\n+\n+    ParameterDescriptorGroup descriptors;\n+    ParameterValueGroup parameters; // stored locally to skip computations in parent\n+\n+    Mollweide moll;\n+    Sinusoidal sinu;\n+\n+    /**\n+     * Constructs a new map projection from the supplied parameters.\n+     *\n+     * @param parameters The parameter values in standard units.\n+     * @throws ParameterNotFoundException if a mandatory parameter is missing.\n+     */\n+    protected Homolosine(\n+            final ParameterDescriptorGroup descriptors, final ParameterValueGroup parameters)\n+            throws ParameterNotFoundException {\n+\n+        super(parameters, descriptors.descriptors());\n+        this.descriptors = descriptors;\n+        this.parameters = parameters;\n+        this.sinu = new Sinusoidal(this.parameters);\n+        this.moll =\n+                new Mollweide(\n+                        Mollweide.ProjectionMode.Mollweide, this.descriptors, this.parameters);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public ParameterDescriptorGroup getParameterDescriptors() {\n+        return Provider.PARAMETERS;\n+    }\n+\n+    /**\n+     * Computes the Northing difference between Sinusoidal and Mollweide at the threshold latitude.\n+     *\n+     * @return Northing offset between Sinusoidal and Mollweide at threshold latitude.\n+     * @throws ProjectionException\n+     */\n+    protected double computeOffset() throws ProjectionException {\n+        Point2D moll_tresh = moll.transformNormalized(0, LAT_THRESH, null);\n+        return moll_tresh.getY() - LAT_THRESH;\n+    }\n+\n+    /**\n+     * Transforms the specified (<var>&lambda;</var>,<var>&phi;</var>) coordinates (units in\n+     * radians) and stores the result in {@code ptDst} (linear distance on a unit sphere).\n+     */\n+    protected Point2D transformNormalized(double lam, double phi, Point2D ptDst)\n+            throws ProjectionException {\n+\n+        double[] interruptions;\n+        double[] central_merids;\n+        double offset = computeOffset();\n+        int i = 0;\n+        double central_merid = 0;\n+        double lam_shift = 0;\n+        Point2D p;\n+        Point2D shift;\n+\n+        if (phi >= 0) {\n+            interruptions = INTERRUP_NORTH;\n+            central_merids = CENTRAL_MERID_NORTH;\n+        } else {\n+            interruptions = INTERRUP_SOUTH;\n+            central_merids = CENTRAL_MERID_SOUTH;\n+            offset = -offset;\n+        }\n+\n+        if (lam > interruptions[interruptions.length - 1]) i = interruptions.length;\n+        else while (lam > interruptions[i]) i++;\n+\n+        central_merid = central_merids[i - 1];\n+        lam_shift = lam - central_merid;\n+\n+        if (phi > LAT_THRESH || phi < -LAT_THRESH) { // Mollweide\n+            p = moll.transformNormalized(lam_shift, phi, ptDst);\n+            p.setLocation(p.getX(), p.getY() - offset);\n+        } else { // Sinusoidal in spherical form\n+            p = new Point2D.Double(lam_shift * Math.cos(phi), phi);\n+        }\n+\n+        shift = sinu.transformNormalized(central_merid, 0., null);\n+        p.setLocation(p.getX() + shift.getX(), p.getY());\n+\n+        if (ptDst != null) {\n+            ptDst.setLocation(p.getX(), p.getY());\n+            return ptDst;\n+        } else {\n+            return p;\n+        }\n+    }\n+\n+    /**\n+     * Transforms the specified (<var>x</var>,<var>y</var>) coordinates and stores the result in\n+     * {@code ptDst}.\n+     */\n+    protected Point2D inverseTransformNormalized(double x, double y, final Point2D ptDst)\n+            throws ProjectionException {\n+\n+        double[] interruptions;\n+        double[] central_merids;\n+        double offset = computeOffset();\n+        int i = 0;\n+        double central_merid = 0;\n+        Point2D p;\n+        Point2D shift;\n+        double thresh_map = LAT_THRESH; // spherical model\n+\n+        if (y >= 0) {\n+            central_merids = CENTRAL_MERID_NORTH;\n+            interruptions = new double[INTERRUP_NORTH.length];\n+            for (int j = 0; j < INTERRUP_NORTH.length; j++)\n+                interruptions[j] = sinu.transformNormalized(INTERRUP_NORTH[j], 0, null).getX();\n+        } else {\n+            central_merids = CENTRAL_MERID_SOUTH;\n+            offset = -offset;\n+            interruptions = new double[INTERRUP_SOUTH.length];\n+            for (int j = 0; j < INTERRUP_SOUTH.length; j++)\n+                interruptions[j] = sinu.transformNormalized(INTERRUP_SOUTH[j], 0, null).getX();\n+        }\n+\n+        if (x > interruptions[interruptions.length - 1]) i = interruptions.length;\n+        else while (x > interruptions[i]) i++;\n+\n+        central_merid = central_merids[i - 1];\n+        shift = sinu.transformNormalized(central_merid, 0, null);\n+\n+        if (y > thresh_map || y < -thresh_map) { // Mollweide\n+            p = moll.inverseTransformNormalized(x - shift.getX(), y + offset, ptDst);\n+        } else { // Sinusoidal in spherical mode\n+            p = new Point2D.Double((x - shift.getX()) / Math.cos(y), y);\n+        }\n+\n+        p.setLocation(p.getX() + central_merid, p.getY());\n+\n+        if (ptDst != null) {\n+            ptDst.setLocation(p.getX(), p.getY());\n+            return ptDst;\n+        } else {\n+            return p;\n+        }\n+    }\n+\n+    //////////////////////////////////////////////////////////////////////////////////////////\n+    //////////////////////////////////////////////////////////////////////////////////////////\n+    ////////                                                                          ////////\n+    ////////                                 PROVIDERS                                ////////\n+    ////////                                                                          ////////\n+    //////////////////////////////////////////////////////////////////////////////////////////\n+    //////////////////////////////////////////////////////////////////////////////////////////\n+\n+    /**\n+     * The {@linkplain org.geotools.referencing.operation.MathTransformProvider math transform\n+     * provider} for the Homolosine projection (not part of the EPSG database).\n+     *\n+     * @since 22.x\n+     * @author Lu\u00eds M. de Sousa\n+     * @see org.geotools.referencing.operation.DefaultMathTransformFactory\n+     */\n+    public static class Provider extends AbstractProvider {\n+\n+        /** For cross-version compatibility. */\n+        private static final long serialVersionUID = -7345885830045627291L;\n+\n+        /** The parameters group. */\n+        static final ParameterDescriptorGroup PARAMETERS =\n+                createDescriptorGroup(\n+                        new NamedIdentifier[] {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1df12646a8599f19b0506dd4c86bd210002061"}, "originalPosition": 228}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2755e6b870936aa26dbde8d6a397d54735ee890d", "author": {"user": {"login": "ldesousa", "name": "Lu\u00eds de Sousa"}}, "url": "https://github.com/geotools/geotools/commit/2755e6b870936aa26dbde8d6a397d54735ee890d", "committedDate": "2020-03-16T15:39:51Z", "message": "Homolosine named identifiers adapted to legacy names by PROJ and ESRI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1add18c09324f53e78fb3b32be9de265ac3860ba", "author": {"user": {"login": "ldesousa", "name": "Lu\u00eds de Sousa"}}, "url": "https://github.com/geotools/geotools/commit/1add18c09324f53e78fb3b32be9de265ac3860ba", "committedDate": "2020-03-24T19:58:30Z", "message": "Updated Homolosine projection name in tests script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "357ebbef54a3ebdc6226438677dbe188b385540a", "author": {"user": {"login": "ldesousa", "name": "Lu\u00eds de Sousa"}}, "url": "https://github.com/geotools/geotools/commit/357ebbef54a3ebdc6226438677dbe188b385540a", "committedDate": "2020-04-13T13:29:07Z", "message": "Homolosine projection treating angles outside the ]-PI, PI] and ]PI/2, PI/2] intervals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31e5875d94b0b7331b5e7a3ecdcec7b0aee91c13", "author": {"user": {"login": "ldesousa", "name": "Lu\u00eds de Sousa"}}, "url": "https://github.com/geotools/geotools/commit/31e5875d94b0b7331b5e7a3ecdcec7b0aee91c13", "committedDate": "2020-04-19T09:58:06Z", "message": "Considering small easting values outside the co-domian in the inverse Homolosine"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2938, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}