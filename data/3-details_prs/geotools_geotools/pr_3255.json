{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNjI0ODMz", "number": 3255, "title": "[GEOT-6750]: ImageMosaic COG Harvesting support", "bodyText": "Adding support for Harvesting COG datasets on ImageMosaic\n(More doc will be added on GeoServer counterpart).\nSome notes for the reviewers:\n\n\nHarvestedResource has been moved from ImageMosaicReader (it was an inner class) to its own dedicate file, adding a new resource for URL (and URLCollection).\n\n\na new interface has been added: ImageMosaicElementConsumer. Before that, all the code was doing handleFile, checkFile. Now we also have URLs (and eventually, SimpleFeature) so the ImageMosaicElementConsumer has a generic handleElement, checkElement. The Provider (an ImageMosaicWalker) will provide elements (file, url, feature) and the Consumer will handle them.\nReferences to \"file\" have been updated to references to \"element\" and the dedicated classes will deal with that.\n\n\nThe File field has been replaced by an ImageMosaicSourceElement\n\n\nThe code of the previous handleFile and checkFile methods have therefore been moved to an ImageMosaicFileXXXConsumer\n\n\nChecklist\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n The changes are not breaking the build in downstream projects using SNAPSHOT dependencies, GeoWebCache and GeoServer (there is an automatic PR check verifying this, check this when it turns green).\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for unsupported modules):\n\n There is an issue in Jira describing the bug/task/new feature (a notable exemptions is, changes not visible to end users). The ticket is for the GeoTools project, if the issue was found elsewhere it's a good practice to link to the origin ticket/issue.\n The pull request contains changes related to a single objective. If multiple focuses cannot be avoided, each one is in its own commit and has a separate ticket describing it.\n PR for bug fixes and small new features are presented as a single commit\n Commit message(s) must be in the form \"[GEOT-XYZW] Title of the Jira ticket\"\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by Continuous Integration after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by Continuous Integration after opening this PR)\n Documentation has been updated accordingly.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or not applicable.", "createdAt": "2020-12-07T12:12:08Z", "url": "https://github.com/geotools/geotools/pull/3255", "merged": true, "mergeCommit": {"oid": "b683111a09a7ad08ee02a1dedffc4ab68b348bb0"}, "closed": true, "closedAt": "2020-12-21T12:22:45Z", "author": {"login": "dromagnoli"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdj1_UjgBqjQwNzk3NjUxNjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoTg-OgBqjQxMzUzODgyNTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b41acbcc5bd4038c51bea7219584c42862b7873a", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/b41acbcc5bd4038c51bea7219584c42862b7873a", "committedDate": "2020-12-07T11:57:02Z", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support"}, "afterCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/e759e744d7d1c19e989275750ad703e8e740be1b", "committedDate": "2020-12-07T13:58:16Z", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MTg3NTIx", "url": "https://github.com/geotools/geotools/pull/3255#pullrequestreview-546187521", "createdAt": "2020-12-07T14:14:29Z", "commit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDoxNDoyOVrOIAovVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToxNzo0NFrOIArxLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzODM5MQ==", "bodyText": "This whole block seems the same as collect(File)", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537538391", "createdAt": "2020-12-07T14:14:29Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/properties/RegExPropertiesCollector.java", "diffHunk": "@@ -78,6 +79,36 @@ public RegExPropertiesCollector collect(File file) {\n         return this;\n     }\n \n+    @Override\n+    public RegExPropertiesCollector collect(URL url) {\n+        super.collect(url);\n+\n+        // get name of the url\n+        final String fullUrl = url.toString();\n+        String name = fullUrl;\n+        if (!fullPath) {\n+            int index = name.lastIndexOf(\"/\");\n+            name = name.substring(index + 1);\n+        }\n+\n+        // get matches\n+        final Matcher matcher = pattern.matcher(name);\n+\n+        while (matcher.find()) {\n+            // Chaining group Strings together\n+            int count = matcher.groupCount();\n+            String match = \"\";\n+            if (count == 0) {\n+                match = matcher.group();\n+            }\n+            for (int i = 1; i <= count; i++) {\n+                match += matcher.group(i);\n+            }\n+            addMatch(match);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU0MTIwNw==", "bodyText": "How about the other collectors? Some return a static value (like the current date) and could trivially be extended to support URLs, e.g, CurrentDateExtractor.  FSDateExtractor could maybe use HTTP headers, though its name is a tad specific to FileSystems.\nThe others seem to be reading off GridCoverage, which I assume happens at a later step and is uniform, regardless\nof the source of the raster (did you check?).", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537541207", "createdAt": "2020-12-07T14:18:11Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/properties/RegExPropertiesCollector.java", "diffHunk": "@@ -78,6 +79,36 @@ public RegExPropertiesCollector collect(File file) {\n         return this;\n     }\n \n+    @Override\n+    public RegExPropertiesCollector collect(URL url) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU1NzczNw==", "bodyText": "What happens if it's not?  Looks like it's going to NPE when setGranuleInput is called. Does it even make sense to have this with anything but a CogConfiguration?", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537557737", "createdAt": "2020-12-07T14:39:56Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/CogGranuleAccessProvider.java", "diffHunk": "@@ -56,7 +56,10 @@\n     public CogGranuleAccessProvider(CatalogConfigurationBean bean) {\n         // A Cog Provider will always have at least a streamSpi and an ImageReaderSpi\n         this(getHints(bean));\n-        cogConfig = bean.getCogConfiguration();\n+        URLSourceSPIProvider urlSourceSpiProvider = bean.getUrlSourceSPIProvider();\n+        if (urlSourceSpiProvider instanceof CogConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU1ODk3MQ==", "bodyText": "Does it need to be public?", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537558971", "createdAt": "2020-12-07T14:41:34Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/HarvestedResource.java", "diffHunk": "@@ -0,0 +1,482 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2006 - 2016, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.gce.imagemosaic;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.apache.commons.io.filefilter.IOFileFilter;\n+import org.geotools.coverage.grid.io.DefaultHarvestedSource;\n+import org.geotools.coverage.grid.io.HarvestedSource;\n+import org.geotools.gce.imagemosaic.catalog.GranuleCatalog;\n+import org.geotools.gce.imagemosaic.catalog.index.Indexer;\n+import org.geotools.gce.imagemosaic.catalog.index.IndexerUtils;\n+import org.geotools.gce.imagemosaic.catalog.index.ParametersType;\n+import org.geotools.gce.imagemosaic.catalogbuilder.CatalogBuilderConfiguration;\n+import org.geotools.util.URLs;\n+import org.geotools.util.factory.Hints;\n+\n+/** Types of Resources being supported by ImageMosaic harvest operation. */\n+public enum HarvestedResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2MzE2OA==", "bodyText": "Hum... what if the source is a string, but looks like http://myserver/myfile?\nGuess one could try to build a URL around it, and if succeeds, if the protocol is file, and/or try to build a File first, check if exists, and only later try the URL road.", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537563168", "createdAt": "2020-12-07T14:46:53Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/HarvestedResource.java", "diffHunk": "@@ -0,0 +1,482 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2006 - 2016, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.gce.imagemosaic;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.apache.commons.io.filefilter.IOFileFilter;\n+import org.geotools.coverage.grid.io.DefaultHarvestedSource;\n+import org.geotools.coverage.grid.io.HarvestedSource;\n+import org.geotools.gce.imagemosaic.catalog.GranuleCatalog;\n+import org.geotools.gce.imagemosaic.catalog.index.Indexer;\n+import org.geotools.gce.imagemosaic.catalog.index.IndexerUtils;\n+import org.geotools.gce.imagemosaic.catalog.index.ParametersType;\n+import org.geotools.gce.imagemosaic.catalogbuilder.CatalogBuilderConfiguration;\n+import org.geotools.util.URLs;\n+import org.geotools.util.factory.Hints;\n+\n+/** Types of Resources being supported by ImageMosaic harvest operation. */\n+public enum HarvestedResource {\n+    FILE {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            File file;\n+            if (source instanceof Collection<?>) {\n+                file = (File) ((Collection<?>) source).iterator().next();\n+            } else {\n+                file = (File) source;\n+            }\n+            // Harvesting file\n+            harvestCollection(defaultCoverage, result, reader, Collections.singletonList(file));\n+        }\n+    },\n+    DIRECTORY {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            File directory;\n+            if (source instanceof Collection<?>) {\n+                directory = (File) ((Collection<?>) source).iterator().next();\n+            } else {\n+                directory = (File) source;\n+            }\n+            // Harvesting directory\n+            harvestCalculation(defaultCoverage, result, reader, directory, null);\n+        }\n+    },\n+    FILE_COLLECTION {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                final ImageMosaicReader reader) {\n+            // I have already checked that it is a Collection of File objects\n+            @SuppressWarnings(\"unchecked\")\n+            Collection<File> files = (Collection<File>) source;\n+            harvestCollection(defaultCoverage, result, reader, files);\n+        }\n+    },\n+    URL {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            harvestURLCollection(\n+                    defaultCoverage, result, reader, Collections.singletonList((URL) source));\n+        }\n+    },\n+    URL_COLLECTION {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            Collection<URL> urls = null;\n+\n+            if (source instanceof Collection<?>) {\n+                try {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Collection<URL> cast = (Collection<URL>) source;\n+                    urls = cast;\n+                } catch (ClassCastException e) {\n+                    // Log the exception\n+                    if (LOGGER.isLoggable(Level.WARNING)) {\n+                        LOGGER.log(Level.WARNING, e.getMessage(), e);\n+                    }\n+                }\n+            } else {\n+                urls = Collections.singletonList((URL) source);\n+            }\n+            // Harvesting Urls\n+            harvestURLCollection(defaultCoverage, result, reader, urls);\n+        }\n+    };\n+\n+    HarvestedResource() {}\n+\n+    /** Logger. */\n+    private static final Logger LOGGER =\n+            org.geotools.util.logging.Logging.getLogger(HarvestedResource.class);\n+\n+    /**\n+     * Harvesting of the input resource. The result will be strored inside the {@link List} object.\n+     */\n+    public abstract void harvest(\n+            String defaultCoverage,\n+            Object source,\n+            Hints hints,\n+            final List<HarvestedSource> result,\n+            ImageMosaicReader reader);\n+\n+    /** Returns the HarvestedResource associated to the input Object */\n+    public static HarvestedResource getResourceFromObject(Object source) {\n+        // Check if the resource is a File or a Directory\n+        if (source instanceof File) {\n+            return getResourceFromFile((File) source);\n+        }\n+        if (source instanceof URL) {\n+            return URL;\n+        }\n+        // For a String instance, it is converted to String\n+        if (source instanceof String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2NzM5Nw==", "bodyText": "harvestCollection and harvestURLCollection share some bits of code, maybe they can be factored out in their own methods?", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537567397", "createdAt": "2020-12-07T14:52:02Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/HarvestedResource.java", "diffHunk": "@@ -0,0 +1,482 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2006 - 2016, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.gce.imagemosaic;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.apache.commons.io.filefilter.IOFileFilter;\n+import org.geotools.coverage.grid.io.DefaultHarvestedSource;\n+import org.geotools.coverage.grid.io.HarvestedSource;\n+import org.geotools.gce.imagemosaic.catalog.GranuleCatalog;\n+import org.geotools.gce.imagemosaic.catalog.index.Indexer;\n+import org.geotools.gce.imagemosaic.catalog.index.IndexerUtils;\n+import org.geotools.gce.imagemosaic.catalog.index.ParametersType;\n+import org.geotools.gce.imagemosaic.catalogbuilder.CatalogBuilderConfiguration;\n+import org.geotools.util.URLs;\n+import org.geotools.util.factory.Hints;\n+\n+/** Types of Resources being supported by ImageMosaic harvest operation. */\n+public enum HarvestedResource {\n+    FILE {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            File file;\n+            if (source instanceof Collection<?>) {\n+                file = (File) ((Collection<?>) source).iterator().next();\n+            } else {\n+                file = (File) source;\n+            }\n+            // Harvesting file\n+            harvestCollection(defaultCoverage, result, reader, Collections.singletonList(file));\n+        }\n+    },\n+    DIRECTORY {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            File directory;\n+            if (source instanceof Collection<?>) {\n+                directory = (File) ((Collection<?>) source).iterator().next();\n+            } else {\n+                directory = (File) source;\n+            }\n+            // Harvesting directory\n+            harvestCalculation(defaultCoverage, result, reader, directory, null);\n+        }\n+    },\n+    FILE_COLLECTION {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                final ImageMosaicReader reader) {\n+            // I have already checked that it is a Collection of File objects\n+            @SuppressWarnings(\"unchecked\")\n+            Collection<File> files = (Collection<File>) source;\n+            harvestCollection(defaultCoverage, result, reader, files);\n+        }\n+    },\n+    URL {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            harvestURLCollection(\n+                    defaultCoverage, result, reader, Collections.singletonList((URL) source));\n+        }\n+    },\n+    URL_COLLECTION {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            Collection<URL> urls = null;\n+\n+            if (source instanceof Collection<?>) {\n+                try {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Collection<URL> cast = (Collection<URL>) source;\n+                    urls = cast;\n+                } catch (ClassCastException e) {\n+                    // Log the exception\n+                    if (LOGGER.isLoggable(Level.WARNING)) {\n+                        LOGGER.log(Level.WARNING, e.getMessage(), e);\n+                    }\n+                }\n+            } else {\n+                urls = Collections.singletonList((URL) source);\n+            }\n+            // Harvesting Urls\n+            harvestURLCollection(defaultCoverage, result, reader, urls);\n+        }\n+    };\n+\n+    HarvestedResource() {}\n+\n+    /** Logger. */\n+    private static final Logger LOGGER =\n+            org.geotools.util.logging.Logging.getLogger(HarvestedResource.class);\n+\n+    /**\n+     * Harvesting of the input resource. The result will be strored inside the {@link List} object.\n+     */\n+    public abstract void harvest(\n+            String defaultCoverage,\n+            Object source,\n+            Hints hints,\n+            final List<HarvestedSource> result,\n+            ImageMosaicReader reader);\n+\n+    /** Returns the HarvestedResource associated to the input Object */\n+    public static HarvestedResource getResourceFromObject(Object source) {\n+        // Check if the resource is a File or a Directory\n+        if (source instanceof File) {\n+            return getResourceFromFile((File) source);\n+        }\n+        if (source instanceof URL) {\n+            return URL;\n+        }\n+        // For a String instance, it is converted to String\n+        if (source instanceof String) {\n+            File file = new File((String) source);\n+            return getResourceFromFile(file);\n+        }\n+        // Check if the input Object is a File/URL Collection\n+        if (source instanceof Collection<?>) {\n+            Object sample = ((Collection) source).iterator().next();\n+            // Let's check if it's a Collection of files\n+            if (sample instanceof File) {\n+                Collection<File> files = null;\n+                try {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Collection<File> cast = (Collection<File>) source;\n+                    files = cast;\n+                } catch (ClassCastException e) {\n+                    // Log the exception\n+                    if (LOGGER.isLoggable(Level.WARNING)) {\n+                        LOGGER.log(Level.WARNING, e.getMessage(), e);\n+                    }\n+                }\n+                // If the files are present\n+                if (files != null) {\n+                    // No File is saved\n+                    int fileSize = files.size();\n+                    // Check on the File Size\n+                    if (fileSize < 1) {\n+                        return null;\n+                    } else if (fileSize == 1) {\n+                        // If the Collection size is 1 then the object can be only a file or a\n+                        // directory\n+                        return getResourceFromFile(files.iterator().next());\n+                    } else {\n+                        return FILE_COLLECTION;\n+                    }\n+                }\n+                // We only support File and URL but let's doublecheck\n+                // if it's an URL in any case\n+            } else if (sample instanceof URL) {\n+                return URL_COLLECTION;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Check if the File Object is a DIRECTORY or not and return the associated {@link\n+     * HarvestedResource}\n+     */\n+    private static HarvestedResource getResourceFromFile(File file) {\n+        if (file != null) {\n+            if (file.isDirectory()) {\n+                return DIRECTORY;\n+            } else {\n+                return FILE;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /** Method for harvesting on a directory */\n+    private static void harvestCollection(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3NTM5NQ==", "bodyText": "Is this the only line different from fireFileEvent? If so, can you please factor out the difference and share code?", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537575395", "createdAt": "2020-12-07T15:01:48Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/ImageMosaicEventHandlers.java", "diffHunk": "@@ -240,6 +267,36 @@ protected void fireFileEvent(\n         }\n     }\n \n+    /**\n+     * Firing an event to listeners in order to inform them about what we are doing and about the\n+     * percentage of work already carried out.\n+     *\n+     * @param inMessage The message to show.\n+     * @param percentage The percentage for the process.\n+     */\n+    protected void fireUrlEvent(\n+            Level level,\n+            final URL url,\n+            final boolean ingested,\n+            final String inMessage,\n+            final double percentage) {\n+        if (LOGGER.isLoggable(level)) {\n+            LOGGER.log(level, inMessage);\n+        }\n+        synchronized (notificationListeners) {\n+            final String newLine = System.getProperty(\"line.separator\");\n+            final StringBuilder message = new StringBuilder(\"Thread Name \");\n+            message.append(Thread.currentThread().getName()).append(newLine);\n+            message.append(this.getClass().toString()).append(newLine).append(inMessage);\n+            final URLProcessingEvent evt =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3OTExMQ==", "bodyText": "Maybe a better name?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                abstract T getInnerObject();\n          \n          \n            \n                abstract T getElement();", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537579111", "createdAt": "2020-12-07T15:06:36Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/ImageMosaicSourceElement.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.gce.imagemosaic;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.logging.Level;\n+import java.util.regex.Pattern;\n+import org.apache.commons.io.FilenameUtils;\n+import org.geotools.gce.imagemosaic.catalogbuilder.CatalogBuilderConfiguration;\n+import org.geotools.gce.imagemosaic.properties.PropertiesCollector;\n+\n+/** An elementary source element (a File, a URL, ...) of an ImageMosaic */\n+abstract class ImageMosaicSourceElement<T> {\n+\n+    /** Return the inner object */\n+    abstract T getInnerObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4MDkzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static class ImageMosaicFile extends ImageMosaicSourceElement<File> {\n          \n          \n            \n                static class FileElement extends ImageMosaicSourceElement<File> {", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537580933", "createdAt": "2020-12-07T15:08:52Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/ImageMosaicSourceElement.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.gce.imagemosaic;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.logging.Level;\n+import java.util.regex.Pattern;\n+import org.apache.commons.io.FilenameUtils;\n+import org.geotools.gce.imagemosaic.catalogbuilder.CatalogBuilderConfiguration;\n+import org.geotools.gce.imagemosaic.properties.PropertiesCollector;\n+\n+/** An elementary source element (a File, a URL, ...) of an ImageMosaic */\n+abstract class ImageMosaicSourceElement<T> {\n+\n+    /** Return the inner object */\n+    abstract T getInnerObject();\n+\n+    /** Get the location of this element, taking into account the configuration */\n+    abstract String getLocation(CatalogBuilderConfiguration config) throws IOException;\n+\n+    /**\n+     * Provide this element to the specified {@link PropertiesCollector} so that it can collect it\n+     * for properties extraction\n+     */\n+    abstract void addToCollector(PropertiesCollector pc);\n+\n+    /** Have the provided eventHandler firing an event related to the harvesting of this element */\n+    abstract void fireHarvestingEvent(\n+            ImageMosaicEventHandlers eventHandler,\n+            int elementIndex,\n+            int numElements,\n+            String message);\n+\n+    /** a {@link File} ImageMosaic source element */\n+    static class ImageMosaicFile extends ImageMosaicSourceElement<File> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4MTEwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static class ImageMosaicURL extends ImageMosaicSourceElement<URL> {\n          \n          \n            \n                static class URLElement extends ImageMosaicSourceElement<URL> {", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537581108", "createdAt": "2020-12-07T15:09:05Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/ImageMosaicSourceElement.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.gce.imagemosaic;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.logging.Level;\n+import java.util.regex.Pattern;\n+import org.apache.commons.io.FilenameUtils;\n+import org.geotools.gce.imagemosaic.catalogbuilder.CatalogBuilderConfiguration;\n+import org.geotools.gce.imagemosaic.properties.PropertiesCollector;\n+\n+/** An elementary source element (a File, a URL, ...) of an ImageMosaic */\n+abstract class ImageMosaicSourceElement<T> {\n+\n+    /** Return the inner object */\n+    abstract T getInnerObject();\n+\n+    /** Get the location of this element, taking into account the configuration */\n+    abstract String getLocation(CatalogBuilderConfiguration config) throws IOException;\n+\n+    /**\n+     * Provide this element to the specified {@link PropertiesCollector} so that it can collect it\n+     * for properties extraction\n+     */\n+    abstract void addToCollector(PropertiesCollector pc);\n+\n+    /** Have the provided eventHandler firing an event related to the harvesting of this element */\n+    abstract void fireHarvestingEvent(\n+            ImageMosaicEventHandlers eventHandler,\n+            int elementIndex,\n+            int numElements,\n+            String message);\n+\n+    /** a {@link File} ImageMosaic source element */\n+    static class ImageMosaicFile extends ImageMosaicSourceElement<File> {\n+\n+        File file;\n+\n+        ImageMosaicFile(File file) {\n+            this.file = file;\n+        }\n+\n+        @Override\n+        File getInnerObject() {\n+            return file;\n+        }\n+\n+        @Override\n+        String getLocation(CatalogBuilderConfiguration config) throws IOException {\n+            return prepareLocation(config, file);\n+        }\n+\n+        @Override\n+        void addToCollector(PropertiesCollector pc) {\n+            pc.collect(getInnerObject());\n+        }\n+\n+        @Override\n+        void fireHarvestingEvent(\n+                ImageMosaicEventHandlers eventHandler,\n+                int elementIndex,\n+                int numElements,\n+                String message) {\n+            eventHandler.fireFileEvent(\n+                    Level.FINE, file, true, message, ((elementIndex + 1) * 99.0) / numElements);\n+        }\n+\n+        /** Prepare the location on top of the configuration and file to be processed. */\n+        private static String prepareLocation(\n+                CatalogBuilderConfiguration runConfiguration, final File fileBeingProcessed)\n+                throws IOException {\n+            // absolute\n+            String pathType = runConfiguration.getParameter(Utils.Prop.PATH_TYPE);\n+            String absolutePath = runConfiguration.getParameter(Utils.Prop.ABSOLUTE_PATH);\n+            if (Boolean.valueOf(absolutePath) || PathType.ABSOLUTE.name().equals(pathType)) {\n+                return fileBeingProcessed.getAbsolutePath();\n+            }\n+\n+            // relative (harvesting of PathType.URL is not supported)\n+            String targetPath = fileBeingProcessed.getCanonicalPath();\n+            String basePath = runConfiguration.getParameter(Utils.Prop.ROOT_MOSAIC_DIR);\n+            String relative = getRelativePath(targetPath, basePath, File.separator);\n+            // escaping\n+            return relative;\n+        }\n+\n+        /**\n+         * Get the relative path from one file to another, specifying the directory separator. If\n+         * one of the provided resources does not exist, it is assumed to be a file unless it ends\n+         * with '/' or '\\'.\n+         *\n+         * @param targetPath targetPath is calculated to this file\n+         * @param basePath basePath is calculated from this file\n+         * @param pathSeparator directory separator. The platform default is not assumed so that we\n+         *     can test Unix behaviour when running on Windows (for example)\n+         */\n+        private static String getRelativePath(\n+                String targetPath, String basePath, String pathSeparator) {\n+\n+            // Normalize the paths\n+            String normalizedTargetPath = FilenameUtils.normalizeNoEndSeparator(targetPath);\n+            String normalizedBasePath = FilenameUtils.normalizeNoEndSeparator(basePath);\n+\n+            // Undo the changes to the separators made by normalization\n+            if (pathSeparator.equals(\"/\")) {\n+                normalizedTargetPath = FilenameUtils.separatorsToUnix(normalizedTargetPath);\n+                normalizedBasePath = FilenameUtils.separatorsToUnix(normalizedBasePath);\n+\n+            } else if (pathSeparator.equals(\"\\\\\")) {\n+                normalizedTargetPath = FilenameUtils.separatorsToWindows(normalizedTargetPath);\n+                normalizedBasePath = FilenameUtils.separatorsToWindows(normalizedBasePath);\n+\n+            } else {\n+                throw new IllegalArgumentException(\n+                        \"Unrecognised dir separator '\" + pathSeparator + \"'\");\n+            }\n+\n+            String[] base = normalizedBasePath.split(Pattern.quote(pathSeparator));\n+            String[] target = normalizedTargetPath.split(Pattern.quote(pathSeparator));\n+\n+            // First get all the common elements. Store them as a string,\n+            // and also count how many of them there are.\n+            StringBuilder common = new StringBuilder();\n+\n+            int commonIndex = 0;\n+            while (commonIndex < target.length\n+                    && commonIndex < base.length\n+                    && target[commonIndex].equals(base[commonIndex])) {\n+                common.append(target[commonIndex] + pathSeparator);\n+                commonIndex++;\n+            }\n+\n+            if (commonIndex == 0) {\n+                // No single common path element. This most\n+                // likely indicates differing drive letters, like C: and D:.\n+                // These paths cannot be relativized.\n+                throw new RuntimeException(\n+                        \"No common path element found for '\"\n+                                + normalizedTargetPath\n+                                + \"' and '\"\n+                                + normalizedBasePath\n+                                + \"'\");\n+            }\n+\n+            // The number of directories we have to backtrack depends on whether the base is a file\n+            // or a dir\n+            // For example, the relative path from\n+            //\n+            // /foo/bar/baz/gg/ff to /foo/bar/baz\n+            //\n+            // \"..\" if ff is a file\n+            // \"../..\" if ff is a directory\n+            //\n+            // The following is a heuristic to figure out if the base refers to a file or dir. It's\n+            // not perfect, because the resource referred to by this path may not actually exist,\n+            // but it's the best I can do\n+            boolean baseIsFile = true;\n+\n+            File baseResource = new File(normalizedBasePath);\n+\n+            if (baseResource.exists()) {\n+                baseIsFile = baseResource.isFile();\n+\n+            } else if (basePath.endsWith(pathSeparator)) {\n+                baseIsFile = false;\n+            }\n+\n+            StringBuilder relative = new StringBuilder();\n+\n+            if (base.length != commonIndex) {\n+                int numDirsUp =\n+                        baseIsFile ? base.length - commonIndex - 1 : base.length - commonIndex;\n+\n+                for (int i = 0; i < numDirsUp; i++) {\n+                    relative.append(\"..\" + pathSeparator);\n+                }\n+            }\n+            relative.append(normalizedTargetPath.substring(common.length()));\n+            return relative.toString();\n+        }\n+    }\n+\n+    /** A {@link URL} ImageMosaic source element. */\n+    static class ImageMosaicURL extends ImageMosaicSourceElement<URL> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4NTgxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testEmpytMosaic() throws Exception {\n          \n          \n            \n                public void testEmptyMosaic() throws Exception {", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537585815", "createdAt": "2020-12-07T15:14:59Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicCogOnlineTest.java", "diffHunk": "@@ -148,4 +151,158 @@ public void testCogMosaicDefaultConfig() throws Exception {\n         assertEquals(1, raster.getNumBands());\n         reader.dispose();\n     }\n+\n+    @Test\n+    public void testHarvestSingleURL() throws Exception {\n+        File workDir = prepareWorkingDir(\"cogtest.zip\", \"harvest\", \"cogtest\");\n+        File file = new File(workDir, \"indexer.properties\");\n+        Properties properties = new Properties();\n+        try (FileInputStream fin = new FileInputStream(file)) {\n+            properties.load(fin);\n+        }\n+\n+        try (FileWriter fw = new FileWriter(file)) {\n+            assertNotNull(properties.remove(\"UseExistingSchema\"));\n+            properties.store(fw, \"\");\n+        }\n+\n+        ImageMosaicReader reader = IMAGE_MOSAIC_FORMAT.getReader(workDir);\n+        String coverageName = reader.getGridCoverageNames()[0];\n+        GranuleSource granules = reader.getGranules(coverageName, true);\n+\n+        // Only 1 granule available before doing the harvest\n+        assertEquals(1, granules.getCount(Query.ALL));\n+\n+        try {\n+            // now go and harvest the url\n+            URL source =\n+                    new URL(\n+                            \"https://s3-us-west-2.amazonaws.com/landsat-pds/c1/L8/153/075/LC08_L1TP_153075_20190515_20190515_01_RT/LC08_L1TP_153075_20190515_20190515_01_RT_B3.TIF\");\n+            List<HarvestedSource> summary = reader.harvest(null, source, null);\n+            HarvestedSource hf = summary.get(0);\n+\n+            // check the granule catalog\n+            granules = reader.getGranules(coverageName, true);\n+\n+            // We now have 2 granules\n+            assertEquals(2, granules.getCount(Query.ALL));\n+        } finally {\n+            reader.dispose();\n+        }\n+    }\n+\n+    /** Simple test method to test emptyMosaic creation support followed by harvesting a URL */\n+    @Test\n+    public void testEmpytMosaic() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4NjExOA==", "bodyText": "(not your fault, but while you're at it...)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testEmpytMosaic() throws Exception {\n          \n          \n            \n                public void testEmptyMosaic() throws Exception {", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537586118", "createdAt": "2020-12-07T15:15:23Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicReaderTest.java", "diffHunk": "@@ -1241,7 +1241,6 @@ public void timeAdditionalDimRanges() throws Exception {\n \n     /** Simple test method to test emptyMosaic creation support followed by harvesting. dataset */\n     @Test\n-    // @Ignore\n     public void testEmpytMosaic() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4NjgwMg==", "bodyText": "So are these tests going to run in some builds? PR checks? build server? Or just locally if manually enabled?", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537586802", "createdAt": "2020-12-07T15:16:15Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicCogOnlineTest.java", "diffHunk": "@@ -26,34 +28,51 @@\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.List;\n import java.util.Properties;\n import junit.framework.TestCase;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.geotools.coverage.grid.GridCoverage2D;\n import org.geotools.coverage.grid.GridEnvelope2D;\n import org.geotools.coverage.grid.GridGeometry2D;\n import org.geotools.coverage.grid.io.AbstractGridCoverage2DReader;\n import org.geotools.coverage.grid.io.AbstractGridFormat;\n+import org.geotools.coverage.grid.io.GranuleSource;\n+import org.geotools.coverage.grid.io.HarvestedSource;\n+import org.geotools.data.Query;\n+import org.geotools.data.simple.SimpleFeatureIterator;\n+import org.geotools.gce.imagemosaic.catalog.GranuleCatalog;\n import org.geotools.geometry.GeneralEnvelope;\n import org.geotools.test.TestData;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.opengis.feature.simple.SimpleFeature;\n import org.opengis.parameter.GeneralParameterValue;\n import org.opengis.parameter.ParameterValue;\n \n /** Testing using COG remote granules on an ImageMosaic */\n public class ImageMosaicCogOnlineTest extends TestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4ODAxMw==", "bodyText": "Also, I see code trying to handle a list of URLs during harvesting (one of the harvested resources). Is there a test for that case?", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537588013", "createdAt": "2020-12-07T15:17:44Z", "author": {"login": "aaime"}, "path": "modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicCogOnlineTest.java", "diffHunk": "@@ -26,34 +28,51 @@\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.List;\n import java.util.Properties;\n import junit.framework.TestCase;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.geotools.coverage.grid.GridCoverage2D;\n import org.geotools.coverage.grid.GridEnvelope2D;\n import org.geotools.coverage.grid.GridGeometry2D;\n import org.geotools.coverage.grid.io.AbstractGridCoverage2DReader;\n import org.geotools.coverage.grid.io.AbstractGridFormat;\n+import org.geotools.coverage.grid.io.GranuleSource;\n+import org.geotools.coverage.grid.io.HarvestedSource;\n+import org.geotools.data.Query;\n+import org.geotools.data.simple.SimpleFeatureIterator;\n+import org.geotools.gce.imagemosaic.catalog.GranuleCatalog;\n import org.geotools.geometry.GeneralEnvelope;\n import org.geotools.test.TestData;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.opengis.feature.simple.SimpleFeature;\n import org.opengis.parameter.GeneralParameterValue;\n import org.opengis.parameter.ParameterValue;\n \n /** Testing using COG remote granules on an ImageMosaic */\n public class ImageMosaicCogOnlineTest extends TestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4NjgwMg=="}, "originalCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e759e744d7d1c19e989275750ad703e8e740be1b", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/e759e744d7d1c19e989275750ad703e8e740be1b", "committedDate": "2020-12-07T13:58:16Z", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support"}, "afterCommit": {"oid": "af756e4246e592bdf77a5d1ba4978cfff3842b6f", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/af756e4246e592bdf77a5d1ba4978cfff3842b6f", "committedDate": "2020-12-07T17:44:00Z", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af756e4246e592bdf77a5d1ba4978cfff3842b6f", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/af756e4246e592bdf77a5d1ba4978cfff3842b6f", "committedDate": "2020-12-07T17:44:00Z", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support"}, "afterCommit": {"oid": "5bb3358565a7c081e78f39e1c85a14eff8dcc021", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/5bb3358565a7c081e78f39e1c85a14eff8dcc021", "committedDate": "2020-12-09T09:30:41Z", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5bb3358565a7c081e78f39e1c85a14eff8dcc021", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/5bb3358565a7c081e78f39e1c85a14eff8dcc021", "committedDate": "2020-12-09T09:30:41Z", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support"}, "afterCommit": {"oid": "c47b9f39f71bec761d4e3a5389f29e66974c61b2", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/c47b9f39f71bec761d4e3a5389f29e66974c61b2", "committedDate": "2020-12-09T10:14:45Z", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c47b9f39f71bec761d4e3a5389f29e66974c61b2", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/c47b9f39f71bec761d4e3a5389f29e66974c61b2", "committedDate": "2020-12-09T10:14:45Z", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support"}, "afterCommit": {"oid": "4e00a522c3e0378f17e03dff80dd04fbf23d6e9f", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/4e00a522c3e0378f17e03dff80dd04fbf23d6e9f", "committedDate": "2020-12-15T10:40:24Z", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e00a522c3e0378f17e03dff80dd04fbf23d6e9f", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/4e00a522c3e0378f17e03dff80dd04fbf23d6e9f", "committedDate": "2020-12-15T10:40:24Z", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support"}, "afterCommit": {"oid": "ac7c8772d9ded7a90cef00e87acc9f66571df6ef", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/ac7c8772d9ded7a90cef00e87acc9f66571df6ef", "committedDate": "2020-12-15T14:35:45Z", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c3f833b0887c7e6492b6ef794561b767b33ca17", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/4c3f833b0887c7e6492b6ef794561b767b33ca17", "committedDate": "2020-12-21T10:23:52Z", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac7c8772d9ded7a90cef00e87acc9f66571df6ef", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/ac7c8772d9ded7a90cef00e87acc9f66571df6ef", "committedDate": "2020-12-15T14:35:45Z", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support"}, "afterCommit": {"oid": "4c3f833b0887c7e6492b6ef794561b767b33ca17", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/4c3f833b0887c7e6492b6ef794561b767b33ca17", "committedDate": "2020-12-21T10:23:52Z", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2990, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}