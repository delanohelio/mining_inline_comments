{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxODU0NDA0", "number": 2822, "title": "[GEOT-6520] GeoPackage store aggregates performance regression", "bodyText": "Follows up #2811 to restore in-database aggregation.\nI've basically followed the suggestion outlined in the previous PR, reporting it here since the comment was marked as \"resolved\" and it's thus not visible unless one knows where to search.\n\nThinking out loud here... the visitor does not really know what the type is, because it's determined at runtime evaluating expressions (besides the visitors that only work on a specific type). JDBCDataStore on the other hand has the aggregateExpression, from which one can determine the type of the visitor input by using the ExpressionTypeVisitor.\nNow, that is not enough, many visitors just return the same type as the input, but for example avg and sttdev do not.\nIt would be easy however to add a default method to FeatureCalc or FeatureAttributeVisitor or to the implementations (getExpression is really not present in FeatureCalc for example, but determined through reflection.. not sure why, since there is FeatureAttributeVisitor that can do the job, probably historical reasons).\n/**\n * Returns the expected output type given the input type, or null if uknown\nClass[] getResultType(Class[] inputs);\n*/\n\nWith that one could do the right type conversion no?\n\nI've isolated the changes so that only the dialects that actually need the conversion dance use it, others will just go with the good behavior of the database.\nChecklist\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n The changes are not breaking the build in downstream projects using SNAPSHOT dependencies, GeoWebCache and GeoServer.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for unsupported modules):\n\n There is a ticket in Jira describing the issue/improvement/feature (a notable exemptions is, changes not visible to end users)\n The pull request contains changes related to a single objective. If multiple focuses cannot be avoided, each one is in its own commit and has a separate ticket describing it.\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOT-XYZW] Title of the Jira ticket\"\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by travis-ci after opening this PR)\n Documentation has been updated accordingly.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.", "createdAt": "2020-02-29T13:52:15Z", "url": "https://github.com/geotools/geotools/pull/2822", "merged": true, "mergeCommit": {"oid": "7529923af1143cfe25cd475bb4f05c11fca83957"}, "closed": true, "closedAt": "2020-03-02T04:15:10Z", "author": {"login": "aaime"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJE1xKgH2gAyMzgxODU0NDA0OmRkYmIyNDUzODM0Yzk3ZjZlNzdhZTNhODg1ZDNkMjE3YzgyOTc1OTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJVGPAgH2gAyMzgxODU0NDA0Ojk0YWNmZTBjNzc5YmY4YjhhNWFkNTY4MjkwZTJkZmNhNmNlZDAxZGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ddbb2453834c97f6e77ae3a885d3d217c8297592", "author": {"user": {"login": "aaime", "name": "Andrea Aime"}}, "url": "https://github.com/geotools/geotools/commit/ddbb2453834c97f6e77ae3a885d3d217c8297592", "committedDate": "2020-02-29T13:49:45Z", "message": "[GEOT-6520] GeoPackage store aggregates performance regression"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODIxMjYy", "url": "https://github.com/geotools/geotools/pull/2822#pullrequestreview-366821262", "createdAt": "2020-02-29T21:35:08Z", "commit": {"oid": "ddbb2453834c97f6e77ae3a885d3d217c8297592"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMTozNTowOFrOFwLD3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMTozOTozNFrOFwLE2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1NzE4MQ==", "bodyText": "Did we want Double here? Like standard deviation below?", "url": "https://github.com/geotools/geotools/pull/2822#discussion_r386057181", "createdAt": "2020-02-29T21:35:08Z", "author": {"login": "jodygarnett"}, "path": "modules/library/main/src/main/java/org/geotools/feature/visitor/AverageVisitor.java", "diffHunk": "@@ -86,6 +87,20 @@ public void init(SimpleFeatureCollection collection) {\n         return Arrays.asList(expr);\n     }\n \n+    @Override\n+    public Optional<List<Class>> getResultType(List<Class> inputTypes) {\n+        if (inputTypes == null || inputTypes.size() != 1)\n+            throw new IllegalArgumentException(\n+                    \"Expecting a single type in input, not \" + inputTypes);\n+\n+        Class type = inputTypes.get(0);\n+        if (Number.class.isAssignableFrom(type)) {\n+            return Optional.of(inputTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddbb2453834c97f6e77ae3a885d3d217c8297592"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1NzQzNA==", "bodyText": "Thanks for testing/fixing this!", "url": "https://github.com/geotools/geotools/pull/2822#discussion_r386057434", "createdAt": "2020-02-29T21:39:34Z", "author": {"login": "jodygarnett"}, "path": "modules/plugin/geopkg/src/test/java/org/geotools/geopkg/GeoPkgDatetimeTest.java", "diffHunk": "@@ -102,10 +115,53 @@ public void testUnique() throws IOException {\n         SimpleFeatureSource fs = gpkg.getFeatureSource(gpkg.getTypeNames()[0]);\n \n         SimpleFeatureCollection features = fs.getFeatures();\n-        features.accepts(highlander, new NullProgressListener());\n+        features.accepts(highlander, NULL_LISTENER);\n \n-        Set<Date> uniqueSet = highlander.getUnique();\n+        Set uniqueSet = highlander.getUnique();\n         assertEquals(uniqueSet.size(), features.size());\n+        for (Object value : uniqueSet) {\n+            assertThat(value, CoreMatchers.instanceOf(Date.class));\n+        }\n+    }\n+\n+    @Test\n+    public void testMax() throws IOException {\n+        MaxVisitor max = new MaxVisitor(\"date\");\n+        SimpleFeatureSource fs = gpkg.getFeatureSource(gpkg.getTypeNames()[0]);\n+\n+        SimpleFeatureCollection features = fs.getFeatures();\n+        features.accepts(max, NULL_LISTENER);\n+\n+        assertEquals(java.sql.Date.valueOf(\"2020-02-23\"), max.getMax());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddbb2453834c97f6e77ae3a885d3d217c8297592"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94acfe0c779bf8b8a5ad568290e2dfca6ced01dc", "author": {"user": {"login": "aaime", "name": "Andrea Aime"}}, "url": "https://github.com/geotools/geotools/commit/94acfe0c779bf8b8a5ad568290e2dfca6ced01dc", "committedDate": "2020-03-01T08:46:13Z", "message": "[GEOT-6520] Review follow up"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2930, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}