{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMTU0Nzg5", "number": 2752, "title": "[GEOT-6313]: Fixes wrapping on RenderingTransformation", "bodyText": "Fixes for Raster to Vector rendering transforms not respecting continuous map wrapping\nChecklist\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n The changes are not breaking the build in downstream projects using SNAPSHOT dependencies, GeoWebCache and GeoServer.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for unsupported modules):\n\n There is a ticket in Jira describing the issue/improvement/feature (a notable exemptions is, changes not visible to end users)\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOT-XYZW] Title of the Jira ticket\"\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by travis-ci after opening this PR)\n Documentation has been updated accordingly.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.", "createdAt": "2020-01-15T14:07:19Z", "url": "https://github.com/geotools/geotools/pull/2752", "merged": true, "mergeCommit": {"oid": "6f1936114407e2412d1251acb7a5a7e9e76135fa"}, "closed": true, "closedAt": "2020-01-17T16:35:28Z", "author": {"login": "dromagnoli"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6mMByABqjI5NTA5Mzg2MDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7RbtngFqTM0NDY5OTI5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc2f5c51f88d625d3a9fe48f63f0a2b3973dae13", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/dc2f5c51f88d625d3a9fe48f63f0a2b3973dae13", "committedDate": "2020-01-15T14:04:40Z", "message": "[GEOT-6313]: Fixes wrapping on RenderingTransformation"}, "afterCommit": {"oid": "8bdcb7062072488470ff2818aa92a775cc647a80", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/8bdcb7062072488470ff2818aa92a775cc647a80", "committedDate": "2020-01-15T14:11:50Z", "message": "[GEOT-6313]: Fixes wrapping on RenderingTransformation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bdcb7062072488470ff2818aa92a775cc647a80", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/8bdcb7062072488470ff2818aa92a775cc647a80", "committedDate": "2020-01-15T14:11:50Z", "message": "[GEOT-6313]: Fixes wrapping on RenderingTransformation"}, "afterCommit": {"oid": "29bd0c7e8340182faf7317738d8a1da9283c7707", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/29bd0c7e8340182faf7317738d8a1da9283c7707", "committedDate": "2020-01-15T14:14:43Z", "message": "[GEOT-6313]: Fixes wrapping on RenderingTransformation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29bd0c7e8340182faf7317738d8a1da9283c7707", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/29bd0c7e8340182faf7317738d8a1da9283c7707", "committedDate": "2020-01-15T14:14:43Z", "message": "[GEOT-6313]: Fixes wrapping on RenderingTransformation"}, "afterCommit": {"oid": "0453c5f934afeff74078b792522dac4db4e876bb", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/0453c5f934afeff74078b792522dac4db4e876bb", "committedDate": "2020-01-15T14:18:33Z", "message": "[GEOT-6313]: Fixes wrapping on RenderingTransformation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNzgzNjM0", "url": "https://github.com/geotools/geotools/pull/2752#pullrequestreview-343783634", "createdAt": "2020-01-16T09:43:43Z", "commit": {"oid": "0453c5f934afeff74078b792522dac4db4e876bb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo0Mzo0NFrOFeTZqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1NToyNFrOFeTv5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMxOTQ2NQ==", "bodyText": "Good catch, ROI.add does not modify the current ROI, it builds a new one.", "url": "https://github.com/geotools/geotools/pull/2752#discussion_r367319465", "createdAt": "2020-01-16T09:43:44Z", "author": {"login": "aaime"}, "path": "modules/library/coverage/src/main/java/org/geotools/coverage/processing/operation/Mosaic.java", "diffHunk": "@@ -972,15 +972,16 @@ protected RenderedImage createRenderedImage(\n                 } else if (rois[i] == null) {\n                     // no ROI, the image is full\n                     RenderedImage ri = sources[i].getRenderedImage();\n-                    finalROI.add(\n-                            new ROIShape(\n-                                    new Rectangle2D.Double(\n-                                            ri.getMinX(),\n-                                            ri.getMinY(),\n-                                            ri.getWidth(),\n-                                            ri.getHeight())));\n+                    finalROI =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0453c5f934afeff74078b792522dac4db4e876bb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMDQzMA==", "bodyText": "Confused, any reason not to use a fullCircles and avoid the divisions later?", "url": "https://github.com/geotools/geotools/pull/2752#discussion_r367320430", "createdAt": "2020-01-16T09:45:49Z", "author": {"login": "aaime"}, "path": "modules/library/main/src/main/java/org/geotools/renderer/crs/ProjectionHandler.java", "diffHunk": "@@ -343,29 +306,132 @@ private void addTransformedEnvelope(ReferencedEnvelope re, List<ReferencedEnvelo\n         // have no idea at all) we don't actually split, but add elements\n         List<ReferencedEnvelope> envelopes = new ArrayList<ReferencedEnvelope>();\n         envelopes.add(re);\n-        if (re.getMinX() < -180) {\n-            envelopes.add(\n-                    new ReferencedEnvelope(\n-                            re.getMinX() + 360,\n-                            Math.min(re.getMaxX() + 360, 180),\n-                            re.getMinY(),\n-                            re.getMaxY(),\n-                            re.getCoordinateReferenceSystem()));\n-        }\n-        if (re.getMaxX() > 180) {\n-            envelopes.add(\n-                    new ReferencedEnvelope(\n-                            Math.max(re.getMinX() - 360, -180),\n-                            re.getMaxX() - 360,\n-                            re.getMinY(),\n-                            re.getMaxY(),\n-                            re.getCoordinateReferenceSystem()));\n-        }\n+        adjustEnvelope(re, envelopes, false);\n         mergeEnvelopes(envelopes);\n         reprojectEnvelopes(sourceCRS, envelopes);\n         return envelopes.stream().filter(e -> e != null).collect(Collectors.toList());\n     }\n \n+    /**\n+     * Adjust the envelope by taking into account dateline wrapping as well as multiple spans of the\n+     * whole world extent. When transform flag is true, the envelopes will be transformed before\n+     * being returned\n+     */\n+    private void adjustEnvelope(\n+            ReferencedEnvelope re, List<ReferencedEnvelope> envelopes, boolean transform)\n+            throws TransformException, FactoryException {\n+        CoordinateReferenceSystem crs = re.getCoordinateReferenceSystem();\n+        boolean isLatLon = CRS.getAxisOrder(crs) == CRS.AxisOrder.NORTH_EAST;\n+        double minX = isLatLon ? re.getMinY() : re.getMinX();\n+        double maxX = isLatLon ? re.getMaxY() : re.getMaxX();\n+        double minY = isLatLon ? re.getMinX() : re.getMinY();\n+        double maxY = isLatLon ? re.getMaxX() : re.getMaxY();\n+        double extent = maxX - minX;\n+        List<ReferencedEnvelope> envelopesToBeAdded = new ArrayList<>();\n+        if (extent > 360) {\n+            // at least one whole world use case -> requested data covers the full world:\n+            // let's set a -180,180 bbox.\n+            // the wrapping projectionHandler and the gridCoverageReaders\n+            // will do proper clones / intersections afterwards\n+            minX = -180;\n+            maxX = 180;\n+            // Create a whole world envelope taking into account latLon/lonLat\n+            ReferencedEnvelope envelope =\n+                    new ReferencedEnvelope(\n+                            isLatLon ? minY : minX,\n+                            isLatLon ? maxY : maxX,\n+                            isLatLon ? minX : minY,\n+                            isLatLon ? maxX : maxY,\n+                            crs);\n+            envelopesToBeAdded.add(envelope);\n+        } else {\n+            // let's do some adjustments to \"shift\" the request around -180, 180 interval:\n+            // we basically add or subtract 360\u00b0 N times\n+            // 1) let's count how many halfCircles (a 180\u00b0 span) we are away from the zero\n+\n+            // 2) add/subtract 360\u00b0 N times to move forward/backward the request, also\n+            // keeping into account whether we are crossing the dateline or not\n+            // (halfCircles % 2)\n+\n+            // 3) add/subtract the original extent to get the other value of the interval\n+            // in order to move the whole window (Note that the extent won't be > 360\u00b0\n+            // since we are inside the \"else\")\n+\n+            int halfCircles = 0;\n+            if (minX < -180) {\n+                halfCircles = (int) ((Math.abs(minX) / 180));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0453c5f934afeff74078b792522dac4db4e876bb"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMTE4Mw==", "bodyText": "Isn't this triggering every time (maxX - minX) > 180? Doesn't mean the dateline has been crossed though.", "url": "https://github.com/geotools/geotools/pull/2752#discussion_r367321183", "createdAt": "2020-01-16T09:47:26Z", "author": {"login": "aaime"}, "path": "modules/library/main/src/main/java/org/geotools/renderer/crs/ProjectionHandler.java", "diffHunk": "@@ -343,29 +306,132 @@ private void addTransformedEnvelope(ReferencedEnvelope re, List<ReferencedEnvelo\n         // have no idea at all) we don't actually split, but add elements\n         List<ReferencedEnvelope> envelopes = new ArrayList<ReferencedEnvelope>();\n         envelopes.add(re);\n-        if (re.getMinX() < -180) {\n-            envelopes.add(\n-                    new ReferencedEnvelope(\n-                            re.getMinX() + 360,\n-                            Math.min(re.getMaxX() + 360, 180),\n-                            re.getMinY(),\n-                            re.getMaxY(),\n-                            re.getCoordinateReferenceSystem()));\n-        }\n-        if (re.getMaxX() > 180) {\n-            envelopes.add(\n-                    new ReferencedEnvelope(\n-                            Math.max(re.getMinX() - 360, -180),\n-                            re.getMaxX() - 360,\n-                            re.getMinY(),\n-                            re.getMaxY(),\n-                            re.getCoordinateReferenceSystem()));\n-        }\n+        adjustEnvelope(re, envelopes, false);\n         mergeEnvelopes(envelopes);\n         reprojectEnvelopes(sourceCRS, envelopes);\n         return envelopes.stream().filter(e -> e != null).collect(Collectors.toList());\n     }\n \n+    /**\n+     * Adjust the envelope by taking into account dateline wrapping as well as multiple spans of the\n+     * whole world extent. When transform flag is true, the envelopes will be transformed before\n+     * being returned\n+     */\n+    private void adjustEnvelope(\n+            ReferencedEnvelope re, List<ReferencedEnvelope> envelopes, boolean transform)\n+            throws TransformException, FactoryException {\n+        CoordinateReferenceSystem crs = re.getCoordinateReferenceSystem();\n+        boolean isLatLon = CRS.getAxisOrder(crs) == CRS.AxisOrder.NORTH_EAST;\n+        double minX = isLatLon ? re.getMinY() : re.getMinX();\n+        double maxX = isLatLon ? re.getMaxY() : re.getMaxX();\n+        double minY = isLatLon ? re.getMinX() : re.getMinY();\n+        double maxY = isLatLon ? re.getMaxX() : re.getMaxY();\n+        double extent = maxX - minX;\n+        List<ReferencedEnvelope> envelopesToBeAdded = new ArrayList<>();\n+        if (extent > 360) {\n+            // at least one whole world use case -> requested data covers the full world:\n+            // let's set a -180,180 bbox.\n+            // the wrapping projectionHandler and the gridCoverageReaders\n+            // will do proper clones / intersections afterwards\n+            minX = -180;\n+            maxX = 180;\n+            // Create a whole world envelope taking into account latLon/lonLat\n+            ReferencedEnvelope envelope =\n+                    new ReferencedEnvelope(\n+                            isLatLon ? minY : minX,\n+                            isLatLon ? maxY : maxX,\n+                            isLatLon ? minX : minY,\n+                            isLatLon ? maxX : maxY,\n+                            crs);\n+            envelopesToBeAdded.add(envelope);\n+        } else {\n+            // let's do some adjustments to \"shift\" the request around -180, 180 interval:\n+            // we basically add or subtract 360\u00b0 N times\n+            // 1) let's count how many halfCircles (a 180\u00b0 span) we are away from the zero\n+\n+            // 2) add/subtract 360\u00b0 N times to move forward/backward the request, also\n+            // keeping into account whether we are crossing the dateline or not\n+            // (halfCircles % 2)\n+\n+            // 3) add/subtract the original extent to get the other value of the interval\n+            // in order to move the whole window (Note that the extent won't be > 360\u00b0\n+            // since we are inside the \"else\")\n+\n+            int halfCircles = 0;\n+            if (minX < -180) {\n+                halfCircles = (int) ((Math.abs(minX) / 180));\n+                minX += (360 * ((halfCircles / 2) + (halfCircles % 2)));\n+                maxX = minX + extent;\n+            } else if (minX > 180) {\n+                halfCircles = (int) (minX / 180);\n+                minX -= (360 * ((halfCircles / 2) + (halfCircles % 2)));\n+                maxX = minX + extent;\n+            } else if (maxX < -180) {\n+                halfCircles = (int) (Math.abs(maxX) / 180);\n+                maxX += (360 * ((halfCircles / 2) + (halfCircles % 2)));\n+                minX = maxX - extent;\n+            } else if (maxX > 180) {\n+                halfCircles = (int) (Math.abs(maxX) / 180);\n+                maxX -= (360 * ((halfCircles / 2) + (halfCircles % 2)));\n+                minX = maxX - extent;\n+            }\n+\n+            if ((int) (minX / 180) < (int) (maxX / 180)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0453c5f934afeff74078b792522dac4db4e876bb"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMzYwOQ==", "bodyText": "Uh, this is going vertical (format wise)... could you use a \"convert anonymous to inner\" and move this block to its own inner class?", "url": "https://github.com/geotools/geotools/pull/2752#discussion_r367323609", "createdAt": "2020-01-16T09:52:14Z", "author": {"login": "aaime"}, "path": "modules/library/render/src/main/java/org/geotools/renderer/lite/StreamingRenderer.java", "diffHunk": "@@ -2326,18 +2325,49 @@ protected GridCoverage2D readCoverage(\n                                 GridGeometry2D readGG)\n                                 throws IOException {\n                             Interpolation interpolation = getRenderingInterpolation(layer);\n-                            GridCoverageReaderHelper helper;\n+                            RenderingHints interpolationHints =\n+                                    new RenderingHints(JAI.KEY_INTERPOLATION, interpolation);\n+                            final GridCoverageRenderer gcr;\n                             try {\n-                                helper =\n-                                        new GridCoverageReaderHelper(\n+                                // Use the original screenSize", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0453c5f934afeff74078b792522dac4db4e876bb"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMzgwNA==", "bodyText": "Is this actually true if the advanced projection handling is off though?", "url": "https://github.com/geotools/geotools/pull/2752#discussion_r367323804", "createdAt": "2020-01-16T09:52:38Z", "author": {"login": "aaime"}, "path": "modules/library/render/src/main/java/org/geotools/renderer/lite/StreamingRenderer.java", "diffHunk": "@@ -2326,18 +2325,49 @@ protected GridCoverage2D readCoverage(\n                                 GridGeometry2D readGG)\n                                 throws IOException {\n                             Interpolation interpolation = getRenderingInterpolation(layer);\n-                            GridCoverageReaderHelper helper;\n+                            RenderingHints interpolationHints =\n+                                    new RenderingHints(JAI.KEY_INTERPOLATION, interpolation);\n+                            final GridCoverageRenderer gcr;\n                             try {\n-                                helper =\n-                                        new GridCoverageReaderHelper(\n+                                // Use the original screenSize\n+                                // the GridCoverageRenderer will take care of eventual gutter or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0453c5f934afeff74078b792522dac4db4e876bb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNTE1OA==", "bodyText": "Could you add a good set of tests inside ProjectionHandlerTest covering all the possible cases handled here?", "url": "https://github.com/geotools/geotools/pull/2752#discussion_r367325158", "createdAt": "2020-01-16T09:55:24Z", "author": {"login": "aaime"}, "path": "modules/library/main/src/main/java/org/geotools/renderer/crs/ProjectionHandler.java", "diffHunk": "@@ -343,29 +306,132 @@ private void addTransformedEnvelope(ReferencedEnvelope re, List<ReferencedEnvelo\n         // have no idea at all) we don't actually split, but add elements\n         List<ReferencedEnvelope> envelopes = new ArrayList<ReferencedEnvelope>();\n         envelopes.add(re);\n-        if (re.getMinX() < -180) {\n-            envelopes.add(\n-                    new ReferencedEnvelope(\n-                            re.getMinX() + 360,\n-                            Math.min(re.getMaxX() + 360, 180),\n-                            re.getMinY(),\n-                            re.getMaxY(),\n-                            re.getCoordinateReferenceSystem()));\n-        }\n-        if (re.getMaxX() > 180) {\n-            envelopes.add(\n-                    new ReferencedEnvelope(\n-                            Math.max(re.getMinX() - 360, -180),\n-                            re.getMaxX() - 360,\n-                            re.getMinY(),\n-                            re.getMaxY(),\n-                            re.getCoordinateReferenceSystem()));\n-        }\n+        adjustEnvelope(re, envelopes, false);\n         mergeEnvelopes(envelopes);\n         reprojectEnvelopes(sourceCRS, envelopes);\n         return envelopes.stream().filter(e -> e != null).collect(Collectors.toList());\n     }\n \n+    /**\n+     * Adjust the envelope by taking into account dateline wrapping as well as multiple spans of the\n+     * whole world extent. When transform flag is true, the envelopes will be transformed before\n+     * being returned\n+     */\n+    private void adjustEnvelope(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0453c5f934afeff74078b792522dac4db4e876bb"}, "originalPosition": 97}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0453c5f934afeff74078b792522dac4db4e876bb", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/0453c5f934afeff74078b792522dac4db4e876bb", "committedDate": "2020-01-15T14:18:33Z", "message": "[GEOT-6313]: Fixes wrapping on RenderingTransformation"}, "afterCommit": {"oid": "1f38b6136ffd7888be0af9b0aa0799091c6fc539", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/1f38b6136ffd7888be0af9b0aa0799091c6fc539", "committedDate": "2020-01-16T13:52:44Z", "message": "[GEOT-6313]: Fixes wrapping on RenderingTransformation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f38b6136ffd7888be0af9b0aa0799091c6fc539", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/1f38b6136ffd7888be0af9b0aa0799091c6fc539", "committedDate": "2020-01-16T13:52:44Z", "message": "[GEOT-6313]: Fixes wrapping on RenderingTransformation"}, "afterCommit": {"oid": "f075d78917ec6c503a3b52b0959357c6247ef889", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/f075d78917ec6c503a3b52b0959357c6247ef889", "committedDate": "2020-01-16T14:19:49Z", "message": "[GEOT-6313]: Fixes wrapping on RenderingTransformation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2610e5cfa5623670e8a3d31d96ef4dbe0d9af6ea", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/2610e5cfa5623670e8a3d31d96ef4dbe0d9af6ea", "committedDate": "2020-01-17T15:56:39Z", "message": "[GEOT-6313]: Fixes wrapping on RenderingTransformation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f075d78917ec6c503a3b52b0959357c6247ef889", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/f075d78917ec6c503a3b52b0959357c6247ef889", "committedDate": "2020-01-16T14:19:49Z", "message": "[GEOT-6313]: Fixes wrapping on RenderingTransformation"}, "afterCommit": {"oid": "2610e5cfa5623670e8a3d31d96ef4dbe0d9af6ea", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geotools/geotools/commit/2610e5cfa5623670e8a3d31d96ef4dbe0d9af6ea", "committedDate": "2020-01-17T15:56:39Z", "message": "[GEOT-6313]: Fixes wrapping on RenderingTransformation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Njk5Mjkw", "url": "https://github.com/geotools/geotools/pull/2752#pullrequestreview-344699290", "createdAt": "2020-01-17T16:35:07Z", "commit": {"oid": "2610e5cfa5623670e8a3d31d96ef4dbe0d9af6ea"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2983, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}