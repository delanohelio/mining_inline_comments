{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MDY0NTkw", "number": 8334, "title": "Improve TestPassiveSTS.java to test sign-out and for tenant mode", "bodyText": "Modify the test class to test the cases in both super tenant and tenant modes and add a case to test passive sts sign out.", "createdAt": "2020-05-14T15:15:56Z", "url": "https://github.com/wso2/product-is/pull/8334", "merged": true, "mergeCommit": {"oid": "fc65708bf4a57672bb5366aeda4e5fcb8fabda18"}, "closed": true, "closedAt": "2020-05-15T11:04:43Z", "author": {"login": "Abilashini"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchO2k8AH2gAyNDE4MDY0NTkwOmRjYzA3NDA0YTQzMmJjYTUyMTEzMjllNDM0OTMyYWNjOGNhNjg1M2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchfuQjABqjMzNDAzNzkzNzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dcc07404a432bca5211329e434932acc8ca6853e", "author": {"user": {"login": "Abilashini", "name": "Abilashini"}}, "url": "https://github.com/wso2/product-is/commit/dcc07404a432bca5211329e434932acc8ca6853e", "committedDate": "2020-05-14T15:03:52Z", "message": "Improve TestPassiveSTS.java to test sigout and for tenant mode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMDUyNjEx", "url": "https://github.com/wso2/product-is/pull/8334#pullrequestreview-412052611", "createdAt": "2020-05-14T17:55:55Z", "commit": {"oid": "dcc07404a432bca5211329e434932acc8ca6853e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMDg3NDg3", "url": "https://github.com/wso2/product-is/pull/8334#pullrequestreview-412087487", "createdAt": "2020-05-14T18:43:23Z", "commit": {"oid": "dcc07404a432bca5211329e434932acc8ca6853e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMDg4ODU0", "url": "https://github.com/wso2/product-is/pull/8334#pullrequestreview-412088854", "createdAt": "2020-05-14T18:45:23Z", "commit": {"oid": "dcc07404a432bca5211329e434932acc8ca6853e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0NToyM1rOGVpqzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0NToyM1rOGVpqzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTk4MQ==", "bodyText": "Better to rename the method to something like appendTenantDomainQueryParam or something along the line.", "url": "https://github.com/wso2/product-is/pull/8334#discussion_r425355981", "createdAt": "2020-05-14T18:45:23Z", "author": {"login": "mefarazath"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/sts/TestPassiveSTS.java", "diffHunk": "@@ -313,10 +362,17 @@ private void setSystemProperties() {\n         return claimMappingList.toArray(new ClaimMapping[0]);\n     }\n \n-    private boolean requestMissingClaims (HttpResponse response) {\n+    private boolean requestMissingClaims(HttpResponse response) {\n \n         String redirectUrl = Utils.getRedirectUrl(response);\n         return redirectUrl.contains(\"consent.do\");\n     }\n \n+    private String getPassiveParamsForTenant(String params) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc07404a432bca5211329e434932acc8ca6853e"}, "originalPosition": 300}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMDkwMjQ0", "url": "https://github.com/wso2/product-is/pull/8334#pullrequestreview-412090244", "createdAt": "2020-05-14T18:47:14Z", "commit": {"oid": "dcc07404a432bca5211329e434932acc8ca6853e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0NzoxNFrOGVpvAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0NzoxNFrOGVpvAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NzA1OA==", "bodyText": "Is asserting the status enough to gurantee a successful logout?", "url": "https://github.com/wso2/product-is/pull/8334#discussion_r425357058", "createdAt": "2020-05-14T18:47:14Z", "author": {"login": "mefarazath"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/sts/TestPassiveSTS.java", "diffHunk": "@@ -278,8 +312,23 @@ public void testSessionHijacking() throws Exception {\n         HttpResponse response = client.execute(getRequest);\n         String resultPage2 = DataExtractUtil.getContentData(response);\n         EntityUtils.consume(response.getEntity());\n-        Assert.assertTrue(resultPage2.contains(\"Authentication Error!\"), \"Session hijacking is possible.\");\n+        Assert.assertTrue(resultPage2.contains(\"Authentication Error!\"), \"Session hijacking is possible for \" +\n+                \"tenant domain: \" + tenantDomain);\n+    }\n \n+    @Test(alwaysRun = true, description = \"Test logout request\",\n+            dependsOnMethods = {\"testPassiveSAML2Assertion\", \"testSessionHijacking\"})\n+    public void testSendLogoutRequest() throws Exception {\n+\n+        String passiveParams = \"?wa=wsignout1.0&wreply=\" + PASSIVE_STS_SAMPLE_APP_URL + \"&wtrealm=PassiveSTSSampleApp\";\n+        passiveParams = getPassiveParamsForTenant(passiveParams);\n+        HttpGet request = new HttpGet(this.passiveStsURL + passiveParams);\n+        HttpResponse response = client.execute(request);\n+\n+        Assert.assertNotNull(response, \"PassiveSTSSampleApp logout response is null for tenant domain: \" +\n+                tenantDomain);\n+        int responseCode = response.getStatusLine().getStatusCode();\n+        Assert.assertEquals(responseCode, 200, \"Invalid Response for tenant domain: \" + tenantDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc07404a432bca5211329e434932acc8ca6853e"}, "originalPosition": 285}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMDkwODEw", "url": "https://github.com/wso2/product-is/pull/8334#pullrequestreview-412090810", "createdAt": "2020-05-14T18:48:01Z", "commit": {"oid": "dcc07404a432bca5211329e434932acc8ca6853e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNDg4Mjg2", "url": "https://github.com/wso2/product-is/pull/8334#pullrequestreview-412488286", "createdAt": "2020-05-15T09:25:52Z", "commit": {"oid": "ee54498f524f59bae2e7f724a9d574de90e27df1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNDkyNTk4", "url": "https://github.com/wso2/product-is/pull/8334#pullrequestreview-412492598", "createdAt": "2020-05-15T09:31:43Z", "commit": {"oid": "ee54498f524f59bae2e7f724a9d574de90e27df1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTozMTo0M1rOGV9jbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTozMTo0M1rOGV9jbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4MTc3NQ==", "bodyText": "I feel it would be better to include what we expected to happen here.\n\"Authentication request was not initiated after logout from sample. Possible logout failure.\"", "url": "https://github.com/wso2/product-is/pull/8334#discussion_r425681775", "createdAt": "2020-05-15T09:31:43Z", "author": {"login": "mefarazath"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/sts/TestPassiveSTS.java", "diffHunk": "@@ -278,8 +312,32 @@ public void testSessionHijacking() throws Exception {\n         HttpResponse response = client.execute(getRequest);\n         String resultPage2 = DataExtractUtil.getContentData(response);\n         EntityUtils.consume(response.getEntity());\n-        Assert.assertTrue(resultPage2.contains(\"Authentication Error!\"), \"Session hijacking is possible.\");\n+        Assert.assertTrue(resultPage2.contains(\"Authentication Error!\"), \"Session hijacking is possible for \" +\n+                \"tenant domain: \" + tenantDomain);\n+    }\n+\n+    @Test(alwaysRun = true, description = \"Test logout request\",\n+            dependsOnMethods = {\"testPassiveSAML2Assertion\", \"testSessionHijacking\"})\n+    public void testSendLogoutRequest() throws Exception {\n \n+        String passiveParams = \"?wa=wsignout1.0&wreply=\" + PASSIVE_STS_SAMPLE_APP_URL + \"&wtrealm=PassiveSTSSampleApp\";\n+        passiveParams = appendTenantDomainQueryParam(passiveParams);\n+        HttpGet request = new HttpGet(this.passiveStsURL + passiveParams);\n+        HttpResponse response = client.execute(request);\n+\n+        Assert.assertNotNull(response, \"PassiveSTSSampleApp logout response is null for tenant domain: \" +\n+                tenantDomain);\n+        int responseCode = response.getStatusLine().getStatusCode();\n+        Assert.assertEquals(responseCode, 200, \"Invalid Response for tenant domain: \" + tenantDomain);\n+\n+        Map<String, Integer> keyPositionMap = new HashMap<>(1);\n+        keyPositionMap.put(\"name=\\\"sessionDataKey\\\"\", 1);\n+        List<DataExtractUtil.KeyValue> keyValues = DataExtractUtil.extractDataFromResponse(response,\n+                keyPositionMap);\n+        EntityUtils.consume(response.getEntity());\n+        Assert.assertNotNull(keyValues, \"sessionDataKey key value is null for tenant domain: \" + tenantDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee54498f524f59bae2e7f724a9d574de90e27df1"}, "originalPosition": 292}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNDkzMDQy", "url": "https://github.com/wso2/product-is/pull/8334#pullrequestreview-412493042", "createdAt": "2020-05-15T09:32:25Z", "commit": {"oid": "ee54498f524f59bae2e7f724a9d574de90e27df1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ecf68dd1a82f5cd70f96b80c963b3251fe547f3", "author": {"user": {"login": "Abilashini", "name": "Abilashini"}}, "url": "https://github.com/wso2/product-is/commit/4ecf68dd1a82f5cd70f96b80c963b3251fe547f3", "committedDate": "2020-05-15T10:42:28Z", "message": "Address review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee54498f524f59bae2e7f724a9d574de90e27df1", "author": {"user": {"login": "Abilashini", "name": "Abilashini"}}, "url": "https://github.com/wso2/product-is/commit/ee54498f524f59bae2e7f724a9d574de90e27df1", "committedDate": "2020-05-15T06:25:58Z", "message": "Address review comments"}, "afterCommit": {"oid": "4ecf68dd1a82f5cd70f96b80c963b3251fe547f3", "author": {"user": {"login": "Abilashini", "name": "Abilashini"}}, "url": "https://github.com/wso2/product-is/commit/4ecf68dd1a82f5cd70f96b80c963b3251fe547f3", "committedDate": "2020-05-15T10:42:28Z", "message": "Address review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1277, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}