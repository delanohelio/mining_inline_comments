{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NjM0MTE0", "number": 10640, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDoxNToyNFrOE-8X1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDoyMjo0OFrOE-8dBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDM2MzA4OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDoxNToyNFrOH8XhuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjo1MjoxMFrOH8aWmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MjA3Mw==", "bodyText": "Why this is commented?", "url": "https://github.com/wso2/product-is/pull/10640#discussion_r533062073", "createdAt": "2020-12-01T04:15:24Z", "author": {"login": "piraveena"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "diffHunk": "@@ -0,0 +1,760 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oidc;\n+\n+import org.apache.http.Header;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.opensaml.xml.util.Base64;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.JustInTimeProvisioningConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.xsd.*;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.carbon.identity.sso.saml.stub.types.SAMLSSOServiceProviderDTO;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.carbon.user.mgt.stub.UserAdminUserAdminException;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.application.mgt.AbstractIdentityFederationTestCase;\n+import org.wso2.identity.integration.test.oidc.bean.OIDCApplication;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.IdentityConstants;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class OIDCIdentityFederationTestCase extends AbstractIdentityFederationTestCase {\n+\n+    private static final String SAML_SSO_URL = \"http://localhost:8490/travelocity.com/samlsso?SAML2\" +\n+            \".HTTPBinding=HTTP-Redirect\";\n+    private static final String SAML_LOGOUT_URL = \"http://localhost:8490/travelocity.com/logout?SAML2\" +\n+            \".HTTPBinding=HTTP-Redirect\";\n+    private static final String USER_AGENT = \"Apache-HttpClient/4.2.5 (java 1.5)\";\n+\n+    private static final String PRIMARY_IS_SP_NAME = \"travelocity\";\n+    private static final String PRIMARY_IS_SP_INBOUND_AUTH_TYPE_SAMLSSO = \"samlsso\";\n+    private static final String PRIMARY_IS_SP_AUTHENTICATION_TYPE = \"federated\";\n+\n+    private static final String PRIMARY_IS_SAML_ISSUER_NAME = \"travelocity.com\";\n+    private static final String PRIMARY_IS_SAML_ACS_URL = \"http://localhost:8490/travelocity.com/home.jsp\";\n+    private static final String PRIMARY_IS_SAML_NAME_ID_FORMAT = \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\";\n+\n+    private static final String PRIMARY_IS_IDP_NAME = \"trustedIdP\";\n+    private static final String PRIMARY_IS_IDP_AUTHENTICATOR_NAME_OIDC = \"OpenIDConnectAuthenticator\";\n+    private static final String PRIMARY_IS_IDP_CALLBACK_URL = \"https://localhost:9853/commonauth\";\n+\n+    private static final String SECONDARY_IS_TEST_USERNAME = \"testFederatedUser\";\n+    private static final String SECONDARY_IS_TEST_PASSWORD = \"testFederatePassword\";\n+    private static final String SECONDARY_IS_TEST_USER_ROLES = \"admin\";\n+\n+    private static final String SECONDARY_IS_SP_NAME = \"secondarySP\";\n+    private static final String SECONDARY_IS_IDP_CALLBACK_URL = \"https://localhost:9854/commonauth\";\n+    private static final String SECONDARY_IS_TOKEN_ENDPOINT = \"https://localhost:9854/oauth2/token\";\n+    private static final String SECONDARY_IS_LOGOUT_ENDPOINT = \"https://localhost:9854/oidc/logout\";\n+    private static final String SECONDARY_IS_AUTHORIZE_ENDPOINT = \"https://localhost:9854/oauth2/authorize\";\n+    private static final String HTTPS_LOCALHOST_SERVICES = \"https://localhost:%s/services/\";\n+\n+    protected OauthAdminClient adminClient;\n+    private String secondaryISClientID;\n+    private String secondaryISClientSecret;\n+\n+    private static final int PORT_OFFSET_0 = 0;\n+    private static final int PORT_OFFSET_1 = 1;\n+\n+    CookieStore cookieStore;\n+    private CloseableHttpClient client;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void initTest() throws Exception {\n+\n+        super.initTest();\n+\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+\n+        super.createServiceClients(PORT_OFFSET_0, sessionCookie,\n+                new IdentityConstants.ServiceClientType[]{\n+                        IdentityConstants.ServiceClientType.APPLICATION_MANAGEMENT,\n+                        IdentityConstants.ServiceClientType.IDENTITY_PROVIDER_MGT,\n+                        IdentityConstants.ServiceClientType.SAML_SSO_CONFIG});\n+\n+        super.createServiceClients(PORT_OFFSET_1, null,\n+                new IdentityConstants.ServiceClientType[]{\n+                        IdentityConstants.ServiceClientType.APPLICATION_MANAGEMENT,\n+                        IdentityConstants.ServiceClientType.OAUTH_ADMIN});\n+\n+        createServiceProviderInSecondaryIS();\n+        createIdentityProviderInPrimaryIS();\n+        createServiceProviderInPrimaryIS();\n+\n+        cookieStore = new BasicCookieStore();\n+        client = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).build();\n+\n+        boolean userCreated = addUserToSecondaryIS();\n+        Assert.assertTrue(userCreated, \"User creation failed in secondary IS.\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void endTest() throws Exception {\n+\n+        try {\n+            super.deleteServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+            super.deleteIdentityProvider(PORT_OFFSET_0, PRIMARY_IS_IDP_NAME);\n+\n+            super.deleteServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+\n+            deleteAddedUsersInSecondaryIS();\n+\n+            client.close();\n+        } catch (Exception e) {\n+            log.error(\"Failure occured due to :\" + e.getMessage(), e);\n+            throw e;\n+        }\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated login\")\n+    public void testFederatedLogin() throws Exception {\n+\n+        String sessionDataKeyOfSecondaryISLogin = sendSAMLRequestToPrimaryIS();\n+        Assert.assertNotNull(sessionDataKeyOfSecondaryISLogin,\n+                \"Unable to acquire 'sessionDataKey' value in secondary IS\");\n+\n+        String sessionDataKeyConsentOfSecondaryIS = doAuthenticationInSecondaryIS(sessionDataKeyOfSecondaryISLogin);\n+        Assert.assertNotNull(sessionDataKeyConsentOfSecondaryIS, \"Invalid sessionDataKeyConsent.\");\n+\n+        String callbackURLOfPrimaryIS = doConsentApprovalInSecondaryIS(sessionDataKeyConsentOfSecondaryIS);\n+        Assert.assertNotNull(callbackURLOfPrimaryIS, \"Unable to acquire authorizeCallbackURL in primary IS\");\n+\n+        String samlResponse = getSAMLResponseFromPrimaryIS(callbackURLOfPrimaryIS);\n+        Assert.assertNotNull(samlResponse, \"Unable to acquire SAML response from primary IS\");\n+\n+        String decodedSAMLResponse = new String(Base64.decode(samlResponse));\n+        Assert.assertTrue(decodedSAMLResponse.contains(\"AuthnContextClassRef\"),\n+                \"AuthnContextClassRef is not received.\");\n+\n+        String homepageContent = sendSAMLResponseToWebApp(samlResponse);\n+        boolean isValidLogin = validateLoginHomePageContent(homepageContent);\n+        Assert.assertTrue(isValidLogin, \"Invalid SAML login response received by travelocity app\");\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated logout\", dependsOnMethods = {\n+            \"testFederatedLogin\"})\n+    public void testLogout() throws Exception {\n+\n+        sendLogoutRequestToPrimaryIS();\n+\n+        String samlLogoutResponseToWebapp = doLogoutConsentApprovalInSecondaryIS();\n+        Assert.assertNotNull(samlLogoutResponseToWebapp,\n+                \"Unable to acquire SAML Logout response from travelocity app\");\n+\n+        String decodedSAMLResponse = new String(Base64.decode(samlLogoutResponseToWebapp));\n+        Assert.assertNotNull(decodedSAMLResponse);\n+\n+        String logoutPageContent = sendSAMLResponseToWebApp(samlLogoutResponseToWebapp);\n+        boolean isValidLogout = validateLogoutPageContent(logoutPageContent);\n+        Assert.assertTrue(isValidLogout, \"Invalid SAML Logout response received by travelocity app\");\n+    }\n+\n+    //TODO Test case for consent denial from the federated IdP during the logout.\n+//    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated logout deny-consent\", dependsOnMethods = {\n+//            \"testFederatedLogin\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e5d07fe8109ecc39a8280bb8968e5b27c6941c"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MzIwMQ==", "bodyText": "let's add the reason for making this as todo in the comments and link to the git issue if possible", "url": "https://github.com/wso2/product-is/pull/10640#discussion_r533063201", "createdAt": "2020-12-01T04:19:55Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "diffHunk": "@@ -0,0 +1,760 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oidc;\n+\n+import org.apache.http.Header;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.opensaml.xml.util.Base64;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.JustInTimeProvisioningConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.xsd.*;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.carbon.identity.sso.saml.stub.types.SAMLSSOServiceProviderDTO;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.carbon.user.mgt.stub.UserAdminUserAdminException;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.application.mgt.AbstractIdentityFederationTestCase;\n+import org.wso2.identity.integration.test.oidc.bean.OIDCApplication;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.IdentityConstants;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class OIDCIdentityFederationTestCase extends AbstractIdentityFederationTestCase {\n+\n+    private static final String SAML_SSO_URL = \"http://localhost:8490/travelocity.com/samlsso?SAML2\" +\n+            \".HTTPBinding=HTTP-Redirect\";\n+    private static final String SAML_LOGOUT_URL = \"http://localhost:8490/travelocity.com/logout?SAML2\" +\n+            \".HTTPBinding=HTTP-Redirect\";\n+    private static final String USER_AGENT = \"Apache-HttpClient/4.2.5 (java 1.5)\";\n+\n+    private static final String PRIMARY_IS_SP_NAME = \"travelocity\";\n+    private static final String PRIMARY_IS_SP_INBOUND_AUTH_TYPE_SAMLSSO = \"samlsso\";\n+    private static final String PRIMARY_IS_SP_AUTHENTICATION_TYPE = \"federated\";\n+\n+    private static final String PRIMARY_IS_SAML_ISSUER_NAME = \"travelocity.com\";\n+    private static final String PRIMARY_IS_SAML_ACS_URL = \"http://localhost:8490/travelocity.com/home.jsp\";\n+    private static final String PRIMARY_IS_SAML_NAME_ID_FORMAT = \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\";\n+\n+    private static final String PRIMARY_IS_IDP_NAME = \"trustedIdP\";\n+    private static final String PRIMARY_IS_IDP_AUTHENTICATOR_NAME_OIDC = \"OpenIDConnectAuthenticator\";\n+    private static final String PRIMARY_IS_IDP_CALLBACK_URL = \"https://localhost:9853/commonauth\";\n+\n+    private static final String SECONDARY_IS_TEST_USERNAME = \"testFederatedUser\";\n+    private static final String SECONDARY_IS_TEST_PASSWORD = \"testFederatePassword\";\n+    private static final String SECONDARY_IS_TEST_USER_ROLES = \"admin\";\n+\n+    private static final String SECONDARY_IS_SP_NAME = \"secondarySP\";\n+    private static final String SECONDARY_IS_IDP_CALLBACK_URL = \"https://localhost:9854/commonauth\";\n+    private static final String SECONDARY_IS_TOKEN_ENDPOINT = \"https://localhost:9854/oauth2/token\";\n+    private static final String SECONDARY_IS_LOGOUT_ENDPOINT = \"https://localhost:9854/oidc/logout\";\n+    private static final String SECONDARY_IS_AUTHORIZE_ENDPOINT = \"https://localhost:9854/oauth2/authorize\";\n+    private static final String HTTPS_LOCALHOST_SERVICES = \"https://localhost:%s/services/\";\n+\n+    protected OauthAdminClient adminClient;\n+    private String secondaryISClientID;\n+    private String secondaryISClientSecret;\n+\n+    private static final int PORT_OFFSET_0 = 0;\n+    private static final int PORT_OFFSET_1 = 1;\n+\n+    CookieStore cookieStore;\n+    private CloseableHttpClient client;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void initTest() throws Exception {\n+\n+        super.initTest();\n+\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+\n+        super.createServiceClients(PORT_OFFSET_0, sessionCookie,\n+                new IdentityConstants.ServiceClientType[]{\n+                        IdentityConstants.ServiceClientType.APPLICATION_MANAGEMENT,\n+                        IdentityConstants.ServiceClientType.IDENTITY_PROVIDER_MGT,\n+                        IdentityConstants.ServiceClientType.SAML_SSO_CONFIG});\n+\n+        super.createServiceClients(PORT_OFFSET_1, null,\n+                new IdentityConstants.ServiceClientType[]{\n+                        IdentityConstants.ServiceClientType.APPLICATION_MANAGEMENT,\n+                        IdentityConstants.ServiceClientType.OAUTH_ADMIN});\n+\n+        createServiceProviderInSecondaryIS();\n+        createIdentityProviderInPrimaryIS();\n+        createServiceProviderInPrimaryIS();\n+\n+        cookieStore = new BasicCookieStore();\n+        client = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).build();\n+\n+        boolean userCreated = addUserToSecondaryIS();\n+        Assert.assertTrue(userCreated, \"User creation failed in secondary IS.\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void endTest() throws Exception {\n+\n+        try {\n+            super.deleteServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+            super.deleteIdentityProvider(PORT_OFFSET_0, PRIMARY_IS_IDP_NAME);\n+\n+            super.deleteServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+\n+            deleteAddedUsersInSecondaryIS();\n+\n+            client.close();\n+        } catch (Exception e) {\n+            log.error(\"Failure occured due to :\" + e.getMessage(), e);\n+            throw e;\n+        }\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated login\")\n+    public void testFederatedLogin() throws Exception {\n+\n+        String sessionDataKeyOfSecondaryISLogin = sendSAMLRequestToPrimaryIS();\n+        Assert.assertNotNull(sessionDataKeyOfSecondaryISLogin,\n+                \"Unable to acquire 'sessionDataKey' value in secondary IS\");\n+\n+        String sessionDataKeyConsentOfSecondaryIS = doAuthenticationInSecondaryIS(sessionDataKeyOfSecondaryISLogin);\n+        Assert.assertNotNull(sessionDataKeyConsentOfSecondaryIS, \"Invalid sessionDataKeyConsent.\");\n+\n+        String callbackURLOfPrimaryIS = doConsentApprovalInSecondaryIS(sessionDataKeyConsentOfSecondaryIS);\n+        Assert.assertNotNull(callbackURLOfPrimaryIS, \"Unable to acquire authorizeCallbackURL in primary IS\");\n+\n+        String samlResponse = getSAMLResponseFromPrimaryIS(callbackURLOfPrimaryIS);\n+        Assert.assertNotNull(samlResponse, \"Unable to acquire SAML response from primary IS\");\n+\n+        String decodedSAMLResponse = new String(Base64.decode(samlResponse));\n+        Assert.assertTrue(decodedSAMLResponse.contains(\"AuthnContextClassRef\"),\n+                \"AuthnContextClassRef is not received.\");\n+\n+        String homepageContent = sendSAMLResponseToWebApp(samlResponse);\n+        boolean isValidLogin = validateLoginHomePageContent(homepageContent);\n+        Assert.assertTrue(isValidLogin, \"Invalid SAML login response received by travelocity app\");\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated logout\", dependsOnMethods = {\n+            \"testFederatedLogin\"})\n+    public void testLogout() throws Exception {\n+\n+        sendLogoutRequestToPrimaryIS();\n+\n+        String samlLogoutResponseToWebapp = doLogoutConsentApprovalInSecondaryIS();\n+        Assert.assertNotNull(samlLogoutResponseToWebapp,\n+                \"Unable to acquire SAML Logout response from travelocity app\");\n+\n+        String decodedSAMLResponse = new String(Base64.decode(samlLogoutResponseToWebapp));\n+        Assert.assertNotNull(decodedSAMLResponse);\n+\n+        String logoutPageContent = sendSAMLResponseToWebApp(samlLogoutResponseToWebapp);\n+        boolean isValidLogout = validateLogoutPageContent(logoutPageContent);\n+        Assert.assertTrue(isValidLogout, \"Invalid SAML Logout response received by travelocity app\");\n+    }\n+\n+    //TODO Test case for consent denial from the federated IdP during the logout.\n+//    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated logout deny-consent\", dependsOnMethods = {\n+//            \"testFederatedLogin\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MjA3Mw=="}, "originalCommit": {"oid": "78e5d07fe8109ecc39a8280bb8968e5b27c6941c"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwODM3OA==", "bodyText": "Addressed with 1b721f3.", "url": "https://github.com/wso2/product-is/pull/10640#discussion_r533108378", "createdAt": "2020-12-01T06:52:10Z", "author": {"login": "chamathns"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "diffHunk": "@@ -0,0 +1,760 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oidc;\n+\n+import org.apache.http.Header;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.opensaml.xml.util.Base64;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.JustInTimeProvisioningConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.xsd.*;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.carbon.identity.sso.saml.stub.types.SAMLSSOServiceProviderDTO;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.carbon.user.mgt.stub.UserAdminUserAdminException;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.application.mgt.AbstractIdentityFederationTestCase;\n+import org.wso2.identity.integration.test.oidc.bean.OIDCApplication;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.IdentityConstants;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class OIDCIdentityFederationTestCase extends AbstractIdentityFederationTestCase {\n+\n+    private static final String SAML_SSO_URL = \"http://localhost:8490/travelocity.com/samlsso?SAML2\" +\n+            \".HTTPBinding=HTTP-Redirect\";\n+    private static final String SAML_LOGOUT_URL = \"http://localhost:8490/travelocity.com/logout?SAML2\" +\n+            \".HTTPBinding=HTTP-Redirect\";\n+    private static final String USER_AGENT = \"Apache-HttpClient/4.2.5 (java 1.5)\";\n+\n+    private static final String PRIMARY_IS_SP_NAME = \"travelocity\";\n+    private static final String PRIMARY_IS_SP_INBOUND_AUTH_TYPE_SAMLSSO = \"samlsso\";\n+    private static final String PRIMARY_IS_SP_AUTHENTICATION_TYPE = \"federated\";\n+\n+    private static final String PRIMARY_IS_SAML_ISSUER_NAME = \"travelocity.com\";\n+    private static final String PRIMARY_IS_SAML_ACS_URL = \"http://localhost:8490/travelocity.com/home.jsp\";\n+    private static final String PRIMARY_IS_SAML_NAME_ID_FORMAT = \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\";\n+\n+    private static final String PRIMARY_IS_IDP_NAME = \"trustedIdP\";\n+    private static final String PRIMARY_IS_IDP_AUTHENTICATOR_NAME_OIDC = \"OpenIDConnectAuthenticator\";\n+    private static final String PRIMARY_IS_IDP_CALLBACK_URL = \"https://localhost:9853/commonauth\";\n+\n+    private static final String SECONDARY_IS_TEST_USERNAME = \"testFederatedUser\";\n+    private static final String SECONDARY_IS_TEST_PASSWORD = \"testFederatePassword\";\n+    private static final String SECONDARY_IS_TEST_USER_ROLES = \"admin\";\n+\n+    private static final String SECONDARY_IS_SP_NAME = \"secondarySP\";\n+    private static final String SECONDARY_IS_IDP_CALLBACK_URL = \"https://localhost:9854/commonauth\";\n+    private static final String SECONDARY_IS_TOKEN_ENDPOINT = \"https://localhost:9854/oauth2/token\";\n+    private static final String SECONDARY_IS_LOGOUT_ENDPOINT = \"https://localhost:9854/oidc/logout\";\n+    private static final String SECONDARY_IS_AUTHORIZE_ENDPOINT = \"https://localhost:9854/oauth2/authorize\";\n+    private static final String HTTPS_LOCALHOST_SERVICES = \"https://localhost:%s/services/\";\n+\n+    protected OauthAdminClient adminClient;\n+    private String secondaryISClientID;\n+    private String secondaryISClientSecret;\n+\n+    private static final int PORT_OFFSET_0 = 0;\n+    private static final int PORT_OFFSET_1 = 1;\n+\n+    CookieStore cookieStore;\n+    private CloseableHttpClient client;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void initTest() throws Exception {\n+\n+        super.initTest();\n+\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+\n+        super.createServiceClients(PORT_OFFSET_0, sessionCookie,\n+                new IdentityConstants.ServiceClientType[]{\n+                        IdentityConstants.ServiceClientType.APPLICATION_MANAGEMENT,\n+                        IdentityConstants.ServiceClientType.IDENTITY_PROVIDER_MGT,\n+                        IdentityConstants.ServiceClientType.SAML_SSO_CONFIG});\n+\n+        super.createServiceClients(PORT_OFFSET_1, null,\n+                new IdentityConstants.ServiceClientType[]{\n+                        IdentityConstants.ServiceClientType.APPLICATION_MANAGEMENT,\n+                        IdentityConstants.ServiceClientType.OAUTH_ADMIN});\n+\n+        createServiceProviderInSecondaryIS();\n+        createIdentityProviderInPrimaryIS();\n+        createServiceProviderInPrimaryIS();\n+\n+        cookieStore = new BasicCookieStore();\n+        client = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).build();\n+\n+        boolean userCreated = addUserToSecondaryIS();\n+        Assert.assertTrue(userCreated, \"User creation failed in secondary IS.\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void endTest() throws Exception {\n+\n+        try {\n+            super.deleteServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+            super.deleteIdentityProvider(PORT_OFFSET_0, PRIMARY_IS_IDP_NAME);\n+\n+            super.deleteServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+\n+            deleteAddedUsersInSecondaryIS();\n+\n+            client.close();\n+        } catch (Exception e) {\n+            log.error(\"Failure occured due to :\" + e.getMessage(), e);\n+            throw e;\n+        }\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated login\")\n+    public void testFederatedLogin() throws Exception {\n+\n+        String sessionDataKeyOfSecondaryISLogin = sendSAMLRequestToPrimaryIS();\n+        Assert.assertNotNull(sessionDataKeyOfSecondaryISLogin,\n+                \"Unable to acquire 'sessionDataKey' value in secondary IS\");\n+\n+        String sessionDataKeyConsentOfSecondaryIS = doAuthenticationInSecondaryIS(sessionDataKeyOfSecondaryISLogin);\n+        Assert.assertNotNull(sessionDataKeyConsentOfSecondaryIS, \"Invalid sessionDataKeyConsent.\");\n+\n+        String callbackURLOfPrimaryIS = doConsentApprovalInSecondaryIS(sessionDataKeyConsentOfSecondaryIS);\n+        Assert.assertNotNull(callbackURLOfPrimaryIS, \"Unable to acquire authorizeCallbackURL in primary IS\");\n+\n+        String samlResponse = getSAMLResponseFromPrimaryIS(callbackURLOfPrimaryIS);\n+        Assert.assertNotNull(samlResponse, \"Unable to acquire SAML response from primary IS\");\n+\n+        String decodedSAMLResponse = new String(Base64.decode(samlResponse));\n+        Assert.assertTrue(decodedSAMLResponse.contains(\"AuthnContextClassRef\"),\n+                \"AuthnContextClassRef is not received.\");\n+\n+        String homepageContent = sendSAMLResponseToWebApp(samlResponse);\n+        boolean isValidLogin = validateLoginHomePageContent(homepageContent);\n+        Assert.assertTrue(isValidLogin, \"Invalid SAML login response received by travelocity app\");\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated logout\", dependsOnMethods = {\n+            \"testFederatedLogin\"})\n+    public void testLogout() throws Exception {\n+\n+        sendLogoutRequestToPrimaryIS();\n+\n+        String samlLogoutResponseToWebapp = doLogoutConsentApprovalInSecondaryIS();\n+        Assert.assertNotNull(samlLogoutResponseToWebapp,\n+                \"Unable to acquire SAML Logout response from travelocity app\");\n+\n+        String decodedSAMLResponse = new String(Base64.decode(samlLogoutResponseToWebapp));\n+        Assert.assertNotNull(decodedSAMLResponse);\n+\n+        String logoutPageContent = sendSAMLResponseToWebApp(samlLogoutResponseToWebapp);\n+        boolean isValidLogout = validateLogoutPageContent(logoutPageContent);\n+        Assert.assertTrue(isValidLogout, \"Invalid SAML Logout response received by travelocity app\");\n+    }\n+\n+    //TODO Test case for consent denial from the federated IdP during the logout.\n+//    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated logout deny-consent\", dependsOnMethods = {\n+//            \"testFederatedLogin\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MjA3Mw=="}, "originalCommit": {"oid": "78e5d07fe8109ecc39a8280bb8968e5b27c6941c"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDM2NTk5OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDoxNzowMlrOH8XjZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjo1MjowNVrOH8aWhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MjUwMQ==", "bodyText": "Shall we make the method descriptions in order to maintain the format. WDYT?", "url": "https://github.com/wso2/product-is/pull/10640#discussion_r533062501", "createdAt": "2020-12-01T04:17:02Z", "author": {"login": "ShanChathusanda93"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "diffHunk": "@@ -0,0 +1,760 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oidc;\n+\n+import org.apache.http.Header;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.opensaml.xml.util.Base64;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.JustInTimeProvisioningConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.xsd.*;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.carbon.identity.sso.saml.stub.types.SAMLSSOServiceProviderDTO;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.carbon.user.mgt.stub.UserAdminUserAdminException;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.application.mgt.AbstractIdentityFederationTestCase;\n+import org.wso2.identity.integration.test.oidc.bean.OIDCApplication;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.IdentityConstants;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class OIDCIdentityFederationTestCase extends AbstractIdentityFederationTestCase {\n+\n+    private static final String SAML_SSO_URL = \"http://localhost:8490/travelocity.com/samlsso?SAML2\" +\n+            \".HTTPBinding=HTTP-Redirect\";\n+    private static final String SAML_LOGOUT_URL = \"http://localhost:8490/travelocity.com/logout?SAML2\" +\n+            \".HTTPBinding=HTTP-Redirect\";\n+    private static final String USER_AGENT = \"Apache-HttpClient/4.2.5 (java 1.5)\";\n+\n+    private static final String PRIMARY_IS_SP_NAME = \"travelocity\";\n+    private static final String PRIMARY_IS_SP_INBOUND_AUTH_TYPE_SAMLSSO = \"samlsso\";\n+    private static final String PRIMARY_IS_SP_AUTHENTICATION_TYPE = \"federated\";\n+\n+    private static final String PRIMARY_IS_SAML_ISSUER_NAME = \"travelocity.com\";\n+    private static final String PRIMARY_IS_SAML_ACS_URL = \"http://localhost:8490/travelocity.com/home.jsp\";\n+    private static final String PRIMARY_IS_SAML_NAME_ID_FORMAT = \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\";\n+\n+    private static final String PRIMARY_IS_IDP_NAME = \"trustedIdP\";\n+    private static final String PRIMARY_IS_IDP_AUTHENTICATOR_NAME_OIDC = \"OpenIDConnectAuthenticator\";\n+    private static final String PRIMARY_IS_IDP_CALLBACK_URL = \"https://localhost:9853/commonauth\";\n+\n+    private static final String SECONDARY_IS_TEST_USERNAME = \"testFederatedUser\";\n+    private static final String SECONDARY_IS_TEST_PASSWORD = \"testFederatePassword\";\n+    private static final String SECONDARY_IS_TEST_USER_ROLES = \"admin\";\n+\n+    private static final String SECONDARY_IS_SP_NAME = \"secondarySP\";\n+    private static final String SECONDARY_IS_IDP_CALLBACK_URL = \"https://localhost:9854/commonauth\";\n+    private static final String SECONDARY_IS_TOKEN_ENDPOINT = \"https://localhost:9854/oauth2/token\";\n+    private static final String SECONDARY_IS_LOGOUT_ENDPOINT = \"https://localhost:9854/oidc/logout\";\n+    private static final String SECONDARY_IS_AUTHORIZE_ENDPOINT = \"https://localhost:9854/oauth2/authorize\";\n+    private static final String HTTPS_LOCALHOST_SERVICES = \"https://localhost:%s/services/\";\n+\n+    protected OauthAdminClient adminClient;\n+    private String secondaryISClientID;\n+    private String secondaryISClientSecret;\n+\n+    private static final int PORT_OFFSET_0 = 0;\n+    private static final int PORT_OFFSET_1 = 1;\n+\n+    CookieStore cookieStore;\n+    private CloseableHttpClient client;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void initTest() throws Exception {\n+\n+        super.initTest();\n+\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+\n+        super.createServiceClients(PORT_OFFSET_0, sessionCookie,\n+                new IdentityConstants.ServiceClientType[]{\n+                        IdentityConstants.ServiceClientType.APPLICATION_MANAGEMENT,\n+                        IdentityConstants.ServiceClientType.IDENTITY_PROVIDER_MGT,\n+                        IdentityConstants.ServiceClientType.SAML_SSO_CONFIG});\n+\n+        super.createServiceClients(PORT_OFFSET_1, null,\n+                new IdentityConstants.ServiceClientType[]{\n+                        IdentityConstants.ServiceClientType.APPLICATION_MANAGEMENT,\n+                        IdentityConstants.ServiceClientType.OAUTH_ADMIN});\n+\n+        createServiceProviderInSecondaryIS();\n+        createIdentityProviderInPrimaryIS();\n+        createServiceProviderInPrimaryIS();\n+\n+        cookieStore = new BasicCookieStore();\n+        client = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).build();\n+\n+        boolean userCreated = addUserToSecondaryIS();\n+        Assert.assertTrue(userCreated, \"User creation failed in secondary IS.\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void endTest() throws Exception {\n+\n+        try {\n+            super.deleteServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+            super.deleteIdentityProvider(PORT_OFFSET_0, PRIMARY_IS_IDP_NAME);\n+\n+            super.deleteServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+\n+            deleteAddedUsersInSecondaryIS();\n+\n+            client.close();\n+        } catch (Exception e) {\n+            log.error(\"Failure occured due to :\" + e.getMessage(), e);\n+            throw e;\n+        }\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated login\")\n+    public void testFederatedLogin() throws Exception {\n+\n+        String sessionDataKeyOfSecondaryISLogin = sendSAMLRequestToPrimaryIS();\n+        Assert.assertNotNull(sessionDataKeyOfSecondaryISLogin,\n+                \"Unable to acquire 'sessionDataKey' value in secondary IS\");\n+\n+        String sessionDataKeyConsentOfSecondaryIS = doAuthenticationInSecondaryIS(sessionDataKeyOfSecondaryISLogin);\n+        Assert.assertNotNull(sessionDataKeyConsentOfSecondaryIS, \"Invalid sessionDataKeyConsent.\");\n+\n+        String callbackURLOfPrimaryIS = doConsentApprovalInSecondaryIS(sessionDataKeyConsentOfSecondaryIS);\n+        Assert.assertNotNull(callbackURLOfPrimaryIS, \"Unable to acquire authorizeCallbackURL in primary IS\");\n+\n+        String samlResponse = getSAMLResponseFromPrimaryIS(callbackURLOfPrimaryIS);\n+        Assert.assertNotNull(samlResponse, \"Unable to acquire SAML response from primary IS\");\n+\n+        String decodedSAMLResponse = new String(Base64.decode(samlResponse));\n+        Assert.assertTrue(decodedSAMLResponse.contains(\"AuthnContextClassRef\"),\n+                \"AuthnContextClassRef is not received.\");\n+\n+        String homepageContent = sendSAMLResponseToWebApp(samlResponse);\n+        boolean isValidLogin = validateLoginHomePageContent(homepageContent);\n+        Assert.assertTrue(isValidLogin, \"Invalid SAML login response received by travelocity app\");\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated logout\", dependsOnMethods = {\n+            \"testFederatedLogin\"})\n+    public void testLogout() throws Exception {\n+\n+        sendLogoutRequestToPrimaryIS();\n+\n+        String samlLogoutResponseToWebapp = doLogoutConsentApprovalInSecondaryIS();\n+        Assert.assertNotNull(samlLogoutResponseToWebapp,\n+                \"Unable to acquire SAML Logout response from travelocity app\");\n+\n+        String decodedSAMLResponse = new String(Base64.decode(samlLogoutResponseToWebapp));\n+        Assert.assertNotNull(decodedSAMLResponse);\n+\n+        String logoutPageContent = sendSAMLResponseToWebApp(samlLogoutResponseToWebapp);\n+        boolean isValidLogout = validateLogoutPageContent(logoutPageContent);\n+        Assert.assertTrue(isValidLogout, \"Invalid SAML Logout response received by travelocity app\");\n+    }\n+\n+    //TODO Test case for consent denial from the federated IdP during the logout.\n+//    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated logout deny-consent\", dependsOnMethods = {\n+//            \"testFederatedLogin\"})\n+//    public void testLogoutDenyConsent() throws Exception {\n+//\n+//        sendLogoutRequestToPrimaryIS();\n+//\n+//        String consentDeniedResponseToWebapp = doLogoutConsentDenyInSecondaryIS();\n+//        Assert.assertNotNull(consentDeniedResponseToWebapp,\n+//                \"Unable to acquire logout consent deny response\");\n+//        Assert.assertTrue(consentDeniedResponseToWebapp.contains(\"oauth2_logout.do\"));\n+//    }\n+\n+    private boolean addUserToSecondaryIS() throws Exception {\n+\n+        UserManagementClient usrMgtClient = new UserManagementClient(getSecondaryISURI(), \"admin\", \"admin\");\n+        if (usrMgtClient == null) {\n+            return false;\n+        } else {\n+            String[] roles = {SECONDARY_IS_TEST_USER_ROLES};\n+            usrMgtClient.addUser(SECONDARY_IS_TEST_USERNAME, SECONDARY_IS_TEST_PASSWORD, roles, null);\n+            if (usrMgtClient.userNameExists(SECONDARY_IS_TEST_USER_ROLES, SECONDARY_IS_TEST_USERNAME)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    private void deleteAddedUsersInSecondaryIS() throws RemoteException, UserAdminUserAdminException {\n+\n+        UserManagementClient usrMgtClient = new UserManagementClient(getSecondaryISURI(), \"admin\", \"admin\");\n+        usrMgtClient.deleteUser(SECONDARY_IS_TEST_USERNAME);\n+    }\n+\n+    protected String getSecondaryISURI() {\n+\n+        return String.format(HTTPS_LOCALHOST_SERVICES, DEFAULT_PORT + PORT_OFFSET_1);\n+    }\n+\n+    public void createServiceProviderInPrimaryIS() throws Exception {\n+\n+        super.addServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+\n+        ServiceProvider serviceProvider = getServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+        Assert.assertNotNull(serviceProvider, \"Failed to create service provider 'travelocity' in primary IS\");\n+\n+        updateServiceProviderWithSAMLConfigs(PORT_OFFSET_0, PRIMARY_IS_SAML_ISSUER_NAME, PRIMARY_IS_SAML_ACS_URL,\n+                serviceProvider);\n+\n+        AuthenticationStep authStep = new AuthenticationStep();\n+        org.wso2.carbon.identity.application.common.model.xsd.IdentityProvider idP = new org.wso2.carbon.identity.\n+                application.common.model.xsd.IdentityProvider();\n+        idP.setIdentityProviderName(PRIMARY_IS_IDP_NAME);\n+        org.wso2.carbon.identity.application.common.model.xsd.FederatedAuthenticatorConfig oidcAuthnConfig = new\n+                org.wso2.carbon.identity.application.common.model.xsd.FederatedAuthenticatorConfig();\n+        oidcAuthnConfig.setName(PRIMARY_IS_IDP_AUTHENTICATOR_NAME_OIDC);\n+        oidcAuthnConfig.setDisplayName(\"openidconnect\");\n+        idP.setFederatedAuthenticatorConfigs(new org.wso2.carbon.identity.application.common.model.xsd.\n+                FederatedAuthenticatorConfig[]{oidcAuthnConfig});\n+\n+        authStep.setFederatedIdentityProviders(new org.wso2.carbon.identity.application.common.model.xsd.\n+                IdentityProvider[]{idP});\n+\n+        serviceProvider.getLocalAndOutBoundAuthenticationConfig().setAuthenticationSteps(new AuthenticationStep[]{\n+                authStep});\n+        serviceProvider.getLocalAndOutBoundAuthenticationConfig().setAuthenticationType(PRIMARY_IS_SP_AUTHENTICATION_TYPE);\n+\n+        updateServiceProvider(PORT_OFFSET_0, serviceProvider);\n+\n+        serviceProvider = getServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+\n+        InboundAuthenticationRequestConfig[] configs = serviceProvider.getInboundAuthenticationConfig().\n+                getInboundAuthenticationRequestConfigs();\n+        boolean success = false;\n+        if (configs != null) {\n+            for (InboundAuthenticationRequestConfig config : configs) {\n+                if (PRIMARY_IS_SP_INBOUND_AUTH_TYPE_SAMLSSO.equals(config.getInboundAuthType())) {\n+                    success = true;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        Assert.assertTrue(success, \"Failed to update service provider with inbound SAML2 configs in primary IS\");\n+        Assert.assertTrue(PRIMARY_IS_SP_AUTHENTICATION_TYPE.equals(serviceProvider.getLocalAndOutBoundAuthenticationConfig().\n+                getAuthenticationType()), \"Failed to update local and out bound configs in primary IS\");\n+    }\n+\n+    public void createServiceProviderInSecondaryIS() throws Exception {\n+\n+        super.addServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+\n+        ServiceProvider serviceProvider = getServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+        Assert.assertNotNull(serviceProvider, \"Failed to create service provider 'secondarySP' in secondary IS\");\n+\n+        updateServiceProviderWithOIDCConfigs(PORT_OFFSET_1, SECONDARY_IS_SP_NAME, PRIMARY_IS_IDP_CALLBACK_URL,\n+                serviceProvider);\n+\n+        super.updateServiceProvider(PORT_OFFSET_1, serviceProvider);\n+\n+        serviceProvider = getServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+\n+        InboundAuthenticationRequestConfig[] configs = serviceProvider.getInboundAuthenticationConfig().\n+                getInboundAuthenticationRequestConfigs();\n+        boolean success = false;\n+        if (configs != null) {\n+            for (InboundAuthenticationRequestConfig config : configs) {\n+                if (secondaryISClientID.equals(config.getInboundAuthKey()) && OAuth2Constant.OAUTH_2.equals(\n+                        config.getInboundAuthType())) {\n+                    success = true;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        Assert.assertTrue(success, \"Failed to update service provider with inbound OIDC configs in secondary IS\");\n+    }\n+\n+    public void createIdentityProviderInPrimaryIS() throws Exception {\n+\n+        IdentityProvider identityProvider = new IdentityProvider();\n+        identityProvider.setIdentityProviderName(PRIMARY_IS_IDP_NAME);\n+\n+        FederatedAuthenticatorConfig oidcAuthnConfig = new FederatedAuthenticatorConfig();\n+        oidcAuthnConfig.setName(PRIMARY_IS_IDP_AUTHENTICATOR_NAME_OIDC);\n+        oidcAuthnConfig.setDisplayName(\"openidconnect\");\n+        oidcAuthnConfig.setEnabled(true);\n+        oidcAuthnConfig.setProperties(getOIDCAuthnConfigProperties());\n+        identityProvider.setDefaultAuthenticatorConfig(oidcAuthnConfig);\n+        identityProvider.setFederatedAuthenticatorConfigs(new FederatedAuthenticatorConfig[]{oidcAuthnConfig});\n+\n+        JustInTimeProvisioningConfig jitConfig = new JustInTimeProvisioningConfig();\n+        jitConfig.setProvisioningEnabled(true);\n+        jitConfig.setProvisioningUserStore(\"PRIMARY\");\n+        identityProvider.setJustInTimeProvisioningConfig(jitConfig);\n+\n+        super.addIdentityProvider(PORT_OFFSET_0, identityProvider);\n+\n+        Assert.assertNotNull(getIdentityProvider(PORT_OFFSET_0, PRIMARY_IS_IDP_NAME), \"Failed to create \" +\n+                \"Identity Provider 'trustedIdP' in primary IS\");\n+    }\n+\n+    private void updateServiceProviderWithOIDCConfigs(int portOffset, String applicationName, String callbackUrl,\n+                                                      ServiceProvider serviceProvider) throws Exception {\n+\n+        OIDCApplication application = new OIDCApplication(applicationName, OAuth2Constant.TRAVELOCITY_APP_CONTEXT_ROOT,\n+                callbackUrl);\n+\n+        OAuthConsumerAppDTO appDTO = getOAuthConsumerAppDTO(application);\n+\n+        OAuthConsumerAppDTO[] appDtos = createOIDCConfiguration(portOffset, appDTO);\n+\n+        for (OAuthConsumerAppDTO appDto : appDtos) {\n+            if (appDto.getApplicationName().equals(application.getApplicationName())) {\n+                application.setClientId(appDto.getOauthConsumerKey());\n+                application.setClientSecret(appDto.getOauthConsumerSecret());\n+            }\n+        }\n+\n+        ClaimConfig claimConfig = null;\n+        if (!application.getRequiredClaims().isEmpty()) {\n+            claimConfig = new ClaimConfig();\n+            for (String claimUri : application.getRequiredClaims()) {\n+                Claim claim = new Claim();\n+                claim.setClaimUri(claimUri);\n+                ClaimMapping claimMapping = new ClaimMapping();\n+                claimMapping.setRequested(true);\n+                claimMapping.setLocalClaim(claim);\n+                claimMapping.setRemoteClaim(claim);\n+                claimConfig.addClaimMappings(claimMapping);\n+            }\n+        }\n+\n+        serviceProvider.setClaimConfig(claimConfig);\n+        serviceProvider.setOutboundProvisioningConfig(new OutboundProvisioningConfig());\n+        List<InboundAuthenticationRequestConfig> authRequestList = new ArrayList<>();\n+\n+        if (application.getClientId() != null) {\n+            InboundAuthenticationRequestConfig inboundAuthenticationRequestConfig = new\n+                    InboundAuthenticationRequestConfig();\n+            inboundAuthenticationRequestConfig.setInboundAuthKey(application.getClientId());\n+            secondaryISClientID = application.getClientId();\n+            inboundAuthenticationRequestConfig.setInboundAuthType(OAuth2Constant.OAUTH_2);\n+            if (StringUtils.isNotBlank(application.getClientSecret())) {\n+                org.wso2.carbon.identity.application.common.model.xsd.Property property = new org.wso2.carbon.identity.\n+                        application.common.model.xsd.Property();\n+                property.setName(OAuth2Constant.OAUTH_CONSUMER_SECRET);\n+                property.setValue(application.getClientSecret());\n+                secondaryISClientSecret = application.getClientSecret();\n+                org.wso2.carbon.identity.application.common.model.xsd.Property[] properties = {property};\n+                inboundAuthenticationRequestConfig.setProperties(properties);\n+            }\n+            serviceProvider.getInboundAuthenticationConfig().setInboundAuthenticationRequestConfigs(new\n+                    InboundAuthenticationRequestConfig[]{inboundAuthenticationRequestConfig});\n+            authRequestList.add(inboundAuthenticationRequestConfig);\n+        }\n+\n+        super.updateServiceProvider(PORT_OFFSET_1, serviceProvider);\n+    }\n+\n+    private OAuthConsumerAppDTO getOAuthConsumerAppDTO(OIDCApplication application) {\n+\n+        OAuthConsumerAppDTO appDTO = new OAuthConsumerAppDTO();\n+        appDTO.setApplicationName(application.getApplicationName());\n+        appDTO.setCallbackUrl(application.getCallBackURL());\n+        appDTO.setOAuthVersion(OAuth2Constant.OAUTH_VERSION_2);\n+        appDTO.setGrantTypes(\"authorization_code implicit password client_credentials refresh_token \" +\n+                \"urn:ietf:params:oauth:grant-type:saml2-bearer iwa:ntlm\");\n+\n+        return appDTO;\n+    }\n+\n+    private Property[] getOIDCAuthnConfigProperties() {\n+\n+        Property[] properties = new Property[7];\n+        Property property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.IDP_NAME);\n+        property.setValue(\"oidcFedIdP\");\n+        properties[0] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.CLIENT_ID);\n+        property.setValue(secondaryISClientID);\n+        properties[1] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.CLIENT_SECRET);\n+        property.setValue(secondaryISClientSecret);\n+        properties[2] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.OAUTH2_AUTHZ_URL);\n+        property.setValue(SECONDARY_IS_AUTHORIZE_ENDPOINT);\n+        properties[3] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.OAUTH2_TOKEN_URL);\n+        property.setValue(SECONDARY_IS_TOKEN_ENDPOINT);\n+        properties[4] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.CALLBACK_URL);\n+        property.setValue(PRIMARY_IS_IDP_CALLBACK_URL);\n+        properties[5] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.OIDC_LOGOUT_URL);\n+        property.setValue(SECONDARY_IS_LOGOUT_ENDPOINT);\n+        properties[6] = property;\n+        return properties;\n+    }\n+\n+    private void updateServiceProviderWithSAMLConfigs(int portOffset, String issuerName, String acsUrl,\n+                                                      ServiceProvider serviceProvider) throws Exception {\n+\n+        String attributeConsumingServiceIndex = super.createSAML2WebSSOConfiguration(portOffset,\n+                getSAMLSSOServiceProviderDTO(issuerName, acsUrl));\n+        Assert.assertNotNull(attributeConsumingServiceIndex, \"Failed to create SAML2 Web SSO configuration for\" +\n+                \" issuer '\" + issuerName + \"'\");\n+\n+        InboundAuthenticationRequestConfig samlAuthenticationRequestConfig = new InboundAuthenticationRequestConfig();\n+        samlAuthenticationRequestConfig.setInboundAuthKey(issuerName);\n+        samlAuthenticationRequestConfig.setInboundAuthType(PRIMARY_IS_SP_INBOUND_AUTH_TYPE_SAMLSSO);\n+        org.wso2.carbon.identity.application.common.model.xsd.Property property = new org.wso2.carbon.identity.\n+                application.common.model.xsd.Property();\n+        property.setName(\"attrConsumServiceIndex\");\n+        property.setValue(attributeConsumingServiceIndex);\n+        samlAuthenticationRequestConfig.setProperties(new org.wso2.carbon.identity.application.common.model.xsd.\n+                Property[]{property});\n+\n+        serviceProvider.getInboundAuthenticationConfig().setInboundAuthenticationRequestConfigs(new\n+                InboundAuthenticationRequestConfig[]{samlAuthenticationRequestConfig});\n+    }\n+\n+    private SAMLSSOServiceProviderDTO getSAMLSSOServiceProviderDTO(String issuerName, String acsUrl) {\n+\n+        SAMLSSOServiceProviderDTO samlssoServiceProviderDTO = new SAMLSSOServiceProviderDTO();\n+        samlssoServiceProviderDTO.setIssuer(issuerName);\n+        samlssoServiceProviderDTO.setAssertionConsumerUrls(new String[]{acsUrl});\n+        samlssoServiceProviderDTO.setDefaultAssertionConsumerUrl(acsUrl);\n+        samlssoServiceProviderDTO.setNameIDFormat(PRIMARY_IS_SAML_NAME_ID_FORMAT);\n+        samlssoServiceProviderDTO.setDoSignAssertions(true);\n+        samlssoServiceProviderDTO.setDoSignResponse(true);\n+        samlssoServiceProviderDTO.setDoSingleLogout(true);\n+        samlssoServiceProviderDTO.setEnableAttributeProfile(true);\n+        samlssoServiceProviderDTO.setEnableAttributesByDefault(true);\n+\n+        return samlssoServiceProviderDTO;\n+    }\n+\n+    private String sendSAMLRequestToPrimaryIS() throws Exception {\n+\n+        HttpGet request = new HttpGet(SAML_SSO_URL);\n+        request.setHeader(\"User-Agent\", USER_AGENT);\n+        HttpResponse response = client.execute(request);\n+        return extractValueFromResponse(response, \"name=\\\"sessionDataKey\\\"\", 1);\n+    }\n+\n+    private String doAuthenticationInSecondaryIS(String sessionDataKey) throws Exception {\n+\n+        HttpResponse response = sendLoginPost(client, sessionDataKey);\n+        Assert.assertNotNull(response, \"Login request failed. response is null.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        Assert.assertNotNull(locationHeader, \"Login response header is null.\");\n+        EntityUtils.consume(response.getEntity());\n+\n+        response = sendGetRequest(client, locationHeader.getValue());\n+        Map<String, Integer> keyPositionMap = new HashMap<>(1);\n+        keyPositionMap.put(\"name=\\\"sessionDataKeyConsent\\\"\", 1);\n+        List<DataExtractUtil.KeyValue> keyValues = DataExtractUtil.extractSessionConsentDataFromResponse(response,\n+                keyPositionMap);\n+        Assert.assertNotNull(keyValues, \"SessionDataKeyConsent key value is null.\");\n+\n+        String sessionDataKeyConsent = keyValues.get(0).getValue();\n+        EntityUtils.consume(response.getEntity());\n+\n+        return sessionDataKeyConsent;\n+    }\n+\n+    public HttpResponse sendLoginPost(HttpClient client, String sessionDataKey) throws IOException {\n+\n+        List<NameValuePair> urlParameters = new ArrayList<>();\n+        urlParameters.add(new BasicNameValuePair(\"username\", SECONDARY_IS_TEST_USERNAME));\n+        urlParameters.add(new BasicNameValuePair(\"password\", SECONDARY_IS_TEST_PASSWORD));\n+        urlParameters.add(new BasicNameValuePair(\"sessionDataKey\", sessionDataKey));\n+\n+        HttpResponse response = sendPostRequestWithParameters(client, urlParameters, SECONDARY_IS_IDP_CALLBACK_URL);\n+\n+        return response;\n+    }\n+\n+    private String doConsentApprovalInSecondaryIS(String sessionDataKeyConsent) throws Exception {\n+\n+        List<NameValuePair> consentParameters = new ArrayList<>();\n+\n+        HttpResponse response = sendApprovalPostWithConsent(client, sessionDataKeyConsent, consentParameters);\n+        Assert.assertNotNull(response, \"Approval request failed.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        EntityUtils.consume(response.getEntity());\n+\n+        String authzResponseURL = locationHeader.getValue();\n+        Assert.assertNotNull(authzResponseURL, \"Approval request failed for.\");\n+\n+        String authorizeURL = testAuthzCode(authzResponseURL);\n+        return authorizeURL;\n+    }\n+\n+    /**\n+     * Send approval post request with consent\n+     *\n+     * @param client                http client\n+     * @param sessionDataKeyConsent session consent data\n+     * @param consentClaims         claims requiring user consent\n+     * @return http response\n+     * @throws java.io.IOException\n+     */\n+    public HttpResponse sendApprovalPostWithConsent(HttpClient client, String sessionDataKeyConsent,\n+                                                    List<NameValuePair> consentClaims) throws IOException {\n+\n+        List<NameValuePair> urlParameters = new ArrayList<>();\n+        urlParameters.add(new BasicNameValuePair(\"sessionDataKeyConsent\", sessionDataKeyConsent));\n+        urlParameters.add(new BasicNameValuePair(\"scope-approval\", \"approve\"));\n+        urlParameters.add(new BasicNameValuePair(\"user_claims_consent\", \"true\"));\n+        urlParameters.add(new BasicNameValuePair(\"consent_select_all\", \"on\"));\n+        urlParameters.add(new BasicNameValuePair(\"consent_0\", \"on\"));\n+        urlParameters.add(new BasicNameValuePair(\"consent\", \"approve\"));\n+\n+        if (consentClaims != null) {\n+            urlParameters.addAll(consentClaims);\n+        }\n+\n+        HttpResponse response = sendPostRequestWithParameters(client, urlParameters, SECONDARY_IS_AUTHORIZE_ENDPOINT);\n+        return response;\n+    }\n+\n+    private String testAuthzCode(String authzResponseURL) throws Exception {\n+\n+        HttpClient httpClientWithoutAutoRedirections = HttpClientBuilder.create().disableRedirectHandling()\n+                .setDefaultCookieStore(cookieStore).build();\n+\n+        HttpResponse response = sendGetRequest(httpClientWithoutAutoRedirections, authzResponseURL);\n+        Assert.assertNotNull(response, \"Authorization code response to primary IS is invalid.\");\n+\n+        String locationHeader = getHeaderValue(response, \"Location\");\n+        Assert.assertNotNull(locationHeader, \"locationHeader not found in response.\");\n+\n+        String pastrCookie = Utils.getPastreCookie(response);\n+        Assert.assertNotNull(pastrCookie, \"pastr cookie not found in response.\");\n+\n+        if (Utils.requestMissingClaims(response)) {\n+            locationHeader = handleMissingClaims(response, locationHeader, client, pastrCookie);\n+            Assert.assertNotNull(locationHeader, \"locationHeader not found in response.\");\n+        }\n+\n+        return locationHeader;\n+    }\n+\n+    private String handleMissingClaims(HttpResponse response, String locationHeader, HttpClient client, String\n+            pastrCookie) throws Exception {\n+\n+        EntityUtils.consume(response.getEntity());\n+\n+        response = Utils.sendPOSTConsentMessage(response, PRIMARY_IS_IDP_CALLBACK_URL, USER_AGENT, locationHeader,\n+                client, pastrCookie);\n+        EntityUtils.consume(response.getEntity());\n+\n+        return getHeaderValue(response, \"Location\");\n+    }\n+\n+    private String getSAMLResponseFromPrimaryIS(String callbackURL) throws IOException {\n+\n+        HttpResponse response = sendGetRequest(client, callbackURL);\n+        return extractValueFromResponse(response, \"SAMLResponse\", 5);\n+    }\n+\n+    private String sendSAMLResponseToWebApp(String samlResponse)\n+            throws Exception {\n+\n+        HttpResponse response = getHttpResponseWebApp(samlResponse);\n+\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n+        StringBuffer buffer = new StringBuffer();\n+        String line = \"\";\n+        while ((line = bufferedReader.readLine()) != null) {\n+            buffer.append(line);\n+        }\n+        bufferedReader.close();\n+\n+        return buffer.toString();\n+    }\n+\n+    private HttpResponse getHttpResponseWebApp(String samlResponse) throws IOException {\n+\n+        HttpPost request = new HttpPost(PRIMARY_IS_SAML_ACS_URL);\n+        request.setHeader(\"User-Agent\", USER_AGENT);\n+        List<NameValuePair> urlParameters = new ArrayList<NameValuePair>();\n+        urlParameters.add(new BasicNameValuePair(\"SAMLResponse\", samlResponse));\n+        request.setEntity(new UrlEncodedFormEntity(urlParameters));\n+        return client.execute(request);\n+    }\n+\n+    public boolean validateLoginHomePageContent(String homepageContent) {\n+\n+        return homepageContent.contains(\"You are logged in as \" + SECONDARY_IS_TEST_USERNAME);\n+    }\n+\n+    private HttpResponse sendLogoutRequestToPrimaryIS() throws IOException {\n+\n+        HttpResponse response = sendGetRequest(client, SAML_LOGOUT_URL);\n+        EntityUtils.consume(response.getEntity());\n+        Assert.assertNotNull(response);\n+        return response;\n+    }\n+\n+    private String doLogoutConsentApprovalInSecondaryIS() throws Exception {\n+\n+        HttpResponse response = sendLogoutApprovalPostWithConsent(client);\n+        Assert.assertNotNull(response, \"Approval request failed.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        Assert.assertNotNull(locationHeader, \"Approval request failed for.\");\n+        EntityUtils.consume(response.getEntity());\n+\n+        String logoutResponseToPrimaryIS = locationHeader.getValue();\n+\n+        response = sendGetRequest(client, logoutResponseToPrimaryIS);\n+        return extractValueFromResponse(response, \"SAMLResponse\", 5);\n+    }\n+\n+    private String doLogoutConsentDenyInSecondaryIS() throws Exception {\n+\n+        HttpResponse response = sendLogoutDenyPostWithConsent(client);\n+        Assert.assertNotNull(response, \"Approval request failed.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        Assert.assertNotNull(locationHeader, \"Approval request failed for.\");\n+        EntityUtils.consume(response.getEntity());\n+\n+        return locationHeader.getValue();\n+    }\n+\n+    private boolean validateLogoutPageContent(String logoutPageContent) {\n+\n+        return logoutPageContent.contains(\"location.href = \\\"index.jsp\\\"\");\n+    }\n+\n+    /**\n+     * Send post request with parameters\n+     *\n+     * @param client\n+     * @param urlParameters\n+     * @param url\n+     * @return\n+     * @throws ClientProtocolException\n+     * @throws java.io.IOException\n+     */\n+    public HttpResponse sendPostRequestWithParameters(HttpClient client, List<NameValuePair> urlParameters, String url)\n+            throws ClientProtocolException, IOException {\n+\n+        HttpPost request = new HttpPost(url);\n+        request.setHeader(\"User-Agent\", OAuth2Constant.USER_AGENT);\n+        request.setEntity(new UrlEncodedFormEntity(urlParameters));\n+\n+        HttpResponse response = client.execute(request);\n+        return response;\n+    }\n+\n+    /**\n+     * Send Get request\n+     *\n+     * @param locationURL - Get url location\n+     * @return http response\n+     * @throws ClientProtocolException\n+     * @throws java.io.IOException\n+     */\n+    public HttpResponse sendGetRequest(HttpClient client, String locationURL) throws ClientProtocolException,\n+            IOException {\n+\n+        HttpGet getRequest = new HttpGet(locationURL);\n+        getRequest.addHeader(\"User-Agent\", OAuth2Constant.USER_AGENT);\n+        HttpResponse response = client.execute(getRequest);\n+\n+        return response;\n+    }\n+\n+    public HttpResponse sendLogoutApprovalPostWithConsent(HttpClient client) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e5d07fe8109ecc39a8280bb8968e5b27c6941c"}, "originalPosition": 724}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwODM1Ng==", "bodyText": "Addressed with 1b721f3.", "url": "https://github.com/wso2/product-is/pull/10640#discussion_r533108356", "createdAt": "2020-12-01T06:52:05Z", "author": {"login": "chamathns"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "diffHunk": "@@ -0,0 +1,760 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oidc;\n+\n+import org.apache.http.Header;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.opensaml.xml.util.Base64;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.JustInTimeProvisioningConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.xsd.*;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.carbon.identity.sso.saml.stub.types.SAMLSSOServiceProviderDTO;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.carbon.user.mgt.stub.UserAdminUserAdminException;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.application.mgt.AbstractIdentityFederationTestCase;\n+import org.wso2.identity.integration.test.oidc.bean.OIDCApplication;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.IdentityConstants;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class OIDCIdentityFederationTestCase extends AbstractIdentityFederationTestCase {\n+\n+    private static final String SAML_SSO_URL = \"http://localhost:8490/travelocity.com/samlsso?SAML2\" +\n+            \".HTTPBinding=HTTP-Redirect\";\n+    private static final String SAML_LOGOUT_URL = \"http://localhost:8490/travelocity.com/logout?SAML2\" +\n+            \".HTTPBinding=HTTP-Redirect\";\n+    private static final String USER_AGENT = \"Apache-HttpClient/4.2.5 (java 1.5)\";\n+\n+    private static final String PRIMARY_IS_SP_NAME = \"travelocity\";\n+    private static final String PRIMARY_IS_SP_INBOUND_AUTH_TYPE_SAMLSSO = \"samlsso\";\n+    private static final String PRIMARY_IS_SP_AUTHENTICATION_TYPE = \"federated\";\n+\n+    private static final String PRIMARY_IS_SAML_ISSUER_NAME = \"travelocity.com\";\n+    private static final String PRIMARY_IS_SAML_ACS_URL = \"http://localhost:8490/travelocity.com/home.jsp\";\n+    private static final String PRIMARY_IS_SAML_NAME_ID_FORMAT = \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\";\n+\n+    private static final String PRIMARY_IS_IDP_NAME = \"trustedIdP\";\n+    private static final String PRIMARY_IS_IDP_AUTHENTICATOR_NAME_OIDC = \"OpenIDConnectAuthenticator\";\n+    private static final String PRIMARY_IS_IDP_CALLBACK_URL = \"https://localhost:9853/commonauth\";\n+\n+    private static final String SECONDARY_IS_TEST_USERNAME = \"testFederatedUser\";\n+    private static final String SECONDARY_IS_TEST_PASSWORD = \"testFederatePassword\";\n+    private static final String SECONDARY_IS_TEST_USER_ROLES = \"admin\";\n+\n+    private static final String SECONDARY_IS_SP_NAME = \"secondarySP\";\n+    private static final String SECONDARY_IS_IDP_CALLBACK_URL = \"https://localhost:9854/commonauth\";\n+    private static final String SECONDARY_IS_TOKEN_ENDPOINT = \"https://localhost:9854/oauth2/token\";\n+    private static final String SECONDARY_IS_LOGOUT_ENDPOINT = \"https://localhost:9854/oidc/logout\";\n+    private static final String SECONDARY_IS_AUTHORIZE_ENDPOINT = \"https://localhost:9854/oauth2/authorize\";\n+    private static final String HTTPS_LOCALHOST_SERVICES = \"https://localhost:%s/services/\";\n+\n+    protected OauthAdminClient adminClient;\n+    private String secondaryISClientID;\n+    private String secondaryISClientSecret;\n+\n+    private static final int PORT_OFFSET_0 = 0;\n+    private static final int PORT_OFFSET_1 = 1;\n+\n+    CookieStore cookieStore;\n+    private CloseableHttpClient client;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void initTest() throws Exception {\n+\n+        super.initTest();\n+\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+\n+        super.createServiceClients(PORT_OFFSET_0, sessionCookie,\n+                new IdentityConstants.ServiceClientType[]{\n+                        IdentityConstants.ServiceClientType.APPLICATION_MANAGEMENT,\n+                        IdentityConstants.ServiceClientType.IDENTITY_PROVIDER_MGT,\n+                        IdentityConstants.ServiceClientType.SAML_SSO_CONFIG});\n+\n+        super.createServiceClients(PORT_OFFSET_1, null,\n+                new IdentityConstants.ServiceClientType[]{\n+                        IdentityConstants.ServiceClientType.APPLICATION_MANAGEMENT,\n+                        IdentityConstants.ServiceClientType.OAUTH_ADMIN});\n+\n+        createServiceProviderInSecondaryIS();\n+        createIdentityProviderInPrimaryIS();\n+        createServiceProviderInPrimaryIS();\n+\n+        cookieStore = new BasicCookieStore();\n+        client = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).build();\n+\n+        boolean userCreated = addUserToSecondaryIS();\n+        Assert.assertTrue(userCreated, \"User creation failed in secondary IS.\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void endTest() throws Exception {\n+\n+        try {\n+            super.deleteServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+            super.deleteIdentityProvider(PORT_OFFSET_0, PRIMARY_IS_IDP_NAME);\n+\n+            super.deleteServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+\n+            deleteAddedUsersInSecondaryIS();\n+\n+            client.close();\n+        } catch (Exception e) {\n+            log.error(\"Failure occured due to :\" + e.getMessage(), e);\n+            throw e;\n+        }\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated login\")\n+    public void testFederatedLogin() throws Exception {\n+\n+        String sessionDataKeyOfSecondaryISLogin = sendSAMLRequestToPrimaryIS();\n+        Assert.assertNotNull(sessionDataKeyOfSecondaryISLogin,\n+                \"Unable to acquire 'sessionDataKey' value in secondary IS\");\n+\n+        String sessionDataKeyConsentOfSecondaryIS = doAuthenticationInSecondaryIS(sessionDataKeyOfSecondaryISLogin);\n+        Assert.assertNotNull(sessionDataKeyConsentOfSecondaryIS, \"Invalid sessionDataKeyConsent.\");\n+\n+        String callbackURLOfPrimaryIS = doConsentApprovalInSecondaryIS(sessionDataKeyConsentOfSecondaryIS);\n+        Assert.assertNotNull(callbackURLOfPrimaryIS, \"Unable to acquire authorizeCallbackURL in primary IS\");\n+\n+        String samlResponse = getSAMLResponseFromPrimaryIS(callbackURLOfPrimaryIS);\n+        Assert.assertNotNull(samlResponse, \"Unable to acquire SAML response from primary IS\");\n+\n+        String decodedSAMLResponse = new String(Base64.decode(samlResponse));\n+        Assert.assertTrue(decodedSAMLResponse.contains(\"AuthnContextClassRef\"),\n+                \"AuthnContextClassRef is not received.\");\n+\n+        String homepageContent = sendSAMLResponseToWebApp(samlResponse);\n+        boolean isValidLogin = validateLoginHomePageContent(homepageContent);\n+        Assert.assertTrue(isValidLogin, \"Invalid SAML login response received by travelocity app\");\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated logout\", dependsOnMethods = {\n+            \"testFederatedLogin\"})\n+    public void testLogout() throws Exception {\n+\n+        sendLogoutRequestToPrimaryIS();\n+\n+        String samlLogoutResponseToWebapp = doLogoutConsentApprovalInSecondaryIS();\n+        Assert.assertNotNull(samlLogoutResponseToWebapp,\n+                \"Unable to acquire SAML Logout response from travelocity app\");\n+\n+        String decodedSAMLResponse = new String(Base64.decode(samlLogoutResponseToWebapp));\n+        Assert.assertNotNull(decodedSAMLResponse);\n+\n+        String logoutPageContent = sendSAMLResponseToWebApp(samlLogoutResponseToWebapp);\n+        boolean isValidLogout = validateLogoutPageContent(logoutPageContent);\n+        Assert.assertTrue(isValidLogout, \"Invalid SAML Logout response received by travelocity app\");\n+    }\n+\n+    //TODO Test case for consent denial from the federated IdP during the logout.\n+//    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated logout deny-consent\", dependsOnMethods = {\n+//            \"testFederatedLogin\"})\n+//    public void testLogoutDenyConsent() throws Exception {\n+//\n+//        sendLogoutRequestToPrimaryIS();\n+//\n+//        String consentDeniedResponseToWebapp = doLogoutConsentDenyInSecondaryIS();\n+//        Assert.assertNotNull(consentDeniedResponseToWebapp,\n+//                \"Unable to acquire logout consent deny response\");\n+//        Assert.assertTrue(consentDeniedResponseToWebapp.contains(\"oauth2_logout.do\"));\n+//    }\n+\n+    private boolean addUserToSecondaryIS() throws Exception {\n+\n+        UserManagementClient usrMgtClient = new UserManagementClient(getSecondaryISURI(), \"admin\", \"admin\");\n+        if (usrMgtClient == null) {\n+            return false;\n+        } else {\n+            String[] roles = {SECONDARY_IS_TEST_USER_ROLES};\n+            usrMgtClient.addUser(SECONDARY_IS_TEST_USERNAME, SECONDARY_IS_TEST_PASSWORD, roles, null);\n+            if (usrMgtClient.userNameExists(SECONDARY_IS_TEST_USER_ROLES, SECONDARY_IS_TEST_USERNAME)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    private void deleteAddedUsersInSecondaryIS() throws RemoteException, UserAdminUserAdminException {\n+\n+        UserManagementClient usrMgtClient = new UserManagementClient(getSecondaryISURI(), \"admin\", \"admin\");\n+        usrMgtClient.deleteUser(SECONDARY_IS_TEST_USERNAME);\n+    }\n+\n+    protected String getSecondaryISURI() {\n+\n+        return String.format(HTTPS_LOCALHOST_SERVICES, DEFAULT_PORT + PORT_OFFSET_1);\n+    }\n+\n+    public void createServiceProviderInPrimaryIS() throws Exception {\n+\n+        super.addServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+\n+        ServiceProvider serviceProvider = getServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+        Assert.assertNotNull(serviceProvider, \"Failed to create service provider 'travelocity' in primary IS\");\n+\n+        updateServiceProviderWithSAMLConfigs(PORT_OFFSET_0, PRIMARY_IS_SAML_ISSUER_NAME, PRIMARY_IS_SAML_ACS_URL,\n+                serviceProvider);\n+\n+        AuthenticationStep authStep = new AuthenticationStep();\n+        org.wso2.carbon.identity.application.common.model.xsd.IdentityProvider idP = new org.wso2.carbon.identity.\n+                application.common.model.xsd.IdentityProvider();\n+        idP.setIdentityProviderName(PRIMARY_IS_IDP_NAME);\n+        org.wso2.carbon.identity.application.common.model.xsd.FederatedAuthenticatorConfig oidcAuthnConfig = new\n+                org.wso2.carbon.identity.application.common.model.xsd.FederatedAuthenticatorConfig();\n+        oidcAuthnConfig.setName(PRIMARY_IS_IDP_AUTHENTICATOR_NAME_OIDC);\n+        oidcAuthnConfig.setDisplayName(\"openidconnect\");\n+        idP.setFederatedAuthenticatorConfigs(new org.wso2.carbon.identity.application.common.model.xsd.\n+                FederatedAuthenticatorConfig[]{oidcAuthnConfig});\n+\n+        authStep.setFederatedIdentityProviders(new org.wso2.carbon.identity.application.common.model.xsd.\n+                IdentityProvider[]{idP});\n+\n+        serviceProvider.getLocalAndOutBoundAuthenticationConfig().setAuthenticationSteps(new AuthenticationStep[]{\n+                authStep});\n+        serviceProvider.getLocalAndOutBoundAuthenticationConfig().setAuthenticationType(PRIMARY_IS_SP_AUTHENTICATION_TYPE);\n+\n+        updateServiceProvider(PORT_OFFSET_0, serviceProvider);\n+\n+        serviceProvider = getServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+\n+        InboundAuthenticationRequestConfig[] configs = serviceProvider.getInboundAuthenticationConfig().\n+                getInboundAuthenticationRequestConfigs();\n+        boolean success = false;\n+        if (configs != null) {\n+            for (InboundAuthenticationRequestConfig config : configs) {\n+                if (PRIMARY_IS_SP_INBOUND_AUTH_TYPE_SAMLSSO.equals(config.getInboundAuthType())) {\n+                    success = true;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        Assert.assertTrue(success, \"Failed to update service provider with inbound SAML2 configs in primary IS\");\n+        Assert.assertTrue(PRIMARY_IS_SP_AUTHENTICATION_TYPE.equals(serviceProvider.getLocalAndOutBoundAuthenticationConfig().\n+                getAuthenticationType()), \"Failed to update local and out bound configs in primary IS\");\n+    }\n+\n+    public void createServiceProviderInSecondaryIS() throws Exception {\n+\n+        super.addServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+\n+        ServiceProvider serviceProvider = getServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+        Assert.assertNotNull(serviceProvider, \"Failed to create service provider 'secondarySP' in secondary IS\");\n+\n+        updateServiceProviderWithOIDCConfigs(PORT_OFFSET_1, SECONDARY_IS_SP_NAME, PRIMARY_IS_IDP_CALLBACK_URL,\n+                serviceProvider);\n+\n+        super.updateServiceProvider(PORT_OFFSET_1, serviceProvider);\n+\n+        serviceProvider = getServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+\n+        InboundAuthenticationRequestConfig[] configs = serviceProvider.getInboundAuthenticationConfig().\n+                getInboundAuthenticationRequestConfigs();\n+        boolean success = false;\n+        if (configs != null) {\n+            for (InboundAuthenticationRequestConfig config : configs) {\n+                if (secondaryISClientID.equals(config.getInboundAuthKey()) && OAuth2Constant.OAUTH_2.equals(\n+                        config.getInboundAuthType())) {\n+                    success = true;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        Assert.assertTrue(success, \"Failed to update service provider with inbound OIDC configs in secondary IS\");\n+    }\n+\n+    public void createIdentityProviderInPrimaryIS() throws Exception {\n+\n+        IdentityProvider identityProvider = new IdentityProvider();\n+        identityProvider.setIdentityProviderName(PRIMARY_IS_IDP_NAME);\n+\n+        FederatedAuthenticatorConfig oidcAuthnConfig = new FederatedAuthenticatorConfig();\n+        oidcAuthnConfig.setName(PRIMARY_IS_IDP_AUTHENTICATOR_NAME_OIDC);\n+        oidcAuthnConfig.setDisplayName(\"openidconnect\");\n+        oidcAuthnConfig.setEnabled(true);\n+        oidcAuthnConfig.setProperties(getOIDCAuthnConfigProperties());\n+        identityProvider.setDefaultAuthenticatorConfig(oidcAuthnConfig);\n+        identityProvider.setFederatedAuthenticatorConfigs(new FederatedAuthenticatorConfig[]{oidcAuthnConfig});\n+\n+        JustInTimeProvisioningConfig jitConfig = new JustInTimeProvisioningConfig();\n+        jitConfig.setProvisioningEnabled(true);\n+        jitConfig.setProvisioningUserStore(\"PRIMARY\");\n+        identityProvider.setJustInTimeProvisioningConfig(jitConfig);\n+\n+        super.addIdentityProvider(PORT_OFFSET_0, identityProvider);\n+\n+        Assert.assertNotNull(getIdentityProvider(PORT_OFFSET_0, PRIMARY_IS_IDP_NAME), \"Failed to create \" +\n+                \"Identity Provider 'trustedIdP' in primary IS\");\n+    }\n+\n+    private void updateServiceProviderWithOIDCConfigs(int portOffset, String applicationName, String callbackUrl,\n+                                                      ServiceProvider serviceProvider) throws Exception {\n+\n+        OIDCApplication application = new OIDCApplication(applicationName, OAuth2Constant.TRAVELOCITY_APP_CONTEXT_ROOT,\n+                callbackUrl);\n+\n+        OAuthConsumerAppDTO appDTO = getOAuthConsumerAppDTO(application);\n+\n+        OAuthConsumerAppDTO[] appDtos = createOIDCConfiguration(portOffset, appDTO);\n+\n+        for (OAuthConsumerAppDTO appDto : appDtos) {\n+            if (appDto.getApplicationName().equals(application.getApplicationName())) {\n+                application.setClientId(appDto.getOauthConsumerKey());\n+                application.setClientSecret(appDto.getOauthConsumerSecret());\n+            }\n+        }\n+\n+        ClaimConfig claimConfig = null;\n+        if (!application.getRequiredClaims().isEmpty()) {\n+            claimConfig = new ClaimConfig();\n+            for (String claimUri : application.getRequiredClaims()) {\n+                Claim claim = new Claim();\n+                claim.setClaimUri(claimUri);\n+                ClaimMapping claimMapping = new ClaimMapping();\n+                claimMapping.setRequested(true);\n+                claimMapping.setLocalClaim(claim);\n+                claimMapping.setRemoteClaim(claim);\n+                claimConfig.addClaimMappings(claimMapping);\n+            }\n+        }\n+\n+        serviceProvider.setClaimConfig(claimConfig);\n+        serviceProvider.setOutboundProvisioningConfig(new OutboundProvisioningConfig());\n+        List<InboundAuthenticationRequestConfig> authRequestList = new ArrayList<>();\n+\n+        if (application.getClientId() != null) {\n+            InboundAuthenticationRequestConfig inboundAuthenticationRequestConfig = new\n+                    InboundAuthenticationRequestConfig();\n+            inboundAuthenticationRequestConfig.setInboundAuthKey(application.getClientId());\n+            secondaryISClientID = application.getClientId();\n+            inboundAuthenticationRequestConfig.setInboundAuthType(OAuth2Constant.OAUTH_2);\n+            if (StringUtils.isNotBlank(application.getClientSecret())) {\n+                org.wso2.carbon.identity.application.common.model.xsd.Property property = new org.wso2.carbon.identity.\n+                        application.common.model.xsd.Property();\n+                property.setName(OAuth2Constant.OAUTH_CONSUMER_SECRET);\n+                property.setValue(application.getClientSecret());\n+                secondaryISClientSecret = application.getClientSecret();\n+                org.wso2.carbon.identity.application.common.model.xsd.Property[] properties = {property};\n+                inboundAuthenticationRequestConfig.setProperties(properties);\n+            }\n+            serviceProvider.getInboundAuthenticationConfig().setInboundAuthenticationRequestConfigs(new\n+                    InboundAuthenticationRequestConfig[]{inboundAuthenticationRequestConfig});\n+            authRequestList.add(inboundAuthenticationRequestConfig);\n+        }\n+\n+        super.updateServiceProvider(PORT_OFFSET_1, serviceProvider);\n+    }\n+\n+    private OAuthConsumerAppDTO getOAuthConsumerAppDTO(OIDCApplication application) {\n+\n+        OAuthConsumerAppDTO appDTO = new OAuthConsumerAppDTO();\n+        appDTO.setApplicationName(application.getApplicationName());\n+        appDTO.setCallbackUrl(application.getCallBackURL());\n+        appDTO.setOAuthVersion(OAuth2Constant.OAUTH_VERSION_2);\n+        appDTO.setGrantTypes(\"authorization_code implicit password client_credentials refresh_token \" +\n+                \"urn:ietf:params:oauth:grant-type:saml2-bearer iwa:ntlm\");\n+\n+        return appDTO;\n+    }\n+\n+    private Property[] getOIDCAuthnConfigProperties() {\n+\n+        Property[] properties = new Property[7];\n+        Property property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.IDP_NAME);\n+        property.setValue(\"oidcFedIdP\");\n+        properties[0] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.CLIENT_ID);\n+        property.setValue(secondaryISClientID);\n+        properties[1] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.CLIENT_SECRET);\n+        property.setValue(secondaryISClientSecret);\n+        properties[2] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.OAUTH2_AUTHZ_URL);\n+        property.setValue(SECONDARY_IS_AUTHORIZE_ENDPOINT);\n+        properties[3] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.OAUTH2_TOKEN_URL);\n+        property.setValue(SECONDARY_IS_TOKEN_ENDPOINT);\n+        properties[4] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.CALLBACK_URL);\n+        property.setValue(PRIMARY_IS_IDP_CALLBACK_URL);\n+        properties[5] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.OIDC_LOGOUT_URL);\n+        property.setValue(SECONDARY_IS_LOGOUT_ENDPOINT);\n+        properties[6] = property;\n+        return properties;\n+    }\n+\n+    private void updateServiceProviderWithSAMLConfigs(int portOffset, String issuerName, String acsUrl,\n+                                                      ServiceProvider serviceProvider) throws Exception {\n+\n+        String attributeConsumingServiceIndex = super.createSAML2WebSSOConfiguration(portOffset,\n+                getSAMLSSOServiceProviderDTO(issuerName, acsUrl));\n+        Assert.assertNotNull(attributeConsumingServiceIndex, \"Failed to create SAML2 Web SSO configuration for\" +\n+                \" issuer '\" + issuerName + \"'\");\n+\n+        InboundAuthenticationRequestConfig samlAuthenticationRequestConfig = new InboundAuthenticationRequestConfig();\n+        samlAuthenticationRequestConfig.setInboundAuthKey(issuerName);\n+        samlAuthenticationRequestConfig.setInboundAuthType(PRIMARY_IS_SP_INBOUND_AUTH_TYPE_SAMLSSO);\n+        org.wso2.carbon.identity.application.common.model.xsd.Property property = new org.wso2.carbon.identity.\n+                application.common.model.xsd.Property();\n+        property.setName(\"attrConsumServiceIndex\");\n+        property.setValue(attributeConsumingServiceIndex);\n+        samlAuthenticationRequestConfig.setProperties(new org.wso2.carbon.identity.application.common.model.xsd.\n+                Property[]{property});\n+\n+        serviceProvider.getInboundAuthenticationConfig().setInboundAuthenticationRequestConfigs(new\n+                InboundAuthenticationRequestConfig[]{samlAuthenticationRequestConfig});\n+    }\n+\n+    private SAMLSSOServiceProviderDTO getSAMLSSOServiceProviderDTO(String issuerName, String acsUrl) {\n+\n+        SAMLSSOServiceProviderDTO samlssoServiceProviderDTO = new SAMLSSOServiceProviderDTO();\n+        samlssoServiceProviderDTO.setIssuer(issuerName);\n+        samlssoServiceProviderDTO.setAssertionConsumerUrls(new String[]{acsUrl});\n+        samlssoServiceProviderDTO.setDefaultAssertionConsumerUrl(acsUrl);\n+        samlssoServiceProviderDTO.setNameIDFormat(PRIMARY_IS_SAML_NAME_ID_FORMAT);\n+        samlssoServiceProviderDTO.setDoSignAssertions(true);\n+        samlssoServiceProviderDTO.setDoSignResponse(true);\n+        samlssoServiceProviderDTO.setDoSingleLogout(true);\n+        samlssoServiceProviderDTO.setEnableAttributeProfile(true);\n+        samlssoServiceProviderDTO.setEnableAttributesByDefault(true);\n+\n+        return samlssoServiceProviderDTO;\n+    }\n+\n+    private String sendSAMLRequestToPrimaryIS() throws Exception {\n+\n+        HttpGet request = new HttpGet(SAML_SSO_URL);\n+        request.setHeader(\"User-Agent\", USER_AGENT);\n+        HttpResponse response = client.execute(request);\n+        return extractValueFromResponse(response, \"name=\\\"sessionDataKey\\\"\", 1);\n+    }\n+\n+    private String doAuthenticationInSecondaryIS(String sessionDataKey) throws Exception {\n+\n+        HttpResponse response = sendLoginPost(client, sessionDataKey);\n+        Assert.assertNotNull(response, \"Login request failed. response is null.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        Assert.assertNotNull(locationHeader, \"Login response header is null.\");\n+        EntityUtils.consume(response.getEntity());\n+\n+        response = sendGetRequest(client, locationHeader.getValue());\n+        Map<String, Integer> keyPositionMap = new HashMap<>(1);\n+        keyPositionMap.put(\"name=\\\"sessionDataKeyConsent\\\"\", 1);\n+        List<DataExtractUtil.KeyValue> keyValues = DataExtractUtil.extractSessionConsentDataFromResponse(response,\n+                keyPositionMap);\n+        Assert.assertNotNull(keyValues, \"SessionDataKeyConsent key value is null.\");\n+\n+        String sessionDataKeyConsent = keyValues.get(0).getValue();\n+        EntityUtils.consume(response.getEntity());\n+\n+        return sessionDataKeyConsent;\n+    }\n+\n+    public HttpResponse sendLoginPost(HttpClient client, String sessionDataKey) throws IOException {\n+\n+        List<NameValuePair> urlParameters = new ArrayList<>();\n+        urlParameters.add(new BasicNameValuePair(\"username\", SECONDARY_IS_TEST_USERNAME));\n+        urlParameters.add(new BasicNameValuePair(\"password\", SECONDARY_IS_TEST_PASSWORD));\n+        urlParameters.add(new BasicNameValuePair(\"sessionDataKey\", sessionDataKey));\n+\n+        HttpResponse response = sendPostRequestWithParameters(client, urlParameters, SECONDARY_IS_IDP_CALLBACK_URL);\n+\n+        return response;\n+    }\n+\n+    private String doConsentApprovalInSecondaryIS(String sessionDataKeyConsent) throws Exception {\n+\n+        List<NameValuePair> consentParameters = new ArrayList<>();\n+\n+        HttpResponse response = sendApprovalPostWithConsent(client, sessionDataKeyConsent, consentParameters);\n+        Assert.assertNotNull(response, \"Approval request failed.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        EntityUtils.consume(response.getEntity());\n+\n+        String authzResponseURL = locationHeader.getValue();\n+        Assert.assertNotNull(authzResponseURL, \"Approval request failed for.\");\n+\n+        String authorizeURL = testAuthzCode(authzResponseURL);\n+        return authorizeURL;\n+    }\n+\n+    /**\n+     * Send approval post request with consent\n+     *\n+     * @param client                http client\n+     * @param sessionDataKeyConsent session consent data\n+     * @param consentClaims         claims requiring user consent\n+     * @return http response\n+     * @throws java.io.IOException\n+     */\n+    public HttpResponse sendApprovalPostWithConsent(HttpClient client, String sessionDataKeyConsent,\n+                                                    List<NameValuePair> consentClaims) throws IOException {\n+\n+        List<NameValuePair> urlParameters = new ArrayList<>();\n+        urlParameters.add(new BasicNameValuePair(\"sessionDataKeyConsent\", sessionDataKeyConsent));\n+        urlParameters.add(new BasicNameValuePair(\"scope-approval\", \"approve\"));\n+        urlParameters.add(new BasicNameValuePair(\"user_claims_consent\", \"true\"));\n+        urlParameters.add(new BasicNameValuePair(\"consent_select_all\", \"on\"));\n+        urlParameters.add(new BasicNameValuePair(\"consent_0\", \"on\"));\n+        urlParameters.add(new BasicNameValuePair(\"consent\", \"approve\"));\n+\n+        if (consentClaims != null) {\n+            urlParameters.addAll(consentClaims);\n+        }\n+\n+        HttpResponse response = sendPostRequestWithParameters(client, urlParameters, SECONDARY_IS_AUTHORIZE_ENDPOINT);\n+        return response;\n+    }\n+\n+    private String testAuthzCode(String authzResponseURL) throws Exception {\n+\n+        HttpClient httpClientWithoutAutoRedirections = HttpClientBuilder.create().disableRedirectHandling()\n+                .setDefaultCookieStore(cookieStore).build();\n+\n+        HttpResponse response = sendGetRequest(httpClientWithoutAutoRedirections, authzResponseURL);\n+        Assert.assertNotNull(response, \"Authorization code response to primary IS is invalid.\");\n+\n+        String locationHeader = getHeaderValue(response, \"Location\");\n+        Assert.assertNotNull(locationHeader, \"locationHeader not found in response.\");\n+\n+        String pastrCookie = Utils.getPastreCookie(response);\n+        Assert.assertNotNull(pastrCookie, \"pastr cookie not found in response.\");\n+\n+        if (Utils.requestMissingClaims(response)) {\n+            locationHeader = handleMissingClaims(response, locationHeader, client, pastrCookie);\n+            Assert.assertNotNull(locationHeader, \"locationHeader not found in response.\");\n+        }\n+\n+        return locationHeader;\n+    }\n+\n+    private String handleMissingClaims(HttpResponse response, String locationHeader, HttpClient client, String\n+            pastrCookie) throws Exception {\n+\n+        EntityUtils.consume(response.getEntity());\n+\n+        response = Utils.sendPOSTConsentMessage(response, PRIMARY_IS_IDP_CALLBACK_URL, USER_AGENT, locationHeader,\n+                client, pastrCookie);\n+        EntityUtils.consume(response.getEntity());\n+\n+        return getHeaderValue(response, \"Location\");\n+    }\n+\n+    private String getSAMLResponseFromPrimaryIS(String callbackURL) throws IOException {\n+\n+        HttpResponse response = sendGetRequest(client, callbackURL);\n+        return extractValueFromResponse(response, \"SAMLResponse\", 5);\n+    }\n+\n+    private String sendSAMLResponseToWebApp(String samlResponse)\n+            throws Exception {\n+\n+        HttpResponse response = getHttpResponseWebApp(samlResponse);\n+\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n+        StringBuffer buffer = new StringBuffer();\n+        String line = \"\";\n+        while ((line = bufferedReader.readLine()) != null) {\n+            buffer.append(line);\n+        }\n+        bufferedReader.close();\n+\n+        return buffer.toString();\n+    }\n+\n+    private HttpResponse getHttpResponseWebApp(String samlResponse) throws IOException {\n+\n+        HttpPost request = new HttpPost(PRIMARY_IS_SAML_ACS_URL);\n+        request.setHeader(\"User-Agent\", USER_AGENT);\n+        List<NameValuePair> urlParameters = new ArrayList<NameValuePair>();\n+        urlParameters.add(new BasicNameValuePair(\"SAMLResponse\", samlResponse));\n+        request.setEntity(new UrlEncodedFormEntity(urlParameters));\n+        return client.execute(request);\n+    }\n+\n+    public boolean validateLoginHomePageContent(String homepageContent) {\n+\n+        return homepageContent.contains(\"You are logged in as \" + SECONDARY_IS_TEST_USERNAME);\n+    }\n+\n+    private HttpResponse sendLogoutRequestToPrimaryIS() throws IOException {\n+\n+        HttpResponse response = sendGetRequest(client, SAML_LOGOUT_URL);\n+        EntityUtils.consume(response.getEntity());\n+        Assert.assertNotNull(response);\n+        return response;\n+    }\n+\n+    private String doLogoutConsentApprovalInSecondaryIS() throws Exception {\n+\n+        HttpResponse response = sendLogoutApprovalPostWithConsent(client);\n+        Assert.assertNotNull(response, \"Approval request failed.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        Assert.assertNotNull(locationHeader, \"Approval request failed for.\");\n+        EntityUtils.consume(response.getEntity());\n+\n+        String logoutResponseToPrimaryIS = locationHeader.getValue();\n+\n+        response = sendGetRequest(client, logoutResponseToPrimaryIS);\n+        return extractValueFromResponse(response, \"SAMLResponse\", 5);\n+    }\n+\n+    private String doLogoutConsentDenyInSecondaryIS() throws Exception {\n+\n+        HttpResponse response = sendLogoutDenyPostWithConsent(client);\n+        Assert.assertNotNull(response, \"Approval request failed.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        Assert.assertNotNull(locationHeader, \"Approval request failed for.\");\n+        EntityUtils.consume(response.getEntity());\n+\n+        return locationHeader.getValue();\n+    }\n+\n+    private boolean validateLogoutPageContent(String logoutPageContent) {\n+\n+        return logoutPageContent.contains(\"location.href = \\\"index.jsp\\\"\");\n+    }\n+\n+    /**\n+     * Send post request with parameters\n+     *\n+     * @param client\n+     * @param urlParameters\n+     * @param url\n+     * @return\n+     * @throws ClientProtocolException\n+     * @throws java.io.IOException\n+     */\n+    public HttpResponse sendPostRequestWithParameters(HttpClient client, List<NameValuePair> urlParameters, String url)\n+            throws ClientProtocolException, IOException {\n+\n+        HttpPost request = new HttpPost(url);\n+        request.setHeader(\"User-Agent\", OAuth2Constant.USER_AGENT);\n+        request.setEntity(new UrlEncodedFormEntity(urlParameters));\n+\n+        HttpResponse response = client.execute(request);\n+        return response;\n+    }\n+\n+    /**\n+     * Send Get request\n+     *\n+     * @param locationURL - Get url location\n+     * @return http response\n+     * @throws ClientProtocolException\n+     * @throws java.io.IOException\n+     */\n+    public HttpResponse sendGetRequest(HttpClient client, String locationURL) throws ClientProtocolException,\n+            IOException {\n+\n+        HttpGet getRequest = new HttpGet(locationURL);\n+        getRequest.addHeader(\"User-Agent\", OAuth2Constant.USER_AGENT);\n+        HttpResponse response = client.execute(getRequest);\n+\n+        return response;\n+    }\n+\n+    public HttpResponse sendLogoutApprovalPostWithConsent(HttpClient client) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MjUwMQ=="}, "originalCommit": {"oid": "78e5d07fe8109ecc39a8280bb8968e5b27c6941c"}, "originalPosition": 724}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDM2Njg0OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDoxNzo0MVrOH8Xj7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjo1MTo1OFrOH8aWXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MjYzNg==", "bodyText": "Shall we add some information to this @param descriptions. WDYT?", "url": "https://github.com/wso2/product-is/pull/10640#discussion_r533062636", "createdAt": "2020-12-01T04:17:41Z", "author": {"login": "ShanChathusanda93"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "diffHunk": "@@ -0,0 +1,760 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oidc;\n+\n+import org.apache.http.Header;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.opensaml.xml.util.Base64;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.JustInTimeProvisioningConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.xsd.*;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.carbon.identity.sso.saml.stub.types.SAMLSSOServiceProviderDTO;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.carbon.user.mgt.stub.UserAdminUserAdminException;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.application.mgt.AbstractIdentityFederationTestCase;\n+import org.wso2.identity.integration.test.oidc.bean.OIDCApplication;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.IdentityConstants;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class OIDCIdentityFederationTestCase extends AbstractIdentityFederationTestCase {\n+\n+    private static final String SAML_SSO_URL = \"http://localhost:8490/travelocity.com/samlsso?SAML2\" +\n+            \".HTTPBinding=HTTP-Redirect\";\n+    private static final String SAML_LOGOUT_URL = \"http://localhost:8490/travelocity.com/logout?SAML2\" +\n+            \".HTTPBinding=HTTP-Redirect\";\n+    private static final String USER_AGENT = \"Apache-HttpClient/4.2.5 (java 1.5)\";\n+\n+    private static final String PRIMARY_IS_SP_NAME = \"travelocity\";\n+    private static final String PRIMARY_IS_SP_INBOUND_AUTH_TYPE_SAMLSSO = \"samlsso\";\n+    private static final String PRIMARY_IS_SP_AUTHENTICATION_TYPE = \"federated\";\n+\n+    private static final String PRIMARY_IS_SAML_ISSUER_NAME = \"travelocity.com\";\n+    private static final String PRIMARY_IS_SAML_ACS_URL = \"http://localhost:8490/travelocity.com/home.jsp\";\n+    private static final String PRIMARY_IS_SAML_NAME_ID_FORMAT = \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\";\n+\n+    private static final String PRIMARY_IS_IDP_NAME = \"trustedIdP\";\n+    private static final String PRIMARY_IS_IDP_AUTHENTICATOR_NAME_OIDC = \"OpenIDConnectAuthenticator\";\n+    private static final String PRIMARY_IS_IDP_CALLBACK_URL = \"https://localhost:9853/commonauth\";\n+\n+    private static final String SECONDARY_IS_TEST_USERNAME = \"testFederatedUser\";\n+    private static final String SECONDARY_IS_TEST_PASSWORD = \"testFederatePassword\";\n+    private static final String SECONDARY_IS_TEST_USER_ROLES = \"admin\";\n+\n+    private static final String SECONDARY_IS_SP_NAME = \"secondarySP\";\n+    private static final String SECONDARY_IS_IDP_CALLBACK_URL = \"https://localhost:9854/commonauth\";\n+    private static final String SECONDARY_IS_TOKEN_ENDPOINT = \"https://localhost:9854/oauth2/token\";\n+    private static final String SECONDARY_IS_LOGOUT_ENDPOINT = \"https://localhost:9854/oidc/logout\";\n+    private static final String SECONDARY_IS_AUTHORIZE_ENDPOINT = \"https://localhost:9854/oauth2/authorize\";\n+    private static final String HTTPS_LOCALHOST_SERVICES = \"https://localhost:%s/services/\";\n+\n+    protected OauthAdminClient adminClient;\n+    private String secondaryISClientID;\n+    private String secondaryISClientSecret;\n+\n+    private static final int PORT_OFFSET_0 = 0;\n+    private static final int PORT_OFFSET_1 = 1;\n+\n+    CookieStore cookieStore;\n+    private CloseableHttpClient client;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void initTest() throws Exception {\n+\n+        super.initTest();\n+\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+\n+        super.createServiceClients(PORT_OFFSET_0, sessionCookie,\n+                new IdentityConstants.ServiceClientType[]{\n+                        IdentityConstants.ServiceClientType.APPLICATION_MANAGEMENT,\n+                        IdentityConstants.ServiceClientType.IDENTITY_PROVIDER_MGT,\n+                        IdentityConstants.ServiceClientType.SAML_SSO_CONFIG});\n+\n+        super.createServiceClients(PORT_OFFSET_1, null,\n+                new IdentityConstants.ServiceClientType[]{\n+                        IdentityConstants.ServiceClientType.APPLICATION_MANAGEMENT,\n+                        IdentityConstants.ServiceClientType.OAUTH_ADMIN});\n+\n+        createServiceProviderInSecondaryIS();\n+        createIdentityProviderInPrimaryIS();\n+        createServiceProviderInPrimaryIS();\n+\n+        cookieStore = new BasicCookieStore();\n+        client = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).build();\n+\n+        boolean userCreated = addUserToSecondaryIS();\n+        Assert.assertTrue(userCreated, \"User creation failed in secondary IS.\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void endTest() throws Exception {\n+\n+        try {\n+            super.deleteServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+            super.deleteIdentityProvider(PORT_OFFSET_0, PRIMARY_IS_IDP_NAME);\n+\n+            super.deleteServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+\n+            deleteAddedUsersInSecondaryIS();\n+\n+            client.close();\n+        } catch (Exception e) {\n+            log.error(\"Failure occured due to :\" + e.getMessage(), e);\n+            throw e;\n+        }\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated login\")\n+    public void testFederatedLogin() throws Exception {\n+\n+        String sessionDataKeyOfSecondaryISLogin = sendSAMLRequestToPrimaryIS();\n+        Assert.assertNotNull(sessionDataKeyOfSecondaryISLogin,\n+                \"Unable to acquire 'sessionDataKey' value in secondary IS\");\n+\n+        String sessionDataKeyConsentOfSecondaryIS = doAuthenticationInSecondaryIS(sessionDataKeyOfSecondaryISLogin);\n+        Assert.assertNotNull(sessionDataKeyConsentOfSecondaryIS, \"Invalid sessionDataKeyConsent.\");\n+\n+        String callbackURLOfPrimaryIS = doConsentApprovalInSecondaryIS(sessionDataKeyConsentOfSecondaryIS);\n+        Assert.assertNotNull(callbackURLOfPrimaryIS, \"Unable to acquire authorizeCallbackURL in primary IS\");\n+\n+        String samlResponse = getSAMLResponseFromPrimaryIS(callbackURLOfPrimaryIS);\n+        Assert.assertNotNull(samlResponse, \"Unable to acquire SAML response from primary IS\");\n+\n+        String decodedSAMLResponse = new String(Base64.decode(samlResponse));\n+        Assert.assertTrue(decodedSAMLResponse.contains(\"AuthnContextClassRef\"),\n+                \"AuthnContextClassRef is not received.\");\n+\n+        String homepageContent = sendSAMLResponseToWebApp(samlResponse);\n+        boolean isValidLogin = validateLoginHomePageContent(homepageContent);\n+        Assert.assertTrue(isValidLogin, \"Invalid SAML login response received by travelocity app\");\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated logout\", dependsOnMethods = {\n+            \"testFederatedLogin\"})\n+    public void testLogout() throws Exception {\n+\n+        sendLogoutRequestToPrimaryIS();\n+\n+        String samlLogoutResponseToWebapp = doLogoutConsentApprovalInSecondaryIS();\n+        Assert.assertNotNull(samlLogoutResponseToWebapp,\n+                \"Unable to acquire SAML Logout response from travelocity app\");\n+\n+        String decodedSAMLResponse = new String(Base64.decode(samlLogoutResponseToWebapp));\n+        Assert.assertNotNull(decodedSAMLResponse);\n+\n+        String logoutPageContent = sendSAMLResponseToWebApp(samlLogoutResponseToWebapp);\n+        boolean isValidLogout = validateLogoutPageContent(logoutPageContent);\n+        Assert.assertTrue(isValidLogout, \"Invalid SAML Logout response received by travelocity app\");\n+    }\n+\n+    //TODO Test case for consent denial from the federated IdP during the logout.\n+//    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated logout deny-consent\", dependsOnMethods = {\n+//            \"testFederatedLogin\"})\n+//    public void testLogoutDenyConsent() throws Exception {\n+//\n+//        sendLogoutRequestToPrimaryIS();\n+//\n+//        String consentDeniedResponseToWebapp = doLogoutConsentDenyInSecondaryIS();\n+//        Assert.assertNotNull(consentDeniedResponseToWebapp,\n+//                \"Unable to acquire logout consent deny response\");\n+//        Assert.assertTrue(consentDeniedResponseToWebapp.contains(\"oauth2_logout.do\"));\n+//    }\n+\n+    private boolean addUserToSecondaryIS() throws Exception {\n+\n+        UserManagementClient usrMgtClient = new UserManagementClient(getSecondaryISURI(), \"admin\", \"admin\");\n+        if (usrMgtClient == null) {\n+            return false;\n+        } else {\n+            String[] roles = {SECONDARY_IS_TEST_USER_ROLES};\n+            usrMgtClient.addUser(SECONDARY_IS_TEST_USERNAME, SECONDARY_IS_TEST_PASSWORD, roles, null);\n+            if (usrMgtClient.userNameExists(SECONDARY_IS_TEST_USER_ROLES, SECONDARY_IS_TEST_USERNAME)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    private void deleteAddedUsersInSecondaryIS() throws RemoteException, UserAdminUserAdminException {\n+\n+        UserManagementClient usrMgtClient = new UserManagementClient(getSecondaryISURI(), \"admin\", \"admin\");\n+        usrMgtClient.deleteUser(SECONDARY_IS_TEST_USERNAME);\n+    }\n+\n+    protected String getSecondaryISURI() {\n+\n+        return String.format(HTTPS_LOCALHOST_SERVICES, DEFAULT_PORT + PORT_OFFSET_1);\n+    }\n+\n+    public void createServiceProviderInPrimaryIS() throws Exception {\n+\n+        super.addServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+\n+        ServiceProvider serviceProvider = getServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+        Assert.assertNotNull(serviceProvider, \"Failed to create service provider 'travelocity' in primary IS\");\n+\n+        updateServiceProviderWithSAMLConfigs(PORT_OFFSET_0, PRIMARY_IS_SAML_ISSUER_NAME, PRIMARY_IS_SAML_ACS_URL,\n+                serviceProvider);\n+\n+        AuthenticationStep authStep = new AuthenticationStep();\n+        org.wso2.carbon.identity.application.common.model.xsd.IdentityProvider idP = new org.wso2.carbon.identity.\n+                application.common.model.xsd.IdentityProvider();\n+        idP.setIdentityProviderName(PRIMARY_IS_IDP_NAME);\n+        org.wso2.carbon.identity.application.common.model.xsd.FederatedAuthenticatorConfig oidcAuthnConfig = new\n+                org.wso2.carbon.identity.application.common.model.xsd.FederatedAuthenticatorConfig();\n+        oidcAuthnConfig.setName(PRIMARY_IS_IDP_AUTHENTICATOR_NAME_OIDC);\n+        oidcAuthnConfig.setDisplayName(\"openidconnect\");\n+        idP.setFederatedAuthenticatorConfigs(new org.wso2.carbon.identity.application.common.model.xsd.\n+                FederatedAuthenticatorConfig[]{oidcAuthnConfig});\n+\n+        authStep.setFederatedIdentityProviders(new org.wso2.carbon.identity.application.common.model.xsd.\n+                IdentityProvider[]{idP});\n+\n+        serviceProvider.getLocalAndOutBoundAuthenticationConfig().setAuthenticationSteps(new AuthenticationStep[]{\n+                authStep});\n+        serviceProvider.getLocalAndOutBoundAuthenticationConfig().setAuthenticationType(PRIMARY_IS_SP_AUTHENTICATION_TYPE);\n+\n+        updateServiceProvider(PORT_OFFSET_0, serviceProvider);\n+\n+        serviceProvider = getServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+\n+        InboundAuthenticationRequestConfig[] configs = serviceProvider.getInboundAuthenticationConfig().\n+                getInboundAuthenticationRequestConfigs();\n+        boolean success = false;\n+        if (configs != null) {\n+            for (InboundAuthenticationRequestConfig config : configs) {\n+                if (PRIMARY_IS_SP_INBOUND_AUTH_TYPE_SAMLSSO.equals(config.getInboundAuthType())) {\n+                    success = true;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        Assert.assertTrue(success, \"Failed to update service provider with inbound SAML2 configs in primary IS\");\n+        Assert.assertTrue(PRIMARY_IS_SP_AUTHENTICATION_TYPE.equals(serviceProvider.getLocalAndOutBoundAuthenticationConfig().\n+                getAuthenticationType()), \"Failed to update local and out bound configs in primary IS\");\n+    }\n+\n+    public void createServiceProviderInSecondaryIS() throws Exception {\n+\n+        super.addServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+\n+        ServiceProvider serviceProvider = getServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+        Assert.assertNotNull(serviceProvider, \"Failed to create service provider 'secondarySP' in secondary IS\");\n+\n+        updateServiceProviderWithOIDCConfigs(PORT_OFFSET_1, SECONDARY_IS_SP_NAME, PRIMARY_IS_IDP_CALLBACK_URL,\n+                serviceProvider);\n+\n+        super.updateServiceProvider(PORT_OFFSET_1, serviceProvider);\n+\n+        serviceProvider = getServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+\n+        InboundAuthenticationRequestConfig[] configs = serviceProvider.getInboundAuthenticationConfig().\n+                getInboundAuthenticationRequestConfigs();\n+        boolean success = false;\n+        if (configs != null) {\n+            for (InboundAuthenticationRequestConfig config : configs) {\n+                if (secondaryISClientID.equals(config.getInboundAuthKey()) && OAuth2Constant.OAUTH_2.equals(\n+                        config.getInboundAuthType())) {\n+                    success = true;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        Assert.assertTrue(success, \"Failed to update service provider with inbound OIDC configs in secondary IS\");\n+    }\n+\n+    public void createIdentityProviderInPrimaryIS() throws Exception {\n+\n+        IdentityProvider identityProvider = new IdentityProvider();\n+        identityProvider.setIdentityProviderName(PRIMARY_IS_IDP_NAME);\n+\n+        FederatedAuthenticatorConfig oidcAuthnConfig = new FederatedAuthenticatorConfig();\n+        oidcAuthnConfig.setName(PRIMARY_IS_IDP_AUTHENTICATOR_NAME_OIDC);\n+        oidcAuthnConfig.setDisplayName(\"openidconnect\");\n+        oidcAuthnConfig.setEnabled(true);\n+        oidcAuthnConfig.setProperties(getOIDCAuthnConfigProperties());\n+        identityProvider.setDefaultAuthenticatorConfig(oidcAuthnConfig);\n+        identityProvider.setFederatedAuthenticatorConfigs(new FederatedAuthenticatorConfig[]{oidcAuthnConfig});\n+\n+        JustInTimeProvisioningConfig jitConfig = new JustInTimeProvisioningConfig();\n+        jitConfig.setProvisioningEnabled(true);\n+        jitConfig.setProvisioningUserStore(\"PRIMARY\");\n+        identityProvider.setJustInTimeProvisioningConfig(jitConfig);\n+\n+        super.addIdentityProvider(PORT_OFFSET_0, identityProvider);\n+\n+        Assert.assertNotNull(getIdentityProvider(PORT_OFFSET_0, PRIMARY_IS_IDP_NAME), \"Failed to create \" +\n+                \"Identity Provider 'trustedIdP' in primary IS\");\n+    }\n+\n+    private void updateServiceProviderWithOIDCConfigs(int portOffset, String applicationName, String callbackUrl,\n+                                                      ServiceProvider serviceProvider) throws Exception {\n+\n+        OIDCApplication application = new OIDCApplication(applicationName, OAuth2Constant.TRAVELOCITY_APP_CONTEXT_ROOT,\n+                callbackUrl);\n+\n+        OAuthConsumerAppDTO appDTO = getOAuthConsumerAppDTO(application);\n+\n+        OAuthConsumerAppDTO[] appDtos = createOIDCConfiguration(portOffset, appDTO);\n+\n+        for (OAuthConsumerAppDTO appDto : appDtos) {\n+            if (appDto.getApplicationName().equals(application.getApplicationName())) {\n+                application.setClientId(appDto.getOauthConsumerKey());\n+                application.setClientSecret(appDto.getOauthConsumerSecret());\n+            }\n+        }\n+\n+        ClaimConfig claimConfig = null;\n+        if (!application.getRequiredClaims().isEmpty()) {\n+            claimConfig = new ClaimConfig();\n+            for (String claimUri : application.getRequiredClaims()) {\n+                Claim claim = new Claim();\n+                claim.setClaimUri(claimUri);\n+                ClaimMapping claimMapping = new ClaimMapping();\n+                claimMapping.setRequested(true);\n+                claimMapping.setLocalClaim(claim);\n+                claimMapping.setRemoteClaim(claim);\n+                claimConfig.addClaimMappings(claimMapping);\n+            }\n+        }\n+\n+        serviceProvider.setClaimConfig(claimConfig);\n+        serviceProvider.setOutboundProvisioningConfig(new OutboundProvisioningConfig());\n+        List<InboundAuthenticationRequestConfig> authRequestList = new ArrayList<>();\n+\n+        if (application.getClientId() != null) {\n+            InboundAuthenticationRequestConfig inboundAuthenticationRequestConfig = new\n+                    InboundAuthenticationRequestConfig();\n+            inboundAuthenticationRequestConfig.setInboundAuthKey(application.getClientId());\n+            secondaryISClientID = application.getClientId();\n+            inboundAuthenticationRequestConfig.setInboundAuthType(OAuth2Constant.OAUTH_2);\n+            if (StringUtils.isNotBlank(application.getClientSecret())) {\n+                org.wso2.carbon.identity.application.common.model.xsd.Property property = new org.wso2.carbon.identity.\n+                        application.common.model.xsd.Property();\n+                property.setName(OAuth2Constant.OAUTH_CONSUMER_SECRET);\n+                property.setValue(application.getClientSecret());\n+                secondaryISClientSecret = application.getClientSecret();\n+                org.wso2.carbon.identity.application.common.model.xsd.Property[] properties = {property};\n+                inboundAuthenticationRequestConfig.setProperties(properties);\n+            }\n+            serviceProvider.getInboundAuthenticationConfig().setInboundAuthenticationRequestConfigs(new\n+                    InboundAuthenticationRequestConfig[]{inboundAuthenticationRequestConfig});\n+            authRequestList.add(inboundAuthenticationRequestConfig);\n+        }\n+\n+        super.updateServiceProvider(PORT_OFFSET_1, serviceProvider);\n+    }\n+\n+    private OAuthConsumerAppDTO getOAuthConsumerAppDTO(OIDCApplication application) {\n+\n+        OAuthConsumerAppDTO appDTO = new OAuthConsumerAppDTO();\n+        appDTO.setApplicationName(application.getApplicationName());\n+        appDTO.setCallbackUrl(application.getCallBackURL());\n+        appDTO.setOAuthVersion(OAuth2Constant.OAUTH_VERSION_2);\n+        appDTO.setGrantTypes(\"authorization_code implicit password client_credentials refresh_token \" +\n+                \"urn:ietf:params:oauth:grant-type:saml2-bearer iwa:ntlm\");\n+\n+        return appDTO;\n+    }\n+\n+    private Property[] getOIDCAuthnConfigProperties() {\n+\n+        Property[] properties = new Property[7];\n+        Property property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.IDP_NAME);\n+        property.setValue(\"oidcFedIdP\");\n+        properties[0] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.CLIENT_ID);\n+        property.setValue(secondaryISClientID);\n+        properties[1] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.CLIENT_SECRET);\n+        property.setValue(secondaryISClientSecret);\n+        properties[2] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.OAUTH2_AUTHZ_URL);\n+        property.setValue(SECONDARY_IS_AUTHORIZE_ENDPOINT);\n+        properties[3] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.OAUTH2_TOKEN_URL);\n+        property.setValue(SECONDARY_IS_TOKEN_ENDPOINT);\n+        properties[4] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.CALLBACK_URL);\n+        property.setValue(PRIMARY_IS_IDP_CALLBACK_URL);\n+        properties[5] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.OIDC_LOGOUT_URL);\n+        property.setValue(SECONDARY_IS_LOGOUT_ENDPOINT);\n+        properties[6] = property;\n+        return properties;\n+    }\n+\n+    private void updateServiceProviderWithSAMLConfigs(int portOffset, String issuerName, String acsUrl,\n+                                                      ServiceProvider serviceProvider) throws Exception {\n+\n+        String attributeConsumingServiceIndex = super.createSAML2WebSSOConfiguration(portOffset,\n+                getSAMLSSOServiceProviderDTO(issuerName, acsUrl));\n+        Assert.assertNotNull(attributeConsumingServiceIndex, \"Failed to create SAML2 Web SSO configuration for\" +\n+                \" issuer '\" + issuerName + \"'\");\n+\n+        InboundAuthenticationRequestConfig samlAuthenticationRequestConfig = new InboundAuthenticationRequestConfig();\n+        samlAuthenticationRequestConfig.setInboundAuthKey(issuerName);\n+        samlAuthenticationRequestConfig.setInboundAuthType(PRIMARY_IS_SP_INBOUND_AUTH_TYPE_SAMLSSO);\n+        org.wso2.carbon.identity.application.common.model.xsd.Property property = new org.wso2.carbon.identity.\n+                application.common.model.xsd.Property();\n+        property.setName(\"attrConsumServiceIndex\");\n+        property.setValue(attributeConsumingServiceIndex);\n+        samlAuthenticationRequestConfig.setProperties(new org.wso2.carbon.identity.application.common.model.xsd.\n+                Property[]{property});\n+\n+        serviceProvider.getInboundAuthenticationConfig().setInboundAuthenticationRequestConfigs(new\n+                InboundAuthenticationRequestConfig[]{samlAuthenticationRequestConfig});\n+    }\n+\n+    private SAMLSSOServiceProviderDTO getSAMLSSOServiceProviderDTO(String issuerName, String acsUrl) {\n+\n+        SAMLSSOServiceProviderDTO samlssoServiceProviderDTO = new SAMLSSOServiceProviderDTO();\n+        samlssoServiceProviderDTO.setIssuer(issuerName);\n+        samlssoServiceProviderDTO.setAssertionConsumerUrls(new String[]{acsUrl});\n+        samlssoServiceProviderDTO.setDefaultAssertionConsumerUrl(acsUrl);\n+        samlssoServiceProviderDTO.setNameIDFormat(PRIMARY_IS_SAML_NAME_ID_FORMAT);\n+        samlssoServiceProviderDTO.setDoSignAssertions(true);\n+        samlssoServiceProviderDTO.setDoSignResponse(true);\n+        samlssoServiceProviderDTO.setDoSingleLogout(true);\n+        samlssoServiceProviderDTO.setEnableAttributeProfile(true);\n+        samlssoServiceProviderDTO.setEnableAttributesByDefault(true);\n+\n+        return samlssoServiceProviderDTO;\n+    }\n+\n+    private String sendSAMLRequestToPrimaryIS() throws Exception {\n+\n+        HttpGet request = new HttpGet(SAML_SSO_URL);\n+        request.setHeader(\"User-Agent\", USER_AGENT);\n+        HttpResponse response = client.execute(request);\n+        return extractValueFromResponse(response, \"name=\\\"sessionDataKey\\\"\", 1);\n+    }\n+\n+    private String doAuthenticationInSecondaryIS(String sessionDataKey) throws Exception {\n+\n+        HttpResponse response = sendLoginPost(client, sessionDataKey);\n+        Assert.assertNotNull(response, \"Login request failed. response is null.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        Assert.assertNotNull(locationHeader, \"Login response header is null.\");\n+        EntityUtils.consume(response.getEntity());\n+\n+        response = sendGetRequest(client, locationHeader.getValue());\n+        Map<String, Integer> keyPositionMap = new HashMap<>(1);\n+        keyPositionMap.put(\"name=\\\"sessionDataKeyConsent\\\"\", 1);\n+        List<DataExtractUtil.KeyValue> keyValues = DataExtractUtil.extractSessionConsentDataFromResponse(response,\n+                keyPositionMap);\n+        Assert.assertNotNull(keyValues, \"SessionDataKeyConsent key value is null.\");\n+\n+        String sessionDataKeyConsent = keyValues.get(0).getValue();\n+        EntityUtils.consume(response.getEntity());\n+\n+        return sessionDataKeyConsent;\n+    }\n+\n+    public HttpResponse sendLoginPost(HttpClient client, String sessionDataKey) throws IOException {\n+\n+        List<NameValuePair> urlParameters = new ArrayList<>();\n+        urlParameters.add(new BasicNameValuePair(\"username\", SECONDARY_IS_TEST_USERNAME));\n+        urlParameters.add(new BasicNameValuePair(\"password\", SECONDARY_IS_TEST_PASSWORD));\n+        urlParameters.add(new BasicNameValuePair(\"sessionDataKey\", sessionDataKey));\n+\n+        HttpResponse response = sendPostRequestWithParameters(client, urlParameters, SECONDARY_IS_IDP_CALLBACK_URL);\n+\n+        return response;\n+    }\n+\n+    private String doConsentApprovalInSecondaryIS(String sessionDataKeyConsent) throws Exception {\n+\n+        List<NameValuePair> consentParameters = new ArrayList<>();\n+\n+        HttpResponse response = sendApprovalPostWithConsent(client, sessionDataKeyConsent, consentParameters);\n+        Assert.assertNotNull(response, \"Approval request failed.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        EntityUtils.consume(response.getEntity());\n+\n+        String authzResponseURL = locationHeader.getValue();\n+        Assert.assertNotNull(authzResponseURL, \"Approval request failed for.\");\n+\n+        String authorizeURL = testAuthzCode(authzResponseURL);\n+        return authorizeURL;\n+    }\n+\n+    /**\n+     * Send approval post request with consent\n+     *\n+     * @param client                http client\n+     * @param sessionDataKeyConsent session consent data\n+     * @param consentClaims         claims requiring user consent\n+     * @return http response\n+     * @throws java.io.IOException\n+     */\n+    public HttpResponse sendApprovalPostWithConsent(HttpClient client, String sessionDataKeyConsent,\n+                                                    List<NameValuePair> consentClaims) throws IOException {\n+\n+        List<NameValuePair> urlParameters = new ArrayList<>();\n+        urlParameters.add(new BasicNameValuePair(\"sessionDataKeyConsent\", sessionDataKeyConsent));\n+        urlParameters.add(new BasicNameValuePair(\"scope-approval\", \"approve\"));\n+        urlParameters.add(new BasicNameValuePair(\"user_claims_consent\", \"true\"));\n+        urlParameters.add(new BasicNameValuePair(\"consent_select_all\", \"on\"));\n+        urlParameters.add(new BasicNameValuePair(\"consent_0\", \"on\"));\n+        urlParameters.add(new BasicNameValuePair(\"consent\", \"approve\"));\n+\n+        if (consentClaims != null) {\n+            urlParameters.addAll(consentClaims);\n+        }\n+\n+        HttpResponse response = sendPostRequestWithParameters(client, urlParameters, SECONDARY_IS_AUTHORIZE_ENDPOINT);\n+        return response;\n+    }\n+\n+    private String testAuthzCode(String authzResponseURL) throws Exception {\n+\n+        HttpClient httpClientWithoutAutoRedirections = HttpClientBuilder.create().disableRedirectHandling()\n+                .setDefaultCookieStore(cookieStore).build();\n+\n+        HttpResponse response = sendGetRequest(httpClientWithoutAutoRedirections, authzResponseURL);\n+        Assert.assertNotNull(response, \"Authorization code response to primary IS is invalid.\");\n+\n+        String locationHeader = getHeaderValue(response, \"Location\");\n+        Assert.assertNotNull(locationHeader, \"locationHeader not found in response.\");\n+\n+        String pastrCookie = Utils.getPastreCookie(response);\n+        Assert.assertNotNull(pastrCookie, \"pastr cookie not found in response.\");\n+\n+        if (Utils.requestMissingClaims(response)) {\n+            locationHeader = handleMissingClaims(response, locationHeader, client, pastrCookie);\n+            Assert.assertNotNull(locationHeader, \"locationHeader not found in response.\");\n+        }\n+\n+        return locationHeader;\n+    }\n+\n+    private String handleMissingClaims(HttpResponse response, String locationHeader, HttpClient client, String\n+            pastrCookie) throws Exception {\n+\n+        EntityUtils.consume(response.getEntity());\n+\n+        response = Utils.sendPOSTConsentMessage(response, PRIMARY_IS_IDP_CALLBACK_URL, USER_AGENT, locationHeader,\n+                client, pastrCookie);\n+        EntityUtils.consume(response.getEntity());\n+\n+        return getHeaderValue(response, \"Location\");\n+    }\n+\n+    private String getSAMLResponseFromPrimaryIS(String callbackURL) throws IOException {\n+\n+        HttpResponse response = sendGetRequest(client, callbackURL);\n+        return extractValueFromResponse(response, \"SAMLResponse\", 5);\n+    }\n+\n+    private String sendSAMLResponseToWebApp(String samlResponse)\n+            throws Exception {\n+\n+        HttpResponse response = getHttpResponseWebApp(samlResponse);\n+\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n+        StringBuffer buffer = new StringBuffer();\n+        String line = \"\";\n+        while ((line = bufferedReader.readLine()) != null) {\n+            buffer.append(line);\n+        }\n+        bufferedReader.close();\n+\n+        return buffer.toString();\n+    }\n+\n+    private HttpResponse getHttpResponseWebApp(String samlResponse) throws IOException {\n+\n+        HttpPost request = new HttpPost(PRIMARY_IS_SAML_ACS_URL);\n+        request.setHeader(\"User-Agent\", USER_AGENT);\n+        List<NameValuePair> urlParameters = new ArrayList<NameValuePair>();\n+        urlParameters.add(new BasicNameValuePair(\"SAMLResponse\", samlResponse));\n+        request.setEntity(new UrlEncodedFormEntity(urlParameters));\n+        return client.execute(request);\n+    }\n+\n+    public boolean validateLoginHomePageContent(String homepageContent) {\n+\n+        return homepageContent.contains(\"You are logged in as \" + SECONDARY_IS_TEST_USERNAME);\n+    }\n+\n+    private HttpResponse sendLogoutRequestToPrimaryIS() throws IOException {\n+\n+        HttpResponse response = sendGetRequest(client, SAML_LOGOUT_URL);\n+        EntityUtils.consume(response.getEntity());\n+        Assert.assertNotNull(response);\n+        return response;\n+    }\n+\n+    private String doLogoutConsentApprovalInSecondaryIS() throws Exception {\n+\n+        HttpResponse response = sendLogoutApprovalPostWithConsent(client);\n+        Assert.assertNotNull(response, \"Approval request failed.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        Assert.assertNotNull(locationHeader, \"Approval request failed for.\");\n+        EntityUtils.consume(response.getEntity());\n+\n+        String logoutResponseToPrimaryIS = locationHeader.getValue();\n+\n+        response = sendGetRequest(client, logoutResponseToPrimaryIS);\n+        return extractValueFromResponse(response, \"SAMLResponse\", 5);\n+    }\n+\n+    private String doLogoutConsentDenyInSecondaryIS() throws Exception {\n+\n+        HttpResponse response = sendLogoutDenyPostWithConsent(client);\n+        Assert.assertNotNull(response, \"Approval request failed.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        Assert.assertNotNull(locationHeader, \"Approval request failed for.\");\n+        EntityUtils.consume(response.getEntity());\n+\n+        return locationHeader.getValue();\n+    }\n+\n+    private boolean validateLogoutPageContent(String logoutPageContent) {\n+\n+        return logoutPageContent.contains(\"location.href = \\\"index.jsp\\\"\");\n+    }\n+\n+    /**\n+     * Send post request with parameters\n+     *\n+     * @param client\n+     * @param urlParameters\n+     * @param url\n+     * @return\n+     * @throws ClientProtocolException\n+     * @throws java.io.IOException\n+     */\n+    public HttpResponse sendPostRequestWithParameters(HttpClient client, List<NameValuePair> urlParameters, String url)\n+            throws ClientProtocolException, IOException {\n+\n+        HttpPost request = new HttpPost(url);\n+        request.setHeader(\"User-Agent\", OAuth2Constant.USER_AGENT);\n+        request.setEntity(new UrlEncodedFormEntity(urlParameters));\n+\n+        HttpResponse response = client.execute(request);\n+        return response;\n+    }\n+\n+    /**\n+     * Send Get request\n+     *\n+     * @param locationURL - Get url location", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e5d07fe8109ecc39a8280bb8968e5b27c6941c"}, "originalPosition": 709}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwODMxOQ==", "bodyText": "Addressed with 1b721f3.", "url": "https://github.com/wso2/product-is/pull/10640#discussion_r533108319", "createdAt": "2020-12-01T06:51:58Z", "author": {"login": "chamathns"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "diffHunk": "@@ -0,0 +1,760 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oidc;\n+\n+import org.apache.http.Header;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.opensaml.xml.util.Base64;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.JustInTimeProvisioningConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.xsd.*;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.carbon.identity.sso.saml.stub.types.SAMLSSOServiceProviderDTO;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.carbon.user.mgt.stub.UserAdminUserAdminException;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.application.mgt.AbstractIdentityFederationTestCase;\n+import org.wso2.identity.integration.test.oidc.bean.OIDCApplication;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.IdentityConstants;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class OIDCIdentityFederationTestCase extends AbstractIdentityFederationTestCase {\n+\n+    private static final String SAML_SSO_URL = \"http://localhost:8490/travelocity.com/samlsso?SAML2\" +\n+            \".HTTPBinding=HTTP-Redirect\";\n+    private static final String SAML_LOGOUT_URL = \"http://localhost:8490/travelocity.com/logout?SAML2\" +\n+            \".HTTPBinding=HTTP-Redirect\";\n+    private static final String USER_AGENT = \"Apache-HttpClient/4.2.5 (java 1.5)\";\n+\n+    private static final String PRIMARY_IS_SP_NAME = \"travelocity\";\n+    private static final String PRIMARY_IS_SP_INBOUND_AUTH_TYPE_SAMLSSO = \"samlsso\";\n+    private static final String PRIMARY_IS_SP_AUTHENTICATION_TYPE = \"federated\";\n+\n+    private static final String PRIMARY_IS_SAML_ISSUER_NAME = \"travelocity.com\";\n+    private static final String PRIMARY_IS_SAML_ACS_URL = \"http://localhost:8490/travelocity.com/home.jsp\";\n+    private static final String PRIMARY_IS_SAML_NAME_ID_FORMAT = \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\";\n+\n+    private static final String PRIMARY_IS_IDP_NAME = \"trustedIdP\";\n+    private static final String PRIMARY_IS_IDP_AUTHENTICATOR_NAME_OIDC = \"OpenIDConnectAuthenticator\";\n+    private static final String PRIMARY_IS_IDP_CALLBACK_URL = \"https://localhost:9853/commonauth\";\n+\n+    private static final String SECONDARY_IS_TEST_USERNAME = \"testFederatedUser\";\n+    private static final String SECONDARY_IS_TEST_PASSWORD = \"testFederatePassword\";\n+    private static final String SECONDARY_IS_TEST_USER_ROLES = \"admin\";\n+\n+    private static final String SECONDARY_IS_SP_NAME = \"secondarySP\";\n+    private static final String SECONDARY_IS_IDP_CALLBACK_URL = \"https://localhost:9854/commonauth\";\n+    private static final String SECONDARY_IS_TOKEN_ENDPOINT = \"https://localhost:9854/oauth2/token\";\n+    private static final String SECONDARY_IS_LOGOUT_ENDPOINT = \"https://localhost:9854/oidc/logout\";\n+    private static final String SECONDARY_IS_AUTHORIZE_ENDPOINT = \"https://localhost:9854/oauth2/authorize\";\n+    private static final String HTTPS_LOCALHOST_SERVICES = \"https://localhost:%s/services/\";\n+\n+    protected OauthAdminClient adminClient;\n+    private String secondaryISClientID;\n+    private String secondaryISClientSecret;\n+\n+    private static final int PORT_OFFSET_0 = 0;\n+    private static final int PORT_OFFSET_1 = 1;\n+\n+    CookieStore cookieStore;\n+    private CloseableHttpClient client;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void initTest() throws Exception {\n+\n+        super.initTest();\n+\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+\n+        super.createServiceClients(PORT_OFFSET_0, sessionCookie,\n+                new IdentityConstants.ServiceClientType[]{\n+                        IdentityConstants.ServiceClientType.APPLICATION_MANAGEMENT,\n+                        IdentityConstants.ServiceClientType.IDENTITY_PROVIDER_MGT,\n+                        IdentityConstants.ServiceClientType.SAML_SSO_CONFIG});\n+\n+        super.createServiceClients(PORT_OFFSET_1, null,\n+                new IdentityConstants.ServiceClientType[]{\n+                        IdentityConstants.ServiceClientType.APPLICATION_MANAGEMENT,\n+                        IdentityConstants.ServiceClientType.OAUTH_ADMIN});\n+\n+        createServiceProviderInSecondaryIS();\n+        createIdentityProviderInPrimaryIS();\n+        createServiceProviderInPrimaryIS();\n+\n+        cookieStore = new BasicCookieStore();\n+        client = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).build();\n+\n+        boolean userCreated = addUserToSecondaryIS();\n+        Assert.assertTrue(userCreated, \"User creation failed in secondary IS.\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void endTest() throws Exception {\n+\n+        try {\n+            super.deleteServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+            super.deleteIdentityProvider(PORT_OFFSET_0, PRIMARY_IS_IDP_NAME);\n+\n+            super.deleteServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+\n+            deleteAddedUsersInSecondaryIS();\n+\n+            client.close();\n+        } catch (Exception e) {\n+            log.error(\"Failure occured due to :\" + e.getMessage(), e);\n+            throw e;\n+        }\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated login\")\n+    public void testFederatedLogin() throws Exception {\n+\n+        String sessionDataKeyOfSecondaryISLogin = sendSAMLRequestToPrimaryIS();\n+        Assert.assertNotNull(sessionDataKeyOfSecondaryISLogin,\n+                \"Unable to acquire 'sessionDataKey' value in secondary IS\");\n+\n+        String sessionDataKeyConsentOfSecondaryIS = doAuthenticationInSecondaryIS(sessionDataKeyOfSecondaryISLogin);\n+        Assert.assertNotNull(sessionDataKeyConsentOfSecondaryIS, \"Invalid sessionDataKeyConsent.\");\n+\n+        String callbackURLOfPrimaryIS = doConsentApprovalInSecondaryIS(sessionDataKeyConsentOfSecondaryIS);\n+        Assert.assertNotNull(callbackURLOfPrimaryIS, \"Unable to acquire authorizeCallbackURL in primary IS\");\n+\n+        String samlResponse = getSAMLResponseFromPrimaryIS(callbackURLOfPrimaryIS);\n+        Assert.assertNotNull(samlResponse, \"Unable to acquire SAML response from primary IS\");\n+\n+        String decodedSAMLResponse = new String(Base64.decode(samlResponse));\n+        Assert.assertTrue(decodedSAMLResponse.contains(\"AuthnContextClassRef\"),\n+                \"AuthnContextClassRef is not received.\");\n+\n+        String homepageContent = sendSAMLResponseToWebApp(samlResponse);\n+        boolean isValidLogin = validateLoginHomePageContent(homepageContent);\n+        Assert.assertTrue(isValidLogin, \"Invalid SAML login response received by travelocity app\");\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated logout\", dependsOnMethods = {\n+            \"testFederatedLogin\"})\n+    public void testLogout() throws Exception {\n+\n+        sendLogoutRequestToPrimaryIS();\n+\n+        String samlLogoutResponseToWebapp = doLogoutConsentApprovalInSecondaryIS();\n+        Assert.assertNotNull(samlLogoutResponseToWebapp,\n+                \"Unable to acquire SAML Logout response from travelocity app\");\n+\n+        String decodedSAMLResponse = new String(Base64.decode(samlLogoutResponseToWebapp));\n+        Assert.assertNotNull(decodedSAMLResponse);\n+\n+        String logoutPageContent = sendSAMLResponseToWebApp(samlLogoutResponseToWebapp);\n+        boolean isValidLogout = validateLogoutPageContent(logoutPageContent);\n+        Assert.assertTrue(isValidLogout, \"Invalid SAML Logout response received by travelocity app\");\n+    }\n+\n+    //TODO Test case for consent denial from the federated IdP during the logout.\n+//    @Test(groups = \"wso2.is\", description = \"Check SAML-to-OIDC federated logout deny-consent\", dependsOnMethods = {\n+//            \"testFederatedLogin\"})\n+//    public void testLogoutDenyConsent() throws Exception {\n+//\n+//        sendLogoutRequestToPrimaryIS();\n+//\n+//        String consentDeniedResponseToWebapp = doLogoutConsentDenyInSecondaryIS();\n+//        Assert.assertNotNull(consentDeniedResponseToWebapp,\n+//                \"Unable to acquire logout consent deny response\");\n+//        Assert.assertTrue(consentDeniedResponseToWebapp.contains(\"oauth2_logout.do\"));\n+//    }\n+\n+    private boolean addUserToSecondaryIS() throws Exception {\n+\n+        UserManagementClient usrMgtClient = new UserManagementClient(getSecondaryISURI(), \"admin\", \"admin\");\n+        if (usrMgtClient == null) {\n+            return false;\n+        } else {\n+            String[] roles = {SECONDARY_IS_TEST_USER_ROLES};\n+            usrMgtClient.addUser(SECONDARY_IS_TEST_USERNAME, SECONDARY_IS_TEST_PASSWORD, roles, null);\n+            if (usrMgtClient.userNameExists(SECONDARY_IS_TEST_USER_ROLES, SECONDARY_IS_TEST_USERNAME)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    private void deleteAddedUsersInSecondaryIS() throws RemoteException, UserAdminUserAdminException {\n+\n+        UserManagementClient usrMgtClient = new UserManagementClient(getSecondaryISURI(), \"admin\", \"admin\");\n+        usrMgtClient.deleteUser(SECONDARY_IS_TEST_USERNAME);\n+    }\n+\n+    protected String getSecondaryISURI() {\n+\n+        return String.format(HTTPS_LOCALHOST_SERVICES, DEFAULT_PORT + PORT_OFFSET_1);\n+    }\n+\n+    public void createServiceProviderInPrimaryIS() throws Exception {\n+\n+        super.addServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+\n+        ServiceProvider serviceProvider = getServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+        Assert.assertNotNull(serviceProvider, \"Failed to create service provider 'travelocity' in primary IS\");\n+\n+        updateServiceProviderWithSAMLConfigs(PORT_OFFSET_0, PRIMARY_IS_SAML_ISSUER_NAME, PRIMARY_IS_SAML_ACS_URL,\n+                serviceProvider);\n+\n+        AuthenticationStep authStep = new AuthenticationStep();\n+        org.wso2.carbon.identity.application.common.model.xsd.IdentityProvider idP = new org.wso2.carbon.identity.\n+                application.common.model.xsd.IdentityProvider();\n+        idP.setIdentityProviderName(PRIMARY_IS_IDP_NAME);\n+        org.wso2.carbon.identity.application.common.model.xsd.FederatedAuthenticatorConfig oidcAuthnConfig = new\n+                org.wso2.carbon.identity.application.common.model.xsd.FederatedAuthenticatorConfig();\n+        oidcAuthnConfig.setName(PRIMARY_IS_IDP_AUTHENTICATOR_NAME_OIDC);\n+        oidcAuthnConfig.setDisplayName(\"openidconnect\");\n+        idP.setFederatedAuthenticatorConfigs(new org.wso2.carbon.identity.application.common.model.xsd.\n+                FederatedAuthenticatorConfig[]{oidcAuthnConfig});\n+\n+        authStep.setFederatedIdentityProviders(new org.wso2.carbon.identity.application.common.model.xsd.\n+                IdentityProvider[]{idP});\n+\n+        serviceProvider.getLocalAndOutBoundAuthenticationConfig().setAuthenticationSteps(new AuthenticationStep[]{\n+                authStep});\n+        serviceProvider.getLocalAndOutBoundAuthenticationConfig().setAuthenticationType(PRIMARY_IS_SP_AUTHENTICATION_TYPE);\n+\n+        updateServiceProvider(PORT_OFFSET_0, serviceProvider);\n+\n+        serviceProvider = getServiceProvider(PORT_OFFSET_0, PRIMARY_IS_SP_NAME);\n+\n+        InboundAuthenticationRequestConfig[] configs = serviceProvider.getInboundAuthenticationConfig().\n+                getInboundAuthenticationRequestConfigs();\n+        boolean success = false;\n+        if (configs != null) {\n+            for (InboundAuthenticationRequestConfig config : configs) {\n+                if (PRIMARY_IS_SP_INBOUND_AUTH_TYPE_SAMLSSO.equals(config.getInboundAuthType())) {\n+                    success = true;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        Assert.assertTrue(success, \"Failed to update service provider with inbound SAML2 configs in primary IS\");\n+        Assert.assertTrue(PRIMARY_IS_SP_AUTHENTICATION_TYPE.equals(serviceProvider.getLocalAndOutBoundAuthenticationConfig().\n+                getAuthenticationType()), \"Failed to update local and out bound configs in primary IS\");\n+    }\n+\n+    public void createServiceProviderInSecondaryIS() throws Exception {\n+\n+        super.addServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+\n+        ServiceProvider serviceProvider = getServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+        Assert.assertNotNull(serviceProvider, \"Failed to create service provider 'secondarySP' in secondary IS\");\n+\n+        updateServiceProviderWithOIDCConfigs(PORT_OFFSET_1, SECONDARY_IS_SP_NAME, PRIMARY_IS_IDP_CALLBACK_URL,\n+                serviceProvider);\n+\n+        super.updateServiceProvider(PORT_OFFSET_1, serviceProvider);\n+\n+        serviceProvider = getServiceProvider(PORT_OFFSET_1, SECONDARY_IS_SP_NAME);\n+\n+        InboundAuthenticationRequestConfig[] configs = serviceProvider.getInboundAuthenticationConfig().\n+                getInboundAuthenticationRequestConfigs();\n+        boolean success = false;\n+        if (configs != null) {\n+            for (InboundAuthenticationRequestConfig config : configs) {\n+                if (secondaryISClientID.equals(config.getInboundAuthKey()) && OAuth2Constant.OAUTH_2.equals(\n+                        config.getInboundAuthType())) {\n+                    success = true;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        Assert.assertTrue(success, \"Failed to update service provider with inbound OIDC configs in secondary IS\");\n+    }\n+\n+    public void createIdentityProviderInPrimaryIS() throws Exception {\n+\n+        IdentityProvider identityProvider = new IdentityProvider();\n+        identityProvider.setIdentityProviderName(PRIMARY_IS_IDP_NAME);\n+\n+        FederatedAuthenticatorConfig oidcAuthnConfig = new FederatedAuthenticatorConfig();\n+        oidcAuthnConfig.setName(PRIMARY_IS_IDP_AUTHENTICATOR_NAME_OIDC);\n+        oidcAuthnConfig.setDisplayName(\"openidconnect\");\n+        oidcAuthnConfig.setEnabled(true);\n+        oidcAuthnConfig.setProperties(getOIDCAuthnConfigProperties());\n+        identityProvider.setDefaultAuthenticatorConfig(oidcAuthnConfig);\n+        identityProvider.setFederatedAuthenticatorConfigs(new FederatedAuthenticatorConfig[]{oidcAuthnConfig});\n+\n+        JustInTimeProvisioningConfig jitConfig = new JustInTimeProvisioningConfig();\n+        jitConfig.setProvisioningEnabled(true);\n+        jitConfig.setProvisioningUserStore(\"PRIMARY\");\n+        identityProvider.setJustInTimeProvisioningConfig(jitConfig);\n+\n+        super.addIdentityProvider(PORT_OFFSET_0, identityProvider);\n+\n+        Assert.assertNotNull(getIdentityProvider(PORT_OFFSET_0, PRIMARY_IS_IDP_NAME), \"Failed to create \" +\n+                \"Identity Provider 'trustedIdP' in primary IS\");\n+    }\n+\n+    private void updateServiceProviderWithOIDCConfigs(int portOffset, String applicationName, String callbackUrl,\n+                                                      ServiceProvider serviceProvider) throws Exception {\n+\n+        OIDCApplication application = new OIDCApplication(applicationName, OAuth2Constant.TRAVELOCITY_APP_CONTEXT_ROOT,\n+                callbackUrl);\n+\n+        OAuthConsumerAppDTO appDTO = getOAuthConsumerAppDTO(application);\n+\n+        OAuthConsumerAppDTO[] appDtos = createOIDCConfiguration(portOffset, appDTO);\n+\n+        for (OAuthConsumerAppDTO appDto : appDtos) {\n+            if (appDto.getApplicationName().equals(application.getApplicationName())) {\n+                application.setClientId(appDto.getOauthConsumerKey());\n+                application.setClientSecret(appDto.getOauthConsumerSecret());\n+            }\n+        }\n+\n+        ClaimConfig claimConfig = null;\n+        if (!application.getRequiredClaims().isEmpty()) {\n+            claimConfig = new ClaimConfig();\n+            for (String claimUri : application.getRequiredClaims()) {\n+                Claim claim = new Claim();\n+                claim.setClaimUri(claimUri);\n+                ClaimMapping claimMapping = new ClaimMapping();\n+                claimMapping.setRequested(true);\n+                claimMapping.setLocalClaim(claim);\n+                claimMapping.setRemoteClaim(claim);\n+                claimConfig.addClaimMappings(claimMapping);\n+            }\n+        }\n+\n+        serviceProvider.setClaimConfig(claimConfig);\n+        serviceProvider.setOutboundProvisioningConfig(new OutboundProvisioningConfig());\n+        List<InboundAuthenticationRequestConfig> authRequestList = new ArrayList<>();\n+\n+        if (application.getClientId() != null) {\n+            InboundAuthenticationRequestConfig inboundAuthenticationRequestConfig = new\n+                    InboundAuthenticationRequestConfig();\n+            inboundAuthenticationRequestConfig.setInboundAuthKey(application.getClientId());\n+            secondaryISClientID = application.getClientId();\n+            inboundAuthenticationRequestConfig.setInboundAuthType(OAuth2Constant.OAUTH_2);\n+            if (StringUtils.isNotBlank(application.getClientSecret())) {\n+                org.wso2.carbon.identity.application.common.model.xsd.Property property = new org.wso2.carbon.identity.\n+                        application.common.model.xsd.Property();\n+                property.setName(OAuth2Constant.OAUTH_CONSUMER_SECRET);\n+                property.setValue(application.getClientSecret());\n+                secondaryISClientSecret = application.getClientSecret();\n+                org.wso2.carbon.identity.application.common.model.xsd.Property[] properties = {property};\n+                inboundAuthenticationRequestConfig.setProperties(properties);\n+            }\n+            serviceProvider.getInboundAuthenticationConfig().setInboundAuthenticationRequestConfigs(new\n+                    InboundAuthenticationRequestConfig[]{inboundAuthenticationRequestConfig});\n+            authRequestList.add(inboundAuthenticationRequestConfig);\n+        }\n+\n+        super.updateServiceProvider(PORT_OFFSET_1, serviceProvider);\n+    }\n+\n+    private OAuthConsumerAppDTO getOAuthConsumerAppDTO(OIDCApplication application) {\n+\n+        OAuthConsumerAppDTO appDTO = new OAuthConsumerAppDTO();\n+        appDTO.setApplicationName(application.getApplicationName());\n+        appDTO.setCallbackUrl(application.getCallBackURL());\n+        appDTO.setOAuthVersion(OAuth2Constant.OAUTH_VERSION_2);\n+        appDTO.setGrantTypes(\"authorization_code implicit password client_credentials refresh_token \" +\n+                \"urn:ietf:params:oauth:grant-type:saml2-bearer iwa:ntlm\");\n+\n+        return appDTO;\n+    }\n+\n+    private Property[] getOIDCAuthnConfigProperties() {\n+\n+        Property[] properties = new Property[7];\n+        Property property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.IDP_NAME);\n+        property.setValue(\"oidcFedIdP\");\n+        properties[0] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.CLIENT_ID);\n+        property.setValue(secondaryISClientID);\n+        properties[1] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.CLIENT_SECRET);\n+        property.setValue(secondaryISClientSecret);\n+        properties[2] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.OAUTH2_AUTHZ_URL);\n+        property.setValue(SECONDARY_IS_AUTHORIZE_ENDPOINT);\n+        properties[3] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.OAUTH2_TOKEN_URL);\n+        property.setValue(SECONDARY_IS_TOKEN_ENDPOINT);\n+        properties[4] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.CALLBACK_URL);\n+        property.setValue(PRIMARY_IS_IDP_CALLBACK_URL);\n+        properties[5] = property;\n+\n+        property = new Property();\n+        property.setName(IdentityConstants.Authenticator.OIDC.OIDC_LOGOUT_URL);\n+        property.setValue(SECONDARY_IS_LOGOUT_ENDPOINT);\n+        properties[6] = property;\n+        return properties;\n+    }\n+\n+    private void updateServiceProviderWithSAMLConfigs(int portOffset, String issuerName, String acsUrl,\n+                                                      ServiceProvider serviceProvider) throws Exception {\n+\n+        String attributeConsumingServiceIndex = super.createSAML2WebSSOConfiguration(portOffset,\n+                getSAMLSSOServiceProviderDTO(issuerName, acsUrl));\n+        Assert.assertNotNull(attributeConsumingServiceIndex, \"Failed to create SAML2 Web SSO configuration for\" +\n+                \" issuer '\" + issuerName + \"'\");\n+\n+        InboundAuthenticationRequestConfig samlAuthenticationRequestConfig = new InboundAuthenticationRequestConfig();\n+        samlAuthenticationRequestConfig.setInboundAuthKey(issuerName);\n+        samlAuthenticationRequestConfig.setInboundAuthType(PRIMARY_IS_SP_INBOUND_AUTH_TYPE_SAMLSSO);\n+        org.wso2.carbon.identity.application.common.model.xsd.Property property = new org.wso2.carbon.identity.\n+                application.common.model.xsd.Property();\n+        property.setName(\"attrConsumServiceIndex\");\n+        property.setValue(attributeConsumingServiceIndex);\n+        samlAuthenticationRequestConfig.setProperties(new org.wso2.carbon.identity.application.common.model.xsd.\n+                Property[]{property});\n+\n+        serviceProvider.getInboundAuthenticationConfig().setInboundAuthenticationRequestConfigs(new\n+                InboundAuthenticationRequestConfig[]{samlAuthenticationRequestConfig});\n+    }\n+\n+    private SAMLSSOServiceProviderDTO getSAMLSSOServiceProviderDTO(String issuerName, String acsUrl) {\n+\n+        SAMLSSOServiceProviderDTO samlssoServiceProviderDTO = new SAMLSSOServiceProviderDTO();\n+        samlssoServiceProviderDTO.setIssuer(issuerName);\n+        samlssoServiceProviderDTO.setAssertionConsumerUrls(new String[]{acsUrl});\n+        samlssoServiceProviderDTO.setDefaultAssertionConsumerUrl(acsUrl);\n+        samlssoServiceProviderDTO.setNameIDFormat(PRIMARY_IS_SAML_NAME_ID_FORMAT);\n+        samlssoServiceProviderDTO.setDoSignAssertions(true);\n+        samlssoServiceProviderDTO.setDoSignResponse(true);\n+        samlssoServiceProviderDTO.setDoSingleLogout(true);\n+        samlssoServiceProviderDTO.setEnableAttributeProfile(true);\n+        samlssoServiceProviderDTO.setEnableAttributesByDefault(true);\n+\n+        return samlssoServiceProviderDTO;\n+    }\n+\n+    private String sendSAMLRequestToPrimaryIS() throws Exception {\n+\n+        HttpGet request = new HttpGet(SAML_SSO_URL);\n+        request.setHeader(\"User-Agent\", USER_AGENT);\n+        HttpResponse response = client.execute(request);\n+        return extractValueFromResponse(response, \"name=\\\"sessionDataKey\\\"\", 1);\n+    }\n+\n+    private String doAuthenticationInSecondaryIS(String sessionDataKey) throws Exception {\n+\n+        HttpResponse response = sendLoginPost(client, sessionDataKey);\n+        Assert.assertNotNull(response, \"Login request failed. response is null.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        Assert.assertNotNull(locationHeader, \"Login response header is null.\");\n+        EntityUtils.consume(response.getEntity());\n+\n+        response = sendGetRequest(client, locationHeader.getValue());\n+        Map<String, Integer> keyPositionMap = new HashMap<>(1);\n+        keyPositionMap.put(\"name=\\\"sessionDataKeyConsent\\\"\", 1);\n+        List<DataExtractUtil.KeyValue> keyValues = DataExtractUtil.extractSessionConsentDataFromResponse(response,\n+                keyPositionMap);\n+        Assert.assertNotNull(keyValues, \"SessionDataKeyConsent key value is null.\");\n+\n+        String sessionDataKeyConsent = keyValues.get(0).getValue();\n+        EntityUtils.consume(response.getEntity());\n+\n+        return sessionDataKeyConsent;\n+    }\n+\n+    public HttpResponse sendLoginPost(HttpClient client, String sessionDataKey) throws IOException {\n+\n+        List<NameValuePair> urlParameters = new ArrayList<>();\n+        urlParameters.add(new BasicNameValuePair(\"username\", SECONDARY_IS_TEST_USERNAME));\n+        urlParameters.add(new BasicNameValuePair(\"password\", SECONDARY_IS_TEST_PASSWORD));\n+        urlParameters.add(new BasicNameValuePair(\"sessionDataKey\", sessionDataKey));\n+\n+        HttpResponse response = sendPostRequestWithParameters(client, urlParameters, SECONDARY_IS_IDP_CALLBACK_URL);\n+\n+        return response;\n+    }\n+\n+    private String doConsentApprovalInSecondaryIS(String sessionDataKeyConsent) throws Exception {\n+\n+        List<NameValuePair> consentParameters = new ArrayList<>();\n+\n+        HttpResponse response = sendApprovalPostWithConsent(client, sessionDataKeyConsent, consentParameters);\n+        Assert.assertNotNull(response, \"Approval request failed.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        EntityUtils.consume(response.getEntity());\n+\n+        String authzResponseURL = locationHeader.getValue();\n+        Assert.assertNotNull(authzResponseURL, \"Approval request failed for.\");\n+\n+        String authorizeURL = testAuthzCode(authzResponseURL);\n+        return authorizeURL;\n+    }\n+\n+    /**\n+     * Send approval post request with consent\n+     *\n+     * @param client                http client\n+     * @param sessionDataKeyConsent session consent data\n+     * @param consentClaims         claims requiring user consent\n+     * @return http response\n+     * @throws java.io.IOException\n+     */\n+    public HttpResponse sendApprovalPostWithConsent(HttpClient client, String sessionDataKeyConsent,\n+                                                    List<NameValuePair> consentClaims) throws IOException {\n+\n+        List<NameValuePair> urlParameters = new ArrayList<>();\n+        urlParameters.add(new BasicNameValuePair(\"sessionDataKeyConsent\", sessionDataKeyConsent));\n+        urlParameters.add(new BasicNameValuePair(\"scope-approval\", \"approve\"));\n+        urlParameters.add(new BasicNameValuePair(\"user_claims_consent\", \"true\"));\n+        urlParameters.add(new BasicNameValuePair(\"consent_select_all\", \"on\"));\n+        urlParameters.add(new BasicNameValuePair(\"consent_0\", \"on\"));\n+        urlParameters.add(new BasicNameValuePair(\"consent\", \"approve\"));\n+\n+        if (consentClaims != null) {\n+            urlParameters.addAll(consentClaims);\n+        }\n+\n+        HttpResponse response = sendPostRequestWithParameters(client, urlParameters, SECONDARY_IS_AUTHORIZE_ENDPOINT);\n+        return response;\n+    }\n+\n+    private String testAuthzCode(String authzResponseURL) throws Exception {\n+\n+        HttpClient httpClientWithoutAutoRedirections = HttpClientBuilder.create().disableRedirectHandling()\n+                .setDefaultCookieStore(cookieStore).build();\n+\n+        HttpResponse response = sendGetRequest(httpClientWithoutAutoRedirections, authzResponseURL);\n+        Assert.assertNotNull(response, \"Authorization code response to primary IS is invalid.\");\n+\n+        String locationHeader = getHeaderValue(response, \"Location\");\n+        Assert.assertNotNull(locationHeader, \"locationHeader not found in response.\");\n+\n+        String pastrCookie = Utils.getPastreCookie(response);\n+        Assert.assertNotNull(pastrCookie, \"pastr cookie not found in response.\");\n+\n+        if (Utils.requestMissingClaims(response)) {\n+            locationHeader = handleMissingClaims(response, locationHeader, client, pastrCookie);\n+            Assert.assertNotNull(locationHeader, \"locationHeader not found in response.\");\n+        }\n+\n+        return locationHeader;\n+    }\n+\n+    private String handleMissingClaims(HttpResponse response, String locationHeader, HttpClient client, String\n+            pastrCookie) throws Exception {\n+\n+        EntityUtils.consume(response.getEntity());\n+\n+        response = Utils.sendPOSTConsentMessage(response, PRIMARY_IS_IDP_CALLBACK_URL, USER_AGENT, locationHeader,\n+                client, pastrCookie);\n+        EntityUtils.consume(response.getEntity());\n+\n+        return getHeaderValue(response, \"Location\");\n+    }\n+\n+    private String getSAMLResponseFromPrimaryIS(String callbackURL) throws IOException {\n+\n+        HttpResponse response = sendGetRequest(client, callbackURL);\n+        return extractValueFromResponse(response, \"SAMLResponse\", 5);\n+    }\n+\n+    private String sendSAMLResponseToWebApp(String samlResponse)\n+            throws Exception {\n+\n+        HttpResponse response = getHttpResponseWebApp(samlResponse);\n+\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n+        StringBuffer buffer = new StringBuffer();\n+        String line = \"\";\n+        while ((line = bufferedReader.readLine()) != null) {\n+            buffer.append(line);\n+        }\n+        bufferedReader.close();\n+\n+        return buffer.toString();\n+    }\n+\n+    private HttpResponse getHttpResponseWebApp(String samlResponse) throws IOException {\n+\n+        HttpPost request = new HttpPost(PRIMARY_IS_SAML_ACS_URL);\n+        request.setHeader(\"User-Agent\", USER_AGENT);\n+        List<NameValuePair> urlParameters = new ArrayList<NameValuePair>();\n+        urlParameters.add(new BasicNameValuePair(\"SAMLResponse\", samlResponse));\n+        request.setEntity(new UrlEncodedFormEntity(urlParameters));\n+        return client.execute(request);\n+    }\n+\n+    public boolean validateLoginHomePageContent(String homepageContent) {\n+\n+        return homepageContent.contains(\"You are logged in as \" + SECONDARY_IS_TEST_USERNAME);\n+    }\n+\n+    private HttpResponse sendLogoutRequestToPrimaryIS() throws IOException {\n+\n+        HttpResponse response = sendGetRequest(client, SAML_LOGOUT_URL);\n+        EntityUtils.consume(response.getEntity());\n+        Assert.assertNotNull(response);\n+        return response;\n+    }\n+\n+    private String doLogoutConsentApprovalInSecondaryIS() throws Exception {\n+\n+        HttpResponse response = sendLogoutApprovalPostWithConsent(client);\n+        Assert.assertNotNull(response, \"Approval request failed.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        Assert.assertNotNull(locationHeader, \"Approval request failed for.\");\n+        EntityUtils.consume(response.getEntity());\n+\n+        String logoutResponseToPrimaryIS = locationHeader.getValue();\n+\n+        response = sendGetRequest(client, logoutResponseToPrimaryIS);\n+        return extractValueFromResponse(response, \"SAMLResponse\", 5);\n+    }\n+\n+    private String doLogoutConsentDenyInSecondaryIS() throws Exception {\n+\n+        HttpResponse response = sendLogoutDenyPostWithConsent(client);\n+        Assert.assertNotNull(response, \"Approval request failed.\");\n+\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        Assert.assertNotNull(locationHeader, \"Approval request failed for.\");\n+        EntityUtils.consume(response.getEntity());\n+\n+        return locationHeader.getValue();\n+    }\n+\n+    private boolean validateLogoutPageContent(String logoutPageContent) {\n+\n+        return logoutPageContent.contains(\"location.href = \\\"index.jsp\\\"\");\n+    }\n+\n+    /**\n+     * Send post request with parameters\n+     *\n+     * @param client\n+     * @param urlParameters\n+     * @param url\n+     * @return\n+     * @throws ClientProtocolException\n+     * @throws java.io.IOException\n+     */\n+    public HttpResponse sendPostRequestWithParameters(HttpClient client, List<NameValuePair> urlParameters, String url)\n+            throws ClientProtocolException, IOException {\n+\n+        HttpPost request = new HttpPost(url);\n+        request.setHeader(\"User-Agent\", OAuth2Constant.USER_AGENT);\n+        request.setEntity(new UrlEncodedFormEntity(urlParameters));\n+\n+        HttpResponse response = client.execute(request);\n+        return response;\n+    }\n+\n+    /**\n+     * Send Get request\n+     *\n+     * @param locationURL - Get url location", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MjYzNg=="}, "originalCommit": {"oid": "78e5d07fe8109ecc39a8280bb8968e5b27c6941c"}, "originalPosition": 709}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDM3NTk4OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDoyMjoyOFrOH8Xo-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjo1MTo1M1rOH8aWSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MzkzMQ==", "bodyText": "remove * imports", "url": "https://github.com/wso2/product-is/pull/10640#discussion_r533063931", "createdAt": "2020-12-01T04:22:28Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "diffHunk": "@@ -0,0 +1,760 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oidc;\n+\n+import org.apache.http.Header;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.opensaml.xml.util.Base64;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.JustInTimeProvisioningConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.xsd.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e5d07fe8109ecc39a8280bb8968e5b27c6941c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwODI5Nw==", "bodyText": "Addressed with 1b721f3.", "url": "https://github.com/wso2/product-is/pull/10640#discussion_r533108297", "createdAt": "2020-12-01T06:51:53Z", "author": {"login": "chamathns"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "diffHunk": "@@ -0,0 +1,760 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oidc;\n+\n+import org.apache.http.Header;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.opensaml.xml.util.Base64;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.JustInTimeProvisioningConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.xsd.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MzkzMQ=="}, "originalCommit": {"oid": "78e5d07fe8109ecc39a8280bb8968e5b27c6941c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDM3NjM3OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDoyMjo0OFrOH8XpNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjo1MTo1MFrOH8aWMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2Mzk5MA==", "bodyText": "add class level comment", "url": "https://github.com/wso2/product-is/pull/10640#discussion_r533063990", "createdAt": "2020-12-01T04:22:48Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "diffHunk": "@@ -0,0 +1,760 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oidc;\n+\n+import org.apache.http.Header;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.opensaml.xml.util.Base64;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.JustInTimeProvisioningConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.xsd.*;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.carbon.identity.sso.saml.stub.types.SAMLSSOServiceProviderDTO;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.carbon.user.mgt.stub.UserAdminUserAdminException;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.application.mgt.AbstractIdentityFederationTestCase;\n+import org.wso2.identity.integration.test.oidc.bean.OIDCApplication;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.IdentityConstants;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class OIDCIdentityFederationTestCase extends AbstractIdentityFederationTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e5d07fe8109ecc39a8280bb8968e5b27c6941c"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwODI3NA==", "bodyText": "Addressed with 1b721f3.", "url": "https://github.com/wso2/product-is/pull/10640#discussion_r533108274", "createdAt": "2020-12-01T06:51:50Z", "author": {"login": "chamathns"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oidc/OIDCIdentityFederationTestCase.java", "diffHunk": "@@ -0,0 +1,760 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oidc;\n+\n+import org.apache.http.Header;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.opensaml.xml.util.Base64;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.JustInTimeProvisioningConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.xsd.*;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.carbon.identity.sso.saml.stub.types.SAMLSSOServiceProviderDTO;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.carbon.user.mgt.stub.UserAdminUserAdminException;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.application.mgt.AbstractIdentityFederationTestCase;\n+import org.wso2.identity.integration.test.oidc.bean.OIDCApplication;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.IdentityConstants;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class OIDCIdentityFederationTestCase extends AbstractIdentityFederationTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2Mzk5MA=="}, "originalCommit": {"oid": "78e5d07fe8109ecc39a8280bb8968e5b27c6941c"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1377, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}