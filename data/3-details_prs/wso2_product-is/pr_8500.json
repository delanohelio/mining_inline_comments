{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0Mjc1NTI2", "number": 8500, "title": " Add integration tests for oauth2 endpoints for legacy URL mode", "bodyText": "Description\nThis PR will add integration tests for oauth2 endpoints for legacy URL mode.\n\nAdd tests for the oauth2 backchannel logout endpoint and oauth2 JWKS endpoint for both tenant and super tenant legacy URL mode.\nAdd tests for the Oauth2 userinfo, introspection, revocation, checksession endpoints for both tenant and super tenant legacy URL mode.\nAdd tests for authorization code flow, password grant flow, client credential grant flow for tenant legacy URL mode.\n\nResolves : #8524", "createdAt": "2020-06-15T04:17:33Z", "url": "https://github.com/wso2/product-is/pull/8500", "merged": true, "mergeCommit": {"oid": "3698eba72facd0cc4eccb61f8af8c9ddb48271c3"}, "closed": true, "closedAt": "2020-06-23T11:13:20Z", "author": {"login": "GANGANI"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrXTCPAH2gAyNDM0Mjc1NTI2OjcxN2E2MDc5NWM1MzdiZmNmMzM5OWVlMTFlMGZlOTdlNGIwZTJlZTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJbDt3gFqTQ4OTU0NjU1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "717a60795c537bfcf3399ee11e0fe97e4b0e2ee6", "author": {"user": {"login": "GANGANI", "name": "Gangani Chamika"}}, "url": "https://github.com/wso2/product-is/commit/717a60795c537bfcf3399ee11e0fe97e4b0e2ee6", "committedDate": "2020-06-15T02:33:26Z", "message": "Add integration tests for oauth2 JWKS Endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5ce71f4cb3490c3b844f055b13aac2ac07ffd19", "author": {"user": {"login": "GANGANI", "name": "Gangani Chamika"}}, "url": "https://github.com/wso2/product-is/commit/b5ce71f4cb3490c3b844f055b13aac2ac07ffd19", "committedDate": "2020-06-17T10:43:02Z", "message": "Add integration tests for oauth2 endpoints for legacy URL mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfde235052cf42425aefea53036b17bd66b1b275", "author": {"user": {"login": "GANGANI", "name": "Gangani Chamika"}}, "url": "https://github.com/wso2/product-is/commit/cfde235052cf42425aefea53036b17bd66b1b275", "committedDate": "2020-06-17T11:19:37Z", "message": "Format the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2", "author": {"user": {"login": "GANGANI", "name": "Gangani Chamika"}}, "url": "https://github.com/wso2/product-is/commit/80a4aef2bcfe987b5f06902cecbd0b22eaff09a2", "committedDate": "2020-06-17T17:30:55Z", "message": "Update OAuth2ServiceAuthCodeGrantOpenIdTestCase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMTgzNzU2", "url": "https://github.com/wso2/product-is/pull/8500#pullrequestreview-433183756", "createdAt": "2020-06-18T11:19:19Z", "commit": {"oid": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMToxOToxOVrOGlq4Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMToyOToyOVrOGlrLZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1MzAyNw==", "bodyText": "remove * annotations", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442153027", "createdAt": "2020-06-18T11:19:19Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NDY4Mw==", "bodyText": "do we need to assert failure here? we can add throw Exception to method signature.", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442154683", "createdAt": "2020-06-18T11:22:51Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.*;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.CommonConstants;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.DEFAULT_TOMCAT_PORT;\n+\n+public class OAuth2BackChannelLogoutTestCase extends OAuth2ServiceAbstractIntegrationTest {\n+\n+    private HttpClient client;\n+    private final String OIDC_APP_NAME = \"playground2\";\n+    private String oidcAppClientId = \"\";\n+    private OauthAdminClient adminClient;\n+    private String sessionDataKeyConsent;\n+    private String sessionDataKey;\n+    private final String CONSENT = \"consent\";\n+    private final String APPROVE = \"approve\";\n+    private final String SCOPE_APPROVAL = \"scope-approval\";\n+    private final String USER_AGENT = \"User-Agent\";\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2BackChannelLogoutTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.activeTenant = context.getContextTenant().getDomain();\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        init();\n+        createOIDCApplication();\n+        client = HttpClientBuilder.create().setDefaultCookieStore(new BasicCookieStore()).build();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testCleanUp() throws Exception {\n+\n+        removeApplications();\n+    }\n+\n+    protected void init() throws Exception {\n+\n+        super.init();\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test back channel logout for OIDC.\")\n+    public void testOIDCLogout() {\n+\n+        // Login.\n+        initiateOIDCRequest(false);\n+        performOIDCLogin();\n+        performOIDCConsentApproval();\n+\n+        // OIDC app logout.\n+        performOIDCLogout();\n+    }\n+\n+    private void createOIDCApplication() {\n+\n+        try {\n+            OAuthConsumerAppDTO appDTO = new OAuthConsumerAppDTO();\n+            appDTO.setApplicationName(OIDC_APP_NAME);\n+            appDTO.setCallbackUrl(OAuth2Constant.CALLBACK_URL);\n+            appDTO.setOAuthVersion(OAuth2Constant.OAUTH_VERSION_2);\n+            appDTO.setGrantTypes(OAuth2Constant.OAUTH2_GRANT_TYPE_AUTHORIZATION_CODE);\n+            appDTO.setBackChannelLogoutUrl(\"http://localhost:\" + DEFAULT_TOMCAT_PORT + \"/playground2/bclogout\");\n+\n+            adminClient.registerOAuthApplicationData(appDTO);\n+            OAuthConsumerAppDTO createdApp = adminClient.getOAuthAppByName(OIDC_APP_NAME);\n+            Assert.assertNotNull(createdApp, \"Adding OIDC app failed.\");\n+            oidcAppClientId = createdApp.getOauthConsumerKey();\n+        } catch (Exception e) {\n+            Assert.fail(\"Adding OIDC app failed.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NTI4MA==", "bodyText": "remove this and add 'throws Exception' to method signature", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442155280", "createdAt": "2020-06-18T11:24:06Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.*;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.CommonConstants;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.DEFAULT_TOMCAT_PORT;\n+\n+public class OAuth2BackChannelLogoutTestCase extends OAuth2ServiceAbstractIntegrationTest {\n+\n+    private HttpClient client;\n+    private final String OIDC_APP_NAME = \"playground2\";\n+    private String oidcAppClientId = \"\";\n+    private OauthAdminClient adminClient;\n+    private String sessionDataKeyConsent;\n+    private String sessionDataKey;\n+    private final String CONSENT = \"consent\";\n+    private final String APPROVE = \"approve\";\n+    private final String SCOPE_APPROVAL = \"scope-approval\";\n+    private final String USER_AGENT = \"User-Agent\";\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2BackChannelLogoutTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.activeTenant = context.getContextTenant().getDomain();\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        init();\n+        createOIDCApplication();\n+        client = HttpClientBuilder.create().setDefaultCookieStore(new BasicCookieStore()).build();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testCleanUp() throws Exception {\n+\n+        removeApplications();\n+    }\n+\n+    protected void init() throws Exception {\n+\n+        super.init();\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test back channel logout for OIDC.\")\n+    public void testOIDCLogout() {\n+\n+        // Login.\n+        initiateOIDCRequest(false);\n+        performOIDCLogin();\n+        performOIDCConsentApproval();\n+\n+        // OIDC app logout.\n+        performOIDCLogout();\n+    }\n+\n+    private void createOIDCApplication() {\n+\n+        try {\n+            OAuthConsumerAppDTO appDTO = new OAuthConsumerAppDTO();\n+            appDTO.setApplicationName(OIDC_APP_NAME);\n+            appDTO.setCallbackUrl(OAuth2Constant.CALLBACK_URL);\n+            appDTO.setOAuthVersion(OAuth2Constant.OAUTH_VERSION_2);\n+            appDTO.setGrantTypes(OAuth2Constant.OAUTH2_GRANT_TYPE_AUTHORIZATION_CODE);\n+            appDTO.setBackChannelLogoutUrl(\"http://localhost:\" + DEFAULT_TOMCAT_PORT + \"/playground2/bclogout\");\n+\n+            adminClient.registerOAuthApplicationData(appDTO);\n+            OAuthConsumerAppDTO createdApp = adminClient.getOAuthAppByName(OIDC_APP_NAME);\n+            Assert.assertNotNull(createdApp, \"Adding OIDC app failed.\");\n+            oidcAppClientId = createdApp.getOauthConsumerKey();\n+        } catch (Exception e) {\n+            Assert.fail(\"Adding OIDC app failed.\", e);\n+        }\n+    }\n+\n+    private void removeApplications() throws Exception {\n+\n+        adminClient.removeOAuthApplicationData(oidcAppClientId);\n+    }\n+\n+    private void initiateOIDCRequest(boolean isCheckLogoutConfirmation) {\n+\n+        try {\n+            List<NameValuePair> urlParameters = getOIDCInitiationRequestParams();\n+            HttpResponse response = sendPostRequestWithParameters(urlParameters,\n+                    \"http://localhost:\" + DEFAULT_TOMCAT_PORT + \"/playground2/oauth2-authorize-user.jsp\");\n+            Assert.assertNotNull(response, \"Authorization response is null\");\n+            Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+            Assert.assertNotNull(locationHeader, \"Authorization response header is null.\");\n+            EntityUtils.consume(response.getEntity());\n+\n+            response = sendGetRequest(locationHeader.getValue());\n+            sessionDataKey = Utils.extractDataFromResponse(response, CommonConstants.SESSION_DATA_KEY, 1);\n+            if (isCheckLogoutConfirmation) {\n+                Assert.assertNotNull(sessionDataKey, \"Back channel logout failed for OIDC.\");\n+            } else {\n+                Assert.assertNotNull(sessionDataKey, \"sessionDataKey is null for .\" + OIDC_APP_NAME);\n+            }\n+            EntityUtils.consume(response.getEntity());\n+        } catch (Exception e) {\n+            Assert.fail(\"OIDC initiation request failed.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NTU4Nw==", "bodyText": "please check other places also", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442155587", "createdAt": "2020-06-18T11:24:49Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.*;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.CommonConstants;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.DEFAULT_TOMCAT_PORT;\n+\n+public class OAuth2BackChannelLogoutTestCase extends OAuth2ServiceAbstractIntegrationTest {\n+\n+    private HttpClient client;\n+    private final String OIDC_APP_NAME = \"playground2\";\n+    private String oidcAppClientId = \"\";\n+    private OauthAdminClient adminClient;\n+    private String sessionDataKeyConsent;\n+    private String sessionDataKey;\n+    private final String CONSENT = \"consent\";\n+    private final String APPROVE = \"approve\";\n+    private final String SCOPE_APPROVAL = \"scope-approval\";\n+    private final String USER_AGENT = \"User-Agent\";\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2BackChannelLogoutTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.activeTenant = context.getContextTenant().getDomain();\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        init();\n+        createOIDCApplication();\n+        client = HttpClientBuilder.create().setDefaultCookieStore(new BasicCookieStore()).build();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testCleanUp() throws Exception {\n+\n+        removeApplications();\n+    }\n+\n+    protected void init() throws Exception {\n+\n+        super.init();\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test back channel logout for OIDC.\")\n+    public void testOIDCLogout() {\n+\n+        // Login.\n+        initiateOIDCRequest(false);\n+        performOIDCLogin();\n+        performOIDCConsentApproval();\n+\n+        // OIDC app logout.\n+        performOIDCLogout();\n+    }\n+\n+    private void createOIDCApplication() {\n+\n+        try {\n+            OAuthConsumerAppDTO appDTO = new OAuthConsumerAppDTO();\n+            appDTO.setApplicationName(OIDC_APP_NAME);\n+            appDTO.setCallbackUrl(OAuth2Constant.CALLBACK_URL);\n+            appDTO.setOAuthVersion(OAuth2Constant.OAUTH_VERSION_2);\n+            appDTO.setGrantTypes(OAuth2Constant.OAUTH2_GRANT_TYPE_AUTHORIZATION_CODE);\n+            appDTO.setBackChannelLogoutUrl(\"http://localhost:\" + DEFAULT_TOMCAT_PORT + \"/playground2/bclogout\");\n+\n+            adminClient.registerOAuthApplicationData(appDTO);\n+            OAuthConsumerAppDTO createdApp = adminClient.getOAuthAppByName(OIDC_APP_NAME);\n+            Assert.assertNotNull(createdApp, \"Adding OIDC app failed.\");\n+            oidcAppClientId = createdApp.getOauthConsumerKey();\n+        } catch (Exception e) {\n+            Assert.fail(\"Adding OIDC app failed.\", e);\n+        }\n+    }\n+\n+    private void removeApplications() throws Exception {\n+\n+        adminClient.removeOAuthApplicationData(oidcAppClientId);\n+    }\n+\n+    private void initiateOIDCRequest(boolean isCheckLogoutConfirmation) {\n+\n+        try {\n+            List<NameValuePair> urlParameters = getOIDCInitiationRequestParams();\n+            HttpResponse response = sendPostRequestWithParameters(urlParameters,\n+                    \"http://localhost:\" + DEFAULT_TOMCAT_PORT + \"/playground2/oauth2-authorize-user.jsp\");\n+            Assert.assertNotNull(response, \"Authorization response is null\");\n+            Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+            Assert.assertNotNull(locationHeader, \"Authorization response header is null.\");\n+            EntityUtils.consume(response.getEntity());\n+\n+            response = sendGetRequest(locationHeader.getValue());\n+            sessionDataKey = Utils.extractDataFromResponse(response, CommonConstants.SESSION_DATA_KEY, 1);\n+            if (isCheckLogoutConfirmation) {\n+                Assert.assertNotNull(sessionDataKey, \"Back channel logout failed for OIDC.\");\n+            } else {\n+                Assert.assertNotNull(sessionDataKey, \"sessionDataKey is null for .\" + OIDC_APP_NAME);\n+            }\n+            EntityUtils.consume(response.getEntity());\n+        } catch (Exception e) {\n+            Assert.fail(\"OIDC initiation request failed.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NTI4MA=="}, "originalCommit": {"oid": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjAzMA==", "bodyText": "remove unnecessary spaces.", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442156030", "createdAt": "2020-06-18T11:25:43Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java", "diffHunk": "@@ -81,17 +84,34 @@\n \n     private List<NameValuePair> consentParameters = new ArrayList<>();\n     private CookieStore cookieStore = new BasicCookieStore();\n+    private final String username;\n+    private final String userPassword;\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2ServiceAuthCodeGrantOpenIdTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+    }\n \n     @BeforeClass(alwaysRun = true)\n     public void testInit() throws Exception {\n-        super.init(TestUserMode.SUPER_TENANT_USER);\n \n         logManger = new AuthenticatorClient(backendURL);\n         adminUsername = userInfo.getUserName();\n         adminPassword = userInfo.getPassword();\n-        String sessionIndex = logManger.login(isServer.getSuperTenant().getTenantAdmin().getUserName(),\n-                isServer.getSuperTenant().getTenantAdmin().getPassword(),\n-                isServer.getInstance().getHosts().get(\"default\"));\n+        String sessionIndex =\n+                logManger.login(username, userPassword,\tisServer.getInstance().getHosts().get(\"default\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjIxMw==", "bodyText": "remove unnecessary spaces", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442156213", "createdAt": "2020-06-18T11:26:05Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantTestCase.java", "diffHunk": "@@ -63,21 +65,38 @@\n     private String authorizationCode;\n     private String consumerKey;\n     private String consumerSecret;\n+    private final String username;\n+    private final String userPassword;\n+    private final AutomationContext context;\n \n     private static final String PLAYGROUND_RESET_PAGE = \"http://localhost:\" + CommonConstants.DEFAULT_TOMCAT_PORT +\n             \"/playground2/oauth2.jsp?reset=true\";\n     private DefaultHttpClient client;\n \n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2ServiceAuthCodeGrantTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+    }\n+\n     @BeforeClass(alwaysRun = true)\n     public void testInit() throws Exception {\n \n-        super.init(TestUserMode.SUPER_TENANT_USER);\n         logManger = new AuthenticatorClient(backendURL);\n         adminUsername = userInfo.getUserName();\n         adminPassword = userInfo.getPassword();\n-        logManger.login(isServer.getSuperTenant().getTenantAdmin().getUserName(),\n-                isServer.getSuperTenant().getTenantAdmin().getPassword(),\n-                isServer.getInstance().getHosts().get(\"default\"));\n+        logManger.login(username, userPassword,\tisServer.getInstance().getHosts().get(\"default\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjY3OQ==", "bodyText": "i think line number 61 and 62 needs to be formatted. please check", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442156679", "createdAt": "2020-06-18T11:27:04Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceClientCredentialTestCase.java", "diffHunk": "@@ -47,19 +50,35 @@\n \tprivate String accessToken;\n \tprivate String consumerKey;\n \tprivate String consumerSecret;\n+\tprivate String username;\n+\tprivate String userPassword;\n \n \tprivate CloseableHttpClient client;\n \n+\t@DataProvider(name = \"configProvider\")\n+\tpublic static Object[][] configProvider() {\n+\t\treturn new Object[][]{\n+\t\t\t\t{TestUserMode.SUPER_TENANT_ADMIN},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjkyNQ==", "bodyText": "format this line and below", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442156925", "createdAt": "2020-06-18T11:27:29Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceImplicitGrantTestCase.java", "diffHunk": "@@ -58,16 +60,33 @@\n \tprivate String consumerSecret;\n \n \tprivate CloseableHttpClient client;\n+\tprivate final String username;\n+\tprivate final String userPassword;\n+\n+\t@DataProvider(name = \"configProvider\")\n+\tpublic static Object[][] configProvider() {\n+\t\treturn new Object[][]{\n+\t\t\t\t{TestUserMode.SUPER_TENANT_ADMIN},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NzEyNA==", "bodyText": "remove spaces", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442157124", "createdAt": "2020-06-18T11:27:54Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceIntrospectionTestCase.java", "diffHunk": "@@ -50,17 +53,37 @@\n     private String consumerSecret;\n \n     private CloseableHttpClient client;\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+    private final String TENANT_DOMAIN = \"wso2.com\";\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2ServiceIntrospectionTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.activeTenant = context.getContextTenant().getDomain();\n+\n+    }\n \n     @BeforeClass(alwaysRun = true)\n     public void testInit() throws Exception {\n \n-        super.init(TestUserMode.SUPER_TENANT_USER);\n         logManger = new AuthenticatorClient(backendURL);\n         adminUsername = userInfo.getUserName();\n         adminPassword = userInfo.getPassword();\n-        logManger.login(isServer.getSuperTenant().getTenantAdmin().getUserName(),\n-                isServer.getSuperTenant().getTenantAdmin().getPassword(),\n-                isServer.getInstance().getHosts().get(\"default\"));\n+        logManger.login(username, userPassword,\tisServer.getInstance().getHosts().get(\"default\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NzI2MA==", "bodyText": "reformat lines", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442157260", "createdAt": "2020-06-18T11:28:09Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceResourceOwnerTestCase.java", "diffHunk": "@@ -65,16 +68,36 @@\n \tprivate static final String lockedUserPassword = \"test_locked_user_pass\";\n \tprivate static final String ACCOUNT_LOCK_CLAIM_URI = \"http://wso2.org/claims/identity/accountLocked\";\n \tprotected IdentityGovernanceServiceClient identityGovernanceServiceClient;\n+\tprivate final String username;\n+\tprivate final String userPassword;\n+\tprivate final String activeTenant;\n+\tprivate final String TENANT_DOMAIN = \"wso2.com\";\n+\n+\t@DataProvider(name = \"configProvider\")\n+\tpublic static Object[][] configProvider() {\n+\t\treturn new Object[][]{\n+\t\t\t\t{TestUserMode.SUPER_TENANT_ADMIN},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NzQyMw==", "bodyText": "let's define constant as static", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442157423", "createdAt": "2020-06-18T11:28:28Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceResourceOwnerTestCase.java", "diffHunk": "@@ -65,16 +68,36 @@\n \tprivate static final String lockedUserPassword = \"test_locked_user_pass\";\n \tprivate static final String ACCOUNT_LOCK_CLAIM_URI = \"http://wso2.org/claims/identity/accountLocked\";\n \tprotected IdentityGovernanceServiceClient identityGovernanceServiceClient;\n+\tprivate final String username;\n+\tprivate final String userPassword;\n+\tprivate final String activeTenant;\n+\tprivate final String TENANT_DOMAIN = \"wso2.com\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NzkyNg==", "bodyText": "use static when defining constants", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442157926", "createdAt": "2020-06-18T11:29:29Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2TokenRevocationWithRevokedAccessToken.java", "diffHunk": "@@ -53,11 +55,20 @@\n     private ClientID consumerKey;\n     private Secret consumerSecret;\n \n-    private String tokenType;\n+    private final String tokenType;\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+    private final String TENANT_DOMAIN = \"wso2.com\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "author": {"user": {"login": "GANGANI", "name": "Gangani Chamika"}}, "url": "https://github.com/wso2/product-is/commit/947bac08aa1f82c91d337ca6d537cb8264debfa9", "committedDate": "2020-06-19T05:11:01Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0ODY4NTcx", "url": "https://github.com/wso2/product-is/pull/8500#pullrequestreview-434868571", "createdAt": "2020-06-22T12:20:43Z", "commit": {"oid": "947bac08aa1f82c91d337ca6d537cb8264debfa9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyMDo0M1rOGm-Mfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyMDo0M1rOGm-Mfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxODA3OA==", "bodyText": "change this line to\nsessionCookie = logManger.login(username, userPassword, isServer.getInstance().getHosts().get(\"default\"));", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r443518078", "createdAt": "2020-06-22T12:20:43Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceImplicitGrantTestCase.java", "diffHunk": "@@ -58,16 +60,30 @@\n \tprivate String consumerSecret;\n \n \tprivate CloseableHttpClient client;\n+\tprivate final String username;\n+\tprivate final String userPassword;\n+\n+\t@DataProvider(name = \"configProvider\")\n+\tpublic static Object[][] configProvider() {\n+\t\treturn new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n+\t}\n+\n+\t@Factory(dataProvider = \"configProvider\")\n+\tpublic OAuth2ServiceImplicitGrantTestCase(TestUserMode userMode) throws Exception {\n+\n+\t\tsuper.init(userMode);\n+\t\tAutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+\t\tthis.username = context.getContextTenant().getTenantAdmin().getUserName();\n+\t\tthis.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+\t}\n \n \t@BeforeClass(alwaysRun = true)\n \tpublic void testInit() throws Exception {\n-\t\tsuper.init(TestUserMode.SUPER_TENANT_USER);\n+\n \t\tlogManger = new AuthenticatorClient(backendURL);\n \t\tadminUsername = userInfo.getUserName();\n \t\tadminPassword = userInfo.getPassword();\n-\t\tlogManger.login(isServer.getSuperTenant().getTenantAdmin().getUserName(),\n-\t\t\t\tisServer.getSuperTenant().getTenantAdmin().getPassword(),\n-\t\t\t\tisServer.getInstance().getHosts().get(\"default\"));\n+\t\tlogManger.login(username, userPassword,\tisServer.getInstance().getHosts().get(\"default\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "947bac08aa1f82c91d337ca6d537cb8264debfa9"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0ODY4Nzkw", "url": "https://github.com/wso2/product-is/pull/8500#pullrequestreview-434868790", "createdAt": "2020-06-22T12:21:02Z", "commit": {"oid": "947bac08aa1f82c91d337ca6d537cb8264debfa9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyMTowMlrOGm-NHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyMTowMlrOGm-NHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxODIzOQ==", "bodyText": "change to \n\nsessionCookie = logManger.login(username, userPassword, isServer.getInstance().getHosts().get(\"default\"));", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r443518239", "createdAt": "2020-06-22T12:21:02Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceIntrospectionTestCase.java", "diffHunk": "@@ -50,17 +53,33 @@\n     private String consumerSecret;\n \n     private CloseableHttpClient client;\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+    private final String TENANT_DOMAIN = \"wso2.com\";\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2ServiceIntrospectionTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.activeTenant = context.getContextTenant().getDomain();\n+    }\n \n     @BeforeClass(alwaysRun = true)\n     public void testInit() throws Exception {\n \n-        super.init(TestUserMode.SUPER_TENANT_USER);\n         logManger = new AuthenticatorClient(backendURL);\n         adminUsername = userInfo.getUserName();\n         adminPassword = userInfo.getPassword();\n-        logManger.login(isServer.getSuperTenant().getTenantAdmin().getUserName(),\n-                isServer.getSuperTenant().getTenantAdmin().getPassword(),\n-                isServer.getInstance().getHosts().get(\"default\"));\n+        logManger.login(username, userPassword, isServer.getInstance().getHosts().get(\"default\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "947bac08aa1f82c91d337ca6d537cb8264debfa9"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0ODY4OTU5", "url": "https://github.com/wso2/product-is/pull/8500#pullrequestreview-434868959", "createdAt": "2020-06-22T12:21:18Z", "commit": {"oid": "947bac08aa1f82c91d337ca6d537cb8264debfa9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyMToxOFrOGm-NvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyMToxOFrOGm-NvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxODM5Nw==", "bodyText": "change to  sessionCookie = logManger.login(username, userPassword, isServer.getInstance().getHosts().get(\"default\"));", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r443518397", "createdAt": "2020-06-22T12:21:18Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceResourceOwnerTestCase.java", "diffHunk": "@@ -65,16 +68,33 @@\n \tprivate static final String lockedUserPassword = \"test_locked_user_pass\";\n \tprivate static final String ACCOUNT_LOCK_CLAIM_URI = \"http://wso2.org/claims/identity/accountLocked\";\n \tprotected IdentityGovernanceServiceClient identityGovernanceServiceClient;\n+\tprivate final String username;\n+\tprivate final String userPassword;\n+\tprivate final String activeTenant;\n+\tprivate static final String TENANT_DOMAIN = \"wso2.com\";\n+\n+\t@DataProvider(name = \"configProvider\")\n+\tpublic static Object[][] configProvider() {\n+\t\treturn new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n+\t}\n+\n+\t@Factory(dataProvider = \"configProvider\")\n+\tpublic OAuth2ServiceResourceOwnerTestCase(TestUserMode userMode) throws Exception {\n+\n+\t\tsuper.init(userMode);\n+\t\tAutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+\t\tthis.username = context.getContextTenant().getTenantAdmin().getUserName();\n+\t\tthis.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+\t\tthis.activeTenant = context.getContextTenant().getDomain();\n+\t}\n \n \t@BeforeClass(alwaysRun = true)\n \tpublic void testInit() throws Exception {\n-\t\tsuper.init(TestUserMode.SUPER_TENANT_USER);\n+\n \t\tlogManger = new AuthenticatorClient(backendURL);\n \t\tadminUsername = userInfo.getUserName();\n \t\tadminPassword = userInfo.getPassword();\n-\t\tlogManger.login(isServer.getSuperTenant().getTenantAdmin().getUserName(),\n-\t\t\t\tisServer.getSuperTenant().getTenantAdmin().getPassword(),\n-\t\t\t\tisServer.getInstance().getHosts().get(\"default\"));\n+\t\tlogManger.login(username, userPassword,\tisServer.getInstance().getHosts().get(\"default\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "947bac08aa1f82c91d337ca6d537cb8264debfa9"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d4f2e57a87e7a410e148f60a3dc8150f8505704", "author": {"user": {"login": "GANGANI", "name": "Gangani Chamika"}}, "url": "https://github.com/wso2/product-is/commit/8d4f2e57a87e7a410e148f60a3dc8150f8505704", "committedDate": "2020-06-23T06:48:23Z", "message": "Fix the test failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NDg5NDM0", "url": "https://github.com/wso2/product-is/pull/8500#pullrequestreview-435489434", "createdAt": "2020-06-23T06:53:35Z", "commit": {"oid": "8d4f2e57a87e7a410e148f60a3dc8150f8505704"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNjo1MzozNVrOGnbnGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNjo1NDozN1rOGnbo-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMDAyNg==", "bodyText": "remove unnecessary new line", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r444000026", "createdAt": "2020-06-23T06:53:35Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java", "diffHunk": "@@ -359,6 +370,7 @@ public HttpResponse sendLoginPost(HttpClient client, String sessionDataKey) thro\n         return response;\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d4f2e57a87e7a410e148f60a3dc8150f8505704"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMDUwNw==", "bodyText": "remove unnecessary new line", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r444000507", "createdAt": "2020-06-23T06:54:37Z", "author": {"login": "emswbandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java", "diffHunk": "@@ -369,4 +381,5 @@ public HttpResponse sendLoginPost(HttpClient client, String sessionDataKey) thro\n \n         return claimValues;\n     }\n-}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d4f2e57a87e7a410e148f60a3dc8150f8505704"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce", "author": {"user": {"login": "GANGANI", "name": "Gangani Chamika"}}, "url": "https://github.com/wso2/product-is/commit/f3c8c97719e2480642ca3e50a14c54fbb87ab2ce", "committedDate": "2020-06-23T07:01:23Z", "message": "Format code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjI0Njgz", "url": "https://github.com/wso2/product-is/pull/8500#pullrequestreview-435624683", "createdAt": "2020-06-23T09:53:17Z", "commit": {"oid": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1Njc4OTc4", "url": "https://github.com/wso2/product-is/pull/8500#pullrequestreview-435678978", "createdAt": "2020-06-23T11:13:12Z", "commit": {"oid": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDEzNTEz", "url": "https://github.com/wso2/product-is/pull/8500#pullrequestreview-487413513", "createdAt": "2020-09-14T04:51:15Z", "commit": {"oid": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDo1MToxNVrOHRDzXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDo1MToxNVrOHRDzXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1MDE0MQ==", "bodyText": "Incorrect formatting of the error message", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r487650141", "createdAt": "2020-09-14T04:51:15Z", "author": {"login": "pamodaaw"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.identity.oauth.stub.OAuthAdminServiceIdentityOAuthAdminException;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.CommonConstants;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.IOException;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.DEFAULT_TOMCAT_PORT;\n+\n+public class OAuth2BackChannelLogoutTestCase extends OAuth2ServiceAbstractIntegrationTest {\n+\n+    private HttpClient client;\n+    private final String OIDC_APP_NAME = \"playground2\";\n+    private String oidcAppClientId = \"\";\n+    private OauthAdminClient adminClient;\n+    private String sessionDataKeyConsent;\n+    private String sessionDataKey;\n+    private final String CONSENT = \"consent\";\n+    private final String APPROVE = \"approve\";\n+    private final String SCOPE_APPROVAL = \"scope-approval\";\n+    private final String USER_AGENT = \"User-Agent\";\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2BackChannelLogoutTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.activeTenant = context.getContextTenant().getDomain();\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        init();\n+        createOIDCApplication();\n+        client = HttpClientBuilder.create().setDefaultCookieStore(new BasicCookieStore()).build();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testCleanUp() throws Exception {\n+\n+        removeApplications();\n+    }\n+\n+    protected void init() throws Exception {\n+\n+        super.init();\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test back channel logout for OIDC.\")\n+    public void testOIDCLogout() throws IOException {\n+\n+        // Login.\n+        initiateOIDCRequest(false);\n+        performOIDCLogin();\n+        performOIDCConsentApproval();\n+\n+        // OIDC app logout.\n+        performOIDCLogout();\n+    }\n+\n+    private void createOIDCApplication() throws Exception {\n+\n+        OAuthConsumerAppDTO appDTO = new OAuthConsumerAppDTO();\n+        appDTO.setApplicationName(OIDC_APP_NAME);\n+        appDTO.setCallbackUrl(OAuth2Constant.CALLBACK_URL);\n+        appDTO.setOAuthVersion(OAuth2Constant.OAUTH_VERSION_2);\n+        appDTO.setGrantTypes(OAuth2Constant.OAUTH2_GRANT_TYPE_AUTHORIZATION_CODE);\n+        appDTO.setBackChannelLogoutUrl(\"http://localhost:\" + DEFAULT_TOMCAT_PORT + \"/playground2/bclogout\");\n+\n+        adminClient.registerOAuthApplicationData(appDTO);\n+        OAuthConsumerAppDTO createdApp = adminClient.getOAuthAppByName(OIDC_APP_NAME);\n+        Assert.assertNotNull(createdApp, \"Adding OIDC app failed.\");\n+        oidcAppClientId = createdApp.getOauthConsumerKey();\n+    }\n+\n+    private void removeApplications() throws Exception {\n+\n+        adminClient.removeOAuthApplicationData(oidcAppClientId);\n+    }\n+\n+    private void initiateOIDCRequest(boolean isCheckLogoutConfirmation) throws IOException {\n+\n+        List<NameValuePair> urlParameters = getOIDCInitiationRequestParams();\n+        HttpResponse response = sendPostRequestWithParameters(urlParameters,\n+                \"http://localhost:\" + DEFAULT_TOMCAT_PORT + \"/playground2/oauth2-authorize-user.jsp\");\n+        Assert.assertNotNull(response, \"Authorization response is null\");\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        Assert.assertNotNull(locationHeader, \"Authorization response header is null.\");\n+        EntityUtils.consume(response.getEntity());\n+\n+        response = sendGetRequest(locationHeader.getValue());\n+        sessionDataKey = Utils.extractDataFromResponse(response, CommonConstants.SESSION_DATA_KEY, 1);\n+        if (isCheckLogoutConfirmation) {\n+            Assert.assertNotNull(sessionDataKey, \"Back channel logout failed for OIDC.\");\n+        } else {\n+            Assert.assertNotNull(sessionDataKey, \"sessionDataKey is null for .\" + OIDC_APP_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce"}, "originalPosition": 155}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDIwNjE4", "url": "https://github.com/wso2/product-is/pull/8500#pullrequestreview-487420618", "createdAt": "2020-09-14T05:15:47Z", "commit": {"oid": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNToxNTo0N1rOHREK8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNToxNTo0N1rOHREK8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1NjE3OA==", "bodyText": "format this line", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r487656178", "createdAt": "2020-09-14T05:15:47Z", "author": {"login": "pamodaaw"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java", "diffHunk": "@@ -81,22 +86,45 @@\n \n     private List<NameValuePair> consentParameters = new ArrayList<>();\n     private CookieStore cookieStore = new BasicCookieStore();\n+    private final String username;\n+    private final String userPassword;\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2ServiceAuthCodeGrantOpenIdTestCase(TestUserMode userMode) throws Exception {\n+\n+        context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+    }\n \n     @BeforeClass(alwaysRun = true)\n     public void testInit() throws Exception {\n-        super.init(TestUserMode.SUPER_TENANT_USER);\n+\n+        backendURL = context.getContextUrls().getBackEndUrl();\n+        loginLogoutClient = new LoginLogoutClient(context);\n+        sessionCookie = loginLogoutClient.login();\n+        identityContextUrls = context.getContextUrls();\n+        tenantInfo = context.getContextTenant();\n+        userInfo = tenantInfo.getContextUser();\n+\n+        appMgtclient = new ApplicationManagementServiceClient(sessionCookie, backendURL, null);\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+        remoteUSMServiceClient = new RemoteUserStoreManagerServiceClient(backendURL, sessionCookie);\n \n         logManger = new AuthenticatorClient(backendURL);\n-        adminUsername = userInfo.getUserName();\n-        adminPassword = userInfo.getPassword();\n-        String sessionIndex = logManger.login(isServer.getSuperTenant().getTenantAdmin().getUserName(),\n-                isServer.getSuperTenant().getTenantAdmin().getPassword(),\n-                isServer.getInstance().getHosts().get(\"default\"));\n+        String sessionIndex = logManger.login(username, userPassword,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTQ0NDk4", "url": "https://github.com/wso2/product-is/pull/8500#pullrequestreview-489544498", "createdAt": "2020-09-16T11:51:10Z", "commit": {"oid": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMTo1MToxMFrOHStKHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMTo1MToxMFrOHStKHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3NjI4Nw==", "bodyText": "Add class comment", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r489376287", "createdAt": "2020-09-16T11:51:10Z", "author": {"login": "janakamarasena"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.identity.oauth.stub.OAuthAdminServiceIdentityOAuthAdminException;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.CommonConstants;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.IOException;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.DEFAULT_TOMCAT_PORT;\n+\n+public class OAuth2BackChannelLogoutTestCase extends OAuth2ServiceAbstractIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTQ2NTU2", "url": "https://github.com/wso2/product-is/pull/8500#pullrequestreview-489546556", "createdAt": "2020-09-16T11:54:02Z", "commit": {"oid": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMTo1NDowMlrOHStQqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMTo1NDowMlrOHStQqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3Nzk2Mw==", "bodyText": "Add class comment", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r489377963", "createdAt": "2020-09-16T11:54:02Z", "author": {"login": "janakamarasena"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/Oauth2JWKSEndpointTestCase.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+\n+import java.io.IOException;\n+\n+public class Oauth2JWKSEndpointTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1288, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}