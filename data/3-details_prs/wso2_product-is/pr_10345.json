{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MDAxNzg5", "number": 10345, "title": "Improving test coverage for SCIM2 paginations", "bodyText": "Issue #9959\nImproving test coverage for SCIM scenarios. included cases are as follows.\n\n validate user listing with pagination -> added a test case \"testUserListingPagination\"\n validate user filtering with pagination -> this testcase is already covered in the \"SCIM2MultiAttributeUserFilterTestCase\" class\n validating legacy behavior support (returning all the results for not specified list param) ->added a test case \"testUserListingPaginationWithoutParams\"", "createdAt": "2020-11-05T11:42:37Z", "url": "https://github.com/wso2/product-is/pull/10345", "merged": true, "mergeCommit": {"oid": "ec0cc04cc467fe55d4f8773e1901f647156979a2"}, "closed": true, "closedAt": "2021-03-02T16:37:03Z", "author": {"login": "EANimesha"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbbFOWAFqTUyODAzMTMyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd_N_dugFqTYwMTkyNjk1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MDMxMzI2", "url": "https://github.com/wso2/product-is/pull/10345#pullrequestreview-528031326", "createdAt": "2020-11-11T10:06:19Z", "commit": {"oid": "b77550f9493118ceaae64bfc910b14ae7c0cbbe0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDowNjoyMFrOHxGgaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDowNjoyMFrOHxGgaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI0ODg3Mw==", "bodyText": "Remove souts...", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r521248873", "createdAt": "2020-11-11T10:06:20Z", "author": {"login": "sumedhe"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.*;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.*;\n+\n+public class SCIM2PaginationTestCase extends ISIntegrationTest {\n+\n+    private CloseableHttpClient client;\n+\n+    public static final String TOTAL_RESULTS_ATTRIBUTE = \"totalResults\";\n+    public static final String RESOURCES_ATTRIBUTE = \"Resources\";\n+    public static final String START_INDEX_ATTRIBUTE=\"startIndex\";\n+    public static final String ITEMS_PER_PAGE_ATTRIBUTE=\"itemsPerPage\";\n+    public static final String START_INDEX = \"2\";\n+    public static final String COUNT = \"4\";\n+\n+    private String adminUsername;\n+    private String adminPassword;\n+    private String tenant;\n+    private TestUserMode testUserMode;\n+\n+    List<String> userIds = new ArrayList<>();\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+        super.init();\n+        client = HttpClients.createDefault();\n+    }\n+\n+    public SCIM2PaginationTestCase() throws Exception {\n+\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", TestUserMode.TENANT_ADMIN);\n+        this.adminUsername = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.adminPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+        testUserMode = TestUserMode.TENANT_ADMIN;\n+    }\n+\n+    //validate user listing with pagination\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPagination() throws Exception {\n+        HttpGet request = new HttpGet(getUserPath()+\"?startIndex=\"+START_INDEX+\"&count=\"+COUNT);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, COUNT,\"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, START_INDEX,\"startIndex in pagination listing is incorrect\");\n+\n+        String itemsPerPage = ((JSONObject) responseObj).get(ITEMS_PER_PAGE_ATTRIBUTE).toString();\n+        assertEquals(itemsPerPage, COUNT,\"itemsPerPage in pagination listing is incorrect\");\n+\n+        System.out.println(responseObj.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77550f9493118ceaae64bfc910b14ae7c0cbbe0"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg1MTM2NTE4", "url": "https://github.com/wso2/product-is/pull/10345#pullrequestreview-585136518", "createdAt": "2021-02-08T03:18:07Z", "commit": {"oid": "3c194fea01c9c1faa0a5face247640554b241f77"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQwMzoxODowN1rOIhRZrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMzo0MzoyN1rOImHA0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc1OTAyMw==", "bodyText": "Use each imports instead *", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r571759023", "createdAt": "2021-02-08T03:18:07Z", "author": {"login": "sumedhe"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,225 @@\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c194fea01c9c1faa0a5face247640554b241f77"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgyOTM5OQ==", "bodyText": "Use each imports instead", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r576829399", "createdAt": "2021-02-16T13:39:55Z", "author": {"login": "sumedhe"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee355961ea40bda9032990303661fe81995579aa"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgyOTkwMw==", "bodyText": "Add a new line after the method signature", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r576829903", "createdAt": "2021-02-16T13:40:42Z", "author": {"login": "sumedhe"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.*;\n+\n+public class SCIM2PaginationTestCase extends ISIntegrationTest {\n+\n+    private CloseableHttpClient client;\n+\n+    public static final String TOTAL_RESULTS_ATTRIBUTE = \"totalResults\";\n+    public static final String RESOURCES_ATTRIBUTE = \"Resources\";\n+    public static final String START_INDEX_ATTRIBUTE=\"startIndex\";\n+    public static final String ITEMS_PER_PAGE_ATTRIBUTE=\"itemsPerPage\";\n+    public static final String START_INDEX = \"2\";\n+    public static final String COUNT = \"4\";\n+\n+    private final String adminUsername;\n+    private final String adminPassword;\n+    private final String tenant;\n+    private final int tenantUserCount;\n+\n+    List<String> userIds = new ArrayList<>();\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+        super.init();\n+        client = HttpClients.createDefault();\n+    }\n+\n+    @Factory(dataProvider = \"scim2UserConfigProvider\")\n+    public SCIM2PaginationTestCase(TestUserMode userMode) throws Exception {\n+\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.adminUsername = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.adminPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+        tenantUserCount=context.getContextTenant().getTenantUserList().size();\n+    }\n+\n+    @DataProvider(name = \"scim2UserConfigProvider\")\n+    public static Object[][] scim2UserConfigProvider() {\n+\n+        return new Object[][] {\n+                { TestUserMode.SUPER_TENANT_ADMIN }, { TestUserMode.TENANT_ADMIN }\n+        };\n+    }\n+\n+    //validate user listing with pagination\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPagination() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee355961ea40bda9032990303661fe81995579aa"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgzMDM2Ng==", "bodyText": "Add spaces when joining with \"+\"", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r576830366", "createdAt": "2021-02-16T13:41:21Z", "author": {"login": "sumedhe"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.*;\n+\n+public class SCIM2PaginationTestCase extends ISIntegrationTest {\n+\n+    private CloseableHttpClient client;\n+\n+    public static final String TOTAL_RESULTS_ATTRIBUTE = \"totalResults\";\n+    public static final String RESOURCES_ATTRIBUTE = \"Resources\";\n+    public static final String START_INDEX_ATTRIBUTE=\"startIndex\";\n+    public static final String ITEMS_PER_PAGE_ATTRIBUTE=\"itemsPerPage\";\n+    public static final String START_INDEX = \"2\";\n+    public static final String COUNT = \"4\";\n+\n+    private final String adminUsername;\n+    private final String adminPassword;\n+    private final String tenant;\n+    private final int tenantUserCount;\n+\n+    List<String> userIds = new ArrayList<>();\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+        super.init();\n+        client = HttpClients.createDefault();\n+    }\n+\n+    @Factory(dataProvider = \"scim2UserConfigProvider\")\n+    public SCIM2PaginationTestCase(TestUserMode userMode) throws Exception {\n+\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.adminUsername = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.adminPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+        tenantUserCount=context.getContextTenant().getTenantUserList().size();\n+    }\n+\n+    @DataProvider(name = \"scim2UserConfigProvider\")\n+    public static Object[][] scim2UserConfigProvider() {\n+\n+        return new Object[][] {\n+                { TestUserMode.SUPER_TENANT_ADMIN }, { TestUserMode.TENANT_ADMIN }\n+        };\n+    }\n+\n+    //validate user listing with pagination\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPagination() throws Exception {\n+        HttpGet request = new HttpGet(getUserPath()+\"?startIndex=\"+START_INDEX+\"&count=\"+COUNT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee355961ea40bda9032990303661fe81995579aa"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgzMTExNw==", "bodyText": "Comment start with capital. End with dot..", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r576831117", "createdAt": "2021-02-16T13:42:30Z", "author": {"login": "sumedhe"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.*;\n+\n+public class SCIM2PaginationTestCase extends ISIntegrationTest {\n+\n+    private CloseableHttpClient client;\n+\n+    public static final String TOTAL_RESULTS_ATTRIBUTE = \"totalResults\";\n+    public static final String RESOURCES_ATTRIBUTE = \"Resources\";\n+    public static final String START_INDEX_ATTRIBUTE=\"startIndex\";\n+    public static final String ITEMS_PER_PAGE_ATTRIBUTE=\"itemsPerPage\";\n+    public static final String START_INDEX = \"2\";\n+    public static final String COUNT = \"4\";\n+\n+    private final String adminUsername;\n+    private final String adminPassword;\n+    private final String tenant;\n+    private final int tenantUserCount;\n+\n+    List<String> userIds = new ArrayList<>();\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+        super.init();\n+        client = HttpClients.createDefault();\n+    }\n+\n+    @Factory(dataProvider = \"scim2UserConfigProvider\")\n+    public SCIM2PaginationTestCase(TestUserMode userMode) throws Exception {\n+\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.adminUsername = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.adminPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+        tenantUserCount=context.getContextTenant().getTenantUserList().size();\n+    }\n+\n+    @DataProvider(name = \"scim2UserConfigProvider\")\n+    public static Object[][] scim2UserConfigProvider() {\n+\n+        return new Object[][] {\n+                { TestUserMode.SUPER_TENANT_ADMIN }, { TestUserMode.TENANT_ADMIN }\n+        };\n+    }\n+\n+    //validate user listing with pagination\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPagination() throws Exception {\n+        HttpGet request = new HttpGet(getUserPath()+\"?startIndex=\"+START_INDEX+\"&count=\"+COUNT);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, COUNT,\"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, START_INDEX,\"startIndex in pagination listing is incorrect\");\n+\n+        String itemsPerPage = ((JSONObject) responseObj).get(ITEMS_PER_PAGE_ATTRIBUTE).toString();\n+        assertEquals(itemsPerPage, COUNT,\"itemsPerPage in pagination listing is incorrect\");\n+\n+        int resourcesSize = ((JSONArray)((JSONObject) responseObj).get(RESOURCES_ATTRIBUTE)).size();\n+        assertEquals(String.valueOf(resourcesSize),COUNT,\"resources size in pagination listing is incorrect\");\n+\n+    }\n+\n+    // validating legacy behavior support (returning all the results for not specified list param)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee355961ea40bda9032990303661fe81995579aa"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgzMTU0Nw==", "bodyText": "Space after comman.. Fix similar places.", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r576831547", "createdAt": "2021-02-16T13:43:14Z", "author": {"login": "sumedhe"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.*;\n+\n+public class SCIM2PaginationTestCase extends ISIntegrationTest {\n+\n+    private CloseableHttpClient client;\n+\n+    public static final String TOTAL_RESULTS_ATTRIBUTE = \"totalResults\";\n+    public static final String RESOURCES_ATTRIBUTE = \"Resources\";\n+    public static final String START_INDEX_ATTRIBUTE=\"startIndex\";\n+    public static final String ITEMS_PER_PAGE_ATTRIBUTE=\"itemsPerPage\";\n+    public static final String START_INDEX = \"2\";\n+    public static final String COUNT = \"4\";\n+\n+    private final String adminUsername;\n+    private final String adminPassword;\n+    private final String tenant;\n+    private final int tenantUserCount;\n+\n+    List<String> userIds = new ArrayList<>();\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+        super.init();\n+        client = HttpClients.createDefault();\n+    }\n+\n+    @Factory(dataProvider = \"scim2UserConfigProvider\")\n+    public SCIM2PaginationTestCase(TestUserMode userMode) throws Exception {\n+\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.adminUsername = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.adminPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+        tenantUserCount=context.getContextTenant().getTenantUserList().size();\n+    }\n+\n+    @DataProvider(name = \"scim2UserConfigProvider\")\n+    public static Object[][] scim2UserConfigProvider() {\n+\n+        return new Object[][] {\n+                { TestUserMode.SUPER_TENANT_ADMIN }, { TestUserMode.TENANT_ADMIN }\n+        };\n+    }\n+\n+    //validate user listing with pagination\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPagination() throws Exception {\n+        HttpGet request = new HttpGet(getUserPath()+\"?startIndex=\"+START_INDEX+\"&count=\"+COUNT);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, COUNT,\"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, START_INDEX,\"startIndex in pagination listing is incorrect\");\n+\n+        String itemsPerPage = ((JSONObject) responseObj).get(ITEMS_PER_PAGE_ATTRIBUTE).toString();\n+        assertEquals(itemsPerPage, COUNT,\"itemsPerPage in pagination listing is incorrect\");\n+\n+        int resourcesSize = ((JSONArray)((JSONObject) responseObj).get(RESOURCES_ATTRIBUTE)).size();\n+        assertEquals(String.valueOf(resourcesSize),COUNT,\"resources size in pagination listing is incorrect\");\n+\n+    }\n+\n+    // validating legacy behavior support (returning all the results for not specified list param)\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPaginationWithoutParams() throws Exception {\n+\n+        // current no of users is equal to number of users created  + tenant context users + tenant admin user\n+        int currentUsers=userIds.size()+tenantUserCount + 1;\n+\n+        HttpGet request = new HttpGet(getUserPath());\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, String.valueOf(currentUsers),\"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, \"1\",\"startIndex in pagination listing is incorrect\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee355961ea40bda9032990303661fe81995579aa"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgzMTY5Ng==", "bodyText": "Redundant newline", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r576831696", "createdAt": "2021-02-16T13:43:27Z", "author": {"login": "sumedhe"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.*;\n+\n+public class SCIM2PaginationTestCase extends ISIntegrationTest {\n+\n+    private CloseableHttpClient client;\n+\n+    public static final String TOTAL_RESULTS_ATTRIBUTE = \"totalResults\";\n+    public static final String RESOURCES_ATTRIBUTE = \"Resources\";\n+    public static final String START_INDEX_ATTRIBUTE=\"startIndex\";\n+    public static final String ITEMS_PER_PAGE_ATTRIBUTE=\"itemsPerPage\";\n+    public static final String START_INDEX = \"2\";\n+    public static final String COUNT = \"4\";\n+\n+    private final String adminUsername;\n+    private final String adminPassword;\n+    private final String tenant;\n+    private final int tenantUserCount;\n+\n+    List<String> userIds = new ArrayList<>();\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+        super.init();\n+        client = HttpClients.createDefault();\n+    }\n+\n+    @Factory(dataProvider = \"scim2UserConfigProvider\")\n+    public SCIM2PaginationTestCase(TestUserMode userMode) throws Exception {\n+\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.adminUsername = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.adminPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+        tenantUserCount=context.getContextTenant().getTenantUserList().size();\n+    }\n+\n+    @DataProvider(name = \"scim2UserConfigProvider\")\n+    public static Object[][] scim2UserConfigProvider() {\n+\n+        return new Object[][] {\n+                { TestUserMode.SUPER_TENANT_ADMIN }, { TestUserMode.TENANT_ADMIN }\n+        };\n+    }\n+\n+    //validate user listing with pagination\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPagination() throws Exception {\n+        HttpGet request = new HttpGet(getUserPath()+\"?startIndex=\"+START_INDEX+\"&count=\"+COUNT);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, COUNT,\"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, START_INDEX,\"startIndex in pagination listing is incorrect\");\n+\n+        String itemsPerPage = ((JSONObject) responseObj).get(ITEMS_PER_PAGE_ATTRIBUTE).toString();\n+        assertEquals(itemsPerPage, COUNT,\"itemsPerPage in pagination listing is incorrect\");\n+\n+        int resourcesSize = ((JSONArray)((JSONObject) responseObj).get(RESOURCES_ATTRIBUTE)).size();\n+        assertEquals(String.valueOf(resourcesSize),COUNT,\"resources size in pagination listing is incorrect\");\n+\n+    }\n+\n+    // validating legacy behavior support (returning all the results for not specified list param)\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPaginationWithoutParams() throws Exception {\n+\n+        // current no of users is equal to number of users created  + tenant context users + tenant admin user\n+        int currentUsers=userIds.size()+tenantUserCount + 1;\n+\n+        HttpGet request = new HttpGet(getUserPath());\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, String.valueOf(currentUsers),\"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, \"1\",\"startIndex in pagination listing is incorrect\");\n+\n+        String itemsPerPage = ((JSONObject) responseObj).get(ITEMS_PER_PAGE_ATTRIBUTE).toString();\n+        assertEquals(itemsPerPage, String.valueOf(currentUsers),\"itemsPerPage in pagination listing is incorrect\");\n+\n+        int resourcesSize = ((JSONArray)((JSONObject) responseObj).get(RESOURCES_ATTRIBUTE)).size();\n+        assertEquals(resourcesSize,currentUsers,\"resources size in pagination listing is incorrect\");\n+\n+    }\n+\n+    @Test\n+    public void testCreateUser() throws Exception {\n+\n+        for (int i = 0; i < 10; i++) {\n+            createUser(\"Family\"+i, \"user\"+i, \"user\"+i,\n+                    \"user\"+i+\"@gmail.com\", \"user\"+i+\"@gmail.com\", \"dummyPW\"+i);\n+        }\n+    }\n+\n+    private void createUser(String familyName, String givenName, String userName, String workEmail, String homeEmail,\n+                            String password) throws IOException {\n+\n+        HttpPost request = new HttpPost(getUserPath());\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        JSONObject rootObject = new JSONObject();\n+\n+        JSONArray schemas = new JSONArray();\n+        rootObject.put(SCHEMAS_ATTRIBUTE, schemas);\n+\n+        JSONObject names = new JSONObject();\n+        names.put(FAMILY_NAME_ATTRIBUTE, familyName);\n+        names.put(GIVEN_NAME_ATTRIBUTE, givenName);\n+\n+        rootObject.put(NAME_ATTRIBUTE, names);\n+        rootObject.put(USER_NAME_ATTRIBUTE, userName);\n+\n+        JSONObject emailWork = new JSONObject();\n+        emailWork.put(TYPE_PARAM, EMAIL_TYPE_WORK_ATTRIBUTE);\n+        emailWork.put(VALUE_PARAM, workEmail);\n+\n+        JSONObject emailHome = new JSONObject();\n+        emailHome.put(TYPE_PARAM, EMAIL_TYPE_HOME_ATTRIBUTE);\n+        emailHome.put(VALUE_PARAM, homeEmail);\n+\n+        JSONArray emails = new JSONArray();\n+        emails.add(emailWork);\n+        emails.add(emailHome);\n+\n+        rootObject.put(EMAILS_ATTRIBUTE, emails);\n+\n+        rootObject.put(PASSWORD_ATTRIBUTE, password);\n+\n+        StringEntity entity = new StringEntity(rootObject.toString());\n+        request.setEntity(entity);\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 201, \"User has not been created successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String usernameFromResponse = ((JSONObject) responseObj).get(USER_NAME_ATTRIBUTE).toString();\n+        assertEquals(usernameFromResponse, userName);\n+\n+        String userId;\n+        userId = ((JSONObject) responseObj).get(ID_ATTRIBUTE).toString();\n+        userIds.add(userId);\n+        assertNotNull(userId);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee355961ea40bda9032990303661fe81995579aa"}, "originalPosition": 197}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0e8118430815079d6a22ea2328a79be52c1d4db", "author": {"user": {"login": "EANimesha", "name": "Nimesha Dilini"}}, "url": "https://github.com/wso2/product-is/commit/c0e8118430815079d6a22ea2328a79be52c1d4db", "committedDate": "2021-02-22T09:18:55Z", "message": "added SCIM2 pagination test cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "192a6676cb54d3a98e75dad8960d43504b75e804", "author": {"user": {"login": "EANimesha", "name": "Nimesha Dilini"}}, "url": "https://github.com/wso2/product-is/commit/192a6676cb54d3a98e75dad8960d43504b75e804", "committedDate": "2021-02-18T11:49:04Z", "message": "removed unwanted comment"}, "afterCommit": {"oid": "c0e8118430815079d6a22ea2328a79be52c1d4db", "author": {"user": {"login": "EANimesha", "name": "Nimesha Dilini"}}, "url": "https://github.com/wso2/product-is/commit/c0e8118430815079d6a22ea2328a79be52c1d4db", "committedDate": "2021-02-22T09:18:55Z", "message": "added SCIM2 pagination test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAxNjE3MzAw", "url": "https://github.com/wso2/product-is/pull/10345#pullrequestreview-601617300", "createdAt": "2021-03-02T09:41:26Z", "commit": {"oid": "c0e8118430815079d6a22ea2328a79be52c1d4db"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAxNjMwMzY2", "url": "https://github.com/wso2/product-is/pull/10345#pullrequestreview-601630366", "createdAt": "2021-03-02T09:54:38Z", "commit": {"oid": "c0e8118430815079d6a22ea2328a79be52c1d4db"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAxNjUxNDUw", "url": "https://github.com/wso2/product-is/pull/10345#pullrequestreview-601651450", "createdAt": "2021-03-02T10:16:44Z", "commit": {"oid": "c0e8118430815079d6a22ea2328a79be52c1d4db"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQxMDoxNjo0NFrOIuUP8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQxMDoyNTowM1rOIuUmfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQzNzE3MA==", "bodyText": "Year 2020 --> 2021", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r585437170", "createdAt": "2021-03-02T10:16:44Z", "author": {"login": "Pushpalanka"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0e8118430815079d6a22ea2328a79be52c1d4db"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQzODMzNg==", "bodyText": "Ending dot of the sentense is required for the message.", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r585438336", "createdAt": "2021-03-02T10:18:18Z", "author": {"login": "Pushpalanka"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.integration.common.utils.LoginLogoutClient;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAILS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_HOME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_WORK_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.FAMILY_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.GIVEN_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.ID_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.PASSWORD_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCHEMAS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCIM2_USERS_ENDPOINT;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SERVER_URL;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.TYPE_PARAM;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.USER_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.VALUE_PARAM;\n+\n+public class SCIM2PaginationTestCase extends ISIntegrationTest {\n+\n+    public static final String TOTAL_RESULTS_ATTRIBUTE = \"totalResults\";\n+    public static final String RESOURCES_ATTRIBUTE = \"Resources\";\n+    public static final String START_INDEX_ATTRIBUTE = \"startIndex\";\n+    public static final String ITEMS_PER_PAGE_ATTRIBUTE = \"itemsPerPage\";\n+    public static final String START_INDEX = \"2\";\n+    public static final String COUNT = \"4\";\n+    private final String adminUsername;\n+    private final String adminPassword;\n+    private final String tenant;\n+    List<String> userIds = new ArrayList<>();\n+    UserManagementClient userMgtClient;\n+    AutomationContext automationContext;\n+    String backendUrl = null;\n+    String sessionCookie = null;\n+    private CloseableHttpClient client;\n+\n+    @Factory(dataProvider = \"scim2UserConfigProvider\")\n+    public SCIM2PaginationTestCase(TestUserMode userMode) throws Exception {\n+\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.adminUsername = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.adminPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+\n+        automationContext = new AutomationContext(\"IDENTITY\", userMode);\n+        backendUrl = automationContext.getContextUrls().getBackEndUrl();\n+        sessionCookie = new LoginLogoutClient(automationContext).login();\n+        userMgtClient = new UserManagementClient(backendUrl, sessionCookie);\n+    }\n+\n+    @DataProvider(name = \"scim2UserConfigProvider\")\n+    public static Object[][] scim2UserConfigProvider() {\n+\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        client = HttpClients.createDefault();\n+    }\n+\n+    /*\n+    Validate user listing with pagination.\n+    */\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPagination() throws Exception {\n+\n+        HttpGet request = new HttpGet(getUserPath() + \"?startIndex=\" + START_INDEX + \"&count=\" + COUNT);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0e8118430815079d6a22ea2328a79be52c1d4db"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQzODU5Ng==", "bodyText": "Ending dot of the sentense is required for the message. Use the sentense case with first letter Capital.", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r585438596", "createdAt": "2021-03-02T10:18:40Z", "author": {"login": "Pushpalanka"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.integration.common.utils.LoginLogoutClient;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAILS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_HOME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_WORK_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.FAMILY_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.GIVEN_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.ID_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.PASSWORD_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCHEMAS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCIM2_USERS_ENDPOINT;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SERVER_URL;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.TYPE_PARAM;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.USER_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.VALUE_PARAM;\n+\n+public class SCIM2PaginationTestCase extends ISIntegrationTest {\n+\n+    public static final String TOTAL_RESULTS_ATTRIBUTE = \"totalResults\";\n+    public static final String RESOURCES_ATTRIBUTE = \"Resources\";\n+    public static final String START_INDEX_ATTRIBUTE = \"startIndex\";\n+    public static final String ITEMS_PER_PAGE_ATTRIBUTE = \"itemsPerPage\";\n+    public static final String START_INDEX = \"2\";\n+    public static final String COUNT = \"4\";\n+    private final String adminUsername;\n+    private final String adminPassword;\n+    private final String tenant;\n+    List<String> userIds = new ArrayList<>();\n+    UserManagementClient userMgtClient;\n+    AutomationContext automationContext;\n+    String backendUrl = null;\n+    String sessionCookie = null;\n+    private CloseableHttpClient client;\n+\n+    @Factory(dataProvider = \"scim2UserConfigProvider\")\n+    public SCIM2PaginationTestCase(TestUserMode userMode) throws Exception {\n+\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.adminUsername = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.adminPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+\n+        automationContext = new AutomationContext(\"IDENTITY\", userMode);\n+        backendUrl = automationContext.getContextUrls().getBackEndUrl();\n+        sessionCookie = new LoginLogoutClient(automationContext).login();\n+        userMgtClient = new UserManagementClient(backendUrl, sessionCookie);\n+    }\n+\n+    @DataProvider(name = \"scim2UserConfigProvider\")\n+    public static Object[][] scim2UserConfigProvider() {\n+\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        client = HttpClients.createDefault();\n+    }\n+\n+    /*\n+    Validate user listing with pagination.\n+    */\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPagination() throws Exception {\n+\n+        HttpGet request = new HttpGet(getUserPath() + \"?startIndex=\" + START_INDEX + \"&count=\" + COUNT);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, COUNT, \"total results in pagination listing is incorrect\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0e8118430815079d6a22ea2328a79be52c1d4db"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQzODc5NQ==", "bodyText": "Check other places as well and correct.", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r585438795", "createdAt": "2021-03-02T10:18:56Z", "author": {"login": "Pushpalanka"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.integration.common.utils.LoginLogoutClient;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAILS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_HOME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_WORK_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.FAMILY_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.GIVEN_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.ID_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.PASSWORD_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCHEMAS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCIM2_USERS_ENDPOINT;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SERVER_URL;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.TYPE_PARAM;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.USER_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.VALUE_PARAM;\n+\n+public class SCIM2PaginationTestCase extends ISIntegrationTest {\n+\n+    public static final String TOTAL_RESULTS_ATTRIBUTE = \"totalResults\";\n+    public static final String RESOURCES_ATTRIBUTE = \"Resources\";\n+    public static final String START_INDEX_ATTRIBUTE = \"startIndex\";\n+    public static final String ITEMS_PER_PAGE_ATTRIBUTE = \"itemsPerPage\";\n+    public static final String START_INDEX = \"2\";\n+    public static final String COUNT = \"4\";\n+    private final String adminUsername;\n+    private final String adminPassword;\n+    private final String tenant;\n+    List<String> userIds = new ArrayList<>();\n+    UserManagementClient userMgtClient;\n+    AutomationContext automationContext;\n+    String backendUrl = null;\n+    String sessionCookie = null;\n+    private CloseableHttpClient client;\n+\n+    @Factory(dataProvider = \"scim2UserConfigProvider\")\n+    public SCIM2PaginationTestCase(TestUserMode userMode) throws Exception {\n+\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.adminUsername = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.adminPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+\n+        automationContext = new AutomationContext(\"IDENTITY\", userMode);\n+        backendUrl = automationContext.getContextUrls().getBackEndUrl();\n+        sessionCookie = new LoginLogoutClient(automationContext).login();\n+        userMgtClient = new UserManagementClient(backendUrl, sessionCookie);\n+    }\n+\n+    @DataProvider(name = \"scim2UserConfigProvider\")\n+    public static Object[][] scim2UserConfigProvider() {\n+\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        client = HttpClients.createDefault();\n+    }\n+\n+    /*\n+    Validate user listing with pagination.\n+    */\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPagination() throws Exception {\n+\n+        HttpGet request = new HttpGet(getUserPath() + \"?startIndex=\" + START_INDEX + \"&count=\" + COUNT);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, COUNT, \"total results in pagination listing is incorrect\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQzODU5Ng=="}, "originalCommit": {"oid": "c0e8118430815079d6a22ea2328a79be52c1d4db"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQzOTcyMA==", "bodyText": "Shall we improve readability here. Use of String.format() can be helpful.", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r585439720", "createdAt": "2021-03-02T10:20:17Z", "author": {"login": "Pushpalanka"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.integration.common.utils.LoginLogoutClient;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAILS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_HOME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_WORK_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.FAMILY_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.GIVEN_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.ID_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.PASSWORD_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCHEMAS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCIM2_USERS_ENDPOINT;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SERVER_URL;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.TYPE_PARAM;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.USER_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.VALUE_PARAM;\n+\n+public class SCIM2PaginationTestCase extends ISIntegrationTest {\n+\n+    public static final String TOTAL_RESULTS_ATTRIBUTE = \"totalResults\";\n+    public static final String RESOURCES_ATTRIBUTE = \"Resources\";\n+    public static final String START_INDEX_ATTRIBUTE = \"startIndex\";\n+    public static final String ITEMS_PER_PAGE_ATTRIBUTE = \"itemsPerPage\";\n+    public static final String START_INDEX = \"2\";\n+    public static final String COUNT = \"4\";\n+    private final String adminUsername;\n+    private final String adminPassword;\n+    private final String tenant;\n+    List<String> userIds = new ArrayList<>();\n+    UserManagementClient userMgtClient;\n+    AutomationContext automationContext;\n+    String backendUrl = null;\n+    String sessionCookie = null;\n+    private CloseableHttpClient client;\n+\n+    @Factory(dataProvider = \"scim2UserConfigProvider\")\n+    public SCIM2PaginationTestCase(TestUserMode userMode) throws Exception {\n+\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.adminUsername = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.adminPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+\n+        automationContext = new AutomationContext(\"IDENTITY\", userMode);\n+        backendUrl = automationContext.getContextUrls().getBackEndUrl();\n+        sessionCookie = new LoginLogoutClient(automationContext).login();\n+        userMgtClient = new UserManagementClient(backendUrl, sessionCookie);\n+    }\n+\n+    @DataProvider(name = \"scim2UserConfigProvider\")\n+    public static Object[][] scim2UserConfigProvider() {\n+\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        client = HttpClients.createDefault();\n+    }\n+\n+    /*\n+    Validate user listing with pagination.\n+    */\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPagination() throws Exception {\n+\n+        HttpGet request = new HttpGet(getUserPath() + \"?startIndex=\" + START_INDEX + \"&count=\" + COUNT);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, COUNT, \"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, START_INDEX, \"startIndex in pagination listing is incorrect\");\n+\n+        String itemsPerPage = ((JSONObject) responseObj).get(ITEMS_PER_PAGE_ATTRIBUTE).toString();\n+        assertEquals(itemsPerPage, COUNT, \"itemsPerPage in pagination listing is incorrect\");\n+\n+        int resourcesSize = ((JSONArray) ((JSONObject) responseObj).get(RESOURCES_ATTRIBUTE)).size();\n+        assertEquals(String.valueOf(resourcesSize), COUNT, \"resources size in pagination listing is incorrect\");\n+\n+    }\n+\n+    /*\n+    Validating legacy behavior support (returning all the results for not specified list param).\n+     */\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPaginationWithoutParams() throws Exception {\n+\n+        int currentUsers = getCurrentUsersCount();\n+\n+        HttpGet request = new HttpGet(getUserPath());\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        JSONArray resourcesResponse = (JSONArray) ((JSONObject) ((Object) responseObj)).get(RESOURCES_ATTRIBUTE);\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, String.valueOf(currentUsers), \"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, \"1\", \"startIndex in pagination listing is incorrect\");\n+\n+        String itemsPerPage = ((JSONObject) responseObj).get(ITEMS_PER_PAGE_ATTRIBUTE).toString();\n+        assertEquals(itemsPerPage, String.valueOf(currentUsers), \"itemsPerPage in pagination listing is incorrect\");\n+\n+        int resourcesSize = ((JSONArray) ((JSONObject) responseObj).get(RESOURCES_ATTRIBUTE)).size();\n+        assertEquals(resourcesSize, currentUsers, \"resources size in pagination listing is incorrect\");\n+\n+        assertTrue(isAllUsersExists(resourcesResponse));\n+\n+    }\n+\n+    @Test\n+    public void testCreateUser() throws Exception {\n+\n+        for (int i = 0; i < 10; i++) {\n+            createUser(\"Family\" + i, \"user\" + i, \"user\" + i,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0e8118430815079d6a22ea2328a79be52c1d4db"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQ0MDU2NQ==", "bodyText": "Java variable naming convention matters. userExists --> isUserExist", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r585440565", "createdAt": "2021-03-02T10:21:32Z", "author": {"login": "Pushpalanka"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.integration.common.utils.LoginLogoutClient;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAILS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_HOME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_WORK_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.FAMILY_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.GIVEN_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.ID_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.PASSWORD_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCHEMAS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCIM2_USERS_ENDPOINT;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SERVER_URL;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.TYPE_PARAM;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.USER_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.VALUE_PARAM;\n+\n+public class SCIM2PaginationTestCase extends ISIntegrationTest {\n+\n+    public static final String TOTAL_RESULTS_ATTRIBUTE = \"totalResults\";\n+    public static final String RESOURCES_ATTRIBUTE = \"Resources\";\n+    public static final String START_INDEX_ATTRIBUTE = \"startIndex\";\n+    public static final String ITEMS_PER_PAGE_ATTRIBUTE = \"itemsPerPage\";\n+    public static final String START_INDEX = \"2\";\n+    public static final String COUNT = \"4\";\n+    private final String adminUsername;\n+    private final String adminPassword;\n+    private final String tenant;\n+    List<String> userIds = new ArrayList<>();\n+    UserManagementClient userMgtClient;\n+    AutomationContext automationContext;\n+    String backendUrl = null;\n+    String sessionCookie = null;\n+    private CloseableHttpClient client;\n+\n+    @Factory(dataProvider = \"scim2UserConfigProvider\")\n+    public SCIM2PaginationTestCase(TestUserMode userMode) throws Exception {\n+\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.adminUsername = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.adminPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+\n+        automationContext = new AutomationContext(\"IDENTITY\", userMode);\n+        backendUrl = automationContext.getContextUrls().getBackEndUrl();\n+        sessionCookie = new LoginLogoutClient(automationContext).login();\n+        userMgtClient = new UserManagementClient(backendUrl, sessionCookie);\n+    }\n+\n+    @DataProvider(name = \"scim2UserConfigProvider\")\n+    public static Object[][] scim2UserConfigProvider() {\n+\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        client = HttpClients.createDefault();\n+    }\n+\n+    /*\n+    Validate user listing with pagination.\n+    */\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPagination() throws Exception {\n+\n+        HttpGet request = new HttpGet(getUserPath() + \"?startIndex=\" + START_INDEX + \"&count=\" + COUNT);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, COUNT, \"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, START_INDEX, \"startIndex in pagination listing is incorrect\");\n+\n+        String itemsPerPage = ((JSONObject) responseObj).get(ITEMS_PER_PAGE_ATTRIBUTE).toString();\n+        assertEquals(itemsPerPage, COUNT, \"itemsPerPage in pagination listing is incorrect\");\n+\n+        int resourcesSize = ((JSONArray) ((JSONObject) responseObj).get(RESOURCES_ATTRIBUTE)).size();\n+        assertEquals(String.valueOf(resourcesSize), COUNT, \"resources size in pagination listing is incorrect\");\n+\n+    }\n+\n+    /*\n+    Validating legacy behavior support (returning all the results for not specified list param).\n+     */\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPaginationWithoutParams() throws Exception {\n+\n+        int currentUsers = getCurrentUsersCount();\n+\n+        HttpGet request = new HttpGet(getUserPath());\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        JSONArray resourcesResponse = (JSONArray) ((JSONObject) ((Object) responseObj)).get(RESOURCES_ATTRIBUTE);\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, String.valueOf(currentUsers), \"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, \"1\", \"startIndex in pagination listing is incorrect\");\n+\n+        String itemsPerPage = ((JSONObject) responseObj).get(ITEMS_PER_PAGE_ATTRIBUTE).toString();\n+        assertEquals(itemsPerPage, String.valueOf(currentUsers), \"itemsPerPage in pagination listing is incorrect\");\n+\n+        int resourcesSize = ((JSONArray) ((JSONObject) responseObj).get(RESOURCES_ATTRIBUTE)).size();\n+        assertEquals(resourcesSize, currentUsers, \"resources size in pagination listing is incorrect\");\n+\n+        assertTrue(isAllUsersExists(resourcesResponse));\n+\n+    }\n+\n+    @Test\n+    public void testCreateUser() throws Exception {\n+\n+        for (int i = 0; i < 10; i++) {\n+            createUser(\"Family\" + i, \"user\" + i, \"user\" + i,\n+                    \"user\" + i + \"@gmail.com\", \"user\" + i + \"@gmail.com\", \"dummyPW\" + i);\n+        }\n+    }\n+\n+    private void createUser(String familyName, String givenName, String userName, String workEmail, String homeEmail,\n+                            String password) throws IOException {\n+\n+        HttpPost request = new HttpPost(getUserPath());\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        JSONObject rootObject = new JSONObject();\n+\n+        JSONArray schemas = new JSONArray();\n+        rootObject.put(SCHEMAS_ATTRIBUTE, schemas);\n+\n+        JSONObject names = new JSONObject();\n+        names.put(FAMILY_NAME_ATTRIBUTE, familyName);\n+        names.put(GIVEN_NAME_ATTRIBUTE, givenName);\n+\n+        rootObject.put(NAME_ATTRIBUTE, names);\n+        rootObject.put(USER_NAME_ATTRIBUTE, userName);\n+\n+        JSONObject emailWork = new JSONObject();\n+        emailWork.put(TYPE_PARAM, EMAIL_TYPE_WORK_ATTRIBUTE);\n+        emailWork.put(VALUE_PARAM, workEmail);\n+\n+        JSONObject emailHome = new JSONObject();\n+        emailHome.put(TYPE_PARAM, EMAIL_TYPE_HOME_ATTRIBUTE);\n+        emailHome.put(VALUE_PARAM, homeEmail);\n+\n+        JSONArray emails = new JSONArray();\n+        emails.add(emailWork);\n+        emails.add(emailHome);\n+\n+        rootObject.put(EMAILS_ATTRIBUTE, emails);\n+\n+        rootObject.put(PASSWORD_ATTRIBUTE, password);\n+\n+        StringEntity entity = new StringEntity(rootObject.toString());\n+        request.setEntity(entity);\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 201, \"User has not been created successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String usernameFromResponse = ((JSONObject) responseObj).get(USER_NAME_ATTRIBUTE).toString();\n+        assertEquals(usernameFromResponse, userName);\n+\n+        String userId;\n+        userId = ((JSONObject) responseObj).get(ID_ATTRIBUTE).toString();\n+        userIds.add(userId);\n+        assertNotNull(userId);\n+    }\n+\n+    @Test(dependsOnMethods = {\"testUserListingPagination\", \"testUserListingPaginationWithoutParams\"})\n+    public void testDeleteUser() throws Exception {\n+\n+        for (String userId : userIds) {\n+            deleteUser(userId);\n+        }\n+    }\n+\n+    private void deleteUser(String userId) throws IOException {\n+\n+        String userResourcePath = getUserPath() + \"/\" + userId;\n+        HttpDelete request = new HttpDelete(userResourcePath);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 204, \"User has not been retrieved successfully\");\n+\n+        EntityUtils.consume(response.getEntity());\n+\n+        userResourcePath = getUserPath() + \"/\" + userId;\n+        HttpGet getRequest = new HttpGet(userResourcePath);\n+        getRequest.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        getRequest.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 404, \"User has not been deleted successfully\");\n+        EntityUtils.consume(response.getEntity());\n+    }\n+\n+    private int getCurrentUsersCount() throws Exception {\n+\n+        return userMgtClient.getUserList().size();\n+    }\n+\n+    private boolean isAllUsersExists(JSONArray response) throws Exception {\n+\n+        boolean usersExists = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0e8118430815079d6a22ea2328a79be52c1d4db"}, "originalPosition": 282}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQ0MTM2Nw==", "bodyText": "Wrong code formatting. Please use the wso2 coding style.", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r585441367", "createdAt": "2021-03-02T10:22:44Z", "author": {"login": "Pushpalanka"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.integration.common.utils.LoginLogoutClient;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAILS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_HOME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_WORK_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.FAMILY_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.GIVEN_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.ID_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.PASSWORD_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCHEMAS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCIM2_USERS_ENDPOINT;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SERVER_URL;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.TYPE_PARAM;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.USER_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.VALUE_PARAM;\n+\n+public class SCIM2PaginationTestCase extends ISIntegrationTest {\n+\n+    public static final String TOTAL_RESULTS_ATTRIBUTE = \"totalResults\";\n+    public static final String RESOURCES_ATTRIBUTE = \"Resources\";\n+    public static final String START_INDEX_ATTRIBUTE = \"startIndex\";\n+    public static final String ITEMS_PER_PAGE_ATTRIBUTE = \"itemsPerPage\";\n+    public static final String START_INDEX = \"2\";\n+    public static final String COUNT = \"4\";\n+    private final String adminUsername;\n+    private final String adminPassword;\n+    private final String tenant;\n+    List<String> userIds = new ArrayList<>();\n+    UserManagementClient userMgtClient;\n+    AutomationContext automationContext;\n+    String backendUrl = null;\n+    String sessionCookie = null;\n+    private CloseableHttpClient client;\n+\n+    @Factory(dataProvider = \"scim2UserConfigProvider\")\n+    public SCIM2PaginationTestCase(TestUserMode userMode) throws Exception {\n+\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.adminUsername = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.adminPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+\n+        automationContext = new AutomationContext(\"IDENTITY\", userMode);\n+        backendUrl = automationContext.getContextUrls().getBackEndUrl();\n+        sessionCookie = new LoginLogoutClient(automationContext).login();\n+        userMgtClient = new UserManagementClient(backendUrl, sessionCookie);\n+    }\n+\n+    @DataProvider(name = \"scim2UserConfigProvider\")\n+    public static Object[][] scim2UserConfigProvider() {\n+\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        client = HttpClients.createDefault();\n+    }\n+\n+    /*\n+    Validate user listing with pagination.\n+    */\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPagination() throws Exception {\n+\n+        HttpGet request = new HttpGet(getUserPath() + \"?startIndex=\" + START_INDEX + \"&count=\" + COUNT);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, COUNT, \"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, START_INDEX, \"startIndex in pagination listing is incorrect\");\n+\n+        String itemsPerPage = ((JSONObject) responseObj).get(ITEMS_PER_PAGE_ATTRIBUTE).toString();\n+        assertEquals(itemsPerPage, COUNT, \"itemsPerPage in pagination listing is incorrect\");\n+\n+        int resourcesSize = ((JSONArray) ((JSONObject) responseObj).get(RESOURCES_ATTRIBUTE)).size();\n+        assertEquals(String.valueOf(resourcesSize), COUNT, \"resources size in pagination listing is incorrect\");\n+\n+    }\n+\n+    /*\n+    Validating legacy behavior support (returning all the results for not specified list param).\n+     */\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPaginationWithoutParams() throws Exception {\n+\n+        int currentUsers = getCurrentUsersCount();\n+\n+        HttpGet request = new HttpGet(getUserPath());\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        JSONArray resourcesResponse = (JSONArray) ((JSONObject) ((Object) responseObj)).get(RESOURCES_ATTRIBUTE);\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, String.valueOf(currentUsers), \"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, \"1\", \"startIndex in pagination listing is incorrect\");\n+\n+        String itemsPerPage = ((JSONObject) responseObj).get(ITEMS_PER_PAGE_ATTRIBUTE).toString();\n+        assertEquals(itemsPerPage, String.valueOf(currentUsers), \"itemsPerPage in pagination listing is incorrect\");\n+\n+        int resourcesSize = ((JSONArray) ((JSONObject) responseObj).get(RESOURCES_ATTRIBUTE)).size();\n+        assertEquals(resourcesSize, currentUsers, \"resources size in pagination listing is incorrect\");\n+\n+        assertTrue(isAllUsersExists(resourcesResponse));\n+\n+    }\n+\n+    @Test\n+    public void testCreateUser() throws Exception {\n+\n+        for (int i = 0; i < 10; i++) {\n+            createUser(\"Family\" + i, \"user\" + i, \"user\" + i,\n+                    \"user\" + i + \"@gmail.com\", \"user\" + i + \"@gmail.com\", \"dummyPW\" + i);\n+        }\n+    }\n+\n+    private void createUser(String familyName, String givenName, String userName, String workEmail, String homeEmail,\n+                            String password) throws IOException {\n+\n+        HttpPost request = new HttpPost(getUserPath());\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        JSONObject rootObject = new JSONObject();\n+\n+        JSONArray schemas = new JSONArray();\n+        rootObject.put(SCHEMAS_ATTRIBUTE, schemas);\n+\n+        JSONObject names = new JSONObject();\n+        names.put(FAMILY_NAME_ATTRIBUTE, familyName);\n+        names.put(GIVEN_NAME_ATTRIBUTE, givenName);\n+\n+        rootObject.put(NAME_ATTRIBUTE, names);\n+        rootObject.put(USER_NAME_ATTRIBUTE, userName);\n+\n+        JSONObject emailWork = new JSONObject();\n+        emailWork.put(TYPE_PARAM, EMAIL_TYPE_WORK_ATTRIBUTE);\n+        emailWork.put(VALUE_PARAM, workEmail);\n+\n+        JSONObject emailHome = new JSONObject();\n+        emailHome.put(TYPE_PARAM, EMAIL_TYPE_HOME_ATTRIBUTE);\n+        emailHome.put(VALUE_PARAM, homeEmail);\n+\n+        JSONArray emails = new JSONArray();\n+        emails.add(emailWork);\n+        emails.add(emailHome);\n+\n+        rootObject.put(EMAILS_ATTRIBUTE, emails);\n+\n+        rootObject.put(PASSWORD_ATTRIBUTE, password);\n+\n+        StringEntity entity = new StringEntity(rootObject.toString());\n+        request.setEntity(entity);\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 201, \"User has not been created successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String usernameFromResponse = ((JSONObject) responseObj).get(USER_NAME_ATTRIBUTE).toString();\n+        assertEquals(usernameFromResponse, userName);\n+\n+        String userId;\n+        userId = ((JSONObject) responseObj).get(ID_ATTRIBUTE).toString();\n+        userIds.add(userId);\n+        assertNotNull(userId);\n+    }\n+\n+    @Test(dependsOnMethods = {\"testUserListingPagination\", \"testUserListingPaginationWithoutParams\"})\n+    public void testDeleteUser() throws Exception {\n+\n+        for (String userId : userIds) {\n+            deleteUser(userId);\n+        }\n+    }\n+\n+    private void deleteUser(String userId) throws IOException {\n+\n+        String userResourcePath = getUserPath() + \"/\" + userId;\n+        HttpDelete request = new HttpDelete(userResourcePath);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 204, \"User has not been retrieved successfully\");\n+\n+        EntityUtils.consume(response.getEntity());\n+\n+        userResourcePath = getUserPath() + \"/\" + userId;\n+        HttpGet getRequest = new HttpGet(userResourcePath);\n+        getRequest.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        getRequest.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 404, \"User has not been deleted successfully\");\n+        EntityUtils.consume(response.getEntity());\n+    }\n+\n+    private int getCurrentUsersCount() throws Exception {\n+\n+        return userMgtClient.getUserList().size();\n+    }\n+\n+    private boolean isAllUsersExists(JSONArray response) throws Exception {\n+\n+        boolean usersExists = false;\n+        HashSet<String> usersList = new HashSet<>();\n+        for (Object user : response\n+        ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0e8118430815079d6a22ea2328a79be52c1d4db"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQ0MTczNA==", "bodyText": "Initiate to Set<>. Use the parent collection at declaration.", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r585441734", "createdAt": "2021-03-02T10:23:18Z", "author": {"login": "Pushpalanka"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.integration.common.utils.LoginLogoutClient;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAILS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_HOME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_WORK_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.FAMILY_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.GIVEN_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.ID_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.PASSWORD_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCHEMAS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCIM2_USERS_ENDPOINT;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SERVER_URL;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.TYPE_PARAM;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.USER_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.VALUE_PARAM;\n+\n+public class SCIM2PaginationTestCase extends ISIntegrationTest {\n+\n+    public static final String TOTAL_RESULTS_ATTRIBUTE = \"totalResults\";\n+    public static final String RESOURCES_ATTRIBUTE = \"Resources\";\n+    public static final String START_INDEX_ATTRIBUTE = \"startIndex\";\n+    public static final String ITEMS_PER_PAGE_ATTRIBUTE = \"itemsPerPage\";\n+    public static final String START_INDEX = \"2\";\n+    public static final String COUNT = \"4\";\n+    private final String adminUsername;\n+    private final String adminPassword;\n+    private final String tenant;\n+    List<String> userIds = new ArrayList<>();\n+    UserManagementClient userMgtClient;\n+    AutomationContext automationContext;\n+    String backendUrl = null;\n+    String sessionCookie = null;\n+    private CloseableHttpClient client;\n+\n+    @Factory(dataProvider = \"scim2UserConfigProvider\")\n+    public SCIM2PaginationTestCase(TestUserMode userMode) throws Exception {\n+\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.adminUsername = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.adminPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+\n+        automationContext = new AutomationContext(\"IDENTITY\", userMode);\n+        backendUrl = automationContext.getContextUrls().getBackEndUrl();\n+        sessionCookie = new LoginLogoutClient(automationContext).login();\n+        userMgtClient = new UserManagementClient(backendUrl, sessionCookie);\n+    }\n+\n+    @DataProvider(name = \"scim2UserConfigProvider\")\n+    public static Object[][] scim2UserConfigProvider() {\n+\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        client = HttpClients.createDefault();\n+    }\n+\n+    /*\n+    Validate user listing with pagination.\n+    */\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPagination() throws Exception {\n+\n+        HttpGet request = new HttpGet(getUserPath() + \"?startIndex=\" + START_INDEX + \"&count=\" + COUNT);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, COUNT, \"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, START_INDEX, \"startIndex in pagination listing is incorrect\");\n+\n+        String itemsPerPage = ((JSONObject) responseObj).get(ITEMS_PER_PAGE_ATTRIBUTE).toString();\n+        assertEquals(itemsPerPage, COUNT, \"itemsPerPage in pagination listing is incorrect\");\n+\n+        int resourcesSize = ((JSONArray) ((JSONObject) responseObj).get(RESOURCES_ATTRIBUTE)).size();\n+        assertEquals(String.valueOf(resourcesSize), COUNT, \"resources size in pagination listing is incorrect\");\n+\n+    }\n+\n+    /*\n+    Validating legacy behavior support (returning all the results for not specified list param).\n+     */\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPaginationWithoutParams() throws Exception {\n+\n+        int currentUsers = getCurrentUsersCount();\n+\n+        HttpGet request = new HttpGet(getUserPath());\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        JSONArray resourcesResponse = (JSONArray) ((JSONObject) ((Object) responseObj)).get(RESOURCES_ATTRIBUTE);\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, String.valueOf(currentUsers), \"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, \"1\", \"startIndex in pagination listing is incorrect\");\n+\n+        String itemsPerPage = ((JSONObject) responseObj).get(ITEMS_PER_PAGE_ATTRIBUTE).toString();\n+        assertEquals(itemsPerPage, String.valueOf(currentUsers), \"itemsPerPage in pagination listing is incorrect\");\n+\n+        int resourcesSize = ((JSONArray) ((JSONObject) responseObj).get(RESOURCES_ATTRIBUTE)).size();\n+        assertEquals(resourcesSize, currentUsers, \"resources size in pagination listing is incorrect\");\n+\n+        assertTrue(isAllUsersExists(resourcesResponse));\n+\n+    }\n+\n+    @Test\n+    public void testCreateUser() throws Exception {\n+\n+        for (int i = 0; i < 10; i++) {\n+            createUser(\"Family\" + i, \"user\" + i, \"user\" + i,\n+                    \"user\" + i + \"@gmail.com\", \"user\" + i + \"@gmail.com\", \"dummyPW\" + i);\n+        }\n+    }\n+\n+    private void createUser(String familyName, String givenName, String userName, String workEmail, String homeEmail,\n+                            String password) throws IOException {\n+\n+        HttpPost request = new HttpPost(getUserPath());\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        JSONObject rootObject = new JSONObject();\n+\n+        JSONArray schemas = new JSONArray();\n+        rootObject.put(SCHEMAS_ATTRIBUTE, schemas);\n+\n+        JSONObject names = new JSONObject();\n+        names.put(FAMILY_NAME_ATTRIBUTE, familyName);\n+        names.put(GIVEN_NAME_ATTRIBUTE, givenName);\n+\n+        rootObject.put(NAME_ATTRIBUTE, names);\n+        rootObject.put(USER_NAME_ATTRIBUTE, userName);\n+\n+        JSONObject emailWork = new JSONObject();\n+        emailWork.put(TYPE_PARAM, EMAIL_TYPE_WORK_ATTRIBUTE);\n+        emailWork.put(VALUE_PARAM, workEmail);\n+\n+        JSONObject emailHome = new JSONObject();\n+        emailHome.put(TYPE_PARAM, EMAIL_TYPE_HOME_ATTRIBUTE);\n+        emailHome.put(VALUE_PARAM, homeEmail);\n+\n+        JSONArray emails = new JSONArray();\n+        emails.add(emailWork);\n+        emails.add(emailHome);\n+\n+        rootObject.put(EMAILS_ATTRIBUTE, emails);\n+\n+        rootObject.put(PASSWORD_ATTRIBUTE, password);\n+\n+        StringEntity entity = new StringEntity(rootObject.toString());\n+        request.setEntity(entity);\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 201, \"User has not been created successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String usernameFromResponse = ((JSONObject) responseObj).get(USER_NAME_ATTRIBUTE).toString();\n+        assertEquals(usernameFromResponse, userName);\n+\n+        String userId;\n+        userId = ((JSONObject) responseObj).get(ID_ATTRIBUTE).toString();\n+        userIds.add(userId);\n+        assertNotNull(userId);\n+    }\n+\n+    @Test(dependsOnMethods = {\"testUserListingPagination\", \"testUserListingPaginationWithoutParams\"})\n+    public void testDeleteUser() throws Exception {\n+\n+        for (String userId : userIds) {\n+            deleteUser(userId);\n+        }\n+    }\n+\n+    private void deleteUser(String userId) throws IOException {\n+\n+        String userResourcePath = getUserPath() + \"/\" + userId;\n+        HttpDelete request = new HttpDelete(userResourcePath);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 204, \"User has not been retrieved successfully\");\n+\n+        EntityUtils.consume(response.getEntity());\n+\n+        userResourcePath = getUserPath() + \"/\" + userId;\n+        HttpGet getRequest = new HttpGet(userResourcePath);\n+        getRequest.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        getRequest.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 404, \"User has not been deleted successfully\");\n+        EntityUtils.consume(response.getEntity());\n+    }\n+\n+    private int getCurrentUsersCount() throws Exception {\n+\n+        return userMgtClient.getUserList().size();\n+    }\n+\n+    private boolean isAllUsersExists(JSONArray response) throws Exception {\n+\n+        boolean usersExists = false;\n+        HashSet<String> usersList = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0e8118430815079d6a22ea2328a79be52c1d4db"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQ0Mjk0MA==", "bodyText": "Switch the variables side to avoid NPE.", "url": "https://github.com/wso2/product-is/pull/10345#discussion_r585442940", "createdAt": "2021-03-02T10:25:03Z", "author": {"login": "Pushpalanka"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/SCIM2PaginationTestCase.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.scim2;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.integration.common.utils.LoginLogoutClient;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAILS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_HOME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.EMAIL_TYPE_WORK_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.FAMILY_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.GIVEN_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.ID_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.PASSWORD_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCHEMAS_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SCIM2_USERS_ENDPOINT;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.SERVER_URL;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.TYPE_PARAM;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.USER_NAME_ATTRIBUTE;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.VALUE_PARAM;\n+\n+public class SCIM2PaginationTestCase extends ISIntegrationTest {\n+\n+    public static final String TOTAL_RESULTS_ATTRIBUTE = \"totalResults\";\n+    public static final String RESOURCES_ATTRIBUTE = \"Resources\";\n+    public static final String START_INDEX_ATTRIBUTE = \"startIndex\";\n+    public static final String ITEMS_PER_PAGE_ATTRIBUTE = \"itemsPerPage\";\n+    public static final String START_INDEX = \"2\";\n+    public static final String COUNT = \"4\";\n+    private final String adminUsername;\n+    private final String adminPassword;\n+    private final String tenant;\n+    List<String> userIds = new ArrayList<>();\n+    UserManagementClient userMgtClient;\n+    AutomationContext automationContext;\n+    String backendUrl = null;\n+    String sessionCookie = null;\n+    private CloseableHttpClient client;\n+\n+    @Factory(dataProvider = \"scim2UserConfigProvider\")\n+    public SCIM2PaginationTestCase(TestUserMode userMode) throws Exception {\n+\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.adminUsername = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.adminPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+\n+        automationContext = new AutomationContext(\"IDENTITY\", userMode);\n+        backendUrl = automationContext.getContextUrls().getBackEndUrl();\n+        sessionCookie = new LoginLogoutClient(automationContext).login();\n+        userMgtClient = new UserManagementClient(backendUrl, sessionCookie);\n+    }\n+\n+    @DataProvider(name = \"scim2UserConfigProvider\")\n+    public static Object[][] scim2UserConfigProvider() {\n+\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        client = HttpClients.createDefault();\n+    }\n+\n+    /*\n+    Validate user listing with pagination.\n+    */\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPagination() throws Exception {\n+\n+        HttpGet request = new HttpGet(getUserPath() + \"?startIndex=\" + START_INDEX + \"&count=\" + COUNT);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, COUNT, \"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, START_INDEX, \"startIndex in pagination listing is incorrect\");\n+\n+        String itemsPerPage = ((JSONObject) responseObj).get(ITEMS_PER_PAGE_ATTRIBUTE).toString();\n+        assertEquals(itemsPerPage, COUNT, \"itemsPerPage in pagination listing is incorrect\");\n+\n+        int resourcesSize = ((JSONArray) ((JSONObject) responseObj).get(RESOURCES_ATTRIBUTE)).size();\n+        assertEquals(String.valueOf(resourcesSize), COUNT, \"resources size in pagination listing is incorrect\");\n+\n+    }\n+\n+    /*\n+    Validating legacy behavior support (returning all the results for not specified list param).\n+     */\n+    @Test(dependsOnMethods = \"testCreateUser\")\n+    public void testUserListingPaginationWithoutParams() throws Exception {\n+\n+        int currentUsers = getCurrentUsersCount();\n+\n+        HttpGet request = new HttpGet(getUserPath());\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 200, \"Users \" +\n+                \"has not been retrieved successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        JSONArray resourcesResponse = (JSONArray) ((JSONObject) ((Object) responseObj)).get(RESOURCES_ATTRIBUTE);\n+\n+        String totalResults = ((JSONObject) responseObj).get(TOTAL_RESULTS_ATTRIBUTE).toString();\n+        assertEquals(totalResults, String.valueOf(currentUsers), \"total results in pagination listing is incorrect\");\n+\n+        String startIndex = ((JSONObject) responseObj).get(START_INDEX_ATTRIBUTE).toString();\n+        assertEquals(startIndex, \"1\", \"startIndex in pagination listing is incorrect\");\n+\n+        String itemsPerPage = ((JSONObject) responseObj).get(ITEMS_PER_PAGE_ATTRIBUTE).toString();\n+        assertEquals(itemsPerPage, String.valueOf(currentUsers), \"itemsPerPage in pagination listing is incorrect\");\n+\n+        int resourcesSize = ((JSONArray) ((JSONObject) responseObj).get(RESOURCES_ATTRIBUTE)).size();\n+        assertEquals(resourcesSize, currentUsers, \"resources size in pagination listing is incorrect\");\n+\n+        assertTrue(isAllUsersExists(resourcesResponse));\n+\n+    }\n+\n+    @Test\n+    public void testCreateUser() throws Exception {\n+\n+        for (int i = 0; i < 10; i++) {\n+            createUser(\"Family\" + i, \"user\" + i, \"user\" + i,\n+                    \"user\" + i + \"@gmail.com\", \"user\" + i + \"@gmail.com\", \"dummyPW\" + i);\n+        }\n+    }\n+\n+    private void createUser(String familyName, String givenName, String userName, String workEmail, String homeEmail,\n+                            String password) throws IOException {\n+\n+        HttpPost request = new HttpPost(getUserPath());\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        JSONObject rootObject = new JSONObject();\n+\n+        JSONArray schemas = new JSONArray();\n+        rootObject.put(SCHEMAS_ATTRIBUTE, schemas);\n+\n+        JSONObject names = new JSONObject();\n+        names.put(FAMILY_NAME_ATTRIBUTE, familyName);\n+        names.put(GIVEN_NAME_ATTRIBUTE, givenName);\n+\n+        rootObject.put(NAME_ATTRIBUTE, names);\n+        rootObject.put(USER_NAME_ATTRIBUTE, userName);\n+\n+        JSONObject emailWork = new JSONObject();\n+        emailWork.put(TYPE_PARAM, EMAIL_TYPE_WORK_ATTRIBUTE);\n+        emailWork.put(VALUE_PARAM, workEmail);\n+\n+        JSONObject emailHome = new JSONObject();\n+        emailHome.put(TYPE_PARAM, EMAIL_TYPE_HOME_ATTRIBUTE);\n+        emailHome.put(VALUE_PARAM, homeEmail);\n+\n+        JSONArray emails = new JSONArray();\n+        emails.add(emailWork);\n+        emails.add(emailHome);\n+\n+        rootObject.put(EMAILS_ATTRIBUTE, emails);\n+\n+        rootObject.put(PASSWORD_ATTRIBUTE, password);\n+\n+        StringEntity entity = new StringEntity(rootObject.toString());\n+        request.setEntity(entity);\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 201, \"User has not been created successfully\");\n+\n+        Object responseObj = JSONValue.parse(EntityUtils.toString(response.getEntity()));\n+        EntityUtils.consume(response.getEntity());\n+\n+        String usernameFromResponse = ((JSONObject) responseObj).get(USER_NAME_ATTRIBUTE).toString();\n+        assertEquals(usernameFromResponse, userName);\n+\n+        String userId;\n+        userId = ((JSONObject) responseObj).get(ID_ATTRIBUTE).toString();\n+        userIds.add(userId);\n+        assertNotNull(userId);\n+    }\n+\n+    @Test(dependsOnMethods = {\"testUserListingPagination\", \"testUserListingPaginationWithoutParams\"})\n+    public void testDeleteUser() throws Exception {\n+\n+        for (String userId : userIds) {\n+            deleteUser(userId);\n+        }\n+    }\n+\n+    private void deleteUser(String userId) throws IOException {\n+\n+        String userResourcePath = getUserPath() + \"/\" + userId;\n+        HttpDelete request = new HttpDelete(userResourcePath);\n+        request.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        HttpResponse response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 204, \"User has not been retrieved successfully\");\n+\n+        EntityUtils.consume(response.getEntity());\n+\n+        userResourcePath = getUserPath() + \"/\" + userId;\n+        HttpGet getRequest = new HttpGet(userResourcePath);\n+        getRequest.addHeader(HttpHeaders.AUTHORIZATION, getAuthzHeader());\n+        getRequest.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");\n+\n+        response = client.execute(request);\n+        assertEquals(response.getStatusLine().getStatusCode(), 404, \"User has not been deleted successfully\");\n+        EntityUtils.consume(response.getEntity());\n+    }\n+\n+    private int getCurrentUsersCount() throws Exception {\n+\n+        return userMgtClient.getUserList().size();\n+    }\n+\n+    private boolean isAllUsersExists(JSONArray response) throws Exception {\n+\n+        boolean usersExists = false;\n+        HashSet<String> usersList = new HashSet<>();\n+        for (Object user : response\n+        ) {\n+            usersList.add(((JSONObject) user).get(USER_NAME_ATTRIBUTE).toString());\n+        }\n+        if (userMgtClient.getUserList().equals(usersList)) {\n+            usersExists = true;\n+        }\n+        return usersExists;\n+    }\n+\n+    private String getUserPath() {\n+\n+        if (tenant.equals(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0e8118430815079d6a22ea2328a79be52c1d4db"}, "originalPosition": 296}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "816d781542d92f6114aa55773dd0857d75e10d04", "author": {"user": {"login": "EANimesha", "name": "Nimesha Dilini"}}, "url": "https://github.com/wso2/product-is/commit/816d781542d92f6114aa55773dd0857d75e10d04", "committedDate": "2021-03-02T13:29:04Z", "message": "updated for comments, improve code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAxOTI2OTU3", "url": "https://github.com/wso2/product-is/pull/10345#pullrequestreview-601926957", "createdAt": "2021-03-02T15:12:33Z", "commit": {"oid": "816d781542d92f6114aa55773dd0857d75e10d04"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1253, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}