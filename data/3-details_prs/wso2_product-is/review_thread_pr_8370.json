{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMDU1MzUz", "number": 8370, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMTo1OTozM1rOD9w_cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNjoxNToyNFrOEgtjTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDkyNDAzOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMTo1OTozM1rOGXdAag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzowMDo1NlrOGX5pAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0NTY3NA==", "bodyText": "Is this URL correct? This should be https://localhost:9853/t/wso2.com/scim2/Users?", "url": "https://github.com/wso2/product-is/pull/8370#discussion_r427245674", "createdAt": "2020-05-19T11:59:33Z", "author": {"login": "ashensw"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.idp.mgt;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n+\n+    private IdentityProviderMgtServiceClient idpMgtServiceClient;\n+    private AuthenticatorClient loginManger;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test getResidentIdP configs\")\n+    public void testGetResidentIdP() throws Exception {\n+\n+        log.info(\"Retrieving resident identity provide\");\n+        IdentityProvider idProvider = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations.\n+        FederatedAuthenticatorConfig[] authConfigs = idProvider.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : authConfigs) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found \");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp\",\n+                \"Expected ECP URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected Logout URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected SSO URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdPEntityId\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/oauth2/jwks\", \"Expected is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found\");\n+\n+        //Extract provisioning configurations.\n+        ProvisioningConnectorConfig[] provisioningConfigs = idProvider.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigs) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Users\",\n+                \"Expected SCIM 2.0 User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2GroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Groups\",\n+                \"Expected SCIM 2.0 Group Endpoint is not found\");\n+\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem\n+                (null, null);\n+        loginManger = new AuthenticatorClient(isServer.getContextUrls().getBackEndUrl());\n+        String cookie = loginManger.login(\"admin@wso2.com\", \"admin\",\n+                isServer.getInstance().getHosts().get(\"default\"));\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(cookie, isServer.getContextUrls().getBackEndUrl(),\n+                configContext);\n+\n+        IdentityProvider residentIdP = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations for tenant.\n+        FederatedAuthenticatorConfig[] fedAuthConfigsTenant = residentIdP.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigTenantMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : fedAuthConfigsTenant) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp?tenantDomain=wso2.com\",\n+                \"Expected ECP URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected Logout URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected SSO URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/t/wso2.com/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/jwks\",\n+                \"Expected is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found in the tenant mode\");\n+\n+        //Extract provisioning configurations for tenant.\n+        ProvisioningConnectorConfig[] provisioningConfigsTenant = residentIdP.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigTenantMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigsTenant) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found in the tenant mode\");\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found in the tenant mode\");\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/t/wso2.com/wso2/scim2/Users\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c89aa2a02c68c59a66a455188686009c5c85e08"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0ODgyNQ==", "bodyText": "In management console, SCIM 2.0 User Endpoint URL is shown as https://localhost:9443/t/wso2.com/wso2/scim2/Users in tenant mode", "url": "https://github.com/wso2/product-is/pull/8370#discussion_r427248825", "createdAt": "2020-05-19T12:05:11Z", "author": {"login": "GANGANI"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.idp.mgt;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n+\n+    private IdentityProviderMgtServiceClient idpMgtServiceClient;\n+    private AuthenticatorClient loginManger;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test getResidentIdP configs\")\n+    public void testGetResidentIdP() throws Exception {\n+\n+        log.info(\"Retrieving resident identity provide\");\n+        IdentityProvider idProvider = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations.\n+        FederatedAuthenticatorConfig[] authConfigs = idProvider.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : authConfigs) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found \");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp\",\n+                \"Expected ECP URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected Logout URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected SSO URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdPEntityId\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/oauth2/jwks\", \"Expected is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found\");\n+\n+        //Extract provisioning configurations.\n+        ProvisioningConnectorConfig[] provisioningConfigs = idProvider.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigs) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Users\",\n+                \"Expected SCIM 2.0 User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2GroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Groups\",\n+                \"Expected SCIM 2.0 Group Endpoint is not found\");\n+\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem\n+                (null, null);\n+        loginManger = new AuthenticatorClient(isServer.getContextUrls().getBackEndUrl());\n+        String cookie = loginManger.login(\"admin@wso2.com\", \"admin\",\n+                isServer.getInstance().getHosts().get(\"default\"));\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(cookie, isServer.getContextUrls().getBackEndUrl(),\n+                configContext);\n+\n+        IdentityProvider residentIdP = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations for tenant.\n+        FederatedAuthenticatorConfig[] fedAuthConfigsTenant = residentIdP.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigTenantMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : fedAuthConfigsTenant) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp?tenantDomain=wso2.com\",\n+                \"Expected ECP URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected Logout URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected SSO URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/t/wso2.com/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/jwks\",\n+                \"Expected is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found in the tenant mode\");\n+\n+        //Extract provisioning configurations for tenant.\n+        ProvisioningConnectorConfig[] provisioningConfigsTenant = residentIdP.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigTenantMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigsTenant) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found in the tenant mode\");\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found in the tenant mode\");\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/t/wso2.com/wso2/scim2/Users\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0NTY3NA=="}, "originalCommit": {"oid": "7c89aa2a02c68c59a66a455188686009c5c85e08"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2MDg5OQ==", "bodyText": "I think its a bug :)\nwe need to fix it and change the tests as well", "url": "https://github.com/wso2/product-is/pull/8370#discussion_r427360899", "createdAt": "2020-05-19T14:45:36Z", "author": {"login": "mefarazath"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.idp.mgt;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n+\n+    private IdentityProviderMgtServiceClient idpMgtServiceClient;\n+    private AuthenticatorClient loginManger;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test getResidentIdP configs\")\n+    public void testGetResidentIdP() throws Exception {\n+\n+        log.info(\"Retrieving resident identity provide\");\n+        IdentityProvider idProvider = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations.\n+        FederatedAuthenticatorConfig[] authConfigs = idProvider.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : authConfigs) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found \");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp\",\n+                \"Expected ECP URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected Logout URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected SSO URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdPEntityId\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/oauth2/jwks\", \"Expected is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found\");\n+\n+        //Extract provisioning configurations.\n+        ProvisioningConnectorConfig[] provisioningConfigs = idProvider.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigs) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Users\",\n+                \"Expected SCIM 2.0 User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2GroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Groups\",\n+                \"Expected SCIM 2.0 Group Endpoint is not found\");\n+\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem\n+                (null, null);\n+        loginManger = new AuthenticatorClient(isServer.getContextUrls().getBackEndUrl());\n+        String cookie = loginManger.login(\"admin@wso2.com\", \"admin\",\n+                isServer.getInstance().getHosts().get(\"default\"));\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(cookie, isServer.getContextUrls().getBackEndUrl(),\n+                configContext);\n+\n+        IdentityProvider residentIdP = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations for tenant.\n+        FederatedAuthenticatorConfig[] fedAuthConfigsTenant = residentIdP.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigTenantMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : fedAuthConfigsTenant) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp?tenantDomain=wso2.com\",\n+                \"Expected ECP URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected Logout URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected SSO URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/t/wso2.com/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/jwks\",\n+                \"Expected is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found in the tenant mode\");\n+\n+        //Extract provisioning configurations for tenant.\n+        ProvisioningConnectorConfig[] provisioningConfigsTenant = residentIdP.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigTenantMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigsTenant) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found in the tenant mode\");\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found in the tenant mode\");\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/t/wso2.com/wso2/scim2/Users\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0NTY3NA=="}, "originalCommit": {"oid": "7c89aa2a02c68c59a66a455188686009c5c85e08"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxNDgxNg==", "bodyText": "Bug was fixed in PR: wso2/carbon-identity-framework#2946 and tests were changed in f196fdb", "url": "https://github.com/wso2/product-is/pull/8370#discussion_r427714816", "createdAt": "2020-05-20T03:00:56Z", "author": {"login": "GANGANI"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.idp.mgt;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n+\n+    private IdentityProviderMgtServiceClient idpMgtServiceClient;\n+    private AuthenticatorClient loginManger;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test getResidentIdP configs\")\n+    public void testGetResidentIdP() throws Exception {\n+\n+        log.info(\"Retrieving resident identity provide\");\n+        IdentityProvider idProvider = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations.\n+        FederatedAuthenticatorConfig[] authConfigs = idProvider.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : authConfigs) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found \");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp\",\n+                \"Expected ECP URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected Logout URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected SSO URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdPEntityId\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/oauth2/jwks\", \"Expected is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found\");\n+\n+        //Extract provisioning configurations.\n+        ProvisioningConnectorConfig[] provisioningConfigs = idProvider.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigs) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Users\",\n+                \"Expected SCIM 2.0 User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2GroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Groups\",\n+                \"Expected SCIM 2.0 Group Endpoint is not found\");\n+\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem\n+                (null, null);\n+        loginManger = new AuthenticatorClient(isServer.getContextUrls().getBackEndUrl());\n+        String cookie = loginManger.login(\"admin@wso2.com\", \"admin\",\n+                isServer.getInstance().getHosts().get(\"default\"));\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(cookie, isServer.getContextUrls().getBackEndUrl(),\n+                configContext);\n+\n+        IdentityProvider residentIdP = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations for tenant.\n+        FederatedAuthenticatorConfig[] fedAuthConfigsTenant = residentIdP.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigTenantMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : fedAuthConfigsTenant) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp?tenantDomain=wso2.com\",\n+                \"Expected ECP URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected Logout URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected SSO URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/t/wso2.com/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/jwks\",\n+                \"Expected is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found in the tenant mode\");\n+\n+        //Extract provisioning configurations for tenant.\n+        ProvisioningConnectorConfig[] provisioningConfigsTenant = residentIdP.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigTenantMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigsTenant) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found in the tenant mode\");\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found in the tenant mode\");\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/t/wso2.com/wso2/scim2/Users\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0NTY3NA=="}, "originalCommit": {"oid": "7c89aa2a02c68c59a66a455188686009c5c85e08"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDkyNTIwOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMTo1OTo1N1rOGXdBLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzowMTowOFrOGX5pJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0NTg2OA==", "bodyText": "Same as above.", "url": "https://github.com/wso2/product-is/pull/8370#discussion_r427245868", "createdAt": "2020-05-19T11:59:57Z", "author": {"login": "ashensw"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.idp.mgt;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n+\n+    private IdentityProviderMgtServiceClient idpMgtServiceClient;\n+    private AuthenticatorClient loginManger;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test getResidentIdP configs\")\n+    public void testGetResidentIdP() throws Exception {\n+\n+        log.info(\"Retrieving resident identity provide\");\n+        IdentityProvider idProvider = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations.\n+        FederatedAuthenticatorConfig[] authConfigs = idProvider.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : authConfigs) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found \");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp\",\n+                \"Expected ECP URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected Logout URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected SSO URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdPEntityId\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/oauth2/jwks\", \"Expected is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found\");\n+\n+        //Extract provisioning configurations.\n+        ProvisioningConnectorConfig[] provisioningConfigs = idProvider.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigs) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Users\",\n+                \"Expected SCIM 2.0 User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2GroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Groups\",\n+                \"Expected SCIM 2.0 Group Endpoint is not found\");\n+\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem\n+                (null, null);\n+        loginManger = new AuthenticatorClient(isServer.getContextUrls().getBackEndUrl());\n+        String cookie = loginManger.login(\"admin@wso2.com\", \"admin\",\n+                isServer.getInstance().getHosts().get(\"default\"));\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(cookie, isServer.getContextUrls().getBackEndUrl(),\n+                configContext);\n+\n+        IdentityProvider residentIdP = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations for tenant.\n+        FederatedAuthenticatorConfig[] fedAuthConfigsTenant = residentIdP.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigTenantMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : fedAuthConfigsTenant) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp?tenantDomain=wso2.com\",\n+                \"Expected ECP URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected Logout URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected SSO URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/t/wso2.com/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/jwks\",\n+                \"Expected is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found in the tenant mode\");\n+\n+        //Extract provisioning configurations for tenant.\n+        ProvisioningConnectorConfig[] provisioningConfigsTenant = residentIdP.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigTenantMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigsTenant) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found in the tenant mode\");\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found in the tenant mode\");\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/t/wso2.com/wso2/scim2/Users\",\n+                \"Expected SCIM 2.0 User Endpoint is not found in the tenant mode\");\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scim2GroupEndpoint\"),\n+                \"https://localhost:9853/t/wso2.com/wso2/scim2/Groups\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c89aa2a02c68c59a66a455188686009c5c85e08"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxNDg1Mg==", "bodyText": "Fixed f196fdb", "url": "https://github.com/wso2/product-is/pull/8370#discussion_r427714852", "createdAt": "2020-05-20T03:01:08Z", "author": {"login": "GANGANI"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.idp.mgt;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n+\n+    private IdentityProviderMgtServiceClient idpMgtServiceClient;\n+    private AuthenticatorClient loginManger;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test getResidentIdP configs\")\n+    public void testGetResidentIdP() throws Exception {\n+\n+        log.info(\"Retrieving resident identity provide\");\n+        IdentityProvider idProvider = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations.\n+        FederatedAuthenticatorConfig[] authConfigs = idProvider.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : authConfigs) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found \");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp\",\n+                \"Expected ECP URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected Logout URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected SSO URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdPEntityId\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/oauth2/jwks\", \"Expected is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found\");\n+\n+        //Extract provisioning configurations.\n+        ProvisioningConnectorConfig[] provisioningConfigs = idProvider.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigs) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Users\",\n+                \"Expected SCIM 2.0 User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2GroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Groups\",\n+                \"Expected SCIM 2.0 Group Endpoint is not found\");\n+\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem\n+                (null, null);\n+        loginManger = new AuthenticatorClient(isServer.getContextUrls().getBackEndUrl());\n+        String cookie = loginManger.login(\"admin@wso2.com\", \"admin\",\n+                isServer.getInstance().getHosts().get(\"default\"));\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(cookie, isServer.getContextUrls().getBackEndUrl(),\n+                configContext);\n+\n+        IdentityProvider residentIdP = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations for tenant.\n+        FederatedAuthenticatorConfig[] fedAuthConfigsTenant = residentIdP.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigTenantMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : fedAuthConfigsTenant) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp?tenantDomain=wso2.com\",\n+                \"Expected ECP URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected Logout URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected SSO URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/t/wso2.com/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/jwks\",\n+                \"Expected is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found in the tenant mode\");\n+\n+        //Extract provisioning configurations for tenant.\n+        ProvisioningConnectorConfig[] provisioningConfigsTenant = residentIdP.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigTenantMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigsTenant) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found in the tenant mode\");\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found in the tenant mode\");\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/t/wso2.com/wso2/scim2/Users\",\n+                \"Expected SCIM 2.0 User Endpoint is not found in the tenant mode\");\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scim2GroupEndpoint\"),\n+                \"https://localhost:9853/t/wso2.com/wso2/scim2/Groups\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0NTg2OA=="}, "originalCommit": {"oid": "7c89aa2a02c68c59a66a455188686009c5c85e08"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDkyNzA0OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjowMDoyOVrOGXdCYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjoxNzowMFrOGXdm0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0NjE3OA==", "bodyText": "This is not tenant supported?", "url": "https://github.com/wso2/product-is/pull/8370#discussion_r427246178", "createdAt": "2020-05-19T12:00:29Z", "author": {"login": "ashensw"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.idp.mgt;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n+\n+    private IdentityProviderMgtServiceClient idpMgtServiceClient;\n+    private AuthenticatorClient loginManger;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test getResidentIdP configs\")\n+    public void testGetResidentIdP() throws Exception {\n+\n+        log.info(\"Retrieving resident identity provide\");\n+        IdentityProvider idProvider = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations.\n+        FederatedAuthenticatorConfig[] authConfigs = idProvider.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : authConfigs) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found \");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp\",\n+                \"Expected ECP URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected Logout URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected SSO URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdPEntityId\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/oauth2/jwks\", \"Expected is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found\");\n+\n+        //Extract provisioning configurations.\n+        ProvisioningConnectorConfig[] provisioningConfigs = idProvider.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigs) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Users\",\n+                \"Expected SCIM 2.0 User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2GroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Groups\",\n+                \"Expected SCIM 2.0 Group Endpoint is not found\");\n+\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem\n+                (null, null);\n+        loginManger = new AuthenticatorClient(isServer.getContextUrls().getBackEndUrl());\n+        String cookie = loginManger.login(\"admin@wso2.com\", \"admin\",\n+                isServer.getInstance().getHosts().get(\"default\"));\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(cookie, isServer.getContextUrls().getBackEndUrl(),\n+                configContext);\n+\n+        IdentityProvider residentIdP = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations for tenant.\n+        FederatedAuthenticatorConfig[] fedAuthConfigsTenant = residentIdP.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigTenantMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : fedAuthConfigsTenant) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp?tenantDomain=wso2.com\",\n+                \"Expected ECP URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected Logout URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected SSO URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/t/wso2.com/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/jwks\",\n+                \"Expected is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found in the tenant mode\");\n+\n+        //Extract provisioning configurations for tenant.\n+        ProvisioningConnectorConfig[] provisioningConfigsTenant = residentIdP.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigTenantMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigsTenant) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c89aa2a02c68c59a66a455188686009c5c85e08"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1NTUwNA==", "bodyText": "AFAIK only SCIM 2.0 endpoints have tenant domain in path.", "url": "https://github.com/wso2/product-is/pull/8370#discussion_r427255504", "createdAt": "2020-05-19T12:17:00Z", "author": {"login": "GANGANI"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.idp.mgt;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n+\n+    private IdentityProviderMgtServiceClient idpMgtServiceClient;\n+    private AuthenticatorClient loginManger;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test getResidentIdP configs\")\n+    public void testGetResidentIdP() throws Exception {\n+\n+        log.info(\"Retrieving resident identity provide\");\n+        IdentityProvider idProvider = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations.\n+        FederatedAuthenticatorConfig[] authConfigs = idProvider.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : authConfigs) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found \");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp\",\n+                \"Expected ECP URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected Logout URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected SSO URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdPEntityId\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/oauth2/jwks\", \"Expected is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found\");\n+\n+        //Extract provisioning configurations.\n+        ProvisioningConnectorConfig[] provisioningConfigs = idProvider.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigs) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Users\",\n+                \"Expected SCIM 2.0 User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2GroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Groups\",\n+                \"Expected SCIM 2.0 Group Endpoint is not found\");\n+\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem\n+                (null, null);\n+        loginManger = new AuthenticatorClient(isServer.getContextUrls().getBackEndUrl());\n+        String cookie = loginManger.login(\"admin@wso2.com\", \"admin\",\n+                isServer.getInstance().getHosts().get(\"default\"));\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(cookie, isServer.getContextUrls().getBackEndUrl(),\n+                configContext);\n+\n+        IdentityProvider residentIdP = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations for tenant.\n+        FederatedAuthenticatorConfig[] fedAuthConfigsTenant = residentIdP.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigTenantMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : fedAuthConfigsTenant) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp?tenantDomain=wso2.com\",\n+                \"Expected ECP URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected Logout URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                \"Expected SSO URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/t/wso2.com/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/t/wso2.com/oauth2/jwks\",\n+                \"Expected is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found in the tenant mode\");\n+        Assert.assertEquals(fedAuthConfigTenantMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found in the tenant mode\");\n+\n+        //Extract provisioning configurations for tenant.\n+        ProvisioningConnectorConfig[] provisioningConfigsTenant = residentIdP.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigTenantMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigsTenant) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigTenantMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigTenantMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0NjE3OA=="}, "originalCommit": {"oid": "7c89aa2a02c68c59a66a455188686009c5c85e08"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTU5NDc5OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozOTowMVrOGXjsxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1NTozOVrOGX6Yhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1NTMzNA==", "bodyText": "Let's have a class comment", "url": "https://github.com/wso2/product-is/pull/8370#discussion_r427355334", "createdAt": "2020-05-19T14:39:01Z", "author": {"login": "mefarazath"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.idp.mgt;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ResidentIDPConfigsTestCase extends ISIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c89aa2a02c68c59a66a455188686009c5c85e08"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjk4Mg==", "bodyText": "Added in f196fdb", "url": "https://github.com/wso2/product-is/pull/8370#discussion_r427726982", "createdAt": "2020-05-20T03:55:39Z", "author": {"login": "GANGANI"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.idp.mgt;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ResidentIDPConfigsTestCase extends ISIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1NTMzNA=="}, "originalCommit": {"oid": "7c89aa2a02c68c59a66a455188686009c5c85e08"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTYyMzU4OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDo0NDoyNlrOGXj-8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzowMTo0NFrOGX5pmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1OTk4Nw==", "bodyText": "Can we move the tenant case to a new test case?", "url": "https://github.com/wso2/product-is/pull/8370#discussion_r427359987", "createdAt": "2020-05-19T14:44:26Z", "author": {"login": "mefarazath"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.idp.mgt;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n+\n+    private IdentityProviderMgtServiceClient idpMgtServiceClient;\n+    private AuthenticatorClient loginManger;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test getResidentIdP configs\")\n+    public void testGetResidentIdP() throws Exception {\n+\n+        log.info(\"Retrieving resident identity provide\");\n+        IdentityProvider idProvider = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations.\n+        FederatedAuthenticatorConfig[] authConfigs = idProvider.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : authConfigs) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found \");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp\",\n+                \"Expected ECP URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected Logout URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected SSO URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdPEntityId\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/oauth2/jwks\", \"Expected is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found\");\n+\n+        //Extract provisioning configurations.\n+        ProvisioningConnectorConfig[] provisioningConfigs = idProvider.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigs) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Users\",\n+                \"Expected SCIM 2.0 User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2GroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Groups\",\n+                \"Expected SCIM 2.0 Group Endpoint is not found\");\n+\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c89aa2a02c68c59a66a455188686009c5c85e08"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxNDk3MQ==", "bodyText": "Done in f196fdb", "url": "https://github.com/wso2/product-is/pull/8370#discussion_r427714971", "createdAt": "2020-05-20T03:01:44Z", "author": {"login": "GANGANI"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.idp.mgt;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n+\n+    private IdentityProviderMgtServiceClient idpMgtServiceClient;\n+    private AuthenticatorClient loginManger;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test getResidentIdP configs\")\n+    public void testGetResidentIdP() throws Exception {\n+\n+        log.info(\"Retrieving resident identity provide\");\n+        IdentityProvider idProvider = idpMgtServiceClient.getResidentIdP();\n+\n+        //Extract authenticator configurations.\n+        FederatedAuthenticatorConfig[] authConfigs = idProvider.getFederatedAuthenticatorConfigs();\n+\n+        Map<String, String> fedAuthConfigMap = new HashMap<String, String>();\n+        for (FederatedAuthenticatorConfig config : authConfigs) {\n+            for (Property property: config.getProperties()) {\n+                fedAuthConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AccessTokenUrl\"),\n+                \"https://localhost:9853/oauth/access-token\",\n+                \"Expected OAuth10a Access Token URL is not found \");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1AuthorizeUrl\"),\n+                \"https://localhost:9853/oauth/authorize-url\",\n+                \"Expected OAuth10a Authorize URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth1RequestTokenUrl\"),\n+                \"https://localhost:9853/oauth/request-token\",\n+                \"Expected OAuth10a Request Token URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdentityProviderUrl\"),\n+                \"https://localhost:9853/passivests\",\n+                \"Expected Passive STS URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OpenIdUrl\"),\n+                \"https://localhost:9853/openidserver\",\n+                \"Expected OpenID Server URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ECPUrl\"),\n+                \"https://localhost:9853/samlecp\",\n+                \"Expected ECP URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"LogoutReqUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected Logout URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"ArtifactResolveUrl\"),\n+                \"https://localhost:9853/samlartresolve\",\n+                \"Expected Artifact Resolution URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"SSOUrl\"),\n+                \"https://localhost:9853/samlsso\",\n+                \"Expected SSO URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IDENTITY_PROVIDER_URL\"),\n+                \"https://localhost:9853/services/wso2carbon-sts\",\n+                \"Expected Security Token Service URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCWebFingerEPUrl\"),\n+                \"https://localhost:9853/.well-known/webfinger\",\n+                \"Expected Web finger Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"IdPEntityId\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCCheckSessionEPUrl\"),\n+                \"https://localhost:9853/oidc/checksession\",\n+                \"Expected Session IFrame Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2IntrospectEPUrl\"),\n+                \"https://localhost:9853/oauth2/introspect\",\n+                \"Expected Token Introspection Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2RevokeEPUrl\"),\n+                \"https://localhost:9853/oauth2/revoke\",\n+                \"Expected Token Revocation Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCLogoutEPUrl\"),\n+                \"https://localhost:9853/oidc/logout\",\n+                \"Expected Logout Endpoint URL not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2AuthzEPUrl\"),\n+                \"https://localhost:9853/oauth2/authorize\",\n+                \"Expected Authorization Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2DCREPUrl\"),\n+                \"https://localhost:9853/api/identity/oauth2/dcr/v1.1/register\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OIDCDiscoveryEPUrl\"),\n+                \"https://localhost:9853/oauth2/oidcdiscovery\",\n+                \"Expected Dynamic Client Registration Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2JWKSPage\"),\n+                \"https://localhost:9853/oauth2/jwks\", \"Expected is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2TokenEPUrl\"),\n+                \"https://localhost:9853/oauth2/token\",\n+                \"Expected Token Endpoint URL is not found\");\n+        Assert.assertEquals(fedAuthConfigMap.get(\"OAuth2UserInfoEPUrl\"),\n+                \"https://localhost:9853/oauth2/userinfo\",\n+                \"Expected User Info Endpoint URL is not found\");\n+\n+        //Extract provisioning configurations.\n+        ProvisioningConnectorConfig[] provisioningConfigs = idProvider.getProvisioningConnectorConfigs();\n+\n+        Map<String, String> provisioningConfigMap = new HashMap<String, String>();\n+        for (ProvisioningConnectorConfig config : provisioningConfigs) {\n+            for (Property property: config.getProvisioningProperties()) {\n+                provisioningConfigMap.put(property.getName(), property.getValue());\n+            }\n+        }\n+\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimGroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Groups\",\n+                \"Expected SCIM Group Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scimUserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim/Users\",\n+                \"Expected SCIM User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2UserEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Users\",\n+                \"Expected SCIM 2.0 User Endpoint is not found\");\n+        Assert.assertEquals(provisioningConfigMap.get(\"scim2GroupEndpoint\"),\n+                \"https://localhost:9853/wso2/scim2/Groups\",\n+                \"Expected SCIM 2.0 Group Endpoint is not found\");\n+\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1OTk4Nw=="}, "originalCommit": {"oid": "7c89aa2a02c68c59a66a455188686009c5c85e08"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzM2MjA3OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNjoxNToyNFrOHNqY1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTo0MjowM1rOHPNkGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA4ODAyMA==", "bodyText": "provide -> provider.", "url": "https://github.com/wso2/product-is/pull/8370#discussion_r484088020", "createdAt": "2020-09-06T16:15:24Z", "author": {"login": "dewniMW"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.idp.mgt;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This test class is to test the resident IDP config URLs in super tenant legacy URL mode and tenant legacy URL mode.\n+ */\n+public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n+\n+    private IdentityProviderMgtServiceClient idpMgtServiceClient;\n+    private AuthenticatorClient loginManger;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test resident IdP config URLs in super tenant mode\")\n+    public void testResidentIdPConfigs() throws Exception {\n+\n+        log.info(\"Retrieving resident identity provide\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f196fdb5ff9850329b87aaffb483f2d68783cb04"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxMjkyMw==", "bodyText": "This code was changed with a706b37", "url": "https://github.com/wso2/product-is/pull/8370#discussion_r485712923", "createdAt": "2020-09-09T15:42:03Z", "author": {"login": "GANGANI"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.idp.mgt;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This test class is to test the resident IDP config URLs in super tenant legacy URL mode and tenant legacy URL mode.\n+ */\n+public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n+\n+    private IdentityProviderMgtServiceClient idpMgtServiceClient;\n+    private AuthenticatorClient loginManger;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test resident IdP config URLs in super tenant mode\")\n+    public void testResidentIdPConfigs() throws Exception {\n+\n+        log.info(\"Retrieving resident identity provide\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA4ODAyMA=="}, "originalCommit": {"oid": "f196fdb5ff9850329b87aaffb483f2d68783cb04"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1411, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}