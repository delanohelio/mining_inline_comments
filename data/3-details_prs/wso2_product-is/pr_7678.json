{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MDk5MTg1", "number": 7678, "title": "Added integration test for ws-trust scenario.", "bodyText": "Added a client which creates a RSTs with the help of a set of RST templates and calls the endpoint and receives the RSTR.\nAdded integration test for scenarios: Issue, Renew and Validate a Security Token. These tests validates whether the received RSTRs are in valid format with the help of a set of RSTR templates.", "createdAt": "2020-02-17T11:59:38Z", "url": "https://github.com/wso2/product-is/pull/7678", "merged": true, "mergeCommit": {"oid": "6c4ee0f6ea772d2b6fed7736389db8066636e903"}, "closed": true, "closedAt": "2020-02-25T10:08:19Z", "author": {"login": "deshankoswatte"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEHc2zAH2gAyMzc2MDk5MTg1OjhjZmYxZTcyMTU0MTJkMTgyYTY0YzU1ZjVhN2Y5NDMzN2Y5NDYzNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHvRfuAFqTM2NDAxNjAzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8cff1e7215412d182a64c55f5a7f94337f946378", "author": {"user": {"login": "deshankoswatte", "name": "Dehami Koswatte"}}, "url": "https://github.com/wso2/product-is/commit/8cff1e7215412d182a64c55f5a7f94337f946378", "committedDate": "2020-02-14T04:02:38Z", "message": "Initial addition for ActiveSTSTestCase."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c24725e99cdf1c77157345f9f60c56a8d15b5eb2", "author": {"user": {"login": "deshankoswatte", "name": "Dehami Koswatte"}}, "url": "https://github.com/wso2/product-is/commit/c24725e99cdf1c77157345f9f60c56a8d15b5eb2", "committedDate": "2020-02-14T04:49:20Z", "message": "Refactored code and added comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2b67e31b35ff0fbc225825ffaa32c261069e5e9", "author": {"user": {"login": "deshankoswatte", "name": "Dehami Koswatte"}}, "url": "https://github.com/wso2/product-is/commit/c2b67e31b35ff0fbc225825ffaa32c261069e5e9", "committedDate": "2020-02-14T11:07:22Z", "message": "Merge branch 'master' of https://github.com/deshankoswatte/product-is into ws-trust-test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eee3b9912db097b43700896bdd47a1b9d595d410", "author": {"user": {"login": "deshankoswatte", "name": "Dehami Koswatte"}}, "url": "https://github.com/wso2/product-is/commit/eee3b9912db097b43700896bdd47a1b9d595d410", "committedDate": "2020-02-14T16:14:04Z", "message": "Add service provider related configurations for ActiveSTSTestCase."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fe3570d84d24cd1e240917b2608e18e64c8f486", "author": {"user": {"login": "deshankoswatte", "name": "Dehami Koswatte"}}, "url": "https://github.com/wso2/product-is/commit/9fe3570d84d24cd1e240917b2608e18e64c8f486", "committedDate": "2020-02-17T09:55:34Z", "message": "Fixed the process of updating the resident IdP with security policy."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4b44c79bd48e01546ae7f4a6605804c7d960eb2", "author": {"user": {"login": "deshankoswatte", "name": "Dehami Koswatte"}}, "url": "https://github.com/wso2/product-is/commit/e4b44c79bd48e01546ae7f4a6605804c7d960eb2", "committedDate": "2020-02-17T11:12:51Z", "message": "Merge branch 'master' into ws-trust-test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06bf47e503d98300cbdcf4e525eacbf48856b244", "author": {"user": {"login": "deshankoswatte", "name": "Dehami Koswatte"}}, "url": "https://github.com/wso2/product-is/commit/06bf47e503d98300cbdcf4e525eacbf48856b244", "committedDate": "2020-02-17T11:52:41Z", "message": "Fix code formatting issue."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxODUwMDc4", "url": "https://github.com/wso2/product-is/pull/7678#pullrequestreview-361850078", "createdAt": "2020-02-20T12:08:17Z", "commit": {"oid": "06bf47e503d98300cbdcf4e525eacbf48856b244"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjowODoxOFrOFsQ9jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjowODoxOFrOFsQ9jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk1OTU2Ng==", "bodyText": "let's remove this.", "url": "https://github.com/wso2/product-is/pull/7678#discussion_r381959566", "createdAt": "2020-02-20T12:08:18Z", "author": {"login": "madurangasiriwardena"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/sts/ActiveSTSTestCase.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.sts;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import org.xmlunit.builder.DiffBuilder;\n+import org.xmlunit.diff.Diff;\n+import org.xmlunit.diff.Difference;\n+\n+import javax.xml.soap.SOAPMessage;\n+\n+import org.wso2.carbon.identity.application.common.model.xsd.InboundAuthenticationRequestConfig;\n+import org.wso2.carbon.identity.application.common.model.xsd.ServiceProvider;\n+import org.wso2.carbon.integration.common.admin.client.SecurityAdminServiceClient;\n+import org.wso2.identity.integration.common.clients.application.mgt.ApplicationManagementServiceClient;\n+import org.wso2.identity.integration.common.clients.sts.ws.trust.util.ClientUtils;\n+import org.wso2.identity.integration.common.clients.sts.ws.trust.util.TestUtils;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.identity.integration.common.clients.sts.ws.trust.\n+        constants.Constants.ACTION_RENEW;\n+import static org.wso2.identity.integration.common.clients.sts.ws.trust.\n+        constants.Constants.ACTION_REQUEST;\n+import static org.wso2.identity.integration.common.clients.sts.ws.trust.\n+        constants.Constants.ACTION_VALIDATE;\n+import static org.wso2.identity.integration.common.clients.sts.ws.trust.\n+        constants.TestConstants.CHANGING_XPATHS_FOR_RENEW_ST_RSTR;\n+import static org.wso2.identity.integration.common.clients.sts.ws.trust.\n+        constants.TestConstants.CHANGING_XPATHS_FOR_REQUEST_ST_RSTR;\n+import static org.wso2.identity.integration.common.clients.sts.ws.trust.\n+        constants.TestConstants.CHANGING_XPATHS_FOR_VALIDATE_ST_RSTR;\n+import static org.wso2.identity.integration.common.clients.sts.ws.trust.\n+        constants.TestConstants.NO_OF_DIFFERENCES_FOR_RENEW_ST_RSTR;\n+import static org.wso2.identity.integration.common.clients.sts.ws.trust.\n+        constants.TestConstants.NO_OF_DIFFERENCES_FOR_REQUEST_ST_RSTR;\n+import static org.wso2.identity.integration.common.clients.sts.ws.trust.\n+        constants.TestConstants.NO_OF_DIFFERENCES_FOR_VALIDATE_ST_RSTR;\n+import static org.wso2.identity.integration.common.clients.sts.ws.trust.\n+        constants.TestConstants.RENEW_ST_RSTR_TEMPLATE;\n+import static org.wso2.identity.integration.common.clients.sts.ws.trust.\n+        constants.TestConstants.REQUEST_ST_RSTR_TEMPLATE;\n+import static org.wso2.identity.integration.common.clients.sts.ws.trust.\n+        constants.TestConstants.VALIDATE_ST_RSTR_TEMPLATE;\n+import static org.wso2.identity.integration.common.clients.sts.ws.trust.\n+        constants.TestConstants.XML_DECLARATION;\n+import static org.wso2.identity.integration.common.clients.sts.ws.trust.\n+        util.TestUtils.convertSoapMessageToString;\n+\n+public class ActiveSTSTestCase extends ISIntegrationTest {\n+\n+    private static final String SERVICE_PROVIDER_NAME = \"ActiveSTSTest\";\n+    private static final String SERVICE_PROVIDER_DESCRIPTION = \"ActiveSTS Service Provider\";\n+\n+    private static final String SERVICE_NAME = \"wso2carbon-sts\";\n+    private static final String POLICY_ID = \"1\";\n+    private static final String USER_GROUP = \"admin\";\n+\n+    private static final String WS_TRUST_AUTH_TYPE = \"wstrust\";\n+    private static final String INBOUND_CONFIG_TYPE = \"standardAPP\";\n+    private static final String ENDPOINT_ADDRESS_VALUE = \"https://localhost:9444/services/echo\";\n+\n+    private static final String ALIAS_PROPERTY = \"alias\";\n+    private static final String ALIAS_VALUE = \"wso2carbon\";\n+\n+    private ServiceProvider serviceProvider;\n+    private ApplicationManagementServiceClient applicationManagementServiceClient;\n+    private SecurityAdminServiceClient securityAdminServiceClient;\n+    private String uri;\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        super.login();\n+        super.setSystemproperties();\n+\n+        ConfigurationContext configContext = ConfigurationContextFactory\n+                .createConfigurationContextFromFileSystem(null, null);\n+        applicationManagementServiceClient = new ApplicationManagementServiceClient(\n+                sessionCookie, backendURL, configContext);\n+        securityAdminServiceClient = new SecurityAdminServiceClient(backendURL, sessionCookie);\n+        securityAdminServiceClient.applySecurity(SERVICE_NAME, POLICY_ID,\n+                new String[]{USER_GROUP}, new String[]{}, null);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testClear() throws Exception {\n+\n+        removeServiceProvider();\n+        serviceProvider = null;\n+        applicationManagementServiceClient = null;\n+        securityAdminServiceClient.disableSecurity(SERVICE_NAME);\n+        securityAdminServiceClient = null;\n+    }\n+\n+    @Test(alwaysRun = true, description = \"Add service provider for the testcase.\")\n+    public void testAddSP() throws Exception {\n+\n+        addServiceProvider();\n+        serviceProvider = applicationManagementServiceClient.getApplication(SERVICE_PROVIDER_NAME);\n+        Assert.assertNotNull(serviceProvider, \"Service provider registration failed.\");\n+    }\n+\n+    @Test(alwaysRun = true, description = \"Update service provider with the required configurations.\"\n+            , dependsOnMethods = {\"testAddSP\"})\n+    public void testUpdateSP() throws Exception {\n+\n+\n+        List<InboundAuthenticationRequestConfig> inboundAuthenticationRequestConfigs = new ArrayList<>();\n+        InboundAuthenticationRequestConfig inboundAuthenticationRequestConfig = new InboundAuthenticationRequestConfig();\n+        inboundAuthenticationRequestConfig.setInboundAuthKey(ENDPOINT_ADDRESS_VALUE);\n+        inboundAuthenticationRequestConfig.setInboundAuthType(WS_TRUST_AUTH_TYPE);\n+        inboundAuthenticationRequestConfig.setInboundConfigType(INBOUND_CONFIG_TYPE);\n+\n+        inboundAuthenticationRequestConfigs.add(inboundAuthenticationRequestConfig);\n+\n+        serviceProvider.getInboundAuthenticationConfig()\n+                .setInboundAuthenticationRequestConfigs(\n+                        inboundAuthenticationRequestConfigs\n+                                .toArray(new InboundAuthenticationRequestConfig[0]));\n+        applicationManagementServiceClient.updateApplicationData(serviceProvider);\n+\n+        Assert.assertNotEquals(applicationManagementServiceClient.getApplication(SERVICE_PROVIDER_NAME)\n+                        .getInboundAuthenticationConfig()\n+                        .getInboundAuthenticationRequestConfigs().length,\n+                0, \"Fail to update service provider with active STS configurations.\");\n+    }\n+\n+    @Test(alwaysRun = true, description = \"Validate the response obtained \" +\n+            \"when a security token is requested from the sts.\", dependsOnMethods = {\"testUpdateSP\"})\n+    public void testRequestSecurityTokenRSTR() throws Exception {\n+\n+        SOAPMessage[] requestSTRequestAndResponse = ClientUtils.callSoapWebService(ACTION_REQUEST);\n+        uri = (requestSTRequestAndResponse[1].getSOAPBody().getElementsByTagName(\"wsse:Reference\")\n+                .item(0).getAttributes().getNamedItem(\"URI\").getNodeValue()).substring(1);\n+\n+        String requestSTResponseTemplate = TestUtils.loadTemplate(REQUEST_ST_RSTR_TEMPLATE);\n+        String requestSTResponse = convertSoapMessageToString(requestSTRequestAndResponse[1])\n+                .replace(XML_DECLARATION, \"\");\n+\n+        compareWithTemplate(requestSTResponseTemplate, requestSTResponse,\n+                CHANGING_XPATHS_FOR_REQUEST_ST_RSTR, NO_OF_DIFFERENCES_FOR_REQUEST_ST_RSTR);\n+    }\n+\n+    @Test(alwaysRun = true, description = \"Validate the response obtained when \" +\n+            \"a renewal request for a security token is sent to the sts.\",\n+            dependsOnMethods = {\"testRequestSecurityTokenRSTR\"})\n+    public void testRenewSecurityTokenRSTR() throws Exception {\n+\n+        SOAPMessage[] renewSTRequestAndResponse = ClientUtils.callSoapWebService(ACTION_RENEW, uri);\n+\n+        String renewSTResponseTemplate = TestUtils.loadTemplate(RENEW_ST_RSTR_TEMPLATE);\n+        String renewSTResponse = convertSoapMessageToString(renewSTRequestAndResponse[1])\n+                .replace(XML_DECLARATION, \"\");\n+\n+        compareWithTemplate(renewSTResponseTemplate, renewSTResponse,\n+                CHANGING_XPATHS_FOR_RENEW_ST_RSTR, NO_OF_DIFFERENCES_FOR_RENEW_ST_RSTR);\n+    }\n+\n+    @Test(alwaysRun = true, description = \"Validate the response obtained when a \" +\n+            \"request is sent to validate a security token from the sts.\",\n+            dependsOnMethods = {\"testRenewSecurityTokenRSTR\"})\n+    public void testValidateSecurityTokenRSTR() throws Exception {\n+\n+        SOAPMessage[] validateSTRequestAndResponse = ClientUtils.callSoapWebService(ACTION_VALIDATE, uri);\n+\n+        String validateSTResponseTemplate = TestUtils.loadTemplate(VALIDATE_ST_RSTR_TEMPLATE);\n+        String validateSTResponse = convertSoapMessageToString(validateSTRequestAndResponse[1])\n+                .replace(XML_DECLARATION, \"\");\n+\n+        compareWithTemplate(validateSTResponseTemplate, validateSTResponse,\n+                CHANGING_XPATHS_FOR_VALIDATE_ST_RSTR, NO_OF_DIFFERENCES_FOR_VALIDATE_ST_RSTR);\n+    }\n+\n+    private void addServiceProvider() throws Exception {\n+\n+        ServiceProvider serviceProvider = new ServiceProvider();\n+        serviceProvider.setApplicationName(SERVICE_PROVIDER_NAME);\n+        serviceProvider.setDescription(SERVICE_PROVIDER_DESCRIPTION);\n+\n+        applicationManagementServiceClient.createApplication(serviceProvider);\n+    }\n+\n+    private void removeServiceProvider() throws Exception {\n+\n+        applicationManagementServiceClient.deleteApplication(SERVICE_PROVIDER_NAME);\n+    }\n+\n+    private void compareWithTemplate(String staticTemplate, String obtainedResponse,\n+                                     List<String> expectedValues, int expectedNoOfChanges) {\n+\n+        Diff diff = DiffBuilder.compare(staticTemplate).ignoreWhitespace()\n+                .withTest(obtainedResponse).ignoreWhitespace().checkForSimilar().build();\n+\n+        List<String> xPaths = new ArrayList<>();\n+        for (Difference difference : diff.getDifferences()) {\n+            xPaths.add(difference.getComparison().getTestDetails().getXPath());\n+        }\n+\n+        Assert.assertTrue(xPaths.containsAll(expectedValues),\n+                \"Expected changes did not match with the actual changes.\");\n+        Assert.assertEquals(xPaths.size(), expectedNoOfChanges,\n+                \"Expected \" + expectedNoOfChanges + \" changes \"\n+                        + \"but found \" + xPaths.size() + \" changes.\");\n+    }\n+\n+    private void printQuery(String message, String query) {\n+\n+        System.out.println(message + \": \\n\" + query + \"\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06bf47e503d98300cbdcf4e525eacbf48856b244"}, "originalPosition": 234}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxODUwNTQ2", "url": "https://github.com/wso2/product-is/pull/7678#pullrequestreview-361850546", "createdAt": "2020-02-20T12:09:05Z", "commit": {"oid": "06bf47e503d98300cbdcf4e525eacbf48856b244"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjowOTowNVrOFsQ_CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjowOTowNVrOFsQ_CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk1OTk0NA==", "bodyText": "can we add license headers to these resource files?", "url": "https://github.com/wso2/product-is/pull/7678#discussion_r381959944", "createdAt": "2020-02-20T12:09:05Z", "author": {"login": "madurangasiriwardena"}, "path": "modules/integration/tests-integration/tests-backend/src/test/resources/ws-trust-templates/request_security_token_RST.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<soapenv:Envelope xmlns:soapenv=\"http://www.w3.org/2003/05/soap-envelope\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06bf47e503d98300cbdcf4e525eacbf48856b244"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0d7a44b380279283d4455a8cc45dc7a434b5c14", "author": {"user": {"login": "deshankoswatte", "name": "Dehami Koswatte"}}, "url": "https://github.com/wso2/product-is/commit/b0d7a44b380279283d4455a8cc45dc7a434b5c14", "committedDate": "2020-02-21T03:22:33Z", "message": "Remove unused method."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MDE2MDM3", "url": "https://github.com/wso2/product-is/pull/7678#pullrequestreview-364016037", "createdAt": "2020-02-25T10:08:13Z", "commit": {"oid": "b0d7a44b380279283d4455a8cc45dc7a434b5c14"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1324, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}