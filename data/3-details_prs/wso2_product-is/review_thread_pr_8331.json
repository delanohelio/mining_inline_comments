{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3OTMxOTY0", "number": 8331, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDoyMjozM1rOD8gGAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1ODo0N1rOEig7oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzY2OTc2OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuthMetadataTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDoyMjozM1rOGVes1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNTo0NTo1NlrOGV3QCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3NjI3OQ==", "bodyText": "OAuthMetadataTestCase -> OIDCMetadataTest or something similar would give the actual purpose of the TestCase", "url": "https://github.com/wso2/product-is/pull/8331#discussion_r425176279", "createdAt": "2020-05-14T14:22:33Z", "author": {"login": "mefarazath"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuthMetadataTestCase.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+\n+import java.io.IOException;\n+\n+public class OAuthMetadataTestCase extends ISIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de3a7b453b8aa5b1d9d3c000d5938b359d0e3ac"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3ODUwNQ==", "bodyText": "Fixed b471590", "url": "https://github.com/wso2/product-is/pull/8331#discussion_r425578505", "createdAt": "2020-05-15T05:45:56Z", "author": {"login": "GANGANI"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuthMetadataTestCase.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+\n+import java.io.IOException;\n+\n+public class OAuthMetadataTestCase extends ISIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3NjI3OQ=="}, "originalCommit": {"oid": "6de3a7b453b8aa5b1d9d3c000d5938b359d0e3ac"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI2NTkyOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OIDCMetadataTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1ODo0N1rOHQb7xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMjozNjoxOVrOHQx5QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NjkzNQ==", "bodyText": "@GANGANI Redundant new line", "url": "https://github.com/wso2/product-is/pull/8331#discussion_r486996935", "createdAt": "2020-09-11T11:58:47Z", "author": {"login": "tharindu-bandara"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OIDCMetadataTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+\n+import java.io.IOException;\n+\n+public class OIDCMetadataTest extends ISIntegrationTest {\n+\n+    private static final String TOKEN_ENDPOINT_SUPER_TENANT =\n+            \"https://localhost:9853/oauth2/token/.well-known/openid-configuration\";\n+    private static final String TOKEN_ENDPOINT_TENANT =\n+            \"https://localhost:9853/t/wso2.com/oauth2/token/.well-known/openid-configuration\";\n+    private static final String TOKEN_ENDPOINT_WITH_SUPER_TENANT_AS_PATH_PARAM =\n+            \"https://localhost:9853/t/carbon.super/oauth2/token/.well-known/openid-configuration\";\n+    private static final String OIDCDISCOVERY_ENDPOINT_SUPER_TENANT =\n+            \"https://localhost:9853/oauth2/oidcdiscovery/.well-known/openid-configuration\";\n+    private static final String OIDCDISCOVERY_ENDPOINT_TENANT =\n+            \"https://localhost:9853/t/wso2.com/oauth2/oidcdiscovery/.well-known/openid-configuration\";\n+    private static final String OIDCDISCOVERY_ENDPOINT_WITH_SUPER_TENANT_AS_PATH_PARAM =\n+            \"https://localhost:9853/t/carbon.super/oauth2/oidcdiscovery/.well-known/openid-configuration\";\n+    private static final String INTROSPECTION_ENDPOINT = \"https://localhost:9853/oauth2/introspect\";\n+    private static final String CHECK_SESSION_IFRAME = \"https://localhost:9853/oidc/checksession\";\n+    private static final String ISSUER = \"https://localhost:9853/oauth2/token\";\n+    private static final String AUTHORIZATION_ENDPOINT = \"https://localhost:9853/oauth2/authorize\";\n+    private static final String TOKEN_ENDPOINT = \"https://localhost:9853/oauth2/token\";\n+    private static final String END_SESSION_ENDPOINT = \"https://localhost:9853/oidc/logout\";\n+    private static final String REVOCATION_ENDPOINT = \"https://localhost:9853/oauth2/revoke\";\n+    private static final String USERINFO_ENDPOINT =\t\"https://localhost:9853/oauth2/userinfo\";\n+    private static final String JKWS_URI_SUPER_TENANT =\t\"https://localhost:9853/oauth2/jwks\";\n+    private static final String JKWS_URI_TENANT = \"https://localhost:9853/t/wso2.com/oauth2/jwks\";\n+    private static final String REGISTRATION_ENDPOINT_SUPER_TENANT =\n+            \"https://localhost:9853/api/identity/oauth2/dcr/v1.1/register\";\n+    private static final String REGISTRATION_ENDPOINT_TENANT =\n+            \"https://localhost:9853/t/wso2.com/api/identity/oauth2/dcr/v1.1/register\";\n+\n+    @Test(groups = \"wso2.is\", description = \"This test method will test OIDC Metadata endpoints.\")\n+    public void getOIDCMetadata() throws Exception {\n+\n+        testResponseContent(TOKEN_ENDPOINT_SUPER_TENANT);\n+        testResponseContent(TOKEN_ENDPOINT_TENANT);\n+        testResponseContent(TOKEN_ENDPOINT_WITH_SUPER_TENANT_AS_PATH_PARAM);\n+        testResponseContent(OIDCDISCOVERY_ENDPOINT_SUPER_TENANT);\n+        testResponseContent(OIDCDISCOVERY_ENDPOINT_TENANT);\n+        testResponseContent(OIDCDISCOVERY_ENDPOINT_WITH_SUPER_TENANT_AS_PATH_PARAM);\n+    }\n+\n+    private void testResponseContent(String oidcMetadataEndpoint) throws IOException, JSONException {\n+\n+        HttpClient client = HttpClientBuilder.create().build();\n+        HttpResponse httpResponse = sendGetRequest(client, oidcMetadataEndpoint);\n+        String content = DataExtractUtil.getContentData(httpResponse);\n+        Assert.assertNotNull(content, \"Response content is not received\");\n+\n+        JSONObject oidcMetadataEndpoints = new JSONObject(content);\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"introspection_endpoint\"),\n+                INTROSPECTION_ENDPOINT, \"Incorrect introspection endpoint\");\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"check_session_iframe\"),\n+                CHECK_SESSION_IFRAME, \"Incorrect session iframe\");\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"issuer\"),\n+                ISSUER, \"Incorrect issuer\");\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"authorization_endpoint\"),\n+                AUTHORIZATION_ENDPOINT, \"Incorrect authorization endpoint\");\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"token_endpoint\"),\n+                TOKEN_ENDPOINT, \"Incorrect token_endpoint\");\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"end_session_endpoint\"),\n+                END_SESSION_ENDPOINT, \"Incorrect end session endpoint\");\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"revocation_endpoint\"),\n+                REVOCATION_ENDPOINT, \"Incorrect revocation endpoint\");\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"userinfo_endpoint\"),\n+                USERINFO_ENDPOINT, \"Incorrect userinfo endpoint\");\n+\n+        if (oidcMetadataEndpoint.equals(TOKEN_ENDPOINT_SUPER_TENANT) ||\n+                oidcMetadataEndpoint.equals(OIDCDISCOVERY_ENDPOINT_SUPER_TENANT) ||\n+                oidcMetadataEndpoint.equals(TOKEN_ENDPOINT_WITH_SUPER_TENANT_AS_PATH_PARAM) ||\n+                oidcMetadataEndpoint.equals(OIDCDISCOVERY_ENDPOINT_WITH_SUPER_TENANT_AS_PATH_PARAM)) {\n+            Assert.assertEquals(oidcMetadataEndpoints.getString(\"jwks_uri\"),\n+                    JKWS_URI_SUPER_TENANT, \"Incorrect jwks uri\");\n+            Assert.assertEquals(oidcMetadataEndpoints.getString(\"registration_endpoint\"),\n+                    REGISTRATION_ENDPOINT_SUPER_TENANT, \"Incorrect registration endpoint\");\n+        }\n+\n+        if (oidcMetadataEndpoint.equals(TOKEN_ENDPOINT_TENANT) ||\n+                oidcMetadataEndpoint.equals(OIDCDISCOVERY_ENDPOINT_TENANT)) {\n+            Assert.assertEquals(oidcMetadataEndpoints.getString(\"jwks_uri\"),\n+                    JKWS_URI_TENANT, \"Incorrect jwks uri\");\n+            Assert.assertEquals(oidcMetadataEndpoints.getString(\"registration_endpoint\"),\n+                    REGISTRATION_ENDPOINT_TENANT, \"Incorrect registration endpoint\");\n+        }\n+    }\n+\n+    private HttpResponse sendGetRequest(HttpClient client, String oidcMetadataEndpoint) throws IOException {\n+\n+        HttpGet getRequest = new HttpGet(oidcMetadataEndpoint);\n+        HttpResponse response = client.execute(getRequest);\n+        return response;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b471590aff7777b2d2ec30d21e5d03df071379f1"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1NjczNg==", "bodyText": "Fixed in d648ac3", "url": "https://github.com/wso2/product-is/pull/8331#discussion_r487356736", "createdAt": "2020-09-12T02:36:19Z", "author": {"login": "GANGANI"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OIDCMetadataTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+\n+import java.io.IOException;\n+\n+public class OIDCMetadataTest extends ISIntegrationTest {\n+\n+    private static final String TOKEN_ENDPOINT_SUPER_TENANT =\n+            \"https://localhost:9853/oauth2/token/.well-known/openid-configuration\";\n+    private static final String TOKEN_ENDPOINT_TENANT =\n+            \"https://localhost:9853/t/wso2.com/oauth2/token/.well-known/openid-configuration\";\n+    private static final String TOKEN_ENDPOINT_WITH_SUPER_TENANT_AS_PATH_PARAM =\n+            \"https://localhost:9853/t/carbon.super/oauth2/token/.well-known/openid-configuration\";\n+    private static final String OIDCDISCOVERY_ENDPOINT_SUPER_TENANT =\n+            \"https://localhost:9853/oauth2/oidcdiscovery/.well-known/openid-configuration\";\n+    private static final String OIDCDISCOVERY_ENDPOINT_TENANT =\n+            \"https://localhost:9853/t/wso2.com/oauth2/oidcdiscovery/.well-known/openid-configuration\";\n+    private static final String OIDCDISCOVERY_ENDPOINT_WITH_SUPER_TENANT_AS_PATH_PARAM =\n+            \"https://localhost:9853/t/carbon.super/oauth2/oidcdiscovery/.well-known/openid-configuration\";\n+    private static final String INTROSPECTION_ENDPOINT = \"https://localhost:9853/oauth2/introspect\";\n+    private static final String CHECK_SESSION_IFRAME = \"https://localhost:9853/oidc/checksession\";\n+    private static final String ISSUER = \"https://localhost:9853/oauth2/token\";\n+    private static final String AUTHORIZATION_ENDPOINT = \"https://localhost:9853/oauth2/authorize\";\n+    private static final String TOKEN_ENDPOINT = \"https://localhost:9853/oauth2/token\";\n+    private static final String END_SESSION_ENDPOINT = \"https://localhost:9853/oidc/logout\";\n+    private static final String REVOCATION_ENDPOINT = \"https://localhost:9853/oauth2/revoke\";\n+    private static final String USERINFO_ENDPOINT =\t\"https://localhost:9853/oauth2/userinfo\";\n+    private static final String JKWS_URI_SUPER_TENANT =\t\"https://localhost:9853/oauth2/jwks\";\n+    private static final String JKWS_URI_TENANT = \"https://localhost:9853/t/wso2.com/oauth2/jwks\";\n+    private static final String REGISTRATION_ENDPOINT_SUPER_TENANT =\n+            \"https://localhost:9853/api/identity/oauth2/dcr/v1.1/register\";\n+    private static final String REGISTRATION_ENDPOINT_TENANT =\n+            \"https://localhost:9853/t/wso2.com/api/identity/oauth2/dcr/v1.1/register\";\n+\n+    @Test(groups = \"wso2.is\", description = \"This test method will test OIDC Metadata endpoints.\")\n+    public void getOIDCMetadata() throws Exception {\n+\n+        testResponseContent(TOKEN_ENDPOINT_SUPER_TENANT);\n+        testResponseContent(TOKEN_ENDPOINT_TENANT);\n+        testResponseContent(TOKEN_ENDPOINT_WITH_SUPER_TENANT_AS_PATH_PARAM);\n+        testResponseContent(OIDCDISCOVERY_ENDPOINT_SUPER_TENANT);\n+        testResponseContent(OIDCDISCOVERY_ENDPOINT_TENANT);\n+        testResponseContent(OIDCDISCOVERY_ENDPOINT_WITH_SUPER_TENANT_AS_PATH_PARAM);\n+    }\n+\n+    private void testResponseContent(String oidcMetadataEndpoint) throws IOException, JSONException {\n+\n+        HttpClient client = HttpClientBuilder.create().build();\n+        HttpResponse httpResponse = sendGetRequest(client, oidcMetadataEndpoint);\n+        String content = DataExtractUtil.getContentData(httpResponse);\n+        Assert.assertNotNull(content, \"Response content is not received\");\n+\n+        JSONObject oidcMetadataEndpoints = new JSONObject(content);\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"introspection_endpoint\"),\n+                INTROSPECTION_ENDPOINT, \"Incorrect introspection endpoint\");\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"check_session_iframe\"),\n+                CHECK_SESSION_IFRAME, \"Incorrect session iframe\");\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"issuer\"),\n+                ISSUER, \"Incorrect issuer\");\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"authorization_endpoint\"),\n+                AUTHORIZATION_ENDPOINT, \"Incorrect authorization endpoint\");\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"token_endpoint\"),\n+                TOKEN_ENDPOINT, \"Incorrect token_endpoint\");\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"end_session_endpoint\"),\n+                END_SESSION_ENDPOINT, \"Incorrect end session endpoint\");\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"revocation_endpoint\"),\n+                REVOCATION_ENDPOINT, \"Incorrect revocation endpoint\");\n+        Assert.assertEquals(oidcMetadataEndpoints.getString(\"userinfo_endpoint\"),\n+                USERINFO_ENDPOINT, \"Incorrect userinfo endpoint\");\n+\n+        if (oidcMetadataEndpoint.equals(TOKEN_ENDPOINT_SUPER_TENANT) ||\n+                oidcMetadataEndpoint.equals(OIDCDISCOVERY_ENDPOINT_SUPER_TENANT) ||\n+                oidcMetadataEndpoint.equals(TOKEN_ENDPOINT_WITH_SUPER_TENANT_AS_PATH_PARAM) ||\n+                oidcMetadataEndpoint.equals(OIDCDISCOVERY_ENDPOINT_WITH_SUPER_TENANT_AS_PATH_PARAM)) {\n+            Assert.assertEquals(oidcMetadataEndpoints.getString(\"jwks_uri\"),\n+                    JKWS_URI_SUPER_TENANT, \"Incorrect jwks uri\");\n+            Assert.assertEquals(oidcMetadataEndpoints.getString(\"registration_endpoint\"),\n+                    REGISTRATION_ENDPOINT_SUPER_TENANT, \"Incorrect registration endpoint\");\n+        }\n+\n+        if (oidcMetadataEndpoint.equals(TOKEN_ENDPOINT_TENANT) ||\n+                oidcMetadataEndpoint.equals(OIDCDISCOVERY_ENDPOINT_TENANT)) {\n+            Assert.assertEquals(oidcMetadataEndpoints.getString(\"jwks_uri\"),\n+                    JKWS_URI_TENANT, \"Incorrect jwks uri\");\n+            Assert.assertEquals(oidcMetadataEndpoints.getString(\"registration_endpoint\"),\n+                    REGISTRATION_ENDPOINT_TENANT, \"Incorrect registration endpoint\");\n+        }\n+    }\n+\n+    private HttpResponse sendGetRequest(HttpClient client, String oidcMetadataEndpoint) throws IOException {\n+\n+        HttpGet getRequest = new HttpGet(oidcMetadataEndpoint);\n+        HttpResponse response = client.execute(getRequest);\n+        return response;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NjkzNQ=="}, "originalCommit": {"oid": "b471590aff7777b2d2ec30d21e5d03df071379f1"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1403, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}