{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMjMyNDgy", "number": 8376, "title": "Fix resident IDP config tests order", "bodyText": "Proposed changes in this pull request\nThis PR will fix the issue of the order of the resident IDP config tests. These integration tests are to test resident idp inbound authentication config URLs and inbound provisioning config URLs in super tenant legacy URL mode and tenant legacy URL mode.\nRelated PR: #8370", "createdAt": "2020-05-21T08:51:10Z", "url": "https://github.com/wso2/product-is/pull/8376", "merged": true, "mergeCommit": {"oid": "4433e882327678745ad19d0cb34ced21964a1f1b"}, "closed": true, "closedAt": "2020-05-21T16:16:48Z", "author": {"login": "GANGANI"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjZpZ6gH2gAyNDIxMjMyNDgyOmE3MDZiMzcxMWMzNTU5YTMzMWU3ZDE4YzFkMzA3NDZlNzg3YjcwZjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdIryeogFqTQ4NzQxMzA3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a706b3711c3559a331e7d18c1d30746e787b70f5", "author": {"user": {"login": "GANGANI", "name": "Gangani Chamika"}}, "url": "https://github.com/wso2/product-is/commit/a706b3711c3559a331e7d18c1d30746e787b70f5", "committedDate": "2020-05-21T08:46:17Z", "message": "Fix resident IDP config tests order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0259713526ca5b6f1cc624af1c884ad684e50a44", "author": {"user": {"login": "GANGANI", "name": "Gangani Chamika"}}, "url": "https://github.com/wso2/product-is/commit/0259713526ca5b6f1cc624af1c884ad684e50a44", "committedDate": "2020-05-21T16:13:24Z", "message": "Rename variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MjkzMjEy", "url": "https://github.com/wso2/product-is/pull/8376#pullrequestreview-416293212", "createdAt": "2020-05-21T16:16:29Z", "commit": {"oid": "0259713526ca5b6f1cc624af1c884ad684e50a44"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDExMzY1", "url": "https://github.com/wso2/product-is/pull/8376#pullrequestreview-487411365", "createdAt": "2020-09-14T04:43:03Z", "commit": {"oid": "0259713526ca5b6f1cc624af1c884ad684e50a44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDo0MzowM1rOHRDr2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDo0MzowM1rOHRDr2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0ODIxNw==", "bodyText": "Isn't it good to have a log to track the status of the tests execution?", "url": "https://github.com/wso2/product-is/pull/8376#discussion_r487648217", "createdAt": "2020-09-14T04:43:03Z", "author": {"login": "pamodaaw"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -40,230 +44,209 @@\n public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n \n     private IdentityProviderMgtServiceClient idpMgtServiceClient;\n-    private AuthenticatorClient loginManger;\n \n-    @BeforeClass(alwaysRun = true)\n-    public void testInit() throws Exception {\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+    private Map<String, String> fedAuthConfigMap;\n+    private Map<String, String> provisioningConfigMap;\n+    private final String SUPER_TENANT = \"carbon.super\";\n+    private final String TENANT_DOMAIN = \"wso2.com\";\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n \n-        super.init();\n-        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n-        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    @Factory(dataProvider = \"configProvider\")\n+    public ResidentIDPConfigsTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.activeTenant = context.getContextTenant().getDomain();\n     }\n \n-    @Test(groups = \"wso2.is\", description = \"Test resident IdP config URLs in super tenant mode\")\n-    public void testResidentIdPConfigs() throws Exception {\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n \n-        log.info(\"Retrieving resident identity provide\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0259713526ca5b6f1cc624af1c884ad684e50a44"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDEyNzQ0", "url": "https://github.com/wso2/product-is/pull/8376#pullrequestreview-487412744", "createdAt": "2020-09-14T04:48:21Z", "commit": {"oid": "0259713526ca5b6f1cc624af1c884ad684e50a44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDo0ODoyMVrOHRDwsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDo0ODoyMVrOHRDwsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0OTQ1Nw==", "bodyText": "Shall we mention what is not found here as well?", "url": "https://github.com/wso2/product-is/pull/8376#discussion_r487649457", "createdAt": "2020-09-14T04:48:21Z", "author": {"login": "pamodaaw"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -40,230 +44,209 @@\n public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n \n     private IdentityProviderMgtServiceClient idpMgtServiceClient;\n-    private AuthenticatorClient loginManger;\n \n-    @BeforeClass(alwaysRun = true)\n-    public void testInit() throws Exception {\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+    private Map<String, String> fedAuthConfigMap;\n+    private Map<String, String> provisioningConfigMap;\n+    private final String SUPER_TENANT = \"carbon.super\";\n+    private final String TENANT_DOMAIN = \"wso2.com\";\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n \n-        super.init();\n-        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n-        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    @Factory(dataProvider = \"configProvider\")\n+    public ResidentIDPConfigsTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.activeTenant = context.getContextTenant().getDomain();\n     }\n \n-    @Test(groups = \"wso2.is\", description = \"Test resident IdP config URLs in super tenant mode\")\n-    public void testResidentIdPConfigs() throws Exception {\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n \n-        log.info(\"Retrieving resident identity provide\");\n+        AuthenticatorClient loginManger = new AuthenticatorClient(backendURL);\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem\n+                (null, null);\n+        String cookie = loginManger.login(username, userPassword, isServer.getInstance().getHosts().get(\"default\"));\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(cookie, isServer.getContextUrls().getBackEndUrl(),\n+                configContext);\n         IdentityProvider idProvider = idpMgtServiceClient.getResidentIdP();\n+        fedAuthConfigMap = getFedAuthConfigMap(idProvider);\n+        provisioningConfigMap = getProvisioningConfigMap(idProvider);\n+    }\n \n-        //Extract authenticator configurations.\n-        FederatedAuthenticatorConfig[] authConfigs = idProvider.getFederatedAuthenticatorConfigs();\n-\n-        Map<String, String> fedAuthConfigMap = new HashMap<String, String>();\n-        for (FederatedAuthenticatorConfig config : authConfigs) {\n-            for (Property property: config.getProperties()) {\n-                fedAuthConfigMap.put(property.getName(), property.getValue());\n-            }\n-        }\n+    @DataProvider(name = \"federatedAuthConfigURLProvider\")\n+    public static Object[][] federatedAuthConfigURLProvider() {\n+        return new Object[][]{\n+                {\"carbon.super\", \"OAuth1AccessTokenUrl\", \"https://localhost:9853/oauth/access-token\",\n+                        \"Expected OAuth10a Access Token URL is not found \"},\n+                {\"carbon.super\", \"OAuth1AuthorizeUrl\", \"https://localhost:9853/oauth/authorize-url\",\n+                        \"Expected OAuth10a Authorize URL is not found\"},\n+                {\"carbon.super\", \"OAuth1RequestTokenUrl\", \"https://localhost:9853/oauth/request-token\",\n+                        \"Expected OAuth10a Request Token URL is not found\"},\n+                {\"carbon.super\", \"IdentityProviderUrl\", \"https://localhost:9853/passivests\",\n+                        \"Expected Passive STS URL is not found\"},\n+                {\"carbon.super\", \"OpenIdUrl\", \"https://localhost:9853/openidserver\",\n+                        \"Expected OpenID Server URL is not found\"},\n+                {\"carbon.super\", \"ECPUrl\", \"https://localhost:9853/samlecp\",\n+                        \"Expected ECP URL is not found\"},\n+                {\"carbon.super\", \"LogoutReqUrl\", \"https://localhost:9853/samlsso\",\n+                        \"Expected Logout URL is not found\"},\n+                {\"carbon.super\", \"ArtifactResolveUrl\", \"https://localhost:9853/samlartresolve\",\n+                        \"Expected Artifact Resolution URL is not found\"},\n+                {\"carbon.super\", \"SSOUrl\", \"https://localhost:9853/samlsso\",\n+                        \"Expected SSO URL is not found\"},\n+                {\"carbon.super\", \"IDENTITY_PROVIDER_URL\", \"https://localhost:9853/services/wso2carbon-sts\",\n+                        \"Expected Security Token Service URL is not found\"},\n+                {\"carbon.super\", \"OIDCWebFingerEPUrl\", \"https://localhost:9853/.well-known/webfinger\",\n+                        \"Expected Web finger Endpoint URL is not found\"},\n+                {\"carbon.super\", \"IdPEntityId\", \"https://localhost:9853/oauth2/token\",\n+                        \"Expected Token Endpoint URL is not found\"},\n+                {\"carbon.super\", \"OIDCCheckSessionEPUrl\", \"https://localhost:9853/oidc/checksession\",\n+                        \"Expected Session IFrame Endpoint URL is not found\"},\n+                {\"carbon.super\", \"OAuth2IntrospectEPUrl\", \"https://localhost:9853/oauth2/introspect\",\n+                        \"Expected Token Introspection Endpoint URL is not found\"},\n+                {\"carbon.super\", \"OAuth2RevokeEPUrl\", \"https://localhost:9853/oauth2/revoke\",\n+                        \"Expected Token Revocation Endpoint URL is not found\"},\n+                {\"carbon.super\", \"OIDCLogoutEPUrl\", \"https://localhost:9853/oidc/logout\",\n+                        \"Expected Logout Endpoint URL not found\"},\n+                {\"carbon.super\", \"OAuth2AuthzEPUrl\", \"https://localhost:9853/oauth2/authorize\",\n+                        \"Expected Authorization Endpoint URL is not found\"},\n+                {\"carbon.super\", \"OAuth2DCREPUrl\", \"https://localhost:9853/api/identity/oauth2/dcr/v1.1/register\",\n+                        \"Expected Dynamic Client Registration Endpoint URL is not found\"},\n+                {\"carbon.super\", \"OIDCDiscoveryEPUrl\", \"https://localhost:9853/oauth2/oidcdiscovery\",\n+                        \"Expected Dynamic Client Registration Endpoint URL is not found\"},\n+                {\"carbon.super\", \"OAuth2JWKSPage\", \"https://localhost:9853/oauth2/jwks\", \"Expected is not found\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0259713526ca5b6f1cc624af1c884ad684e50a44"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDEyOTAx", "url": "https://github.com/wso2/product-is/pull/8376#pullrequestreview-487412901", "createdAt": "2020-09-14T04:48:59Z", "commit": {"oid": "0259713526ca5b6f1cc624af1c884ad684e50a44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDo0ODo1OVrOHRDxQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDo0ODo1OVrOHRDxQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0OTYwMg==", "bodyText": "Shall we mention what is not found here as well?", "url": "https://github.com/wso2/product-is/pull/8376#discussion_r487649602", "createdAt": "2020-09-14T04:48:59Z", "author": {"login": "pamodaaw"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -40,230 +44,209 @@\n public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n \n     private IdentityProviderMgtServiceClient idpMgtServiceClient;\n-    private AuthenticatorClient loginManger;\n \n-    @BeforeClass(alwaysRun = true)\n-    public void testInit() throws Exception {\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+    private Map<String, String> fedAuthConfigMap;\n+    private Map<String, String> provisioningConfigMap;\n+    private final String SUPER_TENANT = \"carbon.super\";\n+    private final String TENANT_DOMAIN = \"wso2.com\";\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n \n-        super.init();\n-        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n-        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    @Factory(dataProvider = \"configProvider\")\n+    public ResidentIDPConfigsTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.activeTenant = context.getContextTenant().getDomain();\n     }\n \n-    @Test(groups = \"wso2.is\", description = \"Test resident IdP config URLs in super tenant mode\")\n-    public void testResidentIdPConfigs() throws Exception {\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n \n-        log.info(\"Retrieving resident identity provide\");\n+        AuthenticatorClient loginManger = new AuthenticatorClient(backendURL);\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem\n+                (null, null);\n+        String cookie = loginManger.login(username, userPassword, isServer.getInstance().getHosts().get(\"default\"));\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(cookie, isServer.getContextUrls().getBackEndUrl(),\n+                configContext);\n         IdentityProvider idProvider = idpMgtServiceClient.getResidentIdP();\n+        fedAuthConfigMap = getFedAuthConfigMap(idProvider);\n+        provisioningConfigMap = getProvisioningConfigMap(idProvider);\n+    }\n \n-        //Extract authenticator configurations.\n-        FederatedAuthenticatorConfig[] authConfigs = idProvider.getFederatedAuthenticatorConfigs();\n-\n-        Map<String, String> fedAuthConfigMap = new HashMap<String, String>();\n-        for (FederatedAuthenticatorConfig config : authConfigs) {\n-            for (Property property: config.getProperties()) {\n-                fedAuthConfigMap.put(property.getName(), property.getValue());\n-            }\n-        }\n+    @DataProvider(name = \"federatedAuthConfigURLProvider\")\n+    public static Object[][] federatedAuthConfigURLProvider() {\n+        return new Object[][]{\n+                {\"carbon.super\", \"OAuth1AccessTokenUrl\", \"https://localhost:9853/oauth/access-token\",\n+                        \"Expected OAuth10a Access Token URL is not found \"},\n+                {\"carbon.super\", \"OAuth1AuthorizeUrl\", \"https://localhost:9853/oauth/authorize-url\",\n+                        \"Expected OAuth10a Authorize URL is not found\"},\n+                {\"carbon.super\", \"OAuth1RequestTokenUrl\", \"https://localhost:9853/oauth/request-token\",\n+                        \"Expected OAuth10a Request Token URL is not found\"},\n+                {\"carbon.super\", \"IdentityProviderUrl\", \"https://localhost:9853/passivests\",\n+                        \"Expected Passive STS URL is not found\"},\n+                {\"carbon.super\", \"OpenIdUrl\", \"https://localhost:9853/openidserver\",\n+                        \"Expected OpenID Server URL is not found\"},\n+                {\"carbon.super\", \"ECPUrl\", \"https://localhost:9853/samlecp\",\n+                        \"Expected ECP URL is not found\"},\n+                {\"carbon.super\", \"LogoutReqUrl\", \"https://localhost:9853/samlsso\",\n+                        \"Expected Logout URL is not found\"},\n+                {\"carbon.super\", \"ArtifactResolveUrl\", \"https://localhost:9853/samlartresolve\",\n+                        \"Expected Artifact Resolution URL is not found\"},\n+                {\"carbon.super\", \"SSOUrl\", \"https://localhost:9853/samlsso\",\n+                        \"Expected SSO URL is not found\"},\n+                {\"carbon.super\", \"IDENTITY_PROVIDER_URL\", \"https://localhost:9853/services/wso2carbon-sts\",\n+                        \"Expected Security Token Service URL is not found\"},\n+                {\"carbon.super\", \"OIDCWebFingerEPUrl\", \"https://localhost:9853/.well-known/webfinger\",\n+                        \"Expected Web finger Endpoint URL is not found\"},\n+                {\"carbon.super\", \"IdPEntityId\", \"https://localhost:9853/oauth2/token\",\n+                        \"Expected Token Endpoint URL is not found\"},\n+                {\"carbon.super\", \"OIDCCheckSessionEPUrl\", \"https://localhost:9853/oidc/checksession\",\n+                        \"Expected Session IFrame Endpoint URL is not found\"},\n+                {\"carbon.super\", \"OAuth2IntrospectEPUrl\", \"https://localhost:9853/oauth2/introspect\",\n+                        \"Expected Token Introspection Endpoint URL is not found\"},\n+                {\"carbon.super\", \"OAuth2RevokeEPUrl\", \"https://localhost:9853/oauth2/revoke\",\n+                        \"Expected Token Revocation Endpoint URL is not found\"},\n+                {\"carbon.super\", \"OIDCLogoutEPUrl\", \"https://localhost:9853/oidc/logout\",\n+                        \"Expected Logout Endpoint URL not found\"},\n+                {\"carbon.super\", \"OAuth2AuthzEPUrl\", \"https://localhost:9853/oauth2/authorize\",\n+                        \"Expected Authorization Endpoint URL is not found\"},\n+                {\"carbon.super\", \"OAuth2DCREPUrl\", \"https://localhost:9853/api/identity/oauth2/dcr/v1.1/register\",\n+                        \"Expected Dynamic Client Registration Endpoint URL is not found\"},\n+                {\"carbon.super\", \"OIDCDiscoveryEPUrl\", \"https://localhost:9853/oauth2/oidcdiscovery\",\n+                        \"Expected Dynamic Client Registration Endpoint URL is not found\"},\n+                {\"carbon.super\", \"OAuth2JWKSPage\", \"https://localhost:9853/oauth2/jwks\", \"Expected is not found\"},\n+                {\"carbon.super\", \"OAuth2TokenEPUrl\", \"https://localhost:9853/oauth2/token\",\n+                        \"Expected Token Endpoint URL is not found\"},\n+                {\"carbon.super\", \"OAuth2UserInfoEPUrl\", \"https://localhost:9853/oauth2/userinfo\",\n+                        \"Expected User Info Endpoint URL is not found\"},\n+                {\"wso2.com\", \"OAuth1AccessTokenUrl\", \"https://localhost:9853/oauth/access-token\",\n+                        \"Expected OAuth10a Access Token URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"OAuth1AuthorizeUrl\", \"https://localhost:9853/oauth/authorize-url\",\n+                        \"Expected OAuth10a Authorize URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"OAuth1RequestTokenUrl\", \"https://localhost:9853/oauth/request-token\",\n+                        \"Expected OAuth10a Request Token URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"IdentityProviderUrl\", \"https://localhost:9853/passivests\",\n+                        \"Expected Passive STS URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"OpenIdUrl\", \"https://localhost:9853/openidserver\",\n+                        \"Expected OpenID Server URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"ECPUrl\", \"https://localhost:9853/samlecp?tenantDomain=wso2.com\",\n+                        \"Expected ECP URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"LogoutReqUrl\", \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                        \"Expected Logout URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"ArtifactResolveUrl\", \"https://localhost:9853/samlartresolve\",\n+                        \"Expected Artifact Resolution URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"SSOUrl\", \"https://localhost:9853/samlsso?tenantDomain=wso2.com\",\n+                        \"Expected SSO URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"IDENTITY_PROVIDER_URL\", \"https://localhost:9853/services/t/wso2.com/wso2carbon-sts\",\n+                        \"Expected Security Token Service URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"OIDCWebFingerEPUrl\", \"https://localhost:9853/.well-known/webfinger\",\n+                        \"Expected Web finger Endpoint URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"OIDCCheckSessionEPUrl\", \"https://localhost:9853/oidc/checksession\",\n+                        \"Expected Session IFrame Endpoint URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"OAuth2IntrospectEPUrl\", \"https://localhost:9853/t/wso2.com/oauth2/introspect\",\n+                        \"Expected Token Introspection Endpoint URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"OAuth2RevokeEPUrl\", \"https://localhost:9853/oauth2/revoke\",\n+                        \"Expected Token Revocation Endpoint URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"OIDCLogoutEPUrl\", \"https://localhost:9853/oidc/logout\",\n+                        \"Expected Logout Endpoint URL not found in the tenant mode\"},\n+                {\"wso2.com\", \"OAuth2AuthzEPUrl\", \"https://localhost:9853/oauth2/authorize\",\n+                        \"Expected Authorization Endpoint URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"OAuth2DCREPUrl\", \"https://localhost:9853/t/wso2.com/api/identity/oauth2/dcr/v1.1/register\",\n+                        \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"OIDCDiscoveryEPUrl\", \"https://localhost:9853/t/wso2.com/oauth2/oidcdiscovery\",\n+                        \"Expected Dynamic Client Registration Endpoint URL is not found in the tenant mode\"},\n+                {\"wso2.com\", \"OAuth2JWKSPage\", \"https://localhost:9853/t/wso2.com/oauth2/jwks\",\n+                        \"Expected is not found in the tenant mode\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0259713526ca5b6f1cc624af1c884ad684e50a44"}, "originalPosition": 158}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDEzMDc2", "url": "https://github.com/wso2/product-is/pull/8376#pullrequestreview-487413076", "createdAt": "2020-09-14T04:49:40Z", "commit": {"oid": "0259713526ca5b6f1cc624af1c884ad684e50a44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDo0OTo0MVrOHRDx4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDo0OTo0MVrOHRDx4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0OTc2MA==", "bodyText": "Unnecessary space at the end", "url": "https://github.com/wso2/product-is/pull/8376#discussion_r487649760", "createdAt": "2020-09-14T04:49:41Z", "author": {"login": "pamodaaw"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/idp/mgt/ResidentIDPConfigsTestCase.java", "diffHunk": "@@ -40,230 +44,209 @@\n public class ResidentIDPConfigsTestCase extends ISIntegrationTest {\n \n     private IdentityProviderMgtServiceClient idpMgtServiceClient;\n-    private AuthenticatorClient loginManger;\n \n-    @BeforeClass(alwaysRun = true)\n-    public void testInit() throws Exception {\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+    private Map<String, String> fedAuthConfigMap;\n+    private Map<String, String> provisioningConfigMap;\n+    private final String SUPER_TENANT = \"carbon.super\";\n+    private final String TENANT_DOMAIN = \"wso2.com\";\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n \n-        super.init();\n-        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);\n-        idpMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL, configContext);\n+    @Factory(dataProvider = \"configProvider\")\n+    public ResidentIDPConfigsTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.activeTenant = context.getContextTenant().getDomain();\n     }\n \n-    @Test(groups = \"wso2.is\", description = \"Test resident IdP config URLs in super tenant mode\")\n-    public void testResidentIdPConfigs() throws Exception {\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n \n-        log.info(\"Retrieving resident identity provide\");\n+        AuthenticatorClient loginManger = new AuthenticatorClient(backendURL);\n+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem\n+                (null, null);\n+        String cookie = loginManger.login(username, userPassword, isServer.getInstance().getHosts().get(\"default\"));\n+        idpMgtServiceClient = new IdentityProviderMgtServiceClient(cookie, isServer.getContextUrls().getBackEndUrl(),\n+                configContext);\n         IdentityProvider idProvider = idpMgtServiceClient.getResidentIdP();\n+        fedAuthConfigMap = getFedAuthConfigMap(idProvider);\n+        provisioningConfigMap = getProvisioningConfigMap(idProvider);\n+    }\n \n-        //Extract authenticator configurations.\n-        FederatedAuthenticatorConfig[] authConfigs = idProvider.getFederatedAuthenticatorConfigs();\n-\n-        Map<String, String> fedAuthConfigMap = new HashMap<String, String>();\n-        for (FederatedAuthenticatorConfig config : authConfigs) {\n-            for (Property property: config.getProperties()) {\n-                fedAuthConfigMap.put(property.getName(), property.getValue());\n-            }\n-        }\n+    @DataProvider(name = \"federatedAuthConfigURLProvider\")\n+    public static Object[][] federatedAuthConfigURLProvider() {\n+        return new Object[][]{\n+                {\"carbon.super\", \"OAuth1AccessTokenUrl\", \"https://localhost:9853/oauth/access-token\",\n+                        \"Expected OAuth10a Access Token URL is not found \"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0259713526ca5b6f1cc624af1c884ad684e50a44"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1284, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}