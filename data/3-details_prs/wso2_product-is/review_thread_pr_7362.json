{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NjY3NTMz", "number": 7362, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDoyOToxNFrODaYh_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOTo1MzowMlrODabvbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTkxNDg1OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-patch-replace-identity-claim.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDoyOToxNFrOFhTruA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDoyOToxNFrOFhTruA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ2OTgxNg==", "bodyText": "Add a new line to EOF", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370469816", "createdAt": "2020-01-24T04:29:14Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-patch-replace-identity-claim.json", "diffHunk": "@@ -0,0 +1,15 @@\n+{\n+    \"schemas\": [\n+        \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n+    ],\n+    \"Operations\": [\n+        {\n+            \"op\": \"replace\",\n+            \"value\": {\n+                \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n+                    \"verifyEmail\": true\n+                }\n+            }\n+        }\n+    ]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0441de61c306b0ecd216968112101b459c9e42e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTkxNTAyOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-patch-user-add-op.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDoyOToyM1rOFhTrzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDoyOToyM1rOFhTrzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ2OTgzNw==", "bodyText": "add a new line to EOF", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370469837", "createdAt": "2020-01-24T04:29:23Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-patch-user-add-op.json", "diffHunk": "@@ -0,0 +1,18 @@\n+{\n+    \"schemas\": [\n+        \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n+    ],\n+    \"Operations\": [\n+        {\n+            \"op\": \"add\",\n+            \"value\": {\n+                \"emails\": [\n+                    {\n+                        \"type\": \"work\",\n+                        \"value\": \"kim@wso2.com\"\n+                    }\n+                ]\n+            }\n+        }\n+    ]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0441de61c306b0ecd216968112101b459c9e42e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTkxNTMyOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-patch-user-remove-op.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDoyOTo0OVrOFhTr-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDoyOTo0OVrOFhTr-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ2OTg4MQ==", "bodyText": "Add a new line to EOF", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370469881", "createdAt": "2020-01-24T04:29:49Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-patch-user-remove-op.json", "diffHunk": "@@ -0,0 +1,11 @@\n+{\n+    \"schemas\": [\n+        \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n+    ],\n+    \"Operations\": [\n+        {\n+            \"op\": \"remove\",\n+            \"path\": \"emails[type eq work]\"\n+        }\n+    ]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0441de61c306b0ecd216968112101b459c9e42e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTkxNTQ2OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-patch-user-replace-op.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDoyOTo1N1rOFhTsDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDoyOTo1N1rOFhTsDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ2OTkwMA==", "bodyText": "Add a new line to EOF", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370469900", "createdAt": "2020-01-24T04:29:57Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-patch-user-replace-op.json", "diffHunk": "@@ -0,0 +1,22 @@\n+{\n+    \"schemas\": [\n+        \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n+    ],\n+    \"Operations\": [\n+        {\n+            \"op\": \"replace\",\n+            \"value\": {\n+                \"name\": {\n+                    \"givenName\": \"Desmond\",\n+                    \"familyName\": \"Miles\"\n+                },\n+                \"emails\": [\n+                    {\n+                        \"type\": \"other\",\n+                        \"value\": \"desmond@mail.net\"\n+                    }\n+                ]\n+            }\n+        }\n+    ]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0441de61c306b0ecd216968112101b459c9e42e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTkxNjAyOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-put-user.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDozMDoyNlrOFhTsYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDozMDoyNlrOFhTsYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ2OTk4NQ==", "bodyText": "Add a new line to EOF", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370469985", "createdAt": "2020-01-24T04:30:26Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-put-user.json", "diffHunk": "@@ -0,0 +1,11 @@\n+{\n+    \"schemas\": [\n+        \"urn:ietf:params:scim:schemas:core:2.0:User\"\n+    ],\n+    \"name\": {\n+        \"givenName\": \"kim\",\n+        \"familyName\": \"jackson\"\n+    },\n+    \"id\": \"userId-value\",\n+    \"userName\": \"userName-value\"\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0441de61c306b0ecd216968112101b459c9e42e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTkxNjYxOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-patch-replace-identity-claim.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDozMDo1N1rOFhTstw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDozMDo1N1rOFhTstw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3MDA3MQ==", "bodyText": "add a new line to EOF", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370470071", "createdAt": "2020-01-24T04:30:57Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-patch-replace-identity-claim.json", "diffHunk": "@@ -0,0 +1,15 @@\n+{\n+    \"schemas\": [\n+        \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n+    ],\n+    \"Operations\": [\n+        {\n+            \"op\": \"replace\",\n+            \"value\": {\n+                \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n+                    \"verifyEmail\": true\n+                }\n+            }\n+        }\n+    ]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0441de61c306b0ecd216968112101b459c9e42e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTkxNzYyOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-add-user.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDozMTo1MlrOFhTtSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDozMTo1MlrOFhTtSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3MDIxOA==", "bodyText": "Add a new line EOF", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370470218", "createdAt": "2020-01-24T04:31:52Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-add-user.json", "diffHunk": "@@ -0,0 +1,26 @@\n+{\n+    \"schemas\": [],\n+    \"name\": {\n+        \"firstName\": \"Kim\",\n+        \"lastName\": \"Berry\"\n+    },\n+    \"userName\": \"kim\",\n+    \"password\": \"abc123\",\n+    \"emails\": [\n+        {\n+            \"type\": \"home\",\n+            \"value\": \"kim@gmail.com\",\n+            \"primary\": true\n+        },\n+        {\n+            \"type\": \"work\",\n+            \"value\": \"kim@wso2.com\"\n+        }\n+    ],\n+    \"EnterpriseUser\": {\n+        \"employeeNumber\": \"1234A\",\n+        \"manager\": {\n+            \"value\": \"Taylor\"\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0441de61c306b0ecd216968112101b459c9e42e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTkyMDUyOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/base/ReadOnlyUserStoreInitializerTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDozNTowMFrOFhTvDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNTowNzo0MVrOFhUB2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3MDY2OA==", "bodyText": "Add a class description. Address this at every other instance in this PR.", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370470668", "createdAt": "2020-01-24T04:35:00Z", "author": {"login": "sachiniWettasinghe"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/base/ReadOnlyUserStoreInitializerTestCase.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.base;\n+\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.carbon.integration.common.utils.mgt.ServerConfigurationManager;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.ISTestUtils;\n+\n+import java.io.File;\n+\n+public class ReadOnlyUserStoreInitializerTestCase extends ISIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0441de61c306b0ecd216968112101b459c9e42e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3NTQ4MA==", "bodyText": "Resolved in d706fad", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370475480", "createdAt": "2020-01-24T05:07:41Z", "author": {"login": "gayashanbc"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/base/ReadOnlyUserStoreInitializerTestCase.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.base;\n+\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.carbon.integration.common.utils.mgt.ServerConfigurationManager;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.ISTestUtils;\n+\n+import java.io.File;\n+\n+public class ReadOnlyUserStoreInitializerTestCase extends ISIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3MDY2OA=="}, "originalCommit": {"oid": "e0441de61c306b0ecd216968112101b459c9e42e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTkyMzkyOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/base/ReadOnlyUserStoreInitializerTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDozOTowMlrOFhTxQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDozOTowMlrOFhTxQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3MTIzMw==", "bodyText": "Shall we get the server restart with toml config change to a private method for more readability", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370471233", "createdAt": "2020-01-24T04:39:02Z", "author": {"login": "sachiniWettasinghe"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/base/ReadOnlyUserStoreInitializerTestCase.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.base;\n+\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.carbon.integration.common.utils.mgt.ServerConfigurationManager;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.ISTestUtils;\n+\n+import java.io.File;\n+\n+public class ReadOnlyUserStoreInitializerTestCase extends ISIntegrationTest {\n+\n+    private ServerConfigurationManager scm;\n+    private File defaultConfigFile;\n+    private UserManagementClient userMgtClient;\n+    private AuthenticatorClient authenticatorClient;\n+    private String newUserName = \"ReadOnlyLDAPUserName\";\n+    private String newUserRole = \"ReadOnlyLDAPUserRole\";\n+    private String newUserPassword = \"ReadOnlyLDAPUserPass\";\n+\n+    @BeforeTest(alwaysRun = true)\n+    public void initUserStoreConfig() throws Exception {\n+\n+        super.init();\n+        userMgtClient = new UserManagementClient(backendURL, getSessionCookie());\n+        authenticatorClient = new AuthenticatorClient(backendURL);\n+\n+        userMgtClient.addRole(newUserRole, null, new String[]{\"/permission/admin/login\"});\n+        userMgtClient.addUser(newUserName, newUserPassword, new String[]{newUserRole}, null);\n+\n+        String carbonHome = Utils.getResidentCarbonHome();\n+        defaultConfigFile = getDeploymentTomlFile(carbonHome);\n+        log.info(\"Default TOML: \" + defaultConfigFile.toString());\n+        File userMgtConfigFile = new File(getISResourceLocation() + File.separator + \"userMgt\"\n+                + File.separator + \"read_only_ldap_user_mgt_config.toml\");\n+        scm = new ServerConfigurationManager(isServer);\n+        scm.applyConfigurationWithoutRestart(userMgtConfigFile, defaultConfigFile, true);\n+        scm.restartGracefully();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0441de61c306b0ecd216968112101b459c9e42e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTkyOTc1OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-add-user.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDo0NDo0NlrOFhT0pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDo0NDo0NlrOFhT0pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3MjEwMw==", "bodyText": "Add new line EOF. check every other instance.", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370472103", "createdAt": "2020-01-24T04:44:46Z", "author": {"login": "sachiniWettasinghe"}, "path": "modules/integration/tests-integration/tests-backend/src/test/resources/org/wso2/identity/integration/test/scim2/rest/api/scim2-add-user.json", "diffHunk": "@@ -0,0 +1,26 @@\n+{\n+    \"schemas\": [],\n+    \"name\": {\n+        \"firstName\": \"Kim\",\n+        \"lastName\": \"Berry\"\n+    },\n+    \"userName\": \"kim\",\n+    \"password\": \"abc123\",\n+    \"emails\": [\n+        {\n+            \"type\": \"home\",\n+            \"value\": \"kim@gmail.com\",\n+            \"primary\": true\n+        },\n+        {\n+            \"type\": \"work\",\n+            \"value\": \"kim@wso2.com\"\n+        }\n+    ],\n+    \"EnterpriseUser\": {\n+        \"employeeNumber\": \"1234A\",\n+        \"manager\": {\n+            \"value\": \"Taylor\"\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0441de61c306b0ecd216968112101b459c9e42e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTkzODkyOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/base/ReadOnlyUserStoreInitializerTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDo1NDoxMFrOFhT59w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNTowNjoxNVrOFhUBMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3MzQ2Mw==", "bodyText": "Is it necessary to throw more generic Exception type here? Can we throw more specific Exception/s instead ? Check and validate this in everywhere in the PR.", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370473463", "createdAt": "2020-01-24T04:54:10Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/base/ReadOnlyUserStoreInitializerTestCase.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.base;\n+\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.carbon.integration.common.utils.mgt.ServerConfigurationManager;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.ISTestUtils;\n+\n+import java.io.File;\n+\n+public class ReadOnlyUserStoreInitializerTestCase extends ISIntegrationTest {\n+\n+    private ServerConfigurationManager scm;\n+    private File defaultConfigFile;\n+    private UserManagementClient userMgtClient;\n+    private AuthenticatorClient authenticatorClient;\n+    private String newUserName = \"ReadOnlyLDAPUserName\";\n+    private String newUserRole = \"ReadOnlyLDAPUserRole\";\n+    private String newUserPassword = \"ReadOnlyLDAPUserPass\";\n+\n+    @BeforeTest(alwaysRun = true)\n+    public void initUserStoreConfig() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a409a39879f00146f094084f750cb1aade07a49"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3NTMxMg==", "bodyText": "Replaced in places where the super method has not specifically thrown an \"Exception\".\nd706fad", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370475312", "createdAt": "2020-01-24T05:06:15Z", "author": {"login": "gayashanbc"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/base/ReadOnlyUserStoreInitializerTestCase.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.base;\n+\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.carbon.integration.common.utils.mgt.ServerConfigurationManager;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.ISTestUtils;\n+\n+import java.io.File;\n+\n+public class ReadOnlyUserStoreInitializerTestCase extends ISIntegrationTest {\n+\n+    private ServerConfigurationManager scm;\n+    private File defaultConfigFile;\n+    private UserManagementClient userMgtClient;\n+    private AuthenticatorClient authenticatorClient;\n+    private String newUserName = \"ReadOnlyLDAPUserName\";\n+    private String newUserRole = \"ReadOnlyLDAPUserRole\";\n+    private String newUserPassword = \"ReadOnlyLDAPUserPass\";\n+\n+    @BeforeTest(alwaysRun = true)\n+    public void initUserStoreConfig() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3MzQ2Mw=="}, "originalCommit": {"oid": "2a409a39879f00146f094084f750cb1aade07a49"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTk1MTg3OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/base/ReadOnlyUserStoreInitializerTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNTowNjo1NVrOFhUBjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOTowMToxOFrOFhXR6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3NTQwNA==", "bodyText": "Shall we add a comment explaining the reason for the second initiation.", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370475404", "createdAt": "2020-01-24T05:06:55Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/base/ReadOnlyUserStoreInitializerTestCase.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.base;\n+\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.carbon.integration.common.utils.mgt.ServerConfigurationManager;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.ISTestUtils;\n+\n+import java.io.File;\n+\n+public class ReadOnlyUserStoreInitializerTestCase extends ISIntegrationTest {\n+\n+    private ServerConfigurationManager scm;\n+    private File defaultConfigFile;\n+    private UserManagementClient userMgtClient;\n+    private AuthenticatorClient authenticatorClient;\n+    private String newUserName = \"ReadOnlyLDAPUserName\";\n+    private String newUserRole = \"ReadOnlyLDAPUserRole\";\n+    private String newUserPassword = \"ReadOnlyLDAPUserPass\";\n+\n+    @BeforeTest(alwaysRun = true)\n+    public void initUserStoreConfig() throws Exception {\n+\n+        super.init();\n+        userMgtClient = new UserManagementClient(backendURL, getSessionCookie());\n+        authenticatorClient = new AuthenticatorClient(backendURL);\n+\n+        userMgtClient.addRole(newUserRole, null, new String[]{\"/permission/admin/login\"});\n+        userMgtClient.addUser(newUserName, newUserPassword, new String[]{newUserRole}, null);\n+\n+        String carbonHome = Utils.getResidentCarbonHome();\n+        defaultConfigFile = getDeploymentTomlFile(carbonHome);\n+        log.info(\"Default TOML: \" + defaultConfigFile.toString());\n+        File userMgtConfigFile = new File(getISResourceLocation() + File.separator + \"userMgt\"\n+                + File.separator + \"read_only_ldap_user_mgt_config.toml\");\n+        scm = new ServerConfigurationManager(isServer);\n+        scm.applyConfigurationWithoutRestart(userMgtConfigFile, defaultConfigFile, true);\n+        scm.restartGracefully();\n+    }\n+\n+    @AfterTest(alwaysRun = true)\n+    public void resetUserStoreConfig() throws Exception {\n+\n+        super.init();\n+        scm.restoreToLastConfiguration(true);\n+        super.init(TestUserMode.SUPER_TENANT_ADMIN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a409a39879f00146f094084f750cb1aade07a49"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUyODc0NQ==", "bodyText": "Removed the first call as it's redundant in 1aa6b85", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370528745", "createdAt": "2020-01-24T09:01:18Z", "author": {"login": "gayashanbc"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/base/ReadOnlyUserStoreInitializerTestCase.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.base;\n+\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.integration.common.admin.client.AuthenticatorClient;\n+import org.wso2.carbon.integration.common.utils.mgt.ServerConfigurationManager;\n+import org.wso2.identity.integration.common.clients.UserManagementClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.ISTestUtils;\n+\n+import java.io.File;\n+\n+public class ReadOnlyUserStoreInitializerTestCase extends ISIntegrationTest {\n+\n+    private ServerConfigurationManager scm;\n+    private File defaultConfigFile;\n+    private UserManagementClient userMgtClient;\n+    private AuthenticatorClient authenticatorClient;\n+    private String newUserName = \"ReadOnlyLDAPUserName\";\n+    private String newUserRole = \"ReadOnlyLDAPUserRole\";\n+    private String newUserPassword = \"ReadOnlyLDAPUserPass\";\n+\n+    @BeforeTest(alwaysRun = true)\n+    public void initUserStoreConfig() throws Exception {\n+\n+        super.init();\n+        userMgtClient = new UserManagementClient(backendURL, getSessionCookie());\n+        authenticatorClient = new AuthenticatorClient(backendURL);\n+\n+        userMgtClient.addRole(newUserRole, null, new String[]{\"/permission/admin/login\"});\n+        userMgtClient.addUser(newUserName, newUserPassword, new String[]{newUserRole}, null);\n+\n+        String carbonHome = Utils.getResidentCarbonHome();\n+        defaultConfigFile = getDeploymentTomlFile(carbonHome);\n+        log.info(\"Default TOML: \" + defaultConfigFile.toString());\n+        File userMgtConfigFile = new File(getISResourceLocation() + File.separator + \"userMgt\"\n+                + File.separator + \"read_only_ldap_user_mgt_config.toml\");\n+        scm = new ServerConfigurationManager(isServer);\n+        scm.applyConfigurationWithoutRestart(userMgtConfigFile, defaultConfigFile, true);\n+        scm.restartGracefully();\n+    }\n+\n+    @AfterTest(alwaysRun = true)\n+    public void resetUserStoreConfig() throws Exception {\n+\n+        super.init();\n+        scm.restoreToLastConfiguration(true);\n+        super.init(TestUserMode.SUPER_TENANT_ADMIN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3NTQwNA=="}, "originalCommit": {"oid": "2a409a39879f00146f094084f750cb1aade07a49"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTk1NDI1OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/rest/api/SCIMUserUpdateReadOnlyTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNTowOTo1MVrOFhUDBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNTowOTo1MVrOFhUDBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3NTc4MA==", "bodyText": "Are these variables use outside the class? Otherwise lets restrict the access to private", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370475780", "createdAt": "2020-01-24T05:09:51Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/rest/api/SCIMUserUpdateReadOnlyTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package org.wso2.identity.integration.test.scim2.rest.api;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.response.ExtractableResponse;\n+import io.restassured.response.Response;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.USERS_ENDPOINT;\n+\n+/**\n+ * Test cases for updating users via SCIM PATCH operations in a read-only user store.\n+ */\n+public class SCIMUserUpdateReadOnlyTest extends SCIM2BaseTest {\n+\n+    private static final Log log = LogFactory.getLog(SCIMUserUpdateReadOnlyTest.class);\n+\n+    protected String endpointURL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d706fad3a498370b6d8ddf0208a9a091645d2975"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTk2MTQxOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/rest/api/SCIMUserUpdateTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNToxNzoyOFrOFhUHdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNToxNzoyOFrOFhUHdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3NjkxOQ==", "bodyText": "Shall we add more meaningful string like \"Created User's userid :\"", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370476919", "createdAt": "2020-01-24T05:17:28Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/rest/api/SCIMUserUpdateTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.scim2.rest.api;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.response.ExtractableResponse;\n+import io.restassured.response.Response;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+\n+import java.io.IOException;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+\n+import static org.hamcrest.core.IsNull.notNullValue;\n+import static org.wso2.identity.integration.test.scim2.SCIM2BaseTestCase.USERS_ENDPOINT;\n+\n+/**\n+ * Test cases for updating users via SCIM PATCH and PUT operations.\n+ */\n+public class SCIMUserUpdateTest extends SCIM2BaseTest {\n+\n+    private static final Log log = LogFactory.getLog(SCIMUserUpdateTest.class);\n+\n+    protected String endpointURL;\n+    protected String userId = null;\n+    private static final String SCIM_CONTENT_TYPE = \"application/scim+json\";\n+\n+    @Factory(dataProvider = \"restAPIUserConfigProvider\")\n+    public SCIMUserUpdateTest(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        this.context = isServer;\n+        this.authenticatingUserName = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.authenticatingCredential = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+    }\n+\n+    @DataProvider(name = \"restAPIUserConfigProvider\")\n+    public static Object[][] restAPIUserConfigProvider() {\n+\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void init() throws RemoteException {\n+\n+        super.testInit(swaggerDefinition, tenant);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testFinish() {\n+\n+        super.conclude();\n+    }\n+\n+    @BeforeMethod(alwaysRun = true)\n+    public void testInit() {\n+\n+        RestAssured.basePath = basePath;\n+    }\n+\n+    @Test\n+    public void testGetUsers() {\n+\n+        endpointURL = USERS_ENDPOINT;\n+        getResponseOfGet(endpointURL, SCIM_CONTENT_TYPE)\n+                .then()\n+                .assertThat()\n+                .statusCode(HttpStatus.SC_OK)\n+                .log()\n+                .ifValidationFails()\n+                .and()\n+                .assertThat()\n+                .header(HttpHeaders.CONTENT_TYPE, SCIM_CONTENT_TYPE);\n+    }\n+\n+    @Test(dependsOnMethods = \"testGetUsers\")\n+    public void testCreateUser() throws IOException {\n+\n+        String body = readResource(\"scim2-add-user.json\");\n+        Response response = getResponseOfPost(USERS_ENDPOINT, body, SCIM_CONTENT_TYPE);\n+        ExtractableResponse<Response> extractableResponse = response.then()\n+                .log().ifValidationFails()\n+                .assertThat()\n+                .statusCode(HttpStatus.SC_CREATED)\n+                .header(HttpHeaders.LOCATION, notNullValue())\n+                .and()\n+                .assertThat()\n+                .header(HttpHeaders.CONTENT_TYPE, SCIM_CONTENT_TYPE)\n+                .extract();\n+        Assert.assertNotNull(extractableResponse);\n+\n+        String location = response.getHeader(HttpHeaders.LOCATION);\n+        userId = location.split(USERS_ENDPOINT)[1];\n+        Assert.assertNotNull(userId, \"The user did not get created.\");\n+        log.info(\"userId :\" + userId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d706fad3a498370b6d8ddf0208a9a091645d2975"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDE1NzAyOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/rest/api/SCIMUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNzo0OTozNVrOFhV6FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOTowMDozOVrOFhXRDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUwNjI2MA==", "bodyText": "Shall we add method level comment to each public method?", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370506260", "createdAt": "2020-01-24T07:49:35Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/rest/api/SCIMUtils.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.scim2.rest.api;\n+\n+import io.restassured.response.Response;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpHeaders;\n+import org.testng.Assert;\n+\n+import java.time.DateTimeException;\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * Common utils for SCIM related test cases.\n+ */\n+public class SCIMUtils {\n+\n+    private static final String SCIM_USER_SCHEMAS = \"[urn:ietf:params:scim:schemas:core:2.0:User, \" +\n+            \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User]\";\n+\n+    public static void validateSchemasAttribute(Object schemasAttribute) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d706fad3a498370b6d8ddf0208a9a091645d2975"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUyODUyNg==", "bodyText": "Resolved in 1aa6b85", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370528526", "createdAt": "2020-01-24T09:00:39Z", "author": {"login": "gayashanbc"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/rest/api/SCIMUtils.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.scim2.rest.api;\n+\n+import io.restassured.response.Response;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpHeaders;\n+import org.testng.Assert;\n+\n+import java.time.DateTimeException;\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * Common utils for SCIM related test cases.\n+ */\n+public class SCIMUtils {\n+\n+    private static final String SCIM_USER_SCHEMAS = \"[urn:ietf:params:scim:schemas:core:2.0:User, \" +\n+            \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User]\";\n+\n+    public static void validateSchemasAttribute(Object schemasAttribute) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUwNjI2MA=="}, "originalCommit": {"oid": "d706fad3a498370b6d8ddf0208a9a091645d2975"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDQ0MDc4OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/rest/api/SCIMUserUpdateReadOnlyTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOTo1MzowMlrOFhYkWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOTo1MzowMlrOFhYkWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0OTg1MQ==", "bodyText": "Add Licence header. Lets configure it in the IDE.", "url": "https://github.com/wso2/product-is/pull/7362#discussion_r370549851", "createdAt": "2020-01-24T09:53:02Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/scim2/rest/api/SCIMUserUpdateReadOnlyTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package org.wso2.identity.integration.test.scim2.rest.api;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aa6b856847559ff0eaa3e4c3f520ab86ea8c16f"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1440, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}