{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5Mzk3ODIy", "number": 7435, "title": "Add integration test for Email OTP authentication", "bodyText": "This PR covers configuring email OTP and login in using a super tenant user and a tenant user. In the identity-outbound-auth-email-otp component , email OTP is validated by setting it to the authentication context. Hence it is not possible to validate OTP in the integration test. So this test will check for the redirection to email OTP authentication page after the successful authentication from the first step.", "createdAt": "2020-01-31T04:00:47Z", "url": "https://github.com/wso2/product-is/pull/7435", "merged": true, "mergeCommit": {"oid": "c983f9803c12b4d3850115aabd6d9dd946689fa8"}, "closed": true, "closedAt": "2020-02-05T04:07:14Z", "author": {"login": "sachiniWettasinghe"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_phJKAFqTM1MTMxOTE3NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBOHthAFqTM1MzQ1NTYwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMzE5MTc1", "url": "https://github.com/wso2/product-is/pull/7435#pullrequestreview-351319175", "createdAt": "2020-01-31T06:52:19Z", "commit": {"oid": "bc8ddb24a79b18f97651f22f2cc621fbe9a14115"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNjo1MjoxOVrOFkCthA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNjo1NDoyMFrOFkCvXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMzNzQ3Ng==", "bodyText": "This seems to be > 120.", "url": "https://github.com/wso2/product-is/pull/7435#discussion_r373337476", "createdAt": "2020-01-31T06:52:19Z", "author": {"login": "ShanChathusanda93"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/EmailOTPTestCase.java", "diffHunk": "@@ -0,0 +1,463 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.identity.integration.test;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.identity.application.common.model.xsd.AuthenticationStep;\n+import org.wso2.carbon.identity.application.common.model.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.xsd.InboundAuthenticationConfig;\n+import org.wso2.carbon.identity.application.common.model.xsd.InboundAuthenticationRequestConfig;\n+import org.wso2.carbon.identity.application.common.model.xsd.LocalAndOutboundAuthenticationConfig;\n+import org.wso2.carbon.identity.application.common.model.xsd.LocalAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.xsd.ServiceProvider;\n+import org.wso2.carbon.identity.sso.saml.stub.types.SAMLSSOServiceProviderDTO;\n+import org.wso2.carbon.integration.common.utils.exceptions.AutomationUtilException;\n+import org.wso2.carbon.integration.common.utils.mgt.ServerConfigurationManager;\n+import org.wso2.carbon.um.ws.api.stub.ClaimValue;\n+import org.wso2.carbon.um.ws.api.stub.RemoteUserStoreManagerServiceUserStoreExceptionException;\n+import org.wso2.carbon.user.api.UserStoreException;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.clients.application.mgt.ApplicationManagementServiceClient;\n+import org.wso2.identity.integration.common.clients.sso.saml.SAMLSSOConfigServiceClient;\n+import org.wso2.identity.integration.common.clients.usermgt.remote.RemoteUserStoreManagerServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.CommonConstants;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.xpath.XPathExpressionException;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.DEFAULT_TOMCAT_PORT;\n+\n+/**\n+ * This class adds test cases for configuring email otp and login with a super tenant and a tenant user.\n+ */\n+public class EmailOTPTestCase extends ISIntegrationTest {\n+\n+    private static final Log log = LogFactory.getLog(EmailOTPTestCase.class);\n+\n+    private static final String APPLICATION_NAME = \"SAML-SSO-TestApplication\";\n+    private static final String firstNameClaimURI = \"http://wso2.org/claims/givenname\";\n+    private static final String lastNameClaimURI = \"http://wso2.org/claims/lastname\";\n+    private static final String emailClaimURI = \"http://wso2.org/claims/emailaddress\";\n+    private static final String INBOUND_AUTH_TYPE = \"samlsso\";\n+    private static final String ATTRIBUTE_CS_INDEX_VALUE = \"1239245949\";\n+    private static final String ATTRIBUTE_CS_INDEX_NAME = \"attrConsumServiceIndex\";\n+    private static final String ACS_URL = \"http://localhost:8490/%s/home.jsp\";\n+    private static final String NAMEID_FORMAT = \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\";\n+    private static final String LOGIN_URL = \"/carbon/admin/login.jsp\";\n+    private static final String IDENTITY_PROVIDER_NAME = \"emailOTPIdP\";\n+    private static final String IDENTITY_PROVIDER_ALIAS = \"https://localhost:\" + CommonConstants.IS_DEFAULT_HTTPS_PORT\n+            + \"/oauth2/token/\";\n+    private static final String AUTHENTICATOR_NAME = \"EmailOTP\";\n+    private static final String EMAIL_OTP_CONFIG_TOML = \"email_otp_config.toml\";\n+    private static final String EMAIL_ADMIN_CONFIG_XML = \"email-admin-config.xml\";\n+    private static final String EMAIL_OTP_TEMPLATE_CONFIGURED_XML = \"emailOTP-email-template.xml\";\n+    private static final String SAML_SSO_LOGIN_URL = \"http://localhost:\" + DEFAULT_TOMCAT_PORT +\n+            \"/%s/samlsso?SAML2.HTTPBinding=HTTP-POST\";\n+    private String SAML_SSO_URL = \"https://localhost:9853/samlsso\";\n+    private static final String COMMON_AUTH_URL = \"https://localhost:9853/commonauth\";\n+    private static final String EMAIL_OTP_AUTHENTICATION_ENDPOINT_URL = \"https://localhost:\" +\n+            CommonConstants.IS_DEFAULT_HTTPS_PORT + \"/emailotpauthenticationendpoint/emailotp.jsp\";\n+    private static final String USER_AGENT = \"Apache-HttpClient/4.2.5 (java 1.5)\";\n+    private static final String profileName = \"default\";\n+    private static final String TENANT_DOMAIN_PARAM = \"tenantDomain\";\n+\n+    private HttpClient httpClient;\n+    private ApplicationManagementServiceClient applicationManagementServiceClient;\n+    private SAMLSSOConfigServiceClient ssoConfigServiceClient;\n+    private IdentityProviderMgtServiceClient identityProviderMgtServiceClient;\n+    private ServerConfigurationManager serverConfigurationManager;\n+    private RemoteUserStoreManagerServiceClient remoteUSMServiceClient;\n+    private TestConfig config;\n+\n+    @Factory(dataProvider = \"testConfigProvider\")\n+    public EmailOTPTestCase(TestConfig config) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.info(\"Email OTP test case initialized for \" + config);\n+        }\n+        this.config = config;\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        changeISConfiguration();\n+        // Re-initiating after the restart.\n+        super.init(config.getUserMode());\n+        ConfigurationContext configContext = ConfigurationContextFactory.\n+                createConfigurationContextFromFileSystem(null, null);\n+        applicationManagementServiceClient = new ApplicationManagementServiceClient(sessionCookie, backendURL,\n+                configContext);\n+        ssoConfigServiceClient = new SAMLSSOConfigServiceClient(backendURL, sessionCookie);\n+        identityProviderMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL,\n+                configContext);\n+        remoteUSMServiceClient = new RemoteUserStoreManagerServiceClient(backendURL, sessionCookie);\n+        httpClient = HttpClientBuilder.create().setDefaultCookieStore(new BasicCookieStore()).build();\n+\n+        createUser();\n+        createApplication();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testClear() throws Exception {\n+\n+        deleteUser();\n+        deleteApplication();\n+\n+        applicationManagementServiceClient = null;\n+        ssoConfigServiceClient = null;\n+        identityProviderMgtServiceClient = null;\n+        remoteUSMServiceClient = null;\n+        httpClient = null;\n+    }\n+\n+    @Test(description = \"Testing Email OTP authentication with a SAML SP\", groups = \"wso2.is\", priority = 1)\n+    public void testEmailOTPAuthentication() {\n+\n+        try {\n+            HttpResponse response = Utils.sendGetRequest(String.format(SAML_SSO_LOGIN_URL, config.getSpEntityId()),\n+                    USER_AGENT, httpClient);\n+            String samlRequest = Utils.extractDataFromResponse(response, CommonConstants.SAML_REQUEST_PARAM, 5);\n+            response = sendSAMLMessage(SAML_SSO_URL, samlRequest);\n+            EntityUtils.consume(response.getEntity());\n+            response = Utils.sendRedirectRequest(response, USER_AGENT, ACS_URL, config.getSpEntityId(), httpClient);\n+            String sessionKey = Utils.extractDataFromResponse(response, CommonConstants.SESSION_DATA_KEY, 1);\n+            response = Utils.sendPOSTMessage(sessionKey, SAML_SSO_URL, USER_AGENT, ACS_URL, config.getSpEntityId(),\n+                    config.getUsername(), config.getPassword(), httpClient);\n+\n+            if (Utils.requestMissingClaims(response)) {\n+                String pastrCookie = Utils.getPastreCookie(response);\n+                Assert.assertNotNull(pastrCookie, \"pastr cookie not found in response.\");\n+                EntityUtils.consume(response.getEntity());\n+                response = Utils.sendPOSTConsentMessage(response, COMMON_AUTH_URL, USER_AGENT, String.format(ACS_URL,\n+                        config.getSpEntityId()), httpClient, pastrCookie);\n+                EntityUtils.consume(response.getEntity());\n+            }\n+\n+            String redirectUrl = Utils.getRedirectUrl(response);\n+            Assert.assertTrue(redirectUrl.contains(EMAIL_OTP_AUTHENTICATION_ENDPOINT_URL),\n+                    \"Error in redirection to email OTP authentication page.\");\n+        } catch (Exception e) {\n+            Assert.fail(\"Authentication failed for user: \" + config.getUsername(), e);\n+        }\n+    }\n+\n+    private void createUser() {\n+\n+        log.info(\"Creating user: \" + config.getUsername());\n+        try {\n+            remoteUSMServiceClient.addUser(config.getTenantAwareUsername(), config.getPassword(), null,\n+                    getUserClaims(), profileName, true);\n+        } catch (UserStoreException | RemoteException | RemoteUserStoreManagerServiceUserStoreExceptionException e) {\n+            log.error(\"Error while creating the user: \" + config.getUsername(), e);\n+        }\n+    }\n+\n+    private void deleteUser() {\n+\n+        log.info(\"Deleting user: \" + config.getUsername());\n+        try {\n+            remoteUSMServiceClient.deleteUser(config.getTenantAwareUsername());\n+        } catch (RemoteUserStoreManagerServiceUserStoreExceptionException | RemoteException e) {\n+            log.error(\"Error while deleting the user: \" + config.getUsername(), e);\n+        }\n+    }\n+\n+    private HttpResponse sendSAMLMessage(String url, String samlMsgValue) throws IOException {\n+\n+        List<NameValuePair> urlParameters = new ArrayList<>();\n+        HttpPost post = new HttpPost(url);\n+        post.setHeader(\"User-Agent\", USER_AGENT);\n+        urlParameters.add(new BasicNameValuePair(CommonConstants.SAML_REQUEST_PARAM, samlMsgValue));\n+        urlParameters.add(new BasicNameValuePair(TENANT_DOMAIN_PARAM, config.getTenantDomain()));\n+        post.setEntity(new UrlEncodedFormEntity(urlParameters));\n+        return httpClient.execute(post);\n+    }\n+\n+    private void changeISConfiguration() throws AutomationUtilException, XPathExpressionException, IOException {\n+\n+        String carbonHome = Utils.getResidentCarbonHome();\n+        File defaultTomlFile = getDeploymentTomlFile(carbonHome);\n+        File emailOTPConfigFile = new File(getISResourceLocation() + File.separator + \"email\" + File.separator\n+                + EmailOTPTestCase.EMAIL_OTP_CONFIG_TOML);\n+        serverConfigurationManager = new ServerConfigurationManager(isServer);\n+        serverConfigurationManager.applyConfigurationWithoutRestart(emailOTPConfigFile, defaultTomlFile, true);\n+        changeEmailAdminConfigXml(carbonHome);\n+        serverConfigurationManager.restartGracefully();\n+    }\n+\n+    /**\n+     * This method is to add the email template for email otp in the email-admin-config.xml file.\n+     *\n+     * @param carbonHome Resident carbon home.\n+     * @throws IOException Error in applying the config file change.\n+     */\n+    private void changeEmailAdminConfigXml(String carbonHome) throws IOException {\n+\n+        File defaultEmailAdminConfigFile = new File(carbonHome + File.separator + \"repository\" + File.separator\n+                + \"conf\" + File.separator + \"email\" + File.separator + EMAIL_ADMIN_CONFIG_XML);\n+        File emailOTPEmailTemplateAddedFile = new File(getISResourceLocation() + File.separator + \"email\" +\n+                File.separator + EMAIL_OTP_TEMPLATE_CONFIGURED_XML);\n+        serverConfigurationManager.applyConfigurationWithoutRestart(emailOTPEmailTemplateAddedFile,\n+                defaultEmailAdminConfigFile, true);\n+    }\n+\n+    private void createApplication() throws Exception {\n+\n+        ServiceProvider serviceProvider = new ServiceProvider();\n+        serviceProvider.setApplicationName(APPLICATION_NAME);\n+        serviceProvider.setDescription(\"This is a test Service Provider\");\n+        applicationManagementServiceClient.createApplication(serviceProvider);\n+        serviceProvider = applicationManagementServiceClient.getApplication(APPLICATION_NAME);\n+\n+        InboundAuthenticationRequestConfig requestConfig = new InboundAuthenticationRequestConfig();\n+        requestConfig.setInboundAuthType(INBOUND_AUTH_TYPE);\n+        requestConfig.setInboundAuthKey(config.getSpEntityId());\n+        Property attributeConsumerServiceIndexProp = new Property();\n+        attributeConsumerServiceIndexProp.setName(ATTRIBUTE_CS_INDEX_NAME);\n+        attributeConsumerServiceIndexProp.setValue(ATTRIBUTE_CS_INDEX_VALUE);\n+        requestConfig.setProperties(new Property[]{attributeConsumerServiceIndexProp});\n+        InboundAuthenticationConfig inboundAuthenticationConfig = new InboundAuthenticationConfig();\n+        inboundAuthenticationConfig.setInboundAuthenticationRequestConfigs(new InboundAuthenticationRequestConfig[]\n+                {requestConfig});\n+        serviceProvider.setInboundAuthenticationConfig(inboundAuthenticationConfig);\n+\n+        serviceProvider.setLocalAndOutBoundAuthenticationConfig(getLocalAndOutBoundAuthenticator());\n+        serviceProvider.getLocalAndOutBoundAuthenticationConfig().setSubjectClaimUri(emailClaimURI);\n+\n+        applicationManagementServiceClient.updateApplicationData(serviceProvider);\n+        ssoConfigServiceClient.addServiceProvider(getSsoServiceProviderDTO());\n+    }\n+\n+    private void deleteApplication() throws Exception {\n+\n+        applicationManagementServiceClient.deleteApplication(APPLICATION_NAME);\n+    }\n+\n+    private SAMLSSOServiceProviderDTO getSsoServiceProviderDTO() {\n+\n+        SAMLSSOServiceProviderDTO samlssoServiceProviderDTO = new SAMLSSOServiceProviderDTO();\n+        samlssoServiceProviderDTO.setIssuer(config.getSpEntityId());\n+        samlssoServiceProviderDTO.setAssertionConsumerUrls(new String[]{String.format(ACS_URL, config.getSpEntityId())});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8ddb24a79b18f97651f22f2cc621fbe9a14115"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMzNzk1MA==", "bodyText": "Shall we add a description for the exception?", "url": "https://github.com/wso2/product-is/pull/7435#discussion_r373337950", "createdAt": "2020-01-31T06:54:20Z", "author": {"login": "ShanChathusanda93"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/EmailOTPTestCase.java", "diffHunk": "@@ -0,0 +1,463 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.identity.integration.test;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.context.ConfigurationContextFactory;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.identity.application.common.model.xsd.AuthenticationStep;\n+import org.wso2.carbon.identity.application.common.model.xsd.FederatedAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.xsd.IdentityProvider;\n+import org.wso2.carbon.identity.application.common.model.xsd.InboundAuthenticationConfig;\n+import org.wso2.carbon.identity.application.common.model.xsd.InboundAuthenticationRequestConfig;\n+import org.wso2.carbon.identity.application.common.model.xsd.LocalAndOutboundAuthenticationConfig;\n+import org.wso2.carbon.identity.application.common.model.xsd.LocalAuthenticatorConfig;\n+import org.wso2.carbon.identity.application.common.model.xsd.Property;\n+import org.wso2.carbon.identity.application.common.model.xsd.ServiceProvider;\n+import org.wso2.carbon.identity.sso.saml.stub.types.SAMLSSOServiceProviderDTO;\n+import org.wso2.carbon.integration.common.utils.exceptions.AutomationUtilException;\n+import org.wso2.carbon.integration.common.utils.mgt.ServerConfigurationManager;\n+import org.wso2.carbon.um.ws.api.stub.ClaimValue;\n+import org.wso2.carbon.um.ws.api.stub.RemoteUserStoreManagerServiceUserStoreExceptionException;\n+import org.wso2.carbon.user.api.UserStoreException;\n+import org.wso2.identity.integration.common.clients.Idp.IdentityProviderMgtServiceClient;\n+import org.wso2.identity.integration.common.clients.application.mgt.ApplicationManagementServiceClient;\n+import org.wso2.identity.integration.common.clients.sso.saml.SAMLSSOConfigServiceClient;\n+import org.wso2.identity.integration.common.clients.usermgt.remote.RemoteUserStoreManagerServiceClient;\n+import org.wso2.identity.integration.common.utils.ISIntegrationTest;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.CommonConstants;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.xpath.XPathExpressionException;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.DEFAULT_TOMCAT_PORT;\n+\n+/**\n+ * This class adds test cases for configuring email otp and login with a super tenant and a tenant user.\n+ */\n+public class EmailOTPTestCase extends ISIntegrationTest {\n+\n+    private static final Log log = LogFactory.getLog(EmailOTPTestCase.class);\n+\n+    private static final String APPLICATION_NAME = \"SAML-SSO-TestApplication\";\n+    private static final String firstNameClaimURI = \"http://wso2.org/claims/givenname\";\n+    private static final String lastNameClaimURI = \"http://wso2.org/claims/lastname\";\n+    private static final String emailClaimURI = \"http://wso2.org/claims/emailaddress\";\n+    private static final String INBOUND_AUTH_TYPE = \"samlsso\";\n+    private static final String ATTRIBUTE_CS_INDEX_VALUE = \"1239245949\";\n+    private static final String ATTRIBUTE_CS_INDEX_NAME = \"attrConsumServiceIndex\";\n+    private static final String ACS_URL = \"http://localhost:8490/%s/home.jsp\";\n+    private static final String NAMEID_FORMAT = \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\";\n+    private static final String LOGIN_URL = \"/carbon/admin/login.jsp\";\n+    private static final String IDENTITY_PROVIDER_NAME = \"emailOTPIdP\";\n+    private static final String IDENTITY_PROVIDER_ALIAS = \"https://localhost:\" + CommonConstants.IS_DEFAULT_HTTPS_PORT\n+            + \"/oauth2/token/\";\n+    private static final String AUTHENTICATOR_NAME = \"EmailOTP\";\n+    private static final String EMAIL_OTP_CONFIG_TOML = \"email_otp_config.toml\";\n+    private static final String EMAIL_ADMIN_CONFIG_XML = \"email-admin-config.xml\";\n+    private static final String EMAIL_OTP_TEMPLATE_CONFIGURED_XML = \"emailOTP-email-template.xml\";\n+    private static final String SAML_SSO_LOGIN_URL = \"http://localhost:\" + DEFAULT_TOMCAT_PORT +\n+            \"/%s/samlsso?SAML2.HTTPBinding=HTTP-POST\";\n+    private String SAML_SSO_URL = \"https://localhost:9853/samlsso\";\n+    private static final String COMMON_AUTH_URL = \"https://localhost:9853/commonauth\";\n+    private static final String EMAIL_OTP_AUTHENTICATION_ENDPOINT_URL = \"https://localhost:\" +\n+            CommonConstants.IS_DEFAULT_HTTPS_PORT + \"/emailotpauthenticationendpoint/emailotp.jsp\";\n+    private static final String USER_AGENT = \"Apache-HttpClient/4.2.5 (java 1.5)\";\n+    private static final String profileName = \"default\";\n+    private static final String TENANT_DOMAIN_PARAM = \"tenantDomain\";\n+\n+    private HttpClient httpClient;\n+    private ApplicationManagementServiceClient applicationManagementServiceClient;\n+    private SAMLSSOConfigServiceClient ssoConfigServiceClient;\n+    private IdentityProviderMgtServiceClient identityProviderMgtServiceClient;\n+    private ServerConfigurationManager serverConfigurationManager;\n+    private RemoteUserStoreManagerServiceClient remoteUSMServiceClient;\n+    private TestConfig config;\n+\n+    @Factory(dataProvider = \"testConfigProvider\")\n+    public EmailOTPTestCase(TestConfig config) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.info(\"Email OTP test case initialized for \" + config);\n+        }\n+        this.config = config;\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        super.init();\n+        changeISConfiguration();\n+        // Re-initiating after the restart.\n+        super.init(config.getUserMode());\n+        ConfigurationContext configContext = ConfigurationContextFactory.\n+                createConfigurationContextFromFileSystem(null, null);\n+        applicationManagementServiceClient = new ApplicationManagementServiceClient(sessionCookie, backendURL,\n+                configContext);\n+        ssoConfigServiceClient = new SAMLSSOConfigServiceClient(backendURL, sessionCookie);\n+        identityProviderMgtServiceClient = new IdentityProviderMgtServiceClient(sessionCookie, backendURL,\n+                configContext);\n+        remoteUSMServiceClient = new RemoteUserStoreManagerServiceClient(backendURL, sessionCookie);\n+        httpClient = HttpClientBuilder.create().setDefaultCookieStore(new BasicCookieStore()).build();\n+\n+        createUser();\n+        createApplication();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testClear() throws Exception {\n+\n+        deleteUser();\n+        deleteApplication();\n+\n+        applicationManagementServiceClient = null;\n+        ssoConfigServiceClient = null;\n+        identityProviderMgtServiceClient = null;\n+        remoteUSMServiceClient = null;\n+        httpClient = null;\n+    }\n+\n+    @Test(description = \"Testing Email OTP authentication with a SAML SP\", groups = \"wso2.is\", priority = 1)\n+    public void testEmailOTPAuthentication() {\n+\n+        try {\n+            HttpResponse response = Utils.sendGetRequest(String.format(SAML_SSO_LOGIN_URL, config.getSpEntityId()),\n+                    USER_AGENT, httpClient);\n+            String samlRequest = Utils.extractDataFromResponse(response, CommonConstants.SAML_REQUEST_PARAM, 5);\n+            response = sendSAMLMessage(SAML_SSO_URL, samlRequest);\n+            EntityUtils.consume(response.getEntity());\n+            response = Utils.sendRedirectRequest(response, USER_AGENT, ACS_URL, config.getSpEntityId(), httpClient);\n+            String sessionKey = Utils.extractDataFromResponse(response, CommonConstants.SESSION_DATA_KEY, 1);\n+            response = Utils.sendPOSTMessage(sessionKey, SAML_SSO_URL, USER_AGENT, ACS_URL, config.getSpEntityId(),\n+                    config.getUsername(), config.getPassword(), httpClient);\n+\n+            if (Utils.requestMissingClaims(response)) {\n+                String pastrCookie = Utils.getPastreCookie(response);\n+                Assert.assertNotNull(pastrCookie, \"pastr cookie not found in response.\");\n+                EntityUtils.consume(response.getEntity());\n+                response = Utils.sendPOSTConsentMessage(response, COMMON_AUTH_URL, USER_AGENT, String.format(ACS_URL,\n+                        config.getSpEntityId()), httpClient, pastrCookie);\n+                EntityUtils.consume(response.getEntity());\n+            }\n+\n+            String redirectUrl = Utils.getRedirectUrl(response);\n+            Assert.assertTrue(redirectUrl.contains(EMAIL_OTP_AUTHENTICATION_ENDPOINT_URL),\n+                    \"Error in redirection to email OTP authentication page.\");\n+        } catch (Exception e) {\n+            Assert.fail(\"Authentication failed for user: \" + config.getUsername(), e);\n+        }\n+    }\n+\n+    private void createUser() {\n+\n+        log.info(\"Creating user: \" + config.getUsername());\n+        try {\n+            remoteUSMServiceClient.addUser(config.getTenantAwareUsername(), config.getPassword(), null,\n+                    getUserClaims(), profileName, true);\n+        } catch (UserStoreException | RemoteException | RemoteUserStoreManagerServiceUserStoreExceptionException e) {\n+            log.error(\"Error while creating the user: \" + config.getUsername(), e);\n+        }\n+    }\n+\n+    private void deleteUser() {\n+\n+        log.info(\"Deleting user: \" + config.getUsername());\n+        try {\n+            remoteUSMServiceClient.deleteUser(config.getTenantAwareUsername());\n+        } catch (RemoteUserStoreManagerServiceUserStoreExceptionException | RemoteException e) {\n+            log.error(\"Error while deleting the user: \" + config.getUsername(), e);\n+        }\n+    }\n+\n+    private HttpResponse sendSAMLMessage(String url, String samlMsgValue) throws IOException {\n+\n+        List<NameValuePair> urlParameters = new ArrayList<>();\n+        HttpPost post = new HttpPost(url);\n+        post.setHeader(\"User-Agent\", USER_AGENT);\n+        urlParameters.add(new BasicNameValuePair(CommonConstants.SAML_REQUEST_PARAM, samlMsgValue));\n+        urlParameters.add(new BasicNameValuePair(TENANT_DOMAIN_PARAM, config.getTenantDomain()));\n+        post.setEntity(new UrlEncodedFormEntity(urlParameters));\n+        return httpClient.execute(post);\n+    }\n+\n+    private void changeISConfiguration() throws AutomationUtilException, XPathExpressionException, IOException {\n+\n+        String carbonHome = Utils.getResidentCarbonHome();\n+        File defaultTomlFile = getDeploymentTomlFile(carbonHome);\n+        File emailOTPConfigFile = new File(getISResourceLocation() + File.separator + \"email\" + File.separator\n+                + EmailOTPTestCase.EMAIL_OTP_CONFIG_TOML);\n+        serverConfigurationManager = new ServerConfigurationManager(isServer);\n+        serverConfigurationManager.applyConfigurationWithoutRestart(emailOTPConfigFile, defaultTomlFile, true);\n+        changeEmailAdminConfigXml(carbonHome);\n+        serverConfigurationManager.restartGracefully();\n+    }\n+\n+    /**\n+     * This method is to add the email template for email otp in the email-admin-config.xml file.\n+     *\n+     * @param carbonHome Resident carbon home.\n+     * @throws IOException Error in applying the config file change.\n+     */\n+    private void changeEmailAdminConfigXml(String carbonHome) throws IOException {\n+\n+        File defaultEmailAdminConfigFile = new File(carbonHome + File.separator + \"repository\" + File.separator\n+                + \"conf\" + File.separator + \"email\" + File.separator + EMAIL_ADMIN_CONFIG_XML);\n+        File emailOTPEmailTemplateAddedFile = new File(getISResourceLocation() + File.separator + \"email\" +\n+                File.separator + EMAIL_OTP_TEMPLATE_CONFIGURED_XML);\n+        serverConfigurationManager.applyConfigurationWithoutRestart(emailOTPEmailTemplateAddedFile,\n+                defaultEmailAdminConfigFile, true);\n+    }\n+\n+    private void createApplication() throws Exception {\n+\n+        ServiceProvider serviceProvider = new ServiceProvider();\n+        serviceProvider.setApplicationName(APPLICATION_NAME);\n+        serviceProvider.setDescription(\"This is a test Service Provider\");\n+        applicationManagementServiceClient.createApplication(serviceProvider);\n+        serviceProvider = applicationManagementServiceClient.getApplication(APPLICATION_NAME);\n+\n+        InboundAuthenticationRequestConfig requestConfig = new InboundAuthenticationRequestConfig();\n+        requestConfig.setInboundAuthType(INBOUND_AUTH_TYPE);\n+        requestConfig.setInboundAuthKey(config.getSpEntityId());\n+        Property attributeConsumerServiceIndexProp = new Property();\n+        attributeConsumerServiceIndexProp.setName(ATTRIBUTE_CS_INDEX_NAME);\n+        attributeConsumerServiceIndexProp.setValue(ATTRIBUTE_CS_INDEX_VALUE);\n+        requestConfig.setProperties(new Property[]{attributeConsumerServiceIndexProp});\n+        InboundAuthenticationConfig inboundAuthenticationConfig = new InboundAuthenticationConfig();\n+        inboundAuthenticationConfig.setInboundAuthenticationRequestConfigs(new InboundAuthenticationRequestConfig[]\n+                {requestConfig});\n+        serviceProvider.setInboundAuthenticationConfig(inboundAuthenticationConfig);\n+\n+        serviceProvider.setLocalAndOutBoundAuthenticationConfig(getLocalAndOutBoundAuthenticator());\n+        serviceProvider.getLocalAndOutBoundAuthenticationConfig().setSubjectClaimUri(emailClaimURI);\n+\n+        applicationManagementServiceClient.updateApplicationData(serviceProvider);\n+        ssoConfigServiceClient.addServiceProvider(getSsoServiceProviderDTO());\n+    }\n+\n+    private void deleteApplication() throws Exception {\n+\n+        applicationManagementServiceClient.deleteApplication(APPLICATION_NAME);\n+    }\n+\n+    private SAMLSSOServiceProviderDTO getSsoServiceProviderDTO() {\n+\n+        SAMLSSOServiceProviderDTO samlssoServiceProviderDTO = new SAMLSSOServiceProviderDTO();\n+        samlssoServiceProviderDTO.setIssuer(config.getSpEntityId());\n+        samlssoServiceProviderDTO.setAssertionConsumerUrls(new String[]{String.format(ACS_URL, config.getSpEntityId())});\n+        samlssoServiceProviderDTO.setDefaultAssertionConsumerUrl(String.format(ACS_URL, config.getSpEntityId()));\n+        samlssoServiceProviderDTO.setNameIDFormat(NAMEID_FORMAT);\n+        samlssoServiceProviderDTO.setDoSignAssertions(true);\n+        samlssoServiceProviderDTO.setDoSignResponse(false);\n+        samlssoServiceProviderDTO.setDoSingleLogout(true);\n+        samlssoServiceProviderDTO.setLoginPageURL(LOGIN_URL);\n+\n+        return samlssoServiceProviderDTO;\n+    }\n+\n+    /**\n+     * This method is to create and get the email otp identity provider.\n+     *\n+     * @return Identity provider.\n+     * @throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8ddb24a79b18f97651f22f2cc621fbe9a14115"}, "originalPosition": 298}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7007ea1f435659bcaea6c53b1aafc0c62e53b155", "author": {"user": {"login": "sachiniWettasinghe", "name": "Sachini"}}, "url": "https://github.com/wso2/product-is/commit/7007ea1f435659bcaea6c53b1aafc0c62e53b155", "committedDate": "2020-01-31T07:19:39Z", "message": "Add integration test for email otp authentication"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc8ddb24a79b18f97651f22f2cc621fbe9a14115", "author": {"user": {"login": "sachiniWettasinghe", "name": "Sachini"}}, "url": "https://github.com/wso2/product-is/commit/bc8ddb24a79b18f97651f22f2cc621fbe9a14115", "committedDate": "2020-01-30T12:33:41Z", "message": "Add integration test for email otp authentication"}, "afterCommit": {"oid": "7007ea1f435659bcaea6c53b1aafc0c62e53b155", "author": {"user": {"login": "sachiniWettasinghe", "name": "Sachini"}}, "url": "https://github.com/wso2/product-is/commit/7007ea1f435659bcaea6c53b1aafc0c62e53b155", "committedDate": "2020-01-31T07:19:39Z", "message": "Add integration test for email otp authentication"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDU1NjA4", "url": "https://github.com/wso2/product-is/pull/7435#pullrequestreview-353455608", "createdAt": "2020-02-05T04:07:06Z", "commit": {"oid": "7007ea1f435659bcaea6c53b1aafc0c62e53b155"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1318, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}