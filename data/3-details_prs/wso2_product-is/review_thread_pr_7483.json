{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNzM5OTY1", "number": 7483, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzowNDozN1rODdlKMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzo1NDowN1rODfcmsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzQ0MTEyOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/AbstractSAMLSSOTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzowNDozN1rOFmQ9uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzoyMzoyMlrOFmRRYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2ODE1NQ==", "bodyText": "Add java doc comments for all the public methods.", "url": "https://github.com/wso2/product-is/pull/7483#discussion_r375668155", "createdAt": "2020-02-06T07:04:37Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/AbstractSAMLSSOTestCase.java", "diffHunk": "@@ -393,7 +393,17 @@ public void deleteApplication(String appName) throws Exception {\n         return claimMappingList.toArray(new ClaimMapping[claimMappingList.size()]);\n     }\n \n-    public SAMLSSOServiceProviderDTO createSsoServiceProviderDTO(SAMLConfig config) {\n+    public SAMLSSOServiceProviderDTO createSsoSPDTOForIdPInit(SAMLConfig config){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a40ccd77eb60bcbe843abd04e0614af4fd94bfb6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MzE4NA==", "bodyText": "Added the java doc for the newly added public method.", "url": "https://github.com/wso2/product-is/pull/7483#discussion_r375673184", "createdAt": "2020-02-06T07:23:22Z", "author": {"login": "ShanChathusanda93"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/AbstractSAMLSSOTestCase.java", "diffHunk": "@@ -393,7 +393,17 @@ public void deleteApplication(String appName) throws Exception {\n         return claimMappingList.toArray(new ClaimMapping[claimMappingList.size()]);\n     }\n \n-    public SAMLSSOServiceProviderDTO createSsoServiceProviderDTO(SAMLConfig config) {\n+    public SAMLSSOServiceProviderDTO createSsoSPDTOForIdPInit(SAMLConfig config){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2ODE1NQ=="}, "originalCommit": {"oid": "a40ccd77eb60bcbe843abd04e0614af4fd94bfb6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzQ0MTY3OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzowNDo1NlrOFmQ-Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzoyMzozNFrOFmRRjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2ODIzNQ==", "bodyText": "Add a comment to explain the class", "url": "https://github.com/wso2/product-is/pull/7483#discussion_r375668235", "createdAt": "2020-02-06T07:04:56Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.saml;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.identity.integration.test.util.Utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.IS_DEFAULT_HTTPS_PORT;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a40ccd77eb60bcbe843abd04e0614af4fd94bfb6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MzIzMQ==", "bodyText": "Added.", "url": "https://github.com/wso2/product-is/pull/7483#discussion_r375673231", "createdAt": "2020-02-06T07:23:34Z", "author": {"login": "ShanChathusanda93"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.saml;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.identity.integration.test.util.Utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.IS_DEFAULT_HTTPS_PORT;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2ODIzNQ=="}, "originalCommit": {"oid": "a40ccd77eb60bcbe843abd04e0614af4fd94bfb6"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjkzMDIxOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzoxNzo0M1rOFpJK8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo1MDo1NlrOFpNSvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY4NjE5NA==", "bodyText": "log.debug", "url": "https://github.com/wso2/product-is/pull/7483#discussion_r378686194", "createdAt": "2020-02-13T07:17:43Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.saml;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.identity.integration.test.util.Utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.IS_DEFAULT_HTTPS_PORT;\n+\n+/**\n+ * This class contains the test method for IDP initiated SAML SSO login process with the relevant other behaviors.\n+ */\n+public class SAMLIdPInitiatedSSOTestCase extends AbstractSAMLSSOTestCase {\n+\n+    private Log log = LogFactory.getLog(getClass());\n+\n+    private static final String SP_NAME = \"travelocity.com\";\n+    private static final String IDP_INIT_SSO_URL = \"https://localhost:%s/samlsso?spEntityID=travelocity.com\";\n+    private static final String SAML_SSO_URL = \"https://localhost:%s/samlsso\";\n+    private static final String SP_ACS_URL = \"http://localhost:8490/%s/home.jsp\";\n+    private HttpClient httpClient;\n+    private CookieStore cookieStore = new BasicCookieStore();\n+    private AbstractSAMLSSOTestCase.SAMLConfig samlConfig;\n+\n+    @Factory(dataProvider = \"samlConfigProvider\")\n+    public SAMLIdPInitiatedSSOTestCase(SAMLConfig config) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.info(\"SAML SSO Test initialized for \" + config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb30805f78e0ec2ea0eb24871c893481c2e6ad5c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1MzcyNg==", "bodyText": "Changed.", "url": "https://github.com/wso2/product-is/pull/7483#discussion_r378753726", "createdAt": "2020-02-13T09:50:56Z", "author": {"login": "ShanChathusanda93"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.saml;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.identity.integration.test.util.Utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.IS_DEFAULT_HTTPS_PORT;\n+\n+/**\n+ * This class contains the test method for IDP initiated SAML SSO login process with the relevant other behaviors.\n+ */\n+public class SAMLIdPInitiatedSSOTestCase extends AbstractSAMLSSOTestCase {\n+\n+    private Log log = LogFactory.getLog(getClass());\n+\n+    private static final String SP_NAME = \"travelocity.com\";\n+    private static final String IDP_INIT_SSO_URL = \"https://localhost:%s/samlsso?spEntityID=travelocity.com\";\n+    private static final String SAML_SSO_URL = \"https://localhost:%s/samlsso\";\n+    private static final String SP_ACS_URL = \"http://localhost:8490/%s/home.jsp\";\n+    private HttpClient httpClient;\n+    private CookieStore cookieStore = new BasicCookieStore();\n+    private AbstractSAMLSSOTestCase.SAMLConfig samlConfig;\n+\n+    @Factory(dataProvider = \"samlConfigProvider\")\n+    public SAMLIdPInitiatedSSOTestCase(SAMLConfig config) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.info(\"SAML SSO Test initialized for \" + config);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY4NjE5NA=="}, "originalCommit": {"oid": "fb30805f78e0ec2ea0eb24871c893481c2e6ad5c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzAwNjYyOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzo1MTo1MlrOFpJ3xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo1MjoyMFrOFpNVcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NzY3MA==", "bodyText": "Do we have any specific reason to throw an Exception? Can't we specify the specific Exception type here?", "url": "https://github.com/wso2/product-is/pull/7483#discussion_r378697670", "createdAt": "2020-02-13T07:51:52Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.saml;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.identity.integration.test.util.Utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.IS_DEFAULT_HTTPS_PORT;\n+\n+/**\n+ * This class contains the test method for IDP initiated SAML SSO login process with the relevant other behaviors.\n+ */\n+public class SAMLIdPInitiatedSSOTestCase extends AbstractSAMLSSOTestCase {\n+\n+    private Log log = LogFactory.getLog(getClass());\n+\n+    private static final String SP_NAME = \"travelocity.com\";\n+    private static final String IDP_INIT_SSO_URL = \"https://localhost:%s/samlsso?spEntityID=travelocity.com\";\n+    private static final String SAML_SSO_URL = \"https://localhost:%s/samlsso\";\n+    private static final String SP_ACS_URL = \"http://localhost:8490/%s/home.jsp\";\n+    private HttpClient httpClient;\n+    private CookieStore cookieStore = new BasicCookieStore();\n+    private AbstractSAMLSSOTestCase.SAMLConfig samlConfig;\n+\n+    @Factory(dataProvider = \"samlConfigProvider\")\n+    public SAMLIdPInitiatedSSOTestCase(SAMLConfig config) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.info(\"SAML SSO Test initialized for \" + config);\n+        }\n+        this.samlConfig = config;\n+    }\n+\n+    @DataProvider(name = \"samlConfigProvider\")\n+    public static Object[][] samlConfigProvider() {\n+\n+        return new SAMLConfig[][]{\n+                {new SAMLConfig(TestUserMode.SUPER_TENANT_ADMIN, User.SUPER_TENANT_USER, HttpBinding.HTTP_REDIRECT,\n+                        ClaimType.NONE, App.SUPER_TENANT_APP_WITH_SIGNING)},\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void initTest() throws Exception {\n+\n+        super.init();\n+        super.testInit();\n+        addServiceProvider();\n+        httpClient = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).disableRedirectHandling().build();\n+        super.createUser(samlConfig);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testClear() throws Exception {\n+\n+        super.deleteUser(samlConfig);\n+        super.ssoConfigServiceClient.removeServiceProvider(SP_NAME);\n+        super.deleteApplication(SP_NAME);\n+        super.testClear();\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"This test method will test the IdP initiated SAML SSO process.\")\n+    public void testIdPInitiatedSSO() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb30805f78e0ec2ea0eb24871c893481c2e6ad5c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1NDQxOQ==", "bodyText": "From the upper level codes, exception class is thrown. So need to keep this as it is.", "url": "https://github.com/wso2/product-is/pull/7483#discussion_r378754419", "createdAt": "2020-02-13T09:52:20Z", "author": {"login": "ShanChathusanda93"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.saml;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.identity.integration.test.util.Utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.IS_DEFAULT_HTTPS_PORT;\n+\n+/**\n+ * This class contains the test method for IDP initiated SAML SSO login process with the relevant other behaviors.\n+ */\n+public class SAMLIdPInitiatedSSOTestCase extends AbstractSAMLSSOTestCase {\n+\n+    private Log log = LogFactory.getLog(getClass());\n+\n+    private static final String SP_NAME = \"travelocity.com\";\n+    private static final String IDP_INIT_SSO_URL = \"https://localhost:%s/samlsso?spEntityID=travelocity.com\";\n+    private static final String SAML_SSO_URL = \"https://localhost:%s/samlsso\";\n+    private static final String SP_ACS_URL = \"http://localhost:8490/%s/home.jsp\";\n+    private HttpClient httpClient;\n+    private CookieStore cookieStore = new BasicCookieStore();\n+    private AbstractSAMLSSOTestCase.SAMLConfig samlConfig;\n+\n+    @Factory(dataProvider = \"samlConfigProvider\")\n+    public SAMLIdPInitiatedSSOTestCase(SAMLConfig config) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.info(\"SAML SSO Test initialized for \" + config);\n+        }\n+        this.samlConfig = config;\n+    }\n+\n+    @DataProvider(name = \"samlConfigProvider\")\n+    public static Object[][] samlConfigProvider() {\n+\n+        return new SAMLConfig[][]{\n+                {new SAMLConfig(TestUserMode.SUPER_TENANT_ADMIN, User.SUPER_TENANT_USER, HttpBinding.HTTP_REDIRECT,\n+                        ClaimType.NONE, App.SUPER_TENANT_APP_WITH_SIGNING)},\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void initTest() throws Exception {\n+\n+        super.init();\n+        super.testInit();\n+        addServiceProvider();\n+        httpClient = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).disableRedirectHandling().build();\n+        super.createUser(samlConfig);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testClear() throws Exception {\n+\n+        super.deleteUser(samlConfig);\n+        super.ssoConfigServiceClient.removeServiceProvider(SP_NAME);\n+        super.deleteApplication(SP_NAME);\n+        super.testClear();\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"This test method will test the IdP initiated SAML SSO process.\")\n+    public void testIdPInitiatedSSO() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NzY3MA=="}, "originalCommit": {"oid": "fb30805f78e0ec2ea0eb24871c893481c2e6ad5c"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzAwOTYxOnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzo1MzoyM1rOFpJ5rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo1MjozNVrOFpNV4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5ODE1Ng==", "bodyText": "Remove the extra new line", "url": "https://github.com/wso2/product-is/pull/7483#discussion_r378698156", "createdAt": "2020-02-13T07:53:23Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.saml;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.identity.integration.test.util.Utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.IS_DEFAULT_HTTPS_PORT;\n+\n+/**\n+ * This class contains the test method for IDP initiated SAML SSO login process with the relevant other behaviors.\n+ */\n+public class SAMLIdPInitiatedSSOTestCase extends AbstractSAMLSSOTestCase {\n+\n+    private Log log = LogFactory.getLog(getClass());\n+\n+    private static final String SP_NAME = \"travelocity.com\";\n+    private static final String IDP_INIT_SSO_URL = \"https://localhost:%s/samlsso?spEntityID=travelocity.com\";\n+    private static final String SAML_SSO_URL = \"https://localhost:%s/samlsso\";\n+    private static final String SP_ACS_URL = \"http://localhost:8490/%s/home.jsp\";\n+    private HttpClient httpClient;\n+    private CookieStore cookieStore = new BasicCookieStore();\n+    private AbstractSAMLSSOTestCase.SAMLConfig samlConfig;\n+\n+    @Factory(dataProvider = \"samlConfigProvider\")\n+    public SAMLIdPInitiatedSSOTestCase(SAMLConfig config) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.info(\"SAML SSO Test initialized for \" + config);\n+        }\n+        this.samlConfig = config;\n+    }\n+\n+    @DataProvider(name = \"samlConfigProvider\")\n+    public static Object[][] samlConfigProvider() {\n+\n+        return new SAMLConfig[][]{\n+                {new SAMLConfig(TestUserMode.SUPER_TENANT_ADMIN, User.SUPER_TENANT_USER, HttpBinding.HTTP_REDIRECT,\n+                        ClaimType.NONE, App.SUPER_TENANT_APP_WITH_SIGNING)},\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void initTest() throws Exception {\n+\n+        super.init();\n+        super.testInit();\n+        addServiceProvider();\n+        httpClient = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).disableRedirectHandling().build();\n+        super.createUser(samlConfig);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testClear() throws Exception {\n+\n+        super.deleteUser(samlConfig);\n+        super.ssoConfigServiceClient.removeServiceProvider(SP_NAME);\n+        super.deleteApplication(SP_NAME);\n+        super.testClear();\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"This test method will test the IdP initiated SAML SSO process.\")\n+    public void testIdPInitiatedSSO() throws Exception {\n+\n+        HttpResponse idpInitResponse =\n+                Utils.sendGetRequest(String.format(IDP_INIT_SSO_URL, IS_DEFAULT_HTTPS_PORT), USER_AGENT,\n+                        httpClient);\n+        String redirectUrl = Utils.getRedirectUrl(idpInitResponse);\n+        Assert.assertTrue(redirectUrl.contains(\"/authenticationendpoint/login.do\"), \"Cannot find the login page.\");\n+\n+        String sessionDataKey = getSessionDataKeyFromRedirectUrl(redirectUrl);\n+\n+        HttpResponse samlssoResponse = Utils.sendPOSTMessage(sessionDataKey, String.format(SAML_SSO_URL,\n+                IS_DEFAULT_HTTPS_PORT), USER_AGENT, SP_ACS_URL, samlConfig.getApp()\n+                        .getArtifact(), samlConfig.getUser().getUsername(), samlConfig.getUser().getPassword(),\n+                httpClient);\n+\n+        List<NameValuePair> consentRequiredClaims = Utils.getConsentRequiredClaimsFromResponse(samlssoResponse);\n+        HttpResponse commonAuthResponse = setConsentForSP(sessionDataKey, consentRequiredClaims);\n+\n+        String samlRedirectUrl = Utils.getRedirectUrl(commonAuthResponse);\n+        HttpResponse samlRedirectResponse = Utils.sendGetRequest(samlRedirectUrl, USER_AGENT, httpClient);\n+\n+        String samlRedirectPage = extractDataFromResponse(samlRedirectResponse);\n+        Assert.assertTrue(samlRedirectPage.contains(String.format(SP_ACS_URL, SP_NAME)), \"Cannot find the assertion \" +\n+                \"consumer URL in the resulting page.\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb30805f78e0ec2ea0eb24871c893481c2e6ad5c"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1NDUzMA==", "bodyText": "Removed.", "url": "https://github.com/wso2/product-is/pull/7483#discussion_r378754530", "createdAt": "2020-02-13T09:52:35Z", "author": {"login": "ShanChathusanda93"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.saml;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.identity.integration.test.util.Utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.IS_DEFAULT_HTTPS_PORT;\n+\n+/**\n+ * This class contains the test method for IDP initiated SAML SSO login process with the relevant other behaviors.\n+ */\n+public class SAMLIdPInitiatedSSOTestCase extends AbstractSAMLSSOTestCase {\n+\n+    private Log log = LogFactory.getLog(getClass());\n+\n+    private static final String SP_NAME = \"travelocity.com\";\n+    private static final String IDP_INIT_SSO_URL = \"https://localhost:%s/samlsso?spEntityID=travelocity.com\";\n+    private static final String SAML_SSO_URL = \"https://localhost:%s/samlsso\";\n+    private static final String SP_ACS_URL = \"http://localhost:8490/%s/home.jsp\";\n+    private HttpClient httpClient;\n+    private CookieStore cookieStore = new BasicCookieStore();\n+    private AbstractSAMLSSOTestCase.SAMLConfig samlConfig;\n+\n+    @Factory(dataProvider = \"samlConfigProvider\")\n+    public SAMLIdPInitiatedSSOTestCase(SAMLConfig config) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.info(\"SAML SSO Test initialized for \" + config);\n+        }\n+        this.samlConfig = config;\n+    }\n+\n+    @DataProvider(name = \"samlConfigProvider\")\n+    public static Object[][] samlConfigProvider() {\n+\n+        return new SAMLConfig[][]{\n+                {new SAMLConfig(TestUserMode.SUPER_TENANT_ADMIN, User.SUPER_TENANT_USER, HttpBinding.HTTP_REDIRECT,\n+                        ClaimType.NONE, App.SUPER_TENANT_APP_WITH_SIGNING)},\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void initTest() throws Exception {\n+\n+        super.init();\n+        super.testInit();\n+        addServiceProvider();\n+        httpClient = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).disableRedirectHandling().build();\n+        super.createUser(samlConfig);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testClear() throws Exception {\n+\n+        super.deleteUser(samlConfig);\n+        super.ssoConfigServiceClient.removeServiceProvider(SP_NAME);\n+        super.deleteApplication(SP_NAME);\n+        super.testClear();\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"This test method will test the IdP initiated SAML SSO process.\")\n+    public void testIdPInitiatedSSO() throws Exception {\n+\n+        HttpResponse idpInitResponse =\n+                Utils.sendGetRequest(String.format(IDP_INIT_SSO_URL, IS_DEFAULT_HTTPS_PORT), USER_AGENT,\n+                        httpClient);\n+        String redirectUrl = Utils.getRedirectUrl(idpInitResponse);\n+        Assert.assertTrue(redirectUrl.contains(\"/authenticationendpoint/login.do\"), \"Cannot find the login page.\");\n+\n+        String sessionDataKey = getSessionDataKeyFromRedirectUrl(redirectUrl);\n+\n+        HttpResponse samlssoResponse = Utils.sendPOSTMessage(sessionDataKey, String.format(SAML_SSO_URL,\n+                IS_DEFAULT_HTTPS_PORT), USER_AGENT, SP_ACS_URL, samlConfig.getApp()\n+                        .getArtifact(), samlConfig.getUser().getUsername(), samlConfig.getUser().getPassword(),\n+                httpClient);\n+\n+        List<NameValuePair> consentRequiredClaims = Utils.getConsentRequiredClaimsFromResponse(samlssoResponse);\n+        HttpResponse commonAuthResponse = setConsentForSP(sessionDataKey, consentRequiredClaims);\n+\n+        String samlRedirectUrl = Utils.getRedirectUrl(commonAuthResponse);\n+        HttpResponse samlRedirectResponse = Utils.sendGetRequest(samlRedirectUrl, USER_AGENT, httpClient);\n+\n+        String samlRedirectPage = extractDataFromResponse(samlRedirectResponse);\n+        Assert.assertTrue(samlRedirectPage.contains(String.format(SP_ACS_URL, SP_NAME)), \"Cannot find the assertion \" +\n+                \"consumer URL in the resulting page.\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5ODE1Ng=="}, "originalCommit": {"oid": "fb30805f78e0ec2ea0eb24871c893481c2e6ad5c"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzAwOTk3OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzo1MzozM1rOFpJ54Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo1Mjo0NVrOFpNWOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5ODIwOQ==", "bodyText": "Remove the extra new line", "url": "https://github.com/wso2/product-is/pull/7483#discussion_r378698209", "createdAt": "2020-02-13T07:53:33Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.saml;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.identity.integration.test.util.Utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.IS_DEFAULT_HTTPS_PORT;\n+\n+/**\n+ * This class contains the test method for IDP initiated SAML SSO login process with the relevant other behaviors.\n+ */\n+public class SAMLIdPInitiatedSSOTestCase extends AbstractSAMLSSOTestCase {\n+\n+    private Log log = LogFactory.getLog(getClass());\n+\n+    private static final String SP_NAME = \"travelocity.com\";\n+    private static final String IDP_INIT_SSO_URL = \"https://localhost:%s/samlsso?spEntityID=travelocity.com\";\n+    private static final String SAML_SSO_URL = \"https://localhost:%s/samlsso\";\n+    private static final String SP_ACS_URL = \"http://localhost:8490/%s/home.jsp\";\n+    private HttpClient httpClient;\n+    private CookieStore cookieStore = new BasicCookieStore();\n+    private AbstractSAMLSSOTestCase.SAMLConfig samlConfig;\n+\n+    @Factory(dataProvider = \"samlConfigProvider\")\n+    public SAMLIdPInitiatedSSOTestCase(SAMLConfig config) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.info(\"SAML SSO Test initialized for \" + config);\n+        }\n+        this.samlConfig = config;\n+    }\n+\n+    @DataProvider(name = \"samlConfigProvider\")\n+    public static Object[][] samlConfigProvider() {\n+\n+        return new SAMLConfig[][]{\n+                {new SAMLConfig(TestUserMode.SUPER_TENANT_ADMIN, User.SUPER_TENANT_USER, HttpBinding.HTTP_REDIRECT,\n+                        ClaimType.NONE, App.SUPER_TENANT_APP_WITH_SIGNING)},\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void initTest() throws Exception {\n+\n+        super.init();\n+        super.testInit();\n+        addServiceProvider();\n+        httpClient = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).disableRedirectHandling().build();\n+        super.createUser(samlConfig);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testClear() throws Exception {\n+\n+        super.deleteUser(samlConfig);\n+        super.ssoConfigServiceClient.removeServiceProvider(SP_NAME);\n+        super.deleteApplication(SP_NAME);\n+        super.testClear();\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"This test method will test the IdP initiated SAML SSO process.\")\n+    public void testIdPInitiatedSSO() throws Exception {\n+\n+        HttpResponse idpInitResponse =\n+                Utils.sendGetRequest(String.format(IDP_INIT_SSO_URL, IS_DEFAULT_HTTPS_PORT), USER_AGENT,\n+                        httpClient);\n+        String redirectUrl = Utils.getRedirectUrl(idpInitResponse);\n+        Assert.assertTrue(redirectUrl.contains(\"/authenticationendpoint/login.do\"), \"Cannot find the login page.\");\n+\n+        String sessionDataKey = getSessionDataKeyFromRedirectUrl(redirectUrl);\n+\n+        HttpResponse samlssoResponse = Utils.sendPOSTMessage(sessionDataKey, String.format(SAML_SSO_URL,\n+                IS_DEFAULT_HTTPS_PORT), USER_AGENT, SP_ACS_URL, samlConfig.getApp()\n+                        .getArtifact(), samlConfig.getUser().getUsername(), samlConfig.getUser().getPassword(),\n+                httpClient);\n+\n+        List<NameValuePair> consentRequiredClaims = Utils.getConsentRequiredClaimsFromResponse(samlssoResponse);\n+        HttpResponse commonAuthResponse = setConsentForSP(sessionDataKey, consentRequiredClaims);\n+\n+        String samlRedirectUrl = Utils.getRedirectUrl(commonAuthResponse);\n+        HttpResponse samlRedirectResponse = Utils.sendGetRequest(samlRedirectUrl, USER_AGENT, httpClient);\n+\n+        String samlRedirectPage = extractDataFromResponse(samlRedirectResponse);\n+        Assert.assertTrue(samlRedirectPage.contains(String.format(SP_ACS_URL, SP_NAME)), \"Cannot find the assertion \" +\n+                \"consumer URL in the resulting page.\");\n+\n+    }\n+\n+    private void addServiceProvider() throws Exception {\n+\n+        super.createApplication(samlConfig, SP_NAME);\n+        super.ssoConfigServiceClient.addServiceProvider(super.createSsoSPDTOForIdPInit(samlConfig));\n+        log.info(\"Service Provider \" + samlConfig.getApp().getArtifact() + \" created.\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb30805f78e0ec2ea0eb24871c893481c2e6ad5c"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1NDYxOA==", "bodyText": "Removed.", "url": "https://github.com/wso2/product-is/pull/7483#discussion_r378754618", "createdAt": "2020-02-13T09:52:45Z", "author": {"login": "ShanChathusanda93"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.saml;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.identity.integration.test.util.Utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.IS_DEFAULT_HTTPS_PORT;\n+\n+/**\n+ * This class contains the test method for IDP initiated SAML SSO login process with the relevant other behaviors.\n+ */\n+public class SAMLIdPInitiatedSSOTestCase extends AbstractSAMLSSOTestCase {\n+\n+    private Log log = LogFactory.getLog(getClass());\n+\n+    private static final String SP_NAME = \"travelocity.com\";\n+    private static final String IDP_INIT_SSO_URL = \"https://localhost:%s/samlsso?spEntityID=travelocity.com\";\n+    private static final String SAML_SSO_URL = \"https://localhost:%s/samlsso\";\n+    private static final String SP_ACS_URL = \"http://localhost:8490/%s/home.jsp\";\n+    private HttpClient httpClient;\n+    private CookieStore cookieStore = new BasicCookieStore();\n+    private AbstractSAMLSSOTestCase.SAMLConfig samlConfig;\n+\n+    @Factory(dataProvider = \"samlConfigProvider\")\n+    public SAMLIdPInitiatedSSOTestCase(SAMLConfig config) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.info(\"SAML SSO Test initialized for \" + config);\n+        }\n+        this.samlConfig = config;\n+    }\n+\n+    @DataProvider(name = \"samlConfigProvider\")\n+    public static Object[][] samlConfigProvider() {\n+\n+        return new SAMLConfig[][]{\n+                {new SAMLConfig(TestUserMode.SUPER_TENANT_ADMIN, User.SUPER_TENANT_USER, HttpBinding.HTTP_REDIRECT,\n+                        ClaimType.NONE, App.SUPER_TENANT_APP_WITH_SIGNING)},\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void initTest() throws Exception {\n+\n+        super.init();\n+        super.testInit();\n+        addServiceProvider();\n+        httpClient = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).disableRedirectHandling().build();\n+        super.createUser(samlConfig);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testClear() throws Exception {\n+\n+        super.deleteUser(samlConfig);\n+        super.ssoConfigServiceClient.removeServiceProvider(SP_NAME);\n+        super.deleteApplication(SP_NAME);\n+        super.testClear();\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"This test method will test the IdP initiated SAML SSO process.\")\n+    public void testIdPInitiatedSSO() throws Exception {\n+\n+        HttpResponse idpInitResponse =\n+                Utils.sendGetRequest(String.format(IDP_INIT_SSO_URL, IS_DEFAULT_HTTPS_PORT), USER_AGENT,\n+                        httpClient);\n+        String redirectUrl = Utils.getRedirectUrl(idpInitResponse);\n+        Assert.assertTrue(redirectUrl.contains(\"/authenticationendpoint/login.do\"), \"Cannot find the login page.\");\n+\n+        String sessionDataKey = getSessionDataKeyFromRedirectUrl(redirectUrl);\n+\n+        HttpResponse samlssoResponse = Utils.sendPOSTMessage(sessionDataKey, String.format(SAML_SSO_URL,\n+                IS_DEFAULT_HTTPS_PORT), USER_AGENT, SP_ACS_URL, samlConfig.getApp()\n+                        .getArtifact(), samlConfig.getUser().getUsername(), samlConfig.getUser().getPassword(),\n+                httpClient);\n+\n+        List<NameValuePair> consentRequiredClaims = Utils.getConsentRequiredClaimsFromResponse(samlssoResponse);\n+        HttpResponse commonAuthResponse = setConsentForSP(sessionDataKey, consentRequiredClaims);\n+\n+        String samlRedirectUrl = Utils.getRedirectUrl(commonAuthResponse);\n+        HttpResponse samlRedirectResponse = Utils.sendGetRequest(samlRedirectUrl, USER_AGENT, httpClient);\n+\n+        String samlRedirectPage = extractDataFromResponse(samlRedirectResponse);\n+        Assert.assertTrue(samlRedirectPage.contains(String.format(SP_ACS_URL, SP_NAME)), \"Cannot find the assertion \" +\n+                \"consumer URL in the resulting page.\");\n+\n+    }\n+\n+    private void addServiceProvider() throws Exception {\n+\n+        super.createApplication(samlConfig, SP_NAME);\n+        super.ssoConfigServiceClient.addServiceProvider(super.createSsoSPDTOForIdPInit(samlConfig));\n+        log.info(\"Service Provider \" + samlConfig.getApp().getArtifact() + \" created.\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5ODIwOQ=="}, "originalCommit": {"oid": "fb30805f78e0ec2ea0eb24871c893481c2e6ad5c"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzAxMTA1OnYy", "diffSide": "RIGHT", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzo1NDowN1rOFpJ6jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo1Mjo1NVrOFpNWjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5ODM4MQ==", "bodyText": "Can we please swap the constant with the variable to avoid possible null pointers", "url": "https://github.com/wso2/product-is/pull/7483#discussion_r378698381", "createdAt": "2020-02-13T07:54:07Z", "author": {"login": "DMHP"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.saml;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.identity.integration.test.util.Utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.IS_DEFAULT_HTTPS_PORT;\n+\n+/**\n+ * This class contains the test method for IDP initiated SAML SSO login process with the relevant other behaviors.\n+ */\n+public class SAMLIdPInitiatedSSOTestCase extends AbstractSAMLSSOTestCase {\n+\n+    private Log log = LogFactory.getLog(getClass());\n+\n+    private static final String SP_NAME = \"travelocity.com\";\n+    private static final String IDP_INIT_SSO_URL = \"https://localhost:%s/samlsso?spEntityID=travelocity.com\";\n+    private static final String SAML_SSO_URL = \"https://localhost:%s/samlsso\";\n+    private static final String SP_ACS_URL = \"http://localhost:8490/%s/home.jsp\";\n+    private HttpClient httpClient;\n+    private CookieStore cookieStore = new BasicCookieStore();\n+    private AbstractSAMLSSOTestCase.SAMLConfig samlConfig;\n+\n+    @Factory(dataProvider = \"samlConfigProvider\")\n+    public SAMLIdPInitiatedSSOTestCase(SAMLConfig config) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.info(\"SAML SSO Test initialized for \" + config);\n+        }\n+        this.samlConfig = config;\n+    }\n+\n+    @DataProvider(name = \"samlConfigProvider\")\n+    public static Object[][] samlConfigProvider() {\n+\n+        return new SAMLConfig[][]{\n+                {new SAMLConfig(TestUserMode.SUPER_TENANT_ADMIN, User.SUPER_TENANT_USER, HttpBinding.HTTP_REDIRECT,\n+                        ClaimType.NONE, App.SUPER_TENANT_APP_WITH_SIGNING)},\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void initTest() throws Exception {\n+\n+        super.init();\n+        super.testInit();\n+        addServiceProvider();\n+        httpClient = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).disableRedirectHandling().build();\n+        super.createUser(samlConfig);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testClear() throws Exception {\n+\n+        super.deleteUser(samlConfig);\n+        super.ssoConfigServiceClient.removeServiceProvider(SP_NAME);\n+        super.deleteApplication(SP_NAME);\n+        super.testClear();\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"This test method will test the IdP initiated SAML SSO process.\")\n+    public void testIdPInitiatedSSO() throws Exception {\n+\n+        HttpResponse idpInitResponse =\n+                Utils.sendGetRequest(String.format(IDP_INIT_SSO_URL, IS_DEFAULT_HTTPS_PORT), USER_AGENT,\n+                        httpClient);\n+        String redirectUrl = Utils.getRedirectUrl(idpInitResponse);\n+        Assert.assertTrue(redirectUrl.contains(\"/authenticationendpoint/login.do\"), \"Cannot find the login page.\");\n+\n+        String sessionDataKey = getSessionDataKeyFromRedirectUrl(redirectUrl);\n+\n+        HttpResponse samlssoResponse = Utils.sendPOSTMessage(sessionDataKey, String.format(SAML_SSO_URL,\n+                IS_DEFAULT_HTTPS_PORT), USER_AGENT, SP_ACS_URL, samlConfig.getApp()\n+                        .getArtifact(), samlConfig.getUser().getUsername(), samlConfig.getUser().getPassword(),\n+                httpClient);\n+\n+        List<NameValuePair> consentRequiredClaims = Utils.getConsentRequiredClaimsFromResponse(samlssoResponse);\n+        HttpResponse commonAuthResponse = setConsentForSP(sessionDataKey, consentRequiredClaims);\n+\n+        String samlRedirectUrl = Utils.getRedirectUrl(commonAuthResponse);\n+        HttpResponse samlRedirectResponse = Utils.sendGetRequest(samlRedirectUrl, USER_AGENT, httpClient);\n+\n+        String samlRedirectPage = extractDataFromResponse(samlRedirectResponse);\n+        Assert.assertTrue(samlRedirectPage.contains(String.format(SP_ACS_URL, SP_NAME)), \"Cannot find the assertion \" +\n+                \"consumer URL in the resulting page.\");\n+\n+    }\n+\n+    private void addServiceProvider() throws Exception {\n+\n+        super.createApplication(samlConfig, SP_NAME);\n+        super.ssoConfigServiceClient.addServiceProvider(super.createSsoSPDTOForIdPInit(samlConfig));\n+        log.info(\"Service Provider \" + samlConfig.getApp().getArtifact() + \" created.\");\n+\n+    }\n+\n+    private String getSessionDataKeyFromRedirectUrl(String redirectUrl) throws Exception {\n+\n+        String sessionDataKey = \"\";\n+        Map<String, String> queryParams = Utils.getQueryParams(redirectUrl);\n+        for (Map.Entry<String, String> paramEntry : queryParams.entrySet()) {\n+            if (paramEntry.getKey().equals(\"sessionDataKey\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb30805f78e0ec2ea0eb24871c893481c2e6ad5c"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1NDcwMw==", "bodyText": "Done.", "url": "https://github.com/wso2/product-is/pull/7483#discussion_r378754703", "createdAt": "2020-02-13T09:52:55Z", "author": {"login": "ShanChathusanda93"}, "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/saml/SAMLIdPInitiatedSSOTestCase.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.saml;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.identity.integration.test.util.Utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.IS_DEFAULT_HTTPS_PORT;\n+\n+/**\n+ * This class contains the test method for IDP initiated SAML SSO login process with the relevant other behaviors.\n+ */\n+public class SAMLIdPInitiatedSSOTestCase extends AbstractSAMLSSOTestCase {\n+\n+    private Log log = LogFactory.getLog(getClass());\n+\n+    private static final String SP_NAME = \"travelocity.com\";\n+    private static final String IDP_INIT_SSO_URL = \"https://localhost:%s/samlsso?spEntityID=travelocity.com\";\n+    private static final String SAML_SSO_URL = \"https://localhost:%s/samlsso\";\n+    private static final String SP_ACS_URL = \"http://localhost:8490/%s/home.jsp\";\n+    private HttpClient httpClient;\n+    private CookieStore cookieStore = new BasicCookieStore();\n+    private AbstractSAMLSSOTestCase.SAMLConfig samlConfig;\n+\n+    @Factory(dataProvider = \"samlConfigProvider\")\n+    public SAMLIdPInitiatedSSOTestCase(SAMLConfig config) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.info(\"SAML SSO Test initialized for \" + config);\n+        }\n+        this.samlConfig = config;\n+    }\n+\n+    @DataProvider(name = \"samlConfigProvider\")\n+    public static Object[][] samlConfigProvider() {\n+\n+        return new SAMLConfig[][]{\n+                {new SAMLConfig(TestUserMode.SUPER_TENANT_ADMIN, User.SUPER_TENANT_USER, HttpBinding.HTTP_REDIRECT,\n+                        ClaimType.NONE, App.SUPER_TENANT_APP_WITH_SIGNING)},\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void initTest() throws Exception {\n+\n+        super.init();\n+        super.testInit();\n+        addServiceProvider();\n+        httpClient = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).disableRedirectHandling().build();\n+        super.createUser(samlConfig);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testClear() throws Exception {\n+\n+        super.deleteUser(samlConfig);\n+        super.ssoConfigServiceClient.removeServiceProvider(SP_NAME);\n+        super.deleteApplication(SP_NAME);\n+        super.testClear();\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"This test method will test the IdP initiated SAML SSO process.\")\n+    public void testIdPInitiatedSSO() throws Exception {\n+\n+        HttpResponse idpInitResponse =\n+                Utils.sendGetRequest(String.format(IDP_INIT_SSO_URL, IS_DEFAULT_HTTPS_PORT), USER_AGENT,\n+                        httpClient);\n+        String redirectUrl = Utils.getRedirectUrl(idpInitResponse);\n+        Assert.assertTrue(redirectUrl.contains(\"/authenticationendpoint/login.do\"), \"Cannot find the login page.\");\n+\n+        String sessionDataKey = getSessionDataKeyFromRedirectUrl(redirectUrl);\n+\n+        HttpResponse samlssoResponse = Utils.sendPOSTMessage(sessionDataKey, String.format(SAML_SSO_URL,\n+                IS_DEFAULT_HTTPS_PORT), USER_AGENT, SP_ACS_URL, samlConfig.getApp()\n+                        .getArtifact(), samlConfig.getUser().getUsername(), samlConfig.getUser().getPassword(),\n+                httpClient);\n+\n+        List<NameValuePair> consentRequiredClaims = Utils.getConsentRequiredClaimsFromResponse(samlssoResponse);\n+        HttpResponse commonAuthResponse = setConsentForSP(sessionDataKey, consentRequiredClaims);\n+\n+        String samlRedirectUrl = Utils.getRedirectUrl(commonAuthResponse);\n+        HttpResponse samlRedirectResponse = Utils.sendGetRequest(samlRedirectUrl, USER_AGENT, httpClient);\n+\n+        String samlRedirectPage = extractDataFromResponse(samlRedirectResponse);\n+        Assert.assertTrue(samlRedirectPage.contains(String.format(SP_ACS_URL, SP_NAME)), \"Cannot find the assertion \" +\n+                \"consumer URL in the resulting page.\");\n+\n+    }\n+\n+    private void addServiceProvider() throws Exception {\n+\n+        super.createApplication(samlConfig, SP_NAME);\n+        super.ssoConfigServiceClient.addServiceProvider(super.createSsoSPDTOForIdPInit(samlConfig));\n+        log.info(\"Service Provider \" + samlConfig.getApp().getArtifact() + \" created.\");\n+\n+    }\n+\n+    private String getSessionDataKeyFromRedirectUrl(String redirectUrl) throws Exception {\n+\n+        String sessionDataKey = \"\";\n+        Map<String, String> queryParams = Utils.getQueryParams(redirectUrl);\n+        for (Map.Entry<String, String> paramEntry : queryParams.entrySet()) {\n+            if (paramEntry.getKey().equals(\"sessionDataKey\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5ODM4MQ=="}, "originalCommit": {"oid": "fb30805f78e0ec2ea0eb24871c893481c2e6ad5c"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1449, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}