{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMDExNDM5", "number": 7448, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjoxODoyMlrOEzYDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODowMzowN1rOE6Jhpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzA2OTYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/net/minecraftforge/debug/world/ForgeWorldTypeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjoxODoyMlrOHqj0pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjoyNzowM1rOHqkOSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM4OTE1OA==", "bodyText": "The customization screens need a way of sending the modified DimensionGeneratorSettings back to the WorldOptionsScreen. The built-in BiomeGeneratorTypeScreens use WorldOptionsScreen::func_239043_a_ which has protected access (I just AT'd it in my PR)", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7448#discussion_r514389158", "createdAt": "2020-10-29T16:18:22Z", "author": {"login": "Won-Ton"}, "path": "src/test/java/net/minecraftforge/debug/world/ForgeWorldTypeTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package net.minecraftforge.debug.world;\n+\n+import net.minecraft.client.Minecraft;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.button.Button;\n+import net.minecraft.util.text.StringTextComponent;\n+import net.minecraft.world.gen.settings.DimensionGeneratorSettings;\n+import net.minecraftforge.client.ForgeWorldTypeScreens;\n+import net.minecraftforge.common.world.ForgeWorldType;\n+import net.minecraftforge.event.RegistryEvent;\n+import net.minecraftforge.fml.common.Mod;\n+import net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;\n+import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;\n+import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;\n+import net.minecraftforge.registries.ObjectHolder;\n+\n+@Mod(\"forge_world_type_test\")\n+public class ForgeWorldTypeTest\n+{\n+    @ObjectHolder(\"forge_world_type_test:test_world_type\")\n+    public static ForgeWorldType testWorldType;\n+\n+    public ForgeWorldTypeTest()\n+    {\n+        FMLJavaModLoadingContext.get().getModEventBus().addGenericListener(ForgeWorldType.class, this::registerWorldTypes);\n+        FMLJavaModLoadingContext.get().getModEventBus().addListener(this::registerWorldTypeScreenFactories);\n+        FMLJavaModLoadingContext.get().getModEventBus().addListener(this::commonSetup);\n+    }\n+\n+    private void registerWorldTypes(RegistryEvent.Register<ForgeWorldType> event)\n+    {\n+        event.getRegistry().registerAll(\n+                new ForgeWorldType(DimensionGeneratorSettings::func_242750_a).setRegistryName(\"test_world_type\")\n+        );\n+    }\n+\n+    private void commonSetup(FMLCommonSetupEvent event)\n+    {\n+        ForgeWorldType.setDefaultWorldType(testWorldType);\n+    }\n+\n+    private void registerWorldTypeScreenFactories(FMLClientSetupEvent event)\n+    {\n+        ForgeWorldTypeScreens.registerFactory(testWorldType, (returnTo, dimensionGeneratorSettings) -> new Screen(testWorldType.getDisplayName())\n+        {\n+            @Override\n+            protected void init()\n+            {\n+                super.init();\n+\n+                addButton(new Button(0, 0, 120, 20, new StringTextComponent(\"close\"), btn -> {\n+                    Minecraft.getInstance().displayGuiScreen(returnTo);\n+                }));\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "593e740cb862bf3c567d88b42de4bf88e40edf90"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM5NTcyMw==", "bodyText": "True. I have also added that AT line since it makes sense to use the existing vanilla accessor.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7448#discussion_r514395723", "createdAt": "2020-10-29T16:27:03Z", "author": {"login": "gigaherz"}, "path": "src/test/java/net/minecraftforge/debug/world/ForgeWorldTypeTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package net.minecraftforge.debug.world;\n+\n+import net.minecraft.client.Minecraft;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.button.Button;\n+import net.minecraft.util.text.StringTextComponent;\n+import net.minecraft.world.gen.settings.DimensionGeneratorSettings;\n+import net.minecraftforge.client.ForgeWorldTypeScreens;\n+import net.minecraftforge.common.world.ForgeWorldType;\n+import net.minecraftforge.event.RegistryEvent;\n+import net.minecraftforge.fml.common.Mod;\n+import net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;\n+import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;\n+import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;\n+import net.minecraftforge.registries.ObjectHolder;\n+\n+@Mod(\"forge_world_type_test\")\n+public class ForgeWorldTypeTest\n+{\n+    @ObjectHolder(\"forge_world_type_test:test_world_type\")\n+    public static ForgeWorldType testWorldType;\n+\n+    public ForgeWorldTypeTest()\n+    {\n+        FMLJavaModLoadingContext.get().getModEventBus().addGenericListener(ForgeWorldType.class, this::registerWorldTypes);\n+        FMLJavaModLoadingContext.get().getModEventBus().addListener(this::registerWorldTypeScreenFactories);\n+        FMLJavaModLoadingContext.get().getModEventBus().addListener(this::commonSetup);\n+    }\n+\n+    private void registerWorldTypes(RegistryEvent.Register<ForgeWorldType> event)\n+    {\n+        event.getRegistry().registerAll(\n+                new ForgeWorldType(DimensionGeneratorSettings::func_242750_a).setRegistryName(\"test_world_type\")\n+        );\n+    }\n+\n+    private void commonSetup(FMLCommonSetupEvent event)\n+    {\n+        ForgeWorldType.setDefaultWorldType(testWorldType);\n+    }\n+\n+    private void registerWorldTypeScreenFactories(FMLClientSetupEvent event)\n+    {\n+        ForgeWorldTypeScreens.registerFactory(testWorldType, (returnTo, dimensionGeneratorSettings) -> new Screen(testWorldType.getDisplayName())\n+        {\n+            @Override\n+            protected void init()\n+            {\n+                super.init();\n+\n+                addButton(new Button(0, 0, 120, 20, new StringTextComponent(\"close\"), btn -> {\n+                    Minecraft.getInstance().displayGuiScreen(returnTo);\n+                }));\n+            }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM4OTE1OA=="}, "originalCommit": {"oid": "593e740cb862bf3c567d88b42de4bf88e40edf90"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzI5MjQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/ForgeConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzowNzo0MlrOHql_6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzoxMDozM1rOHqmHbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyNDgwOA==", "bodyText": ".define(\"defaultWorldType\", \"proposed-default\");\n\ntypo?", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7448#discussion_r514424808", "createdAt": "2020-10-29T17:07:42Z", "author": {"login": "alcatrazEscapee"}, "path": "src/main/java/net/minecraftforge/common/ForgeConfig.java", "diffHunk": "@@ -108,10 +108,35 @@\n                     .comment(\"Fix advancement loading to use a proper topological sort. This may have visibility side-effects and can thus be turned off if needed for data-pack compatibility.\")\n                     .translation(\"forge.configgui.fixAdvancementLoading\")\n                     .define(\"fixAdvancementLoading\", true);\n+\n             builder.pop();\n         }\n     }\n \n+    /**\n+     * General configuration that doesn't need to be synchronized but needs to be available before server startup\n+     */\n+    public static class Common {\n+        public final ForgeConfigSpec.ConfigValue<? extends String> defaultWorldType;\n+\n+        Common(ForgeConfigSpec.Builder builder)\n+        {\n+            builder.comment(\"General configuration settings\")\n+                    .push(\"general\");\n+\n+            defaultWorldType = builder\n+                    .comment(\"Defines a default world type to use instead of the vanilla 'default' default.\",\n+                            \"Special values:\",\n+                            \"\\t\\\"default\\\": Use the vanilla default, ignore mod-provided defaults.\",\n+                            \"\\t\\\"proposed-default\\\": Use the mod-provided default, or vanilla if none present (default).\")\n+                    .translation(\"forge.configgui.defaultWorldType\")\n+                    .define(\"fixAdvancementLoading\", \"proposed-default\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ad4f7b154423377b79a3d3e88501843045229fc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyNjczMw==", "bodyText": "I'm not seeing the typo?\nEDIT: Oh wait copypasta \ud83e\udd26", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7448#discussion_r514426733", "createdAt": "2020-10-29T17:10:33Z", "author": {"login": "gigaherz"}, "path": "src/main/java/net/minecraftforge/common/ForgeConfig.java", "diffHunk": "@@ -108,10 +108,35 @@\n                     .comment(\"Fix advancement loading to use a proper topological sort. This may have visibility side-effects and can thus be turned off if needed for data-pack compatibility.\")\n                     .translation(\"forge.configgui.fixAdvancementLoading\")\n                     .define(\"fixAdvancementLoading\", true);\n+\n             builder.pop();\n         }\n     }\n \n+    /**\n+     * General configuration that doesn't need to be synchronized but needs to be available before server startup\n+     */\n+    public static class Common {\n+        public final ForgeConfigSpec.ConfigValue<? extends String> defaultWorldType;\n+\n+        Common(ForgeConfigSpec.Builder builder)\n+        {\n+            builder.comment(\"General configuration settings\")\n+                    .push(\"general\");\n+\n+            defaultWorldType = builder\n+                    .comment(\"Defines a default world type to use instead of the vanilla 'default' default.\",\n+                            \"Special values:\",\n+                            \"\\t\\\"default\\\": Use the vanilla default, ignore mod-provided defaults.\",\n+                            \"\\t\\\"proposed-default\\\": Use the mod-provided default, or vanilla if none present (default).\")\n+                    .translation(\"forge.configgui.defaultWorldType\")\n+                    .define(\"fixAdvancementLoading\", \"proposed-default\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyNDgwOA=="}, "originalCommit": {"oid": "6ad4f7b154423377b79a3d3e88501843045229fc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTQ5OTk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/ForgeConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTozNzowN1rOHwwkXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTozNzowN1rOHwwkXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4OTQzOQ==", "bodyText": "Might I suggest a rewording of this, to avoid the doubled-up \"default\" word?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .comment(\"Defines a default world type to use instead of the vanilla 'default' default.\")\n          \n          \n            \n                                .comment(\"Defines a default world type to use. The vanilla default world type is represented by 'default'.\")", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7448#discussion_r520889439", "createdAt": "2020-11-10T21:37:07Z", "author": {"login": "sciwhiz12"}, "path": "src/main/java/net/minecraftforge/common/ForgeConfig.java", "diffHunk": "@@ -108,10 +108,32 @@\n                     .comment(\"Fix advancement loading to use a proper topological sort. This may have visibility side-effects and can thus be turned off if needed for data-pack compatibility.\")\n                     .translation(\"forge.configgui.fixAdvancementLoading\")\n                     .define(\"fixAdvancementLoading\", true);\n+\n             builder.pop();\n         }\n     }\n \n+    /**\n+     * General configuration that doesn't need to be synchronized but needs to be available before server startup\n+     */\n+    public static class Common {\n+        public final ForgeConfigSpec.ConfigValue<? extends String> defaultWorldType;\n+\n+        Common(ForgeConfigSpec.Builder builder)\n+        {\n+            builder.comment(\"General configuration settings\")\n+                    .push(\"general\");\n+\n+            defaultWorldType = builder\n+                    .comment(\"Defines a default world type to use instead of the vanilla 'default' default.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c40de6fb84a0aeac728f853ae6b84f8d5031186"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTUxMDM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/world/ForgeWorldType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTo0MDoxM1rOHwwqrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTo0NDo1MlrOHwwzzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5MTA1Mg==", "bodyText": "Just rearranging and fixing a probable misspell.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.error(\"The defaultWorldType specific in the forge config '{}' has not been registered. The vanilla default generator will be used.\", defaultWorldType);\n          \n          \n            \n                        LOGGER.error(\"The defaultWorldType '{}' specified in the forge config has not been registered. The vanilla default generator will be used.\", defaultWorldType);", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7448#discussion_r520891052", "createdAt": "2020-11-10T21:40:13Z", "author": {"login": "sciwhiz12"}, "path": "src/main/java/net/minecraftforge/common/world/ForgeWorldType.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Minecraft Forge\n+ * Copyright (c) 2016-2020.\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.world;\n+\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.StringUtils;\n+import net.minecraft.util.Util;\n+import net.minecraft.util.registry.DynamicRegistries;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.text.ITextComponent;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import net.minecraft.world.DimensionType;\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.world.gen.ChunkGenerator;\n+import net.minecraft.world.gen.DimensionSettings;\n+import net.minecraft.world.gen.settings.DimensionGeneratorSettings;\n+import net.minecraftforge.common.ForgeConfig;\n+import net.minecraftforge.registries.ForgeRegistries;\n+import net.minecraftforge.registries.ForgeRegistryEntry;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class ForgeWorldType extends ForgeRegistryEntry<ForgeWorldType>\n+{\n+    private static final Logger LOGGER = LogManager.getLogger();\n+\n+    public static ForgeWorldType getDefaultWorldType()\n+    {\n+        String defaultWorldType = ForgeConfig.COMMON.defaultWorldType.get();\n+\n+        if (StringUtils.isNullOrEmpty(defaultWorldType) || \"default\".equals(defaultWorldType))\n+            return null; // use vanilla\n+\n+        ForgeWorldType def = ForgeRegistries.WORLD_TYPES.getValue(new ResourceLocation(defaultWorldType));\n+        if (def == null)\n+        {\n+            LOGGER.error(\"The defaultWorldType specific in the forge config '{}' has not been registered. The vanilla default generator will be used.\", defaultWorldType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c40de6fb84a0aeac728f853ae6b84f8d5031186"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5MzM4OQ==", "bodyText": "oops, I didn't English very well there.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7448#discussion_r520893389", "createdAt": "2020-11-10T21:44:52Z", "author": {"login": "gigaherz"}, "path": "src/main/java/net/minecraftforge/common/world/ForgeWorldType.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Minecraft Forge\n+ * Copyright (c) 2016-2020.\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.world;\n+\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.StringUtils;\n+import net.minecraft.util.Util;\n+import net.minecraft.util.registry.DynamicRegistries;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.text.ITextComponent;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import net.minecraft.world.DimensionType;\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.world.gen.ChunkGenerator;\n+import net.minecraft.world.gen.DimensionSettings;\n+import net.minecraft.world.gen.settings.DimensionGeneratorSettings;\n+import net.minecraftforge.common.ForgeConfig;\n+import net.minecraftforge.registries.ForgeRegistries;\n+import net.minecraftforge.registries.ForgeRegistryEntry;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class ForgeWorldType extends ForgeRegistryEntry<ForgeWorldType>\n+{\n+    private static final Logger LOGGER = LogManager.getLogger();\n+\n+    public static ForgeWorldType getDefaultWorldType()\n+    {\n+        String defaultWorldType = ForgeConfig.COMMON.defaultWorldType.get();\n+\n+        if (StringUtils.isNullOrEmpty(defaultWorldType) || \"default\".equals(defaultWorldType))\n+            return null; // use vanilla\n+\n+        ForgeWorldType def = ForgeRegistries.WORLD_TYPES.getValue(new ResourceLocation(defaultWorldType));\n+        if (def == null)\n+        {\n+            LOGGER.error(\"The defaultWorldType specific in the forge config '{}' has not been registered. The vanilla default generator will be used.\", defaultWorldType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5MTA1Mg=="}, "originalCommit": {"oid": "9c40de6fb84a0aeac728f853ae6b84f8d5031186"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDA4OTM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/ForgeConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODowMzowN1rOH1CTBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODo1MTo0N1rOH1ENww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3NDIxNA==", "bodyText": "Would it be worth noting in the comment that modded world-types must be specified with a namespace? Modders will need to relay that information anyway (for server.properties) but there could still be confusion since \"default\" isn't prefixed with \"minecraft:\"", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7448#discussion_r525374214", "createdAt": "2020-11-17T18:03:07Z", "author": {"login": "Won-Ton"}, "path": "src/main/java/net/minecraftforge/common/ForgeConfig.java", "diffHunk": "@@ -108,10 +108,32 @@\n                     .comment(\"Fix advancement loading to use a proper topological sort. This may have visibility side-effects and can thus be turned off if needed for data-pack compatibility.\")\n                     .translation(\"forge.configgui.fixAdvancementLoading\")\n                     .define(\"fixAdvancementLoading\", true);\n+\n             builder.pop();\n         }\n     }\n \n+    /**\n+     * General configuration that doesn't need to be synchronized but needs to be available before server startup\n+     */\n+    public static class Common {\n+        public final ForgeConfigSpec.ConfigValue<? extends String> defaultWorldType;\n+\n+        Common(ForgeConfigSpec.Builder builder)\n+        {\n+            builder.comment(\"General configuration settings\")\n+                    .push(\"general\");\n+\n+            defaultWorldType = builder\n+                    .comment(\"Defines a default world type to use. The vanilla default world type is represented by 'default'.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a76c69864b01cc4183366f84c17a5ae44149385"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwNTYzNQ==", "bodyText": "Good idea. It may be confusing otherwise for those who are used to writing \"biomesoplenty\", which would mean \"minecraft:biomesoplenty\" with this change.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7448#discussion_r525405635", "createdAt": "2020-11-17T18:51:47Z", "author": {"login": "gigaherz"}, "path": "src/main/java/net/minecraftforge/common/ForgeConfig.java", "diffHunk": "@@ -108,10 +108,32 @@\n                     .comment(\"Fix advancement loading to use a proper topological sort. This may have visibility side-effects and can thus be turned off if needed for data-pack compatibility.\")\n                     .translation(\"forge.configgui.fixAdvancementLoading\")\n                     .define(\"fixAdvancementLoading\", true);\n+\n             builder.pop();\n         }\n     }\n \n+    /**\n+     * General configuration that doesn't need to be synchronized but needs to be available before server startup\n+     */\n+    public static class Common {\n+        public final ForgeConfigSpec.ConfigValue<? extends String> defaultWorldType;\n+\n+        Common(ForgeConfigSpec.Builder builder)\n+        {\n+            builder.comment(\"General configuration settings\")\n+                    .push(\"general\");\n+\n+            defaultWorldType = builder\n+                    .comment(\"Defines a default world type to use. The vanilla default world type is represented by 'default'.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3NDIxNA=="}, "originalCommit": {"oid": "8a76c69864b01cc4183366f84c17a5ae44149385"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 858, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}