{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3ODQzOTM3", "number": 6960, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwODo1MjoxNVrOENk3ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozOToyN1rOEQE8Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjcwOTcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/data/GlobalLootModifierProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwODo1MjoxNVrOGwSiog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwODo1MjoxNVrOGwSiog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI4ODYxMA==", "bodyText": "You should add a space after \"Modifiers\" because \"modid\" would stick on it.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6960#discussion_r453288610", "createdAt": "2020-07-12T08:52:15Z", "author": {"login": "MelanX"}, "path": "src/main/java/net/minecraftforge/common/data/GlobalLootModifierProvider.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package net.minecraftforge.common.data;\n+\n+import com.google.common.collect.Lists;\n+import com.google.gson.*;\n+import cpw.mods.modlauncher.api.LamdbaExceptionUtils;\n+import net.minecraft.data.DataGenerator;\n+import net.minecraft.data.DirectoryCache;\n+import net.minecraft.data.IDataProvider;\n+import net.minecraft.loot.conditions.ILootCondition;\n+import net.minecraft.loot.conditions.LootConditionManager;\n+import net.minecraft.loot.functions.ILootFunction;\n+import net.minecraft.loot.functions.LootFunctionManager;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.Tuple;\n+import net.minecraftforge.common.loot.GlobalLootModifierSerializer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+public abstract class GlobalLootModifierProvider implements IDataProvider\n+{\n+   private static final Logger LOGGER = LogManager.getLogger();\n+   private static final Gson GSON = (new GsonBuilder()).registerTypeHierarchyAdapter(ILootFunction.class, LootFunctionManager.func_237450_a_()).registerTypeHierarchyAdapter(ILootCondition.class, LootConditionManager.func_237474_a_()).setPrettyPrinting().create();\n+   private final DataGenerator gen;\n+   private final String modid;\n+   private final Map<String, Tuple<GlobalLootModifierSerializer<?>, List<ILootCondition>>> modifiers = new HashMap<>();\n+   private final Map<String, Consumer<JsonObject>> extraProperties = new HashMap<>();\n+   private boolean replace = false;\n+\n+   public GlobalLootModifierProvider(DataGenerator gen, String modid)\n+   {\n+      this.gen = gen;\n+      this.modid = modid;\n+   }\n+\n+   protected void replacing()\n+   {\n+      this.replace = true;\n+   }\n+\n+   /**\n+    * Call {@link #addModifier} here\n+    */\n+   protected abstract void start();\n+\n+   @Override\n+   public void act(DirectoryCache cache) throws IOException\n+   {\n+      start();\n+\n+      Path forge = gen.getOutputFolder().resolve(\"data/forge/loot_modifiers/global_loot_modifiers.json\");\n+      String modpath = \"data/\" + modid + \"/loot_modifiers/\";\n+      List<ResourceLocation> entries = new ArrayList<>();\n+\n+      modifiers.forEach(LamdbaExceptionUtils.rethrowBiConsumer((name, pair) ->\n+      {\n+         entries.add(new ResourceLocation(modid, name));\n+         Path modifierPath = gen.getOutputFolder().resolve(modpath + name + \".json\");\n+\n+         JsonObject json = new JsonObject();\n+         json.addProperty(\"type\", pair.getA().getRegistryName().toString());\n+         JsonArray conditions = new JsonArray();\n+         pair.getB().forEach(cond -> conditions.add(GSON.toJsonTree(cond)));\n+         json.add(\"conditions\", conditions);\n+\n+         Consumer<JsonObject> properties = extraProperties.get(name);\n+         if(properties != null)\n+            properties.accept(json);\n+\n+         IDataProvider.save(GSON, cache, json, modifierPath);\n+      }));\n+\n+      JsonObject forgeJson = new JsonObject();\n+      forgeJson.addProperty(\"replace\", this.replace);\n+      JsonArray modifiersArray = new JsonArray();\n+      entries.forEach(loc -> modifiersArray.add(loc.toString()));\n+      forgeJson.add(\"entries\", modifiersArray);\n+\n+      IDataProvider.save(GSON, cache, forgeJson, forge);\n+   }\n+\n+   public void addModifier(String modifier, GlobalLootModifierSerializer<?> serializer, List<ILootCondition> conditions)\n+   {\n+      addModifier(modifier, serializer, conditions, null);\n+   }\n+\n+   public void addModifier(String modifier, GlobalLootModifierSerializer<?> serializer, List<ILootCondition> conditions, @Nullable Consumer<JsonObject> extraProperties)\n+   {\n+      this.modifiers.put(modifier, new Tuple<>(serializer, conditions));\n+      this.extraProperties.put(modifier, extraProperties);\n+   }\n+\n+   @Override\n+   public String getName()\n+   {\n+      return \"Global Loot Modifiers\" + modid;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d536760c5a9dd7c803a8999c5e6c6d6db327519"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjkzNTc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/data/GlobalLootModifierProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozOToyN1rOG0C4pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozOToyN1rOG0C4pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNjQwNg==", "bodyText": "In Forge code we use 4 spaces for indentation, not 3", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6960#discussion_r457226406", "createdAt": "2020-07-20T09:39:27Z", "author": {"login": "ichttt"}, "path": "src/main/java/net/minecraftforge/common/data/GlobalLootModifierProvider.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package net.minecraftforge.common.data;\n+\n+import com.google.common.collect.Lists;\n+import com.google.gson.*;\n+import cpw.mods.modlauncher.api.LamdbaExceptionUtils;\n+import net.minecraft.data.DataGenerator;\n+import net.minecraft.data.DirectoryCache;\n+import net.minecraft.data.IDataProvider;\n+import net.minecraft.loot.ConditionArraySerializer;\n+import net.minecraft.loot.conditions.ILootCondition;\n+import net.minecraft.loot.conditions.LootConditionManager;\n+import net.minecraft.loot.functions.ILootFunction;\n+import net.minecraft.loot.functions.LootFunctionManager;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.Tuple;\n+import net.minecraftforge.common.loot.GlobalLootModifierSerializer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+public abstract class GlobalLootModifierProvider implements IDataProvider\n+{\n+   private static final Logger LOGGER = LogManager.getLogger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36450bd43eb092fc75fa76098a6de6d7b8f6b73b"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 953, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}