{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NDQ3MTU3", "number": 6401, "title": "Global Loot Funcs on 1.15.x", "bodyText": "See #6267 for complete details.\nData driven system for arbitrary loot modification as a replacement for HarvestDropsEvent, addressing #5871.", "createdAt": "2020-01-01T03:39:50Z", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6401", "merged": true, "mergeCommit": {"oid": "58e5f33fad6c39db71b01e7cfdc4aa4a588a68b8"}, "closed": true, "closedAt": "2020-02-27T06:13:37Z", "author": {"login": "Draco18s"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb18unQAH2gAyMzU4NDQ3MTU3OjQ1YzRmNDM5MDQ5MDJhZmE1MDI2NWVjN2UyM2RiZTAyYWVhOWViMzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIVHGJAFqTM2NTQzNDY0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "45c4f43904902afa50265ec7e23dbe02aea9eb35", "author": {"user": {"login": "Draco18s", "name": null}}, "url": "https://github.com/MinecraftForge/MinecraftForge/commit/45c4f43904902afa50265ec7e23dbe02aea9eb35", "committedDate": "2020-01-01T03:38:08Z", "message": "Global Loot Funcs on 1.15.x"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NTE5ODMw", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6401#pullrequestreview-339519830", "createdAt": "2020-01-07T21:31:05Z", "commit": {"oid": "45c4f43904902afa50265ec7e23dbe02aea9eb35"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMTozMTowNlrOFbGYhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMTo1MDo0OFrOFbG3lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2MDQ1NQ==", "bodyText": "This doesn't seem to address re-processing new list entries added by modifiers.\nSuch as re-running a smelting modifier after modifier that converts gravel to sand.\nIs that something we want to care about at all?", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6401#discussion_r363960455", "createdAt": "2020-01-07T21:31:06Z", "author": {"login": "LexManos"}, "path": "src/main/java/net/minecraftforge/common/ForgeHooks.java", "diffHunk": "@@ -1210,4 +1210,12 @@ public static synchronized void updateBurns()\n         FurnaceTileEntity.getBurnTimes().entrySet().forEach(e -> VANILLA_BURNS.put(e.getKey().delegate, e.getValue()));\n     }\n \n+    public static List<ItemStack> modifyLoot(List<ItemStack> list, LootContext context) {\n+        LootModifierManager man = LootModifierManager.getInstance();\n+        for(IGlobalLootModifier mod : man.getAllLootMods()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c4f43904902afa50265ec7e23dbe02aea9eb35"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2MDYzMw==", "bodyText": "This seems to be the core of the system, yet ZERO docs?", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6401#discussion_r363960633", "createdAt": "2020-01-07T21:31:30Z", "author": {"login": "LexManos"}, "path": "src/main/java/net/minecraftforge/common/loot/IGlobalLootModifier.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package net.minecraftforge.common.loot;\n+\n+import java.util.List;\n+\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.world.storage.loot.LootContext;\n+\n+public interface IGlobalLootModifier {\n+    List<ItemStack> apply(List<ItemStack> generatedLoot, LootContext context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c4f43904902afa50265ec7e23dbe02aea9eb35"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2MDc0Ng==", "bodyText": "Again, docs.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6401#discussion_r363960746", "createdAt": "2020-01-07T21:31:46Z", "author": {"login": "LexManos"}, "path": "src/main/java/net/minecraftforge/common/loot/IGlobalLootModifierSerializer.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package net.minecraftforge.common.loot;\n+\n+import com.google.gson.JsonObject;\n+\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraftforge.registries.IForgeRegistryEntry;\n+\n+public interface IGlobalLootModifierSerializer<T extends IGlobalLootModifier> extends IForgeRegistryEntry<IGlobalLootModifierSerializer<?>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c4f43904902afa50265ec7e23dbe02aea9eb35"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2MTA1OA==", "bodyText": "This needs a valid value.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6401#discussion_r363961058", "createdAt": "2020-01-07T21:32:32Z", "author": {"login": "LexManos"}, "path": "src/main/java/net/minecraftforge/common/loot/IGlobalLootModifierSerializer.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package net.minecraftforge.common.loot;\n+\n+import com.google.gson.JsonObject;\n+\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraftforge.registries.IForgeRegistryEntry;\n+\n+public interface IGlobalLootModifierSerializer<T extends IGlobalLootModifier> extends IForgeRegistryEntry<IGlobalLootModifierSerializer<?>> {\n+    public abstract T read(ResourceLocation location, JsonObject object, ILootCondition[] ailootcondition);\n+\n+    @Override\n+    public default Class<IGlobalLootModifierSerializer<?>> getRegistryType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c4f43904902afa50265ec7e23dbe02aea9eb35"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2Mjg4MA==", "bodyText": "This system is completely messed up, you're creating a new instance every time a MinecraftServer is created, such as whenever a single player world is loaded.\nBetter to stop using a static context and instead give some other way of getting the manager.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6401#discussion_r363962880", "createdAt": "2020-01-07T21:37:01Z", "author": {"login": "LexManos"}, "path": "src/main/java/net/minecraftforge/common/loot/LootModifierManager.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package net.minecraftforge.common.loot;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+//import static net.minecraft.client.resources.JsonReloadListener.LOGGER;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableMap.Builder;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonObject;\n+\n+import net.minecraft.client.resources.JsonReloadListener;\n+import net.minecraft.profiler.IProfiler;\n+import net.minecraft.resources.IResourceManager;\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraft.world.storage.loot.conditions.LootConditionManager;\n+import net.minecraft.world.storage.loot.functions.ILootFunction;\n+import net.minecraft.world.storage.loot.functions.LootFunctionManager;\n+import net.minecraftforge.fml.LogicalSide;\n+import net.minecraftforge.fml.common.thread.EffectiveSide;\n+import net.minecraftforge.registries.ForgeRegistries;\n+\n+public class LootModifierManager extends JsonReloadListener {\n+    private static LootModifierManager instance;\n+    public static final Logger LOGGER = LogManager.getLogger();\n+    private static final Gson GSON_INSTANCE = (new GsonBuilder()).registerTypeHierarchyAdapter(ILootFunction.class, new LootFunctionManager.Serializer()).registerTypeHierarchyAdapter(ILootCondition.class, new LootConditionManager.Serializer()).create();\n+\n+    private Map<ResourceLocation, IGlobalLootModifier> registeredLootModifiers = ImmutableMap.of();\n+\n+    public LootModifierManager() {\n+        super(GSON_INSTANCE, \"loot_modifiers\");\n+        instance = this;\n+    }\n+\n+    public static LootModifierManager getInstance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c4f43904902afa50265ec7e23dbe02aea9eb35"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2MzU2Mw==", "bodyText": "This is a custom class, which means we don't have to use the same parameter names. So... use real names here... splashList is DEFINITLY not a list of splashes", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6401#discussion_r363963563", "createdAt": "2020-01-07T21:38:43Z", "author": {"login": "LexManos"}, "path": "src/main/java/net/minecraftforge/common/loot/LootModifierManager.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package net.minecraftforge.common.loot;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+//import static net.minecraft.client.resources.JsonReloadListener.LOGGER;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableMap.Builder;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonObject;\n+\n+import net.minecraft.client.resources.JsonReloadListener;\n+import net.minecraft.profiler.IProfiler;\n+import net.minecraft.resources.IResourceManager;\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraft.world.storage.loot.conditions.LootConditionManager;\n+import net.minecraft.world.storage.loot.functions.ILootFunction;\n+import net.minecraft.world.storage.loot.functions.LootFunctionManager;\n+import net.minecraftforge.fml.LogicalSide;\n+import net.minecraftforge.fml.common.thread.EffectiveSide;\n+import net.minecraftforge.registries.ForgeRegistries;\n+\n+public class LootModifierManager extends JsonReloadListener {\n+    private static LootModifierManager instance;\n+    public static final Logger LOGGER = LogManager.getLogger();\n+    private static final Gson GSON_INSTANCE = (new GsonBuilder()).registerTypeHierarchyAdapter(ILootFunction.class, new LootFunctionManager.Serializer()).registerTypeHierarchyAdapter(ILootCondition.class, new LootConditionManager.Serializer()).create();\n+\n+    private Map<ResourceLocation, IGlobalLootModifier> registeredLootModifiers = ImmutableMap.of();\n+\n+    public LootModifierManager() {\n+        super(GSON_INSTANCE, \"loot_modifiers\");\n+        instance = this;\n+    }\n+\n+    public static LootModifierManager getInstance() {\n+        return instance;\n+    }\n+\n+    @Override\n+    protected void apply(Map<ResourceLocation, JsonObject> splashList, IResourceManager resourceManagerIn, IProfiler profilerIn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c4f43904902afa50265ec7e23dbe02aea9eb35"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2NDUyMA==", "bodyText": "no", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6401#discussion_r363964520", "createdAt": "2020-01-07T21:41:10Z", "author": {"login": "LexManos"}, "path": "src/test/java/net/minecraftforge/debug/gameplay/loot/GlobalLootModifiersTest.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package net.minecraftforge.debug.gameplay.loot;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+\n+import com.google.gson.JsonObject;\n+\n+import net.minecraft.enchantment.Enchantment;\n+import net.minecraft.enchantment.Enchantment.Rarity;\n+import net.minecraft.enchantment.EnchantmentHelper;\n+import net.minecraft.enchantment.EnchantmentType;\n+import net.minecraft.enchantment.Enchantments;\n+import net.minecraft.inventory.EquipmentSlotType;\n+import net.minecraft.inventory.Inventory;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.crafting.FurnaceRecipe;\n+import net.minecraft.item.crafting.IRecipeType;\n+import net.minecraft.util.JSONUtils;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.LootContext;\n+import net.minecraft.world.storage.loot.LootParameterSets;\n+import net.minecraft.world.storage.loot.LootParameters;\n+import net.minecraft.world.storage.loot.LootTable;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraftforge.common.ModDimension;\n+import net.minecraftforge.common.loot.IGlobalLootModifierSerializer;\n+import net.minecraftforge.common.loot.LootModifier;\n+import net.minecraftforge.event.RegistryEvent;\n+import net.minecraftforge.eventbus.api.SubscribeEvent;\n+import net.minecraftforge.fml.common.Mod;\n+import net.minecraftforge.fml.common.Mod.EventBusSubscriber;\n+import net.minecraftforge.items.ItemHandlerHelper;\n+import net.minecraftforge.registries.ForgeRegistries;\n+import net.minecraftforge.registries.ObjectHolder;\n+\n+@Mod(GlobalLootModifiersTest.MODID)\n+public class GlobalLootModifiersTest {\n+    public static final String MODID = \"global_loot_test\";\n+    public static final boolean ENABLE = true;\n+    @ObjectHolder(value = MODID)\n+    public static final Enchantment smelt = null;\n+    public GlobalLootModifiersTest() { }\n+\n+    @EventBusSubscriber(modid = MODID, bus = EventBusSubscriber.Bus.MOD)\n+    public static class EventHandlers {\n+        @SubscribeEvent\n+        public static void registerEnchantments(@Nonnull final RegistryEvent.Register<Enchantment> event) {\n+            if (ENABLE) {\n+                event.getRegistry().register(new SmelterEnchantment(Rarity.UNCOMMON, EnchantmentType.DIGGER, new EquipmentSlotType[] {EquipmentSlotType.MAINHAND}).setRegistryName(new ResourceLocation(MODID,\"smelt\")));\n+            }\n+        }\n+\n+        @SubscribeEvent\n+        public static void registerModifierSerializers(@Nonnull final RegistryEvent.Register<IGlobalLootModifierSerializer<?>> event) {\n+            if (ENABLE) {\n+                event.getRegistry().register(\n+                \t\tnew WheatSeedsConverterModifier.Serializer().setRegistryName(new ResourceLocation(MODID,\"wheat_harvest\"))\n+                );\n+                event.getRegistry().register(new SmeltingEnchantmentModifier.Serializer().setRegistryName(new ResourceLocation(MODID,\"smelting\")));\n+                event.getRegistry().register(new SilkTouchTestModifier.Serializer().setRegistryName(new ResourceLocation(MODID,\"silk_touch_bamboo\")));\n+            }\n+        }\n+    }\n+\n+    private static class SmelterEnchantment extends Enchantment {\n+        protected SmelterEnchantment(Rarity rarityIn, EnchantmentType typeIn, EquipmentSlotType[] slots) {\n+            super(rarityIn, typeIn, slots);\n+        }\n+    }\n+\n+    /**\n+     * The smelting enchantment causes this modifier to be invoked, via the smelting loot_modifier json\n+     * @author Draco18s", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c4f43904902afa50265ec7e23dbe02aea9eb35"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2NzU1MA==", "bodyText": "No", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6401#discussion_r363967550", "createdAt": "2020-01-07T21:48:48Z", "author": {"login": "LexManos"}, "path": "src/test/java/net/minecraftforge/debug/gameplay/loot/GlobalLootModifiersTest.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package net.minecraftforge.debug.gameplay.loot;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+\n+import com.google.gson.JsonObject;\n+\n+import net.minecraft.enchantment.Enchantment;\n+import net.minecraft.enchantment.Enchantment.Rarity;\n+import net.minecraft.enchantment.EnchantmentHelper;\n+import net.minecraft.enchantment.EnchantmentType;\n+import net.minecraft.enchantment.Enchantments;\n+import net.minecraft.inventory.EquipmentSlotType;\n+import net.minecraft.inventory.Inventory;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.crafting.FurnaceRecipe;\n+import net.minecraft.item.crafting.IRecipeType;\n+import net.minecraft.util.JSONUtils;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.LootContext;\n+import net.minecraft.world.storage.loot.LootParameterSets;\n+import net.minecraft.world.storage.loot.LootParameters;\n+import net.minecraft.world.storage.loot.LootTable;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraftforge.common.ModDimension;\n+import net.minecraftforge.common.loot.IGlobalLootModifierSerializer;\n+import net.minecraftforge.common.loot.LootModifier;\n+import net.minecraftforge.event.RegistryEvent;\n+import net.minecraftforge.eventbus.api.SubscribeEvent;\n+import net.minecraftforge.fml.common.Mod;\n+import net.minecraftforge.fml.common.Mod.EventBusSubscriber;\n+import net.minecraftforge.items.ItemHandlerHelper;\n+import net.minecraftforge.registries.ForgeRegistries;\n+import net.minecraftforge.registries.ObjectHolder;\n+\n+@Mod(GlobalLootModifiersTest.MODID)\n+public class GlobalLootModifiersTest {\n+    public static final String MODID = \"global_loot_test\";\n+    public static final boolean ENABLE = true;\n+    @ObjectHolder(value = MODID)\n+    public static final Enchantment smelt = null;\n+    public GlobalLootModifiersTest() { }\n+\n+    @EventBusSubscriber(modid = MODID, bus = EventBusSubscriber.Bus.MOD)\n+    public static class EventHandlers {\n+        @SubscribeEvent\n+        public static void registerEnchantments(@Nonnull final RegistryEvent.Register<Enchantment> event) {\n+            if (ENABLE) {\n+                event.getRegistry().register(new SmelterEnchantment(Rarity.UNCOMMON, EnchantmentType.DIGGER, new EquipmentSlotType[] {EquipmentSlotType.MAINHAND}).setRegistryName(new ResourceLocation(MODID,\"smelt\")));\n+            }\n+        }\n+\n+        @SubscribeEvent\n+        public static void registerModifierSerializers(@Nonnull final RegistryEvent.Register<IGlobalLootModifierSerializer<?>> event) {\n+            if (ENABLE) {\n+                event.getRegistry().register(\n+                \t\tnew WheatSeedsConverterModifier.Serializer().setRegistryName(new ResourceLocation(MODID,\"wheat_harvest\"))\n+                );\n+                event.getRegistry().register(new SmeltingEnchantmentModifier.Serializer().setRegistryName(new ResourceLocation(MODID,\"smelting\")));\n+                event.getRegistry().register(new SilkTouchTestModifier.Serializer().setRegistryName(new ResourceLocation(MODID,\"silk_touch_bamboo\")));\n+            }\n+        }\n+    }\n+\n+    private static class SmelterEnchantment extends Enchantment {\n+        protected SmelterEnchantment(Rarity rarityIn, EnchantmentType typeIn, EquipmentSlotType[] slots) {\n+            super(rarityIn, typeIn, slots);\n+        }\n+    }\n+\n+    /**\n+     * The smelting enchantment causes this modifier to be invoked, via the smelting loot_modifier json\n+     * @author Draco18s\n+     *\n+     */\n+    private static class SmeltingEnchantmentModifier extends LootModifier {\n+        public SmeltingEnchantmentModifier(ResourceLocation name, ILootCondition[] conditionsIn) {\n+            super(conditionsIn);\n+\n+        }\n+\n+        @Override\n+        public List<ItemStack> doApply(List<ItemStack> generatedLoot, LootContext context) {\n+            ArrayList<ItemStack> ret = new ArrayList<ItemStack>();\n+            generatedLoot.forEach((stack) -> ret.add(smelt(stack, context)));\n+            return ret;\n+        }\n+\n+        private static ItemStack smelt(ItemStack stack, LootContext context) {\n+            return context.getWorld().getRecipeManager().getRecipe(IRecipeType.SMELTING, new Inventory(stack), context.getWorld())\n+                    .map(FurnaceRecipe::getRecipeOutput)\n+                    .filter(itemStack -> !itemStack.isEmpty())\n+                    .map(itemStack -> ItemHandlerHelper.copyStackWithSize(itemStack, stack.getCount() * itemStack.getCount()))\n+                    .orElse(stack);\n+        }\n+\n+        private static class Serializer extends LootModifier.Serializer<SmeltingEnchantmentModifier> {\n+            @Override\n+            public SmeltingEnchantmentModifier read(ResourceLocation name, JsonObject json, ILootCondition[] conditionsIn) {\n+                return new SmeltingEnchantmentModifier(name, conditionsIn);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * When harvesting blocks with bamboo, this modifier is invoked, via the silk_touch_bamboo loot_modifier json\n+     * @author Draco18s", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c4f43904902afa50265ec7e23dbe02aea9eb35"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2ODA4NA==", "bodyText": "What is the point of this?", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6401#discussion_r363968084", "createdAt": "2020-01-07T21:50:06Z", "author": {"login": "LexManos"}, "path": "src/test/java/net/minecraftforge/debug/gameplay/loot/GlobalLootModifiersTest.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package net.minecraftforge.debug.gameplay.loot;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+\n+import com.google.gson.JsonObject;\n+\n+import net.minecraft.enchantment.Enchantment;\n+import net.minecraft.enchantment.Enchantment.Rarity;\n+import net.minecraft.enchantment.EnchantmentHelper;\n+import net.minecraft.enchantment.EnchantmentType;\n+import net.minecraft.enchantment.Enchantments;\n+import net.minecraft.inventory.EquipmentSlotType;\n+import net.minecraft.inventory.Inventory;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.crafting.FurnaceRecipe;\n+import net.minecraft.item.crafting.IRecipeType;\n+import net.minecraft.util.JSONUtils;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.LootContext;\n+import net.minecraft.world.storage.loot.LootParameterSets;\n+import net.minecraft.world.storage.loot.LootParameters;\n+import net.minecraft.world.storage.loot.LootTable;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraftforge.common.ModDimension;\n+import net.minecraftforge.common.loot.IGlobalLootModifierSerializer;\n+import net.minecraftforge.common.loot.LootModifier;\n+import net.minecraftforge.event.RegistryEvent;\n+import net.minecraftforge.eventbus.api.SubscribeEvent;\n+import net.minecraftforge.fml.common.Mod;\n+import net.minecraftforge.fml.common.Mod.EventBusSubscriber;\n+import net.minecraftforge.items.ItemHandlerHelper;\n+import net.minecraftforge.registries.ForgeRegistries;\n+import net.minecraftforge.registries.ObjectHolder;\n+\n+@Mod(GlobalLootModifiersTest.MODID)\n+public class GlobalLootModifiersTest {\n+    public static final String MODID = \"global_loot_test\";\n+    public static final boolean ENABLE = true;\n+    @ObjectHolder(value = MODID)\n+    public static final Enchantment smelt = null;\n+    public GlobalLootModifiersTest() { }\n+\n+    @EventBusSubscriber(modid = MODID, bus = EventBusSubscriber.Bus.MOD)\n+    public static class EventHandlers {\n+        @SubscribeEvent\n+        public static void registerEnchantments(@Nonnull final RegistryEvent.Register<Enchantment> event) {\n+            if (ENABLE) {\n+                event.getRegistry().register(new SmelterEnchantment(Rarity.UNCOMMON, EnchantmentType.DIGGER, new EquipmentSlotType[] {EquipmentSlotType.MAINHAND}).setRegistryName(new ResourceLocation(MODID,\"smelt\")));\n+            }\n+        }\n+\n+        @SubscribeEvent\n+        public static void registerModifierSerializers(@Nonnull final RegistryEvent.Register<IGlobalLootModifierSerializer<?>> event) {\n+            if (ENABLE) {\n+                event.getRegistry().register(\n+                \t\tnew WheatSeedsConverterModifier.Serializer().setRegistryName(new ResourceLocation(MODID,\"wheat_harvest\"))\n+                );\n+                event.getRegistry().register(new SmeltingEnchantmentModifier.Serializer().setRegistryName(new ResourceLocation(MODID,\"smelting\")));\n+                event.getRegistry().register(new SilkTouchTestModifier.Serializer().setRegistryName(new ResourceLocation(MODID,\"silk_touch_bamboo\")));\n+            }\n+        }\n+    }\n+\n+    private static class SmelterEnchantment extends Enchantment {\n+        protected SmelterEnchantment(Rarity rarityIn, EnchantmentType typeIn, EquipmentSlotType[] slots) {\n+            super(rarityIn, typeIn, slots);\n+        }\n+    }\n+\n+    /**\n+     * The smelting enchantment causes this modifier to be invoked, via the smelting loot_modifier json\n+     * @author Draco18s\n+     *\n+     */\n+    private static class SmeltingEnchantmentModifier extends LootModifier {\n+        public SmeltingEnchantmentModifier(ResourceLocation name, ILootCondition[] conditionsIn) {\n+            super(conditionsIn);\n+\n+        }\n+\n+        @Override\n+        public List<ItemStack> doApply(List<ItemStack> generatedLoot, LootContext context) {\n+            ArrayList<ItemStack> ret = new ArrayList<ItemStack>();\n+            generatedLoot.forEach((stack) -> ret.add(smelt(stack, context)));\n+            return ret;\n+        }\n+\n+        private static ItemStack smelt(ItemStack stack, LootContext context) {\n+            return context.getWorld().getRecipeManager().getRecipe(IRecipeType.SMELTING, new Inventory(stack), context.getWorld())\n+                    .map(FurnaceRecipe::getRecipeOutput)\n+                    .filter(itemStack -> !itemStack.isEmpty())\n+                    .map(itemStack -> ItemHandlerHelper.copyStackWithSize(itemStack, stack.getCount() * itemStack.getCount()))\n+                    .orElse(stack);\n+        }\n+\n+        private static class Serializer extends LootModifier.Serializer<SmeltingEnchantmentModifier> {\n+            @Override\n+            public SmeltingEnchantmentModifier read(ResourceLocation name, JsonObject json, ILootCondition[] conditionsIn) {\n+                return new SmeltingEnchantmentModifier(name, conditionsIn);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * When harvesting blocks with bamboo, this modifier is invoked, via the silk_touch_bamboo loot_modifier json\n+     * @author Draco18s\n+     *\n+     */\n+    private static class SilkTouchTestModifier extends LootModifier {\n+        public SilkTouchTestModifier(ResourceLocation name, ILootCondition[] conditionsIn) {\n+            super(conditionsIn);\n+        }\n+\n+        @Override\n+        public List<ItemStack> doApply(List<ItemStack> generatedLoot, LootContext context) {\n+            ItemStack ctxTool = context.get(LootParameters.TOOL);\n+            ItemStack fakeTool = ctxTool.copy();\n+            fakeTool.addEnchantment(Enchantments.SILK_TOUCH, 1);\n+            if(ItemStack.areItemsEqual(ctxTool, fakeTool) && EnchantmentHelper.getEnchantments(ctxTool).containsKey(Enchantments.SILK_TOUCH)) return generatedLoot;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c4f43904902afa50265ec7e23dbe02aea9eb35"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2ODQwNA==", "bodyText": "This seems super bad, why are you rebuilding the entire context? How can you possibly know the context and what parts need copying?", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6401#discussion_r363968404", "createdAt": "2020-01-07T21:50:48Z", "author": {"login": "LexManos"}, "path": "src/test/java/net/minecraftforge/debug/gameplay/loot/GlobalLootModifiersTest.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package net.minecraftforge.debug.gameplay.loot;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+\n+import com.google.gson.JsonObject;\n+\n+import net.minecraft.enchantment.Enchantment;\n+import net.minecraft.enchantment.Enchantment.Rarity;\n+import net.minecraft.enchantment.EnchantmentHelper;\n+import net.minecraft.enchantment.EnchantmentType;\n+import net.minecraft.enchantment.Enchantments;\n+import net.minecraft.inventory.EquipmentSlotType;\n+import net.minecraft.inventory.Inventory;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.crafting.FurnaceRecipe;\n+import net.minecraft.item.crafting.IRecipeType;\n+import net.minecraft.util.JSONUtils;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.LootContext;\n+import net.minecraft.world.storage.loot.LootParameterSets;\n+import net.minecraft.world.storage.loot.LootParameters;\n+import net.minecraft.world.storage.loot.LootTable;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraftforge.common.ModDimension;\n+import net.minecraftforge.common.loot.IGlobalLootModifierSerializer;\n+import net.minecraftforge.common.loot.LootModifier;\n+import net.minecraftforge.event.RegistryEvent;\n+import net.minecraftforge.eventbus.api.SubscribeEvent;\n+import net.minecraftforge.fml.common.Mod;\n+import net.minecraftforge.fml.common.Mod.EventBusSubscriber;\n+import net.minecraftforge.items.ItemHandlerHelper;\n+import net.minecraftforge.registries.ForgeRegistries;\n+import net.minecraftforge.registries.ObjectHolder;\n+\n+@Mod(GlobalLootModifiersTest.MODID)\n+public class GlobalLootModifiersTest {\n+    public static final String MODID = \"global_loot_test\";\n+    public static final boolean ENABLE = true;\n+    @ObjectHolder(value = MODID)\n+    public static final Enchantment smelt = null;\n+    public GlobalLootModifiersTest() { }\n+\n+    @EventBusSubscriber(modid = MODID, bus = EventBusSubscriber.Bus.MOD)\n+    public static class EventHandlers {\n+        @SubscribeEvent\n+        public static void registerEnchantments(@Nonnull final RegistryEvent.Register<Enchantment> event) {\n+            if (ENABLE) {\n+                event.getRegistry().register(new SmelterEnchantment(Rarity.UNCOMMON, EnchantmentType.DIGGER, new EquipmentSlotType[] {EquipmentSlotType.MAINHAND}).setRegistryName(new ResourceLocation(MODID,\"smelt\")));\n+            }\n+        }\n+\n+        @SubscribeEvent\n+        public static void registerModifierSerializers(@Nonnull final RegistryEvent.Register<IGlobalLootModifierSerializer<?>> event) {\n+            if (ENABLE) {\n+                event.getRegistry().register(\n+                \t\tnew WheatSeedsConverterModifier.Serializer().setRegistryName(new ResourceLocation(MODID,\"wheat_harvest\"))\n+                );\n+                event.getRegistry().register(new SmeltingEnchantmentModifier.Serializer().setRegistryName(new ResourceLocation(MODID,\"smelting\")));\n+                event.getRegistry().register(new SilkTouchTestModifier.Serializer().setRegistryName(new ResourceLocation(MODID,\"silk_touch_bamboo\")));\n+            }\n+        }\n+    }\n+\n+    private static class SmelterEnchantment extends Enchantment {\n+        protected SmelterEnchantment(Rarity rarityIn, EnchantmentType typeIn, EquipmentSlotType[] slots) {\n+            super(rarityIn, typeIn, slots);\n+        }\n+    }\n+\n+    /**\n+     * The smelting enchantment causes this modifier to be invoked, via the smelting loot_modifier json\n+     * @author Draco18s\n+     *\n+     */\n+    private static class SmeltingEnchantmentModifier extends LootModifier {\n+        public SmeltingEnchantmentModifier(ResourceLocation name, ILootCondition[] conditionsIn) {\n+            super(conditionsIn);\n+\n+        }\n+\n+        @Override\n+        public List<ItemStack> doApply(List<ItemStack> generatedLoot, LootContext context) {\n+            ArrayList<ItemStack> ret = new ArrayList<ItemStack>();\n+            generatedLoot.forEach((stack) -> ret.add(smelt(stack, context)));\n+            return ret;\n+        }\n+\n+        private static ItemStack smelt(ItemStack stack, LootContext context) {\n+            return context.getWorld().getRecipeManager().getRecipe(IRecipeType.SMELTING, new Inventory(stack), context.getWorld())\n+                    .map(FurnaceRecipe::getRecipeOutput)\n+                    .filter(itemStack -> !itemStack.isEmpty())\n+                    .map(itemStack -> ItemHandlerHelper.copyStackWithSize(itemStack, stack.getCount() * itemStack.getCount()))\n+                    .orElse(stack);\n+        }\n+\n+        private static class Serializer extends LootModifier.Serializer<SmeltingEnchantmentModifier> {\n+            @Override\n+            public SmeltingEnchantmentModifier read(ResourceLocation name, JsonObject json, ILootCondition[] conditionsIn) {\n+                return new SmeltingEnchantmentModifier(name, conditionsIn);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * When harvesting blocks with bamboo, this modifier is invoked, via the silk_touch_bamboo loot_modifier json\n+     * @author Draco18s\n+     *\n+     */\n+    private static class SilkTouchTestModifier extends LootModifier {\n+        public SilkTouchTestModifier(ResourceLocation name, ILootCondition[] conditionsIn) {\n+            super(conditionsIn);\n+        }\n+\n+        @Override\n+        public List<ItemStack> doApply(List<ItemStack> generatedLoot, LootContext context) {\n+            ItemStack ctxTool = context.get(LootParameters.TOOL);\n+            ItemStack fakeTool = ctxTool.copy();\n+            fakeTool.addEnchantment(Enchantments.SILK_TOUCH, 1);\n+            if(ItemStack.areItemsEqual(ctxTool, fakeTool) && EnchantmentHelper.getEnchantments(ctxTool).containsKey(Enchantments.SILK_TOUCH)) return generatedLoot;\n+            LootContext.Builder builder = new LootContext.Builder(context.getWorld())\n+                    .withParameter(LootParameters.BLOCK_STATE, context.get(LootParameters.BLOCK_STATE))\n+                    .withRandom(context.getWorld().rand)\n+                    .withParameter(LootParameters.POSITION, context.get(LootParameters.POSITION))\n+                    .withParameter(LootParameters.TOOL, fakeTool)\n+                    .withNullableParameter(LootParameters.BLOCK_ENTITY, context.get(LootParameters.BLOCK_ENTITY));\n+            if(context.has(LootParameters.THIS_ENTITY)) {\n+                builder.withParameter(LootParameters.THIS_ENTITY, context.get(LootParameters.THIS_ENTITY));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c4f43904902afa50265ec7e23dbe02aea9eb35"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e47219448ad08bcb2470ff36dc6749e5255ce318", "author": {"user": {"login": "Draco18s", "name": null}}, "url": "https://github.com/MinecraftForge/MinecraftForge/commit/e47219448ad08bcb2470ff36dc6749e5255ce318", "committedDate": "2020-01-09T23:49:27Z", "message": "Updates based on Lex's comments\n\nRemoved @author\nAdded a LootContext.Builder constructor that can clone a context object\nAdded javadoc\nMade LootModifierManager not a singleton"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b0acd437905cfdb5b4df7ec3a4dc28c907f105f", "author": {"user": {"login": "Draco18s", "name": null}}, "url": "https://github.com/MinecraftForge/MinecraftForge/commit/9b0acd437905cfdb5b4df7ec3a4dc28c907f105f", "committedDate": "2020-01-13T19:46:46Z", "message": "Missing json files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6807fd852ce35771460c6c1bc8e7407f0b8284f3", "author": {"user": {"login": "Draco18s", "name": null}}, "url": "https://github.com/MinecraftForge/MinecraftForge/commit/6807fd852ce35771460c6c1bc8e7407f0b8284f3", "committedDate": "2020-01-15T18:27:25Z", "message": "Refactor to read layered config file\n\nReads all.json to determine what loot modifiers to load. Functions like tags."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "444deb497617a7281ce73c625bb483bcef1c8110", "author": {"user": {"login": "Draco18s", "name": null}}, "url": "https://github.com/MinecraftForge/MinecraftForge/commit/444deb497617a7281ce73c625bb483bcef1c8110", "committedDate": "2020-01-16T03:00:43Z", "message": "Further refactor\n\nUpdated EntityLiving's call\nUpdated LootTable to mark previous entityliving entry as deprecated\nRenamed all.json to global_loot_modifiers.json\nRelocated test mod data resources to generated_test\nFixed setRegistryName implementation\nTabs to spaces\nRefactored json loading system making it simpler and less round about."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c18f0473503cca9e241d788898c6729f08924a5", "author": {"user": {"login": "Draco18s", "name": null}}, "url": "https://github.com/MinecraftForge/MinecraftForge/commit/3c18f0473503cca9e241d788898c6729f08924a5", "committedDate": "2020-01-16T04:26:23Z", "message": "Docs clean\n\nCleaned up javadoc wording in several places\nMade setRegistryName final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92bf134434d0e7c6eb5c612aa2315927b1c368dc", "author": {"user": {"login": "Draco18s", "name": null}}, "url": "https://github.com/MinecraftForge/MinecraftForge/commit/92bf134434d0e7c6eb5c612aa2315927b1c368dc", "committedDate": "2020-01-18T03:15:56Z", "message": "Wordsmithing\n\nAdjusted javadoc, added @nonnull annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b402ce23c60ea45d7718352c69c8f852c368959", "author": {"user": {"login": "Draco18s", "name": null}}, "url": "https://github.com/MinecraftForge/MinecraftForge/commit/0b402ce23c60ea45d7718352c69c8f852c368959", "committedDate": "2020-01-30T23:18:54Z", "message": "Merge branch '1.15.x' into Global-Loot-Funcs-1.15\n\n# Conflicts:\n#\tpatches/minecraft/net/minecraft/entity/LivingEntity.java.patch\n#\tpatches/minecraft/net/minecraft/server/MinecraftServer.java.patch\n#\tsrc/test/resources/META-INF/mods.toml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e08eba6ba1dfcdb9d2272728fa6a1343367b6be", "author": {"user": {"login": "Draco18s", "name": null}}, "url": "https://github.com/MinecraftForge/MinecraftForge/commit/7e08eba6ba1dfcdb9d2272728fa6a1343367b6be", "committedDate": "2020-02-15T20:26:22Z", "message": "Merge branch '1.15.x' into Global-Loot-Funcs-1.15"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMTQ0MTc3", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6401#pullrequestreview-361144177", "createdAt": "2020-02-19T14:16:48Z", "commit": {"oid": "7e08eba6ba1dfcdb9d2272728fa6a1343367b6be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDoxNjo0OFrOFrpv6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDoxNjo0OFrOFrpv6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxNzA5Nw==", "bodyText": "Shouldn't this be extending ForgeRegistryEntry<IGlobalLootModifierSerializer<?>> instead of implementing IForgeRegsitryEntry<T> by hand?\nActually, I wonder if it wouldn't be best to make IGlobalLootModifierSerializer an abstract class instead, then subclasses wouldn't need to worry about IForgeRegsitryEntry", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6401#discussion_r381317097", "createdAt": "2020-02-19T14:16:48Z", "author": {"login": "gigaherz"}, "path": "src/main/java/net/minecraftforge/common/loot/LootModifier.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package net.minecraftforge.common.loot;\n+\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nonnull;\n+\n+import com.google.gson.JsonObject;\n+\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.LootContext;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraft.world.storage.loot.conditions.LootConditionManager;\n+import net.minecraftforge.registries.GameData;\n+\n+/**\n+ * A base implementation of a Global Loot Modifier for modders to extend.\n+ * Takes care of ILootCondition matching and comes with a base serializer\n+ * implementation that takes care of Forge registry things.\n+ */\n+public abstract class LootModifier implements IGlobalLootModifier {\n+    protected final ILootCondition[] conditions;\n+    private final Predicate<LootContext> combinedConditions;\n+    \n+    /**\n+     * Constructs a LootModifier.\n+     * @param conditionsIn the ILootConditions that need to be matched before the loot is modified.\n+     */\n+    protected LootModifier(ILootCondition[] conditionsIn) {\n+        this.conditions = conditionsIn;\n+        this.combinedConditions = LootConditionManager.and(conditionsIn);\n+    }\n+    \n+    @Nonnull\n+    @Override\n+    public final List<ItemStack> apply(List<ItemStack> generatedLoot, LootContext context) {\n+        return this.combinedConditions.test(context) ? this.doApply(generatedLoot, context) : generatedLoot;\n+    }\n+    \n+    /**\n+     * Applies the modifier to the generated loot (all loot conditions have already been checked\n+     * and have returned true).\n+     * @param generatedLoot the list of ItemStacks that will be dropped, generated by loot tables\n+     * @param context the LootContext, identical to what is passed to loot tables\n+     * @return modified loot drops\n+     */\n+    @Nonnull\n+    protected abstract List<ItemStack> doApply(List<ItemStack> generatedLoot, LootContext context);\n+    \n+    /**\n+     * Abstract base deserializer for LootModifiers. Takes care of Forge registry things.<br/>\n+     * Modders should extend this class to return their modifier and implement the abstract\n+     * <code>read</code> method to deserialize from json.\n+     * @param <T> the final Type\n+     */\n+    public abstract static class Serializer<T extends LootModifier> implements IGlobalLootModifierSerializer<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e08eba6ba1dfcdb9d2272728fa6a1343367b6be"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e07b29bce91fed25f06efc5a5a4807c45d5361b0", "author": {"user": {"login": "Draco18s", "name": null}}, "url": "https://github.com/MinecraftForge/MinecraftForge/commit/e07b29bce91fed25f06efc5a5a4807c45d5361b0", "committedDate": "2020-02-19T23:17:21Z", "message": "Changed from Interface to Abstract Class\n\nGlobalLootModifierSerializer is now an abstract class and the abstract implementation in LootModifier was no longer needed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4b6540746ce5676a9a2efe24b87debb3f79dfe7", "author": {"user": {"login": "Draco18s", "name": null}}, "url": "https://github.com/MinecraftForge/MinecraftForge/commit/d4b6540746ce5676a9a2efe24b87debb3f79dfe7", "committedDate": "2020-02-20T01:54:57Z", "message": "Stray tab"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDM0NjQx", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6401#pullrequestreview-365434641", "createdAt": "2020-02-27T06:13:14Z", "commit": {"oid": "d4b6540746ce5676a9a2efe24b87debb3f79dfe7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2192, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}