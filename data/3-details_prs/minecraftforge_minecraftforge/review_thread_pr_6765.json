{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTIwNTkz", "number": 6765, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoxNDoyNVrOEE-Pww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODozOTozOFrOEFcVJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjQ5NjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/data/ForgeLootTableProvider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoxNDoyNVrOGi7MQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDo1NzowMVrOGjW_6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NDU2MQ==", "bodyText": "Using access transformers might be better here, but involves removing final keyword", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6765#discussion_r439274561", "createdAt": "2020-06-12T08:14:25Z", "author": {"login": "percivalalb"}, "path": "src/main/java/net/minecraftforge/common/data/ForgeLootTableProvider.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package net.minecraftforge.common.data;\n+\n+import com.mojang.datafixers.util.Pair;\n+import net.minecraft.advancements.criterion.ItemPredicate;\n+import net.minecraft.data.DataGenerator;\n+import net.minecraft.data.LootTableProvider;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.Items;\n+import net.minecraft.tags.Tag;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.*;\n+import net.minecraft.world.storage.loot.conditions.Alternative;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraft.world.storage.loot.conditions.Inverted;\n+import net.minecraft.world.storage.loot.conditions.MatchTool;\n+import net.minecraftforge.common.Tags;\n+\n+import java.lang.reflect.Field;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+public class ForgeLootTableProvider extends LootTableProvider {\n+\n+    public ForgeLootTableProvider(DataGenerator gen) {\n+        super(gen);\n+    }\n+\n+    @Override\n+    protected void validate(Map<ResourceLocation, LootTable> map, ValidationTracker validationtracker) {\n+        // do not validate against all registered loot tables\n+    }\n+\n+    @Override\n+    protected List<Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>> getTables() {\n+        return super.getTables().stream().map(pair -> {\n+            // provides new consumer with filtering only changed loot tables and replacing condition item to condition tag\n+            return new Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>(() -> replaceAndFilterChangesOnly(pair.getFirst().get()), pair.getSecond());\n+        }).collect(Collectors.toList());\n+    }\n+\n+    private Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> replaceAndFilterChangesOnly(Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> consumer) {\n+        return (newConsumer) -> consumer.accept((resourceLocation, builder) -> {\n+            if (findAndReplaceInLootTableBuilder(builder, Items.SHEARS, Tags.Items.SHEARS)) {\n+                newConsumer.accept(resourceLocation, builder);\n+            }\n+        });\n+    }\n+\n+    private boolean findAndReplaceInLootTableBuilder(LootTable.Builder builder, Item from, Tag<Item> to) {\n+        List<LootPool> lootPools = getField(LootTable.Builder.class, builder, 0);\n+        boolean found = false;\n+\n+        for (LootPool lootPool : lootPools) {\n+            if (findAndReplaceInLootPool(lootPool, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInLootPool(LootPool lootPool, Item from, Tag<Item> to) {\n+        List<LootEntry> lootEntries = getField(LootPool.class, lootPool, 1);\n+        List<ILootCondition> lootConditions = getField(LootPool.class, lootPool, 2);\n+        boolean found = false;\n+\n+        for (LootEntry lootEntry : lootEntries) {\n+            if (lootEntry instanceof ParentedLootEntry) {\n+                if (findAndReplaceInParentedLootEntry((ParentedLootEntry) lootEntry, from, to)) {\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < lootConditions.size(); i++) {\n+            ILootCondition lootCondition = lootConditions.get(i);\n+            if (lootCondition instanceof MatchTool && checkMatchTool((MatchTool) lootCondition, from)) {\n+                lootConditions.set(i, MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build());\n+                found = true;\n+            } else if (lootCondition instanceof Inverted && findAndReplaceInInverted((Inverted) lootCondition, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInParentedLootEntry(ParentedLootEntry entry, Item from, Tag<Item> to) {\n+        LootEntry[] lootEntries = getField(ParentedLootEntry.class, entry, 0);\n+        boolean found = false;\n+\n+        for (LootEntry lootEntry : lootEntries) {\n+            if (findAndReplaceInLootEntry(lootEntry, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInLootEntry(LootEntry entry, Item from, Tag<Item> to) {\n+        ILootCondition[] lootConditions = getField(LootEntry.class, entry, 0);\n+        boolean found = false;\n+\n+        for (int i = 0; i < lootConditions.length; i++) {\n+            if (lootConditions[i] instanceof Alternative && findAndReplaceInAlternative((Alternative) lootConditions[i], from, to)) {\n+                found = true;\n+            } else if (lootConditions[i] instanceof MatchTool && checkMatchTool((MatchTool) lootConditions[i], from)) {\n+                lootConditions[i] = MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build();\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInAlternative(Alternative alternative, Item from, Tag<Item> to) {\n+        ILootCondition[] lootConditions = getField(Alternative.class, alternative, 0);\n+        boolean found = false;\n+\n+        for (int i = 0; i < lootConditions.length; i++) {\n+            if (lootConditions[i] instanceof MatchTool && checkMatchTool((MatchTool) lootConditions[i], from)) {\n+                lootConditions[i] = MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build();\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInInverted(Inverted inverted, Item from, Tag<Item> to) {\n+        ILootCondition lootCondition = getField(Inverted.class, inverted, 0);\n+\n+        if (lootCondition instanceof MatchTool && checkMatchTool((MatchTool) lootCondition, from)) {\n+            setField(Inverted.class, inverted, 0, MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build());\n+            return true;\n+        } else if (lootCondition instanceof Alternative && findAndReplaceInAlternative((Alternative) lootCondition, from, to)) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    private boolean checkMatchTool(MatchTool lootCondition, Item expected) {\n+        ItemPredicate predicate = getField(MatchTool.class, lootCondition, 0);\n+        Item item = getField(ItemPredicate.class, predicate, 4);\n+        return item != null && item.equals(expected);\n+    }\n+\n+    private <T, R> void setField(Class<T> clz, T inst, int index, R value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec26e4c65d477759dfbe978785c0c9b68c426472"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM2ODgzMQ==", "bodyText": "I dont think it will be better, if that changes will be visible for modders", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6765#discussion_r439368831", "createdAt": "2020-06-12T11:40:43Z", "author": {"login": "yanny7"}, "path": "src/main/java/net/minecraftforge/common/data/ForgeLootTableProvider.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package net.minecraftforge.common.data;\n+\n+import com.mojang.datafixers.util.Pair;\n+import net.minecraft.advancements.criterion.ItemPredicate;\n+import net.minecraft.data.DataGenerator;\n+import net.minecraft.data.LootTableProvider;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.Items;\n+import net.minecraft.tags.Tag;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.*;\n+import net.minecraft.world.storage.loot.conditions.Alternative;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraft.world.storage.loot.conditions.Inverted;\n+import net.minecraft.world.storage.loot.conditions.MatchTool;\n+import net.minecraftforge.common.Tags;\n+\n+import java.lang.reflect.Field;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+public class ForgeLootTableProvider extends LootTableProvider {\n+\n+    public ForgeLootTableProvider(DataGenerator gen) {\n+        super(gen);\n+    }\n+\n+    @Override\n+    protected void validate(Map<ResourceLocation, LootTable> map, ValidationTracker validationtracker) {\n+        // do not validate against all registered loot tables\n+    }\n+\n+    @Override\n+    protected List<Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>> getTables() {\n+        return super.getTables().stream().map(pair -> {\n+            // provides new consumer with filtering only changed loot tables and replacing condition item to condition tag\n+            return new Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>(() -> replaceAndFilterChangesOnly(pair.getFirst().get()), pair.getSecond());\n+        }).collect(Collectors.toList());\n+    }\n+\n+    private Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> replaceAndFilterChangesOnly(Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> consumer) {\n+        return (newConsumer) -> consumer.accept((resourceLocation, builder) -> {\n+            if (findAndReplaceInLootTableBuilder(builder, Items.SHEARS, Tags.Items.SHEARS)) {\n+                newConsumer.accept(resourceLocation, builder);\n+            }\n+        });\n+    }\n+\n+    private boolean findAndReplaceInLootTableBuilder(LootTable.Builder builder, Item from, Tag<Item> to) {\n+        List<LootPool> lootPools = getField(LootTable.Builder.class, builder, 0);\n+        boolean found = false;\n+\n+        for (LootPool lootPool : lootPools) {\n+            if (findAndReplaceInLootPool(lootPool, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInLootPool(LootPool lootPool, Item from, Tag<Item> to) {\n+        List<LootEntry> lootEntries = getField(LootPool.class, lootPool, 1);\n+        List<ILootCondition> lootConditions = getField(LootPool.class, lootPool, 2);\n+        boolean found = false;\n+\n+        for (LootEntry lootEntry : lootEntries) {\n+            if (lootEntry instanceof ParentedLootEntry) {\n+                if (findAndReplaceInParentedLootEntry((ParentedLootEntry) lootEntry, from, to)) {\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < lootConditions.size(); i++) {\n+            ILootCondition lootCondition = lootConditions.get(i);\n+            if (lootCondition instanceof MatchTool && checkMatchTool((MatchTool) lootCondition, from)) {\n+                lootConditions.set(i, MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build());\n+                found = true;\n+            } else if (lootCondition instanceof Inverted && findAndReplaceInInverted((Inverted) lootCondition, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInParentedLootEntry(ParentedLootEntry entry, Item from, Tag<Item> to) {\n+        LootEntry[] lootEntries = getField(ParentedLootEntry.class, entry, 0);\n+        boolean found = false;\n+\n+        for (LootEntry lootEntry : lootEntries) {\n+            if (findAndReplaceInLootEntry(lootEntry, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInLootEntry(LootEntry entry, Item from, Tag<Item> to) {\n+        ILootCondition[] lootConditions = getField(LootEntry.class, entry, 0);\n+        boolean found = false;\n+\n+        for (int i = 0; i < lootConditions.length; i++) {\n+            if (lootConditions[i] instanceof Alternative && findAndReplaceInAlternative((Alternative) lootConditions[i], from, to)) {\n+                found = true;\n+            } else if (lootConditions[i] instanceof MatchTool && checkMatchTool((MatchTool) lootConditions[i], from)) {\n+                lootConditions[i] = MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build();\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInAlternative(Alternative alternative, Item from, Tag<Item> to) {\n+        ILootCondition[] lootConditions = getField(Alternative.class, alternative, 0);\n+        boolean found = false;\n+\n+        for (int i = 0; i < lootConditions.length; i++) {\n+            if (lootConditions[i] instanceof MatchTool && checkMatchTool((MatchTool) lootConditions[i], from)) {\n+                lootConditions[i] = MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build();\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInInverted(Inverted inverted, Item from, Tag<Item> to) {\n+        ILootCondition lootCondition = getField(Inverted.class, inverted, 0);\n+\n+        if (lootCondition instanceof MatchTool && checkMatchTool((MatchTool) lootCondition, from)) {\n+            setField(Inverted.class, inverted, 0, MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build());\n+            return true;\n+        } else if (lootCondition instanceof Alternative && findAndReplaceInAlternative((Alternative) lootCondition, from, to)) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    private boolean checkMatchTool(MatchTool lootCondition, Item expected) {\n+        ItemPredicate predicate = getField(MatchTool.class, lootCondition, 0);\n+        Item item = getField(ItemPredicate.class, predicate, 4);\n+        return item != null && item.equals(expected);\n+    }\n+\n+    private <T, R> void setField(Class<T> clz, T inst, int index, R value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NDU2MQ=="}, "originalCommit": {"oid": "ec26e4c65d477759dfbe978785c0c9b68c426472"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4OTUwMw==", "bodyText": "probably better to add a getter, and then replace the whole Inverted instance instead of just the term inside.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6765#discussion_r439689503", "createdAt": "2020-06-13T00:34:55Z", "author": {"login": "LexManos"}, "path": "src/main/java/net/minecraftforge/common/data/ForgeLootTableProvider.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package net.minecraftforge.common.data;\n+\n+import com.mojang.datafixers.util.Pair;\n+import net.minecraft.advancements.criterion.ItemPredicate;\n+import net.minecraft.data.DataGenerator;\n+import net.minecraft.data.LootTableProvider;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.Items;\n+import net.minecraft.tags.Tag;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.*;\n+import net.minecraft.world.storage.loot.conditions.Alternative;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraft.world.storage.loot.conditions.Inverted;\n+import net.minecraft.world.storage.loot.conditions.MatchTool;\n+import net.minecraftforge.common.Tags;\n+\n+import java.lang.reflect.Field;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+public class ForgeLootTableProvider extends LootTableProvider {\n+\n+    public ForgeLootTableProvider(DataGenerator gen) {\n+        super(gen);\n+    }\n+\n+    @Override\n+    protected void validate(Map<ResourceLocation, LootTable> map, ValidationTracker validationtracker) {\n+        // do not validate against all registered loot tables\n+    }\n+\n+    @Override\n+    protected List<Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>> getTables() {\n+        return super.getTables().stream().map(pair -> {\n+            // provides new consumer with filtering only changed loot tables and replacing condition item to condition tag\n+            return new Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>(() -> replaceAndFilterChangesOnly(pair.getFirst().get()), pair.getSecond());\n+        }).collect(Collectors.toList());\n+    }\n+\n+    private Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> replaceAndFilterChangesOnly(Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> consumer) {\n+        return (newConsumer) -> consumer.accept((resourceLocation, builder) -> {\n+            if (findAndReplaceInLootTableBuilder(builder, Items.SHEARS, Tags.Items.SHEARS)) {\n+                newConsumer.accept(resourceLocation, builder);\n+            }\n+        });\n+    }\n+\n+    private boolean findAndReplaceInLootTableBuilder(LootTable.Builder builder, Item from, Tag<Item> to) {\n+        List<LootPool> lootPools = getField(LootTable.Builder.class, builder, 0);\n+        boolean found = false;\n+\n+        for (LootPool lootPool : lootPools) {\n+            if (findAndReplaceInLootPool(lootPool, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInLootPool(LootPool lootPool, Item from, Tag<Item> to) {\n+        List<LootEntry> lootEntries = getField(LootPool.class, lootPool, 1);\n+        List<ILootCondition> lootConditions = getField(LootPool.class, lootPool, 2);\n+        boolean found = false;\n+\n+        for (LootEntry lootEntry : lootEntries) {\n+            if (lootEntry instanceof ParentedLootEntry) {\n+                if (findAndReplaceInParentedLootEntry((ParentedLootEntry) lootEntry, from, to)) {\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < lootConditions.size(); i++) {\n+            ILootCondition lootCondition = lootConditions.get(i);\n+            if (lootCondition instanceof MatchTool && checkMatchTool((MatchTool) lootCondition, from)) {\n+                lootConditions.set(i, MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build());\n+                found = true;\n+            } else if (lootCondition instanceof Inverted && findAndReplaceInInverted((Inverted) lootCondition, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInParentedLootEntry(ParentedLootEntry entry, Item from, Tag<Item> to) {\n+        LootEntry[] lootEntries = getField(ParentedLootEntry.class, entry, 0);\n+        boolean found = false;\n+\n+        for (LootEntry lootEntry : lootEntries) {\n+            if (findAndReplaceInLootEntry(lootEntry, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInLootEntry(LootEntry entry, Item from, Tag<Item> to) {\n+        ILootCondition[] lootConditions = getField(LootEntry.class, entry, 0);\n+        boolean found = false;\n+\n+        for (int i = 0; i < lootConditions.length; i++) {\n+            if (lootConditions[i] instanceof Alternative && findAndReplaceInAlternative((Alternative) lootConditions[i], from, to)) {\n+                found = true;\n+            } else if (lootConditions[i] instanceof MatchTool && checkMatchTool((MatchTool) lootConditions[i], from)) {\n+                lootConditions[i] = MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build();\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInAlternative(Alternative alternative, Item from, Tag<Item> to) {\n+        ILootCondition[] lootConditions = getField(Alternative.class, alternative, 0);\n+        boolean found = false;\n+\n+        for (int i = 0; i < lootConditions.length; i++) {\n+            if (lootConditions[i] instanceof MatchTool && checkMatchTool((MatchTool) lootConditions[i], from)) {\n+                lootConditions[i] = MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build();\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInInverted(Inverted inverted, Item from, Tag<Item> to) {\n+        ILootCondition lootCondition = getField(Inverted.class, inverted, 0);\n+\n+        if (lootCondition instanceof MatchTool && checkMatchTool((MatchTool) lootCondition, from)) {\n+            setField(Inverted.class, inverted, 0, MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build());\n+            return true;\n+        } else if (lootCondition instanceof Alternative && findAndReplaceInAlternative((Alternative) lootCondition, from, to)) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    private boolean checkMatchTool(MatchTool lootCondition, Item expected) {\n+        ItemPredicate predicate = getField(MatchTool.class, lootCondition, 0);\n+        Item item = getField(ItemPredicate.class, predicate, 4);\n+        return item != null && item.equals(expected);\n+    }\n+\n+    private <T, R> void setField(Class<T> clz, T inst, int index, R value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NDU2MQ=="}, "originalCommit": {"oid": "ec26e4c65d477759dfbe978785c0c9b68c426472"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczMDE1NA==", "bodyText": "Removed setField method as proposed", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6765#discussion_r439730154", "createdAt": "2020-06-13T10:57:01Z", "author": {"login": "yanny7"}, "path": "src/main/java/net/minecraftforge/common/data/ForgeLootTableProvider.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package net.minecraftforge.common.data;\n+\n+import com.mojang.datafixers.util.Pair;\n+import net.minecraft.advancements.criterion.ItemPredicate;\n+import net.minecraft.data.DataGenerator;\n+import net.minecraft.data.LootTableProvider;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.Items;\n+import net.minecraft.tags.Tag;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.*;\n+import net.minecraft.world.storage.loot.conditions.Alternative;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraft.world.storage.loot.conditions.Inverted;\n+import net.minecraft.world.storage.loot.conditions.MatchTool;\n+import net.minecraftforge.common.Tags;\n+\n+import java.lang.reflect.Field;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+public class ForgeLootTableProvider extends LootTableProvider {\n+\n+    public ForgeLootTableProvider(DataGenerator gen) {\n+        super(gen);\n+    }\n+\n+    @Override\n+    protected void validate(Map<ResourceLocation, LootTable> map, ValidationTracker validationtracker) {\n+        // do not validate against all registered loot tables\n+    }\n+\n+    @Override\n+    protected List<Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>> getTables() {\n+        return super.getTables().stream().map(pair -> {\n+            // provides new consumer with filtering only changed loot tables and replacing condition item to condition tag\n+            return new Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>(() -> replaceAndFilterChangesOnly(pair.getFirst().get()), pair.getSecond());\n+        }).collect(Collectors.toList());\n+    }\n+\n+    private Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> replaceAndFilterChangesOnly(Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> consumer) {\n+        return (newConsumer) -> consumer.accept((resourceLocation, builder) -> {\n+            if (findAndReplaceInLootTableBuilder(builder, Items.SHEARS, Tags.Items.SHEARS)) {\n+                newConsumer.accept(resourceLocation, builder);\n+            }\n+        });\n+    }\n+\n+    private boolean findAndReplaceInLootTableBuilder(LootTable.Builder builder, Item from, Tag<Item> to) {\n+        List<LootPool> lootPools = getField(LootTable.Builder.class, builder, 0);\n+        boolean found = false;\n+\n+        for (LootPool lootPool : lootPools) {\n+            if (findAndReplaceInLootPool(lootPool, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInLootPool(LootPool lootPool, Item from, Tag<Item> to) {\n+        List<LootEntry> lootEntries = getField(LootPool.class, lootPool, 1);\n+        List<ILootCondition> lootConditions = getField(LootPool.class, lootPool, 2);\n+        boolean found = false;\n+\n+        for (LootEntry lootEntry : lootEntries) {\n+            if (lootEntry instanceof ParentedLootEntry) {\n+                if (findAndReplaceInParentedLootEntry((ParentedLootEntry) lootEntry, from, to)) {\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < lootConditions.size(); i++) {\n+            ILootCondition lootCondition = lootConditions.get(i);\n+            if (lootCondition instanceof MatchTool && checkMatchTool((MatchTool) lootCondition, from)) {\n+                lootConditions.set(i, MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build());\n+                found = true;\n+            } else if (lootCondition instanceof Inverted && findAndReplaceInInverted((Inverted) lootCondition, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInParentedLootEntry(ParentedLootEntry entry, Item from, Tag<Item> to) {\n+        LootEntry[] lootEntries = getField(ParentedLootEntry.class, entry, 0);\n+        boolean found = false;\n+\n+        for (LootEntry lootEntry : lootEntries) {\n+            if (findAndReplaceInLootEntry(lootEntry, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInLootEntry(LootEntry entry, Item from, Tag<Item> to) {\n+        ILootCondition[] lootConditions = getField(LootEntry.class, entry, 0);\n+        boolean found = false;\n+\n+        for (int i = 0; i < lootConditions.length; i++) {\n+            if (lootConditions[i] instanceof Alternative && findAndReplaceInAlternative((Alternative) lootConditions[i], from, to)) {\n+                found = true;\n+            } else if (lootConditions[i] instanceof MatchTool && checkMatchTool((MatchTool) lootConditions[i], from)) {\n+                lootConditions[i] = MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build();\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInAlternative(Alternative alternative, Item from, Tag<Item> to) {\n+        ILootCondition[] lootConditions = getField(Alternative.class, alternative, 0);\n+        boolean found = false;\n+\n+        for (int i = 0; i < lootConditions.length; i++) {\n+            if (lootConditions[i] instanceof MatchTool && checkMatchTool((MatchTool) lootConditions[i], from)) {\n+                lootConditions[i] = MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build();\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInInverted(Inverted inverted, Item from, Tag<Item> to) {\n+        ILootCondition lootCondition = getField(Inverted.class, inverted, 0);\n+\n+        if (lootCondition instanceof MatchTool && checkMatchTool((MatchTool) lootCondition, from)) {\n+            setField(Inverted.class, inverted, 0, MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build());\n+            return true;\n+        } else if (lootCondition instanceof Alternative && findAndReplaceInAlternative((Alternative) lootCondition, from, to)) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    private boolean checkMatchTool(MatchTool lootCondition, Item expected) {\n+        ItemPredicate predicate = getField(MatchTool.class, lootCondition, 0);\n+        Item item = getField(ItemPredicate.class, predicate, 4);\n+        return item != null && item.equals(expected);\n+    }\n+\n+    private <T, R> void setField(Class<T> clz, T inst, int index, R value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NDU2MQ=="}, "originalCommit": {"oid": "ec26e4c65d477759dfbe978785c0c9b68c426472"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTQxNzUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/data/ForgeLootTableProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODozNzozMlrOGjofDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTowNjoxMVrOGj_Chg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxNjY1Mw==", "bodyText": "Depending on field order doesn't feel very safe, is there a reason this is used over ObfuscationReflectionHelper or a simple Access Transformer?", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6765#discussion_r440016653", "createdAt": "2020-06-15T08:37:32Z", "author": {"login": "ichttt"}, "path": "src/main/java/net/minecraftforge/common/data/ForgeLootTableProvider.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package net.minecraftforge.common.data;\n+\n+import com.mojang.datafixers.util.Pair;\n+import net.minecraft.advancements.criterion.ItemPredicate;\n+import net.minecraft.data.DataGenerator;\n+import net.minecraft.data.LootTableProvider;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.Items;\n+import net.minecraft.tags.Tag;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.*;\n+import net.minecraft.world.storage.loot.conditions.Alternative;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraft.world.storage.loot.conditions.Inverted;\n+import net.minecraft.world.storage.loot.conditions.MatchTool;\n+import net.minecraftforge.common.Tags;\n+\n+import java.lang.reflect.Field;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+public class ForgeLootTableProvider extends LootTableProvider {\n+\n+    public ForgeLootTableProvider(DataGenerator gen) {\n+        super(gen);\n+    }\n+\n+    @Override\n+    protected void validate(Map<ResourceLocation, LootTable> map, ValidationTracker validationtracker) {\n+        // do not validate against all registered loot tables\n+    }\n+\n+    @Override\n+    protected List<Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>> getTables() {\n+        return super.getTables().stream().map(pair -> {\n+            // provides new consumer with filtering only changed loot tables and replacing condition item to condition tag\n+            return new Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>(() -> replaceAndFilterChangesOnly(pair.getFirst().get()), pair.getSecond());\n+        }).collect(Collectors.toList());\n+    }\n+\n+    private Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> replaceAndFilterChangesOnly(Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> consumer) {\n+        return (newConsumer) -> consumer.accept((resourceLocation, builder) -> {\n+            if (findAndReplaceInLootTableBuilder(builder, Items.SHEARS, Tags.Items.SHEARS)) {\n+                newConsumer.accept(resourceLocation, builder);\n+            }\n+        });\n+    }\n+\n+    private boolean findAndReplaceInLootTableBuilder(LootTable.Builder builder, Item from, Tag<Item> to) {\n+        List<LootPool> lootPools = getField(LootTable.Builder.class, builder, 0);\n+        boolean found = false;\n+\n+        for (LootPool lootPool : lootPools) {\n+            if (findAndReplaceInLootPool(lootPool, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInLootPool(LootPool lootPool, Item from, Tag<Item> to) {\n+        List<LootEntry> lootEntries = getField(LootPool.class, lootPool, 1);\n+        List<ILootCondition> lootConditions = getField(LootPool.class, lootPool, 2);\n+        boolean found = false;\n+\n+        for (LootEntry lootEntry : lootEntries) {\n+            if (lootEntry instanceof ParentedLootEntry) {\n+                if (findAndReplaceInParentedLootEntry((ParentedLootEntry) lootEntry, from, to)) {\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < lootConditions.size(); i++) {\n+            ILootCondition lootCondition = lootConditions.get(i);\n+            if (lootCondition instanceof MatchTool && checkMatchTool((MatchTool) lootCondition, from)) {\n+                lootConditions.set(i, MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build());\n+                found = true;\n+            } else if (lootCondition instanceof Inverted) {\n+                ILootCondition invLootCondition = getField(Inverted.class, (Inverted) lootCondition, 0);\n+\n+                if (invLootCondition instanceof MatchTool && checkMatchTool((MatchTool) invLootCondition, from)) {\n+                    lootConditions.set(i, Inverted.builder(MatchTool.builder(ItemPredicate.Builder.create().tag(to))).build());\n+                    found = true;\n+                } else if (invLootCondition instanceof Alternative && findAndReplaceInAlternative((Alternative) invLootCondition, from, to)) {\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInParentedLootEntry(ParentedLootEntry entry, Item from, Tag<Item> to) {\n+        LootEntry[] lootEntries = getField(ParentedLootEntry.class, entry, 0);\n+        boolean found = false;\n+\n+        for (LootEntry lootEntry : lootEntries) {\n+            if (findAndReplaceInLootEntry(lootEntry, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInLootEntry(LootEntry entry, Item from, Tag<Item> to) {\n+        ILootCondition[] lootConditions = getField(LootEntry.class, entry, 0);\n+        boolean found = false;\n+\n+        for (int i = 0; i < lootConditions.length; i++) {\n+            if (lootConditions[i] instanceof Alternative && findAndReplaceInAlternative((Alternative) lootConditions[i], from, to)) {\n+                found = true;\n+            } else if (lootConditions[i] instanceof MatchTool && checkMatchTool((MatchTool) lootConditions[i], from)) {\n+                lootConditions[i] = MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build();\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInAlternative(Alternative alternative, Item from, Tag<Item> to) {\n+        ILootCondition[] lootConditions = getField(Alternative.class, alternative, 0);\n+        boolean found = false;\n+\n+        for (int i = 0; i < lootConditions.length; i++) {\n+            if (lootConditions[i] instanceof MatchTool && checkMatchTool((MatchTool) lootConditions[i], from)) {\n+                lootConditions[i] = MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build();\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean checkMatchTool(MatchTool lootCondition, Item expected) {\n+        ItemPredicate predicate = getField(MatchTool.class, lootCondition, 0);\n+        Item item = getField(ItemPredicate.class, predicate, 4);\n+        return item != null && item.equals(expected);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <T, R> R getField(Class<T> clz, T inst, int index)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7a36b87bddf17d24c1876590a125f8f6b64a1f4"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0MTI1MA==", "bodyText": "That's also what's happening in ForgeRecipeProvider, where obtaining the list or map of ingredients relies on the field ordering (why?). There should be a common consensus on the approach to follow.\nIMO ObfuscationReflectionHelper should be preferred over ATs (since these data Gens don't run at runtime and we don't really need to expose data) and field ordering.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6765#discussion_r440041250", "createdAt": "2020-06-15T09:19:01Z", "author": {"login": "TheSilkMiner"}, "path": "src/main/java/net/minecraftforge/common/data/ForgeLootTableProvider.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package net.minecraftforge.common.data;\n+\n+import com.mojang.datafixers.util.Pair;\n+import net.minecraft.advancements.criterion.ItemPredicate;\n+import net.minecraft.data.DataGenerator;\n+import net.minecraft.data.LootTableProvider;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.Items;\n+import net.minecraft.tags.Tag;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.*;\n+import net.minecraft.world.storage.loot.conditions.Alternative;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraft.world.storage.loot.conditions.Inverted;\n+import net.minecraft.world.storage.loot.conditions.MatchTool;\n+import net.minecraftforge.common.Tags;\n+\n+import java.lang.reflect.Field;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+public class ForgeLootTableProvider extends LootTableProvider {\n+\n+    public ForgeLootTableProvider(DataGenerator gen) {\n+        super(gen);\n+    }\n+\n+    @Override\n+    protected void validate(Map<ResourceLocation, LootTable> map, ValidationTracker validationtracker) {\n+        // do not validate against all registered loot tables\n+    }\n+\n+    @Override\n+    protected List<Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>> getTables() {\n+        return super.getTables().stream().map(pair -> {\n+            // provides new consumer with filtering only changed loot tables and replacing condition item to condition tag\n+            return new Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>(() -> replaceAndFilterChangesOnly(pair.getFirst().get()), pair.getSecond());\n+        }).collect(Collectors.toList());\n+    }\n+\n+    private Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> replaceAndFilterChangesOnly(Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> consumer) {\n+        return (newConsumer) -> consumer.accept((resourceLocation, builder) -> {\n+            if (findAndReplaceInLootTableBuilder(builder, Items.SHEARS, Tags.Items.SHEARS)) {\n+                newConsumer.accept(resourceLocation, builder);\n+            }\n+        });\n+    }\n+\n+    private boolean findAndReplaceInLootTableBuilder(LootTable.Builder builder, Item from, Tag<Item> to) {\n+        List<LootPool> lootPools = getField(LootTable.Builder.class, builder, 0);\n+        boolean found = false;\n+\n+        for (LootPool lootPool : lootPools) {\n+            if (findAndReplaceInLootPool(lootPool, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInLootPool(LootPool lootPool, Item from, Tag<Item> to) {\n+        List<LootEntry> lootEntries = getField(LootPool.class, lootPool, 1);\n+        List<ILootCondition> lootConditions = getField(LootPool.class, lootPool, 2);\n+        boolean found = false;\n+\n+        for (LootEntry lootEntry : lootEntries) {\n+            if (lootEntry instanceof ParentedLootEntry) {\n+                if (findAndReplaceInParentedLootEntry((ParentedLootEntry) lootEntry, from, to)) {\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < lootConditions.size(); i++) {\n+            ILootCondition lootCondition = lootConditions.get(i);\n+            if (lootCondition instanceof MatchTool && checkMatchTool((MatchTool) lootCondition, from)) {\n+                lootConditions.set(i, MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build());\n+                found = true;\n+            } else if (lootCondition instanceof Inverted) {\n+                ILootCondition invLootCondition = getField(Inverted.class, (Inverted) lootCondition, 0);\n+\n+                if (invLootCondition instanceof MatchTool && checkMatchTool((MatchTool) invLootCondition, from)) {\n+                    lootConditions.set(i, Inverted.builder(MatchTool.builder(ItemPredicate.Builder.create().tag(to))).build());\n+                    found = true;\n+                } else if (invLootCondition instanceof Alternative && findAndReplaceInAlternative((Alternative) invLootCondition, from, to)) {\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInParentedLootEntry(ParentedLootEntry entry, Item from, Tag<Item> to) {\n+        LootEntry[] lootEntries = getField(ParentedLootEntry.class, entry, 0);\n+        boolean found = false;\n+\n+        for (LootEntry lootEntry : lootEntries) {\n+            if (findAndReplaceInLootEntry(lootEntry, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInLootEntry(LootEntry entry, Item from, Tag<Item> to) {\n+        ILootCondition[] lootConditions = getField(LootEntry.class, entry, 0);\n+        boolean found = false;\n+\n+        for (int i = 0; i < lootConditions.length; i++) {\n+            if (lootConditions[i] instanceof Alternative && findAndReplaceInAlternative((Alternative) lootConditions[i], from, to)) {\n+                found = true;\n+            } else if (lootConditions[i] instanceof MatchTool && checkMatchTool((MatchTool) lootConditions[i], from)) {\n+                lootConditions[i] = MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build();\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInAlternative(Alternative alternative, Item from, Tag<Item> to) {\n+        ILootCondition[] lootConditions = getField(Alternative.class, alternative, 0);\n+        boolean found = false;\n+\n+        for (int i = 0; i < lootConditions.length; i++) {\n+            if (lootConditions[i] instanceof MatchTool && checkMatchTool((MatchTool) lootConditions[i], from)) {\n+                lootConditions[i] = MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build();\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean checkMatchTool(MatchTool lootCondition, Item expected) {\n+        ItemPredicate predicate = getField(MatchTool.class, lootCondition, 0);\n+        Item item = getField(ItemPredicate.class, predicate, 4);\n+        return item != null && item.equals(expected);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <T, R> R getField(Class<T> clz, T inst, int index)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxNjY1Mw=="}, "originalCommit": {"oid": "d7a36b87bddf17d24c1876590a125f8f6b64a1f4"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4NjE4Mg==", "bodyText": "I was using ForgeRecipeProvider as example, but I can replace that by method from ObfuscationReflectionHelper", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6765#discussion_r440386182", "createdAt": "2020-06-15T19:06:11Z", "author": {"login": "yanny7"}, "path": "src/main/java/net/minecraftforge/common/data/ForgeLootTableProvider.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package net.minecraftforge.common.data;\n+\n+import com.mojang.datafixers.util.Pair;\n+import net.minecraft.advancements.criterion.ItemPredicate;\n+import net.minecraft.data.DataGenerator;\n+import net.minecraft.data.LootTableProvider;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.Items;\n+import net.minecraft.tags.Tag;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.*;\n+import net.minecraft.world.storage.loot.conditions.Alternative;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraft.world.storage.loot.conditions.Inverted;\n+import net.minecraft.world.storage.loot.conditions.MatchTool;\n+import net.minecraftforge.common.Tags;\n+\n+import java.lang.reflect.Field;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+public class ForgeLootTableProvider extends LootTableProvider {\n+\n+    public ForgeLootTableProvider(DataGenerator gen) {\n+        super(gen);\n+    }\n+\n+    @Override\n+    protected void validate(Map<ResourceLocation, LootTable> map, ValidationTracker validationtracker) {\n+        // do not validate against all registered loot tables\n+    }\n+\n+    @Override\n+    protected List<Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>> getTables() {\n+        return super.getTables().stream().map(pair -> {\n+            // provides new consumer with filtering only changed loot tables and replacing condition item to condition tag\n+            return new Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>(() -> replaceAndFilterChangesOnly(pair.getFirst().get()), pair.getSecond());\n+        }).collect(Collectors.toList());\n+    }\n+\n+    private Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> replaceAndFilterChangesOnly(Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> consumer) {\n+        return (newConsumer) -> consumer.accept((resourceLocation, builder) -> {\n+            if (findAndReplaceInLootTableBuilder(builder, Items.SHEARS, Tags.Items.SHEARS)) {\n+                newConsumer.accept(resourceLocation, builder);\n+            }\n+        });\n+    }\n+\n+    private boolean findAndReplaceInLootTableBuilder(LootTable.Builder builder, Item from, Tag<Item> to) {\n+        List<LootPool> lootPools = getField(LootTable.Builder.class, builder, 0);\n+        boolean found = false;\n+\n+        for (LootPool lootPool : lootPools) {\n+            if (findAndReplaceInLootPool(lootPool, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInLootPool(LootPool lootPool, Item from, Tag<Item> to) {\n+        List<LootEntry> lootEntries = getField(LootPool.class, lootPool, 1);\n+        List<ILootCondition> lootConditions = getField(LootPool.class, lootPool, 2);\n+        boolean found = false;\n+\n+        for (LootEntry lootEntry : lootEntries) {\n+            if (lootEntry instanceof ParentedLootEntry) {\n+                if (findAndReplaceInParentedLootEntry((ParentedLootEntry) lootEntry, from, to)) {\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < lootConditions.size(); i++) {\n+            ILootCondition lootCondition = lootConditions.get(i);\n+            if (lootCondition instanceof MatchTool && checkMatchTool((MatchTool) lootCondition, from)) {\n+                lootConditions.set(i, MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build());\n+                found = true;\n+            } else if (lootCondition instanceof Inverted) {\n+                ILootCondition invLootCondition = getField(Inverted.class, (Inverted) lootCondition, 0);\n+\n+                if (invLootCondition instanceof MatchTool && checkMatchTool((MatchTool) invLootCondition, from)) {\n+                    lootConditions.set(i, Inverted.builder(MatchTool.builder(ItemPredicate.Builder.create().tag(to))).build());\n+                    found = true;\n+                } else if (invLootCondition instanceof Alternative && findAndReplaceInAlternative((Alternative) invLootCondition, from, to)) {\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInParentedLootEntry(ParentedLootEntry entry, Item from, Tag<Item> to) {\n+        LootEntry[] lootEntries = getField(ParentedLootEntry.class, entry, 0);\n+        boolean found = false;\n+\n+        for (LootEntry lootEntry : lootEntries) {\n+            if (findAndReplaceInLootEntry(lootEntry, from, to)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInLootEntry(LootEntry entry, Item from, Tag<Item> to) {\n+        ILootCondition[] lootConditions = getField(LootEntry.class, entry, 0);\n+        boolean found = false;\n+\n+        for (int i = 0; i < lootConditions.length; i++) {\n+            if (lootConditions[i] instanceof Alternative && findAndReplaceInAlternative((Alternative) lootConditions[i], from, to)) {\n+                found = true;\n+            } else if (lootConditions[i] instanceof MatchTool && checkMatchTool((MatchTool) lootConditions[i], from)) {\n+                lootConditions[i] = MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build();\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean findAndReplaceInAlternative(Alternative alternative, Item from, Tag<Item> to) {\n+        ILootCondition[] lootConditions = getField(Alternative.class, alternative, 0);\n+        boolean found = false;\n+\n+        for (int i = 0; i < lootConditions.length; i++) {\n+            if (lootConditions[i] instanceof MatchTool && checkMatchTool((MatchTool) lootConditions[i], from)) {\n+                lootConditions[i] = MatchTool.builder(ItemPredicate.Builder.create().tag(to)).build();\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    private boolean checkMatchTool(MatchTool lootCondition, Item expected) {\n+        ItemPredicate predicate = getField(MatchTool.class, lootCondition, 0);\n+        Item item = getField(ItemPredicate.class, predicate, 4);\n+        return item != null && item.equals(expected);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <T, R> R getField(Class<T> clz, T inst, int index)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxNjY1Mw=="}, "originalCommit": {"oid": "d7a36b87bddf17d24c1876590a125f8f6b64a1f4"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTQyNTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/data/ForgeLootTableProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODozOTozOFrOGjojew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOToyMTo0MVrOGkS0fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxNzc4Nw==", "bodyText": "Should probably note that this is used for shears only right now", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6765#discussion_r440017787", "createdAt": "2020-06-15T08:39:38Z", "author": {"login": "ichttt"}, "path": "src/main/java/net/minecraftforge/common/data/ForgeLootTableProvider.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package net.minecraftforge.common.data;\n+\n+import com.mojang.datafixers.util.Pair;\n+import net.minecraft.advancements.criterion.ItemPredicate;\n+import net.minecraft.data.DataGenerator;\n+import net.minecraft.data.LootTableProvider;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.Items;\n+import net.minecraft.tags.Tag;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.*;\n+import net.minecraft.world.storage.loot.conditions.Alternative;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraft.world.storage.loot.conditions.Inverted;\n+import net.minecraft.world.storage.loot.conditions.MatchTool;\n+import net.minecraftforge.common.Tags;\n+\n+import java.lang.reflect.Field;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+public class ForgeLootTableProvider extends LootTableProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7a36b87bddf17d24c1876590a125f8f6b64a1f4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMDI3MA==", "bodyText": "Added comment", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/6765#discussion_r440710270", "createdAt": "2020-06-16T09:21:41Z", "author": {"login": "yanny7"}, "path": "src/main/java/net/minecraftforge/common/data/ForgeLootTableProvider.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package net.minecraftforge.common.data;\n+\n+import com.mojang.datafixers.util.Pair;\n+import net.minecraft.advancements.criterion.ItemPredicate;\n+import net.minecraft.data.DataGenerator;\n+import net.minecraft.data.LootTableProvider;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.Items;\n+import net.minecraft.tags.Tag;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.storage.loot.*;\n+import net.minecraft.world.storage.loot.conditions.Alternative;\n+import net.minecraft.world.storage.loot.conditions.ILootCondition;\n+import net.minecraft.world.storage.loot.conditions.Inverted;\n+import net.minecraft.world.storage.loot.conditions.MatchTool;\n+import net.minecraftforge.common.Tags;\n+\n+import java.lang.reflect.Field;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+public class ForgeLootTableProvider extends LootTableProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxNzc4Nw=="}, "originalCommit": {"oid": "d7a36b87bddf17d24c1876590a125f8f6b64a1f4"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 965, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}