{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNTE0NTU1", "number": 7317, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzoxNjoyNVrOEiHEJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODo0MToyM1rOEupRrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjAyNzkwOnYy", "diffSide": "RIGHT", "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzoxNjoyNVrOHPzDDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOTozMTozN1rOHQC13g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyNzA1NQ==", "bodyText": "This method should have a proper name and be added to the forge.exc file so that the ServerWorld param can be properly remapped.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r486327055", "createdAt": "2020-09-10T13:16:25Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "diffHunk": "@@ -262,7 +261,29 @@\n           }\n        } else {\n           return null;\n-@@ -2320,9 +2357,10 @@\n+@@ -2123,14 +2160,19 @@\n+       this.field_70128_L = true;\n+    }\n+ \n+-   @Nullable\n++   @Nullable @Deprecated // Use ITeleporter safe version\n+    protected PortalInfo func_241829_a(ServerWorld p_241829_1_) {\n++      return this.func_241829_a(p_241829_1_, p_241829_1_.func_85176_s());\n++   }\n++\n++   @Nullable\n++   protected PortalInfo func_241829_a(ServerWorld p_241829_1_, net.minecraftforge.common.util.ITeleporter teleporter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "513e96ad4b977cb490f0cf77c9dfbb9e9a258003"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NTgyMg==", "bodyText": "Taken care of. The new method has been named getPortalInfo and exists within the forge.exc for it's ServerWorld param.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r486585822", "createdAt": "2020-09-10T19:31:37Z", "author": {"login": "SilverDavidMC"}, "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "diffHunk": "@@ -262,7 +261,29 @@\n           }\n        } else {\n           return null;\n-@@ -2320,9 +2357,10 @@\n+@@ -2123,14 +2160,19 @@\n+       this.field_70128_L = true;\n+    }\n+ \n+-   @Nullable\n++   @Nullable @Deprecated // Use ITeleporter safe version\n+    protected PortalInfo func_241829_a(ServerWorld p_241829_1_) {\n++      return this.func_241829_a(p_241829_1_, p_241829_1_.func_85176_s());\n++   }\n++\n++   @Nullable\n++   protected PortalInfo func_241829_a(ServerWorld p_241829_1_, net.minecraftforge.common.util.ITeleporter teleporter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyNzA1NQ=="}, "originalCommit": {"oid": "513e96ad4b977cb490f0cf77c9dfbb9e9a258003"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDU0MjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzoxNzo0MFrOHadD8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDowNToyNVrOHafRlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUwMTE2OQ==", "bodyText": "Copying vanilla code should always be avoided if possible. Please check if you can't replace this with a call to the original method if it is a clean copy or patch and call the original method if the change is small enough.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497501169", "createdAt": "2020-09-30T13:17:40Z", "author": {"login": "ichttt"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -58,10 +75,68 @@\n     default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    // States if this teleporter is the vanilla instance\n     default boolean isVanilla()\n     {\n         return getClass() == Teleporter.class;\n     }\n+\n+    // Replicated from the vanilla code for interface implementation. Return an empty optional if no portal was found.\n+    default Optional<TeleportationRepositioner.Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity)\n+    {\n+        PointOfInterestManager pointofinterestmanager = toWorld.getPointOfInterestManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e325f0c160089641b148800c5dbb8fd4d102673"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUzNzQyOQ==", "bodyText": "fixed in https://github.com/SilverDavidMC/MinecraftForge/pull/3", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497537429", "createdAt": "2020-09-30T14:05:25Z", "author": {"login": "mrp-v2"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -58,10 +75,68 @@\n     default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    // States if this teleporter is the vanilla instance\n     default boolean isVanilla()\n     {\n         return getClass() == Teleporter.class;\n     }\n+\n+    // Replicated from the vanilla code for interface implementation. Return an empty optional if no portal was found.\n+    default Optional<TeleportationRepositioner.Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity)\n+    {\n+        PointOfInterestManager pointofinterestmanager = toWorld.getPointOfInterestManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUwMTE2OQ=="}, "originalCommit": {"oid": "1e325f0c160089641b148800c5dbb8fd4d102673"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDU0NDkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzoxODoyM1rOHadFwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDowMToyM1rOHafFPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUwMTYzNA==", "bodyText": "Same here, looks like vanilla copied code, can we remove this copy somehow?", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497501634", "createdAt": "2020-09-30T13:18:23Z", "author": {"login": "ichttt"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -58,10 +75,68 @@\n     default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    // States if this teleporter is the vanilla instance\n     default boolean isVanilla()\n     {\n         return getClass() == Teleporter.class;\n     }\n+\n+    // Replicated from the vanilla code for interface implementation. Return an empty optional if no portal was found.\n+    default Optional<TeleportationRepositioner.Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity)\n+    {\n+        PointOfInterestManager pointofinterestmanager = toWorld.getPointOfInterestManager();\n+        int dist = Math.max((int) DimensionType.func_242715_a(fromWorld.func_230315_m_(), toWorld.func_230315_m_()) * 16, 16);\n+        BlockPos pos = this.getScaledPos(fromWorld, toWorld, new BlockPos(entity.getPositionVec()));\n+        pointofinterestmanager.ensureLoadedAndValid(toWorld, pos, dist);\n+        \n+        Optional<PointOfInterest> optional = pointofinterestmanager.getInSquare((poi) -> \n+        {\n+           return poi == this.getPortalPOI();\n+        }, pos, dist, PointOfInterestManager.Status.ANY).sorted(Comparator.<PointOfInterest>comparingDouble((poi) -> \n+        {\n+           return poi.getPos().distanceSq(pos);\n+        }).thenComparingInt((poi) -> \n+        {\n+           return poi.getPos().getY();\n+        })).findFirst();\n+        \n+        return optional.map((poi) -> \n+        {\n+           BlockPos blockpos = poi.getPos();\n+           toWorld.getChunkProvider().registerTicket(TicketType.PORTAL, new ChunkPos(blockpos), 3, blockpos);\n+           BlockState blockstate = toWorld.getBlockState(blockpos);\n+           return TeleportationRepositioner.func_243676_a(blockpos, entity.getHorizontalFacing().getAxis(), 21, Direction.Axis.Y, 21, (p) -> toWorld.getBlockState(p) == blockstate);\n+        });\n+    }\n+\n+    // Creates a portal if one doesn't exist and returns the result. Default does nothing so you'll need to implement it for your portal.\n+    default Optional<TeleportationRepositioner.Result> createAndGetPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity)\n+    {\n+        return Optional.empty();\n+    }\n+\n+    // Returns the portal info for the result. Default returns the tpResult position and zero values for everything else.\n+    default PortalInfo getPortalInfo(TeleportationRepositioner.Result tpResult)\n+    {\n+        return new PortalInfo(new Vector3d(tpResult.field_243679_a.getX(), tpResult.field_243679_a.getY(), tpResult.field_243679_a.getZ()), Vector3d.ZERO, 0, 0);\n+    }\n+    \n+    // Scales the given blockpos based on the worlds passed in.\n+    default BlockPos getScaledPos(World fromWorld, World toWorld, BlockPos originalPos)\n+    {\n+    \tWorldBorder worldborder = toWorld.getWorldBorder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e325f0c160089641b148800c5dbb8fd4d102673"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUzNDI3MQ==", "bodyText": "Looks like we can't, it is embedded in another method. See Entity#getPortalInfo(ServerWorld, ITeleporter)", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497534271", "createdAt": "2020-09-30T14:01:23Z", "author": {"login": "mrp-v2"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -58,10 +75,68 @@\n     default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    // States if this teleporter is the vanilla instance\n     default boolean isVanilla()\n     {\n         return getClass() == Teleporter.class;\n     }\n+\n+    // Replicated from the vanilla code for interface implementation. Return an empty optional if no portal was found.\n+    default Optional<TeleportationRepositioner.Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity)\n+    {\n+        PointOfInterestManager pointofinterestmanager = toWorld.getPointOfInterestManager();\n+        int dist = Math.max((int) DimensionType.func_242715_a(fromWorld.func_230315_m_(), toWorld.func_230315_m_()) * 16, 16);\n+        BlockPos pos = this.getScaledPos(fromWorld, toWorld, new BlockPos(entity.getPositionVec()));\n+        pointofinterestmanager.ensureLoadedAndValid(toWorld, pos, dist);\n+        \n+        Optional<PointOfInterest> optional = pointofinterestmanager.getInSquare((poi) -> \n+        {\n+           return poi == this.getPortalPOI();\n+        }, pos, dist, PointOfInterestManager.Status.ANY).sorted(Comparator.<PointOfInterest>comparingDouble((poi) -> \n+        {\n+           return poi.getPos().distanceSq(pos);\n+        }).thenComparingInt((poi) -> \n+        {\n+           return poi.getPos().getY();\n+        })).findFirst();\n+        \n+        return optional.map((poi) -> \n+        {\n+           BlockPos blockpos = poi.getPos();\n+           toWorld.getChunkProvider().registerTicket(TicketType.PORTAL, new ChunkPos(blockpos), 3, blockpos);\n+           BlockState blockstate = toWorld.getBlockState(blockpos);\n+           return TeleportationRepositioner.func_243676_a(blockpos, entity.getHorizontalFacing().getAxis(), 21, Direction.Axis.Y, 21, (p) -> toWorld.getBlockState(p) == blockstate);\n+        });\n+    }\n+\n+    // Creates a portal if one doesn't exist and returns the result. Default does nothing so you'll need to implement it for your portal.\n+    default Optional<TeleportationRepositioner.Result> createAndGetPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity)\n+    {\n+        return Optional.empty();\n+    }\n+\n+    // Returns the portal info for the result. Default returns the tpResult position and zero values for everything else.\n+    default PortalInfo getPortalInfo(TeleportationRepositioner.Result tpResult)\n+    {\n+        return new PortalInfo(new Vector3d(tpResult.field_243679_a.getX(), tpResult.field_243679_a.getY(), tpResult.field_243679_a.getZ()), Vector3d.ZERO, 0, 0);\n+    }\n+    \n+    // Scales the given blockpos based on the worlds passed in.\n+    default BlockPos getScaledPos(World fromWorld, World toWorld, BlockPos originalPos)\n+    {\n+    \tWorldBorder worldborder = toWorld.getWorldBorder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUwMTYzNA=="}, "originalCommit": {"oid": "1e325f0c160089641b148800c5dbb8fd4d102673"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY2OTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjozODozM1rOHaxuyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo1MjowOFrOHayA6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzOTgxOQ==", "bodyText": "This is a breaking change as any mods currently using ITeleporter will not have this method implemented if it is not defaulted.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497839819", "createdAt": "2020-09-30T22:38:33Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -19,49 +19,80 @@\n \n package net.minecraftforge.common.util;\n \n-import java.util.function.Function;\n-\n+import net.minecraft.block.PortalInfo;\n import net.minecraft.entity.Entity;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraft.entity.player.ServerPlayerEntity;\n-import net.minecraft.world.Teleporter;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.math.vector.Vector3d;\n import net.minecraft.world.server.ServerWorld;\n \n+import java.util.Optional;\n+import java.util.function.Function;\n+\n /**\n  * Interface for handling the placement of entities during dimension change.\n- *\n+ * <p>\n  * An implementation of this interface can be used to place the entity\n  * in a safe location, or generate a return portal, for instance.\n- *\n+ * <p>\n  * See the {@link net.minecraft.world.Teleporter} class, which has\n  * been patched to implement this interface, for a vanilla example.\n  */\n-public interface ITeleporter {\n-\n+public interface ITeleporter\n+{\n     /**\n      * Called to handle placing the entity in the new world.\n-     *\n+     * <p>\n      * The initial position of the entity will be its\n      * position in the origin world, multiplied horizontally\n      * by the computed cross-dimensional movement factor.\n-     *\n+     * <p>\n      * Note that the supplied entity has not yet been spawned\n      * in the destination world at the time.\n      *\n-     * @param entity           the entity to be placed\n-     * @param currentWorld     the entity's origin\n-     * @param destWorld        the entity's destination\n-     * @param yaw              the suggested yaw value to apply\n+     * @param entity the entity to be placed\n+     * @param currentWorld the entity's origin\n+     * @param destWorld the entity's destination\n+     * @param yaw the suggested yaw value to apply\n      * @param repositionEntity a function to reposition the entity, which returns the new entity in the new dimension. This is the vanilla implementation of the dimension travel logic. If the supplied boolean is true, it is attempted to spawn a new portal.\n+     *\n      * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link PlayerEntity}s! Move the player and update its state, see {@link ServerPlayerEntity#changeDimension(net.minecraft.world.server.ServerWorld, ITeleporter)}\n      */\n-    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n-       return repositionEntity.apply(true);\n+    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw,\n+            Function<Boolean, Entity> repositionEntity)\n+    {\n+        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    /**\n+     * Is this teleporter the vanilla instance.\n+     */\n     default boolean isVanilla()\n     {\n-        return getClass() == Teleporter.class;\n+        return false;\n+    }\n+\n+    /**\n+     * Finds a portal to teleport to and creates a {@link TeleportationRepositioner.Result} for it.\n+     * Return an empty {@link Optional} if no portal was found.\n+     */\n+    Optional<TeleportationRepositioner.Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d5f06b7847ea6d30a3b69a47049081db62e250e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MjY0MA==", "bodyText": "Optional.empty() for both of these?", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497842640", "createdAt": "2020-09-30T22:46:50Z", "author": {"login": "mrp-v2"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -19,49 +19,80 @@\n \n package net.minecraftforge.common.util;\n \n-import java.util.function.Function;\n-\n+import net.minecraft.block.PortalInfo;\n import net.minecraft.entity.Entity;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraft.entity.player.ServerPlayerEntity;\n-import net.minecraft.world.Teleporter;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.math.vector.Vector3d;\n import net.minecraft.world.server.ServerWorld;\n \n+import java.util.Optional;\n+import java.util.function.Function;\n+\n /**\n  * Interface for handling the placement of entities during dimension change.\n- *\n+ * <p>\n  * An implementation of this interface can be used to place the entity\n  * in a safe location, or generate a return portal, for instance.\n- *\n+ * <p>\n  * See the {@link net.minecraft.world.Teleporter} class, which has\n  * been patched to implement this interface, for a vanilla example.\n  */\n-public interface ITeleporter {\n-\n+public interface ITeleporter\n+{\n     /**\n      * Called to handle placing the entity in the new world.\n-     *\n+     * <p>\n      * The initial position of the entity will be its\n      * position in the origin world, multiplied horizontally\n      * by the computed cross-dimensional movement factor.\n-     *\n+     * <p>\n      * Note that the supplied entity has not yet been spawned\n      * in the destination world at the time.\n      *\n-     * @param entity           the entity to be placed\n-     * @param currentWorld     the entity's origin\n-     * @param destWorld        the entity's destination\n-     * @param yaw              the suggested yaw value to apply\n+     * @param entity the entity to be placed\n+     * @param currentWorld the entity's origin\n+     * @param destWorld the entity's destination\n+     * @param yaw the suggested yaw value to apply\n      * @param repositionEntity a function to reposition the entity, which returns the new entity in the new dimension. This is the vanilla implementation of the dimension travel logic. If the supplied boolean is true, it is attempted to spawn a new portal.\n+     *\n      * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link PlayerEntity}s! Move the player and update its state, see {@link ServerPlayerEntity#changeDimension(net.minecraft.world.server.ServerWorld, ITeleporter)}\n      */\n-    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n-       return repositionEntity.apply(true);\n+    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw,\n+            Function<Boolean, Entity> repositionEntity)\n+    {\n+        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    /**\n+     * Is this teleporter the vanilla instance.\n+     */\n     default boolean isVanilla()\n     {\n-        return getClass() == Teleporter.class;\n+        return false;\n+    }\n+\n+    /**\n+     * Finds a portal to teleport to and creates a {@link TeleportationRepositioner.Result} for it.\n+     * Return an empty {@link Optional} if no portal was found.\n+     */\n+    Optional<TeleportationRepositioner.Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzOTgxOQ=="}, "originalCommit": {"oid": "7d5f06b7847ea6d30a3b69a47049081db62e250e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MzQxNQ==", "bodyText": "Yes and then all the changes to the CommandSetDimension command should be able to be removed", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497843415", "createdAt": "2020-09-30T22:49:01Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -19,49 +19,80 @@\n \n package net.minecraftforge.common.util;\n \n-import java.util.function.Function;\n-\n+import net.minecraft.block.PortalInfo;\n import net.minecraft.entity.Entity;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraft.entity.player.ServerPlayerEntity;\n-import net.minecraft.world.Teleporter;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.math.vector.Vector3d;\n import net.minecraft.world.server.ServerWorld;\n \n+import java.util.Optional;\n+import java.util.function.Function;\n+\n /**\n  * Interface for handling the placement of entities during dimension change.\n- *\n+ * <p>\n  * An implementation of this interface can be used to place the entity\n  * in a safe location, or generate a return portal, for instance.\n- *\n+ * <p>\n  * See the {@link net.minecraft.world.Teleporter} class, which has\n  * been patched to implement this interface, for a vanilla example.\n  */\n-public interface ITeleporter {\n-\n+public interface ITeleporter\n+{\n     /**\n      * Called to handle placing the entity in the new world.\n-     *\n+     * <p>\n      * The initial position of the entity will be its\n      * position in the origin world, multiplied horizontally\n      * by the computed cross-dimensional movement factor.\n-     *\n+     * <p>\n      * Note that the supplied entity has not yet been spawned\n      * in the destination world at the time.\n      *\n-     * @param entity           the entity to be placed\n-     * @param currentWorld     the entity's origin\n-     * @param destWorld        the entity's destination\n-     * @param yaw              the suggested yaw value to apply\n+     * @param entity the entity to be placed\n+     * @param currentWorld the entity's origin\n+     * @param destWorld the entity's destination\n+     * @param yaw the suggested yaw value to apply\n      * @param repositionEntity a function to reposition the entity, which returns the new entity in the new dimension. This is the vanilla implementation of the dimension travel logic. If the supplied boolean is true, it is attempted to spawn a new portal.\n+     *\n      * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link PlayerEntity}s! Move the player and update its state, see {@link ServerPlayerEntity#changeDimension(net.minecraft.world.server.ServerWorld, ITeleporter)}\n      */\n-    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n-       return repositionEntity.apply(true);\n+    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw,\n+            Function<Boolean, Entity> repositionEntity)\n+    {\n+        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    /**\n+     * Is this teleporter the vanilla instance.\n+     */\n     default boolean isVanilla()\n     {\n-        return getClass() == Teleporter.class;\n+        return false;\n+    }\n+\n+    /**\n+     * Finds a portal to teleport to and creates a {@link TeleportationRepositioner.Result} for it.\n+     * Return an empty {@link Optional} if no portal was found.\n+     */\n+    Optional<TeleportationRepositioner.Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzOTgxOQ=="}, "originalCommit": {"oid": "7d5f06b7847ea6d30a3b69a47049081db62e250e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0NDQ1OQ==", "bodyText": "And the 2 lines at the end of the vanilla Teleporter", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497844459", "createdAt": "2020-09-30T22:52:08Z", "author": {"login": "mrp-v2"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -19,49 +19,80 @@\n \n package net.minecraftforge.common.util;\n \n-import java.util.function.Function;\n-\n+import net.minecraft.block.PortalInfo;\n import net.minecraft.entity.Entity;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraft.entity.player.ServerPlayerEntity;\n-import net.minecraft.world.Teleporter;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.math.vector.Vector3d;\n import net.minecraft.world.server.ServerWorld;\n \n+import java.util.Optional;\n+import java.util.function.Function;\n+\n /**\n  * Interface for handling the placement of entities during dimension change.\n- *\n+ * <p>\n  * An implementation of this interface can be used to place the entity\n  * in a safe location, or generate a return portal, for instance.\n- *\n+ * <p>\n  * See the {@link net.minecraft.world.Teleporter} class, which has\n  * been patched to implement this interface, for a vanilla example.\n  */\n-public interface ITeleporter {\n-\n+public interface ITeleporter\n+{\n     /**\n      * Called to handle placing the entity in the new world.\n-     *\n+     * <p>\n      * The initial position of the entity will be its\n      * position in the origin world, multiplied horizontally\n      * by the computed cross-dimensional movement factor.\n-     *\n+     * <p>\n      * Note that the supplied entity has not yet been spawned\n      * in the destination world at the time.\n      *\n-     * @param entity           the entity to be placed\n-     * @param currentWorld     the entity's origin\n-     * @param destWorld        the entity's destination\n-     * @param yaw              the suggested yaw value to apply\n+     * @param entity the entity to be placed\n+     * @param currentWorld the entity's origin\n+     * @param destWorld the entity's destination\n+     * @param yaw the suggested yaw value to apply\n      * @param repositionEntity a function to reposition the entity, which returns the new entity in the new dimension. This is the vanilla implementation of the dimension travel logic. If the supplied boolean is true, it is attempted to spawn a new portal.\n+     *\n      * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link PlayerEntity}s! Move the player and update its state, see {@link ServerPlayerEntity#changeDimension(net.minecraft.world.server.ServerWorld, ITeleporter)}\n      */\n-    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n-       return repositionEntity.apply(true);\n+    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw,\n+            Function<Boolean, Entity> repositionEntity)\n+    {\n+        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    /**\n+     * Is this teleporter the vanilla instance.\n+     */\n     default boolean isVanilla()\n     {\n-        return getClass() == Teleporter.class;\n+        return false;\n+    }\n+\n+    /**\n+     * Finds a portal to teleport to and creates a {@link TeleportationRepositioner.Result} for it.\n+     * Return an empty {@link Optional} if no portal was found.\n+     */\n+    Optional<TeleportationRepositioner.Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzOTgxOQ=="}, "originalCommit": {"oid": "7d5f06b7847ea6d30a3b69a47049081db62e250e"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY2OTM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjozODozNlrOHaxu4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjozODozNlrOHaxu4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzOTg0Mg==", "bodyText": "This is a breaking change as any mods currently using ITeleporter will not have this method implemented if it is not defaulted.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497839842", "createdAt": "2020-09-30T22:38:36Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -19,49 +19,80 @@\n \n package net.minecraftforge.common.util;\n \n-import java.util.function.Function;\n-\n+import net.minecraft.block.PortalInfo;\n import net.minecraft.entity.Entity;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraft.entity.player.ServerPlayerEntity;\n-import net.minecraft.world.Teleporter;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.math.vector.Vector3d;\n import net.minecraft.world.server.ServerWorld;\n \n+import java.util.Optional;\n+import java.util.function.Function;\n+\n /**\n  * Interface for handling the placement of entities during dimension change.\n- *\n+ * <p>\n  * An implementation of this interface can be used to place the entity\n  * in a safe location, or generate a return portal, for instance.\n- *\n+ * <p>\n  * See the {@link net.minecraft.world.Teleporter} class, which has\n  * been patched to implement this interface, for a vanilla example.\n  */\n-public interface ITeleporter {\n-\n+public interface ITeleporter\n+{\n     /**\n      * Called to handle placing the entity in the new world.\n-     *\n+     * <p>\n      * The initial position of the entity will be its\n      * position in the origin world, multiplied horizontally\n      * by the computed cross-dimensional movement factor.\n-     *\n+     * <p>\n      * Note that the supplied entity has not yet been spawned\n      * in the destination world at the time.\n      *\n-     * @param entity           the entity to be placed\n-     * @param currentWorld     the entity's origin\n-     * @param destWorld        the entity's destination\n-     * @param yaw              the suggested yaw value to apply\n+     * @param entity the entity to be placed\n+     * @param currentWorld the entity's origin\n+     * @param destWorld the entity's destination\n+     * @param yaw the suggested yaw value to apply\n      * @param repositionEntity a function to reposition the entity, which returns the new entity in the new dimension. This is the vanilla implementation of the dimension travel logic. If the supplied boolean is true, it is attempted to spawn a new portal.\n+     *\n      * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link PlayerEntity}s! Move the player and update its state, see {@link ServerPlayerEntity#changeDimension(net.minecraft.world.server.ServerWorld, ITeleporter)}\n      */\n-    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n-       return repositionEntity.apply(true);\n+    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw,\n+            Function<Boolean, Entity> repositionEntity)\n+    {\n+        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    /**\n+     * Is this teleporter the vanilla instance.\n+     */\n     default boolean isVanilla()\n     {\n-        return getClass() == Teleporter.class;\n+        return false;\n+    }\n+\n+    /**\n+     * Finds a portal to teleport to and creates a {@link TeleportationRepositioner.Result} for it.\n+     * Return an empty {@link Optional} if no portal was found.\n+     */\n+    Optional<TeleportationRepositioner.Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity);\n+\n+    /**\n+     * Creates a portal if one doesn't exist and returns the {@link TeleportationRepositioner.Result Result}.\n+     */\n+    Optional<TeleportationRepositioner.Result> createAndGetPortal(ServerWorld fromWorld, ServerWorld toWorld,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d5f06b7847ea6d30a3b69a47049081db62e250e"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY5Njg4OnYy", "diffSide": "LEFT", "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo1MDoyOFrOHax-yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMToyNjo0MFrOHa2RIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MzkxNQ==", "bodyText": "Why was this changed as it adds an extra line in the patch to Teleporter.java", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497843915", "createdAt": "2020-09-30T22:50:28Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -19,49 +19,80 @@\n \n package net.minecraftforge.common.util;\n \n-import java.util.function.Function;\n-\n+import net.minecraft.block.PortalInfo;\n import net.minecraft.entity.Entity;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraft.entity.player.ServerPlayerEntity;\n-import net.minecraft.world.Teleporter;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.math.vector.Vector3d;\n import net.minecraft.world.server.ServerWorld;\n \n+import java.util.Optional;\n+import java.util.function.Function;\n+\n /**\n  * Interface for handling the placement of entities during dimension change.\n- *\n+ * <p>\n  * An implementation of this interface can be used to place the entity\n  * in a safe location, or generate a return portal, for instance.\n- *\n+ * <p>\n  * See the {@link net.minecraft.world.Teleporter} class, which has\n  * been patched to implement this interface, for a vanilla example.\n  */\n-public interface ITeleporter {\n-\n+public interface ITeleporter\n+{\n     /**\n      * Called to handle placing the entity in the new world.\n-     *\n+     * <p>\n      * The initial position of the entity will be its\n      * position in the origin world, multiplied horizontally\n      * by the computed cross-dimensional movement factor.\n-     *\n+     * <p>\n      * Note that the supplied entity has not yet been spawned\n      * in the destination world at the time.\n      *\n-     * @param entity           the entity to be placed\n-     * @param currentWorld     the entity's origin\n-     * @param destWorld        the entity's destination\n-     * @param yaw              the suggested yaw value to apply\n+     * @param entity the entity to be placed\n+     * @param currentWorld the entity's origin\n+     * @param destWorld the entity's destination\n+     * @param yaw the suggested yaw value to apply\n      * @param repositionEntity a function to reposition the entity, which returns the new entity in the new dimension. This is the vanilla implementation of the dimension travel logic. If the supplied boolean is true, it is attempted to spawn a new portal.\n+     *\n      * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link PlayerEntity}s! Move the player and update its state, see {@link ServerPlayerEntity#changeDimension(net.minecraft.world.server.ServerWorld, ITeleporter)}\n      */\n-    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n-       return repositionEntity.apply(true);\n+    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw,\n+            Function<Boolean, Entity> repositionEntity)\n+    {\n+        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    /**\n+     * Is this teleporter the vanilla instance.\n+     */\n     default boolean isVanilla()\n     {\n-        return getClass() == Teleporter.class;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d5f06b7847ea6d30a3b69a47049081db62e250e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0NDMxNw==", "bodyText": "I figured returning true/false was more performant than checking for class equality.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497844317", "createdAt": "2020-09-30T22:51:45Z", "author": {"login": "mrp-v2"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -19,49 +19,80 @@\n \n package net.minecraftforge.common.util;\n \n-import java.util.function.Function;\n-\n+import net.minecraft.block.PortalInfo;\n import net.minecraft.entity.Entity;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraft.entity.player.ServerPlayerEntity;\n-import net.minecraft.world.Teleporter;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.math.vector.Vector3d;\n import net.minecraft.world.server.ServerWorld;\n \n+import java.util.Optional;\n+import java.util.function.Function;\n+\n /**\n  * Interface for handling the placement of entities during dimension change.\n- *\n+ * <p>\n  * An implementation of this interface can be used to place the entity\n  * in a safe location, or generate a return portal, for instance.\n- *\n+ * <p>\n  * See the {@link net.minecraft.world.Teleporter} class, which has\n  * been patched to implement this interface, for a vanilla example.\n  */\n-public interface ITeleporter {\n-\n+public interface ITeleporter\n+{\n     /**\n      * Called to handle placing the entity in the new world.\n-     *\n+     * <p>\n      * The initial position of the entity will be its\n      * position in the origin world, multiplied horizontally\n      * by the computed cross-dimensional movement factor.\n-     *\n+     * <p>\n      * Note that the supplied entity has not yet been spawned\n      * in the destination world at the time.\n      *\n-     * @param entity           the entity to be placed\n-     * @param currentWorld     the entity's origin\n-     * @param destWorld        the entity's destination\n-     * @param yaw              the suggested yaw value to apply\n+     * @param entity the entity to be placed\n+     * @param currentWorld the entity's origin\n+     * @param destWorld the entity's destination\n+     * @param yaw the suggested yaw value to apply\n      * @param repositionEntity a function to reposition the entity, which returns the new entity in the new dimension. This is the vanilla implementation of the dimension travel logic. If the supplied boolean is true, it is attempted to spawn a new portal.\n+     *\n      * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link PlayerEntity}s! Move the player and update its state, see {@link ServerPlayerEntity#changeDimension(net.minecraft.world.server.ServerWorld, ITeleporter)}\n      */\n-    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n-       return repositionEntity.apply(true);\n+    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw,\n+            Function<Boolean, Entity> repositionEntity)\n+    {\n+        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    /**\n+     * Is this teleporter the vanilla instance.\n+     */\n     default boolean isVanilla()\n     {\n-        return getClass() == Teleporter.class;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MzkxNQ=="}, "originalCommit": {"oid": "7d5f06b7847ea6d30a3b69a47049081db62e250e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0NDc1OA==", "bodyText": "But I don't know java well enough to know if it makes a difference.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497844758", "createdAt": "2020-09-30T22:53:14Z", "author": {"login": "mrp-v2"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -19,49 +19,80 @@\n \n package net.minecraftforge.common.util;\n \n-import java.util.function.Function;\n-\n+import net.minecraft.block.PortalInfo;\n import net.minecraft.entity.Entity;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraft.entity.player.ServerPlayerEntity;\n-import net.minecraft.world.Teleporter;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.math.vector.Vector3d;\n import net.minecraft.world.server.ServerWorld;\n \n+import java.util.Optional;\n+import java.util.function.Function;\n+\n /**\n  * Interface for handling the placement of entities during dimension change.\n- *\n+ * <p>\n  * An implementation of this interface can be used to place the entity\n  * in a safe location, or generate a return portal, for instance.\n- *\n+ * <p>\n  * See the {@link net.minecraft.world.Teleporter} class, which has\n  * been patched to implement this interface, for a vanilla example.\n  */\n-public interface ITeleporter {\n-\n+public interface ITeleporter\n+{\n     /**\n      * Called to handle placing the entity in the new world.\n-     *\n+     * <p>\n      * The initial position of the entity will be its\n      * position in the origin world, multiplied horizontally\n      * by the computed cross-dimensional movement factor.\n-     *\n+     * <p>\n      * Note that the supplied entity has not yet been spawned\n      * in the destination world at the time.\n      *\n-     * @param entity           the entity to be placed\n-     * @param currentWorld     the entity's origin\n-     * @param destWorld        the entity's destination\n-     * @param yaw              the suggested yaw value to apply\n+     * @param entity the entity to be placed\n+     * @param currentWorld the entity's origin\n+     * @param destWorld the entity's destination\n+     * @param yaw the suggested yaw value to apply\n      * @param repositionEntity a function to reposition the entity, which returns the new entity in the new dimension. This is the vanilla implementation of the dimension travel logic. If the supplied boolean is true, it is attempted to spawn a new portal.\n+     *\n      * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link PlayerEntity}s! Move the player and update its state, see {@link ServerPlayerEntity#changeDimension(net.minecraft.world.server.ServerWorld, ITeleporter)}\n      */\n-    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n-       return repositionEntity.apply(true);\n+    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw,\n+            Function<Boolean, Entity> repositionEntity)\n+    {\n+        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    /**\n+     * Is this teleporter the vanilla instance.\n+     */\n     default boolean isVanilla()\n     {\n-        return getClass() == Teleporter.class;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MzkxNQ=="}, "originalCommit": {"oid": "7d5f06b7847ea6d30a3b69a47049081db62e250e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkxNDE0Nw==", "bodyText": "Fixed", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497914147", "createdAt": "2020-10-01T01:26:40Z", "author": {"login": "SilverDavidMC"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -19,49 +19,80 @@\n \n package net.minecraftforge.common.util;\n \n-import java.util.function.Function;\n-\n+import net.minecraft.block.PortalInfo;\n import net.minecraft.entity.Entity;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraft.entity.player.ServerPlayerEntity;\n-import net.minecraft.world.Teleporter;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.math.vector.Vector3d;\n import net.minecraft.world.server.ServerWorld;\n \n+import java.util.Optional;\n+import java.util.function.Function;\n+\n /**\n  * Interface for handling the placement of entities during dimension change.\n- *\n+ * <p>\n  * An implementation of this interface can be used to place the entity\n  * in a safe location, or generate a return portal, for instance.\n- *\n+ * <p>\n  * See the {@link net.minecraft.world.Teleporter} class, which has\n  * been patched to implement this interface, for a vanilla example.\n  */\n-public interface ITeleporter {\n-\n+public interface ITeleporter\n+{\n     /**\n      * Called to handle placing the entity in the new world.\n-     *\n+     * <p>\n      * The initial position of the entity will be its\n      * position in the origin world, multiplied horizontally\n      * by the computed cross-dimensional movement factor.\n-     *\n+     * <p>\n      * Note that the supplied entity has not yet been spawned\n      * in the destination world at the time.\n      *\n-     * @param entity           the entity to be placed\n-     * @param currentWorld     the entity's origin\n-     * @param destWorld        the entity's destination\n-     * @param yaw              the suggested yaw value to apply\n+     * @param entity the entity to be placed\n+     * @param currentWorld the entity's origin\n+     * @param destWorld the entity's destination\n+     * @param yaw the suggested yaw value to apply\n      * @param repositionEntity a function to reposition the entity, which returns the new entity in the new dimension. This is the vanilla implementation of the dimension travel logic. If the supplied boolean is true, it is attempted to spawn a new portal.\n+     *\n      * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link PlayerEntity}s! Move the player and update its state, see {@link ServerPlayerEntity#changeDimension(net.minecraft.world.server.ServerWorld, ITeleporter)}\n      */\n-    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n-       return repositionEntity.apply(true);\n+    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw,\n+            Function<Boolean, Entity> repositionEntity)\n+    {\n+        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    /**\n+     * Is this teleporter the vanilla instance.\n+     */\n     default boolean isVanilla()\n     {\n-        return getClass() == Teleporter.class;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MzkxNQ=="}, "originalCommit": {"oid": "7d5f06b7847ea6d30a3b69a47049081db62e250e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzMzNzk4OnYy", "diffSide": "RIGHT", "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMjozMTo1OFrOHa4g_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMjozMTo1OFrOHa4g_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk1MDk3Mw==", "bodyText": "If you put the Deprecated and comment on the next line or the previous line then this patch will just be an addition of one line instead of an addition and removal", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497950973", "createdAt": "2020-10-01T02:31:58Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "diffHunk": "@@ -262,7 +261,24 @@\n           }\n        } else {\n           return null;\n-@@ -2320,9 +2357,10 @@\n+@@ -2123,8 +2160,15 @@\n+       this.field_70128_L = true;\n+    }\n+ \n+-   @Nullable\n++   @Nullable @Deprecated // Use ITeleporter safe version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049c76c7fdc6c2b55d2742c019bd48d9420800b4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzMzODIwOnYy", "diffSide": "RIGHT", "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMjozMjowNlrOHa4hGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMjozMjowNlrOHa4hGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk1MTAwMw==", "bodyText": "Same here", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497951003", "createdAt": "2020-10-01T02:32:06Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -8,7 +8,27 @@\n        boolean flag = this.field_70170_p.func_82736_K().func_223586_b(GameRules.field_223609_l);\n        if (flag) {\n           ITextComponent itextcomponent = this.func_110142_aN().func_151521_b();\n-@@ -614,13 +615,14 @@\n+@@ -602,10 +603,16 @@\n+       return this.field_71133_b.func_71219_W();\n+    }\n+ \n+-   @Nullable\n++   @Nullable @Deprecated // Use ITeleporter safe version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049c76c7fdc6c2b55d2742c019bd48d9420800b4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzM0MTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMjozNDoxNFrOHa4ixg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMjozNDoxNFrOHa4ixg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk1MTQzMA==", "bodyText": "Spacing is screwed up.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497951430", "createdAt": "2020-10-01T02:34:14Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -19,49 +19,89 @@\n \n package net.minecraftforge.common.util;\n \n+import java.util.Optional;\n import java.util.function.Function;\n \n+import net.minecraft.block.PortalInfo;\n import net.minecraft.entity.Entity;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.vector.Vector3d;\n import net.minecraft.world.Teleporter;\n+import net.minecraft.world.World;\n import net.minecraft.world.server.ServerWorld;\n \n /**\n  * Interface for handling the placement of entities during dimension change.\n- *\n+ * <p>\n  * An implementation of this interface can be used to place the entity\n  * in a safe location, or generate a return portal, for instance.\n- *\n+ * <p>\n  * See the {@link net.minecraft.world.Teleporter} class, which has\n  * been patched to implement this interface, for a vanilla example.\n  */\n-public interface ITeleporter {\n-\n+public interface ITeleporter\n+{\n     /**\n      * Called to handle placing the entity in the new world.\n-     *\n+     * <p>\n      * The initial position of the entity will be its\n      * position in the origin world, multiplied horizontally\n      * by the computed cross-dimensional movement factor.\n-     *\n+     * <p>\n      * Note that the supplied entity has not yet been spawned\n      * in the destination world at the time.\n      *\n-     * @param entity           the entity to be placed\n-     * @param currentWorld     the entity's origin\n-     * @param destWorld        the entity's destination\n-     * @param yaw              the suggested yaw value to apply\n+     * @param entity the entity to be placed\n+     * @param currentWorld the entity's origin\n+     * @param destWorld the entity's destination\n+     * @param yaw the suggested yaw value to apply\n      * @param repositionEntity a function to reposition the entity, which returns the new entity in the new dimension. This is the vanilla implementation of the dimension travel logic. If the supplied boolean is true, it is attempted to spawn a new portal.\n+     *\n      * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link PlayerEntity}s! Move the player and update its state, see {@link ServerPlayerEntity#changeDimension(net.minecraft.world.server.ServerWorld, ITeleporter)}\n      */\n-    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n-       return repositionEntity.apply(true);\n+    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity)\n+    {\n+        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    /**\n+     * Is this teleporter the vanilla instance.\n+     */\n     default boolean isVanilla()\n     {\n-        return getClass() == Teleporter.class;\n+        return this.getClass() == Teleporter.class;\n+    }\n+\n+    /**\n+     * Finds a portal to teleport to and creates a {@link TeleportationRepositioner.Result} for it. Defaults to calling vanilla Teleporter methods.\n+     */\n+    default Optional<TeleportationRepositioner.Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity)\n+    {\n+    \tTeleporter teleporter = toWorld.getDefaultTeleporter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049c76c7fdc6c2b55d2742c019bd48d9420800b4"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzM0MTIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMjozNDoxOVrOHa4i2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMjozNDoxOVrOHa4i2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk1MTQ0OQ==", "bodyText": "Spacing is screwed up. Also is this changing the default of ITeleporter to spawning a portal instead of having a custom ITeleporter not have a portal? If so that is a breaking change from the logical standpoint even if not binary", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r497951449", "createdAt": "2020-10-01T02:34:19Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -19,49 +19,89 @@\n \n package net.minecraftforge.common.util;\n \n+import java.util.Optional;\n import java.util.function.Function;\n \n+import net.minecraft.block.PortalInfo;\n import net.minecraft.entity.Entity;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.vector.Vector3d;\n import net.minecraft.world.Teleporter;\n+import net.minecraft.world.World;\n import net.minecraft.world.server.ServerWorld;\n \n /**\n  * Interface for handling the placement of entities during dimension change.\n- *\n+ * <p>\n  * An implementation of this interface can be used to place the entity\n  * in a safe location, or generate a return portal, for instance.\n- *\n+ * <p>\n  * See the {@link net.minecraft.world.Teleporter} class, which has\n  * been patched to implement this interface, for a vanilla example.\n  */\n-public interface ITeleporter {\n-\n+public interface ITeleporter\n+{\n     /**\n      * Called to handle placing the entity in the new world.\n-     *\n+     * <p>\n      * The initial position of the entity will be its\n      * position in the origin world, multiplied horizontally\n      * by the computed cross-dimensional movement factor.\n-     *\n+     * <p>\n      * Note that the supplied entity has not yet been spawned\n      * in the destination world at the time.\n      *\n-     * @param entity           the entity to be placed\n-     * @param currentWorld     the entity's origin\n-     * @param destWorld        the entity's destination\n-     * @param yaw              the suggested yaw value to apply\n+     * @param entity the entity to be placed\n+     * @param currentWorld the entity's origin\n+     * @param destWorld the entity's destination\n+     * @param yaw the suggested yaw value to apply\n      * @param repositionEntity a function to reposition the entity, which returns the new entity in the new dimension. This is the vanilla implementation of the dimension travel logic. If the supplied boolean is true, it is attempted to spawn a new portal.\n+     *\n      * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link PlayerEntity}s! Move the player and update its state, see {@link ServerPlayerEntity#changeDimension(net.minecraft.world.server.ServerWorld, ITeleporter)}\n      */\n-    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n-       return repositionEntity.apply(true);\n+    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity)\n+    {\n+        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    /**\n+     * Is this teleporter the vanilla instance.\n+     */\n     default boolean isVanilla()\n     {\n-        return getClass() == Teleporter.class;\n+        return this.getClass() == Teleporter.class;\n+    }\n+\n+    /**\n+     * Finds a portal to teleport to and creates a {@link TeleportationRepositioner.Result} for it. Defaults to calling vanilla Teleporter methods.\n+     */\n+    default Optional<TeleportationRepositioner.Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity)\n+    {\n+    \tTeleporter teleporter = toWorld.getDefaultTeleporter();\n+        if (this instanceof Teleporter)\n+            teleporter = (Teleporter) this;\n+        return teleporter.func_242957_a(TeleporterHelper.getScaledPos(fromWorld, toWorld, new BlockPos(entity.getPositionVec())), toWorld.func_234923_W_() == World.field_234919_h_);\n+    }\n+\n+    /**\n+     * Creates a portal if one doesn't exist and returns the {@link TeleportationRepositioner.Result Result}. Defaults to calling vanilla Teleporter methods.\n+     */\n+    default Optional<TeleportationRepositioner.Result> createAndGetPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity)\n+    {\n+    \tTeleporter teleporter = toWorld.getDefaultTeleporter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049c76c7fdc6c2b55d2742c019bd48d9420800b4"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTA0NDM1OnYy", "diffSide": "RIGHT", "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMToyMzo1NFrOHeGDEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMDowNzoxOVrOHeJsIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxODQxNg==", "bodyText": "teleporter should probably be annotated as nullable given the line below \"handles\" it being null", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501318416", "createdAt": "2020-10-07T21:23:54Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "diffHunk": "@@ -262,7 +261,23 @@\n           }\n        } else {\n           return null;\n-@@ -2320,9 +2357,10 @@\n+@@ -2124,7 +2161,15 @@\n+    }\n+ \n+    @Nullable\n++   @Deprecated // Forge: Use ITeleporter safe version\n+    protected PortalInfo func_241829_a(ServerWorld p_241829_1_) {\n++      return this.getPortalInfo(p_241829_1_, p_241829_1_.func_85176_s());\n++   }\n++\n++   @Nullable\n++   protected PortalInfo getPortalInfo(ServerWorld p_241829_1_, net.minecraftforge.common.util.ITeleporter teleporter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0NTAyMQ==", "bodyText": "Going to opt to not mark it as nullable since it still technically shouldn't be null and it isn't really \"handled\" properly if it is.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501345021", "createdAt": "2020-10-07T22:26:33Z", "author": {"login": "SilverDavidMC"}, "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "diffHunk": "@@ -262,7 +261,23 @@\n           }\n        } else {\n           return null;\n-@@ -2320,9 +2357,10 @@\n+@@ -2124,7 +2161,15 @@\n+    }\n+ \n+    @Nullable\n++   @Deprecated // Forge: Use ITeleporter safe version\n+    protected PortalInfo func_241829_a(ServerWorld p_241829_1_) {\n++      return this.getPortalInfo(p_241829_1_, p_241829_1_.func_85176_s());\n++   }\n++\n++   @Nullable\n++   protected PortalInfo getPortalInfo(ServerWorld p_241829_1_, net.minecraftforge.common.util.ITeleporter teleporter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxODQxNg=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0Njc4NQ==", "bodyText": "It might be worth removing the != null check then to make it a bit more readable and obvious that it follows the parameters are nonnull by default and that it wasn't just a missed nullable annotation", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501346785", "createdAt": "2020-10-07T22:31:04Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "diffHunk": "@@ -262,7 +261,23 @@\n           }\n        } else {\n           return null;\n-@@ -2320,9 +2357,10 @@\n+@@ -2124,7 +2161,15 @@\n+    }\n+ \n+    @Nullable\n++   @Deprecated // Forge: Use ITeleporter safe version\n+    protected PortalInfo func_241829_a(ServerWorld p_241829_1_) {\n++      return this.getPortalInfo(p_241829_1_, p_241829_1_.func_85176_s());\n++   }\n++\n++   @Nullable\n++   protected PortalInfo getPortalInfo(ServerWorld p_241829_1_, net.minecraftforge.common.util.ITeleporter teleporter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxODQxNg=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM3ODA4MA==", "bodyText": "Yeah that's a valid point. I wasn't sure if I should leave it there or not.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501378080", "createdAt": "2020-10-08T00:07:19Z", "author": {"login": "SilverDavidMC"}, "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "diffHunk": "@@ -262,7 +261,23 @@\n           }\n        } else {\n           return null;\n-@@ -2320,9 +2357,10 @@\n+@@ -2124,7 +2161,15 @@\n+    }\n+ \n+    @Nullable\n++   @Deprecated // Forge: Use ITeleporter safe version\n+    protected PortalInfo func_241829_a(ServerWorld p_241829_1_) {\n++      return this.getPortalInfo(p_241829_1_, p_241829_1_.func_85176_s());\n++   }\n++\n++   @Nullable\n++   protected PortalInfo getPortalInfo(ServerWorld p_241829_1_, net.minecraftforge.common.util.ITeleporter teleporter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxODQxNg=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTA1MDIyOnYy", "diffSide": "RIGHT", "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMToyNTo1M1rOHeGGmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjoyNzozNVrOHeHsVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxOTMyMQ==", "bodyText": "Nullable here as well? Unless it shouldn't be nullable anywhere given it doesn't seem null safe two lines down from here", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501319321", "createdAt": "2020-10-07T21:25:53Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -8,7 +8,26 @@\n        boolean flag = this.field_70170_p.func_82736_K().func_223586_b(GameRules.field_223609_l);\n        if (flag) {\n           ITextComponent itextcomponent = this.func_110142_aN().func_151521_b();\n-@@ -614,13 +615,14 @@\n+@@ -603,9 +604,16 @@\n+    }\n+ \n+    @Nullable\n++   @Deprecated // Forge: Use ITeleporter safe version\n+    protected PortalInfo func_241829_a(ServerWorld p_241829_1_) {\n+-      PortalInfo portalinfo = super.func_241829_a(p_241829_1_);\n+-      if (portalinfo != null && this.field_70170_p.func_234923_W_() == World.field_234918_g_ && p_241829_1_.func_234923_W_() == World.field_234920_i_) {\n++      return this.getPortalInfo(p_241829_1_, p_241829_1_.func_85176_s());\n++   }\n++   \n++   @Nullable\n++   protected PortalInfo getPortalInfo(ServerWorld p_241829_1_, net.minecraftforge.common.util.ITeleporter teleporter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0NTM2NQ==", "bodyText": "Same reason as Entity.java.patch. It technically could be null and I could add extra checks in this case, but teleporter really should never be null in the first place since that would cause many logic issues in game.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501345365", "createdAt": "2020-10-07T22:27:35Z", "author": {"login": "SilverDavidMC"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -8,7 +8,26 @@\n        boolean flag = this.field_70170_p.func_82736_K().func_223586_b(GameRules.field_223609_l);\n        if (flag) {\n           ITextComponent itextcomponent = this.func_110142_aN().func_151521_b();\n-@@ -614,13 +615,14 @@\n+@@ -603,9 +604,16 @@\n+    }\n+ \n+    @Nullable\n++   @Deprecated // Forge: Use ITeleporter safe version\n+    protected PortalInfo func_241829_a(ServerWorld p_241829_1_) {\n+-      PortalInfo portalinfo = super.func_241829_a(p_241829_1_);\n+-      if (portalinfo != null && this.field_70170_p.func_234923_W_() == World.field_234918_g_ && p_241829_1_.func_234923_W_() == World.field_234920_i_) {\n++      return this.getPortalInfo(p_241829_1_, p_241829_1_.func_85176_s());\n++   }\n++   \n++   @Nullable\n++   protected PortalInfo getPortalInfo(ServerWorld p_241829_1_, net.minecraftforge.common.util.ITeleporter teleporter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxOTMyMQ=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTA2MTE4OnYy", "diffSide": "RIGHT", "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMToyOTo0NlrOHeGNWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMToyOTo0NlrOHeGNWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMTA0OQ==", "bodyText": "This can just be PortalInfo portalinfo = this.getPortalInfo(p_241206_1_, teleporter);", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501321049", "createdAt": "2020-10-07T21:29:46Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "diffHunk": "@@ -231,9 +231,8 @@\n           this.func_213319_R();\n           this.field_70170_p.func_217381_Z().func_76320_a(\"reposition\");\n -         PortalInfo portalinfo = this.func_241829_a(p_241206_1_);\n--         if (portalinfo == null) {\n-+         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : null;\n-+         if (portalinfo == null && teleporter.isVanilla()) {\n++         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : this.getPortalInfo(p_241206_1_, teleporter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTA2OTc2OnYy", "diffSide": "RIGHT", "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozMjo0MFrOHeGSfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMDozMDo1OFrOHfqYuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjM2Nw==", "bodyText": "What is the purpose of this teleporter is vanilla check? If a modded teleporter passes false for spawn portal then it won't spawn the end spawn platform anyways.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501322367", "createdAt": "2020-10-07T21:32:40Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "diffHunk": "@@ -245,7 +244,7 @@\n                 entity.func_213317_d(portalinfo.field_222506_b);\n                 p_241206_1_.func_217460_e(entity);\n -               if (p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n-+               if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n++               if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_ && teleporter.isVanilla()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0NzY1NA==", "bodyText": "Not sure actually. Probably got left here by mistake while working on the logic.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501347654", "createdAt": "2020-10-07T22:33:17Z", "author": {"login": "SilverDavidMC"}, "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "diffHunk": "@@ -245,7 +244,7 @@\n                 entity.func_213317_d(portalinfo.field_222506_b);\n                 p_241206_1_.func_217460_e(entity);\n -               if (p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n-+               if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n++               if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_ && teleporter.isVanilla()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjM2Nw=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1MDk2Mw==", "bodyText": "I think it is required for teleporters to be able to control their own teleports to the end, instead of using the vanilla obsidian platform.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r502950963", "createdAt": "2020-10-11T18:41:07Z", "author": {"login": "mrp-v2"}, "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "diffHunk": "@@ -245,7 +244,7 @@\n                 entity.func_213317_d(portalinfo.field_222506_b);\n                 p_241206_1_.func_217460_e(entity);\n -               if (p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n-+               if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n++               if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_ && teleporter.isVanilla()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjM2Nw=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1Mjg4Ng==", "bodyText": "Which is the reason the spawnPortal boolean is already being added to this line, changing it to also require the teleporter being vanilla makes it impossible for mods that may want to use vanilla's obsidian platform.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r502952886", "createdAt": "2020-10-11T19:00:10Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "diffHunk": "@@ -245,7 +244,7 @@\n                 entity.func_213317_d(portalinfo.field_222506_b);\n                 p_241206_1_.func_217460_e(entity);\n -               if (p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n-+               if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n++               if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_ && teleporter.isVanilla()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjM2Nw=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk2MTkzNg==", "bodyText": "so for modded teleporters to make their own portals in the end, they pass false and then make their own portal?", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r502961936", "createdAt": "2020-10-11T20:26:50Z", "author": {"login": "mrp-v2"}, "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "diffHunk": "@@ -245,7 +244,7 @@\n                 entity.func_213317_d(portalinfo.field_222506_b);\n                 p_241206_1_.func_217460_e(entity);\n -               if (p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n-+               if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n++               if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_ && teleporter.isVanilla()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjM2Nw=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk2MjM2MA==", "bodyText": "Yes:\n\nModded teleporter that wants to use vanilla \"portal\": pass true\nModded teleporter that wants to use no portal: pass false\nModded teleporter that wants to use a custom portal: pass false, and make their own\nVanilla teleporter: passes true by default\nThere is no need to have a check to see if it is the vanilla teleporter as all that does is make the first case not possible, and makes the spawnPortal parameter pointless to begin with.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r502962360", "createdAt": "2020-10-11T20:30:58Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/Entity.java.patch", "diffHunk": "@@ -245,7 +244,7 @@\n                 entity.func_213317_d(portalinfo.field_222506_b);\n                 p_241206_1_.func_217460_e(entity);\n -               if (p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n-+               if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n++               if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_ && teleporter.isVanilla()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjM2Nw=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTA3MTM0OnYy", "diffSide": "RIGHT", "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozMzoxMVrOHeGTZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozMzoxMVrOHeGTZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjU5Ng==", "bodyText": "This can just be PortalInfo portalinfo = this.getPortalInfo(p_241206_1_, teleporter);", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501322596", "createdAt": "2020-10-07T21:33:11Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -26,28 +45,28 @@\n           if (!this.field_71136_j) {\n              this.field_71136_j = true;\n              this.field_71135_a.func_147359_a(new SChangeGameStatePacket(SChangeGameStatePacket.field_241768_e_, this.field_192040_cp ? 0.0F : 1.0F));\n-@@ -634,14 +636,15 @@\n+@@ -634,14 +643,15 @@\n           this.field_71135_a.func_147359_a(new SServerDifficultyPacket(iworldinfo.func_176130_y(), iworldinfo.func_176123_z()));\n           PlayerList playerlist = this.field_71133_b.func_184103_al();\n           playerlist.func_187243_f(this);\n -         serverworld.func_217434_e(this);\n -         this.field_70128_L = false;\n -         PortalInfo portalinfo = this.func_241829_a(p_241206_1_);\n--         if (portalinfo != null) {\n +         serverworld.removeEntity(this, true); //Forge: the player entity is moved to the new world, NOT cloned. So keep the data alive with no matching invalidate call.\n +         this.revive();\n-+         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : null;\n-+         if (portalinfo != null || !teleporter.isVanilla()) {\n++         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : this.getPortalInfo(p_241206_1_, teleporter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTA3OTgzOnYy", "diffSide": "RIGHT", "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozNTo0M1rOHeGYSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzo1Njo0MlrOHgQ9Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMzg0OQ==", "bodyText": "I am not sure about this isVanilla check being added, as the enteredNetherPosition is used for checking if a player has travelled to the nether from what I can tell.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501323849", "createdAt": "2020-10-07T21:35:43Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -26,28 +45,28 @@\n           if (!this.field_71136_j) {\n              this.field_71136_j = true;\n              this.field_71135_a.func_147359_a(new SChangeGameStatePacket(SChangeGameStatePacket.field_241768_e_, this.field_192040_cp ? 0.0F : 1.0F));\n-@@ -634,14 +636,15 @@\n+@@ -634,14 +643,15 @@\n           this.field_71135_a.func_147359_a(new SServerDifficultyPacket(iworldinfo.func_176130_y(), iworldinfo.func_176123_z()));\n           PlayerList playerlist = this.field_71133_b.func_184103_al();\n           playerlist.func_187243_f(this);\n -         serverworld.func_217434_e(this);\n -         this.field_70128_L = false;\n -         PortalInfo portalinfo = this.func_241829_a(p_241206_1_);\n--         if (portalinfo != null) {\n +         serverworld.removeEntity(this, true); //Forge: the player entity is moved to the new world, NOT cloned. So keep the data alive with no matching invalidate call.\n +         this.revive();\n-+         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : null;\n-+         if (portalinfo != null || !teleporter.isVanilla()) {\n++         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : this.getPortalInfo(p_241206_1_, teleporter);\n+          if (portalinfo != null) {\n +            Entity e = teleporter.placeEntity(this, serverworld, p_241206_1_, this.field_70177_z, spawnPortal -> {//Forge: Start vanilla logic\n              serverworld.func_217381_Z().func_76320_a(\"moving\");\n-             if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n+-            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n++            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_ && teleporter.isVanilla()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5Mjk2OA==", "bodyText": "My guess is this comment of mine got missed because of how github truncates things, but still should be addressed.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501692968", "createdAt": "2020-10-08T12:48:56Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -26,28 +45,28 @@\n           if (!this.field_71136_j) {\n              this.field_71136_j = true;\n              this.field_71135_a.func_147359_a(new SChangeGameStatePacket(SChangeGameStatePacket.field_241768_e_, this.field_192040_cp ? 0.0F : 1.0F));\n-@@ -634,14 +636,15 @@\n+@@ -634,14 +643,15 @@\n           this.field_71135_a.func_147359_a(new SServerDifficultyPacket(iworldinfo.func_176130_y(), iworldinfo.func_176123_z()));\n           PlayerList playerlist = this.field_71133_b.func_184103_al();\n           playerlist.func_187243_f(this);\n -         serverworld.func_217434_e(this);\n -         this.field_70128_L = false;\n -         PortalInfo portalinfo = this.func_241829_a(p_241206_1_);\n--         if (portalinfo != null) {\n +         serverworld.removeEntity(this, true); //Forge: the player entity is moved to the new world, NOT cloned. So keep the data alive with no matching invalidate call.\n +         this.revive();\n-+         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : null;\n-+         if (portalinfo != null || !teleporter.isVanilla()) {\n++         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : this.getPortalInfo(p_241206_1_, teleporter);\n+          if (portalinfo != null) {\n +            Entity e = teleporter.placeEntity(this, serverworld, p_241206_1_, this.field_70177_z, spawnPortal -> {//Forge: Start vanilla logic\n              serverworld.func_217381_Z().func_76320_a(\"moving\");\n-             if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n+-            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n++            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_ && teleporter.isVanilla()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMzg0OQ=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5NDMzNA==", "bodyText": "Removing this isVanilla check since it's used for advancements and the check can break that", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r503594334", "createdAt": "2020-10-12T23:56:42Z", "author": {"login": "SilverDavidMC"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -26,28 +45,28 @@\n           if (!this.field_71136_j) {\n              this.field_71136_j = true;\n              this.field_71135_a.func_147359_a(new SChangeGameStatePacket(SChangeGameStatePacket.field_241768_e_, this.field_192040_cp ? 0.0F : 1.0F));\n-@@ -634,14 +636,15 @@\n+@@ -634,14 +643,15 @@\n           this.field_71135_a.func_147359_a(new SServerDifficultyPacket(iworldinfo.func_176130_y(), iworldinfo.func_176123_z()));\n           PlayerList playerlist = this.field_71133_b.func_184103_al();\n           playerlist.func_187243_f(this);\n -         serverworld.func_217434_e(this);\n -         this.field_70128_L = false;\n -         PortalInfo portalinfo = this.func_241829_a(p_241206_1_);\n--         if (portalinfo != null) {\n +         serverworld.removeEntity(this, true); //Forge: the player entity is moved to the new world, NOT cloned. So keep the data alive with no matching invalidate call.\n +         this.revive();\n-+         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : null;\n-+         if (portalinfo != null || !teleporter.isVanilla()) {\n++         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : this.getPortalInfo(p_241206_1_, teleporter);\n+          if (portalinfo != null) {\n +            Entity e = teleporter.placeEntity(this, serverworld, p_241206_1_, this.field_70177_z, spawnPortal -> {//Forge: Start vanilla logic\n              serverworld.func_217381_Z().func_76320_a(\"moving\");\n-             if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n+-            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n++            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_ && teleporter.isVanilla()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMzg0OQ=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTA4MTIxOnYy", "diffSide": "RIGHT", "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozNjoxMlrOHeGZFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzo1NzoxNFrOHgQ95g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNDA1NA==", "bodyText": "What is the purpose of this teleporter is vanilla check? If a modded teleporter passes false for spawn portal then it won't spawn the end spawn platform anyways.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501324054", "createdAt": "2020-10-07T21:36:12Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -26,28 +45,28 @@\n           if (!this.field_71136_j) {\n              this.field_71136_j = true;\n              this.field_71135_a.func_147359_a(new SChangeGameStatePacket(SChangeGameStatePacket.field_241768_e_, this.field_192040_cp ? 0.0F : 1.0F));\n-@@ -634,14 +636,15 @@\n+@@ -634,14 +643,15 @@\n           this.field_71135_a.func_147359_a(new SServerDifficultyPacket(iworldinfo.func_176130_y(), iworldinfo.func_176123_z()));\n           PlayerList playerlist = this.field_71133_b.func_184103_al();\n           playerlist.func_187243_f(this);\n -         serverworld.func_217434_e(this);\n -         this.field_70128_L = false;\n -         PortalInfo portalinfo = this.func_241829_a(p_241206_1_);\n--         if (portalinfo != null) {\n +         serverworld.removeEntity(this, true); //Forge: the player entity is moved to the new world, NOT cloned. So keep the data alive with no matching invalidate call.\n +         this.revive();\n-+         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : null;\n-+         if (portalinfo != null || !teleporter.isVanilla()) {\n++         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : this.getPortalInfo(p_241206_1_, teleporter);\n+          if (portalinfo != null) {\n +            Entity e = teleporter.placeEntity(this, serverworld, p_241206_1_, this.field_70177_z, spawnPortal -> {//Forge: Start vanilla logic\n              serverworld.func_217381_Z().func_76320_a(\"moving\");\n-             if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n+-            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n++            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_ && teleporter.isVanilla()) {\n                 this.field_193110_cw = this.func_213303_ch();\n -            } else if (p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n-+            } else if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n++            } else if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_ && teleporter.isVanilla()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5MzA2Ng==", "bodyText": "My guess is this comment of mine got missed because of how github truncates things, but still should be addressed.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501693066", "createdAt": "2020-10-08T12:49:06Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -26,28 +45,28 @@\n           if (!this.field_71136_j) {\n              this.field_71136_j = true;\n              this.field_71135_a.func_147359_a(new SChangeGameStatePacket(SChangeGameStatePacket.field_241768_e_, this.field_192040_cp ? 0.0F : 1.0F));\n-@@ -634,14 +636,15 @@\n+@@ -634,14 +643,15 @@\n           this.field_71135_a.func_147359_a(new SServerDifficultyPacket(iworldinfo.func_176130_y(), iworldinfo.func_176123_z()));\n           PlayerList playerlist = this.field_71133_b.func_184103_al();\n           playerlist.func_187243_f(this);\n -         serverworld.func_217434_e(this);\n -         this.field_70128_L = false;\n -         PortalInfo portalinfo = this.func_241829_a(p_241206_1_);\n--         if (portalinfo != null) {\n +         serverworld.removeEntity(this, true); //Forge: the player entity is moved to the new world, NOT cloned. So keep the data alive with no matching invalidate call.\n +         this.revive();\n-+         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : null;\n-+         if (portalinfo != null || !teleporter.isVanilla()) {\n++         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : this.getPortalInfo(p_241206_1_, teleporter);\n+          if (portalinfo != null) {\n +            Entity e = teleporter.placeEntity(this, serverworld, p_241206_1_, this.field_70177_z, spawnPortal -> {//Forge: Start vanilla logic\n              serverworld.func_217381_Z().func_76320_a(\"moving\");\n-             if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n+-            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n++            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_ && teleporter.isVanilla()) {\n                 this.field_193110_cw = this.func_213303_ch();\n -            } else if (p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n-+            } else if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n++            } else if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_ && teleporter.isVanilla()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNDA1NA=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1MTEzOQ==", "bodyText": "The purpose is if modded teleporters want to spawn their own portal in the end and not the obsidian platform.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r502951139", "createdAt": "2020-10-11T18:43:04Z", "author": {"login": "mrp-v2"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -26,28 +45,28 @@\n           if (!this.field_71136_j) {\n              this.field_71136_j = true;\n              this.field_71135_a.func_147359_a(new SChangeGameStatePacket(SChangeGameStatePacket.field_241768_e_, this.field_192040_cp ? 0.0F : 1.0F));\n-@@ -634,14 +636,15 @@\n+@@ -634,14 +643,15 @@\n           this.field_71135_a.func_147359_a(new SServerDifficultyPacket(iworldinfo.func_176130_y(), iworldinfo.func_176123_z()));\n           PlayerList playerlist = this.field_71133_b.func_184103_al();\n           playerlist.func_187243_f(this);\n -         serverworld.func_217434_e(this);\n -         this.field_70128_L = false;\n -         PortalInfo portalinfo = this.func_241829_a(p_241206_1_);\n--         if (portalinfo != null) {\n +         serverworld.removeEntity(this, true); //Forge: the player entity is moved to the new world, NOT cloned. So keep the data alive with no matching invalidate call.\n +         this.revive();\n-+         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : null;\n-+         if (portalinfo != null || !teleporter.isVanilla()) {\n++         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : this.getPortalInfo(p_241206_1_, teleporter);\n+          if (portalinfo != null) {\n +            Entity e = teleporter.placeEntity(this, serverworld, p_241206_1_, this.field_70177_z, spawnPortal -> {//Forge: Start vanilla logic\n              serverworld.func_217381_Z().func_76320_a(\"moving\");\n-             if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n+-            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n++            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_ && teleporter.isVanilla()) {\n                 this.field_193110_cw = this.func_213303_ch();\n -            } else if (p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n-+            } else if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n++            } else if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_ && teleporter.isVanilla()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNDA1NA=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1Mjk2OA==", "bodyText": "As I said on the other comment, that  is the reason the spawnPortal boolean is already being added to this line, changing it to also require the teleporter being vanilla makes it impossible for mods that may want to use vanilla's obsidian platform.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r502952968", "createdAt": "2020-10-11T19:00:45Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -26,28 +45,28 @@\n           if (!this.field_71136_j) {\n              this.field_71136_j = true;\n              this.field_71135_a.func_147359_a(new SChangeGameStatePacket(SChangeGameStatePacket.field_241768_e_, this.field_192040_cp ? 0.0F : 1.0F));\n-@@ -634,14 +636,15 @@\n+@@ -634,14 +643,15 @@\n           this.field_71135_a.func_147359_a(new SServerDifficultyPacket(iworldinfo.func_176130_y(), iworldinfo.func_176123_z()));\n           PlayerList playerlist = this.field_71133_b.func_184103_al();\n           playerlist.func_187243_f(this);\n -         serverworld.func_217434_e(this);\n -         this.field_70128_L = false;\n -         PortalInfo portalinfo = this.func_241829_a(p_241206_1_);\n--         if (portalinfo != null) {\n +         serverworld.removeEntity(this, true); //Forge: the player entity is moved to the new world, NOT cloned. So keep the data alive with no matching invalidate call.\n +         this.revive();\n-+         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : null;\n-+         if (portalinfo != null || !teleporter.isVanilla()) {\n++         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : this.getPortalInfo(p_241206_1_, teleporter);\n+          if (portalinfo != null) {\n +            Entity e = teleporter.placeEntity(this, serverworld, p_241206_1_, this.field_70177_z, spawnPortal -> {//Forge: Start vanilla logic\n              serverworld.func_217381_Z().func_76320_a(\"moving\");\n-             if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n+-            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n++            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_ && teleporter.isVanilla()) {\n                 this.field_193110_cw = this.func_213303_ch();\n -            } else if (p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n-+            } else if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n++            } else if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_ && teleporter.isVanilla()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNDA1NA=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5NDQ3MA==", "bodyText": "Removing this isVanilla check since you can control it with the spawnPortal boolean", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r503594470", "createdAt": "2020-10-12T23:57:14Z", "author": {"login": "SilverDavidMC"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -26,28 +45,28 @@\n           if (!this.field_71136_j) {\n              this.field_71136_j = true;\n              this.field_71135_a.func_147359_a(new SChangeGameStatePacket(SChangeGameStatePacket.field_241768_e_, this.field_192040_cp ? 0.0F : 1.0F));\n-@@ -634,14 +636,15 @@\n+@@ -634,14 +643,15 @@\n           this.field_71135_a.func_147359_a(new SServerDifficultyPacket(iworldinfo.func_176130_y(), iworldinfo.func_176123_z()));\n           PlayerList playerlist = this.field_71133_b.func_184103_al();\n           playerlist.func_187243_f(this);\n -         serverworld.func_217434_e(this);\n -         this.field_70128_L = false;\n -         PortalInfo portalinfo = this.func_241829_a(p_241206_1_);\n--         if (portalinfo != null) {\n +         serverworld.removeEntity(this, true); //Forge: the player entity is moved to the new world, NOT cloned. So keep the data alive with no matching invalidate call.\n +         this.revive();\n-+         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : null;\n-+         if (portalinfo != null || !teleporter.isVanilla()) {\n++         PortalInfo portalinfo = teleporter.isVanilla() ? this.func_241829_a(p_241206_1_) : this.getPortalInfo(p_241206_1_, teleporter);\n+          if (portalinfo != null) {\n +            Entity e = teleporter.placeEntity(this, serverworld, p_241206_1_, this.field_70177_z, spawnPortal -> {//Forge: Start vanilla logic\n              serverworld.func_217381_Z().func_76320_a(\"moving\");\n-             if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n+-            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_) {\n++            if (registrykey == World.field_234918_g_ && p_241206_1_.func_234923_W_() == World.field_234919_h_ && teleporter.isVanilla()) {\n                 this.field_193110_cw = this.func_213303_ch();\n -            } else if (p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n-+            } else if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_) {\n++            } else if (spawnPortal && p_241206_1_.func_234923_W_() == World.field_234920_i_ && teleporter.isVanilla()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNDA1NA=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTA4NTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozNzoxOFrOHeGbOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozNzoxOFrOHeGbOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNDYwMQ==", "bodyText": "This can just be Optional.of( and I believe you can use entity.func_233580_cy_() instead of new BlockPos(entity.getPositionVec());", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501324601", "createdAt": "2020-10-07T21:37:18Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -19,49 +19,93 @@\n \n package net.minecraftforge.common.util;\n \n+import java.util.Optional;\n import java.util.function.Function;\n \n+import net.minecraft.block.PortalInfo;\n import net.minecraft.entity.Entity;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.vector.Vector3d;\n import net.minecraft.world.Teleporter;\n+import net.minecraft.world.World;\n import net.minecraft.world.server.ServerWorld;\n \n /**\n  * Interface for handling the placement of entities during dimension change.\n- *\n+ * <p>\n  * An implementation of this interface can be used to place the entity\n  * in a safe location, or generate a return portal, for instance.\n- *\n+ * <p>\n  * See the {@link net.minecraft.world.Teleporter} class, which has\n  * been patched to implement this interface, for a vanilla example.\n  */\n-public interface ITeleporter {\n-\n+public interface ITeleporter\n+{\n     /**\n      * Called to handle placing the entity in the new world.\n-     *\n+     * <p>\n      * The initial position of the entity will be its\n      * position in the origin world, multiplied horizontally\n      * by the computed cross-dimensional movement factor.\n-     *\n+     * <p>\n      * Note that the supplied entity has not yet been spawned\n      * in the destination world at the time.\n      *\n-     * @param entity           the entity to be placed\n-     * @param currentWorld     the entity's origin\n-     * @param destWorld        the entity's destination\n-     * @param yaw              the suggested yaw value to apply\n+     * @param entity the entity to be placed\n+     * @param currentWorld the entity's origin\n+     * @param destWorld the entity's destination\n+     * @param yaw the suggested yaw value to apply\n      * @param repositionEntity a function to reposition the entity, which returns the new entity in the new dimension. This is the vanilla implementation of the dimension travel logic. If the supplied boolean is true, it is attempted to spawn a new portal.\n+     *\n      * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link PlayerEntity}s! Move the player and update its state, see {@link ServerPlayerEntity#changeDimension(net.minecraft.world.server.ServerWorld, ITeleporter)}\n      */\n-    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n-       return repositionEntity.apply(true);\n+    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity)\n+    {\n+        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    /**\n+     * Is this teleporter the vanilla instance.\n+     */\n     default boolean isVanilla()\n     {\n-        return getClass() == Teleporter.class;\n+        return this.getClass() == Teleporter.class;\n+    }\n+\n+    /**\n+     * Finds a portal to teleport to and creates a {@link TeleportationRepositioner.Result} for it.\n+     * Calls {@link Teleporter} methods if this is an instance of Teleporter.\n+     * Defaults to the scaled entity's position.\n+     */\n+    default Optional<TeleportationRepositioner.Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity)\n+    {\n+        if (this instanceof Teleporter)\n+            return ((Teleporter) this).func_242957_a(TeleporterHelper.getScaledPos(fromWorld, toWorld, new BlockPos(entity.getPositionVec())), toWorld.func_234923_W_() == World.field_234919_h_);\n+        else\n+            return Optional.ofNullable(new TeleportationRepositioner.Result(TeleporterHelper.getScaledPos(fromWorld, toWorld, new BlockPos(entity.getPositionVec())), 0, 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTA4NTcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozNzoyNFrOHeGbcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozNzoyNFrOHeGbcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNDY1Nw==", "bodyText": "This can just be Optional.of( and I believe you can use entity.func_233580_cy_() instead of new BlockPos(entity.getPositionVec());", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501324657", "createdAt": "2020-10-07T21:37:24Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -19,49 +19,93 @@\n \n package net.minecraftforge.common.util;\n \n+import java.util.Optional;\n import java.util.function.Function;\n \n+import net.minecraft.block.PortalInfo;\n import net.minecraft.entity.Entity;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.vector.Vector3d;\n import net.minecraft.world.Teleporter;\n+import net.minecraft.world.World;\n import net.minecraft.world.server.ServerWorld;\n \n /**\n  * Interface for handling the placement of entities during dimension change.\n- *\n+ * <p>\n  * An implementation of this interface can be used to place the entity\n  * in a safe location, or generate a return portal, for instance.\n- *\n+ * <p>\n  * See the {@link net.minecraft.world.Teleporter} class, which has\n  * been patched to implement this interface, for a vanilla example.\n  */\n-public interface ITeleporter {\n-\n+public interface ITeleporter\n+{\n     /**\n      * Called to handle placing the entity in the new world.\n-     *\n+     * <p>\n      * The initial position of the entity will be its\n      * position in the origin world, multiplied horizontally\n      * by the computed cross-dimensional movement factor.\n-     *\n+     * <p>\n      * Note that the supplied entity has not yet been spawned\n      * in the destination world at the time.\n      *\n-     * @param entity           the entity to be placed\n-     * @param currentWorld     the entity's origin\n-     * @param destWorld        the entity's destination\n-     * @param yaw              the suggested yaw value to apply\n+     * @param entity the entity to be placed\n+     * @param currentWorld the entity's origin\n+     * @param destWorld the entity's destination\n+     * @param yaw the suggested yaw value to apply\n      * @param repositionEntity a function to reposition the entity, which returns the new entity in the new dimension. This is the vanilla implementation of the dimension travel logic. If the supplied boolean is true, it is attempted to spawn a new portal.\n+     *\n      * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link PlayerEntity}s! Move the player and update its state, see {@link ServerPlayerEntity#changeDimension(net.minecraft.world.server.ServerWorld, ITeleporter)}\n      */\n-    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n-       return repositionEntity.apply(true);\n+    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity)\n+    {\n+        return repositionEntity.apply(true);\n     }\n-    \n-    //used internally to handle vanilla hardcoding\n+\n+    /**\n+     * Is this teleporter the vanilla instance.\n+     */\n     default boolean isVanilla()\n     {\n-        return getClass() == Teleporter.class;\n+        return this.getClass() == Teleporter.class;\n+    }\n+\n+    /**\n+     * Finds a portal to teleport to and creates a {@link TeleportationRepositioner.Result} for it.\n+     * Calls {@link Teleporter} methods if this is an instance of Teleporter.\n+     * Defaults to the scaled entity's position.\n+     */\n+    default Optional<TeleportationRepositioner.Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity)\n+    {\n+        if (this instanceof Teleporter)\n+            return ((Teleporter) this).func_242957_a(TeleporterHelper.getScaledPos(fromWorld, toWorld, new BlockPos(entity.getPositionVec())), toWorld.func_234923_W_() == World.field_234919_h_);\n+        else\n+            return Optional.ofNullable(new TeleportationRepositioner.Result(TeleporterHelper.getScaledPos(fromWorld, toWorld, new BlockPos(entity.getPositionVec())), 0, 0));\n+    }\n+\n+    /**\n+     * Creates a portal if one doesn't exist and returns the {@link TeleportationRepositioner.Result Result}.\n+     * Calls {@link Teleporter} methods if this is an instance of Teleporter.\n+     * Defaults to the scaled entity's position.\n+     */\n+    default Optional<TeleportationRepositioner.Result> createAndGetPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity)\n+    {\n+        if (this instanceof Teleporter)\n+            return ((Teleporter) this).func_242956_a(TeleporterHelper.getScaledPos(fromWorld, toWorld, new BlockPos(entity.getPositionVec())), entity.getHorizontalFacing().getAxis());\n+        else\n+            return Optional.ofNullable(new TeleportationRepositioner.Result(TeleporterHelper.getScaledPos(fromWorld, toWorld, new BlockPos(entity.getPositionVec())), 0, 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTExMDQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/server/command/CommandSetDimension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo0NjoxNlrOHeGp-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo0NjoxNlrOHeGp-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyODM3OQ==", "bodyText": "I believe this isn't necessary because the methods are defaulted in ITeleporter and because of not allowing breaking changes the functionality should be how it is currently anyways. Unless you would rather be overriding one/both of these methods to return the result for the correct destination position and remove the setPositionAndUpdate call from the placeEntity method above.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501328379", "createdAt": "2020-10-07T21:46:16Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/server/command/CommandSetDimension.java", "diffHunk": "@@ -75,6 +76,20 @@ public Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld d\n                 repositionedEntity.setPositionAndUpdate(pos.getX(), pos.getY(), pos.getZ());\n                 return repositionedEntity;\n             }\n+\n+            @Override\n+            public Optional<TeleportationRepositioner.Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld,\n+                    Entity entity)\n+            {\n+                return Optional.empty();\n+            }\n+\n+            @Override\n+            public Optional<TeleportationRepositioner.Result> createAndGetPortal(ServerWorld fromWorld,\n+                    ServerWorld toWorld, Entity entity)\n+            {\n+                return Optional.empty();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTExMjU0OnYy", "diffSide": "RIGHT", "path": "src/test/resources/META-INF/mods.toml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo0Njo1NFrOHeGrMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo0Njo1NFrOHeGrMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyODY5MA==", "bodyText": "This needs to be rebased anyways given there is a merge conflict, but also this should use four spaces like the rest of the file instead of using a tab.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501328690", "createdAt": "2020-10-07T21:46:54Z", "author": {"login": "pupnewfster"}, "path": "src/test/resources/META-INF/mods.toml", "diffHunk": "@@ -85,4 +85,6 @@ license=\"LGPL v2.1\"\n [[mods]]\n     modId=\"custom_tag_types_test\"\n [[mods]]\n-    modId=\"biome_loading_event_test\"\n\\ No newline at end of file\n+    modId=\"biome_loading_event_test\"\n+[[mods]]\n+\tmodId=\"teleporter_test\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTE1NjA0OnYy", "diffSide": "RIGHT", "path": "src/test/java/net/minecraftforge/debug/world/TeleporterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjowMjoyNVrOHeHFHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjo0Nzo0NFrOHeIKsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzNTMyNw==", "bodyText": "There is no reason to be using extended lambdas (with the braces) here it can just be poiType -> poiType == this.poi for example. Also instead of using sorted and findFirst() you can just use min where the current sorted call is and remove the findFirst() call", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501335327", "createdAt": "2020-10-07T22:02:25Z", "author": {"login": "pupnewfster"}, "path": "src/test/java/net/minecraftforge/debug/world/TeleporterTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Minecraft Forge\n+ * Copyright (c) 2016-2020.\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.debug.world;\n+\n+import java.util.Comparator;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.block.PortalInfo;\n+import net.minecraft.block.material.Material;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.item.BlockItem;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemGroup;\n+import net.minecraft.util.Direction;\n+import net.minecraft.util.RegistryKey;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.TeleportationRepositioner.Result;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.ChunkPos;\n+import net.minecraft.util.math.vector.Vector3d;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.village.PointOfInterest;\n+import net.minecraft.village.PointOfInterestManager;\n+import net.minecraft.village.PointOfInterestType;\n+import net.minecraft.world.World;\n+import net.minecraft.world.server.ServerWorld;\n+import net.minecraft.world.server.TicketType;\n+import net.minecraftforge.common.util.ITeleporter;\n+import net.minecraftforge.common.util.TeleporterHelper;\n+import net.minecraftforge.event.RegistryEvent;\n+import net.minecraftforge.fml.common.Mod;\n+import net.minecraftforge.fml.common.ObfuscationReflectionHelper;\n+import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;\n+import net.minecraftforge.registries.IForgeRegistry;\n+import net.minecraftforge.registries.IForgeRegistryEntry;\n+\n+// Test mod for ITeleporter changes 9/30/2020\n+@Mod(TeleporterTest.MODID)\n+public class TeleporterTest\n+{\n+    protected static final String MODID = \"teleporter_test\";\n+    private static RegistryKey<World> RED_WORLD = RegistryKey.func_240903_a_(Registry.field_239699_ae_, new ResourceLocation(MODID, \"red_world\"));;\n+    private static RegistryKey<World> BLUE_WORLD = RegistryKey.func_240903_a_(Registry.field_239699_ae_, new ResourceLocation(MODID, \"blue_world\"));\n+    // Triggered by standing on top. Red is scaled the same as the nether while blue is 1 to 1.\n+    private static TeleporterBlock RED_TELEPORTER, BLUE_TELEPORTER;\n+    private static PointOfInterestType RED_POI, BLUE_POI;\n+    \n+    public TeleporterTest()\n+    {\n+        FMLJavaModLoadingContext.get().getModEventBus().addGenericListener(Item.class, this::registerItems);\n+        FMLJavaModLoadingContext.get().getModEventBus().addGenericListener(Block.class, this::registerBlocks);\n+        FMLJavaModLoadingContext.get().getModEventBus().addGenericListener(PointOfInterestType.class, this::registerPOIs);\n+    }\n+    \n+    protected void registerBlocks(final RegistryEvent.Register<Block> event)\n+    {\n+        RED_TELEPORTER = register(event.getRegistry(), \"red_teleporter\", new TeleporterBlock(() -> RED_POI, RED_WORLD));\n+        BLUE_TELEPORTER = register(event.getRegistry(), \"blue_teleporter\", new TeleporterBlock(() -> BLUE_POI, BLUE_WORLD));\n+    }\n+    \n+    protected void registerItems(final RegistryEvent.Register<Item> event)\n+    {\n+        register(event.getRegistry(), \"red_teleporter\", new BlockItem(RED_TELEPORTER, new Item.Properties().group(ItemGroup.TRANSPORTATION)));\n+        register(event.getRegistry(), \"blue_teleporter\", new BlockItem(BLUE_TELEPORTER, new Item.Properties().group(ItemGroup.TRANSPORTATION)));\n+    }\n+    \n+    private <T extends IForgeRegistryEntry<T>, V extends T> V register(IForgeRegistry<T> registry, String name, V obj)\n+    {\n+        obj.setRegistryName(new ResourceLocation(MODID, name));\n+        registry.register(obj);\n+        return obj;\n+    }\n+    \n+    protected void registerPOIs(final RegistryEvent.Register<PointOfInterestType> event)\n+    {\n+        RED_POI = registerPOI(event.getRegistry(), new PointOfInterestType(new ResourceLocation(MODID, \"red_poi\").toString(), PointOfInterestType.getAllStates(RED_TELEPORTER), 0, 1));\n+        BLUE_POI = registerPOI(event.getRegistry(), new PointOfInterestType(new ResourceLocation(MODID, \"blue_poi\").toString(), PointOfInterestType.getAllStates(BLUE_TELEPORTER), 0, 1));\n+    }\n+    \n+    private PointOfInterestType registerPOI(IForgeRegistry<PointOfInterestType> registry, PointOfInterestType poi)\n+    {\n+        poi.setRegistryName(new ResourceLocation(poi.toString()));\n+        registry.register(poi);\n+        try\n+        {\n+            ObfuscationReflectionHelper.findMethod(PointOfInterestType.class, \"func_221052_a\", PointOfInterestType.class).invoke(null, poi);\n+        }\n+        catch (Exception e)\n+        {\n+            e.printStackTrace();\n+        }\n+        return poi;\n+    }\n+    \n+    private static class TeleporterBlock extends Block\n+    {\n+        final Supplier<PointOfInterestType> poi;\n+        final RegistryKey<World> destWorldKey;\n+        \n+        private TeleporterBlock(Supplier<PointOfInterestType> poi, RegistryKey<World> destWorldKey)\n+        {\n+            super(Properties.from(Blocks.STONE));\n+            this.poi = poi;\n+            this.destWorldKey = destWorldKey;\n+        }\n+        \n+        @Override\n+        public void onFallenUpon(World worldIn, BlockPos pos, Entity entityIn, float fallDistance)\n+        {\n+            if (!worldIn.isRemote)\n+                entityIn.changeDimension(((ServerWorld) worldIn).getServer().getWorld(worldIn.func_234923_W_() == this.destWorldKey ? World.field_234918_g_ : this.destWorldKey), new TestTeleporter(this.poi.get(), this));\n+        }\n+    }\n+    \n+    private static class TestTeleporter implements ITeleporter\n+    {\n+        final PointOfInterestType poi;\n+        final Block teleporterBlock;\n+        \n+        private TestTeleporter(PointOfInterestType poi, Block teleporterBlock)\n+        {\n+            this.poi = poi;\n+            this.teleporterBlock = teleporterBlock;\n+        }\n+        \n+        @Override\n+        public Optional<Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity)\n+        {\n+            PointOfInterestManager poiManager = toWorld.getPointOfInterestManager();\n+            int scale = TeleporterHelper.getPortalSearchRadius(fromWorld, toWorld);\n+            BlockPos scaledPos = TeleporterHelper.getScaledPos(fromWorld, toWorld, new BlockPos(entity.getPositionVec()));\n+            poiManager.ensureLoadedAndValid(toWorld, scaledPos, scale);\n+            Optional<PointOfInterest> optional = poiManager.getInSquare((poiType) -> {\n+               return poiType == this.poi;\n+            }, scaledPos, scale, PointOfInterestManager.Status.ANY).sorted(Comparator.<PointOfInterest>comparingDouble((poi) -> {\n+               return poi.getPos().distanceSq(scaledPos);\n+            }).thenComparingInt((poi) -> {\n+               return poi.getPos().getY();\n+            })).findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MzEzOA==", "bodyText": "Didn't realize min was a thing. Nifty!", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501353138", "createdAt": "2020-10-07T22:47:44Z", "author": {"login": "SilverDavidMC"}, "path": "src/test/java/net/minecraftforge/debug/world/TeleporterTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Minecraft Forge\n+ * Copyright (c) 2016-2020.\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.debug.world;\n+\n+import java.util.Comparator;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.block.PortalInfo;\n+import net.minecraft.block.material.Material;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.item.BlockItem;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemGroup;\n+import net.minecraft.util.Direction;\n+import net.minecraft.util.RegistryKey;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.TeleportationRepositioner.Result;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.ChunkPos;\n+import net.minecraft.util.math.vector.Vector3d;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.village.PointOfInterest;\n+import net.minecraft.village.PointOfInterestManager;\n+import net.minecraft.village.PointOfInterestType;\n+import net.minecraft.world.World;\n+import net.minecraft.world.server.ServerWorld;\n+import net.minecraft.world.server.TicketType;\n+import net.minecraftforge.common.util.ITeleporter;\n+import net.minecraftforge.common.util.TeleporterHelper;\n+import net.minecraftforge.event.RegistryEvent;\n+import net.minecraftforge.fml.common.Mod;\n+import net.minecraftforge.fml.common.ObfuscationReflectionHelper;\n+import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;\n+import net.minecraftforge.registries.IForgeRegistry;\n+import net.minecraftforge.registries.IForgeRegistryEntry;\n+\n+// Test mod for ITeleporter changes 9/30/2020\n+@Mod(TeleporterTest.MODID)\n+public class TeleporterTest\n+{\n+    protected static final String MODID = \"teleporter_test\";\n+    private static RegistryKey<World> RED_WORLD = RegistryKey.func_240903_a_(Registry.field_239699_ae_, new ResourceLocation(MODID, \"red_world\"));;\n+    private static RegistryKey<World> BLUE_WORLD = RegistryKey.func_240903_a_(Registry.field_239699_ae_, new ResourceLocation(MODID, \"blue_world\"));\n+    // Triggered by standing on top. Red is scaled the same as the nether while blue is 1 to 1.\n+    private static TeleporterBlock RED_TELEPORTER, BLUE_TELEPORTER;\n+    private static PointOfInterestType RED_POI, BLUE_POI;\n+    \n+    public TeleporterTest()\n+    {\n+        FMLJavaModLoadingContext.get().getModEventBus().addGenericListener(Item.class, this::registerItems);\n+        FMLJavaModLoadingContext.get().getModEventBus().addGenericListener(Block.class, this::registerBlocks);\n+        FMLJavaModLoadingContext.get().getModEventBus().addGenericListener(PointOfInterestType.class, this::registerPOIs);\n+    }\n+    \n+    protected void registerBlocks(final RegistryEvent.Register<Block> event)\n+    {\n+        RED_TELEPORTER = register(event.getRegistry(), \"red_teleporter\", new TeleporterBlock(() -> RED_POI, RED_WORLD));\n+        BLUE_TELEPORTER = register(event.getRegistry(), \"blue_teleporter\", new TeleporterBlock(() -> BLUE_POI, BLUE_WORLD));\n+    }\n+    \n+    protected void registerItems(final RegistryEvent.Register<Item> event)\n+    {\n+        register(event.getRegistry(), \"red_teleporter\", new BlockItem(RED_TELEPORTER, new Item.Properties().group(ItemGroup.TRANSPORTATION)));\n+        register(event.getRegistry(), \"blue_teleporter\", new BlockItem(BLUE_TELEPORTER, new Item.Properties().group(ItemGroup.TRANSPORTATION)));\n+    }\n+    \n+    private <T extends IForgeRegistryEntry<T>, V extends T> V register(IForgeRegistry<T> registry, String name, V obj)\n+    {\n+        obj.setRegistryName(new ResourceLocation(MODID, name));\n+        registry.register(obj);\n+        return obj;\n+    }\n+    \n+    protected void registerPOIs(final RegistryEvent.Register<PointOfInterestType> event)\n+    {\n+        RED_POI = registerPOI(event.getRegistry(), new PointOfInterestType(new ResourceLocation(MODID, \"red_poi\").toString(), PointOfInterestType.getAllStates(RED_TELEPORTER), 0, 1));\n+        BLUE_POI = registerPOI(event.getRegistry(), new PointOfInterestType(new ResourceLocation(MODID, \"blue_poi\").toString(), PointOfInterestType.getAllStates(BLUE_TELEPORTER), 0, 1));\n+    }\n+    \n+    private PointOfInterestType registerPOI(IForgeRegistry<PointOfInterestType> registry, PointOfInterestType poi)\n+    {\n+        poi.setRegistryName(new ResourceLocation(poi.toString()));\n+        registry.register(poi);\n+        try\n+        {\n+            ObfuscationReflectionHelper.findMethod(PointOfInterestType.class, \"func_221052_a\", PointOfInterestType.class).invoke(null, poi);\n+        }\n+        catch (Exception e)\n+        {\n+            e.printStackTrace();\n+        }\n+        return poi;\n+    }\n+    \n+    private static class TeleporterBlock extends Block\n+    {\n+        final Supplier<PointOfInterestType> poi;\n+        final RegistryKey<World> destWorldKey;\n+        \n+        private TeleporterBlock(Supplier<PointOfInterestType> poi, RegistryKey<World> destWorldKey)\n+        {\n+            super(Properties.from(Blocks.STONE));\n+            this.poi = poi;\n+            this.destWorldKey = destWorldKey;\n+        }\n+        \n+        @Override\n+        public void onFallenUpon(World worldIn, BlockPos pos, Entity entityIn, float fallDistance)\n+        {\n+            if (!worldIn.isRemote)\n+                entityIn.changeDimension(((ServerWorld) worldIn).getServer().getWorld(worldIn.func_234923_W_() == this.destWorldKey ? World.field_234918_g_ : this.destWorldKey), new TestTeleporter(this.poi.get(), this));\n+        }\n+    }\n+    \n+    private static class TestTeleporter implements ITeleporter\n+    {\n+        final PointOfInterestType poi;\n+        final Block teleporterBlock;\n+        \n+        private TestTeleporter(PointOfInterestType poi, Block teleporterBlock)\n+        {\n+            this.poi = poi;\n+            this.teleporterBlock = teleporterBlock;\n+        }\n+        \n+        @Override\n+        public Optional<Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity)\n+        {\n+            PointOfInterestManager poiManager = toWorld.getPointOfInterestManager();\n+            int scale = TeleporterHelper.getPortalSearchRadius(fromWorld, toWorld);\n+            BlockPos scaledPos = TeleporterHelper.getScaledPos(fromWorld, toWorld, new BlockPos(entity.getPositionVec()));\n+            poiManager.ensureLoadedAndValid(toWorld, scaledPos, scale);\n+            Optional<PointOfInterest> optional = poiManager.getInSquare((poiType) -> {\n+               return poiType == this.poi;\n+            }, scaledPos, scale, PointOfInterestManager.Status.ANY).sorted(Comparator.<PointOfInterest>comparingDouble((poi) -> {\n+               return poi.getPos().distanceSq(scaledPos);\n+            }).thenComparingInt((poi) -> {\n+               return poi.getPos().getY();\n+            })).findFirst();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzNTMyNw=="}, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTE1NzkyOnYy", "diffSide": "RIGHT", "path": "src/test/java/net/minecraftforge/debug/world/TeleporterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjowMzoxMFrOHeHGSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjowMzoxMFrOHeHGSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzNTYyNQ==", "bodyText": "No need for the extended lambda here either", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501335625", "createdAt": "2020-10-07T22:03:10Z", "author": {"login": "pupnewfster"}, "path": "src/test/java/net/minecraftforge/debug/world/TeleporterTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Minecraft Forge\n+ * Copyright (c) 2016-2020.\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.debug.world;\n+\n+import java.util.Comparator;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.block.PortalInfo;\n+import net.minecraft.block.material.Material;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.item.BlockItem;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemGroup;\n+import net.minecraft.util.Direction;\n+import net.minecraft.util.RegistryKey;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.TeleportationRepositioner;\n+import net.minecraft.util.TeleportationRepositioner.Result;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.ChunkPos;\n+import net.minecraft.util.math.vector.Vector3d;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.village.PointOfInterest;\n+import net.minecraft.village.PointOfInterestManager;\n+import net.minecraft.village.PointOfInterestType;\n+import net.minecraft.world.World;\n+import net.minecraft.world.server.ServerWorld;\n+import net.minecraft.world.server.TicketType;\n+import net.minecraftforge.common.util.ITeleporter;\n+import net.minecraftforge.common.util.TeleporterHelper;\n+import net.minecraftforge.event.RegistryEvent;\n+import net.minecraftforge.fml.common.Mod;\n+import net.minecraftforge.fml.common.ObfuscationReflectionHelper;\n+import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;\n+import net.minecraftforge.registries.IForgeRegistry;\n+import net.minecraftforge.registries.IForgeRegistryEntry;\n+\n+// Test mod for ITeleporter changes 9/30/2020\n+@Mod(TeleporterTest.MODID)\n+public class TeleporterTest\n+{\n+    protected static final String MODID = \"teleporter_test\";\n+    private static RegistryKey<World> RED_WORLD = RegistryKey.func_240903_a_(Registry.field_239699_ae_, new ResourceLocation(MODID, \"red_world\"));;\n+    private static RegistryKey<World> BLUE_WORLD = RegistryKey.func_240903_a_(Registry.field_239699_ae_, new ResourceLocation(MODID, \"blue_world\"));\n+    // Triggered by standing on top. Red is scaled the same as the nether while blue is 1 to 1.\n+    private static TeleporterBlock RED_TELEPORTER, BLUE_TELEPORTER;\n+    private static PointOfInterestType RED_POI, BLUE_POI;\n+    \n+    public TeleporterTest()\n+    {\n+        FMLJavaModLoadingContext.get().getModEventBus().addGenericListener(Item.class, this::registerItems);\n+        FMLJavaModLoadingContext.get().getModEventBus().addGenericListener(Block.class, this::registerBlocks);\n+        FMLJavaModLoadingContext.get().getModEventBus().addGenericListener(PointOfInterestType.class, this::registerPOIs);\n+    }\n+    \n+    protected void registerBlocks(final RegistryEvent.Register<Block> event)\n+    {\n+        RED_TELEPORTER = register(event.getRegistry(), \"red_teleporter\", new TeleporterBlock(() -> RED_POI, RED_WORLD));\n+        BLUE_TELEPORTER = register(event.getRegistry(), \"blue_teleporter\", new TeleporterBlock(() -> BLUE_POI, BLUE_WORLD));\n+    }\n+    \n+    protected void registerItems(final RegistryEvent.Register<Item> event)\n+    {\n+        register(event.getRegistry(), \"red_teleporter\", new BlockItem(RED_TELEPORTER, new Item.Properties().group(ItemGroup.TRANSPORTATION)));\n+        register(event.getRegistry(), \"blue_teleporter\", new BlockItem(BLUE_TELEPORTER, new Item.Properties().group(ItemGroup.TRANSPORTATION)));\n+    }\n+    \n+    private <T extends IForgeRegistryEntry<T>, V extends T> V register(IForgeRegistry<T> registry, String name, V obj)\n+    {\n+        obj.setRegistryName(new ResourceLocation(MODID, name));\n+        registry.register(obj);\n+        return obj;\n+    }\n+    \n+    protected void registerPOIs(final RegistryEvent.Register<PointOfInterestType> event)\n+    {\n+        RED_POI = registerPOI(event.getRegistry(), new PointOfInterestType(new ResourceLocation(MODID, \"red_poi\").toString(), PointOfInterestType.getAllStates(RED_TELEPORTER), 0, 1));\n+        BLUE_POI = registerPOI(event.getRegistry(), new PointOfInterestType(new ResourceLocation(MODID, \"blue_poi\").toString(), PointOfInterestType.getAllStates(BLUE_TELEPORTER), 0, 1));\n+    }\n+    \n+    private PointOfInterestType registerPOI(IForgeRegistry<PointOfInterestType> registry, PointOfInterestType poi)\n+    {\n+        poi.setRegistryName(new ResourceLocation(poi.toString()));\n+        registry.register(poi);\n+        try\n+        {\n+            ObfuscationReflectionHelper.findMethod(PointOfInterestType.class, \"func_221052_a\", PointOfInterestType.class).invoke(null, poi);\n+        }\n+        catch (Exception e)\n+        {\n+            e.printStackTrace();\n+        }\n+        return poi;\n+    }\n+    \n+    private static class TeleporterBlock extends Block\n+    {\n+        final Supplier<PointOfInterestType> poi;\n+        final RegistryKey<World> destWorldKey;\n+        \n+        private TeleporterBlock(Supplier<PointOfInterestType> poi, RegistryKey<World> destWorldKey)\n+        {\n+            super(Properties.from(Blocks.STONE));\n+            this.poi = poi;\n+            this.destWorldKey = destWorldKey;\n+        }\n+        \n+        @Override\n+        public void onFallenUpon(World worldIn, BlockPos pos, Entity entityIn, float fallDistance)\n+        {\n+            if (!worldIn.isRemote)\n+                entityIn.changeDimension(((ServerWorld) worldIn).getServer().getWorld(worldIn.func_234923_W_() == this.destWorldKey ? World.field_234918_g_ : this.destWorldKey), new TestTeleporter(this.poi.get(), this));\n+        }\n+    }\n+    \n+    private static class TestTeleporter implements ITeleporter\n+    {\n+        final PointOfInterestType poi;\n+        final Block teleporterBlock;\n+        \n+        private TestTeleporter(PointOfInterestType poi, Block teleporterBlock)\n+        {\n+            this.poi = poi;\n+            this.teleporterBlock = teleporterBlock;\n+        }\n+        \n+        @Override\n+        public Optional<Result> findPortal(ServerWorld fromWorld, ServerWorld toWorld, Entity entity)\n+        {\n+            PointOfInterestManager poiManager = toWorld.getPointOfInterestManager();\n+            int scale = TeleporterHelper.getPortalSearchRadius(fromWorld, toWorld);\n+            BlockPos scaledPos = TeleporterHelper.getScaledPos(fromWorld, toWorld, new BlockPos(entity.getPositionVec()));\n+            poiManager.ensureLoadedAndValid(toWorld, scaledPos, scale);\n+            Optional<PointOfInterest> optional = poiManager.getInSquare((poiType) -> {\n+               return poiType == this.poi;\n+            }, scaledPos, scale, PointOfInterestManager.Status.ANY).sorted(Comparator.<PointOfInterest>comparingDouble((poi) -> {\n+               return poi.getPos().distanceSq(scaledPos);\n+            }).thenComparingInt((poi) -> {\n+               return poi.getPos().getY();\n+            })).findFirst();\n+            \n+            return optional.map((poi) -> {\n+               BlockPos poiPos = poi.getPos();\n+               toWorld.getChunkProvider().registerTicket(TicketType.PORTAL, new ChunkPos(poiPos), 3, poiPos);\n+               BlockState blockstate = toWorld.getBlockState(poiPos);\n+               return TeleportationRepositioner.func_243676_a(poiPos, entity.getHorizontalFacing().getAxis(), 21, Direction.Axis.Y, 21, (pos) -> {\n+                  return toWorld.getBlockState(pos) == blockstate;\n+               });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44e54e0f6d7a68312e1b3faf0f49e9d106c2338"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTYwNTk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/server/command/CommandSetDimension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMTo0MjoxMVrOHeLI6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMTo0MjoxMVrOHeLI6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQwMTgzMg==", "bodyText": "These import changes aren't needed", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r501401832", "createdAt": "2020-10-08T01:42:11Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/server/command/CommandSetDimension.java", "diffHunk": "@@ -25,17 +25,18 @@\n import net.minecraft.command.arguments.DimensionArgument;\n import net.minecraft.command.arguments.EntityArgument;\n import net.minecraft.entity.Entity;\n+import net.minecraft.util.TeleportationRepositioner;\n import net.minecraft.util.math.BlockPos;\n import net.minecraft.util.text.TranslationTextComponent;\n import net.minecraft.world.server.ServerWorld;\n import net.minecraftforge.common.util.ITeleporter;\n-\n import com.mojang.brigadier.builder.ArgumentBuilder;\n import com.mojang.brigadier.exceptions.CommandSyntaxException;\n import com.mojang.brigadier.exceptions.DynamicCommandExceptionType;\n import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;\n \n import java.util.Collection;\n+import java.util.Optional;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72bfb818838ab38ae1d66e5f4c31f254e057b4c0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODk5MjA0OnYy", "diffSide": "RIGHT", "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMzoxOTozNlrOHiewcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTozNjoyMFrOHih65g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkxNzU1Mg==", "bodyText": "Probably don't need the comment here anymore, since you are no longer changing code on this line", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r505917552", "createdAt": "2020-10-15T23:19:36Z", "author": {"login": "KnightMiner"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -19,7 +19,7 @@\n        ServerWorld serverworld = this.func_71121_q();\n        RegistryKey<World> registrykey = serverworld.func_234923_W_();\n -      if (registrykey == World.field_234920_i_ && p_241206_1_.func_234923_W_() == World.field_234918_g_) {\n-+      if (registrykey == World.field_234920_i_ && p_241206_1_.func_234923_W_() == World.field_234918_g_ && teleporter.isVanilla()) { //Forge: Fix non-vanilla teleporters triggering end credits\n++      if (registrykey == World.field_234920_i_ && p_241206_1_.func_234923_W_() == World.field_234918_g_) { //Forge: Fix non-vanilla teleporters triggering end credits", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cd8bd14fb5074a21c90e4cc47ad2b06af122535"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkxODk1MQ==", "bodyText": "Yeah just saw that. Still going through things", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r505918951", "createdAt": "2020-10-15T23:24:01Z", "author": {"login": "SilverDavidMC"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -19,7 +19,7 @@\n        ServerWorld serverworld = this.func_71121_q();\n        RegistryKey<World> registrykey = serverworld.func_234923_W_();\n -      if (registrykey == World.field_234920_i_ && p_241206_1_.func_234923_W_() == World.field_234918_g_) {\n-+      if (registrykey == World.field_234920_i_ && p_241206_1_.func_234923_W_() == World.field_234918_g_ && teleporter.isVanilla()) { //Forge: Fix non-vanilla teleporters triggering end credits\n++      if (registrykey == World.field_234920_i_ && p_241206_1_.func_234923_W_() == World.field_234918_g_) { //Forge: Fix non-vanilla teleporters triggering end credits", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkxNzU1Mg=="}, "originalCommit": {"oid": "4cd8bd14fb5074a21c90e4cc47ad2b06af122535"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyMDIwMA==", "bodyText": "Are you sure this line doesn't need to be modified still? Try using forge setdimension to go from the end to the overworld. That is why I initially had to make a PR to add the isVanilla check to this line (Though I believe it might have been an inlined class check back then)", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r505920200", "createdAt": "2020-10-15T23:28:02Z", "author": {"login": "pupnewfster"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -19,7 +19,7 @@\n        ServerWorld serverworld = this.func_71121_q();\n        RegistryKey<World> registrykey = serverworld.func_234923_W_();\n -      if (registrykey == World.field_234920_i_ && p_241206_1_.func_234923_W_() == World.field_234918_g_) {\n-+      if (registrykey == World.field_234920_i_ && p_241206_1_.func_234923_W_() == World.field_234918_g_ && teleporter.isVanilla()) { //Forge: Fix non-vanilla teleporters triggering end credits\n++      if (registrykey == World.field_234920_i_ && p_241206_1_.func_234923_W_() == World.field_234918_g_) { //Forge: Fix non-vanilla teleporters triggering end credits", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkxNzU1Mg=="}, "originalCommit": {"oid": "4cd8bd14fb5074a21c90e4cc47ad2b06af122535"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2OTM4Mg==", "bodyText": "Keeping the isVanilla check here so that it doesn't show end credits", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r505969382", "createdAt": "2020-10-16T01:36:20Z", "author": {"login": "SilverDavidMC"}, "path": "patches/minecraft/net/minecraft/entity/player/ServerPlayerEntity.java.patch", "diffHunk": "@@ -19,7 +19,7 @@\n        ServerWorld serverworld = this.func_71121_q();\n        RegistryKey<World> registrykey = serverworld.func_234923_W_();\n -      if (registrykey == World.field_234920_i_ && p_241206_1_.func_234923_W_() == World.field_234918_g_) {\n-+      if (registrykey == World.field_234920_i_ && p_241206_1_.func_234923_W_() == World.field_234918_g_ && teleporter.isVanilla()) { //Forge: Fix non-vanilla teleporters triggering end credits\n++      if (registrykey == World.field_234920_i_ && p_241206_1_.func_234923_W_() == World.field_234918_g_) { //Forge: Fix non-vanilla teleporters triggering end credits", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkxNzU1Mg=="}, "originalCommit": {"oid": "4cd8bd14fb5074a21c90e4cc47ad2b06af122535"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTAyMTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/util/TeleporterHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMzozMzoyOFrOHifBYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMToyMjo0NFrOHihcxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyMTg5MQ==", "bodyText": "There is no reason for this stuff to exist anymore, at least not as public forge API, just put the methods in your test mod if they are still needed by it.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r505921891", "createdAt": "2020-10-15T23:33:28Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/common/util/TeleporterHelper.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package net.minecraftforge.common.util;\n+\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.MathHelper;\n+import net.minecraft.world.DimensionType;\n+import net.minecraft.world.World;\n+import net.minecraft.world.border.WorldBorder;\n+\n+public class TeleporterHelper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7204532f9d7d5d14060ea6824cab8f740b2734e6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2MDMyMA==", "bodyText": "Fair enough. I wasn't sure if I should've kept it or not", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r505960320", "createdAt": "2020-10-16T01:20:08Z", "author": {"login": "SilverDavidMC"}, "path": "src/main/java/net/minecraftforge/common/util/TeleporterHelper.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package net.minecraftforge.common.util;\n+\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.MathHelper;\n+import net.minecraft.world.DimensionType;\n+import net.minecraft.world.World;\n+import net.minecraft.world.border.WorldBorder;\n+\n+public class TeleporterHelper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyMTg5MQ=="}, "originalCommit": {"oid": "7204532f9d7d5d14060ea6824cab8f740b2734e6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2MTY2OA==", "bodyText": "Ya remove it, it serves no purpose", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r505961668", "createdAt": "2020-10-16T01:22:44Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/common/util/TeleporterHelper.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package net.minecraftforge.common.util;\n+\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.MathHelper;\n+import net.minecraft.world.DimensionType;\n+import net.minecraft.world.World;\n+import net.minecraft.world.border.WorldBorder;\n+\n+public class TeleporterHelper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyMTg5MQ=="}, "originalCommit": {"oid": "7204532f9d7d5d14060ea6824cab8f740b2734e6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTMzODY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/server/command/CommandSetDimension.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTo0NToxNlrOHiiJaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTo1NzoxOFrOHiigYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk3MzA5Ng==", "bodyText": "I am guessing this is required to make it work properly and otherwise it just doesn't teleport (instead of how it currently just silently null pointers)?", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r505973096", "createdAt": "2020-10-16T01:45:16Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/server/command/CommandSetDimension.java", "diffHunk": "@@ -75,6 +73,12 @@ public Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld d\n                 repositionedEntity.setPositionAndUpdate(pos.getX(), pos.getY(), pos.getZ());\n                 return repositionedEntity;\n             }\n+            \n+            @Override\n+            public PortalInfo getPortalInfo(Entity entity, ServerWorld destWorld, Function<ServerWorld, PortalInfo> defaultPortalInfo)\n+            {\n+                return new PortalInfo(entity.getPositionVec(), Vector3d.ZERO, entity.rotationYaw, entity.rotationPitch);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "313965a02a428e5de2e6db932be75eb1a762dada"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk3NzM1Ng==", "bodyText": "It doesn't throw a crash, but the game will lock up since the vanilla method would be used here by default. I'm not exactly sure where it locks up, but it does, so I needed to add this. If your teleporter was doing everything in the ITeleporter.placeEntity method, it could get around this, but that's a rather unwieldy way of doing things.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r505977356", "createdAt": "2020-10-16T01:54:16Z", "author": {"login": "SilverDavidMC"}, "path": "src/main/java/net/minecraftforge/server/command/CommandSetDimension.java", "diffHunk": "@@ -75,6 +73,12 @@ public Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld d\n                 repositionedEntity.setPositionAndUpdate(pos.getX(), pos.getY(), pos.getZ());\n                 return repositionedEntity;\n             }\n+            \n+            @Override\n+            public PortalInfo getPortalInfo(Entity entity, ServerWorld destWorld, Function<ServerWorld, PortalInfo> defaultPortalInfo)\n+            {\n+                return new PortalInfo(entity.getPositionVec(), Vector3d.ZERO, entity.rotationYaw, entity.rotationPitch);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk3MzA5Ng=="}, "originalCommit": {"oid": "313965a02a428e5de2e6db932be75eb1a762dada"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk3ODk3Nw==", "bodyText": "I figured this was the case I just wanted to confirm there wasn't being added due to some breaking change being introduced.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r505978977", "createdAt": "2020-10-16T01:57:18Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/server/command/CommandSetDimension.java", "diffHunk": "@@ -75,6 +73,12 @@ public Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld d\n                 repositionedEntity.setPositionAndUpdate(pos.getX(), pos.getY(), pos.getZ());\n                 return repositionedEntity;\n             }\n+            \n+            @Override\n+            public PortalInfo getPortalInfo(Entity entity, ServerWorld destWorld, Function<ServerWorld, PortalInfo> defaultPortalInfo)\n+            {\n+                return new PortalInfo(entity.getPositionVec(), Vector3d.ZERO, entity.rotationYaw, entity.rotationPitch);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk3MzA5Ng=="}, "originalCommit": {"oid": "313965a02a428e5de2e6db932be75eb1a762dada"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzQ1ODE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODo0MDowN1rOHjL9iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODo0MDowN1rOHjL9iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1ODE4NA==", "bodyText": "Discussed this with lex some and this should instead return:\nreturn isVanilla() ? defaultPortalInfo.apply(destWorld) : new PortalInfo(entity.getPositionVec(), Vector3d.ZERO, entity.rotationYaw, entity.rotationPitch);\nso that current mods implementing ITeleporter using work arounds continue to work and don't get broken by this change.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r506658184", "createdAt": "2020-10-16T18:40:07Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/common/util/ITeleporter.java", "diffHunk": "@@ -29,39 +32,62 @@\n \n /**\n  * Interface for handling the placement of entities during dimension change.\n- *\n+ * <p>\n  * An implementation of this interface can be used to place the entity\n  * in a safe location, or generate a return portal, for instance.\n- *\n+ * <p>\n  * See the {@link net.minecraft.world.Teleporter} class, which has\n  * been patched to implement this interface, for a vanilla example.\n  */\n-public interface ITeleporter {\n-\n+public interface ITeleporter\n+{\n     /**\n      * Called to handle placing the entity in the new world.\n-     *\n+     * <p>\n      * The initial position of the entity will be its\n      * position in the origin world, multiplied horizontally\n      * by the computed cross-dimensional movement factor.\n-     *\n+     * <p>\n      * Note that the supplied entity has not yet been spawned\n      * in the destination world at the time.\n      *\n-     * @param entity           the entity to be placed\n-     * @param currentWorld     the entity's origin\n-     * @param destWorld        the entity's destination\n-     * @param yaw              the suggested yaw value to apply\n+     * @param entity the entity to be placed\n+     * @param currentWorld the entity's origin\n+     * @param destWorld the entity's destination\n+     * @param yaw the suggested yaw value to apply\n      * @param repositionEntity a function to reposition the entity, which returns the new entity in the new dimension. This is the vanilla implementation of the dimension travel logic. If the supplied boolean is true, it is attempted to spawn a new portal.\n+     *\n      * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link PlayerEntity}s! Move the player and update its state, see {@link ServerPlayerEntity#changeDimension(net.minecraft.world.server.ServerWorld, ITeleporter)}\n      */\n-    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity) {\n-       return repositionEntity.apply(true);\n+    default Entity placeEntity(Entity entity, ServerWorld currentWorld, ServerWorld destWorld, float yaw, Function<Boolean, Entity> repositionEntity)\n+    {\n+        return repositionEntity.apply(true);\n+    }\n+\n+    /**\n+     * Gets the PortalInfo. defaultPortalInfo references the \n+     * vanilla code and should not be used for your purposes. \n+     * Override this method to handle your own logic. \n+     * <p>\n+     * Return {@code null} to prevent teleporting.\n+     * \n+     * @param entity The entity teleporting before the teleport\n+     * @param destWorld The world the entity is teleporting to\n+     * @param defaultPortalInfo A reference to the vanilla method for getting portal info. You should implement your own logic instead of using this\n+     * \n+     * @return The location, rotation, and motion of the entity in the destWorld after the teleport\n+     */\n+    @Nullable\n+    default PortalInfo getPortalInfo(Entity entity, ServerWorld destWorld, Function<ServerWorld, PortalInfo> defaultPortalInfo)\n+    {\n+        return defaultPortalInfo.apply(destWorld);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "313965a02a428e5de2e6db932be75eb1a762dada"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzQ2MjIxOnYy", "diffSide": "LEFT", "path": "src/main/java/net/minecraftforge/server/command/CommandSetDimension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODo0MToyM1rOHjL_7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODo0MToyM1rOHjL_7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1ODc5Nw==", "bodyText": "Don't remove this, it is here to remember to reimplement it at some point. (Also with the requested change to the default implementation of getPortalInfo you should be able to revert all changes being made to this class.)", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7317#discussion_r506658797", "createdAt": "2020-10-16T18:41:23Z", "author": {"login": "pupnewfster"}, "path": "src/main/java/net/minecraftforge/server/command/CommandSetDimension.java", "diffHunk": "@@ -41,7 +42,7 @@\n public class CommandSetDimension\n {\n     private static final SimpleCommandExceptionType NO_ENTITIES = new SimpleCommandExceptionType(new TranslationTextComponent(\"commands.forge.setdim.invalid.entity\"));\n-    private static final DynamicCommandExceptionType INVALID_DIMENSION = new DynamicCommandExceptionType(dim -> new TranslationTextComponent(\"commands.forge.setdim.invalid.dim\", dim));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "313965a02a428e5de2e6db932be75eb1a762dada"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 805, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}