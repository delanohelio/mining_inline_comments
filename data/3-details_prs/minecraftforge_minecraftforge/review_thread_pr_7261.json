{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMTU1ODk4", "number": 7261, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTozMjozN1rOEbA1vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDo0MjozM1rOEhaH7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzYwNzY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTozMjozN1rOHEx2KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjozMjowOFrOHEzv_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MzAzMw==", "bodyText": "Why pass all these additional paramteres in when they can be (and are in fact) accessed from LivingEntity?", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r474773033", "createdAt": "2020-08-21T15:32:37Z", "author": {"login": "ichttt"}, "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "diffHunk": "@@ -911,4 +911,18 @@ default BlockState getToolModifiedState(BlockState state, World world, BlockPos\n         else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n         else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n+    \n+    /**\n+     * Checks if a player or entity handles movement on this block like scaffolding.\n+     *\n+     * @param state The current state\n+     * @param world The current world\n+     * @param pos The block position in world\n+     * @param entity The entity on the scaffolding\n+     * @return True if the block should act like scaffolding\n+     */\n+    default boolean isScaffolding(BlockState state, IWorldReader world, BlockPos pos, LivingEntity entity)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c900752ff78ac6b8b6ebe1430e414a5abb6994d7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNDIyMA==", "bodyText": "I did this mainly to mimic IForgeBlock::isLadder. It's implementation is pretty much similar where everything could be passed in through the LivingEntity. I figured since the idea is to mimic the ladder usage with scaffolding (as the ladder method determines if the thing is climable), it would be reasonable to keep the same parameters. Of course, if this is a bad judgement, I shall adjust.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r474804220", "createdAt": "2020-08-21T16:32:08Z", "author": {"login": "ChampionAsh5357"}, "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "diffHunk": "@@ -911,4 +911,18 @@ default BlockState getToolModifiedState(BlockState state, World world, BlockPos\n         else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n         else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n+    \n+    /**\n+     * Checks if a player or entity handles movement on this block like scaffolding.\n+     *\n+     * @param state The current state\n+     * @param world The current world\n+     * @param pos The block position in world\n+     * @param entity The entity on the scaffolding\n+     * @return True if the block should act like scaffolding\n+     */\n+    default boolean isScaffolding(BlockState state, IWorldReader world, BlockPos pos, LivingEntity entity)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MzAzMw=="}, "originalCommit": {"oid": "c900752ff78ac6b8b6ebe1430e414a5abb6994d7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkzMTI4OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxMzowOVrOHE09nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxOToyOVrOHE1Jwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDA5Mg==", "bodyText": "Indent is wonky", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r474824092", "createdAt": "2020-08-21T17:13:09Z", "author": {"login": "covers1624"}, "path": "build.gradle", "diffHunk": "@@ -364,6 +364,7 @@ project(':forge') {\n                 args '--flat', '--all', '--validate',\n                     '--mod', 'data_gen_test', \n                     '--mod', 'piston_event_test', \n+\t\t\t\t\t'--mod', 'scaffolding_test', ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7d03f7de464245d418189c37b756c5b74f8e8b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNzIwMg==", "bodyText": "Accidentally tabbed instead of spaced, fixed now.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r474827202", "createdAt": "2020-08-21T17:19:29Z", "author": {"login": "ChampionAsh5357"}, "path": "build.gradle", "diffHunk": "@@ -364,6 +364,7 @@ project(':forge') {\n                 args '--flat', '--all', '--validate',\n                     '--mod', 'data_gen_test', \n                     '--mod', 'piston_event_test', \n+\t\t\t\t\t'--mod', 'scaffolding_test', ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDA5Mg=="}, "originalCommit": {"oid": "bb7d03f7de464245d418189c37b756c5b74f8e8b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQ2MTM2OnYy", "diffSide": "RIGHT", "path": "src/test/resources/data/forge/tags/blocks/scaffolding.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToyMzo1MFrOHHaeyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToyMzo1MFrOHHaeyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzNTk0Nw==", "bodyText": "This file should no longer be needed, now that you have the generated version", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r477535947", "createdAt": "2020-08-26T19:23:50Z", "author": {"login": "ichttt"}, "path": "src/test/resources/data/forge/tags/blocks/scaffolding.json", "diffHunk": "@@ -0,0 +1,6 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e67ad1cbf836ffee395f0deebeff6d9bf14ecaf5"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQ2NDkwOnYy", "diffSide": "RIGHT", "path": "src/test/resources/assets/scaffolding_test/blockstates/scaffolding_method_test.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToyNDo1NlrOHHahAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToyNDo1NlrOHHahAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzNjUxNQ==", "bodyText": "Can you also provide a blockstate data gen?", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r477536515", "createdAt": "2020-08-26T19:24:56Z", "author": {"login": "ichttt"}, "path": "src/test/resources/assets/scaffolding_test/blockstates/scaffolding_method_test.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e67ad1cbf836ffee395f0deebeff6d9bf14ecaf5"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDE1MjIyOnYy", "diffSide": "RIGHT", "path": "src/test/java/net/minecraftforge/debug/block/ScaffoldingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDo0MDoyMVrOHIKh-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDo0MDoyMVrOHIKh-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyMzE5Mg==", "bodyText": "wrong indentation", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r478323192", "createdAt": "2020-08-27T10:40:21Z", "author": {"login": "ichttt"}, "path": "src/test/java/net/minecraftforge/debug/block/ScaffoldingTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package net.minecraftforge.debug.block;\n+\n+import net.minecraft.block.AbstractBlock;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.ScaffoldingBlock;\n+import net.minecraft.block.SoundType;\n+import net.minecraft.block.material.Material;\n+import net.minecraft.block.material.MaterialColor;\n+import net.minecraft.data.BlockTagsProvider;\n+import net.minecraft.data.DataGenerator;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.IWorldReader;\n+import net.minecraftforge.client.model.generators.BlockStateProvider;\n+import net.minecraftforge.client.model.generators.ConfiguredModel;\n+import net.minecraftforge.client.model.generators.ExistingFileHelper;\n+import net.minecraftforge.client.model.generators.ModelFile;\n+import net.minecraftforge.common.Tags;\n+import net.minecraftforge.eventbus.api.IEventBus;\n+import net.minecraftforge.fml.RegistryObject;\n+import net.minecraftforge.fml.common.Mod;\n+import net.minecraftforge.fml.event.lifecycle.GatherDataEvent;\n+import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;\n+import net.minecraftforge.registries.DeferredRegister;\n+import net.minecraftforge.registries.ForgeRegistries;\n+\n+/**\n+ * This test mod allows a custom scaffolding to move down\n+ * while sneaking through a tag and method.\n+ */\n+@Mod(ScaffoldingTest.MODID)\n+public class ScaffoldingTest\n+{\n+    static final String MODID = \"scaffolding_test\";\n+    static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, MODID);\n+\n+    static final RegistryObject<Block> SCAFFOLDING_TAG_TEST = BLOCKS.register(\"scaffolding_tag_test\", () -> new ScaffoldingBlock(AbstractBlock.Properties.create(Material.MISCELLANEOUS, MaterialColor.SAND).doesNotBlockMovement().sound(SoundType.SCAFFOLDING).variableOpacity()));\n+    static final RegistryObject<Block> SCAFFOLDING_METHOD_TEST = BLOCKS.register(\"scaffolding_method_test\", () -> new ScaffoldingMethodTestBlock(AbstractBlock.Properties.create(Material.MISCELLANEOUS, MaterialColor.SAND).doesNotBlockMovement().sound(SoundType.SCAFFOLDING).variableOpacity()));\n+\n+    public ScaffoldingTest()\n+    {\n+        IEventBus modBus = FMLJavaModLoadingContext.get().getModEventBus();\n+        BLOCKS.register(modBus);\n+        modBus.addListener(this::gatherData);\n+    }\n+\n+    private void gatherData(final GatherDataEvent event)\n+    {\n+        DataGenerator gen = event.getGenerator();\n+    \tif(event.includeClient()) gen.addProvider(new ScaffoldingBlockState(gen, MODID, event.getExistingFileHelper()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fba40d475f233b940beee6af6a1945014b5dde8"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDE1MzA5OnYy", "diffSide": "RIGHT", "path": "src/test/java/net/minecraftforge/debug/block/ScaffoldingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDo0MDo0MFrOHIKigw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDo0MDo0MFrOHIKigw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyMzMzMQ==", "bodyText": "tabs", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r478323331", "createdAt": "2020-08-27T10:40:40Z", "author": {"login": "ichttt"}, "path": "src/test/java/net/minecraftforge/debug/block/ScaffoldingTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package net.minecraftforge.debug.block;\n+\n+import net.minecraft.block.AbstractBlock;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.ScaffoldingBlock;\n+import net.minecraft.block.SoundType;\n+import net.minecraft.block.material.Material;\n+import net.minecraft.block.material.MaterialColor;\n+import net.minecraft.data.BlockTagsProvider;\n+import net.minecraft.data.DataGenerator;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.IWorldReader;\n+import net.minecraftforge.client.model.generators.BlockStateProvider;\n+import net.minecraftforge.client.model.generators.ConfiguredModel;\n+import net.minecraftforge.client.model.generators.ExistingFileHelper;\n+import net.minecraftforge.client.model.generators.ModelFile;\n+import net.minecraftforge.common.Tags;\n+import net.minecraftforge.eventbus.api.IEventBus;\n+import net.minecraftforge.fml.RegistryObject;\n+import net.minecraftforge.fml.common.Mod;\n+import net.minecraftforge.fml.event.lifecycle.GatherDataEvent;\n+import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;\n+import net.minecraftforge.registries.DeferredRegister;\n+import net.minecraftforge.registries.ForgeRegistries;\n+\n+/**\n+ * This test mod allows a custom scaffolding to move down\n+ * while sneaking through a tag and method.\n+ */\n+@Mod(ScaffoldingTest.MODID)\n+public class ScaffoldingTest\n+{\n+    static final String MODID = \"scaffolding_test\";\n+    static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, MODID);\n+\n+    static final RegistryObject<Block> SCAFFOLDING_TAG_TEST = BLOCKS.register(\"scaffolding_tag_test\", () -> new ScaffoldingBlock(AbstractBlock.Properties.create(Material.MISCELLANEOUS, MaterialColor.SAND).doesNotBlockMovement().sound(SoundType.SCAFFOLDING).variableOpacity()));\n+    static final RegistryObject<Block> SCAFFOLDING_METHOD_TEST = BLOCKS.register(\"scaffolding_method_test\", () -> new ScaffoldingMethodTestBlock(AbstractBlock.Properties.create(Material.MISCELLANEOUS, MaterialColor.SAND).doesNotBlockMovement().sound(SoundType.SCAFFOLDING).variableOpacity()));\n+\n+    public ScaffoldingTest()\n+    {\n+        IEventBus modBus = FMLJavaModLoadingContext.get().getModEventBus();\n+        BLOCKS.register(modBus);\n+        modBus.addListener(this::gatherData);\n+    }\n+\n+    private void gatherData(final GatherDataEvent event)\n+    {\n+        DataGenerator gen = event.getGenerator();\n+    \tif(event.includeClient()) gen.addProvider(new ScaffoldingBlockState(gen, MODID, event.getExistingFileHelper()));\n+    \tif(event.includeServer()) gen.addProvider(new ScaffoldingTagsProvider(gen));\n+    }\n+\n+    static class ScaffoldingTagsProvider extends BlockTagsProvider\n+    {\n+        public ScaffoldingTagsProvider(DataGenerator generatorIn)\n+        {\n+\t\t    super(generatorIn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fba40d475f233b940beee6af6a1945014b5dde8"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDU1MDQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowNjowOFrOHOsOMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDozNzo1OVrOHOtLhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NjY0Mw==", "bodyText": "We DO NOT add tags for game logic.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r485166643", "createdAt": "2020-09-08T20:06:08Z", "author": {"login": "LexManos"}, "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "diffHunk": "@@ -911,4 +911,18 @@ default BlockState getToolModifiedState(BlockState state, World world, BlockPos\n         else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n         else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n+    \n+    /**\n+     * Checks if a player or entity handles movement on this block like scaffolding.\n+     *\n+     * @param state The current state\n+     * @param world The current world\n+     * @param pos The block position in world\n+     * @param entity The entity on the scaffolding\n+     * @return True if the block should act like scaffolding\n+     */\n+    default boolean isScaffolding(BlockState state, IWorldReader world, BlockPos pos, LivingEntity entity)\n+    {\n+        return state.isIn(Blocks.SCAFFOLDING) || state.getBlock().isIn(Tags.Blocks.SCAFFOLDING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76fe78df4e3e438710e70d32a4a77fc61c9bb8cf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4MjM0Mw==", "bodyText": "Apologies, Lex. Removed the in-game tag logic directly and moved it to the specific test.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r485182343", "createdAt": "2020-09-08T20:37:59Z", "author": {"login": "ChampionAsh5357"}, "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "diffHunk": "@@ -911,4 +911,18 @@ default BlockState getToolModifiedState(BlockState state, World world, BlockPos\n         else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n         else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n+    \n+    /**\n+     * Checks if a player or entity handles movement on this block like scaffolding.\n+     *\n+     * @param state The current state\n+     * @param world The current world\n+     * @param pos The block position in world\n+     * @param entity The entity on the scaffolding\n+     * @return True if the block should act like scaffolding\n+     */\n+    default boolean isScaffolding(BlockState state, IWorldReader world, BlockPos pos, LivingEntity entity)\n+    {\n+        return state.isIn(Blocks.SCAFFOLDING) || state.getBlock().isIn(Tags.Blocks.SCAFFOLDING);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NjY0Mw=="}, "originalCommit": {"oid": "76fe78df4e3e438710e70d32a4a77fc61c9bb8cf"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDY2NDc3OnYy", "diffSide": "RIGHT", "path": "src/test/java/net/minecraftforge/debug/block/ScaffoldingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDo0MjozM1rOHOtUOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDo0OTo0NFrOHOtiNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4NDU3MA==", "bodyText": "Remove all of this entirely. We do not support or encourage people using custom tags for game logic. So there is no need for this 'test'", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r485184570", "createdAt": "2020-09-08T20:42:33Z", "author": {"login": "LexManos"}, "path": "src/test/java/net/minecraftforge/debug/block/ScaffoldingTest.java", "diffHunk": "@@ -35,8 +36,9 @@\n {\n     static final String MODID = \"scaffolding_test\";\n     static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, MODID);\n+    static final IOptionalNamedTag<Block> SCAFFOLDING = BlockTags.createOptional(new ResourceLocation(\"forge\", \"scaffolding\"));\n \n-    static final RegistryObject<Block> SCAFFOLDING_TAG_TEST = BLOCKS.register(\"scaffolding_tag_test\", () -> new ScaffoldingBlock(AbstractBlock.Properties.create(Material.MISCELLANEOUS, MaterialColor.SAND).doesNotBlockMovement().sound(SoundType.SCAFFOLDING).variableOpacity()));\n+    static final RegistryObject<Block> SCAFFOLDING_TAG_TEST = BLOCKS.register(\"scaffolding_tag_test\", () -> new ScaffoldingTagTestBlock(AbstractBlock.Properties.create(Material.MISCELLANEOUS, MaterialColor.SAND).doesNotBlockMovement().sound(SoundType.SCAFFOLDING).variableOpacity()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3df702795d8b3227a3ba113bfb2453c2536ed6ad"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4ODE1MQ==", "bodyText": "Ok, should be done now.", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r485188151", "createdAt": "2020-09-08T20:49:44Z", "author": {"login": "ChampionAsh5357"}, "path": "src/test/java/net/minecraftforge/debug/block/ScaffoldingTest.java", "diffHunk": "@@ -35,8 +36,9 @@\n {\n     static final String MODID = \"scaffolding_test\";\n     static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, MODID);\n+    static final IOptionalNamedTag<Block> SCAFFOLDING = BlockTags.createOptional(new ResourceLocation(\"forge\", \"scaffolding\"));\n \n-    static final RegistryObject<Block> SCAFFOLDING_TAG_TEST = BLOCKS.register(\"scaffolding_tag_test\", () -> new ScaffoldingBlock(AbstractBlock.Properties.create(Material.MISCELLANEOUS, MaterialColor.SAND).doesNotBlockMovement().sound(SoundType.SCAFFOLDING).variableOpacity()));\n+    static final RegistryObject<Block> SCAFFOLDING_TAG_TEST = BLOCKS.register(\"scaffolding_tag_test\", () -> new ScaffoldingTagTestBlock(AbstractBlock.Properties.create(Material.MISCELLANEOUS, MaterialColor.SAND).doesNotBlockMovement().sound(SoundType.SCAFFOLDING).variableOpacity()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4NDU3MA=="}, "originalCommit": {"oid": "3df702795d8b3227a3ba113bfb2453c2536ed6ad"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 893, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}