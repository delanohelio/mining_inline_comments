{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MjcyMTEz", "number": 515, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyNjowMVrOE2LGpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yN1QyMDozNzoyNVrOF3U9xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjQwNDg1OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyNjowMVrOHu27og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMDoyMToyMVrOHwG0AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5NjU0Ng==", "bodyText": "what are your thoughts on renaming sourceInstanceId to destinationInstanceId, or targetInstanceId? 'source' is a little confusing to me", "url": "https://github.com/googleapis/java-bigtable/pull/515#discussion_r518896546", "createdAt": "2020-11-06T17:26:01Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java", "diffHunk": "@@ -20,24 +20,47 @@\n import com.google.common.base.Objects;\n import com.google.common.base.Preconditions;\n import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n /** Fluent wrapper for {@link com.google.bigtable.admin.v2.RestoreTableRequest} */\n public final class RestoreTableRequest {\n   private final com.google.bigtable.admin.v2.RestoreTableRequest.Builder requestBuilder =\n       com.google.bigtable.admin.v2.RestoreTableRequest.newBuilder();\n-  private final String backupId;\n-  private final String clusterId;\n+  private final String sourceBackupId;\n+  private final String sourceClusterId;\n+  private final String sourceInstanceId;\n \n-  public static RestoreTableRequest of(String clusterId, String backupId) {\n-    RestoreTableRequest request = new RestoreTableRequest(clusterId, backupId);\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n+   * instance as the destination table. To restore a table from a backup in another instance, use\n+   * {@link #of(String, String, String) of} method.\n+   */\n+  public static RestoreTableRequest of(String sourceClusterId, String sourceBackupId) {\n+    RestoreTableRequest request = new RestoreTableRequest(null, sourceClusterId, sourceBackupId);\n     return request;\n   }\n \n-  private RestoreTableRequest(String clusterId, String backupId) {\n-    Preconditions.checkNotNull(clusterId);\n-    Preconditions.checkNotNull(backupId);\n-    this.backupId = backupId;\n-    this.clusterId = clusterId;\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n+   * instance as the destination table. To restore a table from a backup in another instance, use\n+   * {@link #of(String, String, String) of} method.\n+   */\n+  public static RestoreTableRequest of(\n+      String sourceInstanceId, String sourceClusterId, String sourceBackupId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8146fb3cde20ac206d939050820db73b1238c6e2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwNTMxMw==", "bodyText": "ignore - I misunderstood the usage here", "url": "https://github.com/googleapis/java-bigtable/pull/515#discussion_r520205313", "createdAt": "2020-11-10T00:21:21Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java", "diffHunk": "@@ -20,24 +20,47 @@\n import com.google.common.base.Objects;\n import com.google.common.base.Preconditions;\n import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n /** Fluent wrapper for {@link com.google.bigtable.admin.v2.RestoreTableRequest} */\n public final class RestoreTableRequest {\n   private final com.google.bigtable.admin.v2.RestoreTableRequest.Builder requestBuilder =\n       com.google.bigtable.admin.v2.RestoreTableRequest.newBuilder();\n-  private final String backupId;\n-  private final String clusterId;\n+  private final String sourceBackupId;\n+  private final String sourceClusterId;\n+  private final String sourceInstanceId;\n \n-  public static RestoreTableRequest of(String clusterId, String backupId) {\n-    RestoreTableRequest request = new RestoreTableRequest(clusterId, backupId);\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n+   * instance as the destination table. To restore a table from a backup in another instance, use\n+   * {@link #of(String, String, String) of} method.\n+   */\n+  public static RestoreTableRequest of(String sourceClusterId, String sourceBackupId) {\n+    RestoreTableRequest request = new RestoreTableRequest(null, sourceClusterId, sourceBackupId);\n     return request;\n   }\n \n-  private RestoreTableRequest(String clusterId, String backupId) {\n-    Preconditions.checkNotNull(clusterId);\n-    Preconditions.checkNotNull(backupId);\n-    this.backupId = backupId;\n-    this.clusterId = clusterId;\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n+   * instance as the destination table. To restore a table from a backup in another instance, use\n+   * {@link #of(String, String, String) of} method.\n+   */\n+  public static RestoreTableRequest of(\n+      String sourceInstanceId, String sourceClusterId, String sourceBackupId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5NjU0Ng=="}, "originalCommit": {"oid": "8146fb3cde20ac206d939050820db73b1238c6e2"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjQwNzU3OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/it/BigtableBackupIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyNjo0NFrOHu29Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQyMjo0NDowOVrOIUwGQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5Njk2Ng==", "bodyText": "FYI, this will need to be rebased when #498 is merged", "url": "https://github.com/googleapis/java-bigtable/pull/515#discussion_r518896966", "createdAt": "2020-11-06T17:26:44Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/it/BigtableBackupIT.java", "diffHunk": "@@ -360,6 +362,55 @@ public void backupIamTest() throws InterruptedException {\n     assertThat(permissions).hasSize(4);\n   }\n \n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8146fb3cde20ac206d939050820db73b1238c6e2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODYzMDQ2NA==", "bodyText": "Rebase the test code.", "url": "https://github.com/googleapis/java-bigtable/pull/515#discussion_r558630464", "createdAt": "2021-01-15T22:44:09Z", "author": {"login": "liubonan"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/it/BigtableBackupIT.java", "diffHunk": "@@ -360,6 +362,55 @@ public void backupIamTest() throws InterruptedException {\n     assertThat(permissions).hasSize(4);\n   }\n \n+  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5Njk2Ng=="}, "originalCommit": {"oid": "8146fb3cde20ac206d939050820db73b1238c6e2"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkzNTU5MjY5OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yN1QyMDozNjo1MlrOJQyW8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yN1QyMDozNjo1MlrOJQyW8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTU4MjA2Nw==", "bodyText": "nit: this javadoc needs updating", "url": "https://github.com/googleapis/java-bigtable/pull/515#discussion_r621582067", "createdAt": "2021-04-27T20:36:52Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java", "diffHunk": "@@ -20,24 +20,47 @@\n import com.google.common.base.Objects;\n import com.google.common.base.Preconditions;\n import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n /** Fluent wrapper for {@link com.google.bigtable.admin.v2.RestoreTableRequest} */\n public final class RestoreTableRequest {\n   private final com.google.bigtable.admin.v2.RestoreTableRequest.Builder requestBuilder =\n       com.google.bigtable.admin.v2.RestoreTableRequest.newBuilder();\n-  private final String backupId;\n-  private final String clusterId;\n+  private final String sourceBackupId;\n+  private final String sourceClusterId;\n+  private final String sourceInstanceId;\n \n-  public static RestoreTableRequest of(String clusterId, String backupId) {\n-    RestoreTableRequest request = new RestoreTableRequest(clusterId, backupId);\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n+   * instance as the destination table. To restore a table from a backup in another instance, use\n+   * {@link #of(String, String, String) of} method.\n+   */\n+  public static RestoreTableRequest of(String sourceClusterId, String sourceBackupId) {\n+    RestoreTableRequest request = new RestoreTableRequest(null, sourceClusterId, sourceBackupId);\n     return request;\n   }\n \n-  private RestoreTableRequest(String clusterId, String backupId) {\n-    Preconditions.checkNotNull(clusterId);\n-    Preconditions.checkNotNull(backupId);\n-    this.backupId = backupId;\n-    this.clusterId = clusterId;\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042ed7619bbdb061e36e0f91a3019b813f366827"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkzNTU5NDk0OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yN1QyMDozNzoyNVrOJQyYSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yN1QyMjoxNjoxNFrOJQ2CMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTU4MjQwOQ==", "bodyText": "the variables in the test are target.... Should these be renamed?", "url": "https://github.com/googleapis/java-bigtable/pull/515#discussion_r621582409", "createdAt": "2021-04-27T20:37:25Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java", "diffHunk": "@@ -20,24 +20,47 @@\n import com.google.common.base.Objects;\n import com.google.common.base.Preconditions;\n import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n /** Fluent wrapper for {@link com.google.bigtable.admin.v2.RestoreTableRequest} */\n public final class RestoreTableRequest {\n   private final com.google.bigtable.admin.v2.RestoreTableRequest.Builder requestBuilder =\n       com.google.bigtable.admin.v2.RestoreTableRequest.newBuilder();\n-  private final String backupId;\n-  private final String clusterId;\n+  private final String sourceBackupId;\n+  private final String sourceClusterId;\n+  private final String sourceInstanceId;\n \n-  public static RestoreTableRequest of(String clusterId, String backupId) {\n-    RestoreTableRequest request = new RestoreTableRequest(clusterId, backupId);\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n+   * instance as the destination table. To restore a table from a backup in another instance, use\n+   * {@link #of(String, String, String) of} method.\n+   */\n+  public static RestoreTableRequest of(String sourceClusterId, String sourceBackupId) {\n+    RestoreTableRequest request = new RestoreTableRequest(null, sourceClusterId, sourceBackupId);\n     return request;\n   }\n \n-  private RestoreTableRequest(String clusterId, String backupId) {\n-    Preconditions.checkNotNull(clusterId);\n-    Preconditions.checkNotNull(backupId);\n-    this.backupId = backupId;\n-    this.clusterId = clusterId;\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n+   * instance as the destination table. To restore a table from a backup in another instance, use\n+   * {@link #of(String, String, String) of} method.\n+   */\n+  public static RestoreTableRequest of(\n+      String sourceInstanceId, String sourceClusterId, String sourceBackupId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042ed7619bbdb061e36e0f91a3019b813f366827"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTY0MjI5MA==", "bodyText": "Update the test case to make it clear that RestoreTable is destination-centric.", "url": "https://github.com/googleapis/java-bigtable/pull/515#discussion_r621642290", "createdAt": "2021-04-27T22:16:14Z", "author": {"login": "liubonan"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java", "diffHunk": "@@ -20,24 +20,47 @@\n import com.google.common.base.Objects;\n import com.google.common.base.Preconditions;\n import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n /** Fluent wrapper for {@link com.google.bigtable.admin.v2.RestoreTableRequest} */\n public final class RestoreTableRequest {\n   private final com.google.bigtable.admin.v2.RestoreTableRequest.Builder requestBuilder =\n       com.google.bigtable.admin.v2.RestoreTableRequest.newBuilder();\n-  private final String backupId;\n-  private final String clusterId;\n+  private final String sourceBackupId;\n+  private final String sourceClusterId;\n+  private final String sourceInstanceId;\n \n-  public static RestoreTableRequest of(String clusterId, String backupId) {\n-    RestoreTableRequest request = new RestoreTableRequest(clusterId, backupId);\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n+   * instance as the destination table. To restore a table from a backup in another instance, use\n+   * {@link #of(String, String, String) of} method.\n+   */\n+  public static RestoreTableRequest of(String sourceClusterId, String sourceBackupId) {\n+    RestoreTableRequest request = new RestoreTableRequest(null, sourceClusterId, sourceBackupId);\n     return request;\n   }\n \n-  private RestoreTableRequest(String clusterId, String backupId) {\n-    Preconditions.checkNotNull(clusterId);\n-    Preconditions.checkNotNull(backupId);\n-    this.backupId = backupId;\n-    this.clusterId = clusterId;\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n+   * instance as the destination table. To restore a table from a backup in another instance, use\n+   * {@link #of(String, String, String) of} method.\n+   */\n+  public static RestoreTableRequest of(\n+      String sourceInstanceId, String sourceClusterId, String sourceBackupId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTU4MjQwOQ=="}, "originalCommit": {"oid": "042ed7619bbdb061e36e0f91a3019b813f366827"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3358, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}