{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzOTc1Njc2", "number": 371, "title": "chore: Introspect peer IP address for directpath tests", "bodyText": "As we are rolling out DirectPath IPv4 support, we want to test both ipv4 and ipv6 cases (i.e. run test client on both ipv4-only VM and ipv6-enabled VM). And to make sure DirectPath is working as expected on both ipv4/ipv6 connection, we would want to introspect the peer IP address after connection is successfully established.\nChanges in this PR:\n\nAdded client interceptor in CloudEnv.java, which is only enabled for directpath tests. Please advise if there's a better place for adding this interceptor.\nThrows a RuntimeException when remote IP address is not as expected.\nAdded bigtable-directpath-ipv4-it test profile to be run on a ipv4-only VM. The original bigtable-directpath-it will still be run on a ipv6-enabled VM.", "createdAt": "2020-07-21T00:34:50Z", "url": "https://github.com/googleapis/java-bigtable/pull/371", "merged": true, "mergeCommit": {"oid": "950d224fff63ef8c87a6604c436d3e144f8f28b3"}, "closed": true, "closedAt": "2020-08-05T16:49:23Z", "author": {"login": "WeiranFang"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc267pNAH2gAyNDUzOTc1Njc2OjNmMmYzMjJlZjdjMmI2M2JmODNlZjA4MjRhOTg3YjI2OWIxNGM3YWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6NuUhgH2gAyNDUzOTc1Njc2OmMzMWFhNTJhMGFiYzQ3MDczNTFjZDc2NmRiMjgwMGE2ODk4MjhhZTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3f2f322ef7c2b63bf83ef0824a987b269b14c7ab", "author": {"user": {"login": "WeiranFang", "name": "Weiran Fang"}}, "url": "https://github.com/googleapis/java-bigtable/commit/3f2f322ef7c2b63bf83ef0824a987b269b14c7ab", "committedDate": "2020-07-21T00:17:38Z", "message": "Add peer IP check for directpath tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNTA0MTky", "url": "https://github.com/googleapis/java-bigtable/pull/371#pullrequestreview-452504192", "createdAt": "2020-07-21T14:17:51Z", "commit": {"oid": "3f2f322ef7c2b63bf83ef0824a987b269b14c7ab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDoxNzo1MlrOG06MUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDoxNzo1MlrOG06MUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzMjU2MA==", "bodyText": "I think it would be slightly cleaner to use setInterceptorProvider instead of the configurator", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458132560", "createdAt": "2020-07-21T14:17:52Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java", "diffHunk": "@@ -81,6 +103,24 @@ private CloudEnv(\n       dataSettings.stubSettings().setEndpoint(dataEndpoint);\n     }\n \n+    if (isDirectPathEnabled()) {\n+      TransportChannelProvider channelProvider = dataSettings.stubSettings().getTransportChannelProvider();\n+      InstantiatingGrpcChannelProvider defaultTransportProvider = (InstantiatingGrpcChannelProvider) channelProvider;\n+      InstantiatingGrpcChannelProvider instrumentedTransportChannelProvider =\n+          defaultTransportProvider\n+              .toBuilder()\n+              .setChannelConfigurator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2f322ef7c2b63bf83ef0824a987b269b14c7ab"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNTExNTUx", "url": "https://github.com/googleapis/java-bigtable/pull/371#pullrequestreview-452511551", "createdAt": "2020-07-21T14:25:01Z", "commit": {"oid": "3f2f322ef7c2b63bf83ef0824a987b269b14c7ab"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDoyNTowMVrOG06iBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDoyOTozM1rOG06wWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzODExNw==", "bodyText": "why is this needed? I think it can safely be a local nonatomic variable in the interceptor", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458138117", "createdAt": "2020-07-21T14:25:01Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java", "diffHunk": "@@ -51,6 +72,7 @@\n   private final BigtableDataSettings.Builder dataSettings;\n   private final BigtableTableAdminSettings.Builder tableAdminSettings;\n   private final BigtableInstanceAdminSettings.Builder instanceAdminSettings;\n+  private final AtomicReference<ClientCall<?, ?>> clientCallCapture = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2f322ef7c2b63bf83ef0824a987b269b14c7ab"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzOTA0OQ==", "bodyText": "The name & javadoc are a bit misleading: this enforces that the ip is a direct path ip, the recording aspect seems to be a leftover from a previous approach", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458139049", "createdAt": "2020-07-21T14:26:13Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java", "diffHunk": "@@ -153,4 +193,53 @@ private static String getRequiredProperty(String prop) {\n     }\n     return value;\n   }\n+\n+  /**\n+   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is established.\n+   * This is useful for DirectPath testing and debugging.\n+   * {@link ClientCall#getAttributes()}\n+   */\n+  private ClientInterceptor recordClientCallInterceptor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2f322ef7c2b63bf83ef0824a987b269b14c7ab"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MTE3Mg==", "bodyText": "Is it safe to throw exceptions here? will grpc cancel the underlying call? will the supplied listener to be notified of the failure?", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458141172", "createdAt": "2020-07-21T14:28:54Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java", "diffHunk": "@@ -153,4 +193,53 @@ private static String getRequiredProperty(String prop) {\n     }\n     return value;\n   }\n+\n+  /**\n+   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is established.\n+   * This is useful for DirectPath testing and debugging.\n+   * {@link ClientCall#getAttributes()}\n+   */\n+  private ClientInterceptor recordClientCallInterceptor(\n+      final AtomicReference<ClientCall<?, ?>> clientCallCapture) {\n+    return new ClientInterceptor() {\n+      @Override\n+      public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n+          MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {\n+        ClientCall<ReqT, RespT> clientCall = next.newCall(method,callOptions);\n+        clientCallCapture.set(clientCall);\n+        return new SimpleForwardingClientCall<ReqT, RespT>(clientCall) {\n+          @Override\n+          public void start(Listener<RespT> responseListener, Metadata headers) {\n+            super.start(new SimpleForwardingClientCallListener<RespT>(responseListener) {\n+              @Override\n+              public void onHeaders(Metadata headers) {\n+                // Check peer IP after connection is established.\n+                SocketAddress remoteAddr = clientCallCapture.get().getAttributes().get(Grpc.TRANSPORT_ATTR_REMOTE_ADDR);\n+                if (!verifyRemoteAddress(remoteAddr)) {\n+                  throw new RuntimeException(String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2f322ef7c2b63bf83ef0824a987b269b14c7ab"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MTc4Ng==", "bodyText": "why does this have to be atomic?", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458141786", "createdAt": "2020-07-21T14:29:33Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java", "diffHunk": "@@ -153,4 +193,53 @@ private static String getRequiredProperty(String prop) {\n     }\n     return value;\n   }\n+\n+  /**\n+   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is established.\n+   * This is useful for DirectPath testing and debugging.\n+   * {@link ClientCall#getAttributes()}\n+   */\n+  private ClientInterceptor recordClientCallInterceptor(\n+      final AtomicReference<ClientCall<?, ?>> clientCallCapture) {\n+    return new ClientInterceptor() {\n+      @Override\n+      public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n+          MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {\n+        ClientCall<ReqT, RespT> clientCall = next.newCall(method,callOptions);\n+        clientCallCapture.set(clientCall);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2f322ef7c2b63bf83ef0824a987b269b14c7ab"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ec1eb7e1539a53913daf224ae6b0b3b5eec0824", "author": {"user": {"login": "WeiranFang", "name": "Weiran Fang"}}, "url": "https://github.com/googleapis/java-bigtable/commit/8ec1eb7e1539a53913daf224ae6b0b3b5eec0824", "committedDate": "2020-07-21T19:11:14Z", "message": "remove atomic reference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acad273c0aa06b0c9a670c7c2cfd0744fa65a126", "author": {"user": {"login": "WeiranFang", "name": "Weiran Fang"}}, "url": "https://github.com/googleapis/java-bigtable/commit/acad273c0aa06b0c9a670c7c2cfd0744fa65a126", "committedDate": "2020-07-21T19:35:33Z", "message": "fix lint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzY5MTcx", "url": "https://github.com/googleapis/java-bigtable/pull/371#pullrequestreview-452769171", "createdAt": "2020-07-21T19:35:36Z", "commit": {"oid": "8ec1eb7e1539a53913daf224ae6b0b3b5eec0824"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTozNTozNlrOG1G3bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0MTowMFrOG1HCEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MDIwNw==", "bodyText": "I dont think you need capturedCall here, the inner class should be able to access clientCall directly", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458340207", "createdAt": "2020-07-21T19:35:36Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java", "diffHunk": "@@ -153,4 +191,54 @@ private static String getRequiredProperty(String prop) {\n     }\n     return value;\n   }\n+\n+  /**\n+   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is\n+   * established and verifies if the remote address is a DirectPath address.\n+   * This is only used for DirectPath testing.\n+   * {@link ClientCall#getAttributes()}\n+   */\n+  private ClientInterceptor directPathAddressCheckInterceptor() {\n+    return new ClientInterceptor() {\n+      private ClientCall<?, ?> capturedCall;\n+      @Override\n+      public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n+          MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {\n+        ClientCall<ReqT, RespT> clientCall = next.newCall(method,callOptions);\n+        capturedCall = clientCall;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ec1eb7e1539a53913daf224ae6b0b3b5eec0824"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MjkzMA==", "bodyText": "Good to know that its safe, but the test failure will be hard for someone to track down.\nCan you make the message more explicit, something along the lines of:\n\"Synthetically aborting the current request because it did not adhere to the test environment's requirement for DirectPath. Expected test to access DirectPath via %s, but RPC was destined for %s\"", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458342930", "createdAt": "2020-07-21T19:41:00Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java", "diffHunk": "@@ -153,4 +193,53 @@ private static String getRequiredProperty(String prop) {\n     }\n     return value;\n   }\n+\n+  /**\n+   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is established.\n+   * This is useful for DirectPath testing and debugging.\n+   * {@link ClientCall#getAttributes()}\n+   */\n+  private ClientInterceptor recordClientCallInterceptor(\n+      final AtomicReference<ClientCall<?, ?>> clientCallCapture) {\n+    return new ClientInterceptor() {\n+      @Override\n+      public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n+          MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {\n+        ClientCall<ReqT, RespT> clientCall = next.newCall(method,callOptions);\n+        clientCallCapture.set(clientCall);\n+        return new SimpleForwardingClientCall<ReqT, RespT>(clientCall) {\n+          @Override\n+          public void start(Listener<RespT> responseListener, Metadata headers) {\n+            super.start(new SimpleForwardingClientCallListener<RespT>(responseListener) {\n+              @Override\n+              public void onHeaders(Metadata headers) {\n+                // Check peer IP after connection is established.\n+                SocketAddress remoteAddr = clientCallCapture.get().getAttributes().get(Grpc.TRANSPORT_ATTR_REMOTE_ADDR);\n+                if (!verifyRemoteAddress(remoteAddr)) {\n+                  throw new RuntimeException(String.format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MTE3Mg=="}, "originalCommit": {"oid": "3f2f322ef7c2b63bf83ef0824a987b269b14c7ab"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbe32b8b0180e1203219238ae09886cbcc612609", "author": {"user": {"login": "WeiranFang", "name": "Weiran Fang"}}, "url": "https://github.com/googleapis/java-bigtable/commit/cbe32b8b0180e1203219238ae09886cbcc612609", "committedDate": "2020-07-21T20:39:02Z", "message": "make failure message more explicit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyODIwMDYz", "url": "https://github.com/googleapis/java-bigtable/pull/371#pullrequestreview-452820063", "createdAt": "2020-07-21T20:52:24Z", "commit": {"oid": "cbe32b8b0180e1203219238ae09886cbcc612609"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo1MjoyNVrOG1JU5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo1MjoyNVrOG1JU5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MDUxOQ==", "bodyText": "I think your parameters are backwards:\nExpected test to access DirectPath via %s, but RPC was destined for %s\"\nso the values should be flipped:\nisDirectPathIpv4() ? \"ipv4\" : \"ipv6\", remoteAddr.toString()", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458380519", "createdAt": "2020-07-21T20:52:25Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java", "diffHunk": "@@ -153,4 +193,57 @@ private static String getRequiredProperty(String prop) {\n     }\n     return value;\n   }\n+\n+  /**\n+   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is\n+   * established and verifies if the remote address is a DirectPath address. This is only used for\n+   * DirectPath testing. {@link ClientCall#getAttributes()}\n+   */\n+  private ClientInterceptor directPathAddressCheckInterceptor() {\n+    return new ClientInterceptor() {\n+      @Override\n+      public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n+          MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {\n+        final ClientCall<ReqT, RespT> clientCall = next.newCall(method, callOptions);\n+        return new SimpleForwardingClientCall<ReqT, RespT>(clientCall) {\n+          @Override\n+          public void start(Listener<RespT> responseListener, Metadata headers) {\n+            super.start(\n+                new SimpleForwardingClientCallListener<RespT>(responseListener) {\n+                  @Override\n+                  public void onHeaders(Metadata headers) {\n+                    // Check peer IP after connection is established.\n+                    SocketAddress remoteAddr =\n+                        clientCall.getAttributes().get(Grpc.TRANSPORT_ATTR_REMOTE_ADDR);\n+                    if (!verifyRemoteAddress(remoteAddr)) {\n+                      throw new RuntimeException(\n+                          String.format(\n+                              \"Synthetically aborting the current request because it did not adhere\"\n+                                  + \" to the test environment's requirement for DirectPath.\"\n+                                  + \" Expected test to access DirectPath via %s,\"\n+                                  + \" but RPC was destined for %s\",\n+                              remoteAddr.toString(), isDirectPathIpv4() ? \"ipv4\" : \"ipv6\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe32b8b0180e1203219238ae09886cbcc612609"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2969cbfc2cfa7648b96b43f4d668a043d7dacfd", "author": {"user": {"login": "WeiranFang", "name": "Weiran Fang"}}, "url": "https://github.com/googleapis/java-bigtable/commit/b2969cbfc2cfa7648b96b43f4d668a043d7dacfd", "committedDate": "2020-07-21T20:55:58Z", "message": "string format fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzczMzA3", "url": "https://github.com/googleapis/java-bigtable/pull/371#pullrequestreview-454373307", "createdAt": "2020-07-23T18:02:31Z", "commit": {"oid": "b2969cbfc2cfa7648b96b43f4d668a043d7dacfd"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowMjozMVrOG2Vrmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowMjozMVrOG2Vrmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTUxNA==", "bodyText": "sorry, just noticed this, I think this has been its own summary file so that it wont clobber the regular directpath-it tests", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r459631514", "createdAt": "2020-07-23T18:02:31Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/pom.xml", "diffHunk": "@@ -338,6 +338,44 @@\n         </plugins>\n       </build>\n     </profile>\n+\n+    <profile>\n+      <id>bigtable-directpath-ipv4-it</id>\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <executions>\n+              <execution>\n+                <id>directpath-it</id>\n+                <goals>\n+                  <goal>integration-test</goal>\n+                  <goal>verify</goal>\n+                </goals>\n+                <configuration>\n+                  <skip>false</skip>\n+\n+                  <systemPropertyVariables>\n+                    <bigtable.env>cloud</bigtable.env>\n+                    <bigtable.data-endpoint>${bigtable.directpath-data-endpoint}</bigtable.data-endpoint>\n+                    <bigtable.admin-endpoint>${bigtable.directpath-admin-endpoint}</bigtable.admin-endpoint>\n+                    <bigtable.grpc-log-dir>${project.build.directory}/test-grpc-logs/directpath-it</bigtable.grpc-log-dir>\n+                    <bigtable.attempt-directpath>true</bigtable.attempt-directpath>\n+                    <bigtable.directpath-ipv4>true</bigtable.directpath-ipv4>\n+                  </systemPropertyVariables>\n+                  <includes>\n+                    <!-- TODO(igorbernstein): Once the control plane is accessible via directpath, add admin tests -->\n+                    <include>com.google.cloud.bigtable.data.v2.it.*IT</include>\n+                  </includes>\n+                  <summaryFile>${project.build.directory}/failsafe-reports/failsafe-summary-directpath-it.xml</summaryFile>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2969cbfc2cfa7648b96b43f4d668a043d7dacfd"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "409fbeb4f9e843ab1d0037dab1ab63f4ef8ab9f6", "author": {"user": {"login": "WeiranFang", "name": "Weiran Fang"}}, "url": "https://github.com/googleapis/java-bigtable/commit/409fbeb4f9e843ab1d0037dab1ab63f4ef8ab9f6", "committedDate": "2020-07-23T20:36:01Z", "message": "fix grpc-log-dir and summaryFile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c31aa52a0abc4707351cd766db2800a689828ae3", "author": {"user": {"login": "WeiranFang", "name": "Weiran Fang"}}, "url": "https://github.com/googleapis/java-bigtable/commit/c31aa52a0abc4707351cd766db2800a689828ae3", "committedDate": "2020-07-31T05:53:03Z", "message": "Merge remote-tracking branch 'origin/master' into dp-ip-check"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1060, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}