{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTgwNzM0", "number": 305, "title": "feat: Cloud Bigtable Managed Backup Implementation", "bodyText": "Thank you for opening a Pull Request! Before submitting your PR, there are a few things you can do to make sure it goes smoothly:\n\n Make sure to open an issue as a bug/issue before writing your code!  That way we can discuss the change, evaluate designs, and agree on the general idea\n Ensure the tests and linter pass\n Code coverage does not decrease (if any source code was changed)\n Appropriate docs were updated (if necessary)", "createdAt": "2020-05-12T21:30:03Z", "url": "https://github.com/googleapis/java-bigtable/pull/305", "merged": true, "mergeCommit": {"oid": "9e3307a4872d3bae3c04e7857a9eb4859151965e"}, "closed": true, "closedAt": "2020-07-20T20:27:37Z", "author": {"login": "liubonan"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgthF-AFqTQxMDUwNTk2MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc23o64AFqTQ1MTkzNDU0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTA1OTYx", "url": "https://github.com/googleapis/java-bigtable/pull/305#pullrequestreview-410505961", "createdAt": "2020-05-13T00:13:28Z", "commit": {"oid": "33ffd938c06352108ccf7c1e5c970cce27771c72"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxMzoyOFrOGUdOWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxMzoyOFrOGUdOWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzUxMw==", "bodyText": "2020 (for this and other files)", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r424103513", "createdAt": "2020-05-13T00:13:28Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/models/UpdateBackupRequestTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2019 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ffd938c06352108ccf7c1e5c970cce27771c72"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMjIxMjg2", "url": "https://github.com/googleapis/java-bigtable/pull/305#pullrequestreview-421221286", "createdAt": "2020-05-29T19:18:47Z", "commit": {"oid": "33ffd938c06352108ccf7c1e5c970cce27771c72"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxOToxODo0OFrOGcpFHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxOToyNDo0NlrOGcpPCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4NjM2Ng==", "bodyText": "I think we can clean these up.", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r432686366", "createdAt": "2020-05-29T19:18:48Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java", "diffHunk": "@@ -775,6 +790,189 @@ public void awaitReplication(String tableId) {\n         stub.awaitReplicationCallable().futureCall(tableName));\n   }\n \n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ffd938c06352108ccf7c1e5c970cce27771c72"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4NjU0OA==", "bodyText": "@igorbernstein2 still relevant?", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r432686548", "createdAt": "2020-05-29T19:19:14Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java", "diffHunk": "@@ -775,6 +790,189 @@ public void awaitReplication(String tableId) {\n         stub.awaitReplicationCallable().futureCall(tableName));\n   }\n \n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public Backup createBackup(CreateBackupRequest request) {\n+    return ApiExceptions.callAndTranslateApiException(createBackupAsync(request));\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public ApiFuture<Backup> createBackupAsync(CreateBackupRequest request) {\n+    return ApiFutures.transform(\n+        stub.createBackupOperationCallable().futureCall(request.toProto(projectId, instanceId)),\n+        new ApiFunction<com.google.bigtable.admin.v2.Backup, Backup>() {\n+          @Override\n+          public Backup apply(com.google.bigtable.admin.v2.Backup backupProto) {\n+            return Backup.fromProto(backupProto);\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public Backup getBackup(String clusterId, String backupId) {\n+    return ApiExceptions.callAndTranslateApiException(getBackupAsync(clusterId, backupId));\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public ApiFuture<Backup> getBackupAsync(String clusterId, String backupId) {\n+    GetBackupRequest request =\n+        GetBackupRequest.newBuilder()\n+            .setName(NameUtil.formatBackupName(projectId, instanceId, clusterId, backupId))\n+            .build();\n+    return ApiFutures.transform(\n+        this.stub.getBackupCallable().futureCall(request),\n+        new ApiFunction<com.google.bigtable.admin.v2.Backup, Backup>() {\n+          @Override\n+          public Backup apply(com.google.bigtable.admin.v2.Backup backup) {\n+            return Backup.fromProto(backup);\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public List<String> listBackups(String clusterId) {\n+    return ApiExceptions.callAndTranslateApiException(listBackupsAsync(clusterId));\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public ApiFuture<List<String>> listBackupsAsync(String clusterId) {\n+    ListBackupsRequest request =\n+        ListBackupsRequest.newBuilder()\n+            .setParent(NameUtil.formatClusterName(projectId, instanceId, clusterId))\n+            .build();\n+\n+    // TODO(igorbernstein2): try to upstream pagination spooling or figure out a way to expose the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ffd938c06352108ccf7c1e5c970cce27771c72"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4ODIyNw==", "bodyText": "can we add tests for incorrectly formatted names?", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r432688227", "createdAt": "2020-05-29T19:23:09Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/internal/NameUtilTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.internal;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class NameUtilTest {\n+  @Test\n+  public void extractBackupIdFromBackupNameTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ffd938c06352108ccf7c1e5c970cce27771c72"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4ODkwNg==", "bodyText": "will this work without the TABLE_ID? Why not add it as a parameter in the of method?", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r432688906", "createdAt": "2020-05-29T19:24:46Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequestTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.models;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.bigtable.admin.v2.internal.NameUtil;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class RestoreTableRequestTest {\n+\n+  private static final String TABLE_ID = \"my-table\";\n+  private static final String BACKUP_ID = \"my-backup\";\n+  private static final String PROJECT_ID = \"my-project\";\n+  private static final String INSTANCE_ID = \"my-instance\";\n+  private static final String CLUSTER_ID = \"my-cluster\";\n+\n+  @Test\n+  public void testToProto() {\n+    RestoreTableRequest request =\n+        RestoreTableRequest.of(CLUSTER_ID, BACKUP_ID).setTableId(TABLE_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ffd938c06352108ccf7c1e5c970cce27771c72"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTU4NzY1", "url": "https://github.com/googleapis/java-bigtable/pull/305#pullrequestreview-435158765", "createdAt": "2020-06-22T18:05:30Z", "commit": {"oid": "33ffd938c06352108ccf7c1e5c970cce27771c72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODowNTozMFrOGnLi2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODowNTozMFrOGnLi2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczNjc5NQ==", "bodyText": "The python library adds additional parameters to allow for an order by in the request: https://github.com/googleapis/python-bigtable/pull/57/files#diff-2b7fa7c0cc3c25cbb236202352ee3ecdR731. Is this something we can add in here as well?", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r443736795", "createdAt": "2020-06-22T18:05:30Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java", "diffHunk": "@@ -775,6 +790,189 @@ public void awaitReplication(String tableId) {\n         stub.awaitReplicationCallable().futureCall(tableName));\n   }\n \n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public Backup createBackup(CreateBackupRequest request) {\n+    return ApiExceptions.callAndTranslateApiException(createBackupAsync(request));\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public ApiFuture<Backup> createBackupAsync(CreateBackupRequest request) {\n+    return ApiFutures.transform(\n+        stub.createBackupOperationCallable().futureCall(request.toProto(projectId, instanceId)),\n+        new ApiFunction<com.google.bigtable.admin.v2.Backup, Backup>() {\n+          @Override\n+          public Backup apply(com.google.bigtable.admin.v2.Backup backupProto) {\n+            return Backup.fromProto(backupProto);\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public Backup getBackup(String clusterId, String backupId) {\n+    return ApiExceptions.callAndTranslateApiException(getBackupAsync(clusterId, backupId));\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public ApiFuture<Backup> getBackupAsync(String clusterId, String backupId) {\n+    GetBackupRequest request =\n+        GetBackupRequest.newBuilder()\n+            .setName(NameUtil.formatBackupName(projectId, instanceId, clusterId, backupId))\n+            .build();\n+    return ApiFutures.transform(\n+        this.stub.getBackupCallable().futureCall(request),\n+        new ApiFunction<com.google.bigtable.admin.v2.Backup, Backup>() {\n+          @Override\n+          public Backup apply(com.google.bigtable.admin.v2.Backup backup) {\n+            return Backup.fromProto(backup);\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public List<String> listBackups(String clusterId) {\n+    return ApiExceptions.callAndTranslateApiException(listBackupsAsync(clusterId));\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public ApiFuture<List<String>> listBackupsAsync(String clusterId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ffd938c06352108ccf7c1e5c970cce27771c72"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MjE2NDc3", "url": "https://github.com/googleapis/java-bigtable/pull/305#pullrequestreview-435216477", "createdAt": "2020-06-22T19:35:54Z", "commit": {"oid": "33ffd938c06352108ccf7c1e5c970cce27771c72"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4Mjc1MDY4", "url": "https://github.com/googleapis/java-bigtable/pull/305#pullrequestreview-448275068", "createdAt": "2020-07-14T16:35:07Z", "commit": {"oid": "2f6f2c912c219a6358fff019d4ec720e83b65d13"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjozNTowOFrOGxbzQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo0MToyNFrOGxcCtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4ODg5Nw==", "bodyText": "can this be the primitive void?", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r454488897", "createdAt": "2020-07-14T16:35:08Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java", "diffHunk": "@@ -775,6 +789,175 @@ public void awaitReplication(String tableId) {\n         stub.awaitReplicationCallable().futureCall(tableName));\n   }\n \n+  public Backup createBackup(CreateBackupRequest request) {\n+    return ApiExceptions.callAndTranslateApiException(createBackupAsync(request));\n+  }\n+\n+  public ApiFuture<Backup> createBackupAsync(CreateBackupRequest request) {\n+    return ApiFutures.transform(\n+        stub.createBackupOperationCallable().futureCall(request.toProto(projectId, instanceId)),\n+        new ApiFunction<com.google.bigtable.admin.v2.Backup, Backup>() {\n+          @Override\n+          public Backup apply(com.google.bigtable.admin.v2.Backup backupProto) {\n+            return Backup.fromProto(backupProto);\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  public Backup getBackup(String clusterId, String backupId) {\n+    return ApiExceptions.callAndTranslateApiException(getBackupAsync(clusterId, backupId));\n+  }\n+\n+  public ApiFuture<Backup> getBackupAsync(String clusterId, String backupId) {\n+    GetBackupRequest request =\n+        GetBackupRequest.newBuilder()\n+            .setName(NameUtil.formatBackupName(projectId, instanceId, clusterId, backupId))\n+            .build();\n+    return ApiFutures.transform(\n+        this.stub.getBackupCallable().futureCall(request),\n+        new ApiFunction<com.google.bigtable.admin.v2.Backup, Backup>() {\n+          @Override\n+          public Backup apply(com.google.bigtable.admin.v2.Backup backup) {\n+            return Backup.fromProto(backup);\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  public List<String> listBackups(String clusterId) {\n+    return ApiExceptions.callAndTranslateApiException(listBackupsAsync(clusterId));\n+  }\n+\n+  public ApiFuture<List<String>> listBackupsAsync(String clusterId) {\n+    ListBackupsRequest request =\n+        ListBackupsRequest.newBuilder()\n+            .setParent(NameUtil.formatClusterName(projectId, instanceId, clusterId))\n+            .build();\n+\n+    // TODO(igorbernstein2): try to upstream pagination spooling or figure out a way to expose the\n+    // paginated responses while maintaining the wrapper facade.\n+\n+    // Fetches the first page.\n+    ApiFuture<ListBackupsPage> firstPageFuture =\n+        ApiFutures.transform(\n+            stub.listBackupsPagedCallable().futureCall(request),\n+            new ApiFunction<ListBackupsPagedResponse, ListBackupsPage>() {\n+              @Override\n+              public ListBackupsPage apply(ListBackupsPagedResponse response) {\n+                return response.getPage();\n+              }\n+            },\n+            MoreExecutors.directExecutor());\n+\n+    // Fetches the rest of the pages by chaining the futures.\n+    ApiFuture<List<com.google.bigtable.admin.v2.Backup>> allProtos =\n+        ApiFutures.transformAsync(\n+            firstPageFuture,\n+            new ApiAsyncFunction<ListBackupsPage, List<com.google.bigtable.admin.v2.Backup>>() {\n+              List<com.google.bigtable.admin.v2.Backup> responseAccumulator = Lists.newArrayList();\n+\n+              @Override\n+              public ApiFuture<List<com.google.bigtable.admin.v2.Backup>> apply(\n+                  ListBackupsPage page) {\n+                // Add all entries from the page\n+                responseAccumulator.addAll(Lists.newArrayList(page.getValues()));\n+\n+                // If this is the last page, just return the accumulated responses.\n+                if (!page.hasNextPage()) {\n+                  return ApiFutures.immediateFuture(responseAccumulator);\n+                }\n+\n+                // Otherwise fetch the next page.\n+                return ApiFutures.transformAsync(\n+                    page.getNextPageAsync(), this, MoreExecutors.directExecutor());\n+              }\n+            },\n+            MoreExecutors.directExecutor());\n+\n+    // Wraps all of the accumulated protos.\n+    return ApiFutures.transform(\n+        allProtos,\n+        new ApiFunction<List<com.google.bigtable.admin.v2.Backup>, List<String>>() {\n+          @Override\n+          public List<String> apply(List<com.google.bigtable.admin.v2.Backup> protos) {\n+            List<String> results = Lists.newArrayListWithCapacity(protos.size());\n+            for (com.google.bigtable.admin.v2.Backup proto : protos) {\n+              results.add(NameUtil.extractBackupIdFromBackupName(proto.getName()));\n+            }\n+            return results;\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  public void deleteBackup(String clusterId, String backupId) {\n+    ApiExceptions.callAndTranslateApiException(deleteBackupAsync(clusterId, backupId));\n+  }\n+\n+  public ApiFuture<Void> deleteBackupAsync(String clusterId, String backupId) {\n+    DeleteBackupRequest request =\n+        DeleteBackupRequest.newBuilder()\n+            .setName(NameUtil.formatBackupName(projectId, instanceId, clusterId, backupId))\n+            .build();\n+\n+    return transformToVoid(this.stub.deleteBackupCallable().futureCall(request));\n+  }\n+\n+  public Backup updateBackup(UpdateBackupRequest request) {\n+    return ApiExceptions.callAndTranslateApiException(updateBackupAsync(request));\n+  }\n+\n+  public ApiFuture<Backup> updateBackupAsync(UpdateBackupRequest request) {\n+    return ApiFutures.transform(\n+        stub.updateBackupCallable().futureCall(request.toProto(projectId, instanceId)),\n+        new ApiFunction<com.google.bigtable.admin.v2.Backup, Backup>() {\n+          @Override\n+          public Backup apply(com.google.bigtable.admin.v2.Backup proto) {\n+            return Backup.fromProto(proto);\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  public RestoredTableResult restoreTable(RestoreTableRequest request)\n+      throws ExecutionException, InterruptedException {\n+    return ApiExceptions.callAndTranslateApiException(restoreTableAsync(request));\n+  }\n+\n+  public ApiFuture<RestoredTableResult> restoreTableAsync(RestoreTableRequest request) {\n+    final OperationFuture<com.google.bigtable.admin.v2.Table, RestoreTableMetadata> future =\n+        this.stub\n+            .restoreTableOperationCallable()\n+            .futureCall(request.toProto(projectId, instanceId));\n+    return ApiFutures.transformAsync(\n+        future,\n+        new ApiAsyncFunction<com.google.bigtable.admin.v2.Table, RestoredTableResult>() {\n+          @Override\n+          public ApiFuture<RestoredTableResult> apply(com.google.bigtable.admin.v2.Table table)\n+              throws Exception {\n+            return ApiFutures.immediateFuture(\n+                // When apply is called, the future should have been resolved and it's safe to\n+                // pull the metadata.\n+                new RestoredTableResult(\n+                    Table.fromProto(table),\n+                    future.getMetadata().get().getOptimizeTableOperationName()));\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  public Void awaitOptimizeRestoredTable(OptimizeRestoredTableOperationToken token)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6f2c912c219a6358fff019d4ec720e83b65d13"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5MTE0MA==", "bodyText": "Please add Nullable annotations", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r454491140", "createdAt": "2020-07-14T16:38:35Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/Backup.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigtable.admin.v2.models;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.bigtable.admin.v2.BackupName;\n+import com.google.cloud.bigtable.admin.v2.internal.NameUtil;\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+import com.google.protobuf.util.Timestamps;\n+import javax.annotation.Nonnull;\n+import org.threeten.bp.Instant;\n+\n+public class Backup {\n+  public enum State {\n+    /** Not specified. */\n+    STATE_UNSPECIFIED(com.google.bigtable.admin.v2.Backup.State.STATE_UNSPECIFIED),\n+\n+    /**\n+     * The pending backup is still being created. Operations on the backup may fail with\n+     * `FAILED_PRECONDITION` in this state.\n+     */\n+    CREATING(com.google.bigtable.admin.v2.Backup.State.CREATING),\n+    /** The backup is complete and ready for use. */\n+    READY(com.google.bigtable.admin.v2.Backup.State.READY),\n+\n+    /** The state of the backup is not known by this client. Please upgrade your client. */\n+    UNRECOGNIZED(com.google.bigtable.admin.v2.Backup.State.UNRECOGNIZED);\n+\n+    private final com.google.bigtable.admin.v2.Backup.State proto;\n+\n+    State(com.google.bigtable.admin.v2.Backup.State proto) {\n+      this.proto = proto;\n+    }\n+\n+    /**\n+     * Wraps the protobuf. This method is considered an internal implementation detail and not meant\n+     * to be used by applications.\n+     */\n+    @InternalApi\n+    public static Backup.State fromProto(com.google.bigtable.admin.v2.Backup.State proto) {\n+      for (Backup.State state : values()) {\n+        if (state.proto.equals(proto)) {\n+          return state;\n+        }\n+      }\n+      return STATE_UNSPECIFIED;\n+    }\n+\n+    /**\n+     * Creates the request protobuf. This method is considered an internal implementation detail and\n+     * not meant to be used by applications.\n+     */\n+    @InternalApi\n+    public com.google.bigtable.admin.v2.Backup.State toProto() {\n+      return proto;\n+    }\n+  }\n+\n+  @Nonnull private final com.google.bigtable.admin.v2.Backup proto;\n+  @Nonnull private final String id;\n+  @Nonnull private final String instanceId;\n+\n+  @InternalApi\n+  public static Backup fromProto(@Nonnull com.google.bigtable.admin.v2.Backup proto) {\n+    return new Backup(proto);\n+  }\n+\n+  private Backup(@Nonnull com.google.bigtable.admin.v2.Backup proto) {\n+    Preconditions.checkNotNull(proto);\n+    Preconditions.checkArgument(!proto.getName().isEmpty(), \"Name must be set\");\n+    Preconditions.checkArgument(!proto.getSourceTable().isEmpty(), \"Source table must be set\");\n+\n+    BackupName name = BackupName.parse(proto.getName());\n+    this.id = name.getBackup();\n+    this.instanceId = name.getInstance();\n+    this.proto = proto;\n+  }\n+\n+  public String getId() {\n+    return id;\n+  }\n+\n+  public String getSourceTableId() {\n+    return NameUtil.extractTableIdFromTableName(proto.getSourceTable());\n+  }\n+\n+  public String getInstanceId() {\n+    return instanceId;\n+  }\n+\n+  public Instant getExpireTime() {\n+    return Instant.ofEpochMilli(Timestamps.toMillis(proto.getExpireTime()));\n+  }\n+\n+  public Instant getStartTime() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6f2c912c219a6358fff019d4ec720e83b65d13"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5MTIxNA==", "bodyText": "Please add Nullable annotations", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r454491214", "createdAt": "2020-07-14T16:38:44Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/Backup.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigtable.admin.v2.models;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.bigtable.admin.v2.BackupName;\n+import com.google.cloud.bigtable.admin.v2.internal.NameUtil;\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+import com.google.protobuf.util.Timestamps;\n+import javax.annotation.Nonnull;\n+import org.threeten.bp.Instant;\n+\n+public class Backup {\n+  public enum State {\n+    /** Not specified. */\n+    STATE_UNSPECIFIED(com.google.bigtable.admin.v2.Backup.State.STATE_UNSPECIFIED),\n+\n+    /**\n+     * The pending backup is still being created. Operations on the backup may fail with\n+     * `FAILED_PRECONDITION` in this state.\n+     */\n+    CREATING(com.google.bigtable.admin.v2.Backup.State.CREATING),\n+    /** The backup is complete and ready for use. */\n+    READY(com.google.bigtable.admin.v2.Backup.State.READY),\n+\n+    /** The state of the backup is not known by this client. Please upgrade your client. */\n+    UNRECOGNIZED(com.google.bigtable.admin.v2.Backup.State.UNRECOGNIZED);\n+\n+    private final com.google.bigtable.admin.v2.Backup.State proto;\n+\n+    State(com.google.bigtable.admin.v2.Backup.State proto) {\n+      this.proto = proto;\n+    }\n+\n+    /**\n+     * Wraps the protobuf. This method is considered an internal implementation detail and not meant\n+     * to be used by applications.\n+     */\n+    @InternalApi\n+    public static Backup.State fromProto(com.google.bigtable.admin.v2.Backup.State proto) {\n+      for (Backup.State state : values()) {\n+        if (state.proto.equals(proto)) {\n+          return state;\n+        }\n+      }\n+      return STATE_UNSPECIFIED;\n+    }\n+\n+    /**\n+     * Creates the request protobuf. This method is considered an internal implementation detail and\n+     * not meant to be used by applications.\n+     */\n+    @InternalApi\n+    public com.google.bigtable.admin.v2.Backup.State toProto() {\n+      return proto;\n+    }\n+  }\n+\n+  @Nonnull private final com.google.bigtable.admin.v2.Backup proto;\n+  @Nonnull private final String id;\n+  @Nonnull private final String instanceId;\n+\n+  @InternalApi\n+  public static Backup fromProto(@Nonnull com.google.bigtable.admin.v2.Backup proto) {\n+    return new Backup(proto);\n+  }\n+\n+  private Backup(@Nonnull com.google.bigtable.admin.v2.Backup proto) {\n+    Preconditions.checkNotNull(proto);\n+    Preconditions.checkArgument(!proto.getName().isEmpty(), \"Name must be set\");\n+    Preconditions.checkArgument(!proto.getSourceTable().isEmpty(), \"Source table must be set\");\n+\n+    BackupName name = BackupName.parse(proto.getName());\n+    this.id = name.getBackup();\n+    this.instanceId = name.getInstance();\n+    this.proto = proto;\n+  }\n+\n+  public String getId() {\n+    return id;\n+  }\n+\n+  public String getSourceTableId() {\n+    return NameUtil.extractTableIdFromTableName(proto.getSourceTable());\n+  }\n+\n+  public String getInstanceId() {\n+    return instanceId;\n+  }\n+\n+  public Instant getExpireTime() {\n+    return Instant.ofEpochMilli(Timestamps.toMillis(proto.getExpireTime()));\n+  }\n+\n+  public Instant getStartTime() {\n+    if (proto.hasStartTime()) {\n+      return Instant.ofEpochMilli(Timestamps.toMillis(proto.getStartTime()));\n+    }\n+    return null;\n+  }\n+\n+  public Instant getEndTime() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6f2c912c219a6358fff019d4ec720e83b65d13"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5Mjg1Mg==", "bodyText": "That looks fishy", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r454492852", "createdAt": "2020-07-14T16:41:24Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/OptimizeRestoredTableOperationToken.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.models;\n+\n+import autovalue.shaded.com.google$.common.base.$Preconditions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6f2c912c219a6358fff019d4ec720e83b65d13"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjU1Njg4", "url": "https://github.com/googleapis/java-bigtable/pull/305#pullrequestreview-450255688", "createdAt": "2020-07-16T22:20:54Z", "commit": {"oid": "f835e0994a4df76dd4b4834acf0e71e0cce389a9"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjoyMDo1NFrOGy-zQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjoyNjo0MlrOGy-7mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExMDkxMg==", "bodyText": "javadoc please", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r456110912", "createdAt": "2020-07-16T22:20:54Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoredTableResult.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.models;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.common.base.Strings;\n+import javax.annotation.Nullable;\n+\n+public class RestoredTableResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f835e0994a4df76dd4b4834acf0e71e0cce389a9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExMTAzOA==", "bodyText": "javadoc and in particular note why the token would be null here", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r456111038", "createdAt": "2020-07-16T22:21:17Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoredTableResult.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.models;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.common.base.Strings;\n+import javax.annotation.Nullable;\n+\n+public class RestoredTableResult {\n+\n+  private final Table table;\n+  private final OptimizeRestoredTableOperationToken optimizeRestoredTableOperationToken;\n+\n+  @InternalApi\n+  public RestoredTableResult(\n+      Table restoredTable, @Nullable String optimizeRestoredTableOperationName) {\n+    this.table = restoredTable;\n+    this.optimizeRestoredTableOperationToken =\n+        Strings.isNullOrEmpty(optimizeRestoredTableOperationName)\n+            ? null\n+            : OptimizeRestoredTableOperationToken.of(optimizeRestoredTableOperationName);\n+  }\n+\n+  public Table getTable() {\n+    return table;\n+  }\n+\n+  @Nullable\n+  public OptimizeRestoredTableOperationToken getOptimizeRestoredTableOperationToken() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f835e0994a4df76dd4b4834acf0e71e0cce389a9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExMjAzOA==", "bodyText": "The integration tests should use the existing testing infrastructure:\nhttps://github.com/googleapis/java-bigtable/tree/master/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r456112038", "createdAt": "2020-07-16T22:24:06Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/it/BigtableBackupIT.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.it;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static io.grpc.Status.Code.NOT_FOUND;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutures;\n+import com.google.api.gax.rpc.ApiException;\n+import com.google.cloud.bigtable.admin.v2.BigtableTableAdminClient;\n+import com.google.cloud.bigtable.admin.v2.BigtableTableAdminSettings;\n+import com.google.cloud.bigtable.admin.v2.models.Backup;\n+import com.google.cloud.bigtable.admin.v2.models.CreateBackupRequest;\n+import com.google.cloud.bigtable.admin.v2.models.CreateTableRequest;\n+import com.google.cloud.bigtable.admin.v2.models.RestoreTableRequest;\n+import com.google.cloud.bigtable.admin.v2.models.RestoredTableResult;\n+import com.google.cloud.bigtable.admin.v2.models.Table;\n+import com.google.cloud.bigtable.admin.v2.models.UpdateBackupRequest;\n+import com.google.cloud.bigtable.data.v2.BigtableDataClient;\n+import com.google.cloud.bigtable.data.v2.BigtableDataSettings;\n+import com.google.cloud.bigtable.data.v2.models.RowMutation;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Lists;\n+import com.google.protobuf.Timestamp;\n+import io.grpc.StatusRuntimeException;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.logging.Logger;\n+import org.junit.*;\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.Instant;\n+\n+public class BigtableBackupIT {\n+  private static final Logger LOGGER = Logger.getLogger(BigtableBackupIT.class.getName());\n+\n+  private static final String PROJECT_PROPERTY_NAME = \"bigtable.project\";\n+  private static final String INSTANCE_PROPERTY_NAME = \"bigtable.instance\";\n+  private static final String CLUSTER_PROPERTY_NAME = \"bigtable.cluster\";\n+  private static final String ADMIN_ENDPOINT_PROPERTY_NAME = \"bigtable.adminendpoint\";\n+  private static final String DATA_ENDPOINT_PROPERTY_NAME = \"bigtable.dataendpoint\";\n+  private static final String TABLE_SIZE_PROPERTY_NAME = \"bigtable.tablesizekb\";\n+  private static final int[] BACKOFF_DURATION = {2, 4, 8, 16, 32, 64, 128, 256, 512, 1024};\n+\n+  private static final String TEST_TABLE_SUFFIX = \"test-table-for-backup-it\";\n+  private static final String TEST_BACKUP_SUFFIX = \"test-backup-for-backup-it\";\n+\n+  private static final int DAYS_IN_SECONDS = 24 * 60 * 60;\n+\n+  private static BigtableTableAdminClient tableAdmin;\n+  private static BigtableDataClient dataClient;\n+\n+  private static String targetProject;\n+  private static String targetInstance;\n+  private static String targetCluster;\n+  private static Table testTable;\n+  private static String prefix;\n+\n+  @BeforeClass\n+  public static void createClient()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f835e0994a4df76dd4b4834acf0e71e0cce389a9"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExMjczNA==", "bodyText": "Does this need to be specified? Can it just be the first cluster in the instance?", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r456112734", "createdAt": "2020-07-16T22:25:56Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/it/BigtableBackupIT.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.it;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static io.grpc.Status.Code.NOT_FOUND;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutures;\n+import com.google.api.gax.rpc.ApiException;\n+import com.google.cloud.bigtable.admin.v2.BigtableTableAdminClient;\n+import com.google.cloud.bigtable.admin.v2.BigtableTableAdminSettings;\n+import com.google.cloud.bigtable.admin.v2.models.Backup;\n+import com.google.cloud.bigtable.admin.v2.models.CreateBackupRequest;\n+import com.google.cloud.bigtable.admin.v2.models.CreateTableRequest;\n+import com.google.cloud.bigtable.admin.v2.models.RestoreTableRequest;\n+import com.google.cloud.bigtable.admin.v2.models.RestoredTableResult;\n+import com.google.cloud.bigtable.admin.v2.models.Table;\n+import com.google.cloud.bigtable.admin.v2.models.UpdateBackupRequest;\n+import com.google.cloud.bigtable.data.v2.BigtableDataClient;\n+import com.google.cloud.bigtable.data.v2.BigtableDataSettings;\n+import com.google.cloud.bigtable.data.v2.models.RowMutation;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Lists;\n+import com.google.protobuf.Timestamp;\n+import io.grpc.StatusRuntimeException;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.logging.Logger;\n+import org.junit.*;\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.Instant;\n+\n+public class BigtableBackupIT {\n+  private static final Logger LOGGER = Logger.getLogger(BigtableBackupIT.class.getName());\n+\n+  private static final String PROJECT_PROPERTY_NAME = \"bigtable.project\";\n+  private static final String INSTANCE_PROPERTY_NAME = \"bigtable.instance\";\n+  private static final String CLUSTER_PROPERTY_NAME = \"bigtable.cluster\";\n+  private static final String ADMIN_ENDPOINT_PROPERTY_NAME = \"bigtable.adminendpoint\";\n+  private static final String DATA_ENDPOINT_PROPERTY_NAME = \"bigtable.dataendpoint\";\n+  private static final String TABLE_SIZE_PROPERTY_NAME = \"bigtable.tablesizekb\";\n+  private static final int[] BACKOFF_DURATION = {2, 4, 8, 16, 32, 64, 128, 256, 512, 1024};\n+\n+  private static final String TEST_TABLE_SUFFIX = \"test-table-for-backup-it\";\n+  private static final String TEST_BACKUP_SUFFIX = \"test-backup-for-backup-it\";\n+\n+  private static final int DAYS_IN_SECONDS = 24 * 60 * 60;\n+\n+  private static BigtableTableAdminClient tableAdmin;\n+  private static BigtableDataClient dataClient;\n+\n+  private static String targetProject;\n+  private static String targetInstance;\n+  private static String targetCluster;\n+  private static Table testTable;\n+  private static String prefix;\n+\n+  @BeforeClass\n+  public static void createClient()\n+      throws IOException, InterruptedException, ExecutionException, TimeoutException {\n+    List<String> missingProperties = Lists.newArrayList();\n+\n+    targetProject = System.getProperty(PROJECT_PROPERTY_NAME);\n+    if (targetProject == null) {\n+      missingProperties.add(PROJECT_PROPERTY_NAME);\n+    }\n+\n+    targetInstance = System.getProperty(INSTANCE_PROPERTY_NAME);\n+    if (targetInstance == null) {\n+      missingProperties.add(INSTANCE_PROPERTY_NAME);\n+    }\n+\n+    targetCluster = System.getProperty(CLUSTER_PROPERTY_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f835e0994a4df76dd4b4834acf0e71e0cce389a9"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExMzA0OA==", "bodyText": "When would we want to change this?", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r456113048", "createdAt": "2020-07-16T22:26:42Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/it/BigtableBackupIT.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.it;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static io.grpc.Status.Code.NOT_FOUND;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutures;\n+import com.google.api.gax.rpc.ApiException;\n+import com.google.cloud.bigtable.admin.v2.BigtableTableAdminClient;\n+import com.google.cloud.bigtable.admin.v2.BigtableTableAdminSettings;\n+import com.google.cloud.bigtable.admin.v2.models.Backup;\n+import com.google.cloud.bigtable.admin.v2.models.CreateBackupRequest;\n+import com.google.cloud.bigtable.admin.v2.models.CreateTableRequest;\n+import com.google.cloud.bigtable.admin.v2.models.RestoreTableRequest;\n+import com.google.cloud.bigtable.admin.v2.models.RestoredTableResult;\n+import com.google.cloud.bigtable.admin.v2.models.Table;\n+import com.google.cloud.bigtable.admin.v2.models.UpdateBackupRequest;\n+import com.google.cloud.bigtable.data.v2.BigtableDataClient;\n+import com.google.cloud.bigtable.data.v2.BigtableDataSettings;\n+import com.google.cloud.bigtable.data.v2.models.RowMutation;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Lists;\n+import com.google.protobuf.Timestamp;\n+import io.grpc.StatusRuntimeException;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.logging.Logger;\n+import org.junit.*;\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.Instant;\n+\n+public class BigtableBackupIT {\n+  private static final Logger LOGGER = Logger.getLogger(BigtableBackupIT.class.getName());\n+\n+  private static final String PROJECT_PROPERTY_NAME = \"bigtable.project\";\n+  private static final String INSTANCE_PROPERTY_NAME = \"bigtable.instance\";\n+  private static final String CLUSTER_PROPERTY_NAME = \"bigtable.cluster\";\n+  private static final String ADMIN_ENDPOINT_PROPERTY_NAME = \"bigtable.adminendpoint\";\n+  private static final String DATA_ENDPOINT_PROPERTY_NAME = \"bigtable.dataendpoint\";\n+  private static final String TABLE_SIZE_PROPERTY_NAME = \"bigtable.tablesizekb\";\n+  private static final int[] BACKOFF_DURATION = {2, 4, 8, 16, 32, 64, 128, 256, 512, 1024};\n+\n+  private static final String TEST_TABLE_SUFFIX = \"test-table-for-backup-it\";\n+  private static final String TEST_BACKUP_SUFFIX = \"test-backup-for-backup-it\";\n+\n+  private static final int DAYS_IN_SECONDS = 24 * 60 * 60;\n+\n+  private static BigtableTableAdminClient tableAdmin;\n+  private static BigtableDataClient dataClient;\n+\n+  private static String targetProject;\n+  private static String targetInstance;\n+  private static String targetCluster;\n+  private static Table testTable;\n+  private static String prefix;\n+\n+  @BeforeClass\n+  public static void createClient()\n+      throws IOException, InterruptedException, ExecutionException, TimeoutException {\n+    List<String> missingProperties = Lists.newArrayList();\n+\n+    targetProject = System.getProperty(PROJECT_PROPERTY_NAME);\n+    if (targetProject == null) {\n+      missingProperties.add(PROJECT_PROPERTY_NAME);\n+    }\n+\n+    targetInstance = System.getProperty(INSTANCE_PROPERTY_NAME);\n+    if (targetInstance == null) {\n+      missingProperties.add(INSTANCE_PROPERTY_NAME);\n+    }\n+\n+    targetCluster = System.getProperty(CLUSTER_PROPERTY_NAME);\n+    if (targetCluster == null) {\n+      missingProperties.add(CLUSTER_PROPERTY_NAME);\n+    }\n+\n+    String adminApiEndpoint = System.getProperty(ADMIN_ENDPOINT_PROPERTY_NAME);\n+    if (adminApiEndpoint == null) {\n+      adminApiEndpoint = \"bigtableadmin.googleapis.com:443\";\n+    }\n+\n+    int tableSize = MoreObjects.firstNonNull(Integer.getInteger(TABLE_SIZE_PROPERTY_NAME), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f835e0994a4df76dd4b4834acf0e71e0cce389a9"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7a909b03dd241707b38778c0bc61880c7f41e53", "author": {"user": {"login": "liubonan", "name": "Bonan Liu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/e7a909b03dd241707b38778c0bc61880c7f41e53", "committedDate": "2020-07-20T19:48:31Z", "message": "feat: Cloud Bigtable Managed Backup Implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxOTM0NTQx", "url": "https://github.com/googleapis/java-bigtable/pull/305#pullrequestreview-451934541", "createdAt": "2020-07-20T20:27:28Z", "commit": {"oid": "e7a909b03dd241707b38778c0bc61880c7f41e53"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1114, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}