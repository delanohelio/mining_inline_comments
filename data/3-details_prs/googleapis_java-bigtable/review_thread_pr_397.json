{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MzE5NzEw", "number": 397, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDowNzoxNFrOEeUqqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxODowMFrOEfaFKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjMxMzM2OnYy", "diffSide": "RIGHT", "path": "proto-google-cloud-bigtable-v2/src/main/java/com/google/bigtable/v2/RowFilterOrBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDowNzoxNFrOHJ6VHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxMDoyOFrOHLqNNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE1NDkxMA==", "bodyText": "unfortunately anything in the proto-* or grpc-* modules are auto generated and cannot be modified by hand.", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r480154910", "createdAt": "2020-08-31T14:07:14Z", "author": {"login": "kolea2"}, "path": "proto-google-cloud-bigtable-v2/src/main/java/com/google/bigtable/v2/RowFilterOrBuilder.java", "diffHunk": "@@ -18,10 +18,13 @@\n \n package com.google.bigtable.v2;\n \n+import java.io.Serializable;\n+\n public interface RowFilterOrBuilder\n     extends\n-    // @@protoc_insertion_point(interface_extends:google.bigtable.v2.RowFilter)\n-    com.google.protobuf.MessageOrBuilder {\n+        // @@protoc_insertion_point(interface_extends:google.bigtable.v2.RowFilter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4Nzg5Mg==", "bodyText": "thanks, the changes are rolled back.", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481987892", "createdAt": "2020-09-02T11:10:28Z", "author": {"login": "dmitry-fa"}, "path": "proto-google-cloud-bigtable-v2/src/main/java/com/google/bigtable/v2/RowFilterOrBuilder.java", "diffHunk": "@@ -18,10 +18,13 @@\n \n package com.google.bigtable.v2;\n \n+import java.io.Serializable;\n+\n public interface RowFilterOrBuilder\n     extends\n-    // @@protoc_insertion_point(interface_extends:google.bigtable.v2.RowFilter)\n-    com.google.protobuf.MessageOrBuilder {\n+        // @@protoc_insertion_point(interface_extends:google.bigtable.v2.RowFilter)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE1NDkxMA=="}, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjk3NTIyOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjo0OTo1M1rOHKAi1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxMDo0MlrOHLqNsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1NjcyNw==", "bodyText": "Can we avoid file creation and use a Byte{Input,Output}Stream instead?", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r480256727", "createdAt": "2020-08-31T16:49:53Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +540,44 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    // map methodName -> methodArguments (for those methods which require parameters)\n+    Map<String, Object[]> parameterMap = new HashMap<>();\n+    parameterMap.put(\"condition\", new Object[] {FILTERS.pass()});\n+    parameterMap.put(\"label\", new Object[] {\"label\"});\n+    parameterMap.put(\"fromProto\", new Object[] {FILTERS.label(\"label\").toProto()});\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        Object[] params = parameterMap.get(name);\n+        if (params == null) {\n+          params = new Object[] {};\n+        }\n+        try {\n+          trySerialization(m.invoke(FILTERS, params));\n+        } catch (Exception e) {\n+          fail(name + \": \" + e);\n+        }\n+      }\n+    }\n+  }\n+\n+  private void trySerialization(Object obj) throws IOException, ClassNotFoundException {\n+    Path serFile = Files.createTempFile(\"filter\", \".ser\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4ODAxOQ==", "bodyText": "done", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481988019", "createdAt": "2020-09-02T11:10:42Z", "author": {"login": "dmitry-fa"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +540,44 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    // map methodName -> methodArguments (for those methods which require parameters)\n+    Map<String, Object[]> parameterMap = new HashMap<>();\n+    parameterMap.put(\"condition\", new Object[] {FILTERS.pass()});\n+    parameterMap.put(\"label\", new Object[] {\"label\"});\n+    parameterMap.put(\"fromProto\", new Object[] {FILTERS.label(\"label\").toProto()});\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        Object[] params = parameterMap.get(name);\n+        if (params == null) {\n+          params = new Object[] {};\n+        }\n+        try {\n+          trySerialization(m.invoke(FILTERS, params));\n+        } catch (Exception e) {\n+          fail(name + \": \" + e);\n+        }\n+      }\n+    }\n+  }\n+\n+  private void trySerialization(Object obj) throws IOException, ClassNotFoundException {\n+    Path serFile = Files.createTempFile(\"filter\", \".ser\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1NjcyNw=="}, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzAwMTYxOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjo1NjoxNlrOHKAz7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxMzo0N1rOHLqTdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MTEwMg==", "bodyText": "I think it would be cleaner to restructure this as:\nif (!public) { continue };\n\nswitch(name) {\n  case \"condition\":\n    assertSerializable(FILTERS.condition(FILTERS.pass());\n    break;\n  case \"label\": ...\n  case \"fromProto\": ...\n  default:\n   assertSerializable(m.invoke());\n}```", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r480261102", "createdAt": "2020-08-31T16:56:16Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +540,44 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    // map methodName -> methodArguments (for those methods which require parameters)\n+    Map<String, Object[]> parameterMap = new HashMap<>();\n+    parameterMap.put(\"condition\", new Object[] {FILTERS.pass()});\n+    parameterMap.put(\"label\", new Object[] {\"label\"});\n+    parameterMap.put(\"fromProto\", new Object[] {FILTERS.label(\"label\").toProto()});\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        Object[] params = parameterMap.get(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4OTQ5Mw==", "bodyText": "done with a minor change:\nif (!public) {continue} \nswtich()...\n\n->\nif (public) {\n  swtich()...\n} \n\nI don't like using continue, but if you insist, I'll update as you suggested.", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481989493", "createdAt": "2020-09-02T11:13:47Z", "author": {"login": "dmitry-fa"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +540,44 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    // map methodName -> methodArguments (for those methods which require parameters)\n+    Map<String, Object[]> parameterMap = new HashMap<>();\n+    parameterMap.put(\"condition\", new Object[] {FILTERS.pass()});\n+    parameterMap.put(\"label\", new Object[] {\"label\"});\n+    parameterMap.put(\"fromProto\", new Object[] {FILTERS.label(\"label\").toProto()});\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        Object[] params = parameterMap.get(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MTEwMg=="}, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzAwNzYxOnYy", "diffSide": "RIGHT", "path": "proto-google-cloud-bigtable-v2/src/main/java/com/google/bigtable/v2/RowFilter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjo1Nzo1OFrOHKA3vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNDoxNVrOHLqUiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MjA3Nw==", "bodyText": "This an autogenerated file, you cant modify it", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r480262077", "createdAt": "2020-08-31T16:57:58Z", "author": {"login": "igorbernstein2"}, "path": "proto-google-cloud-bigtable-v2/src/main/java/com/google/bigtable/v2/RowFilter.java", "diffHunk": "@@ -18,6 +18,8 @@\n \n package com.google.bigtable.v2;\n \n+import java.io.Serializable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1NjQzMA==", "bodyText": "Yes, I see. Is there any way to customize the way how this class is generated?", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481256430", "createdAt": "2020-09-01T16:02:45Z", "author": {"login": "dmitry-fa"}, "path": "proto-google-cloud-bigtable-v2/src/main/java/com/google/bigtable/v2/RowFilter.java", "diffHunk": "@@ -18,6 +18,8 @@\n \n package com.google.bigtable.v2;\n \n+import java.io.Serializable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MjA3Nw=="}, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwOTAyNw==", "bodyText": "Oh, looks like it's not needed.", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481309027", "createdAt": "2020-09-01T17:21:33Z", "author": {"login": "dmitry-fa"}, "path": "proto-google-cloud-bigtable-v2/src/main/java/com/google/bigtable/v2/RowFilter.java", "diffHunk": "@@ -18,6 +18,8 @@\n \n package com.google.bigtable.v2;\n \n+import java.io.Serializable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MjA3Nw=="}, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4OTc2OQ==", "bodyText": "changes are rolled back.", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481989769", "createdAt": "2020-09-02T11:14:15Z", "author": {"login": "dmitry-fa"}, "path": "proto-google-cloud-bigtable-v2/src/main/java/com/google/bigtable/v2/RowFilter.java", "diffHunk": "@@ -18,6 +18,8 @@\n \n package com.google.bigtable.v2;\n \n+import java.io.Serializable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MjA3Nw=="}, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzAyMDEzOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/Filters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzowMTozMlrOHKA_Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzowMTozMlrOHKA_Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NDAxOQ==", "bodyText": "Here and everwhere else: The proto builders will need to be marked transient and you will need to implement writeObject/readObject to serialize the built protos:\nvoid writeObject(ObjectOutputStream s) {\n  s.defaultWriteObject();\n  s.writeObject(builder.build());\n}", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r480264019", "createdAt": "2020-08-31T17:01:32Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/Filters.java", "diffHunk": "@@ -200,6 +200,7 @@ public Filter label(@Nonnull String label) {\n   // Implementations of target specific filters.\n   /** DSL for adding filters to a chain. */\n   public static final class ChainFilter implements Filter {\n+    private static final long serialVersionUID = -89237431180618430L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzY3Njc3OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNTowOVrOHLqWbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNToxNToyOVrOHV_Wjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDI1Mw==", "bodyText": "why if? when is this false?", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481990253", "createdAt": "2020-09-02T11:15:09Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MjQyNw==", "bodyText": "Filters.Filter interface declares toProto() which I can call to verify the deserialized object.\nIf this is false, I can't check anything more.", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481992427", "createdAt": "2020-09-02T11:19:24Z", "author": {"login": "dmitry-fa"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDI1Mw=="}, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAxNzQwMw==", "bodyText": "But when is it false? from what I can tell all methods defined on Filters return a Filter. If I'm missing something and there are methods that dont return a Filter, then we need to have an explicit whitelist. As it stands its very easy for this test to miss testing a method", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r482017403", "createdAt": "2020-09-02T12:06:52Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDI1Mw=="}, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAyNDE4NA==", "bodyText": "it's ~50-50:\na filter 'condition' ConditionFilter\na filter 'label' SimpleFilter\na filter 'chain' ChainFilter\na filter 'interleave' InterleaveFilter\na filter 'pass' SimpleFilter\na filter 'block' SimpleFilter\na filter 'sink' SimpleFilter\nnot a filter 'family' FamilyFilter\nnot a filter 'fromProto' RowFilter\nnot a filter 'qualifier' QualifierFilter\nnot a filter 'limit' LimitFilter\nnot a filter 'value' ValueFilter\nnot a filter 'offset' OffsetFilter\nnot a filter 'key' KeyFilter\nnot a filter 'timestamp' TimestampFilter", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r482024184", "createdAt": "2020-09-02T12:20:03Z", "author": {"login": "dmitry-fa"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDI1Mw=="}, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAyNzc3OA==", "bodyText": "So that means the vast majority of the filters arent getting tested, right?\nie we would want to ensure that qualifier().regex() produces a serializable filter. I think we would want to include a switch case for the not filters and do another loop:\nswitch(name) {\ncase \"qualifier\":\nverifyQualifierFilters();\n...\n}\nverifyQualifierFilters(QualifierFilter f) {\nfor (Method m : f.class.getDeclaredMethods()) {\n// ...\n}", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r482027778", "createdAt": "2020-09-02T12:26:27Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDI1Mw=="}, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4Mzk4MA==", "bodyText": "qualifier().regex()  does not use any object fields it could be made static, so serialization-deserialization doesn't affect it.\nI suggested a better approach to verify non-filter instances, please check.", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r482083980", "createdAt": "2020-09-02T13:50:02Z", "author": {"login": "dmitry-fa"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDI1Mw=="}, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwNzE3Nw==", "bodyText": "@igorbernstein2 please take a look at new tests", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r490807177", "createdAt": "2020-09-18T09:04:11Z", "author": {"login": "dmitry-fa"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDI1Mw=="}, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgyMDExMA==", "bodyText": "@igorbernstein2 gentle ping, in case you missed this update of the tests. I did as you asked for.", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r492820110", "createdAt": "2020-09-22T15:15:29Z", "author": {"login": "dmitry-fa"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDI1Mw=="}, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzY4MTEzOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNjozMFrOHLqZAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTo0Nzo1M1rOHLrZvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDkxNQ==", "bodyText": "Please use https://truth.dev/", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481990915", "createdAt": "2020-09-02T11:16:30Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {\n+        RowFilter protoBefore = ((Filters.Filter) filter).toProto();\n+        RowFilter protoAfter = ((Filters.Filter) deserialized).toProto();\n+        assertEquals(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAwNzQ4Nw==", "bodyText": "done", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r482007487", "createdAt": "2020-09-02T11:47:53Z", "author": {"login": "dmitry-fa"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {\n+        RowFilter protoBefore = ((Filters.Filter) filter).toProto();\n+        RowFilter protoAfter = ((Filters.Filter) deserialized).toProto();\n+        assertEquals(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDkxNQ=="}, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzY4MjA5OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNjo0OVrOHLqZmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTo0ODowMlrOHLraBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MTA2NQ==", "bodyText": "static?", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481991065", "createdAt": "2020-09-02T11:16:49Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {\n+        RowFilter protoBefore = ((Filters.Filter) filter).toProto();\n+        RowFilter protoAfter = ((Filters.Filter) deserialized).toProto();\n+        assertEquals(\n+            \"'\" + name + \"' filter protoBuf mismatch after deserialization\",\n+            protoBefore,\n+            protoAfter);\n+      }\n+    } catch (IOException | ClassNotFoundException e) {\n+      fail(name + \": \" + e);\n+    }\n+  }\n+\n+  private Object serializeDeserialize(Object obj) throws IOException, ClassNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MzgyOA==", "bodyText": "yes.\nI'm thinking about moving this method to a utility class because it's very generic and could be used by any tests for serialization. Do you know a better place for it?", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481993828", "createdAt": "2020-09-02T11:21:59Z", "author": {"login": "dmitry-fa"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {\n+        RowFilter protoBefore = ((Filters.Filter) filter).toProto();\n+        RowFilter protoAfter = ((Filters.Filter) deserialized).toProto();\n+        assertEquals(\n+            \"'\" + name + \"' filter protoBuf mismatch after deserialization\",\n+            protoBefore,\n+            protoAfter);\n+      }\n+    } catch (IOException | ClassNotFoundException e) {\n+      fail(name + \": \" + e);\n+    }\n+  }\n+\n+  private Object serializeDeserialize(Object obj) throws IOException, ClassNotFoundException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MTA2NQ=="}, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAwNzU1Ng==", "bodyText": "done", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r482007556", "createdAt": "2020-09-02T11:48:02Z", "author": {"login": "dmitry-fa"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {\n+        RowFilter protoBefore = ((Filters.Filter) filter).toProto();\n+        RowFilter protoAfter = ((Filters.Filter) deserialized).toProto();\n+        assertEquals(\n+            \"'\" + name + \"' filter protoBuf mismatch after deserialization\",\n+            protoBefore,\n+            protoAfter);\n+      }\n+    } catch (IOException | ClassNotFoundException e) {\n+      fail(name + \": \" + e);\n+    }\n+  }\n+\n+  private Object serializeDeserialize(Object obj) throws IOException, ClassNotFoundException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MTA2NQ=="}, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzY4Mjc1OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNzowMlrOHLqaDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTo0ODowN1rOHLraNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MTE4MQ==", "bodyText": "static?", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481991181", "createdAt": "2020-09-02T11:17:02Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAwNzYwNg==", "bodyText": "done", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r482007606", "createdAt": "2020-09-02T11:48:07Z", "author": {"login": "dmitry-fa"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MTE4MQ=="}, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzY4NjE4OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxODowMFrOHLqcGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToyODowMFrOHLqxSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MTcwNQ==", "bodyText": "why not just bubble the exception up?", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481991705", "createdAt": "2020-09-02T11:18:00Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {\n+        RowFilter protoBefore = ((Filters.Filter) filter).toProto();\n+        RowFilter protoAfter = ((Filters.Filter) deserialized).toProto();\n+        assertEquals(\n+            \"'\" + name + \"' filter protoBuf mismatch after deserialization\",\n+            protoBefore,\n+            protoAfter);\n+      }\n+    } catch (IOException | ClassNotFoundException e) {\n+      fail(name + \": \" + e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5NzEyOQ==", "bodyText": "in case of this exception, one will have a hard time trying to find which filter caused it. fail(name + \": \" + e) tells the name of filter in trouble.", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481997129", "createdAt": "2020-09-02T11:28:00Z", "author": {"login": "dmitry-fa"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {\n+        RowFilter protoBefore = ((Filters.Filter) filter).toProto();\n+        RowFilter protoAfter = ((Filters.Filter) deserialized).toProto();\n+        assertEquals(\n+            \"'\" + name + \"' filter protoBuf mismatch after deserialization\",\n+            protoBefore,\n+            protoAfter);\n+      }\n+    } catch (IOException | ClassNotFoundException e) {\n+      fail(name + \": \" + e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MTcwNQ=="}, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3381, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}