{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNjQyMDMz", "number": 276, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowNTo0M1rOD4fA7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowNjowNVrOD4fBPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU0OTkxOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowNTo0M1rOGPVucQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowNTo0M1rOGPVucQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczNzc3Nw==", "bodyText": "Please mark this as BetaApi and add a disclaimer that this method might be removed in the future", "url": "https://github.com/googleapis/java-bigtable/pull/276#discussion_r418737777", "createdAt": "2020-05-01T21:05:43Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -230,6 +230,66 @@ private EnhancedBigtableStub(\n   private <RowT> ServerStreamingCallable<Query, RowT> createReadRowsBaseCallable(\n       ServerStreamingCallSettings<Query, Row> readRowsSettings, RowAdapter<RowT> rowAdapter) {\n \n+    return new ReadRowsUserCallable<>(\n+        createReadRowsRawCallable(readRowsSettings, rowAdapter), requestContext);\n+  }\n+\n+  /**\n+   * Creates a callable chain to handle ReadRows RPCs. The chain will:\n+   *\n+   * <ul>\n+   *   <li>Dispatch the RPC with {@link ReadRowsRequest}.\n+   *   <li>Upon receiving the response stream, it will merge the {@link\n+   *       com.google.bigtable.v2.ReadRowsResponse.CellChunk}s in logical rows. The actual row\n+   *       implementation can be configured by the {@code rowAdapter} parameter.\n+   *   <li>Retry/resume on failure.\n+   *   <li>Filter out marker rows.\n+   * </ul>\n+   *\n+   * <p>NOTE: the caller is responsible for adding tracing & metrics.\n+   */\n+  public <RowT> ServerStreamingCallable<ReadRowsRequest, RowT> createReadRowsRawCallable(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb025ae15fdc87c17c4d358a34dc4abcf4e82c63"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU1MDY5OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowNjowNVrOGPVu8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowNjowNVrOGPVu8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczNzkwNQ==", "bodyText": "This should not be public", "url": "https://github.com/googleapis/java-bigtable/pull/276#discussion_r418737905", "createdAt": "2020-05-01T21:06:05Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -230,6 +230,66 @@ private EnhancedBigtableStub(\n   private <RowT> ServerStreamingCallable<Query, RowT> createReadRowsBaseCallable(\n       ServerStreamingCallSettings<Query, Row> readRowsSettings, RowAdapter<RowT> rowAdapter) {\n \n+    return new ReadRowsUserCallable<>(\n+        createReadRowsRawCallable(readRowsSettings, rowAdapter), requestContext);\n+  }\n+\n+  /**\n+   * Creates a callable chain to handle ReadRows RPCs. The chain will:\n+   *\n+   * <ul>\n+   *   <li>Dispatch the RPC with {@link ReadRowsRequest}.\n+   *   <li>Upon receiving the response stream, it will merge the {@link\n+   *       com.google.bigtable.v2.ReadRowsResponse.CellChunk}s in logical rows. The actual row\n+   *       implementation can be configured by the {@code rowAdapter} parameter.\n+   *   <li>Retry/resume on failure.\n+   *   <li>Filter out marker rows.\n+   * </ul>\n+   *\n+   * <p>NOTE: the caller is responsible for adding tracing & metrics.\n+   */\n+  public <RowT> ServerStreamingCallable<ReadRowsRequest, RowT> createReadRowsRawCallable(\n+      RowAdapter<RowT> adapter) {\n+    return createReadRowsBaseCallable(adapter)\n+        .withDefaultCallContext(clientContext.getDefaultCallContext());\n+  }\n+\n+  /**\n+   * Creates a callable chain to handle ReadRows RPCs. The chain will:\n+   *\n+   * <ul>\n+   *   <li>Dispatch the RPC with {@link ReadRowsRequest}.\n+   *   <li>Upon receiving the response stream, it will merge the {@link\n+   *       com.google.bigtable.v2.ReadRowsResponse.CellChunk}s in logical rows. The actual row\n+   *       implementation can be configured by the {@code rowAdapter} parameter.\n+   *   <li>Retry/resume on failure.\n+   *   <li>Filter out marker rows.\n+   * </ul>\n+   *\n+   * <p>NOTE: the caller is responsible for adding tracing & metrics.\n+   */\n+  public <RowT> ServerStreamingCallable<ReadRowsRequest, RowT> createReadRowsBaseCallable(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb025ae15fdc87c17c4d358a34dc4abcf4e82c63"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3402, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}