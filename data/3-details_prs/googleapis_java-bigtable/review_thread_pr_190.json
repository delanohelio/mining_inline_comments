{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMzQ3NDg3", "number": 190, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNToyODoxN1rODdX6vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNToyODoxN1rODdX6vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTI3MTY1OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/BigtableDataClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNToyODoxN1rOFl8CUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDozNDozMlrOFmGSMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMyNTI2Ng==", "bodyText": "please chain values().strip() as well", "url": "https://github.com/googleapis/java-bigtable/pull/190#discussion_r375325266", "createdAt": "2020-02-05T15:28:17Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/BigtableDataClient.java", "diffHunk": "@@ -159,6 +162,129 @@ public static BigtableDataClient create(BigtableDataSettings settings) throws IO\n     this.stub = stub;\n   }\n \n+  /**\n+   * Confirms synchronously if given row key exists or not.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * try (BigtableDataClient bigtableDataClient = BigtableDataClient.create(\"[PROJECT]\", \"[INSTANCE]\")) {\n+   *   String tableId = \"[TABLE]\";\n+   *   String key = \"key\";\n+   *\n+   *   boolean isRowPresent = bigtableDataClient.exists(tableId, key);\n+   *\n+   *   // Do something with result, for example, display a message\n+   *   if(isRowPresent) {\n+   *     System.out.println(key + \" is present\");\n+   *   }\n+   * } catch(ApiException e) {\n+   *   e.printStackTrace();\n+   * }\n+   * }</pre>\n+   *\n+   * @throws com.google.api.gax.rpc.ApiException when a serverside error occurs\n+   */\n+  public boolean exists(String tableId, String rowKey) {\n+    return ApiExceptions.callAndTranslateApiException(existsAsync(tableId, rowKey));\n+  }\n+\n+  /**\n+   * Confirms synchronously if given row key exists or not.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * try (BigtableDataClient bigtableDataClient = BigtableDataClient.create(\"[PROJECT]\", \"[INSTANCE]\")) {\n+   *   String tableId = \"[TABLE]\";\n+   *   ByteString key = ByteString.copyFromUtf8(\"key\");\n+   *\n+   *   boolean isRowPresent = bigtableDataClient.exists(tableId, key);\n+   *\n+   *   // Do something with result, for example, display a message\n+   *   if(isRowPresent) {\n+   *     System.out.println(key.toStringUtf8() + \" is present\");\n+   *   }\n+   * } catch(ApiException e) {\n+   *   e.printStackTrace();\n+   * }\n+   * }</pre>\n+   *\n+   * @throws com.google.api.gax.rpc.ApiException when a serverside error occurs\n+   */\n+  public boolean exists(String tableId, ByteString rowKey) {\n+    return ApiExceptions.callAndTranslateApiException(existsAsync(tableId, rowKey));\n+  }\n+\n+  /**\n+   * Confirms asynchronously if given row key exists or not.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * try (BigtableDataClient bigtableDataClient = BigtableDataClient.create(\"[PROJECT]\", \"[INSTANCE]\")) {\n+   *   String tableId = \"[TABLE]\";\n+   *   final String key = \"key\";\n+   *\n+   *   ApiFuture<Boolean> futureResult = bigtableDataClient.existsAsync(tableId, key);\n+   *\n+   *   ApiFutures.addCallback(futureResult, new ApiFutureCallback<Boolean>() {\n+   *     public void onFailure(Throwable t) {\n+   *       t.printStackTrace();\n+   *     }\n+   *     public void onSuccess(Boolean isRowPresent) {\n+   *       if(isRowPresent) {\n+   *         System.out.println(key + \" is present\");\n+   *       }\n+   *     }\n+   *   }, MoreExecutors.directExecutor());\n+   * }\n+   * }</pre>\n+   */\n+  public ApiFuture<Boolean> existsAsync(String tableId, String rowKey) {\n+    return existsAsync(tableId, ByteString.copyFromUtf8(rowKey));\n+  }\n+\n+  /**\n+   * Confirms asynchronously if given row key exists or not.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * try (BigtableDataClient bigtableDataClient = BigtableDataClient.create(\"[PROJECT]\", \"[INSTANCE]\")) {\n+   *   String tableId = \"[TABLE]\";\n+   *   final ByteString key = ByteString.copyFromUtf8(\"key\");\n+   *\n+   *   ApiFuture<Boolean> futureResult = bigtableDataClient.existsAsync(tableId, key);\n+   *\n+   *   ApiFutures.addCallback(futureResult, new ApiFutureCallback<Boolean>() {\n+   *     public void onFailure(Throwable t) {\n+   *       t.printStackTrace();\n+   *     }\n+   *     public void onSuccess(Boolean isRowPresent) {\n+   *       if(isRowPresent) {\n+   *         System.out.println(key.toStringUtf8() + \" is present\");\n+   *       }\n+   *     }\n+   *   }, MoreExecutors.directExecutor());\n+   * }\n+   * }</pre>\n+   */\n+  public ApiFuture<Boolean> existsAsync(String tableId, ByteString rowKey) {\n+    Query query =\n+        Query.create(tableId).rowKey(rowKey).filter(Filters.FILTERS.limit().cellsPerRow(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ae4996199c7ef328152b19fb77c39cb091d0e9"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5MzE3MA==", "bodyText": "Thanks for the review!! Have updated with same PTAL", "url": "https://github.com/googleapis/java-bigtable/pull/190#discussion_r375493170", "createdAt": "2020-02-05T20:34:32Z", "author": {"login": "rahulKQL"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/BigtableDataClient.java", "diffHunk": "@@ -159,6 +162,129 @@ public static BigtableDataClient create(BigtableDataSettings settings) throws IO\n     this.stub = stub;\n   }\n \n+  /**\n+   * Confirms synchronously if given row key exists or not.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * try (BigtableDataClient bigtableDataClient = BigtableDataClient.create(\"[PROJECT]\", \"[INSTANCE]\")) {\n+   *   String tableId = \"[TABLE]\";\n+   *   String key = \"key\";\n+   *\n+   *   boolean isRowPresent = bigtableDataClient.exists(tableId, key);\n+   *\n+   *   // Do something with result, for example, display a message\n+   *   if(isRowPresent) {\n+   *     System.out.println(key + \" is present\");\n+   *   }\n+   * } catch(ApiException e) {\n+   *   e.printStackTrace();\n+   * }\n+   * }</pre>\n+   *\n+   * @throws com.google.api.gax.rpc.ApiException when a serverside error occurs\n+   */\n+  public boolean exists(String tableId, String rowKey) {\n+    return ApiExceptions.callAndTranslateApiException(existsAsync(tableId, rowKey));\n+  }\n+\n+  /**\n+   * Confirms synchronously if given row key exists or not.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * try (BigtableDataClient bigtableDataClient = BigtableDataClient.create(\"[PROJECT]\", \"[INSTANCE]\")) {\n+   *   String tableId = \"[TABLE]\";\n+   *   ByteString key = ByteString.copyFromUtf8(\"key\");\n+   *\n+   *   boolean isRowPresent = bigtableDataClient.exists(tableId, key);\n+   *\n+   *   // Do something with result, for example, display a message\n+   *   if(isRowPresent) {\n+   *     System.out.println(key.toStringUtf8() + \" is present\");\n+   *   }\n+   * } catch(ApiException e) {\n+   *   e.printStackTrace();\n+   * }\n+   * }</pre>\n+   *\n+   * @throws com.google.api.gax.rpc.ApiException when a serverside error occurs\n+   */\n+  public boolean exists(String tableId, ByteString rowKey) {\n+    return ApiExceptions.callAndTranslateApiException(existsAsync(tableId, rowKey));\n+  }\n+\n+  /**\n+   * Confirms asynchronously if given row key exists or not.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * try (BigtableDataClient bigtableDataClient = BigtableDataClient.create(\"[PROJECT]\", \"[INSTANCE]\")) {\n+   *   String tableId = \"[TABLE]\";\n+   *   final String key = \"key\";\n+   *\n+   *   ApiFuture<Boolean> futureResult = bigtableDataClient.existsAsync(tableId, key);\n+   *\n+   *   ApiFutures.addCallback(futureResult, new ApiFutureCallback<Boolean>() {\n+   *     public void onFailure(Throwable t) {\n+   *       t.printStackTrace();\n+   *     }\n+   *     public void onSuccess(Boolean isRowPresent) {\n+   *       if(isRowPresent) {\n+   *         System.out.println(key + \" is present\");\n+   *       }\n+   *     }\n+   *   }, MoreExecutors.directExecutor());\n+   * }\n+   * }</pre>\n+   */\n+  public ApiFuture<Boolean> existsAsync(String tableId, String rowKey) {\n+    return existsAsync(tableId, ByteString.copyFromUtf8(rowKey));\n+  }\n+\n+  /**\n+   * Confirms asynchronously if given row key exists or not.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * try (BigtableDataClient bigtableDataClient = BigtableDataClient.create(\"[PROJECT]\", \"[INSTANCE]\")) {\n+   *   String tableId = \"[TABLE]\";\n+   *   final ByteString key = ByteString.copyFromUtf8(\"key\");\n+   *\n+   *   ApiFuture<Boolean> futureResult = bigtableDataClient.existsAsync(tableId, key);\n+   *\n+   *   ApiFutures.addCallback(futureResult, new ApiFutureCallback<Boolean>() {\n+   *     public void onFailure(Throwable t) {\n+   *       t.printStackTrace();\n+   *     }\n+   *     public void onSuccess(Boolean isRowPresent) {\n+   *       if(isRowPresent) {\n+   *         System.out.println(key.toStringUtf8() + \" is present\");\n+   *       }\n+   *     }\n+   *   }, MoreExecutors.directExecutor());\n+   * }\n+   * }</pre>\n+   */\n+  public ApiFuture<Boolean> existsAsync(String tableId, ByteString rowKey) {\n+    Query query =\n+        Query.create(tableId).rowKey(rowKey).filter(Filters.FILTERS.limit().cellsPerRow(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMyNTI2Ng=="}, "originalCommit": {"oid": "c8ae4996199c7ef328152b19fb77c39cb091d0e9"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3425, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}