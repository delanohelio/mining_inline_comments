{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MTQzMzI5", "number": 474, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzoxODowNlrOEutRww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozMjoyMlrOEw0xFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDExNzc5OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzoxODowNlrOHjSI5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzoxODowNlrOHjSI5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1OTM5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Preconditions.checkArgument(appProfileId != null,\n          \n          \n            \n                        \"refreshingChannel only works when appProfileId is set\");\n          \n          \n            \n                    InstantiatingGrpcChannelProvider.Builder channelProviderBuilder =\n          \n          \n            \n                        ((InstantiatingGrpcChannelProvider) getTransportChannelProvider()).toBuilder();\n          \n          \n            \n                    Preconditions.checkArgument(\n          \n          \n            \n                        appProfileId != null, \"refreshingChannel only works when appProfileId is set\");\n          \n          \n            \n                          BigtableChannelPrimer.create(\n          \n          \n            \n                              getCredentialsProvider().getCredentials(),\n          \n          \n            \n                              projectId,\n          \n          \n            \n                              instanceId,\n          \n          \n            \n                              appProfileId,\n          \n          \n            \n                              primedTableIds));", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r506759396", "createdAt": "2020-10-16T23:18:06Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java", "diffHunk": "@@ -806,6 +807,18 @@ public EnhancedBigtableStubSettings build() {\n         Preconditions.checkArgument(\n             getTransportChannelProvider() instanceof InstantiatingGrpcChannelProvider,\n             \"refreshingChannel only works with InstantiatingGrpcChannelProviders\");\n+        Preconditions.checkArgument(appProfileId != null,\n+            \"refreshingChannel only works when appProfileId is set\");\n+        InstantiatingGrpcChannelProvider.Builder channelProviderBuilder =\n+            ((InstantiatingGrpcChannelProvider) getTransportChannelProvider()).toBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61d5e632e6c64e273ac064150af91e0a814979dd"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDExNzgwOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzoxODowN1rOHjSI5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzoxODowN1rOHjSI5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1OTM5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                BigtableDataSettings.Builder builder = BigtableDataSettings.newBuilderForEmulator(port)\n          \n          \n            \n                    .setProjectId(DEFAULT_PROJECT_ID)\n          \n          \n            \n                    .setInstanceId(DEFAULT_INSTANCE_ID)\n          \n          \n            \n                    .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n          \n          \n            \n                    .setPrimingTableIds(tableIds)\n          \n          \n            \n                    .setRefreshingChannel(true);\n          \n          \n            \n                BigtableDataSettings.Builder builder =\n          \n          \n            \n                    BigtableDataSettings.newBuilderForEmulator(port)\n          \n          \n            \n                        .setProjectId(DEFAULT_PROJECT_ID)\n          \n          \n            \n                        .setInstanceId(DEFAULT_INSTANCE_ID)\n          \n          \n            \n                        .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n          \n          \n            \n                        .setPrimingTableIds(tableIds)\n          \n          \n            \n                        .setRefreshingChannel(true);", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r506759397", "createdAt": "2020-10-16T23:18:07Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "diffHunk": "@@ -191,8 +230,73 @@ public void testCreateForInstanceWithAppProfileHasCorrectSettings() throws Excep\n     assertThat(service.lastRequest.getAppProfileId()).isEqualTo(\"other-app-profile\");\n   }\n \n+  @Test\n+  public void testCreateWithRefreshingChannel() throws Exception {\n+    String[] tableIds = {\"fake-table1\", \"fake-table2\"};\n+    int poolSize = 3;\n+    BigtableDataSettings.Builder builder = BigtableDataSettings.newBuilderForEmulator(port)\n+        .setProjectId(DEFAULT_PROJECT_ID)\n+        .setInstanceId(DEFAULT_INSTANCE_ID)\n+        .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n+        .setPrimingTableIds(tableIds)\n+        .setRefreshingChannel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61d5e632e6c64e273ac064150af91e0a814979dd"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDExNzgxOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzoxODowN1rOHjSI6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzoxODowN1rOHjSI6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1OTQwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .setTableName(String.format(\"projects/%s/instances/%s/tables/%s\",\n          \n          \n            \n                            DEFAULT_PROJECT_ID, DEFAULT_INSTANCE_ID, tableId))\n          \n          \n            \n                        .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n          \n          \n            \n                        .setRows(RowSet.newBuilder().addRowKeys(ByteString.copyFromUtf8(\"nonexistent-priming-row\")))\n          \n          \n            \n                        .setFilter(RowFilter.newBuilder().setBlockAllFilter(true).build())\n          \n          \n            \n                        .setRowsLimit(1)\n          \n          \n            \n                        .build()\n          \n          \n            \n                    );\n          \n          \n            \n                            .setTableName(\n          \n          \n            \n                                String.format(\n          \n          \n            \n                                    \"projects/%s/instances/%s/tables/%s\",\n          \n          \n            \n                                    DEFAULT_PROJECT_ID, DEFAULT_INSTANCE_ID, tableId))\n          \n          \n            \n                            .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n          \n          \n            \n                            .setRows(\n          \n          \n            \n                                RowSet.newBuilder()\n          \n          \n            \n                                    .addRowKeys(ByteString.copyFromUtf8(\"nonexistent-priming-row\")))\n          \n          \n            \n                            .setFilter(RowFilter.newBuilder().setBlockAllFilter(true).build())\n          \n          \n            \n                            .setRowsLimit(1)\n          \n          \n            \n                            .build());", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r506759400", "createdAt": "2020-10-16T23:18:07Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "diffHunk": "@@ -191,8 +230,73 @@ public void testCreateForInstanceWithAppProfileHasCorrectSettings() throws Excep\n     assertThat(service.lastRequest.getAppProfileId()).isEqualTo(\"other-app-profile\");\n   }\n \n+  @Test\n+  public void testCreateWithRefreshingChannel() throws Exception {\n+    String[] tableIds = {\"fake-table1\", \"fake-table2\"};\n+    int poolSize = 3;\n+    BigtableDataSettings.Builder builder = BigtableDataSettings.newBuilderForEmulator(port)\n+        .setProjectId(DEFAULT_PROJECT_ID)\n+        .setInstanceId(DEFAULT_INSTANCE_ID)\n+        .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n+        .setPrimingTableIds(tableIds)\n+        .setRefreshingChannel(true);\n+    InstantiatingGrpcChannelProvider channelProvider =\n+        (InstantiatingGrpcChannelProvider) builder.stubSettings().getTransportChannelProvider();\n+    InstantiatingGrpcChannelProvider.Builder channelProviderBuilder = channelProvider.toBuilder();\n+    channelProviderBuilder.setPoolSize(poolSize);\n+    builder.stubSettings().setTransportChannelProvider(channelProviderBuilder.build());\n+\n+    BigtableDataClientFactory factory = BigtableDataClientFactory.create(builder.build());\n+    factory.createDefault();\n+    factory.createForAppProfile(\"other-appprofile\");\n+    factory.createForInstance(\"other-project\", \"other-instance\");\n+\n+    // Make sure that the clients are sharing the same ChannelPool\n+    assertThat(attributes).hasSize(poolSize);\n+    // Make sure that prime requests were sent only once per table per connection\n+    assertThat(service.readRowsRequests).hasSize(poolSize * tableIds.length);\n+    List<ReadRowsRequest> expectedRequests = new LinkedList<>();\n+    for (String tableId : tableIds) {\n+      for (int i = 0; i < poolSize; i++) {\n+        expectedRequests.add(\n+            ReadRowsRequest.newBuilder()\n+            .setTableName(String.format(\"projects/%s/instances/%s/tables/%s\",\n+                DEFAULT_PROJECT_ID, DEFAULT_INSTANCE_ID, tableId))\n+            .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n+            .setRows(RowSet.newBuilder().addRowKeys(ByteString.copyFromUtf8(\"nonexistent-priming-row\")))\n+            .setFilter(RowFilter.newBuilder().setBlockAllFilter(true).build())\n+            .setRowsLimit(1)\n+            .build()\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61d5e632e6c64e273ac064150af91e0a814979dd"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDk1MzUwOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDo1Nzo0MVrOHkS_-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzozNDoxNVrOHkZnvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMjA3NQ==", "bodyText": "can we instead move this logic to FakeServiceHelper?", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r507822075", "createdAt": "2020-10-19T14:57:41Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "diffHunk": "@@ -60,16 +76,35 @@\n   private WatchdogProvider watchdogProvider;\n   private ApiClock apiClock;\n   private BigtableDataSettings defaultSettings;\n+  private int port;\n+\n+  private final BlockingQueue<Attributes> attributes = new LinkedBlockingDeque<>();\n \n   @Before\n   public void setUp() throws IOException {\n     service = new FakeBigtableService();\n \n-    serviceHelper = new FakeServiceHelper(service);\n-    serviceHelper.start();\n+    try (ServerSocket ss = new ServerSocket(0)) {\n+      port = ss.getLocalPort();\n+    }\n+\n+    fakeServer =\n+        ServerBuilder.forPort(port)\n+            .addService(service)\n+            .addTransportFilter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "139254dd248d95fbdea3de99f61920aa5ccd6c6a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzMDU1OA==", "bodyText": "\ud83d\udc4d Moved to FakeServiceHelper.", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r507930558", "createdAt": "2020-10-19T17:34:15Z", "author": {"login": "mutianf"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "diffHunk": "@@ -60,16 +76,35 @@\n   private WatchdogProvider watchdogProvider;\n   private ApiClock apiClock;\n   private BigtableDataSettings defaultSettings;\n+  private int port;\n+\n+  private final BlockingQueue<Attributes> attributes = new LinkedBlockingDeque<>();\n \n   @Before\n   public void setUp() throws IOException {\n     service = new FakeBigtableService();\n \n-    serviceHelper = new FakeServiceHelper(service);\n-    serviceHelper.start();\n+    try (ServerSocket ss = new ServerSocket(0)) {\n+      port = ss.getLocalPort();\n+    }\n+\n+    fakeServer =\n+        ServerBuilder.forPort(port)\n+            .addService(service)\n+            .addTransportFilter(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMjA3NQ=="}, "originalCommit": {"oid": "139254dd248d95fbdea3de99f61920aa5ccd6c6a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjAxOTA1OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTozMToxNVrOHlDULg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzowNzoxNVrOHl2uDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxMzY3OA==", "bodyText": "Please add comment, something along the lines of:\nChannel refreshing only needs to be configured on the shared ClientContext, derivative clients don't have the ability to reconfigure the refresh logic", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r508613678", "createdAt": "2020-10-20T15:31:15Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactory.java", "diffHunk": "@@ -189,8 +189,9 @@ public BigtableDataClient createForInstance(\n   }\n \n   // Update stub settings to use shared resources in this factory\n-  private void patchStubSettings(StubSettings.Builder stubSettings) {\n+  private void patchStubSettings(EnhancedBigtableStubSettings.Builder stubSettings) {\n     stubSettings\n+        .setRefreshingChannel(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "213112311e3d47587f79255d75fb13784dd53213"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ1NTg4Ng==", "bodyText": "Added comments.", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r509455886", "createdAt": "2020-10-21T17:07:15Z", "author": {"login": "mutianf"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactory.java", "diffHunk": "@@ -189,8 +189,9 @@ public BigtableDataClient createForInstance(\n   }\n \n   // Update stub settings to use shared resources in this factory\n-  private void patchStubSettings(StubSettings.Builder stubSettings) {\n+  private void patchStubSettings(EnhancedBigtableStubSettings.Builder stubSettings) {\n     stubSettings\n+        .setRefreshingChannel(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxMzY3OA=="}, "originalCommit": {"oid": "213112311e3d47587f79255d75fb13784dd53213"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjA4MDg2OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo0MDowMlrOHlD81A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoxMTo1MlrOHl28Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyNDA4NA==", "bodyText": "I think there is a subtle bug here:\nIf the original CredentialsProvider was a GoogleCredentialsProvider then each time getCredentials is called, it will be a new instance, which means the credentials used for refreshing will diverge from the normal request credentials.\nI think you need to wrap reset the credentials to be FixedCredentials here.\nAlso please move the getCredentials line into its own try/catch its kinda hard to see which line can throw the IOException", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r508624084", "createdAt": "2020-10-20T15:40:02Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java", "diffHunk": "@@ -806,6 +807,20 @@ public EnhancedBigtableStubSettings build() {\n         Preconditions.checkArgument(\n             getTransportChannelProvider() instanceof InstantiatingGrpcChannelProvider,\n             \"refreshingChannel only works with InstantiatingGrpcChannelProviders\");\n+        InstantiatingGrpcChannelProvider.Builder channelProviderBuilder =\n+            ((InstantiatingGrpcChannelProvider) getTransportChannelProvider()).toBuilder();\n+        try {\n+          channelProviderBuilder.setChannelPrimer(\n+              BigtableChannelPrimer.create(\n+                  getCredentialsProvider().getCredentials(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "213112311e3d47587f79255d75fb13784dd53213"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0NDk5Mw==", "bodyText": "To add here, can we add a test to ensure the credentials are consistent?", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r508644993", "createdAt": "2020-10-20T15:57:40Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java", "diffHunk": "@@ -806,6 +807,20 @@ public EnhancedBigtableStubSettings build() {\n         Preconditions.checkArgument(\n             getTransportChannelProvider() instanceof InstantiatingGrpcChannelProvider,\n             \"refreshingChannel only works with InstantiatingGrpcChannelProviders\");\n+        InstantiatingGrpcChannelProvider.Builder channelProviderBuilder =\n+            ((InstantiatingGrpcChannelProvider) getTransportChannelProvider()).toBuilder();\n+        try {\n+          channelProviderBuilder.setChannelPrimer(\n+              BigtableChannelPrimer.create(\n+                  getCredentialsProvider().getCredentials(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyNDA4NA=="}, "originalCommit": {"oid": "213112311e3d47587f79255d75fb13784dd53213"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ1OTQ3NA==", "bodyText": "Updated BigtableDataClientFactoryTest.testCreateWithRefreshingChannel test to verify that getCredentials is only called once by the credentialProvider we set (similar to test testNewClientsShareTransportChannel.testNewClientsShareTransportChannel). Also added a test in EnhancedBigtableStubSettingsTest to make sure it's returning the same credentials.", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r509459474", "createdAt": "2020-10-21T17:11:52Z", "author": {"login": "mutianf"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java", "diffHunk": "@@ -806,6 +807,20 @@ public EnhancedBigtableStubSettings build() {\n         Preconditions.checkArgument(\n             getTransportChannelProvider() instanceof InstantiatingGrpcChannelProvider,\n             \"refreshingChannel only works with InstantiatingGrpcChannelProviders\");\n+        InstantiatingGrpcChannelProvider.Builder channelProviderBuilder =\n+            ((InstantiatingGrpcChannelProvider) getTransportChannelProvider()).toBuilder();\n+        try {\n+          channelProviderBuilder.setChannelPrimer(\n+              BigtableChannelPrimer.create(\n+                  getCredentialsProvider().getCredentials(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyNDA4NA=="}, "originalCommit": {"oid": "213112311e3d47587f79255d75fb13784dd53213"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjMwNjYzOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozMDoxN1rOHmnlRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozMDoxN1rOHmnlRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1NjQ1NQ==", "bodyText": "Might be good to split termination attrs from setup attrs", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r510256455", "createdAt": "2020-10-22T15:30:17Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "diffHunk": "@@ -60,16 +73,32 @@\n   private WatchdogProvider watchdogProvider;\n   private ApiClock apiClock;\n   private BigtableDataSettings defaultSettings;\n+  private int port;\n+\n+  private final BlockingQueue<Attributes> attributes = new LinkedBlockingDeque<>();\n \n   @Before\n   public void setUp() throws IOException {\n     service = new FakeBigtableService();\n-\n-    serviceHelper = new FakeServiceHelper(service);\n+    ServerTransportFilter transportFilter =\n+        new ServerTransportFilter() {\n+          @Override\n+          public Attributes transportReady(Attributes transportAttrs) {\n+            attributes.add(transportAttrs);\n+            return super.transportReady(transportAttrs);\n+          }\n+\n+          @Override\n+          public void transportTerminated(Attributes transportAttrs) {\n+            attributes.add(transportAttrs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ff40075d061197b3fa3fead5dc8d3c48ddb5f8e"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjMxNjM4OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozMjoyMlrOHmnrbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozMjoyMlrOHmnrbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1ODAzMA==", "bodyText": "Make sure that only 1 instance is created for all clients", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r510258030", "createdAt": "2020-10-22T15:32:22Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "diffHunk": "@@ -191,8 +220,95 @@ public void testCreateForInstanceWithAppProfileHasCorrectSettings() throws Excep\n     assertThat(service.lastRequest.getAppProfileId()).isEqualTo(\"other-app-profile\");\n   }\n \n+  @Test\n+  public void testCreateWithRefreshingChannel() throws Exception {\n+    String[] tableIds = {\"fake-table1\", \"fake-table2\"};\n+    int poolSize = 3;\n+    BigtableDataSettings.Builder builder =\n+        BigtableDataSettings.newBuilderForEmulator(port)\n+            .setProjectId(DEFAULT_PROJECT_ID)\n+            .setInstanceId(DEFAULT_INSTANCE_ID)\n+            .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n+            .setPrimingTableIds(tableIds)\n+            .setRefreshingChannel(true);\n+    builder\n+        .stubSettings()\n+        .setCredentialsProvider(credentialsProvider)\n+        .setStreamWatchdogProvider(watchdogProvider)\n+        .setExecutorProvider(executorProvider);\n+    InstantiatingGrpcChannelProvider channelProvider =\n+        (InstantiatingGrpcChannelProvider) builder.stubSettings().getTransportChannelProvider();\n+    InstantiatingGrpcChannelProvider.Builder channelProviderBuilder = channelProvider.toBuilder();\n+    channelProviderBuilder.setPoolSize(poolSize);\n+    builder.stubSettings().setTransportChannelProvider(channelProviderBuilder.build());\n+\n+    BigtableDataClientFactory factory = BigtableDataClientFactory.create(builder.build());\n+    factory.createDefault();\n+    factory.createForAppProfile(\"other-appprofile\");\n+    factory.createForInstance(\"other-project\", \"other-instance\");\n+\n+    // Make sure that only 1 instance is created by each provider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ff40075d061197b3fa3fead5dc8d3c48ddb5f8e"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3352, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}