{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NDY3NDk2", "number": 450, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTowNTozOVrOEuIkvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTowNTozOVrOEuIkvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODEwNDMxOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTowNTozOVrOHiWGDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTowNTozOVrOHiWGDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3NTYzMQ==", "bodyText": "The name sticks out a bit. I'm guessing its to avoid conflict with existing table getIamPolicy.\nI think it would be cleaner to name the generic versions as getResourceIamPolicy, setResourceIamPolicy, etc. or getIamPolicyBase\nAnd the public resource specific ones can be called getBackupIamPolicy.", "url": "https://github.com/googleapis/java-bigtable/pull/450#discussion_r505775631", "createdAt": "2020-10-15T19:05:39Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java", "diffHunk": "@@ -1463,9 +1434,226 @@ public Policy apply(com.google.iam.v1.Policy proto) {\n    */\n   @SuppressWarnings({\"WeakerAccess\"})\n   public ApiFuture<List<String>> testIamPermissionAsync(String tableId, String... permissions) {\n+    String tableName = NameUtil.formatTableName(projectId, instanceId, tableId);\n+    return testIamPermissions(tableName, permissions);\n+  }\n+\n+  /**\n+   * Gets the IAM access control policy for the specified backup.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * Policy policy = client.getBackupIamPolicy(\"my-cluster-id\", \"my-backup-id\");\n+   * for(Map.Entry<Role, Set<Identity>> entry : policy.getBindings().entrySet()) {\n+   *   System.out.printf(\"Role: %s Identities: %s\\n\", entry.getKey(), entry.getValue());\n+   * }\n+   * }</pre>\n+   *\n+   * @see <a\n+   *     href=\"https://cloud.google.com/bigtable/docs/access-control#iam-management-table\">Table-level\n+   *     IAM management</a>\n+   */\n+  @SuppressWarnings(\"WeakerAccess\")\n+  public Policy getBackupIamPolicy(String clusterId, String backupId) {\n+    return ApiExceptions.callAndTranslateApiException(getBackupIamPolicyAsync(clusterId, backupId));\n+  }\n+\n+  /**\n+   * Asynchronously gets the IAM access control policy for the specified backup.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * ApiFuture<Policy> policyFuture = client.getBackupIamPolicyAsync(\"my-cluster-id\", \"my-backup-id\");\n+   *\n+   * ApiFutures.addCallback(policyFuture,\n+   *   new ApiFutureCallback<Policy>() {\n+   *     public void onSuccess(Policy policy) {\n+   *       for (Entry<Role, Set<Identity>> entry : policy.getBindings().entrySet()) {\n+   *         System.out.printf(\"Role: %s Identities: %s\\n\", entry.getKey(), entry.getValue());\n+   *       }\n+   *     }\n+   *\n+   *     public void onFailure(Throwable t) {\n+   *       t.printStackTrace();\n+   *     }\n+   *   },\n+   *   MoreExecutors.directExecutor());\n+   * }</pre>\n+   *\n+   * @see <a\n+   *     href=\"https://cloud.google.com/bigtable/docs/access-control#iam-management-table\">Table-level\n+   *     IAM management</a>\n+   */\n+  @SuppressWarnings(\"WeakerAccess\")\n+  public ApiFuture<Policy> getBackupIamPolicyAsync(String clusterId, String backupId) {\n+    String backupName = NameUtil.formatBackupName(projectId, instanceId, clusterId, backupId);\n+    return getIamPolicyResult(backupName);\n+  }\n+\n+  /**\n+   * Replaces the IAM policy associated with the specified backup.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * Policy newPolicy = client.setBackupIamPolicy(\"my-cluster-id\", \"my-backup-id\",\n+   *   Policy.newBuilder()\n+   *     .addIdentity(Role.of(\"bigtable.user\"), Identity.user(\"someone@example.com\"))\n+   *     .addIdentity(Role.of(\"bigtable.admin\"), Identity.group(\"admins@example.com\"))\n+   *     .build());\n+   * }</pre>\n+   *\n+   * @see <a\n+   *     href=\"https://cloud.google.com/bigtable/docs/access-control#iam-management-table\">Table-level\n+   *     IAM management</a>\n+   */\n+  @SuppressWarnings(\"WeakerAccess\")\n+  public Policy setBackupIamPolicy(String clusterId, String backupId, Policy policy) {\n+    return ApiExceptions.callAndTranslateApiException(\n+        setBackupIamPolicyAsync(clusterId, backupId, policy));\n+  }\n+\n+  /**\n+   * Asynchronously replaces the IAM policy associated with the specified backup.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * ApiFuture<Policy> newPolicyFuture = client.setBackupIamPolicyAsync(\"my-cluster-id\", \"my-backup-id\",\n+   *   Policy.newBuilder()\n+   *     .addIdentity(Role.of(\"bigtable.user\"), Identity.user(\"someone@example.com\"))\n+   *     .addIdentity(Role.of(\"bigtable.admin\"), Identity.group(\"admins@example.com\"))\n+   *     .build());\n+   *\n+   * ApiFutures.addCallback(newPolicyFuture,\n+   *   new ApiFutureCallback<Policy>() {\n+   *     public void onSuccess(Policy policy) {\n+   *       for (Entry<Role, Set<Identity>> entry : policy.getBindings().entrySet()) {\n+   *         System.out.printf(\"Role: %s Identities: %s\\n\", entry.getKey(), entry.getValue());\n+   *       }\n+   *     }\n+   *\n+   *     public void onFailure(Throwable t) {\n+   *       t.printStackTrace();\n+   *     }\n+   *   },\n+   *   MoreExecutors.directExecutor());\n+   * }</pre>\n+   *\n+   * @see <a\n+   *     href=\"https://cloud.google.com/bigtable/docs/access-control#iam-management-table\">Table-level\n+   *     IAM management</a>\n+   */\n+  @SuppressWarnings(\"WeakerAccess\")\n+  public ApiFuture<Policy> setBackupIamPolicyAsync(\n+      String clusterId, String backupId, Policy policy) {\n+    String backupName = NameUtil.formatBackupName(projectId, instanceId, clusterId, backupId);\n+    return setIamPolicy(policy, backupName);\n+  }\n+\n+  /**\n+   * Tests whether the caller has the given permissions for the specified backup. Returns a subset\n+   * of the specified permissions that the caller has.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * List<String> grantedPermissions = client.testBackupIamPermission(\"my-cluster-id\", \"my-backup-id\",\n+   *   \"bigtable.backups.restore\", \"bigtable.backups.delete\");\n+   * }</pre>\n+   *\n+   * System.out.println(\"Has restore access: \" +\n+   * grantedPermissions.contains(\"bigtable.backups.restore\"));\n+   *\n+   * <p>System.out.println(\"Has delete access: \" +\n+   * grantedPermissions.contains(\"bigtable.backups.delete\"));\n+   *\n+   * @see <a href=\"https://cloud.google.com/bigtable/docs/access-control#permissions\">Cloud Bigtable\n+   *     permissions</a>\n+   */\n+  @SuppressWarnings({\"WeakerAccess\"})\n+  public List<String> testBackupIamPermission(\n+      String clusterId, String backupId, String... permissions) {\n+    return ApiExceptions.callAndTranslateApiException(\n+        testBackupIamPermissionAsync(clusterId, backupId, permissions));\n+  }\n+\n+  /**\n+   * Asynchronously tests whether the caller has the given permissions for the specified backup.\n+   * Returns a subset of the specified permissions that the caller has.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * ApiFuture<List<String>> grantedPermissionsFuture = client.testBackupIamPermissionAsync(\"my-cluster-id\", \"my-backup-id\",\n+   *   \"bigtable.backups.restore\", \"bigtable.backups.delete\");\n+   *\n+   * ApiFutures.addCallback(grantedPermissionsFuture,\n+   *   new ApiFutureCallback<List<String>>() {\n+   *     public void onSuccess(List<String> grantedPermissions) {\n+   *       System.out.println(\"Has restore access: \" + grantedPermissions.contains(\"bigtable.backups.restore\"));\n+   *       System.out.println(\"Has delete access: \" + grantedPermissions.contains(\"bigtable.backups.delete\"));\n+   *     }\n+   *\n+   *     public void onFailure(Throwable t) {\n+   *       t.printStackTrace();\n+   *     }\n+   *   },\n+   *   MoreExecutors.directExecutor());\n+   * }</pre>\n+   *\n+   * @see <a href=\"https://cloud.google.com/bigtable/docs/access-control#permissions\">Cloud Bigtable\n+   *     permissions</a>\n+   */\n+  @SuppressWarnings({\"WeakerAccess\"})\n+  public ApiFuture<List<String>> testBackupIamPermissionAsync(\n+      String clusterId, String backupId, String... permissions) {\n+    String backupName = NameUtil.formatBackupName(projectId, instanceId, clusterId, backupId);\n+    return testIamPermissions(backupName, permissions);\n+  }\n+\n+  private ApiFuture<Policy> getIamPolicyResult(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3917f542de82c595355644a62f74e36b0f907f9f"}, "originalPosition": 235}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3390, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}