{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMjI4NTk5", "number": 535, "title": "feat: Surface the server-timing metric", "bodyText": "Added a BIGTABLE_GFE_LATENCY_VIEW which will track the GFE t4t7 latency.\nAdded a BIGTABLE_GFE_HEADER_MISSING_COUNT_VIEW which will track the number of responses without the server-timing header.\nAdded new callables in the callable chains to inject a GrpcMetadataResponse to access the header and trailers. In the callback and response observer, retrieve the serve-timing header from GrpcMetadataResponse, and publish the metrics through HeaderTracer.\nGFE related views can be enabled through a new method BigtableDataSettings.enableGfeOpenCensusStats(). The code will only check and publish the metrics when the GFE views are registered. This is because in the case where direct path is enabled, requests won't go through GFE/CFE and therefore won't have server-timing header.\n\nThank you for opening a Pull Request! Before submitting your PR, there are a few things you can do to make sure it goes smoothly:\n\n Make sure to open an issue as a bug/issue before writing your code!  That way we can discuss the change, evaluate designs, and agree on the general idea\n Ensure the tests and linter pass\n Code coverage does not decrease (if any source code was changed)\n Appropriate docs were updated (if necessary)\n\nFixes #<issue_number_goes_here> \u2615\ufe0f", "createdAt": "2020-11-12T23:49:51Z", "url": "https://github.com/googleapis/java-bigtable/pull/535", "merged": true, "mergeCommit": {"oid": "8240779434a602dc8b2bf90dbe539c5d7470d850"}, "closed": true, "closedAt": "2020-12-17T00:49:59Z", "author": {"login": "mutianf"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdboHHfAH2gAyNTIwMjI4NTk5OjYyYTIwZGZkZDIyM2I4NzYzY2UzNThlM2M1YmIyZmViNjcyZDI1NTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdm4sq7AFqTU1NDIwMDAyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "62a20dfdd223b8763ce358e3c5bb2feb672d2551", "author": {"user": {"login": "mutianf", "name": "Mattie Fu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/62a20dfdd223b8763ce358e3c5bb2feb672d2551", "committedDate": "2020-11-12T01:17:10Z", "message": "Extract server-timing trailer and create metrics for gfe latency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "335d1dce7ee661631c05d2abb20cf0a45b46c2c8", "author": {"user": {"login": "mutianf", "name": "Mattie Fu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/335d1dce7ee661631c05d2abb20cf0a45b46c2c8", "committedDate": "2020-11-12T20:44:48Z", "message": "Add more tests and refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fac4bdbdc672a76a8f82f89db200a41265d77c3", "author": {"user": {"login": "mutianf", "name": "Mattie Fu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/5fac4bdbdc672a76a8f82f89db200a41265d77c3", "committedDate": "2020-11-12T22:33:58Z", "message": "Refactor comments and imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTk3MjQ1", "url": "https://github.com/googleapis/java-bigtable/pull/535#pullrequestreview-529597245", "createdAt": "2020-11-12T23:51:47Z", "commit": {"oid": "5fac4bdbdc672a76a8f82f89db200a41265d77c3"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzo1MTo0OFrOHyTwRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzo1MTo0OFrOHyTwRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNDUwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Adds HeaderTracer and SpanName to CallOptions so we could surface metrics in the header\n          \n          \n            \n               * with {@link com.google.cloud.bigtable.data.v2.stub.metrics.ClientHeaderInterceptor}.\n          \n          \n            \n               * */\n          \n          \n            \n               * Adds HeaderTracer and SpanName to CallOptions so we could surface metrics in the header with\n          \n          \n            \n               * {@link com.google.cloud.bigtable.data.v2.stub.metrics.ClientHeaderInterceptor}.\n          \n          \n            \n               */", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r522514500", "createdAt": "2020-11-12T23:51:48Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -686,6 +710,28 @@ public EnhancedBigtableStub(EnhancedBigtableStubSettings settings, ClientContext\n   }\n   // </editor-fold>\n \n+  /**\n+   * Adds HeaderTracer and SpanName to CallOptions so we could surface metrics in the header\n+   * with {@link com.google.cloud.bigtable.data.v2.stub.metrics.ClientHeaderInterceptor}.\n+   * */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fac4bdbdc672a76a8f82f89db200a41265d77c3"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNDUwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static com.google.cloud.bigtable.data.v2.stub.metrics.RpcMeasureConstants.BIGTABLE_GFE_LATENCY;\n          \n          \n            \n            import static com.google.cloud.bigtable.data.v2.stub.metrics.RpcMeasureConstants.BIGTABLE_GFE_LATENCY;", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r522514501", "createdAt": "2020-11-12T23:51:48Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/RpcViewConstants.java", "diffHunk": "@@ -17,6 +17,8 @@\n \n import static com.google.cloud.bigtable.data.v2.stub.metrics.RpcMeasureConstants.BIGTABLE_APP_PROFILE_ID;\n import static com.google.cloud.bigtable.data.v2.stub.metrics.RpcMeasureConstants.BIGTABLE_ATTEMPT_LATENCY;\n+import static com.google.cloud.bigtable.data.v2.stub.metrics.RpcMeasureConstants.BIGTABLE_GFE_LATENCY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fac4bdbdc672a76a8f82f89db200a41265d77c3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNDUwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import io.opencensus.tags.Tagger;\n          \n          \n            \n            import io.opencensus.tags.Tags;\n          \n          \n            \n            import io.opencensus.tags.Tagger;", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r522514503", "createdAt": "2020-11-12T23:51:48Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracerTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opencensus.impl.stats.StatsComponentImpl;\n+import io.opencensus.stats.StatsComponent;\n+import io.opencensus.stats.StatsRecorder;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tagger;\n+import io.opencensus.tags.Tags;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fac4bdbdc672a76a8f82f89db200a41265d77c3"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ae57a761d36f94a0d6001c941cce3b14900a358", "author": {"user": {"login": "mutianf", "name": "Mattie Fu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/8ae57a761d36f94a0d6001c941cce3b14900a358", "committedDate": "2020-11-13T00:14:54Z", "message": "reformatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dff4d283f5f210fb034ec3238ba84b5efea87002", "author": {"user": {"login": "mutianf", "name": "Mattie Fu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/dff4d283f5f210fb034ec3238ba84b5efea87002", "committedDate": "2020-11-13T00:38:38Z", "message": "Clean up comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba", "author": {"user": {"login": "mutianf", "name": "Mattie Fu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba", "committedDate": "2020-11-17T14:53:53Z", "message": "Merge branch 'master' into gfe-metrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NTE3NTE1", "url": "https://github.com/googleapis/java-bigtable/pull/535#pullrequestreview-538517515", "createdAt": "2020-11-25T13:57:00Z", "commit": {"oid": "6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1NzowMVrOH50jrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDo0MzoyNlrOH52j7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5MTk4MQ==", "bodyText": "I dont think this is needed for the emulator as it will only be sent by the GFE. So I think this should go in the newBuilder factory method. However that also creates frictions for users that would want to install their interceptor. Now they have to worry about chaining it with ours. So I think this should be injected at the end in finalizeSettings?", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r530391981", "createdAt": "2020-11-25T13:57:01Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/BigtableDataSettings.java", "diffHunk": "@@ -127,6 +128,7 @@ public ManagedChannelBuilder apply(ManagedChannelBuilder input) {\n                 .setKeepAliveTime(Duration.ofSeconds(30)) // sends ping in this interval\n                 .setKeepAliveTimeout(\n                     Duration.ofSeconds(10)) // wait this long before considering the connection dead\n+                .setInterceptorProvider(BigtableInterceptorProvider.createDefault())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5NjQ4Ng==", "bodyText": "I think it would be better to name this FixedIterceptorProvider and put this in the gaxx package and then in the future to move it to gax proper. (This implies that the construction of the ClientHEaderInterceptor should move out of this class to the caller)", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r530396486", "createdAt": "2020-11-25T14:03:55Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/BigtableInterceptorProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub;\n+\n+import com.google.api.core.BetaApi;\n+import com.google.api.gax.grpc.GrpcInterceptorProvider;\n+import com.google.cloud.bigtable.data.v2.stub.metrics.ClientHeaderInterceptor;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.ClientInterceptor;\n+import java.util.List;\n+\n+@BetaApi\n+public class BigtableInterceptorProvider implements GrpcInterceptorProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNTIyNA==", "bodyText": "I think this should be extracted into its own Callable that injects the CallOptions into the passed in ApiCallOptions", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r530405224", "createdAt": "2020-11-25T14:16:34Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -686,6 +710,29 @@ public EnhancedBigtableStub(EnhancedBigtableStubSettings settings, ClientContext\n   }\n   // </editor-fold>\n \n+  /**\n+   * Adds a HeaderTracer instance and current span name to CallOptions so we could surface metrics\n+   * in the header with {@link\n+   * com.google.cloud.bigtable.data.v2.stub.metrics.ClientHeaderInterceptor}.\n+   */\n+  private ApiCallContext getContextWithTracer(SpanName spanName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNjIwOA==", "bodyText": "I would try to wrap both values in a single object to minimize the overhead of adding CallOptions entries which is backed by an array", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r530406208", "createdAt": "2020-11-25T14:17:51Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -686,6 +710,29 @@ public EnhancedBigtableStub(EnhancedBigtableStubSettings settings, ClientContext\n   }\n   // </editor-fold>\n \n+  /**\n+   * Adds a HeaderTracer instance and current span name to CallOptions so we could surface metrics\n+   * in the header with {@link\n+   * com.google.cloud.bigtable.data.v2.stub.metrics.ClientHeaderInterceptor}.\n+   */\n+  private ApiCallContext getContextWithTracer(SpanName spanName) {\n+    ApiCallContext apiCallContext = clientContext.getDefaultCallContext();\n+    if (!(apiCallContext instanceof GrpcCallContext)) {\n+      LOGGER.warning(\n+          \"Failed to add tracer in call context. Expected GrpcCallContext but had \"\n+              + apiCallContext.getClass());\n+      return apiCallContext;\n+    }\n+    GrpcCallContext grpcCallContext = (GrpcCallContext) apiCallContext;\n+    CallOptions options = grpcCallContext.getCallOptions();\n+    options =\n+        options\n+            .withOption(HeaderTracer.HEADER_TRACER_CONTEXT_KEY, settings.getHeaderTracer())\n+            .withOption(HeaderTracer.SPAN_NAME_CONTEXT_KEY, spanName.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwODY1MQ==", "bodyText": "I would add a comment that this shouldn't ever happen because the tracer is injected in ....", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r530408651", "createdAt": "2020-11-25T14:21:04Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/ClientHeaderInterceptor.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.BetaApi;\n+import io.grpc.CallOptions;\n+import io.grpc.Channel;\n+import io.grpc.ClientCall;\n+import io.grpc.ClientInterceptor;\n+import io.grpc.ForwardingClientCall.SimpleForwardingClientCall;\n+import io.grpc.ForwardingClientCallListener.SimpleForwardingClientCallListener;\n+import io.grpc.Metadata;\n+import io.grpc.MethodDescriptor;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Surface GFE server-timing metric.\n+ *\n+ * <p>This class exports the metric from server-timing header that tracks the latency between GFE\n+ * receives the first byte of a request and reads the first byte of the response. It also tracks the\n+ * number of occurrences of missing server-timing header.\n+ */\n+@BetaApi\n+public class ClientHeaderInterceptor implements ClientInterceptor {\n+  private static final Logger LOGGER = Logger.getLogger(ClientHeaderInterceptor.class.getName());\n+\n+  public static final Metadata.Key<String> SERVER_TIMING_HEADER_KEY =\n+      Metadata.Key.of(\"server-timing\", Metadata.ASCII_STRING_MARSHALLER);\n+  private static final Pattern SERVER_TIMING_HEADER_PATTERN = Pattern.compile(\".*dur=(?<dur>\\\\d+)\");\n+\n+  @Override\n+  public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n+      final MethodDescriptor<ReqT, RespT> method, final CallOptions callOptions, Channel channel) {\n+    final ClientCall<ReqT, RespT> clientCall = channel.newCall(method, callOptions);\n+    final String span = callOptions.getOption(HeaderTracer.SPAN_NAME_CONTEXT_KEY);\n+    final HeaderTracer tracer = callOptions.getOption(HeaderTracer.HEADER_TRACER_CONTEXT_KEY);\n+    return new SimpleForwardingClientCall<ReqT, RespT>(clientCall) {\n+      @Override\n+      public void start(Listener<RespT> responseListener, Metadata headers) {\n+        super.start(\n+            new SimpleForwardingClientCallListener<RespT>(responseListener) {\n+              @Override\n+              public void onHeaders(Metadata headers) {\n+                processHeader(headers, tracer, span);\n+                super.onHeaders(headers);\n+              }\n+            },\n+            headers);\n+      }\n+    };\n+  }\n+\n+  private void processHeader(Metadata headers, HeaderTracer tracer, String span) {\n+    if (tracer == null) {\n+      LOGGER.warning(\"Couldn't find HeaderTracer in call options. Skip exporting gfe metrics\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxMDcwMQ==", "bodyText": "I would keep this as a private method and instead expose concrete helpers that describe what you are recording: ie recordGfeLatency(String method, Duration duration)\nrecordMissingGfeHeader(String method)", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r530410701", "createdAt": "2020-11-25T14:24:02Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracer.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.BetaApi;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableMap;\n+import io.grpc.CallOptions;\n+import io.opencensus.stats.Measure.MeasureDouble;\n+import io.opencensus.stats.Measure.MeasureLong;\n+import io.opencensus.stats.MeasureMap;\n+import io.opencensus.stats.Stats;\n+import io.opencensus.stats.StatsRecorder;\n+import io.opencensus.tags.TagContextBuilder;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tagger;\n+import io.opencensus.tags.Tags;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+@BetaApi\n+public class HeaderTracer {\n+  public static final CallOptions.Key<HeaderTracer> HEADER_TRACER_CONTEXT_KEY =\n+      CallOptions.Key.create(\"BigtableHeaderTracer\");\n+  public static final CallOptions.Key<String> SPAN_NAME_CONTEXT_KEY =\n+      CallOptions.Key.create(\"BigtableSpanName\");\n+\n+  private Tagger tagger;\n+  private StatsRecorder stats;\n+  private Map<TagKey, TagValue> statsAttributes;\n+\n+  private HeaderTracer(Builder builder) {\n+    tagger = builder.getTagger();\n+    stats = builder.getStats();\n+    statsAttributes = builder.getStatsAttributes();\n+  }\n+\n+  public static class Builder {\n+    private Tagger tagger;\n+    private StatsRecorder stats;\n+    private Map<TagKey, TagValue> statsAttributes;\n+\n+    private Builder() {\n+      tagger = Tags.getTagger();\n+      stats = Stats.getStatsRecorder();\n+      statsAttributes = ImmutableMap.of();\n+    }\n+\n+    private Builder(HeaderTracer headerTracer) {\n+      tagger = headerTracer.tagger;\n+      stats = headerTracer.stats;\n+      statsAttributes = headerTracer.statsAttributes;\n+    }\n+\n+    // <editor-fold desc=\"Public API\">\n+    public Builder setTagger(@Nonnull Tagger tagger) {\n+      Preconditions.checkNotNull(tagger);\n+      this.tagger = tagger;\n+      return this;\n+    }\n+\n+    public Builder setStats(@Nonnull StatsRecorder stats) {\n+      Preconditions.checkNotNull(stats);\n+      this.stats = stats;\n+      return this;\n+    }\n+\n+    public Builder setStatsAttributes(@Nonnull Map<TagKey, TagValue> statsAttributes) {\n+      Preconditions.checkNotNull(statsAttributes);\n+      this.statsAttributes = statsAttributes;\n+      return this;\n+    }\n+\n+    public Tagger getTagger() {\n+      return tagger;\n+    }\n+\n+    public StatsRecorder getStats() {\n+      return stats;\n+    }\n+\n+    public Map<TagKey, TagValue> getStatsAttributes() {\n+      return statsAttributes;\n+    }\n+\n+    public HeaderTracer build() {\n+      Preconditions.checkNotNull(stats, \"StatsRecorder must be set\");\n+      Preconditions.checkNotNull(tagger, \"Tagger must be set\");\n+      Preconditions.checkNotNull(statsAttributes, \"Stats attributes must be set\");\n+      return new HeaderTracer(this);\n+    }\n+    // </editor-fold>\n+  }\n+\n+  public Tagger getTagger() {\n+    return tagger;\n+  }\n+\n+  public StatsRecorder getStats() {\n+    return stats;\n+  }\n+\n+  public Map<TagKey, TagValue> getStatsAttributes() {\n+    return statsAttributes;\n+  }\n+\n+  public void record(MeasureLong measure, long value, @Nullable String span) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxMTc2NA==", "bodyText": "Should this be exposed to users? Unless there is a specific reason to access something, we should limit the exposed surface so that we can evolve our internal apis without worrying about breaking users", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r530411764", "createdAt": "2020-11-25T14:25:32Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracer.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.BetaApi;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableMap;\n+import io.grpc.CallOptions;\n+import io.opencensus.stats.Measure.MeasureDouble;\n+import io.opencensus.stats.Measure.MeasureLong;\n+import io.opencensus.stats.MeasureMap;\n+import io.opencensus.stats.Stats;\n+import io.opencensus.stats.StatsRecorder;\n+import io.opencensus.tags.TagContextBuilder;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tagger;\n+import io.opencensus.tags.Tags;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+@BetaApi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxMjc4OA==", "bodyText": "We should discuss if these should be part of the standard exposed metrics", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r530412788", "createdAt": "2020-11-25T14:27:00Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/RpcViews.java", "diffHunk": "@@ -31,7 +31,9 @@\n           RpcViewConstants.BIGTABLE_COMPLETED_OP_VIEW,\n           RpcViewConstants.BIGTABLE_READ_ROWS_FIRST_ROW_LATENCY_VIEW,\n           RpcViewConstants.BIGTABLE_ATTEMPT_LATENCY_VIEW,\n-          RpcViewConstants.BIGTABLE_ATTEMPTS_PER_OP_VIEW);\n+          RpcViewConstants.BIGTABLE_ATTEMPTS_PER_OP_VIEW,\n+          RpcViewConstants.BIGTABLE_GFE_LATENCY_VIEW,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTk2NQ==", "bodyText": "We should avoid exposing this to customers. It's an implementation detail for the current approach. When this gets pushed into gax, we will move this into ApiTracer so we should minimize the amount public methods exposed (even if Beta). if this needs to be public then it should be INternalApi", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r530419965", "createdAt": "2020-11-25T14:36:45Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java", "diffHunk": "@@ -759,6 +772,19 @@ public boolean isRefreshingChannel() {\n       return primedTableIds;\n     }\n \n+    /** Configure the header tracer for surfacing metrics in the header. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMjc3OQ==", "bodyText": "Do we need to record anything here?", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r530422779", "createdAt": "2020-11-25T14:40:39Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/ClientHeaderInterceptor.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.BetaApi;\n+import io.grpc.CallOptions;\n+import io.grpc.Channel;\n+import io.grpc.ClientCall;\n+import io.grpc.ClientInterceptor;\n+import io.grpc.ForwardingClientCall.SimpleForwardingClientCall;\n+import io.grpc.ForwardingClientCallListener.SimpleForwardingClientCallListener;\n+import io.grpc.Metadata;\n+import io.grpc.MethodDescriptor;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Surface GFE server-timing metric.\n+ *\n+ * <p>This class exports the metric from server-timing header that tracks the latency between GFE\n+ * receives the first byte of a request and reads the first byte of the response. It also tracks the\n+ * number of occurrences of missing server-timing header.\n+ */\n+@BetaApi\n+public class ClientHeaderInterceptor implements ClientInterceptor {\n+  private static final Logger LOGGER = Logger.getLogger(ClientHeaderInterceptor.class.getName());\n+\n+  public static final Metadata.Key<String> SERVER_TIMING_HEADER_KEY =\n+      Metadata.Key.of(\"server-timing\", Metadata.ASCII_STRING_MARSHALLER);\n+  private static final Pattern SERVER_TIMING_HEADER_PATTERN = Pattern.compile(\".*dur=(?<dur>\\\\d+)\");\n+\n+  @Override\n+  public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n+      final MethodDescriptor<ReqT, RespT> method, final CallOptions callOptions, Channel channel) {\n+    final ClientCall<ReqT, RespT> clientCall = channel.newCall(method, callOptions);\n+    final String span = callOptions.getOption(HeaderTracer.SPAN_NAME_CONTEXT_KEY);\n+    final HeaderTracer tracer = callOptions.getOption(HeaderTracer.HEADER_TRACER_CONTEXT_KEY);\n+    return new SimpleForwardingClientCall<ReqT, RespT>(clientCall) {\n+      @Override\n+      public void start(Listener<RespT> responseListener, Metadata headers) {\n+        super.start(\n+            new SimpleForwardingClientCallListener<RespT>(responseListener) {\n+              @Override\n+              public void onHeaders(Metadata headers) {\n+                processHeader(headers, tracer, span);\n+                super.onHeaders(headers);\n+              }\n+            },\n+            headers);\n+      }\n+    };\n+  }\n+\n+  private void processHeader(Metadata headers, HeaderTracer tracer, String span) {\n+    if (tracer == null) {\n+      LOGGER.warning(\"Couldn't find HeaderTracer in call options. Skip exporting gfe metrics\");\n+      return;\n+    }\n+    if (headers.get(SERVER_TIMING_HEADER_KEY) != null) {\n+      String serverTiming = headers.get(SERVER_TIMING_HEADER_KEY);\n+      Matcher matcher = SERVER_TIMING_HEADER_PATTERN.matcher(serverTiming);\n+      tracer.record(RpcMeasureConstants.BIGTABLE_GFE_HEADER_MISSING_COUNT, 0L, span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMzkyMQ==", "bodyText": "I'm also a little concerned about flooding the customer logs here. If the tracer is missing, it is quite likely that it will be missing for all of the requests. So this will log for every request", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r530423921", "createdAt": "2020-11-25T14:42:10Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/ClientHeaderInterceptor.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.BetaApi;\n+import io.grpc.CallOptions;\n+import io.grpc.Channel;\n+import io.grpc.ClientCall;\n+import io.grpc.ClientInterceptor;\n+import io.grpc.ForwardingClientCall.SimpleForwardingClientCall;\n+import io.grpc.ForwardingClientCallListener.SimpleForwardingClientCallListener;\n+import io.grpc.Metadata;\n+import io.grpc.MethodDescriptor;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Surface GFE server-timing metric.\n+ *\n+ * <p>This class exports the metric from server-timing header that tracks the latency between GFE\n+ * receives the first byte of a request and reads the first byte of the response. It also tracks the\n+ * number of occurrences of missing server-timing header.\n+ */\n+@BetaApi\n+public class ClientHeaderInterceptor implements ClientInterceptor {\n+  private static final Logger LOGGER = Logger.getLogger(ClientHeaderInterceptor.class.getName());\n+\n+  public static final Metadata.Key<String> SERVER_TIMING_HEADER_KEY =\n+      Metadata.Key.of(\"server-timing\", Metadata.ASCII_STRING_MARSHALLER);\n+  private static final Pattern SERVER_TIMING_HEADER_PATTERN = Pattern.compile(\".*dur=(?<dur>\\\\d+)\");\n+\n+  @Override\n+  public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n+      final MethodDescriptor<ReqT, RespT> method, final CallOptions callOptions, Channel channel) {\n+    final ClientCall<ReqT, RespT> clientCall = channel.newCall(method, callOptions);\n+    final String span = callOptions.getOption(HeaderTracer.SPAN_NAME_CONTEXT_KEY);\n+    final HeaderTracer tracer = callOptions.getOption(HeaderTracer.HEADER_TRACER_CONTEXT_KEY);\n+    return new SimpleForwardingClientCall<ReqT, RespT>(clientCall) {\n+      @Override\n+      public void start(Listener<RespT> responseListener, Metadata headers) {\n+        super.start(\n+            new SimpleForwardingClientCallListener<RespT>(responseListener) {\n+              @Override\n+              public void onHeaders(Metadata headers) {\n+                processHeader(headers, tracer, span);\n+                super.onHeaders(headers);\n+              }\n+            },\n+            headers);\n+      }\n+    };\n+  }\n+\n+  private void processHeader(Metadata headers, HeaderTracer tracer, String span) {\n+    if (tracer == null) {\n+      LOGGER.warning(\"Couldn't find HeaderTracer in call options. Skip exporting gfe metrics\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwODY1MQ=="}, "originalCommit": {"oid": "6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyNDIzNQ==", "bodyText": "Same flooding concern as above", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r530424235", "createdAt": "2020-11-25T14:42:35Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/ClientHeaderInterceptor.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.BetaApi;\n+import io.grpc.CallOptions;\n+import io.grpc.Channel;\n+import io.grpc.ClientCall;\n+import io.grpc.ClientInterceptor;\n+import io.grpc.ForwardingClientCall.SimpleForwardingClientCall;\n+import io.grpc.ForwardingClientCallListener.SimpleForwardingClientCallListener;\n+import io.grpc.Metadata;\n+import io.grpc.MethodDescriptor;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Surface GFE server-timing metric.\n+ *\n+ * <p>This class exports the metric from server-timing header that tracks the latency between GFE\n+ * receives the first byte of a request and reads the first byte of the response. It also tracks the\n+ * number of occurrences of missing server-timing header.\n+ */\n+@BetaApi\n+public class ClientHeaderInterceptor implements ClientInterceptor {\n+  private static final Logger LOGGER = Logger.getLogger(ClientHeaderInterceptor.class.getName());\n+\n+  public static final Metadata.Key<String> SERVER_TIMING_HEADER_KEY =\n+      Metadata.Key.of(\"server-timing\", Metadata.ASCII_STRING_MARSHALLER);\n+  private static final Pattern SERVER_TIMING_HEADER_PATTERN = Pattern.compile(\".*dur=(?<dur>\\\\d+)\");\n+\n+  @Override\n+  public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n+      final MethodDescriptor<ReqT, RespT> method, final CallOptions callOptions, Channel channel) {\n+    final ClientCall<ReqT, RespT> clientCall = channel.newCall(method, callOptions);\n+    final String span = callOptions.getOption(HeaderTracer.SPAN_NAME_CONTEXT_KEY);\n+    final HeaderTracer tracer = callOptions.getOption(HeaderTracer.HEADER_TRACER_CONTEXT_KEY);\n+    return new SimpleForwardingClientCall<ReqT, RespT>(clientCall) {\n+      @Override\n+      public void start(Listener<RespT> responseListener, Metadata headers) {\n+        super.start(\n+            new SimpleForwardingClientCallListener<RespT>(responseListener) {\n+              @Override\n+              public void onHeaders(Metadata headers) {\n+                processHeader(headers, tracer, span);\n+                super.onHeaders(headers);\n+              }\n+            },\n+            headers);\n+      }\n+    };\n+  }\n+\n+  private void processHeader(Metadata headers, HeaderTracer tracer, String span) {\n+    if (tracer == null) {\n+      LOGGER.warning(\"Couldn't find HeaderTracer in call options. Skip exporting gfe metrics\");\n+      return;\n+    }\n+    if (headers.get(SERVER_TIMING_HEADER_KEY) != null) {\n+      String serverTiming = headers.get(SERVER_TIMING_HEADER_KEY);\n+      Matcher matcher = SERVER_TIMING_HEADER_PATTERN.matcher(serverTiming);\n+      tracer.record(RpcMeasureConstants.BIGTABLE_GFE_HEADER_MISSING_COUNT, 0L, span);\n+      if (matcher.find()) {\n+        long latency = Long.valueOf(matcher.group(\"dur\"));\n+        tracer.record(RpcMeasureConstants.BIGTABLE_GFE_LATENCY, latency, span);\n+      } else {\n+        LOGGER.warning(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyNDgxMw==", "bodyText": "Also consider using auto-value", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r530424813", "createdAt": "2020-11-25T14:43:26Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracer.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.BetaApi;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableMap;\n+import io.grpc.CallOptions;\n+import io.opencensus.stats.Measure.MeasureDouble;\n+import io.opencensus.stats.Measure.MeasureLong;\n+import io.opencensus.stats.MeasureMap;\n+import io.opencensus.stats.Stats;\n+import io.opencensus.stats.StatsRecorder;\n+import io.opencensus.tags.TagContextBuilder;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tagger;\n+import io.opencensus.tags.Tags;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+@BetaApi\n+public class HeaderTracer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f526c4f2b7b92905f163ab2f0c3c2f91a3dba"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c55d9d6891f3f4a4b3479779b6b867e6bd666666", "author": {"user": {"login": "mutianf", "name": "Mattie Fu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/c55d9d6891f3f4a4b3479779b6b867e6bd666666", "committedDate": "2020-11-30T21:43:43Z", "message": "Refactor, use GrpcMetadataResponse to get the trailer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea9bb3017c9ba009fa7b7b1d9e113fea50984383", "author": {"user": {"login": "mutianf", "name": "Mattie Fu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/ea9bb3017c9ba009fa7b7b1d9e113fea50984383", "committedDate": "2020-11-30T22:09:44Z", "message": "Fix based on the code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2e8f8c6e1a23168dc022a39e5b5e529c02824c9", "author": {"user": {"login": "mutianf", "name": "Mattie Fu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/d2e8f8c6e1a23168dc022a39e5b5e529c02824c9", "committedDate": "2020-12-01T02:39:22Z", "message": "clean up HeaderTracerResponseObserver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb78b631a32582236e293e4f7cd9b84a17cb6d26", "author": {"user": {"login": "mutianf", "name": "Mattie Fu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/eb78b631a32582236e293e4f7cd9b84a17cb6d26", "committedDate": "2020-12-01T02:56:48Z", "message": "Merge branch 'master' into gfe-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38", "author": {"user": {"login": "mutianf", "name": "Mattie Fu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38", "committedDate": "2020-12-01T20:13:26Z", "message": "Add more tests for all the ops"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTQyMDc3", "url": "https://github.com/googleapis/java-bigtable/pull/535#pullrequestreview-542942077", "createdAt": "2020-12-02T15:18:31Z", "commit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "state": "APPROVED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToxODozMVrOH9f9Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTo1MDoyMFrOH9hjaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0ODc3OQ==", "bodyText": "Can you make this map instance shared with the attrs above?", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534248779", "createdAt": "2020-12-02T15:18:31Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -203,7 +205,25 @@ public static EnhancedBigtableStubSettings finalizeSettings(\n                         .build()),\n                 // Add user configured tracer\n                 settings.getTracerFactory())));\n-\n+    builder.setHeaderTracer(\n+        builder\n+            .getHeaderTracer()\n+            .toBuilder()\n+            .setStats(stats)\n+            .setTagger(tagger)\n+            .setStatsAttributes(\n+                ImmutableMap.<TagKey, TagValue>builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI1NDc0Mw==", "bodyText": "do these have to be public?", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534254743", "createdAt": "2020-12-02T15:25:58Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.auto.value.AutoValue;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import io.grpc.Metadata;\n+import io.opencensus.stats.MeasureMap;\n+import io.opencensus.stats.Stats;\n+import io.opencensus.stats.StatsRecorder;\n+import io.opencensus.tags.TagContextBuilder;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tagger;\n+import io.opencensus.tags.Tags;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+@InternalApi\n+@AutoValue\n+public abstract class HeaderTracer {\n+\n+  public static final Metadata.Key<String> SERVER_TIMING_HEADER_KEY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI1NTU0MQ==", "bodyText": "do we need the getters on the builder?", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534255541", "createdAt": "2020-12-02T15:26:55Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.auto.value.AutoValue;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import io.grpc.Metadata;\n+import io.opencensus.stats.MeasureMap;\n+import io.opencensus.stats.Stats;\n+import io.opencensus.stats.StatsRecorder;\n+import io.opencensus.tags.TagContextBuilder;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tagger;\n+import io.opencensus.tags.Tags;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+@InternalApi\n+@AutoValue\n+public abstract class HeaderTracer {\n+\n+  public static final Metadata.Key<String> SERVER_TIMING_HEADER_KEY =\n+      Metadata.Key.of(\"server-timing\", Metadata.ASCII_STRING_MARSHALLER);\n+  public static final Pattern SERVER_TIMING_HEADER_PATTERN = Pattern.compile(\".*dur=(?<dur>\\\\d+)\");\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    // <editor-fold desc=\"Public API\">\n+    public abstract Builder setTagger(@Nonnull Tagger tagger);\n+\n+    public abstract Builder setStats(@Nonnull StatsRecorder stats);\n+\n+    public abstract Builder setStatsAttributes(@Nonnull Map<TagKey, TagValue> statsAttributes);\n+\n+    public abstract Tagger getTagger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI1NjYyOA==", "bodyText": "Unless I;m mistaken, this shouldnt be necessary, autovalue should do null checks for all properties that arent marked Nullable", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534256628", "createdAt": "2020-12-02T15:28:15Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.auto.value.AutoValue;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import io.grpc.Metadata;\n+import io.opencensus.stats.MeasureMap;\n+import io.opencensus.stats.Stats;\n+import io.opencensus.stats.StatsRecorder;\n+import io.opencensus.tags.TagContextBuilder;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tagger;\n+import io.opencensus.tags.Tags;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+@InternalApi\n+@AutoValue\n+public abstract class HeaderTracer {\n+\n+  public static final Metadata.Key<String> SERVER_TIMING_HEADER_KEY =\n+      Metadata.Key.of(\"server-timing\", Metadata.ASCII_STRING_MARSHALLER);\n+  public static final Pattern SERVER_TIMING_HEADER_PATTERN = Pattern.compile(\".*dur=(?<dur>\\\\d+)\");\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    // <editor-fold desc=\"Public API\">\n+    public abstract Builder setTagger(@Nonnull Tagger tagger);\n+\n+    public abstract Builder setStats(@Nonnull StatsRecorder stats);\n+\n+    public abstract Builder setStatsAttributes(@Nonnull Map<TagKey, TagValue> statsAttributes);\n+\n+    public abstract Tagger getTagger();\n+\n+    public abstract StatsRecorder getStats();\n+\n+    public abstract Map<TagKey, TagValue> getStatsAttributes();\n+\n+    abstract HeaderTracer autoBuild();\n+\n+    public HeaderTracer build() {\n+      HeaderTracer headerTracer = autoBuild();\n+      Preconditions.checkNotNull(headerTracer.getStats(), \"StatsRecorder must be set\");\n+      Preconditions.checkNotNull(headerTracer.getTagger(), \"Tagger must be set\");\n+      Preconditions.checkNotNull(headerTracer.getStatsAttributes(), \"Stats attributes must be set\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI1OTQxMA==", "bodyText": "Please add a comment as to when spanName might be null. Its a bit surprising to me", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534259410", "createdAt": "2020-12-02T15:31:28Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.auto.value.AutoValue;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import io.grpc.Metadata;\n+import io.opencensus.stats.MeasureMap;\n+import io.opencensus.stats.Stats;\n+import io.opencensus.stats.StatsRecorder;\n+import io.opencensus.tags.TagContextBuilder;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tagger;\n+import io.opencensus.tags.Tags;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+@InternalApi\n+@AutoValue\n+public abstract class HeaderTracer {\n+\n+  public static final Metadata.Key<String> SERVER_TIMING_HEADER_KEY =\n+      Metadata.Key.of(\"server-timing\", Metadata.ASCII_STRING_MARSHALLER);\n+  public static final Pattern SERVER_TIMING_HEADER_PATTERN = Pattern.compile(\".*dur=(?<dur>\\\\d+)\");\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    // <editor-fold desc=\"Public API\">\n+    public abstract Builder setTagger(@Nonnull Tagger tagger);\n+\n+    public abstract Builder setStats(@Nonnull StatsRecorder stats);\n+\n+    public abstract Builder setStatsAttributes(@Nonnull Map<TagKey, TagValue> statsAttributes);\n+\n+    public abstract Tagger getTagger();\n+\n+    public abstract StatsRecorder getStats();\n+\n+    public abstract Map<TagKey, TagValue> getStatsAttributes();\n+\n+    abstract HeaderTracer autoBuild();\n+\n+    public HeaderTracer build() {\n+      HeaderTracer headerTracer = autoBuild();\n+      Preconditions.checkNotNull(headerTracer.getStats(), \"StatsRecorder must be set\");\n+      Preconditions.checkNotNull(headerTracer.getTagger(), \"Tagger must be set\");\n+      Preconditions.checkNotNull(headerTracer.getStatsAttributes(), \"Stats attributes must be set\");\n+      return headerTracer;\n+    }\n+    // </editor-fold>\n+  }\n+\n+  public abstract Tagger getTagger();\n+\n+  public abstract StatsRecorder getStats();\n+\n+  public abstract Map<TagKey, TagValue> getStatsAttributes();\n+\n+  public void recordGfeMetrics(@Nonnull Metadata metadata, String spanName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2MDMzNQ==", "bodyText": "I think these should be final", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534260335", "createdAt": "2020-12-02T15:32:37Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracerStreamingCallable.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.api.gax.grpc.GrpcResponseMetadata;\n+import com.google.api.gax.rpc.ApiCallContext;\n+import com.google.api.gax.rpc.ResponseObserver;\n+import com.google.api.gax.rpc.ServerStreamingCallable;\n+import com.google.api.gax.rpc.StreamController;\n+import io.grpc.Metadata;\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Record GFE metrics.\n+ *\n+ * <p>This class is considered an internal implementation detail and not meant to be used by\n+ * applications.\n+ */\n+@InternalApi\n+public class HeaderTracerStreamingCallable<RequestT, ResponseT>\n+    extends ServerStreamingCallable<RequestT, ResponseT> {\n+\n+  private ServerStreamingCallable<RequestT, ResponseT> innerCallable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2MDU4OQ==", "bodyText": "Precondition checks would be good here", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534260589", "createdAt": "2020-12-02T15:32:56Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracerStreamingCallable.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.api.gax.grpc.GrpcResponseMetadata;\n+import com.google.api.gax.rpc.ApiCallContext;\n+import com.google.api.gax.rpc.ResponseObserver;\n+import com.google.api.gax.rpc.ServerStreamingCallable;\n+import com.google.api.gax.rpc.StreamController;\n+import io.grpc.Metadata;\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Record GFE metrics.\n+ *\n+ * <p>This class is considered an internal implementation detail and not meant to be used by\n+ * applications.\n+ */\n+@InternalApi\n+public class HeaderTracerStreamingCallable<RequestT, ResponseT>\n+    extends ServerStreamingCallable<RequestT, ResponseT> {\n+\n+  private ServerStreamingCallable<RequestT, ResponseT> innerCallable;\n+  private HeaderTracer headerTracer;\n+  private String spanName;\n+\n+  public HeaderTracerStreamingCallable(\n+      @Nonnull ServerStreamingCallable<RequestT, ResponseT> callable,\n+      @Nonnull HeaderTracer headerTracer,\n+      @Nonnull String spanName) {\n+    this.innerCallable = callable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2MzE5MA==", "bodyText": "Please add a comment as to what this does. It will be helpful for future maintainers..Something like:\nThis callable will inject GrpcResponseMetadata into the ApiCallOptions. Upon rpc completion, gax will inject grpc trailers into this class. The trailers will then be processed by HeaderTracer", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534263190", "createdAt": "2020-12-02T15:36:04Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracerStreamingCallable.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.api.gax.grpc.GrpcResponseMetadata;\n+import com.google.api.gax.rpc.ApiCallContext;\n+import com.google.api.gax.rpc.ResponseObserver;\n+import com.google.api.gax.rpc.ServerStreamingCallable;\n+import com.google.api.gax.rpc.StreamController;\n+import io.grpc.Metadata;\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Record GFE metrics.\n+ *\n+ * <p>This class is considered an internal implementation detail and not meant to be used by\n+ * applications.\n+ */\n+@InternalApi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2NDE3NQ==", "bodyText": "similar to above", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534264175", "createdAt": "2020-12-02T15:37:07Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracerUnaryCallable.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.InternalApi;\n+import com.google.api.gax.grpc.GrpcResponseMetadata;\n+import com.google.api.gax.rpc.ApiCallContext;\n+import com.google.api.gax.rpc.UnaryCallable;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.grpc.Metadata;\n+\n+/**\n+ * Record GFE metrics.\n+ *\n+ * <p>This class is considered an internal implementation detail and not meant to be used by\n+ * applications.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2NTM4Mw==", "bodyText": "Also, can you add the new internal api classes to this exclusion list:\nhttps://github.com/googleapis/java-bigtable/blob/master/pom.xml#L252", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534265383", "createdAt": "2020-12-02T15:38:33Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracerStreamingCallable.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.api.gax.grpc.GrpcResponseMetadata;\n+import com.google.api.gax.rpc.ApiCallContext;\n+import com.google.api.gax.rpc.ResponseObserver;\n+import com.google.api.gax.rpc.ServerStreamingCallable;\n+import com.google.api.gax.rpc.StreamController;\n+import io.grpc.Metadata;\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Record GFE metrics.\n+ *\n+ * <p>This class is considered an internal implementation detail and not meant to be used by\n+ * applications.\n+ */\n+@InternalApi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2MzE5MA=="}, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2NjM2MA==", "bodyText": "This description is meant for end users who don't really know what t4t7 latency means. Can you reword this a bit?", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534266360", "createdAt": "2020-12-02T15:39:44Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/RpcViewConstants.java", "diffHunk": "@@ -124,4 +128,22 @@\n               BIGTABLE_APP_PROFILE_ID,\n               BIGTABLE_OP,\n               BIGTABLE_STATUS));\n+\n+  static final View BIGTABLE_GFE_LATENCY_VIEW =\n+      View.create(\n+          View.Name.create(\"cloud.google.com/java/bigtable/gfe_latency\"),\n+          \"GFE t4t7 latency in msecs\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2Njk2MQ==", "bodyText": "Can you add a note what this means? ie. that most likely the request never made it to the google's load balancers?", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534266961", "createdAt": "2020-12-02T15:40:28Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/RpcViewConstants.java", "diffHunk": "@@ -124,4 +128,22 @@\n               BIGTABLE_APP_PROFILE_ID,\n               BIGTABLE_OP,\n               BIGTABLE_STATUS));\n+\n+  static final View BIGTABLE_GFE_LATENCY_VIEW =\n+      View.create(\n+          View.Name.create(\"cloud.google.com/java/bigtable/gfe_latency\"),\n+          \"GFE t4t7 latency in msecs\",\n+          BIGTABLE_GFE_LATENCY,\n+          AGGREGATION_WITH_MILLIS_HISTOGRAM,\n+          ImmutableList.of(\n+              BIGTABLE_INSTANCE_ID, BIGTABLE_PROJECT_ID, BIGTABLE_APP_PROFILE_ID, BIGTABLE_OP));\n+\n+  static final View BIGTABLE_GFE_HEADER_MISSING_COUNT_VIEW =\n+      View.create(\n+          View.Name.create(\"cloud.google.com/java/bigtable/gfe_header_missing_count\"),\n+          \"Number of responses without the server-timing header\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2NzgwNQ==", "bodyText": "Please add a lot more docs explaining why you'd wanna do this. Also,@BetaApi", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534267805", "createdAt": "2020-12-02T15:41:31Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/RpcViews.java", "diffHunk": "@@ -33,15 +33,32 @@\n           RpcViewConstants.BIGTABLE_ATTEMPT_LATENCY_VIEW,\n           RpcViewConstants.BIGTABLE_ATTEMPTS_PER_OP_VIEW);\n \n+  private static final ImmutableSet<View> GFE_VIEW_SET =\n+      ImmutableSet.of(\n+          RpcViewConstants.BIGTABLE_GFE_LATENCY_VIEW,\n+          RpcViewConstants.BIGTABLE_GFE_HEADER_MISSING_COUNT_VIEW);\n+\n   /** Registers all Bigtable specific views. */\n   public static void registerBigtableClientViews() {\n     registerBigtableClientViews(Stats.getViewManager());\n   }\n \n+  /** Register views for GFE metrics. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2OTA0Nw==", "bodyText": "I think this needs to be atomic because this is set by a test thread and read by a server thread. Otherwise the cpu cache line might not be flushed", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534269047", "createdAt": "2020-12-02T15:43:09Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracerCallableTest.java", "diffHunk": "@@ -0,0 +1,461 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+\n+import com.google.api.gax.rpc.ClientContext;\n+import com.google.bigtable.v2.BigtableGrpc;\n+import com.google.bigtable.v2.CheckAndMutateRowRequest;\n+import com.google.bigtable.v2.CheckAndMutateRowResponse;\n+import com.google.bigtable.v2.MutateRowRequest;\n+import com.google.bigtable.v2.MutateRowResponse;\n+import com.google.bigtable.v2.MutateRowsRequest;\n+import com.google.bigtable.v2.MutateRowsResponse;\n+import com.google.bigtable.v2.ReadModifyWriteRowRequest;\n+import com.google.bigtable.v2.ReadModifyWriteRowResponse;\n+import com.google.bigtable.v2.ReadRowsRequest;\n+import com.google.bigtable.v2.ReadRowsResponse;\n+import com.google.bigtable.v2.SampleRowKeysRequest;\n+import com.google.bigtable.v2.SampleRowKeysResponse;\n+import com.google.cloud.bigtable.data.v2.BigtableDataSettings;\n+import com.google.cloud.bigtable.data.v2.FakeServiceHelper;\n+import com.google.cloud.bigtable.data.v2.models.BulkMutation;\n+import com.google.cloud.bigtable.data.v2.models.ConditionalRowMutation;\n+import com.google.cloud.bigtable.data.v2.models.Mutation;\n+import com.google.cloud.bigtable.data.v2.models.Query;\n+import com.google.cloud.bigtable.data.v2.models.ReadModifyWriteRow;\n+import com.google.cloud.bigtable.data.v2.models.Row;\n+import com.google.cloud.bigtable.data.v2.models.RowCell;\n+import com.google.cloud.bigtable.data.v2.models.RowMutation;\n+import com.google.cloud.bigtable.data.v2.stub.EnhancedBigtableStub;\n+import com.google.cloud.bigtable.data.v2.stub.EnhancedBigtableStubSettings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.protobuf.ByteString;\n+import io.grpc.ForwardingServerCall.SimpleForwardingServerCall;\n+import io.grpc.Metadata;\n+import io.grpc.ServerCall;\n+import io.grpc.ServerCallHandler;\n+import io.grpc.ServerInterceptor;\n+import io.grpc.stub.StreamObserver;\n+import io.opencensus.impl.stats.StatsComponentImpl;\n+import io.opencensus.stats.StatsComponent;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tags;\n+import java.util.Random;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Answers;\n+import org.mockito.Mock;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.mockito.stubbing.Answer;\n+\n+@RunWith(JUnit4.class)\n+public class HeaderTracerCallableTest {\n+  @Rule public MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+  private FakeServiceHelper serviceHelper;\n+  private FakeServiceHelper serviceHelperNoHeader;\n+\n+  @Mock(answer = Answers.CALLS_REAL_METHODS)\n+  private BigtableGrpc.BigtableImplBase fakeService;\n+\n+  private StatsComponent localStats = new StatsComponentImpl();\n+  private EnhancedBigtableStub stub;\n+  private EnhancedBigtableStub noHeaderStub;\n+\n+  private static final String PROJECT_ID = \"fake-project\";\n+  private static final String INSTANCE_ID = \"fake-instance\";\n+  private static final String APP_PROFILE_ID = \"default\";\n+  private static final String TABLE_ID = \"fake-table\";\n+\n+  private static final long WAIT_FOR_METRICS_TIME_MS = 1_000;\n+\n+  private int fakeServerTiming;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI3MjAzNw==", "bodyText": "Would you mind adding tests that ensure that the metric is incremented when server returns a non-ok status as well?", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534272037", "createdAt": "2020-12-02T15:46:41Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracerCallableTest.java", "diffHunk": "@@ -0,0 +1,461 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+\n+import com.google.api.gax.rpc.ClientContext;\n+import com.google.bigtable.v2.BigtableGrpc;\n+import com.google.bigtable.v2.CheckAndMutateRowRequest;\n+import com.google.bigtable.v2.CheckAndMutateRowResponse;\n+import com.google.bigtable.v2.MutateRowRequest;\n+import com.google.bigtable.v2.MutateRowResponse;\n+import com.google.bigtable.v2.MutateRowsRequest;\n+import com.google.bigtable.v2.MutateRowsResponse;\n+import com.google.bigtable.v2.ReadModifyWriteRowRequest;\n+import com.google.bigtable.v2.ReadModifyWriteRowResponse;\n+import com.google.bigtable.v2.ReadRowsRequest;\n+import com.google.bigtable.v2.ReadRowsResponse;\n+import com.google.bigtable.v2.SampleRowKeysRequest;\n+import com.google.bigtable.v2.SampleRowKeysResponse;\n+import com.google.cloud.bigtable.data.v2.BigtableDataSettings;\n+import com.google.cloud.bigtable.data.v2.FakeServiceHelper;\n+import com.google.cloud.bigtable.data.v2.models.BulkMutation;\n+import com.google.cloud.bigtable.data.v2.models.ConditionalRowMutation;\n+import com.google.cloud.bigtable.data.v2.models.Mutation;\n+import com.google.cloud.bigtable.data.v2.models.Query;\n+import com.google.cloud.bigtable.data.v2.models.ReadModifyWriteRow;\n+import com.google.cloud.bigtable.data.v2.models.Row;\n+import com.google.cloud.bigtable.data.v2.models.RowCell;\n+import com.google.cloud.bigtable.data.v2.models.RowMutation;\n+import com.google.cloud.bigtable.data.v2.stub.EnhancedBigtableStub;\n+import com.google.cloud.bigtable.data.v2.stub.EnhancedBigtableStubSettings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.protobuf.ByteString;\n+import io.grpc.ForwardingServerCall.SimpleForwardingServerCall;\n+import io.grpc.Metadata;\n+import io.grpc.ServerCall;\n+import io.grpc.ServerCallHandler;\n+import io.grpc.ServerInterceptor;\n+import io.grpc.stub.StreamObserver;\n+import io.opencensus.impl.stats.StatsComponentImpl;\n+import io.opencensus.stats.StatsComponent;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tags;\n+import java.util.Random;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Answers;\n+import org.mockito.Mock;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.mockito.stubbing.Answer;\n+\n+@RunWith(JUnit4.class)\n+public class HeaderTracerCallableTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI3MjQ2MA==", "bodyText": "final?", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534272460", "createdAt": "2020-12-02T15:47:14Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracerTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opencensus.impl.stats.StatsComponentImpl;\n+import io.opencensus.stats.StatsComponent;\n+import io.opencensus.stats.StatsRecorder;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tagger;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mockito;\n+\n+@RunWith(JUnit4.class)\n+public class HeaderTracerTest {\n+\n+  private StatsComponent localStats = new StatsComponentImpl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI3MjY2Mg==", "bodyText": "final?", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534272662", "createdAt": "2020-12-02T15:47:30Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracerCallableTest.java", "diffHunk": "@@ -0,0 +1,461 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+\n+import com.google.api.gax.rpc.ClientContext;\n+import com.google.bigtable.v2.BigtableGrpc;\n+import com.google.bigtable.v2.CheckAndMutateRowRequest;\n+import com.google.bigtable.v2.CheckAndMutateRowResponse;\n+import com.google.bigtable.v2.MutateRowRequest;\n+import com.google.bigtable.v2.MutateRowResponse;\n+import com.google.bigtable.v2.MutateRowsRequest;\n+import com.google.bigtable.v2.MutateRowsResponse;\n+import com.google.bigtable.v2.ReadModifyWriteRowRequest;\n+import com.google.bigtable.v2.ReadModifyWriteRowResponse;\n+import com.google.bigtable.v2.ReadRowsRequest;\n+import com.google.bigtable.v2.ReadRowsResponse;\n+import com.google.bigtable.v2.SampleRowKeysRequest;\n+import com.google.bigtable.v2.SampleRowKeysResponse;\n+import com.google.cloud.bigtable.data.v2.BigtableDataSettings;\n+import com.google.cloud.bigtable.data.v2.FakeServiceHelper;\n+import com.google.cloud.bigtable.data.v2.models.BulkMutation;\n+import com.google.cloud.bigtable.data.v2.models.ConditionalRowMutation;\n+import com.google.cloud.bigtable.data.v2.models.Mutation;\n+import com.google.cloud.bigtable.data.v2.models.Query;\n+import com.google.cloud.bigtable.data.v2.models.ReadModifyWriteRow;\n+import com.google.cloud.bigtable.data.v2.models.Row;\n+import com.google.cloud.bigtable.data.v2.models.RowCell;\n+import com.google.cloud.bigtable.data.v2.models.RowMutation;\n+import com.google.cloud.bigtable.data.v2.stub.EnhancedBigtableStub;\n+import com.google.cloud.bigtable.data.v2.stub.EnhancedBigtableStubSettings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.protobuf.ByteString;\n+import io.grpc.ForwardingServerCall.SimpleForwardingServerCall;\n+import io.grpc.Metadata;\n+import io.grpc.ServerCall;\n+import io.grpc.ServerCallHandler;\n+import io.grpc.ServerInterceptor;\n+import io.grpc.stub.StreamObserver;\n+import io.opencensus.impl.stats.StatsComponentImpl;\n+import io.opencensus.stats.StatsComponent;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tags;\n+import java.util.Random;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Answers;\n+import org.mockito.Mock;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.mockito.stubbing.Answer;\n+\n+@RunWith(JUnit4.class)\n+public class HeaderTracerCallableTest {\n+  @Rule public MockitoRule mockitoRule = MockitoJUnit.rule();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI3NDQzOA==", "bodyText": "I think this is a personal taste thing, but why go through mockito for this? Wouldnt it be simpler to just implement a fake BigtableImplBase?", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534274438", "createdAt": "2020-12-02T15:49:46Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracerCallableTest.java", "diffHunk": "@@ -0,0 +1,461 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+\n+import com.google.api.gax.rpc.ClientContext;\n+import com.google.bigtable.v2.BigtableGrpc;\n+import com.google.bigtable.v2.CheckAndMutateRowRequest;\n+import com.google.bigtable.v2.CheckAndMutateRowResponse;\n+import com.google.bigtable.v2.MutateRowRequest;\n+import com.google.bigtable.v2.MutateRowResponse;\n+import com.google.bigtable.v2.MutateRowsRequest;\n+import com.google.bigtable.v2.MutateRowsResponse;\n+import com.google.bigtable.v2.ReadModifyWriteRowRequest;\n+import com.google.bigtable.v2.ReadModifyWriteRowResponse;\n+import com.google.bigtable.v2.ReadRowsRequest;\n+import com.google.bigtable.v2.ReadRowsResponse;\n+import com.google.bigtable.v2.SampleRowKeysRequest;\n+import com.google.bigtable.v2.SampleRowKeysResponse;\n+import com.google.cloud.bigtable.data.v2.BigtableDataSettings;\n+import com.google.cloud.bigtable.data.v2.FakeServiceHelper;\n+import com.google.cloud.bigtable.data.v2.models.BulkMutation;\n+import com.google.cloud.bigtable.data.v2.models.ConditionalRowMutation;\n+import com.google.cloud.bigtable.data.v2.models.Mutation;\n+import com.google.cloud.bigtable.data.v2.models.Query;\n+import com.google.cloud.bigtable.data.v2.models.ReadModifyWriteRow;\n+import com.google.cloud.bigtable.data.v2.models.Row;\n+import com.google.cloud.bigtable.data.v2.models.RowCell;\n+import com.google.cloud.bigtable.data.v2.models.RowMutation;\n+import com.google.cloud.bigtable.data.v2.stub.EnhancedBigtableStub;\n+import com.google.cloud.bigtable.data.v2.stub.EnhancedBigtableStubSettings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.protobuf.ByteString;\n+import io.grpc.ForwardingServerCall.SimpleForwardingServerCall;\n+import io.grpc.Metadata;\n+import io.grpc.ServerCall;\n+import io.grpc.ServerCallHandler;\n+import io.grpc.ServerInterceptor;\n+import io.grpc.stub.StreamObserver;\n+import io.opencensus.impl.stats.StatsComponentImpl;\n+import io.opencensus.stats.StatsComponent;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tags;\n+import java.util.Random;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Answers;\n+import org.mockito.Mock;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.mockito.stubbing.Answer;\n+\n+@RunWith(JUnit4.class)\n+public class HeaderTracerCallableTest {\n+  @Rule public MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+  private FakeServiceHelper serviceHelper;\n+  private FakeServiceHelper serviceHelperNoHeader;\n+\n+  @Mock(answer = Answers.CALLS_REAL_METHODS)\n+  private BigtableGrpc.BigtableImplBase fakeService;\n+\n+  private StatsComponent localStats = new StatsComponentImpl();\n+  private EnhancedBigtableStub stub;\n+  private EnhancedBigtableStub noHeaderStub;\n+\n+  private static final String PROJECT_ID = \"fake-project\";\n+  private static final String INSTANCE_ID = \"fake-instance\";\n+  private static final String APP_PROFILE_ID = \"default\";\n+  private static final String TABLE_ID = \"fake-table\";\n+\n+  private static final long WAIT_FOR_METRICS_TIME_MS = 1_000;\n+\n+  private int fakeServerTiming;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    RpcViews.registerBigtableClientGfeViews(localStats.getViewManager());\n+\n+    // Create a server that'll inject a server-timing header with a random number and a stub that\n+    // connects to this server.\n+    fakeServerTiming = new Random().nextInt(1000) + 1;\n+    serviceHelper =\n+        new FakeServiceHelper(\n+            new ServerInterceptor() {\n+              @Override\n+              public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(\n+                  ServerCall<ReqT, RespT> serverCall,\n+                  Metadata metadata,\n+                  ServerCallHandler<ReqT, RespT> serverCallHandler) {\n+                return serverCallHandler.startCall(\n+                    new SimpleForwardingServerCall<ReqT, RespT>(serverCall) {\n+                      @Override\n+                      public void sendHeaders(Metadata headers) {\n+                        headers.put(\n+                            Metadata.Key.of(\"server-timing\", Metadata.ASCII_STRING_MARSHALLER),\n+                            String.format(\"gfet4t7; dur=%d\", fakeServerTiming));\n+                        super.sendHeaders(headers);\n+                      }\n+                    },\n+                    metadata);\n+              }\n+            },\n+            fakeService);\n+    serviceHelper.start();\n+\n+    BigtableDataSettings settings =\n+        BigtableDataSettings.newBuilderForEmulator(serviceHelper.getPort())\n+            .setProjectId(PROJECT_ID)\n+            .setInstanceId(INSTANCE_ID)\n+            .setAppProfileId(APP_PROFILE_ID)\n+            .build();\n+    EnhancedBigtableStubSettings stubSettings =\n+        EnhancedBigtableStub.finalizeSettings(\n+            settings.getStubSettings(), Tags.getTagger(), localStats.getStatsRecorder());\n+    stub = new EnhancedBigtableStub(stubSettings, ClientContext.create(stubSettings));\n+\n+    // Create another server without injecting the server-timing header and another stub that\n+    // connects to it.\n+    serviceHelperNoHeader = new FakeServiceHelper(fakeService);\n+    serviceHelperNoHeader.start();\n+\n+    BigtableDataSettings noHeaderSettings =\n+        BigtableDataSettings.newBuilderForEmulator(serviceHelperNoHeader.getPort())\n+            .setProjectId(PROJECT_ID)\n+            .setInstanceId(INSTANCE_ID)\n+            .setAppProfileId(APP_PROFILE_ID)\n+            .build();\n+    EnhancedBigtableStubSettings noHeaderStubSettings =\n+        EnhancedBigtableStub.finalizeSettings(\n+            noHeaderSettings.getStubSettings(), Tags.getTagger(), localStats.getStatsRecorder());\n+    noHeaderStub =\n+        new EnhancedBigtableStub(noHeaderStubSettings, ClientContext.create(noHeaderStubSettings));\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    stub.close();\n+    noHeaderStub.close();\n+    serviceHelper.shutdown();\n+    serviceHelperNoHeader.shutdown();\n+  }\n+\n+  @Test\n+  public void testGFELatencyMetricReadRows() throws InterruptedException {\n+    doAnswer(new ReadRowsAnswer())\n+        .when(fakeService)\n+        .readRows(any(ReadRowsRequest.class), anyObserver(ReadRowsResponse.class));\n+\n+    stub.readRowsCallable().call(Query.create(TABLE_ID));\n+\n+    Thread.sleep(WAIT_FOR_METRICS_TIME_MS);\n+\n+    long latency =\n+        StatsTestUtils.getAggregationValueAsLong(\n+            localStats,\n+            RpcViewConstants.BIGTABLE_GFE_LATENCY_VIEW,\n+            ImmutableMap.<TagKey, TagValue>of(\n+                RpcMeasureConstants.BIGTABLE_OP, TagValue.create(\"Bigtable.ReadRows\")),\n+            PROJECT_ID,\n+            INSTANCE_ID,\n+            APP_PROFILE_ID);\n+\n+    assertThat(latency).isEqualTo(fakeServerTiming);\n+  }\n+\n+  @Test\n+  public void testGFELatencyMetricMutateRow() throws InterruptedException {\n+    doAnswer(new MutateRowAnswer())\n+        .when(fakeService)\n+        .mutateRow(any(MutateRowRequest.class), anyObserver(MutateRowResponse.class));\n+\n+    stub.mutateRowCallable().call(RowMutation.create(TABLE_ID, \"fake-key\"));\n+\n+    Thread.sleep(WAIT_FOR_METRICS_TIME_MS);\n+\n+    long latency =\n+        StatsTestUtils.getAggregationValueAsLong(\n+            localStats,\n+            RpcViewConstants.BIGTABLE_GFE_LATENCY_VIEW,\n+            ImmutableMap.of(RpcMeasureConstants.BIGTABLE_OP, TagValue.create(\"Bigtable.MutateRow\")),\n+            PROJECT_ID,\n+            INSTANCE_ID,\n+            APP_PROFILE_ID);\n+\n+    assertThat(latency).isEqualTo(fakeServerTiming);\n+  }\n+\n+  @Test\n+  public void testGFELatencyMetricMutateRows() throws InterruptedException {\n+    doAnswer(new MutateRowsAnswer())\n+        .when(fakeService)\n+        .mutateRows(any(MutateRowsRequest.class), anyObserver(MutateRowsResponse.class));\n+\n+    BulkMutation mutations =\n+        BulkMutation.create(TABLE_ID)\n+            .add(\"key\", Mutation.create().setCell(\"fake-family\", \"fake-qualifier\", \"fake-value\"));\n+    stub.bulkMutateRowsCallable().call(mutations);\n+\n+    Thread.sleep(WAIT_FOR_METRICS_TIME_MS);\n+\n+    long latency =\n+        StatsTestUtils.getAggregationValueAsLong(\n+            localStats,\n+            RpcViewConstants.BIGTABLE_GFE_LATENCY_VIEW,\n+            ImmutableMap.of(\n+                RpcMeasureConstants.BIGTABLE_OP, TagValue.create(\"Bigtable.MutateRows\")),\n+            PROJECT_ID,\n+            INSTANCE_ID,\n+            APP_PROFILE_ID);\n+\n+    assertThat(latency).isEqualTo(fakeServerTiming);\n+  }\n+\n+  @Test\n+  public void testGFELatencySampleRowKeys() throws InterruptedException {\n+    doAnswer(new SampleRowKeysAnswer())\n+        .when(fakeService)\n+        .sampleRowKeys(any(SampleRowKeysRequest.class), anyObserver(SampleRowKeysResponse.class));\n+    stub.sampleRowKeysCallable().call(TABLE_ID);\n+\n+    Thread.sleep(WAIT_FOR_METRICS_TIME_MS);\n+    long latency =\n+        StatsTestUtils.getAggregationValueAsLong(\n+            localStats,\n+            RpcViewConstants.BIGTABLE_GFE_LATENCY_VIEW,\n+            ImmutableMap.of(\n+                RpcMeasureConstants.BIGTABLE_OP, TagValue.create(\"Bigtable.SampleRowKeys\")),\n+            PROJECT_ID,\n+            INSTANCE_ID,\n+            APP_PROFILE_ID);\n+    assertThat(latency).isEqualTo(fakeServerTiming);\n+  }\n+\n+  @Test\n+  public void testGFELatencyCheckAndMutateRow() throws InterruptedException {\n+    doAnswer(new CheckAndMutateRowAnswer())\n+        .when(fakeService)\n+        .checkAndMutateRow(\n+            any(CheckAndMutateRowRequest.class), anyObserver(CheckAndMutateRowResponse.class));\n+\n+    ConditionalRowMutation mutation =\n+        ConditionalRowMutation.create(TABLE_ID, \"fake-key\")\n+            .then(Mutation.create().setCell(\"fake-family\", \"fake-qualifier\", \"fake-value\"));\n+    stub.checkAndMutateRowCallable().call(mutation);\n+\n+    Thread.sleep(WAIT_FOR_METRICS_TIME_MS);\n+    long latency =\n+        StatsTestUtils.getAggregationValueAsLong(\n+            localStats,\n+            RpcViewConstants.BIGTABLE_GFE_LATENCY_VIEW,\n+            ImmutableMap.of(\n+                RpcMeasureConstants.BIGTABLE_OP, TagValue.create(\"Bigtable.CheckAndMutateRow\")),\n+            PROJECT_ID,\n+            INSTANCE_ID,\n+            APP_PROFILE_ID);\n+    assertThat(latency).isEqualTo(fakeServerTiming);\n+  }\n+\n+  @Test\n+  public void testGFELatencyReadModifyWriteRow() throws InterruptedException {\n+    doAnswer(new ReadModifyWriteRowAnswer())\n+        .when(fakeService)\n+        .readModifyWriteRow(\n+            any(ReadModifyWriteRowRequest.class), anyObserver(ReadModifyWriteRowResponse.class));\n+\n+    ReadModifyWriteRow request =\n+        ReadModifyWriteRow.create(TABLE_ID, \"fake-key\")\n+            .append(\"fake-family\", \"fake-qualifier\", \"suffix\");\n+    stub.readModifyWriteRowCallable().call(request);\n+\n+    Thread.sleep(WAIT_FOR_METRICS_TIME_MS);\n+    long latency =\n+        StatsTestUtils.getAggregationValueAsLong(\n+            localStats,\n+            RpcViewConstants.BIGTABLE_GFE_LATENCY_VIEW,\n+            ImmutableMap.of(\n+                RpcMeasureConstants.BIGTABLE_OP, TagValue.create(\"Bigtable.ReadModifyWriteRow\")),\n+            PROJECT_ID,\n+            INSTANCE_ID,\n+            APP_PROFILE_ID);\n+    assertThat(latency).isEqualTo(fakeServerTiming);\n+  }\n+\n+  @Test\n+  public void testGFEMissingHeaderMetric() throws InterruptedException {\n+    doAnswer(new ReadRowsAnswer())\n+        .when(fakeService)\n+        .readRows(any(ReadRowsRequest.class), anyObserver(ReadRowsResponse.class));\n+    doAnswer(new MutateRowAnswer())\n+        .when(fakeService)\n+        .mutateRow(any(MutateRowRequest.class), anyObserver(MutateRowResponse.class));\n+\n+    // Make a few calls to the server which will inject the server-timing header and the counter\n+    // should be 0.\n+    stub.readRowsCallable().call(Query.create(TABLE_ID));\n+    stub.mutateRowCallable().call(RowMutation.create(TABLE_ID, \"key\"));\n+\n+    Thread.sleep(WAIT_FOR_METRICS_TIME_MS);\n+    long mutateRowMissingCount =\n+        StatsTestUtils.getAggregationValueAsLong(\n+            localStats,\n+            RpcViewConstants.BIGTABLE_GFE_HEADER_MISSING_COUNT_VIEW,\n+            ImmutableMap.of(RpcMeasureConstants.BIGTABLE_OP, TagValue.create(\"Bigtable.MutateRow\")),\n+            PROJECT_ID,\n+            INSTANCE_ID,\n+            APP_PROFILE_ID);\n+    long readRowsMissingCount =\n+        StatsTestUtils.getAggregationValueAsLong(\n+            localStats,\n+            RpcViewConstants.BIGTABLE_GFE_HEADER_MISSING_COUNT_VIEW,\n+            ImmutableMap.<TagKey, TagValue>of(\n+                RpcMeasureConstants.BIGTABLE_OP, TagValue.create(\"Bigtable.ReadRows\")),\n+            PROJECT_ID,\n+            INSTANCE_ID,\n+            APP_PROFILE_ID);\n+\n+    Thread.sleep(WAIT_FOR_METRICS_TIME_MS);\n+\n+    assertThat(mutateRowMissingCount).isEqualTo(0);\n+    assertThat(readRowsMissingCount).isEqualTo(0);\n+\n+    // Make a few more calls to the server which won't add the header and the counter should match\n+    // the number of requests sent.\n+    int readRowsCalls = new Random().nextInt(10) + 1;\n+    int mutateRowCalls = new Random().nextInt(10) + 1;\n+    for (int i = 0; i < mutateRowCalls; i++) {\n+      noHeaderStub.mutateRowCallable().call(RowMutation.create(TABLE_ID, \"fake-key\" + i));\n+    }\n+    for (int i = 0; i < readRowsCalls; i++) {\n+      noHeaderStub.readRowsCallable().call(Query.create(TABLE_ID));\n+    }\n+\n+    Thread.sleep(WAIT_FOR_METRICS_TIME_MS);\n+\n+    mutateRowMissingCount =\n+        StatsTestUtils.getAggregationValueAsLong(\n+            localStats,\n+            RpcViewConstants.BIGTABLE_GFE_HEADER_MISSING_COUNT_VIEW,\n+            ImmutableMap.of(RpcMeasureConstants.BIGTABLE_OP, TagValue.create(\"Bigtable.MutateRow\")),\n+            PROJECT_ID,\n+            INSTANCE_ID,\n+            APP_PROFILE_ID);\n+    readRowsMissingCount =\n+        StatsTestUtils.getAggregationValueAsLong(\n+            localStats,\n+            RpcViewConstants.BIGTABLE_GFE_HEADER_MISSING_COUNT_VIEW,\n+            ImmutableMap.<TagKey, TagValue>of(\n+                RpcMeasureConstants.BIGTABLE_OP, TagValue.create(\"Bigtable.ReadRows\")),\n+            PROJECT_ID,\n+            INSTANCE_ID,\n+            APP_PROFILE_ID);\n+\n+    assertThat(mutateRowMissingCount).isEqualTo(mutateRowCalls);\n+    assertThat(readRowsMissingCount).isEqualTo(readRowsCalls);\n+  }\n+\n+  private class ReadRowAnswer implements Answer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI3NDkyMw==", "bodyText": "nit. testDefaultBuilder()", "url": "https://github.com/googleapis/java-bigtable/pull/535#discussion_r534274923", "createdAt": "2020-12-02T15:50:20Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/stub/metrics/HeaderTracerTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opencensus.impl.stats.StatsComponentImpl;\n+import io.opencensus.stats.StatsComponent;\n+import io.opencensus.stats.StatsRecorder;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tagger;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mockito;\n+\n+@RunWith(JUnit4.class)\n+public class HeaderTracerTest {\n+\n+  private StatsComponent localStats = new StatsComponentImpl();\n+\n+  @Test\n+  public void testEmptyBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee3b64a1bf454d6afdfeaf55324c00bec9a5c38"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "797e9b2ff0333fd5e4d3cae27937737ae709e3f8", "author": {"user": {"login": "mutianf", "name": "Mattie Fu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/797e9b2ff0333fd5e4d3cae27937737ae709e3f8", "committedDate": "2020-12-03T18:48:48Z", "message": "Improve documents, changes for directPath and more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "125587f11974b6ad7cc96389111116a736376eac", "author": {"user": {"login": "mutianf", "name": "Mattie Fu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/125587f11974b6ad7cc96389111116a736376eac", "committedDate": "2020-12-03T18:49:40Z", "message": "Merge branch 'master' into gfe-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20ec8d6bd0fdb8df8dc27265606986a07abca661", "author": {"user": {"login": "mutianf", "name": "Mattie Fu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/20ec8d6bd0fdb8df8dc27265606986a07abca661", "committedDate": "2020-12-03T19:07:38Z", "message": "Small fixes in the doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "757d12b3d3735d02c8bddabf7fc7ac63ab82e02a", "author": {"user": {"login": "mutianf", "name": "Mattie Fu"}}, "url": "https://github.com/googleapis/java-bigtable/commit/757d12b3d3735d02c8bddabf7fc7ac63ab82e02a", "committedDate": "2020-12-10T01:14:37Z", "message": "small clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MjAwMDI3", "url": "https://github.com/googleapis/java-bigtable/pull/535#pullrequestreview-554200027", "createdAt": "2020-12-17T00:49:50Z", "commit": {"oid": "757d12b3d3735d02c8bddabf7fc7ac63ab82e02a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1046, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}