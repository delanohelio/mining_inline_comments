{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NjIwOTY0", "number": 398, "title": "feat: extend channel priming logic to also send fake requests", "bodyText": "This PR upgrades the existing channel refresher to send a fake read row request to ensure that server side caches are warmed up. The new refresher will create a temporary stub around the new channel, which will reuse all of the existing request decorations (resource headers and user agent)", "createdAt": "2020-08-28T20:11:23Z", "url": "https://github.com/googleapis/java-bigtable/pull/398", "merged": true, "mergeCommit": {"oid": "6f1ead2097150a87cb9712bcf35c6eaa9d57440c"}, "closed": true, "closedAt": "2020-09-01T21:27:12Z", "author": {"login": "igorbernstein2"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDXGzFgH2gAyNDc1NjIwOTY0OjJjZTQ4ZjEwMzIxOTk0OTRiMzVjZTM5OTdlYzdlYTBmNDI1ZmE0ZjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEuQuZAFqTQ4MDEyOTU1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2ce48f1032199494b35ce3997ec7ea0f425fa4f1", "author": {"user": {"login": "igorbernstein2", "name": "Igor Bernstein"}}, "url": "https://github.com/googleapis/java-bigtable/commit/2ce48f1032199494b35ce3997ec7ea0f425fa4f1", "committedDate": "2020-08-28T15:54:15Z", "message": "feat: extend channel priming logic to also send fake requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "411445385668e6f79a3e19652ff05efb5b41fa9b", "author": {"user": {"login": "igorbernstein2", "name": "Igor Bernstein"}}, "url": "https://github.com/googleapis/java-bigtable/commit/411445385668e6f79a3e19652ff05efb5b41fa9b", "committedDate": "2020-08-28T21:41:31Z", "message": "finish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8ead38bd3c3ff93d1deb37a5458d2517bec1824", "author": {"user": {"login": "igorbernstein2", "name": "Igor Bernstein"}}, "url": "https://github.com/googleapis/java-bigtable/commit/c8ead38bd3c3ff93d1deb37a5458d2517bec1824", "committedDate": "2020-08-28T21:42:47Z", "message": "remove debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fba802609f17d254433d17966cbd9ff407ea7657", "author": {"user": {"login": "igorbernstein2", "name": "Igor Bernstein"}}, "url": "https://github.com/googleapis/java-bigtable/commit/fba802609f17d254433d17966cbd9ff407ea7657", "committedDate": "2020-08-28T21:55:09Z", "message": "copyright"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ff458e0a7abff09a3a6f69b9a96db43a5b60f12", "author": {"user": {"login": "igorbernstein2", "name": "Igor Bernstein"}}, "url": "https://github.com/googleapis/java-bigtable/commit/3ff458e0a7abff09a3a6f69b9a96db43a5b60f12", "committedDate": "2020-08-31T16:41:53Z", "message": "remove debug code from test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "555b9ab71595361eee6df24a669317de6cb79fe9", "author": {"user": {"login": "igorbernstein2", "name": "Igor Bernstein"}}, "url": "https://github.com/googleapis/java-bigtable/commit/555b9ab71595361eee6df24a669317de6cb79fe9", "committedDate": "2020-08-31T17:20:39Z", "message": "fix deps"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDIyMjEz", "url": "https://github.com/googleapis/java-bigtable/pull/398#pullrequestreview-479022213", "createdAt": "2020-08-31T22:52:38Z", "commit": {"oid": "555b9ab71595361eee6df24a669317de6cb79fe9"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjo1MjozOFrOHKMZcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjo1Nzo1MFrOHKMnDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1MDkzMA==", "bodyText": "Can we add some tests around this to ensure the proper values are set in the settings?", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r480450930", "createdAt": "2020-08-31T22:52:38Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -120,65 +123,89 @@\n \n   public static EnhancedBigtableStub create(EnhancedBigtableStubSettings settings)\n       throws IOException {\n-    ClientContext clientContext = ClientContext.create(settings);\n+    settings = finalizeSettings(settings, Tags.getTagger(), Stats.getStatsRecorder());\n \n-    return new EnhancedBigtableStub(\n-        settings, clientContext, Tags.getTagger(), Stats.getStatsRecorder());\n+    return new EnhancedBigtableStub(settings, ClientContext.create(settings));\n   }\n \n-  @InternalApi(\"Visible for testing\")\n-  public EnhancedBigtableStub(\n-      EnhancedBigtableStubSettings settings,\n-      ClientContext clientContext,\n-      Tagger tagger,\n-      StatsRecorder statsRecorder) {\n-    this.settings = settings;\n+  public static EnhancedBigtableStubSettings finalizeSettings(\n+      EnhancedBigtableStubSettings settings, Tagger tagger, StatsRecorder stats)\n+      throws IOException {\n+    EnhancedBigtableStubSettings.Builder builder = settings.toBuilder();\n+\n+    if (settings.isRefreshingChannel()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b9ab71595361eee6df24a669317de6cb79fe9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1MjU2MQ==", "bodyText": "should this check be moved to where we are setting the transport provider, https://github.com/googleapis/java-bigtable/pull/398/files#diff-dad9668e639c962562540f7f70a24138R144?", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r480452561", "createdAt": "2020-08-31T22:54:57Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java", "diffHunk": "@@ -760,17 +787,10 @@ public EnhancedBigtableStubSettings build() {\n       Preconditions.checkState(projectId != null, \"Project id must be set\");\n       Preconditions.checkState(instanceId != null, \"Instance id must be set\");\n \n-      // Set ChannelPrimer on TransportChannelProvider so channels will gracefully refresh\n-      // connections to Cloud Bigtable service\n       if (isRefreshingChannel) {\n         Preconditions.checkArgument(\n             getTransportChannelProvider() instanceof InstantiatingGrpcChannelProvider,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b9ab71595361eee6df24a669317de6cb79fe9"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1MzQxOQ==", "bodyText": "can we abstract any of this out into test helpers?", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r480453419", "createdAt": "2020-08-31T22:56:17Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimerTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.core.ApiFunction;\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.OAuth2Credentials;\n+import com.google.bigtable.v2.BigtableGrpc.BigtableImplBase;\n+import com.google.bigtable.v2.ReadRowsRequest;\n+import com.google.bigtable.v2.ReadRowsResponse;\n+import com.google.bigtable.v2.RowFilter;\n+import com.google.bigtable.v2.RowSet;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.Metadata;\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.ServerCall;\n+import io.grpc.ServerCall.Listener;\n+import io.grpc.ServerCallHandler;\n+import io.grpc.ServerInterceptor;\n+import io.grpc.Status;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.logging.Handler;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class BigtableChannelPrimerTest {\n+  private static final String TOKEN_VALUE = \"fake-token\";\n+\n+  int port;\n+  Server server;\n+  FakeService fakeService;\n+  MetadataInterceptor metadataInterceptor;\n+  BigtableChannelPrimer primer;\n+  ManagedChannel channel;\n+  private LogHandler logHandler;\n+\n+  @Before\n+  public void setup() throws IOException {\n+    try (ServerSocket ss = new ServerSocket(0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b9ab71595361eee6df24a669317de6cb79fe9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1NDQxNA==", "bodyText": "this is a little confusing to me. Why did we separate these pieces out?", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r480454414", "createdAt": "2020-08-31T22:57:50Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -120,65 +123,89 @@\n \n   public static EnhancedBigtableStub create(EnhancedBigtableStubSettings settings)\n       throws IOException {\n-    ClientContext clientContext = ClientContext.create(settings);\n+    settings = finalizeSettings(settings, Tags.getTagger(), Stats.getStatsRecorder());\n \n-    return new EnhancedBigtableStub(\n-        settings, clientContext, Tags.getTagger(), Stats.getStatsRecorder());\n+    return new EnhancedBigtableStub(settings, ClientContext.create(settings));\n   }\n \n-  @InternalApi(\"Visible for testing\")\n-  public EnhancedBigtableStub(\n-      EnhancedBigtableStubSettings settings,\n-      ClientContext clientContext,\n-      Tagger tagger,\n-      StatsRecorder statsRecorder) {\n-    this.settings = settings;\n+  public static EnhancedBigtableStubSettings finalizeSettings(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b9ab71595361eee6df24a669317de6cb79fe9"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4Nzg0NTg4", "url": "https://github.com/googleapis/java-bigtable/pull/398#pullrequestreview-478784588", "createdAt": "2020-08-31T16:59:24Z", "commit": {"oid": "3ff458e0a7abff09a3a6f69b9a96db43a5b60f12"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzowNDo0NFrOHKBFoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNDowODoyN1rOHK3_ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NTYzMg==", "bodyText": "Should we extend this to 30? So it's consistent with the 30s timeout?", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r480265632", "createdAt": "2020-08-31T17:04:44Z", "author": {"login": "tonytanger"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimer.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub;\n+\n+import static com.google.cloud.bigtable.data.v2.models.Filters.FILTERS;\n+\n+import com.google.api.client.util.Preconditions;\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.BetaApi;\n+import com.google.api.gax.core.FixedCredentialsProvider;\n+import com.google.api.gax.core.InstantiatingExecutorProvider;\n+import com.google.api.gax.grpc.ChannelPrimer;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.bigtable.data.v2.models.Query;\n+import com.google.cloud.bigtable.data.v2.models.Row;\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.ByteString;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ManagedChannel;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Logger;\n+import org.threeten.bp.Duration;\n+\n+/**\n+ * A channel warmer that ensures that a Bigtable channel is ready to be used before being added to\n+ * the active {@link com.google.api.gax.grpc.ChannelPool}.\n+ *\n+ * <p>This implementation is subject to change in the future, but currently it will prime the\n+ * channel by sending a ReadRow request for a hardcoded, non-existent row key.\n+ */\n+@BetaApi(\"Channel priming is not currently stable and might change in the future\")\n+class BigtableChannelPrimer implements ChannelPrimer {\n+  private static Logger LOG = Logger.getLogger(BigtableChannelPrimer.class.toString());\n+\n+  static ByteString PRIMING_ROW_KEY = ByteString.copyFromUtf8(\"nonexistent-priming-row\");\n+  private static Duration PRIME_REQUEST_TIMEOUT = Duration.ofSeconds(30);\n+\n+  private final EnhancedBigtableStubSettings settingsTemplate;\n+  private final List<String> tableIds;\n+\n+  static BigtableChannelPrimer create(\n+      Credentials credentials,\n+      String projectId,\n+      String instanceId,\n+      String appProfileId,\n+      List<String> tableIds) {\n+    EnhancedBigtableStubSettings.Builder builder =\n+        EnhancedBigtableStubSettings.newBuilder()\n+            .setProjectId(projectId)\n+            .setInstanceId(instanceId)\n+            .setAppProfileId(appProfileId)\n+            .setCredentialsProvider(FixedCredentialsProvider.create(credentials))\n+            .setExecutorProvider(\n+                InstantiatingExecutorProvider.newBuilder().setExecutorThreadCount(1).build());\n+\n+    // Disable retries for priming request\n+    builder\n+        .readRowSettings()\n+        .setRetrySettings(\n+            builder\n+                .readRowSettings()\n+                .getRetrySettings()\n+                .toBuilder()\n+                .setMaxAttempts(1)\n+                .setJittered(false)\n+                .setInitialRpcTimeout(PRIME_REQUEST_TIMEOUT)\n+                .setMaxRpcTimeout(PRIME_REQUEST_TIMEOUT)\n+                .setTotalTimeout(PRIME_REQUEST_TIMEOUT)\n+                .build());\n+    return new BigtableChannelPrimer(builder.build(), tableIds);\n+  }\n+\n+  private BigtableChannelPrimer(\n+      EnhancedBigtableStubSettings settingsTemplate, List<String> tableIds) {\n+    Preconditions.checkNotNull(settingsTemplate, \"settingsTemplate can't be null\");\n+    this.settingsTemplate = settingsTemplate;\n+    this.tableIds = ImmutableList.copyOf(tableIds);\n+  }\n+\n+  @Override\n+  public void primeChannel(ManagedChannel managedChannel) {\n+    try {\n+      primeChannelUnsafe(managedChannel);\n+    } catch (IOException | RuntimeException e) {\n+      LOG.warning(\n+          String.format(\"Unexpected error while trying to prime a channel: %s\", e.getMessage()));\n+    }\n+  }\n+\n+  private void primeChannelUnsafe(ManagedChannel managedChannel) throws IOException {\n+    if (tableIds.isEmpty()) {\n+      waitForChannelReady(managedChannel);\n+    } else {\n+      sendPrimeRequests(managedChannel);\n+    }\n+  }\n+\n+  private void waitForChannelReady(ManagedChannel managedChannel) {\n+    for (int i = 0; i < 10; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff458e0a7abff09a3a6f69b9a96db43a5b60f12"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NDc1MA==", "bodyText": "I'm not sure I understand why this is called unsafe?", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r480274750", "createdAt": "2020-08-31T17:22:30Z", "author": {"login": "tonytanger"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimer.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub;\n+\n+import static com.google.cloud.bigtable.data.v2.models.Filters.FILTERS;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.BetaApi;\n+import com.google.api.gax.core.FixedCredentialsProvider;\n+import com.google.api.gax.core.InstantiatingExecutorProvider;\n+import com.google.api.gax.grpc.ChannelPrimer;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.bigtable.data.v2.models.Query;\n+import com.google.cloud.bigtable.data.v2.models.Row;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.ByteString;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ManagedChannel;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Logger;\n+import org.threeten.bp.Duration;\n+\n+/**\n+ * A channel warmer that ensures that a Bigtable channel is ready to be used before being added to\n+ * the active {@link com.google.api.gax.grpc.ChannelPool}.\n+ *\n+ * <p>This implementation is subject to change in the future, but currently it will prime the\n+ * channel by sending a ReadRow request for a hardcoded, non-existent row key.\n+ */\n+@BetaApi(\"Channel priming is not currently stable and might change in the future\")\n+class BigtableChannelPrimer implements ChannelPrimer {\n+  private static Logger LOG = Logger.getLogger(BigtableChannelPrimer.class.toString());\n+\n+  static ByteString PRIMING_ROW_KEY = ByteString.copyFromUtf8(\"nonexistent-priming-row\");\n+  private static Duration PRIME_REQUEST_TIMEOUT = Duration.ofSeconds(30);\n+\n+  private final EnhancedBigtableStubSettings settingsTemplate;\n+  private final List<String> tableIds;\n+\n+  static BigtableChannelPrimer create(\n+      Credentials credentials,\n+      String projectId,\n+      String instanceId,\n+      String appProfileId,\n+      List<String> tableIds) {\n+    EnhancedBigtableStubSettings.Builder builder =\n+        EnhancedBigtableStubSettings.newBuilder()\n+            .setProjectId(projectId)\n+            .setInstanceId(instanceId)\n+            .setAppProfileId(appProfileId)\n+            .setCredentialsProvider(FixedCredentialsProvider.create(credentials))\n+            .setExecutorProvider(\n+                InstantiatingExecutorProvider.newBuilder().setExecutorThreadCount(1).build());\n+\n+    // Disable retries for priming request\n+    builder\n+        .readRowSettings()\n+        .setRetrySettings(\n+            builder\n+                .readRowSettings()\n+                .getRetrySettings()\n+                .toBuilder()\n+                .setMaxAttempts(1)\n+                .setJittered(false)\n+                .setInitialRpcTimeout(PRIME_REQUEST_TIMEOUT)\n+                .setMaxRpcTimeout(PRIME_REQUEST_TIMEOUT)\n+                .setTotalTimeout(PRIME_REQUEST_TIMEOUT)\n+                .build());\n+    return new BigtableChannelPrimer(builder.build(), tableIds);\n+  }\n+\n+  private BigtableChannelPrimer(\n+      EnhancedBigtableStubSettings settingsTemplate, List<String> tableIds) {\n+    Preconditions.checkNotNull(settingsTemplate, \"settingsTemplate can't be null\");\n+    this.settingsTemplate = settingsTemplate;\n+    this.tableIds = ImmutableList.copyOf(tableIds);\n+  }\n+\n+  @Override\n+  public void primeChannel(ManagedChannel managedChannel) {\n+    try {\n+      primeChannelUnsafe(managedChannel);\n+    } catch (IOException | RuntimeException e) {\n+      LOG.warning(\n+          String.format(\"Unexpected error while trying to prime a channel: %s\", e.getMessage()));\n+    }\n+  }\n+\n+  private void primeChannelUnsafe(ManagedChannel managedChannel) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b9ab71595361eee6df24a669317de6cb79fe9"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4NDcxMQ==", "bodyText": "I'm not familiar with this. Before it was set on clientContext now it's set on stubsettings builder. Why was this changed?", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r480384711", "createdAt": "2020-08-31T20:36:32Z", "author": {"login": "tonytanger"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -120,65 +123,89 @@\n \n   public static EnhancedBigtableStub create(EnhancedBigtableStubSettings settings)\n       throws IOException {\n-    ClientContext clientContext = ClientContext.create(settings);\n+    settings = finalizeSettings(settings, Tags.getTagger(), Stats.getStatsRecorder());\n \n-    return new EnhancedBigtableStub(\n-        settings, clientContext, Tags.getTagger(), Stats.getStatsRecorder());\n+    return new EnhancedBigtableStub(settings, ClientContext.create(settings));\n   }\n \n-  @InternalApi(\"Visible for testing\")\n-  public EnhancedBigtableStub(\n-      EnhancedBigtableStubSettings settings,\n-      ClientContext clientContext,\n-      Tagger tagger,\n-      StatsRecorder statsRecorder) {\n-    this.settings = settings;\n+  public static EnhancedBigtableStubSettings finalizeSettings(\n+      EnhancedBigtableStubSettings settings, Tagger tagger, StatsRecorder stats)\n+      throws IOException {\n+    EnhancedBigtableStubSettings.Builder builder = settings.toBuilder();\n+\n+    if (settings.isRefreshingChannel()) {\n+      // Fix the credentials so that they can be shared\n+      Credentials credentials = null;\n+      if (settings.getCredentialsProvider() != null) {\n+        credentials = settings.getCredentialsProvider().getCredentials();\n+      }\n+      builder.setCredentialsProvider(FixedCredentialsProvider.create(credentials));\n+\n+      // Inject the primer\n+      InstantiatingGrpcChannelProvider transportProvider =\n+          (InstantiatingGrpcChannelProvider) settings.getTransportChannelProvider();\n+\n+      builder.setTransportChannelProvider(\n+          transportProvider\n+              .toBuilder()\n+              .setChannelPrimer(\n+                  BigtableChannelPrimer.create(\n+                      credentials,\n+                      settings.getProjectId(),\n+                      settings.getInstanceId(),\n+                      settings.getAppProfileId(),\n+                      settings.getPrimedTableIds()))\n+              .build());\n+    }\n \n-    this.clientContext =\n-        clientContext\n-            .toBuilder()\n-            .setTracerFactory(\n-                new CompositeTracerFactory(\n-                    ImmutableList.of(\n-                        // Add OpenCensus Tracing\n-                        new OpencensusTracerFactory(\n-                            ImmutableMap.<String, String>builder()\n-                                // Annotate traces with the same tags as metrics\n-                                .put(\n-                                    RpcMeasureConstants.BIGTABLE_PROJECT_ID.getName(),\n-                                    settings.getProjectId())\n-                                .put(\n-                                    RpcMeasureConstants.BIGTABLE_INSTANCE_ID.getName(),\n-                                    settings.getInstanceId())\n-                                .put(\n-                                    RpcMeasureConstants.BIGTABLE_APP_PROFILE_ID.getName(),\n-                                    settings.getAppProfileId())\n-                                // Also annotate traces with library versions\n-                                .put(\"gax\", GaxGrpcProperties.getGaxGrpcVersion())\n-                                .put(\"grpc\", GaxGrpcProperties.getGrpcVersion())\n-                                .put(\n-                                    \"gapic\",\n-                                    GaxProperties.getLibraryVersion(\n-                                        EnhancedBigtableStubSettings.class))\n-                                .build()),\n-                        // Add OpenCensus Metrics\n-                        MetricsTracerFactory.create(\n-                            tagger,\n-                            statsRecorder,\n-                            ImmutableMap.<TagKey, TagValue>builder()\n-                                .put(\n-                                    RpcMeasureConstants.BIGTABLE_PROJECT_ID,\n-                                    TagValue.create(settings.getProjectId()))\n-                                .put(\n-                                    RpcMeasureConstants.BIGTABLE_INSTANCE_ID,\n-                                    TagValue.create(settings.getInstanceId()))\n-                                .put(\n-                                    RpcMeasureConstants.BIGTABLE_APP_PROFILE_ID,\n-                                    TagValue.create(settings.getAppProfileId()))\n-                                .build()),\n-                        // Add user configured tracer\n-                        clientContext.getTracerFactory())))\n-            .build();\n+    // Inject Opencensus instrumentation\n+    builder.setTracerFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b9ab71595361eee6df24a669317de6cb79fe9"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE2NTE1Ng==", "bodyText": "It would be nice to have a comment here explaining the consequence of \"setChannelPrimer\" that the channel is created once, but periodically creates a new channel, runs BigtableChannelPrimer on the newly created channel and replaces the existing one with the new one.", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481165156", "createdAt": "2020-09-01T14:08:27Z", "author": {"login": "tonytanger"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -120,65 +123,89 @@\n \n   public static EnhancedBigtableStub create(EnhancedBigtableStubSettings settings)\n       throws IOException {\n-    ClientContext clientContext = ClientContext.create(settings);\n+    settings = finalizeSettings(settings, Tags.getTagger(), Stats.getStatsRecorder());\n \n-    return new EnhancedBigtableStub(\n-        settings, clientContext, Tags.getTagger(), Stats.getStatsRecorder());\n+    return new EnhancedBigtableStub(settings, ClientContext.create(settings));\n   }\n \n-  @InternalApi(\"Visible for testing\")\n-  public EnhancedBigtableStub(\n-      EnhancedBigtableStubSettings settings,\n-      ClientContext clientContext,\n-      Tagger tagger,\n-      StatsRecorder statsRecorder) {\n-    this.settings = settings;\n+  public static EnhancedBigtableStubSettings finalizeSettings(\n+      EnhancedBigtableStubSettings settings, Tagger tagger, StatsRecorder stats)\n+      throws IOException {\n+    EnhancedBigtableStubSettings.Builder builder = settings.toBuilder();\n+\n+    if (settings.isRefreshingChannel()) {\n+      // Fix the credentials so that they can be shared\n+      Credentials credentials = null;\n+      if (settings.getCredentialsProvider() != null) {\n+        credentials = settings.getCredentialsProvider().getCredentials();\n+      }\n+      builder.setCredentialsProvider(FixedCredentialsProvider.create(credentials));\n+\n+      // Inject the primer\n+      InstantiatingGrpcChannelProvider transportProvider =\n+          (InstantiatingGrpcChannelProvider) settings.getTransportChannelProvider();\n+\n+      builder.setTransportChannelProvider(\n+          transportProvider\n+              .toBuilder()\n+              .setChannelPrimer(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b9ab71595361eee6df24a669317de6cb79fe9"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91cb7a5eca4316173513d34dd44dc9fa028ae2c4", "author": {"user": {"login": "igorbernstein2", "name": "Igor Bernstein"}}, "url": "https://github.com/googleapis/java-bigtable/commit/91cb7a5eca4316173513d34dd44dc9fa028ae2c4", "committedDate": "2020-09-01T15:49:36Z", "message": "address some feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5OTY5NTAx", "url": "https://github.com/googleapis/java-bigtable/pull/398#pullrequestreview-479969501", "createdAt": "2020-09-01T17:32:19Z", "commit": {"oid": "91cb7a5eca4316173513d34dd44dc9fa028ae2c4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozMjoxOVrOHLBJfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozMjoxOVrOHLBJfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNTE5OQ==", "bodyText": "(see codecov warning) is this really not covered? I'd expect it would be in BigtableChannelPrimerTest?", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481315199", "createdAt": "2020-09-01T17:32:19Z", "author": {"login": "kolea2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimer.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub;\n+\n+import static com.google.cloud.bigtable.data.v2.models.Filters.FILTERS;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.BetaApi;\n+import com.google.api.gax.core.FixedCredentialsProvider;\n+import com.google.api.gax.core.InstantiatingExecutorProvider;\n+import com.google.api.gax.grpc.ChannelPrimer;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.bigtable.data.v2.models.Query;\n+import com.google.cloud.bigtable.data.v2.models.Row;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.ByteString;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ManagedChannel;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Logger;\n+import org.threeten.bp.Duration;\n+\n+/**\n+ * A channel warmer that ensures that a Bigtable channel is ready to be used before being added to\n+ * the active {@link com.google.api.gax.grpc.ChannelPool}.\n+ *\n+ * <p>This implementation is subject to change in the future, but currently it will prime the\n+ * channel by sending a ReadRow request for a hardcoded, non-existent row key.\n+ */\n+@BetaApi(\"Channel priming is not currently stable and might change in the future\")\n+class BigtableChannelPrimer implements ChannelPrimer {\n+  private static Logger LOG = Logger.getLogger(BigtableChannelPrimer.class.toString());\n+\n+  static ByteString PRIMING_ROW_KEY = ByteString.copyFromUtf8(\"nonexistent-priming-row\");\n+  private static Duration PRIME_REQUEST_TIMEOUT = Duration.ofSeconds(30);\n+\n+  private final EnhancedBigtableStubSettings settingsTemplate;\n+  private final List<String> tableIds;\n+\n+  static BigtableChannelPrimer create(\n+      Credentials credentials,\n+      String projectId,\n+      String instanceId,\n+      String appProfileId,\n+      List<String> tableIds) {\n+    EnhancedBigtableStubSettings.Builder builder =\n+        EnhancedBigtableStubSettings.newBuilder()\n+            .setProjectId(projectId)\n+            .setInstanceId(instanceId)\n+            .setAppProfileId(appProfileId)\n+            .setCredentialsProvider(FixedCredentialsProvider.create(credentials))\n+            .setExecutorProvider(\n+                InstantiatingExecutorProvider.newBuilder().setExecutorThreadCount(1).build());\n+\n+    // Disable retries for priming request\n+    builder\n+        .readRowSettings()\n+        .setRetrySettings(\n+            builder\n+                .readRowSettings()\n+                .getRetrySettings()\n+                .toBuilder()\n+                .setMaxAttempts(1)\n+                .setJittered(false)\n+                .setInitialRpcTimeout(PRIME_REQUEST_TIMEOUT)\n+                .setMaxRpcTimeout(PRIME_REQUEST_TIMEOUT)\n+                .setTotalTimeout(PRIME_REQUEST_TIMEOUT)\n+                .build());\n+    return new BigtableChannelPrimer(builder.build(), tableIds);\n+  }\n+\n+  private BigtableChannelPrimer(\n+      EnhancedBigtableStubSettings settingsTemplate, List<String> tableIds) {\n+    Preconditions.checkNotNull(settingsTemplate, \"settingsTemplate can't be null\");\n+    this.settingsTemplate = settingsTemplate;\n+    this.tableIds = ImmutableList.copyOf(tableIds);\n+  }\n+\n+  @Override\n+  public void primeChannel(ManagedChannel managedChannel) {\n+    try {\n+      primeChannelUnsafe(managedChannel);\n+    } catch (IOException | RuntimeException e) {\n+      LOG.warning(\n+          String.format(\"Unexpected error while trying to prime a channel: %s\", e.getMessage()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91cb7a5eca4316173513d34dd44dc9fa028ae2c4"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e1a94dad7818040879247a98de7928f35ed60e4", "author": {"user": {"login": "igorbernstein2", "name": "Igor Bernstein"}}, "url": "https://github.com/googleapis/java-bigtable/commit/5e1a94dad7818040879247a98de7928f35ed60e4", "committedDate": "2020-09-01T19:04:48Z", "message": "add additional error handling test + some comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMTI5NTUw", "url": "https://github.com/googleapis/java-bigtable/pull/398#pullrequestreview-480129550", "createdAt": "2020-09-01T21:26:50Z", "commit": {"oid": "5e1a94dad7818040879247a98de7928f35ed60e4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1075, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}