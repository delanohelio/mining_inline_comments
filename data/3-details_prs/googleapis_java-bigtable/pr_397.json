{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MzE5NzEw", "number": 397, "title": "fix: Filters should be serializable", "bodyText": "Fixes #385", "createdAt": "2020-08-28T10:19:29Z", "url": "https://github.com/googleapis/java-bigtable/pull/397", "merged": true, "mergeCommit": {"oid": "57edfde5eace28d50ec777e14589c9747616f0a8"}, "closed": true, "closedAt": "2020-09-22T16:37:49Z", "author": {"login": "dmitry-fa"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDRV_kgH2gAyNDc1MzE5NzEwOmI3ODA2M2ZlNzYxOGZmYWEwYzhjZWVhNjlkMmMxMWEyZWQwZDJiY2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLatiCAFqTQ5MzY1MTI3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd", "author": {"user": {"login": "dmitry-fa", "name": "Dmitry"}}, "url": "https://github.com/googleapis/java-bigtable/commit/b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd", "committedDate": "2020-08-28T09:11:25Z", "message": "fix: Filters should be serializable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NjQ3NDQ4", "url": "https://github.com/googleapis/java-bigtable/pull/397#pullrequestreview-478647448", "createdAt": "2020-08-31T14:07:14Z", "commit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDowNzoxNFrOHJ6VHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDowNzoxNFrOHJ6VHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE1NDkxMA==", "bodyText": "unfortunately anything in the proto-* or grpc-* modules are auto generated and cannot be modified by hand.", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r480154910", "createdAt": "2020-08-31T14:07:14Z", "author": {"login": "kolea2"}, "path": "proto-google-cloud-bigtable-v2/src/main/java/com/google/bigtable/v2/RowFilterOrBuilder.java", "diffHunk": "@@ -18,10 +18,13 @@\n \n package com.google.bigtable.v2;\n \n+import java.io.Serializable;\n+\n public interface RowFilterOrBuilder\n     extends\n-    // @@protoc_insertion_point(interface_extends:google.bigtable.v2.RowFilter)\n-    com.google.protobuf.MessageOrBuilder {\n+        // @@protoc_insertion_point(interface_extends:google.bigtable.v2.RowFilter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4Nzc3MTU1", "url": "https://github.com/googleapis/java-bigtable/pull/397#pullrequestreview-478777155", "createdAt": "2020-08-31T16:49:53Z", "commit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjo0OTo1M1rOHKAi1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzowMTozMlrOHKA_Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1NjcyNw==", "bodyText": "Can we avoid file creation and use a Byte{Input,Output}Stream instead?", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r480256727", "createdAt": "2020-08-31T16:49:53Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +540,44 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    // map methodName -> methodArguments (for those methods which require parameters)\n+    Map<String, Object[]> parameterMap = new HashMap<>();\n+    parameterMap.put(\"condition\", new Object[] {FILTERS.pass()});\n+    parameterMap.put(\"label\", new Object[] {\"label\"});\n+    parameterMap.put(\"fromProto\", new Object[] {FILTERS.label(\"label\").toProto()});\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        Object[] params = parameterMap.get(name);\n+        if (params == null) {\n+          params = new Object[] {};\n+        }\n+        try {\n+          trySerialization(m.invoke(FILTERS, params));\n+        } catch (Exception e) {\n+          fail(name + \": \" + e);\n+        }\n+      }\n+    }\n+  }\n+\n+  private void trySerialization(Object obj) throws IOException, ClassNotFoundException {\n+    Path serFile = Files.createTempFile(\"filter\", \".ser\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MTEwMg==", "bodyText": "I think it would be cleaner to restructure this as:\nif (!public) { continue };\n\nswitch(name) {\n  case \"condition\":\n    assertSerializable(FILTERS.condition(FILTERS.pass());\n    break;\n  case \"label\": ...\n  case \"fromProto\": ...\n  default:\n   assertSerializable(m.invoke());\n}```", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r480261102", "createdAt": "2020-08-31T16:56:16Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +540,44 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    // map methodName -> methodArguments (for those methods which require parameters)\n+    Map<String, Object[]> parameterMap = new HashMap<>();\n+    parameterMap.put(\"condition\", new Object[] {FILTERS.pass()});\n+    parameterMap.put(\"label\", new Object[] {\"label\"});\n+    parameterMap.put(\"fromProto\", new Object[] {FILTERS.label(\"label\").toProto()});\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        Object[] params = parameterMap.get(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MjA3Nw==", "bodyText": "This an autogenerated file, you cant modify it", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r480262077", "createdAt": "2020-08-31T16:57:58Z", "author": {"login": "igorbernstein2"}, "path": "proto-google-cloud-bigtable-v2/src/main/java/com/google/bigtable/v2/RowFilter.java", "diffHunk": "@@ -18,6 +18,8 @@\n \n package com.google.bigtable.v2;\n \n+import java.io.Serializable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NDAxOQ==", "bodyText": "Here and everwhere else: The proto builders will need to be marked transient and you will need to implement writeObject/readObject to serialize the built protos:\nvoid writeObject(ObjectOutputStream s) {\n  s.defaultWriteObject();\n  s.writeObject(builder.build());\n}", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r480264019", "createdAt": "2020-08-31T17:01:32Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/Filters.java", "diffHunk": "@@ -200,6 +200,7 @@ public Filter label(@Nonnull String label) {\n   // Implementations of target specific filters.\n   /** DSL for adding filters to a chain. */\n   public static final class ChainFilter implements Filter {\n+    private static final long serialVersionUID = -89237431180618430L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78063fe7618ffaa0c8ceea69d2c11a2ed0d2bcd"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3723f2271cd247d681936d01b9cd179b56fe841", "author": {"user": {"login": "dmitry-fa", "name": "Dmitry"}}, "url": "https://github.com/googleapis/java-bigtable/commit/b3723f2271cd247d681936d01b9cd179b56fe841", "committedDate": "2020-09-01T15:48:35Z", "message": "rollback changes to generated files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2208adbd2b09d0cfda88aadfecf8ab531699ee35", "author": {"user": {"login": "dmitry-fa", "name": "Dmitry"}}, "url": "https://github.com/googleapis/java-bigtable/commit/2208adbd2b09d0cfda88aadfecf8ab531699ee35", "committedDate": "2020-09-01T17:27:05Z", "message": "customize serialization of builders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97", "author": {"user": {"login": "dmitry-fa", "name": "Dmitry"}}, "url": "https://github.com/googleapis/java-bigtable/commit/94ca9ec52cec53bac3810cabda9451145b090a97", "committedDate": "2020-09-02T10:16:32Z", "message": "customize serialization of builders"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNzE3Nzgz", "url": "https://github.com/googleapis/java-bigtable/pull/397#pullrequestreview-480717783", "createdAt": "2020-09-02T11:15:09Z", "commit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNTowOVrOHLqWbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNTowOVrOHLqWbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDI1Mw==", "bodyText": "why if? when is this false?", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481990253", "createdAt": "2020-09-02T11:15:09Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNzE4NjU1", "url": "https://github.com/googleapis/java-bigtable/pull/397#pullrequestreview-480718655", "createdAt": "2020-09-02T11:16:30Z", "commit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNjozMFrOHLqZAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNjozMFrOHLqZAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDkxNQ==", "bodyText": "Please use https://truth.dev/", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481990915", "createdAt": "2020-09-02T11:16:30Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {\n+        RowFilter protoBefore = ((Filters.Filter) filter).toProto();\n+        RowFilter protoAfter = ((Filters.Filter) deserialized).toProto();\n+        assertEquals(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNzE4ODY3", "url": "https://github.com/googleapis/java-bigtable/pull/397#pullrequestreview-480718867", "createdAt": "2020-09-02T11:16:49Z", "commit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNjo0OVrOHLqZmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNjo0OVrOHLqZmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MTA2NQ==", "bodyText": "static?", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481991065", "createdAt": "2020-09-02T11:16:49Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {\n+        RowFilter protoBefore = ((Filters.Filter) filter).toProto();\n+        RowFilter protoAfter = ((Filters.Filter) deserialized).toProto();\n+        assertEquals(\n+            \"'\" + name + \"' filter protoBuf mismatch after deserialization\",\n+            protoBefore,\n+            protoAfter);\n+      }\n+    } catch (IOException | ClassNotFoundException e) {\n+      fail(name + \": \" + e);\n+    }\n+  }\n+\n+  private Object serializeDeserialize(Object obj) throws IOException, ClassNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNzE5MDE4", "url": "https://github.com/googleapis/java-bigtable/pull/397#pullrequestreview-480719018", "createdAt": "2020-09-02T11:17:02Z", "commit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNzowMlrOHLqaDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNzowMlrOHLqaDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MTE4MQ==", "bodyText": "static?", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481991181", "createdAt": "2020-09-02T11:17:02Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNzE5NjU3", "url": "https://github.com/googleapis/java-bigtable/pull/397#pullrequestreview-480719657", "createdAt": "2020-09-02T11:18:00Z", "commit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxODowMFrOHLqcGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxODowMFrOHLqcGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MTcwNQ==", "bodyText": "why not just bubble the exception up?", "url": "https://github.com/googleapis/java-bigtable/pull/397#discussion_r481991705", "createdAt": "2020-09-02T11:18:00Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/models/FiltersTest.java", "diffHunk": "@@ -528,4 +538,66 @@ public void labelTest() {\n \n     assertThat(actualFilter).isEqualTo(expectedFilter);\n   }\n+\n+  @Test\n+  public void serializationTest() throws InvocationTargetException, IllegalAccessException {\n+    // checks that the all objects returned by the all methods of the Filters class\n+    // can be serialized/deserialized.\n+\n+    for (Method m : Filters.class.getDeclaredMethods()) {\n+      String name = m.getName();\n+      if (Modifier.isPublic(m.getModifiers())) {\n+        switch (name) {\n+          case \"condition\":\n+            checkSerialization(\n+                name,\n+                FILTERS\n+                    .condition(\n+                        FILTERS\n+                            .chain()\n+                            .filter(FILTERS.qualifier().exactMatch(\"data_plan_10gb\"))\n+                            .filter(FILTERS.value().exactMatch(\"true\")))\n+                    .then(FILTERS.label(\"passed-filter\"))\n+                    .otherwise(FILTERS.label(\"filtered-out\")));\n+            break;\n+          case \"label\":\n+            checkSerialization(name, FILTERS.label(\"label\"));\n+            break;\n+          case \"fromProto\":\n+            checkSerialization(name, FILTERS.label(\"label\").toProto());\n+            break;\n+          default:\n+            checkSerialization(name, m.invoke(FILTERS));\n+        }\n+      }\n+    }\n+  }\n+\n+  private void checkSerialization(String name, Object filter) {\n+    try {\n+      Object deserialized = serializeDeserialize(filter);\n+      if (filter instanceof Filters.Filter) {\n+        RowFilter protoBefore = ((Filters.Filter) filter).toProto();\n+        RowFilter protoAfter = ((Filters.Filter) deserialized).toProto();\n+        assertEquals(\n+            \"'\" + name + \"' filter protoBuf mismatch after deserialization\",\n+            protoBefore,\n+            protoAfter);\n+      }\n+    } catch (IOException | ClassNotFoundException e) {\n+      fail(name + \": \" + e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ca9ec52cec53bac3810cabda9451145b090a97"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ce579f31b4b99c8cbcc1aac7e8a6899313e8ed0", "author": {"user": {"login": "dmitry-fa", "name": "Dmitry"}}, "url": "https://github.com/googleapis/java-bigtable/commit/9ce579f31b4b99c8cbcc1aac7e8a6899313e8ed0", "committedDate": "2020-09-02T11:47:16Z", "message": "customize serialization of builders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e63841e0d9b25bb00de80bb00b094de001dd28ca", "author": {"user": {"login": "dmitry-fa", "name": "Dmitry"}}, "url": "https://github.com/googleapis/java-bigtable/commit/e63841e0d9b25bb00de80bb00b094de001dd28ca", "committedDate": "2020-09-02T13:41:37Z", "message": "check serialization of non-filter instances"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2683ee7c724a3bcc6032697d1c82679518373b19", "author": {"user": {"login": "dmitry-fa", "name": "Dmitry"}}, "url": "https://github.com/googleapis/java-bigtable/commit/2683ee7c724a3bcc6032697d1c82679518373b19", "committedDate": "2020-09-18T08:59:13Z", "message": "test for spawned filters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNjUxMjc0", "url": "https://github.com/googleapis/java-bigtable/pull/397#pullrequestreview-493651274", "createdAt": "2020-09-22T16:37:40Z", "commit": {"oid": "2683ee7c724a3bcc6032697d1c82679518373b19"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1072, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}