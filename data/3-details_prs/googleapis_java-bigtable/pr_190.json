{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMzQ3NDg3", "number": 190, "title": "feat: add row exists api", "bodyText": "Fixes #188\nAdding a new Row exists() API in BigtableDataClient", "createdAt": "2020-02-05T12:29:24Z", "url": "https://github.com/googleapis/java-bigtable/pull/190", "merged": true, "mergeCommit": {"oid": "d141c3d597cbd682050b78bb3828fd4d8c96a7c3"}, "closed": true, "closedAt": "2020-02-05T22:22:12Z", "author": {"login": "rahulKQL"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBUad4gH2gAyMzcxMzQ3NDg3OjQ1OTA5NjY5ZTQwNDA3MGZlNDUwZDZkMDMzNzA3NTNmMTRiOTU1NGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBdxZ6gFqTM1NDA4MjQ1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "45909669e404070fe450d6d03370753f14b9554e", "author": {"user": {"login": "rahulKQL", "name": "Rahul Kesharwani"}}, "url": "https://github.com/googleapis/java-bigtable/commit/45909669e404070fe450d6d03370753f14b9554e", "committedDate": "2020-02-05T11:27:01Z", "message": "feat: add row exists api\n\nAdding a new Row exists() API in `BigtableDataClient`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8ae4996199c7ef328152b19fb77c39cb091d0e9", "author": {"user": {"login": "rahulKQL", "name": "Rahul Kesharwani"}}, "url": "https://github.com/googleapis/java-bigtable/commit/c8ae4996199c7ef328152b19fb77c39cb091d0e9", "committedDate": "2020-02-05T14:58:47Z", "message": "rephrased java doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzODA2NzY4", "url": "https://github.com/googleapis/java-bigtable/pull/190#pullrequestreview-353806768", "createdAt": "2020-02-05T15:28:17Z", "commit": {"oid": "c8ae4996199c7ef328152b19fb77c39cb091d0e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNToyODoxN1rOFl8CUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNToyODoxN1rOFl8CUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMyNTI2Ng==", "bodyText": "please chain values().strip() as well", "url": "https://github.com/googleapis/java-bigtable/pull/190#discussion_r375325266", "createdAt": "2020-02-05T15:28:17Z", "author": {"login": "igorbernstein2"}, "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/BigtableDataClient.java", "diffHunk": "@@ -159,6 +162,129 @@ public static BigtableDataClient create(BigtableDataSettings settings) throws IO\n     this.stub = stub;\n   }\n \n+  /**\n+   * Confirms synchronously if given row key exists or not.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * try (BigtableDataClient bigtableDataClient = BigtableDataClient.create(\"[PROJECT]\", \"[INSTANCE]\")) {\n+   *   String tableId = \"[TABLE]\";\n+   *   String key = \"key\";\n+   *\n+   *   boolean isRowPresent = bigtableDataClient.exists(tableId, key);\n+   *\n+   *   // Do something with result, for example, display a message\n+   *   if(isRowPresent) {\n+   *     System.out.println(key + \" is present\");\n+   *   }\n+   * } catch(ApiException e) {\n+   *   e.printStackTrace();\n+   * }\n+   * }</pre>\n+   *\n+   * @throws com.google.api.gax.rpc.ApiException when a serverside error occurs\n+   */\n+  public boolean exists(String tableId, String rowKey) {\n+    return ApiExceptions.callAndTranslateApiException(existsAsync(tableId, rowKey));\n+  }\n+\n+  /**\n+   * Confirms synchronously if given row key exists or not.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * try (BigtableDataClient bigtableDataClient = BigtableDataClient.create(\"[PROJECT]\", \"[INSTANCE]\")) {\n+   *   String tableId = \"[TABLE]\";\n+   *   ByteString key = ByteString.copyFromUtf8(\"key\");\n+   *\n+   *   boolean isRowPresent = bigtableDataClient.exists(tableId, key);\n+   *\n+   *   // Do something with result, for example, display a message\n+   *   if(isRowPresent) {\n+   *     System.out.println(key.toStringUtf8() + \" is present\");\n+   *   }\n+   * } catch(ApiException e) {\n+   *   e.printStackTrace();\n+   * }\n+   * }</pre>\n+   *\n+   * @throws com.google.api.gax.rpc.ApiException when a serverside error occurs\n+   */\n+  public boolean exists(String tableId, ByteString rowKey) {\n+    return ApiExceptions.callAndTranslateApiException(existsAsync(tableId, rowKey));\n+  }\n+\n+  /**\n+   * Confirms asynchronously if given row key exists or not.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * try (BigtableDataClient bigtableDataClient = BigtableDataClient.create(\"[PROJECT]\", \"[INSTANCE]\")) {\n+   *   String tableId = \"[TABLE]\";\n+   *   final String key = \"key\";\n+   *\n+   *   ApiFuture<Boolean> futureResult = bigtableDataClient.existsAsync(tableId, key);\n+   *\n+   *   ApiFutures.addCallback(futureResult, new ApiFutureCallback<Boolean>() {\n+   *     public void onFailure(Throwable t) {\n+   *       t.printStackTrace();\n+   *     }\n+   *     public void onSuccess(Boolean isRowPresent) {\n+   *       if(isRowPresent) {\n+   *         System.out.println(key + \" is present\");\n+   *       }\n+   *     }\n+   *   }, MoreExecutors.directExecutor());\n+   * }\n+   * }</pre>\n+   */\n+  public ApiFuture<Boolean> existsAsync(String tableId, String rowKey) {\n+    return existsAsync(tableId, ByteString.copyFromUtf8(rowKey));\n+  }\n+\n+  /**\n+   * Confirms asynchronously if given row key exists or not.\n+   *\n+   * <p>Sample code:\n+   *\n+   * <pre>{@code\n+   * try (BigtableDataClient bigtableDataClient = BigtableDataClient.create(\"[PROJECT]\", \"[INSTANCE]\")) {\n+   *   String tableId = \"[TABLE]\";\n+   *   final ByteString key = ByteString.copyFromUtf8(\"key\");\n+   *\n+   *   ApiFuture<Boolean> futureResult = bigtableDataClient.existsAsync(tableId, key);\n+   *\n+   *   ApiFutures.addCallback(futureResult, new ApiFutureCallback<Boolean>() {\n+   *     public void onFailure(Throwable t) {\n+   *       t.printStackTrace();\n+   *     }\n+   *     public void onSuccess(Boolean isRowPresent) {\n+   *       if(isRowPresent) {\n+   *         System.out.println(key.toStringUtf8() + \" is present\");\n+   *       }\n+   *     }\n+   *   }, MoreExecutors.directExecutor());\n+   * }\n+   * }</pre>\n+   */\n+  public ApiFuture<Boolean> existsAsync(String tableId, ByteString rowKey) {\n+    Query query =\n+        Query.create(tableId).rowKey(rowKey).filter(Filters.FILTERS.limit().cellsPerRow(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ae4996199c7ef328152b19fb77c39cb091d0e9"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1f00e88daa5ddb8a66bfedaec04387b1d7da80f", "author": {"user": {"login": "rahulKQL", "name": "Rahul Kesharwani"}}, "url": "https://github.com/googleapis/java-bigtable/commit/d1f00e88daa5ddb8a66bfedaec04387b1d7da80f", "committedDate": "2020-02-05T20:33:12Z", "message": "addressed feedback comment to add FILTERS.value().strip()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MDgyNDU5", "url": "https://github.com/googleapis/java-bigtable/pull/190#pullrequestreview-354082459", "createdAt": "2020-02-05T22:21:13Z", "commit": {"oid": "d1f00e88daa5ddb8a66bfedaec04387b1d7da80f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1137, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}