{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NjM4NjU0", "number": 484, "title": "Update readmes to match common design (Scene category) 5/5", "bodyText": "", "createdAt": "2020-04-21T12:20:33Z", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/484", "merged": true, "mergeCommit": {"oid": "4ef6985bcb1a954bd7b22092c52dbf77a7d854b9"}, "closed": true, "closedAt": "2020-04-24T07:27:39Z", "author": {"login": "JonLavi"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZylxdAH2gAyNDA2NjM4NjU0OjM5NWE3N2VhNDc3ZDA1NDQ3MzQ5MGU4OGZhNTEwNTRlOGQyM2NkODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcasT-KgH2gAyNDA2NjM4NjU0OmVlYTcxNTg4YTU3MzI1NjMxZjg4ZTM0ODIyZmY1NjA4OTQ1YTQ3YzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "395a77ea477d054473490e88fa51054e8d23cd86", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/395a77ea477d054473490e88fa51054e8d23cd86", "committedDate": "2020-04-21T12:10:42Z", "message": "update readmes to match common design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a53b485957e2f2916ad5baebb507e4323f557d7e", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/a53b485957e2f2916ad5baebb507e4323f557d7e", "committedDate": "2020-04-21T12:17:14Z", "message": "update readmes to match common design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d01fbde2cd51a51c350ddc4a57d10a4145fb34f", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/2d01fbde2cd51a51c350ddc4a57d10a4145fb34f", "committedDate": "2020-04-21T12:22:04Z", "message": "restore files dealt with in previous pr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5Mjc0ODE5", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/484#pullrequestreview-399274819", "createdAt": "2020-04-23T16:31:38Z", "commit": {"oid": "2d01fbde2cd51a51c350ddc4a57d10a4145fb34f"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjozMTozOVrOGKxSlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjozODo0MFrOGKxnZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk0NjUxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Interact with the MapView or SceneView by zooming or panning. The other MapView or SceneView will automatically focus on the same viewpoint.\n          \n          \n            \n            Interact with the map view or scene view by zooming or panning. The other geoview will automatically focus on the same viewpoint.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/484#discussion_r413946519", "createdAt": "2020-04-23T16:31:39Z", "author": {"login": "Rachael-E"}, "path": "scene/sync-map-and-scene-viewpoints/README.md", "diffHunk": "@@ -1,31 +1,32 @@\n-# Sync Map and Scene Viewpoints\n+# Sync map and scene viewpoints\n \n-Synchronize the viewpoints between a `MapView` and a `SceneView`.\n+Keep the view points of two views (e.g. MapView and SceneView) synchronized with each other.\n \n-The two `GeoViews` share a common `ViewPoint`. When navigating in one view, the other view is immediately updated to display the same `ViewPoint`.\n+![Image of sync map and scene viewpoints](SyncMapAndSceneViewpoints.png)\n \n-![](SyncMapAndSceneViewpoints.png)\n+## Use case\n+\n+You might need to synchronize GeoView viewpoints if you had two map views in one application - a main map and an inset. An inset map view could display all the layers at their full extent and contain a hollow rectangular graphic that represents the visible extent of the main map view. As you zoom or pan in the main map view, the extent graphic in the inset map would adjust accordingly.\n \n ## How to use the sample\n \n-Interact with the map by panning, zooming or rotating the map or scene view. The other view will update automatically to match your navigation. Note that the resulting maps may not look identical due to the fact the `MapView` is 2. and the `SceneView` is 3D: but the centers and scales of each view will be kept the same.\n+Interact with the MapView or SceneView by zooming or panning. The other MapView or SceneView will automatically focus on the same viewpoint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d01fbde2cd51a51c350ddc4a57d10a4145fb34f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk0NjkwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This application provides two different perspectives of the Imagery basemap. A 2D MapView as well as a 3D SceneView, displayed side by side.\n          \n          \n            \n            This application provides two different perspectives of the Imagery basemap. A 2D `MapView` as well as a 3D `SceneView`, displayed side by side.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/484#discussion_r413946901", "createdAt": "2020-04-23T16:32:09Z", "author": {"login": "Rachael-E"}, "path": "scene/sync-map-and-scene-viewpoints/README.md", "diffHunk": "@@ -1,31 +1,32 @@\n-# Sync Map and Scene Viewpoints\n+# Sync map and scene viewpoints\n \n-Synchronize the viewpoints between a `MapView` and a `SceneView`.\n+Keep the view points of two views (e.g. MapView and SceneView) synchronized with each other.\n \n-The two `GeoViews` share a common `ViewPoint`. When navigating in one view, the other view is immediately updated to display the same `ViewPoint`.\n+![Image of sync map and scene viewpoints](SyncMapAndSceneViewpoints.png)\n \n-![](SyncMapAndSceneViewpoints.png)\n+## Use case\n+\n+You might need to synchronize GeoView viewpoints if you had two map views in one application - a main map and an inset. An inset map view could display all the layers at their full extent and contain a hollow rectangular graphic that represents the visible extent of the main map view. As you zoom or pan in the main map view, the extent graphic in the inset map would adjust accordingly.\n \n ## How to use the sample\n \n-Interact with the map by panning, zooming or rotating the map or scene view. The other view will update automatically to match your navigation. Note that the resulting maps may not look identical due to the fact the `MapView` is 2. and the `SceneView` is 3D: but the centers and scales of each view will be kept the same.\n+Interact with the MapView or SceneView by zooming or panning. The other MapView or SceneView will automatically focus on the same viewpoint.\n \n ## How it works\n \n-`MapView` and `SceneView` inherit from the `GeoView` parent class. When the `GeoView`'s viewpoint has changed, a listener can be added and allow the viewpoint of the other `GeoView` to be set and synchronized.\n-\n-1. Create a `MapView` and a `SceneView`.\n-2. Add a viewpoint changed listener to each `GeoView` with `geoView.addViewpointChangedListener(viewpointChangedEvent)`.\n-3. Check if the `GeoView` is being navigated with `geoView.isNavigating()`.\n-4. Get the current viewpoint of the active `GeoView` with `geoView.getcurrentViewpoint(Viewpoint.Type.CENTER_AND_SCALE)`.\n-5. Set the viewpoint of the other view to the active view's viewpoint with `geoView.setViewpoint(Viewpoint)`.\n+1. Wire up the `ViewpointChanged` event handler for both geo views.\n+2. In each event handler, get the current viewpoint from the geo view that is being interacted with and then set the viewpoint of the other geo view to the same value.\n \n ## Relevant API\n \n * GeoView\n-* Viewpoint\n-* ViewpointChangedEvent\n+* MapView\n+* SceneView\n+\n+## About the data\n+\n+This application provides two different perspectives of the Imagery basemap. A 2D MapView as well as a 3D SceneView, displayed side by side.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d01fbde2cd51a51c350ddc4a57d10a4145fb34f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk0NzIzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Scene\n          \n          \n            \n            * ArcGISScene", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/484#discussion_r413947235", "createdAt": "2020-04-23T16:32:34Z", "author": {"login": "Rachael-E"}, "path": "scene/terrain-exaggeration/README.md", "diffHunk": "@@ -1,23 +1,28 @@\n-# Terrain Exaggeration\n+# Terrain exaggeration\n \n-Vertically exaggerate terrain.\n+Vertically exaggerate terrain in a scene.\n \n-![](TerrainExaggeration.gif)\n+![Image of terrain exaggeration](TerrainExaggeration.gif)\n+\n+## Use case\n+\n+Vertical exaggeration can be used to emphasize subtle changes in a surface. This can be useful in creating visualizations of terrain where the horizontal extent of the surface is significantly greater than the amount of vertical change in the surface. A fractional vertical exaggeration can be used to flatten surfaces or features that have extreme vertical variation.\n \n ## How to use the sample\n \n-Selecting an exaggeration amount from the slider will apply that to the scene's surface.\n+Use the slider to update terrain exaggeration.\n \n ## How it works\n \n-To exaggerate a `Scene`'s `Surface`:\n-\n-1. Create an elevated surface and add it to the scene, `Surface.getElevationSources().add(\"elevationURL\")`\n-2. Add surface to the scene, ` scene.setBaseSurface(Surface)`\n-3. Set exaggeration amount of the surface, `Surface.setElevationExaggeration(exaggeration)`\n+1. Create an elevation surface from a URL with `Surface.getElevationSources().add(\"elevationURL\")`. An elevation source defines the terrain based on a digital elevation model (DEM) or digital terrain model (DTM).\n+2. Add the surface to the scene with `scene.setBaseSurface(Surface)`. The surface visualizes the elevation source.\n+3. Configure the surface's elevation exaggeration using `surface.setElevationExaggeration(exaggeration)`.\n \n ## Relevant API\n \n-* ArcGISScene\n+* Scene", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d01fbde2cd51a51c350ddc4a57d10a4145fb34f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MTg0Nw==", "bodyText": ".slpk doesn't need to be in backticks\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Create a `PointCloudLayer` with the path to a local `.slpk` file containing a point cloud layer.\n          \n          \n            \n            1. Create a `PointCloudLayer` with the path to a local .slpk file containing a point cloud layer.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/484#discussion_r413951847", "createdAt": "2020-04-23T16:38:40Z", "author": {"login": "Rachael-E"}, "path": "scene/view-point-cloud-data-offline/README.md", "diffHunk": "@@ -1,30 +1,32 @@\n # View point cloud data offline\n \n-Display local 3. point cloud data.\n+Display local 3D point cloud data.\n \n-![](ViewPointCloudDataOffline.png)\n+![Image of view point cloud data offline](ViewPointCloudDataOffline.png)\n \n ## Use case\n \n-Point clouds are often used to visualize massive sets of sensor data such as lidar. The point locations indicate where the sensor data was measured spatially, and the color or size of the points indicate the measured/derived value of the sensor reading. In the case of lidar, the color of the visualized point could be the color of the reflected light, so that the point cloud forms a true color 3. image of the area.\n+Point clouds are often used to visualize massive sets of sensor data such as lidar. The point locations indicate where the sensor data was measured spatially, and the color or size of the points indicate the measured/derived value of the sensor reading. In the case of lidar, the color of the visualized point could be the color of the reflected light, so that the point cloud forms a true color 3D image of the area.\n+\n+Point clouds can be loaded offline from scene layer packages (.slpk).\n+\n+## How to use the sample\n+\n+The sample starts with a point cloud layer loaded and draped on top of a scene. Pan and zoom to explore the scene and see the detail of the point cloud layer.\n \n ## How it works\n \n-1. Create a `PointCloudLayer` with the path to a local .slpk file containing a point cloud layer.\n-2. Add the layer to a scene's operational layers collection.\n+1. Create a `PointCloudLayer` with the path to a local `.slpk` file containing a point cloud layer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d01fbde2cd51a51c350ddc4a57d10a4145fb34f"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eea71588a57325631f88e34822ff5608945a47c3", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/eea71588a57325631f88e34822ff5608945a47c3", "committedDate": "2020-04-24T07:25:45Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Rachael Ellen <36415565+Rachael-E@users.noreply.github.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3338, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}