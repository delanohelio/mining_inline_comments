{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMjI5MDgy", "number": 503, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNToyODo1NlrOD9Pq-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNToyODo1NlrOD9Pq-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQ2NDkxOnYy", "diffSide": "RIGHT", "path": "tiled_layers/export-tiles/src/main/java/com/esri/samples/export_tiles/ExportTilesSample.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNToyODo1NlrOGWn-eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODozNzoxNFrOGWs-3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NjgyNQ==", "bodyText": "looks like an extra indent here", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/503#discussion_r426376825", "createdAt": "2020-05-18T05:28:56Z", "author": {"login": "tschie"}, "path": "tiled_layers/export-tiles/src/main/java/com/esri/samples/export_tiles/ExportTilesSample.java", "diffHunk": "@@ -114,62 +115,87 @@ public void start(Stage stage) {\n \n       // when the button is clicked, export the tiles to a temporary file\n       exportTilesButton.setOnAction(e -> {\n-        try {\n-          File tempFile = File.createTempFile(\"tiles\", \".tpk\");\n-          progressBar.setVisible(true);\n-          double minScale = mapView.getMapScale();\n-          double maxScale = tiledLayer.getMaxScale();\n-          // minScale must always be larger than maxScale\n-          if (minScale <= maxScale) {\n-            minScale = maxScale + 1;\n-          }\n-          ExportTileCacheTask task = new ExportTileCacheTask(tiledLayer.getUri());\n-          ListenableFuture<ExportTileCacheParameters> createParams = task.createDefaultExportTileCacheParametersAsync\n-              (downloadArea.getGeometry(), minScale, maxScale);\n-          createParams.addDoneListener(() -> {\n-            try {\n-              ExportTileCacheParameters params = createParams.get();\n-              ExportTileCacheJob job = task.exportTileCache(params, tempFile.getAbsolutePath());\n-              job.start();\n-              job.addProgressChangedListener(() -> progressBar.setProgress(job.getProgress() / 100.0));\n-              job.addJobDoneListener(() -> {\n-                if (job.getStatus() == Job.Status.SUCCEEDED) {\n-                  //show preview of exported tiles in alert\n-                  TileCache tileCache = job.getResult();\n-                  Alert preview = new Alert(Alert.AlertType.INFORMATION);\n-                  preview.initOwner(mapView.getScene().getWindow());\n-                  preview.setTitle(\"Preview\");\n-                  preview.setHeaderText(\"Exported to \" + tileCache.getPath());\n-                  MapView mapPreview = new MapView();\n-                  mapPreview.setMinSize(400, 400);\n-                  ArcGISTiledLayer tiledLayerPreview = new ArcGISTiledLayer(tileCache);\n-                  ArcGISMap previewMap = new ArcGISMap(new Basemap(tiledLayerPreview));\n-                  mapPreview.setMap(previewMap);\n-                  preview.getDialogPane().setContent(mapPreview);\n-                  preview.show();\n-                } else {\n-                  Alert alert = new Alert(Alert.AlertType.ERROR, job.getError().getAdditionalMessage());\n-                  alert.show();\n-                }\n-                Platform.runLater(() -> progressBar.setVisible(false));\n-              });\n-            } catch (InterruptedException | ExecutionException ex) {\n-              Alert alert = new Alert(Alert.AlertType.ERROR, ex.getMessage());\n-              alert.show();\n-              progressBar.setVisible(false);\n-              progressBar.setProgress(0);\n+          try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f89652ece8df4dfd143051ce438596c2899fea4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1ODg0NA==", "bodyText": "Thanks, good spot!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/503#discussion_r426458844", "createdAt": "2020-05-18T08:37:14Z", "author": {"login": "JonLavi"}, "path": "tiled_layers/export-tiles/src/main/java/com/esri/samples/export_tiles/ExportTilesSample.java", "diffHunk": "@@ -114,62 +115,87 @@ public void start(Stage stage) {\n \n       // when the button is clicked, export the tiles to a temporary file\n       exportTilesButton.setOnAction(e -> {\n-        try {\n-          File tempFile = File.createTempFile(\"tiles\", \".tpk\");\n-          progressBar.setVisible(true);\n-          double minScale = mapView.getMapScale();\n-          double maxScale = tiledLayer.getMaxScale();\n-          // minScale must always be larger than maxScale\n-          if (minScale <= maxScale) {\n-            minScale = maxScale + 1;\n-          }\n-          ExportTileCacheTask task = new ExportTileCacheTask(tiledLayer.getUri());\n-          ListenableFuture<ExportTileCacheParameters> createParams = task.createDefaultExportTileCacheParametersAsync\n-              (downloadArea.getGeometry(), minScale, maxScale);\n-          createParams.addDoneListener(() -> {\n-            try {\n-              ExportTileCacheParameters params = createParams.get();\n-              ExportTileCacheJob job = task.exportTileCache(params, tempFile.getAbsolutePath());\n-              job.start();\n-              job.addProgressChangedListener(() -> progressBar.setProgress(job.getProgress() / 100.0));\n-              job.addJobDoneListener(() -> {\n-                if (job.getStatus() == Job.Status.SUCCEEDED) {\n-                  //show preview of exported tiles in alert\n-                  TileCache tileCache = job.getResult();\n-                  Alert preview = new Alert(Alert.AlertType.INFORMATION);\n-                  preview.initOwner(mapView.getScene().getWindow());\n-                  preview.setTitle(\"Preview\");\n-                  preview.setHeaderText(\"Exported to \" + tileCache.getPath());\n-                  MapView mapPreview = new MapView();\n-                  mapPreview.setMinSize(400, 400);\n-                  ArcGISTiledLayer tiledLayerPreview = new ArcGISTiledLayer(tileCache);\n-                  ArcGISMap previewMap = new ArcGISMap(new Basemap(tiledLayerPreview));\n-                  mapPreview.setMap(previewMap);\n-                  preview.getDialogPane().setContent(mapPreview);\n-                  preview.show();\n-                } else {\n-                  Alert alert = new Alert(Alert.AlertType.ERROR, job.getError().getAdditionalMessage());\n-                  alert.show();\n-                }\n-                Platform.runLater(() -> progressBar.setVisible(false));\n-              });\n-            } catch (InterruptedException | ExecutionException ex) {\n-              Alert alert = new Alert(Alert.AlertType.ERROR, ex.getMessage());\n-              alert.show();\n-              progressBar.setVisible(false);\n-              progressBar.setProgress(0);\n+          try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NjgyNQ=="}, "originalCommit": {"oid": "5f89652ece8df4dfd143051ce438596c2899fea4"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4996, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}