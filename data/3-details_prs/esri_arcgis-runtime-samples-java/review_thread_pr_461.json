{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NzE5Mjcw", "number": 461, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToyNDo0NlrODq16cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0MTowN1rODq2Zew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjUwMDk3OnYy", "diffSide": "RIGHT", "path": "local_server/local-server-feature-layer/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToyNDo0NlrOF61l8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToyNDo0NlrOF61l8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzOTc5Mg==", "bodyText": "we should refer to it as a Java enum\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Create and run a local server with `LocalServer.instance`.\n          \n          \n            \n            1. Create and run a local server with `LocalServer.INSTANCE`.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/461#discussion_r397239792", "createdAt": "2020-03-24T15:24:46Z", "author": {"login": "Rachael-E"}, "path": "local_server/local-server-feature-layer/README.md", "diffHunk": "@@ -1,36 +1,35 @@\n-# Local Server Feature Layer\n+# Local server feature layer\n \n Start a local feature service and display its features in a map.\n \n-**Note:** Local Server is not supported on MacOS\n+![Image of local server feature layer](LocalServerFeatureLayer.png)\n \n-![](LocalServerFeatureLayer.png)\n+## Use case\n+\n+For executing offline geoprocessing tasks in your ArcGIS Runtime apps via an offline (local) server.\n \n ## How to use the sample\n \n-A Local Server and Local Feature Service will automatically be started and once running a Feature Layer will be created and added to the map.\n+A Local Server and Local Feature Service will automatically be started. Once started then a `FeatureLayer` will be created and added to the map.\n \n ## How it works\n \n-To create a `FeatureLayer` from a `LocalFeatureService`:\n-\n-1. Create and run a local server.\n-    * `LocalServer.INSTANCE` creates a local server\n-    * `Server.startAsync()` starts the server asynchronously\n-2. Wait for server to be in th. `LocalServerStatus.STARTED` state.\n-    * `Server.addStatusChangedListener()` fires whenever the status of the local server has changed.\n-3. Create and run a local feature service.\n-    * `new LocalFeatureService(Url)`, creates a local feature service with the given url path to mpk file\n-    * `LocalFeatureService.startAsync()`, starts the service asynchronously\n-    * service will be added to the local server automatically\n-4. Wait for feature service to be in th. `LocalServerStatus.STARTED` state.\n-    * `LocalFeatureService.addStatusChangedListener()` fires whenever the status of the local service has changed.\n-5. Create a feature layer from local feature service.\n-    * create a `ServiceFeatureTable(Url)` from local feature service url, `LocalFeatureService.getUrl()`\n-    * load the table asynchronously, `ServiceFeatureTable.loadAsync()`\n-    * create feature layer from service feature table, `new FeatureLayer(ServiceFeatureTable)`\n-    * load the layer asynchronously, `FeatureLayer.loadAsync()`\n-6. Add feature layer to map, `Map.getOperationalLayers().add(FeatureLayer)`.\n+1. Create and run a local server with `LocalServer.instance`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b612ce4ca5c1f8a19c2f66c676413b6545a546"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjUxMTQxOnYy", "diffSide": "RIGHT", "path": "local_server/local-server-feature-layer/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToyNjo1N1rOF61syQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo1NzowM1rOF7Tiiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0MTU0NQ==", "bodyText": "we should refer to the official name of our map class API here since it's being used for the first time\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            7. Add feature layer to map using `Map.getOperationalLayers().add(FeatureLayer)`.\n          \n          \n            \n            7. Add feature layer to map using `ArcGISMap.getOperationalLayers().add(FeatureLayer)`.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/461#discussion_r397241545", "createdAt": "2020-03-24T15:26:57Z", "author": {"login": "Rachael-E"}, "path": "local_server/local-server-feature-layer/README.md", "diffHunk": "@@ -1,36 +1,35 @@\n-# Local Server Feature Layer\n+# Local server feature layer\n \n Start a local feature service and display its features in a map.\n \n-**Note:** Local Server is not supported on MacOS\n+![Image of local server feature layer](LocalServerFeatureLayer.png)\n \n-![](LocalServerFeatureLayer.png)\n+## Use case\n+\n+For executing offline geoprocessing tasks in your ArcGIS Runtime apps via an offline (local) server.\n \n ## How to use the sample\n \n-A Local Server and Local Feature Service will automatically be started and once running a Feature Layer will be created and added to the map.\n+A Local Server and Local Feature Service will automatically be started. Once started then a `FeatureLayer` will be created and added to the map.\n \n ## How it works\n \n-To create a `FeatureLayer` from a `LocalFeatureService`:\n-\n-1. Create and run a local server.\n-    * `LocalServer.INSTANCE` creates a local server\n-    * `Server.startAsync()` starts the server asynchronously\n-2. Wait for server to be in th. `LocalServerStatus.STARTED` state.\n-    * `Server.addStatusChangedListener()` fires whenever the status of the local server has changed.\n-3. Create and run a local feature service.\n-    * `new LocalFeatureService(Url)`, creates a local feature service with the given url path to mpk file\n-    * `LocalFeatureService.startAsync()`, starts the service asynchronously\n-    * service will be added to the local server automatically\n-4. Wait for feature service to be in th. `LocalServerStatus.STARTED` state.\n-    * `LocalFeatureService.addStatusChangedListener()` fires whenever the status of the local service has changed.\n-5. Create a feature layer from local feature service.\n-    * create a `ServiceFeatureTable(Url)` from local feature service url, `LocalFeatureService.getUrl()`\n-    * load the table asynchronously, `ServiceFeatureTable.loadAsync()`\n-    * create feature layer from service feature table, `new FeatureLayer(ServiceFeatureTable)`\n-    * load the layer asynchronously, `FeatureLayer.loadAsync()`\n-6. Add feature layer to map, `Map.getOperationalLayers().add(FeatureLayer)`.\n+1. Create and run a local server with `LocalServer.instance`.\n+2. Start the server asynchronously with `Server.startAsync()`.\n+3. Wait for server to be in the  `LocalServerStatus.STARTED` state.\n+   * Callbacks attached to `Server.addStatusChangedListener()` will invoke whenever the status of the local server has changed.\n+4. Create and run a local feature service.\n+   1. Instantiate `LocalFeatureService(Url)` to create  a local feature service with the given url path to mpk file.\n+   2. Start the service asynchronously with `LocalFeatureService.startAsync()`.\n+      * The service will be added to the local server automatically.\n+5. Wait for state of the feature service to be `LocalServerStatus.STARTED`.\n+   * Callbacks attached to `LocalFeatureService.addStatusChangedListener()` will invoke whenever the status of the local service has changed.\n+6. Create a feature layer from local feature service.\n+   1. Create a `ServiceFeatureTable(Url)` from local feature service url provided by `LocalFeatureService.getUrl()`.\n+   2. Load the table asynchronously using `ServiceFeatureTable.loadAsync()`.\n+   3. Create feature layer from service feature table using `new FeatureLayer(ServiceFeatureTable)`.\n+   4. Load the layer asynchronously using `FeatureLayer.loadAsync()`.\n+7. Add feature layer to map using `Map.getOperationalLayers().add(FeatureLayer)`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b612ce4ca5c1f8a19c2f66c676413b6545a546"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMDQ0Mw==", "bodyText": "Tihs trips me up so often, thanks for paying so much attention to these!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/461#discussion_r397730443", "createdAt": "2020-03-25T09:57:03Z", "author": {"login": "JonLavi"}, "path": "local_server/local-server-feature-layer/README.md", "diffHunk": "@@ -1,36 +1,35 @@\n-# Local Server Feature Layer\n+# Local server feature layer\n \n Start a local feature service and display its features in a map.\n \n-**Note:** Local Server is not supported on MacOS\n+![Image of local server feature layer](LocalServerFeatureLayer.png)\n \n-![](LocalServerFeatureLayer.png)\n+## Use case\n+\n+For executing offline geoprocessing tasks in your ArcGIS Runtime apps via an offline (local) server.\n \n ## How to use the sample\n \n-A Local Server and Local Feature Service will automatically be started and once running a Feature Layer will be created and added to the map.\n+A Local Server and Local Feature Service will automatically be started. Once started then a `FeatureLayer` will be created and added to the map.\n \n ## How it works\n \n-To create a `FeatureLayer` from a `LocalFeatureService`:\n-\n-1. Create and run a local server.\n-    * `LocalServer.INSTANCE` creates a local server\n-    * `Server.startAsync()` starts the server asynchronously\n-2. Wait for server to be in th. `LocalServerStatus.STARTED` state.\n-    * `Server.addStatusChangedListener()` fires whenever the status of the local server has changed.\n-3. Create and run a local feature service.\n-    * `new LocalFeatureService(Url)`, creates a local feature service with the given url path to mpk file\n-    * `LocalFeatureService.startAsync()`, starts the service asynchronously\n-    * service will be added to the local server automatically\n-4. Wait for feature service to be in th. `LocalServerStatus.STARTED` state.\n-    * `LocalFeatureService.addStatusChangedListener()` fires whenever the status of the local service has changed.\n-5. Create a feature layer from local feature service.\n-    * create a `ServiceFeatureTable(Url)` from local feature service url, `LocalFeatureService.getUrl()`\n-    * load the table asynchronously, `ServiceFeatureTable.loadAsync()`\n-    * create feature layer from service feature table, `new FeatureLayer(ServiceFeatureTable)`\n-    * load the layer asynchronously, `FeatureLayer.loadAsync()`\n-6. Add feature layer to map, `Map.getOperationalLayers().add(FeatureLayer)`.\n+1. Create and run a local server with `LocalServer.instance`.\n+2. Start the server asynchronously with `Server.startAsync()`.\n+3. Wait for server to be in the  `LocalServerStatus.STARTED` state.\n+   * Callbacks attached to `Server.addStatusChangedListener()` will invoke whenever the status of the local server has changed.\n+4. Create and run a local feature service.\n+   1. Instantiate `LocalFeatureService(Url)` to create  a local feature service with the given url path to mpk file.\n+   2. Start the service asynchronously with `LocalFeatureService.startAsync()`.\n+      * The service will be added to the local server automatically.\n+5. Wait for state of the feature service to be `LocalServerStatus.STARTED`.\n+   * Callbacks attached to `LocalFeatureService.addStatusChangedListener()` will invoke whenever the status of the local service has changed.\n+6. Create a feature layer from local feature service.\n+   1. Create a `ServiceFeatureTable(Url)` from local feature service url provided by `LocalFeatureService.getUrl()`.\n+   2. Load the table asynchronously using `ServiceFeatureTable.loadAsync()`.\n+   3. Create feature layer from service feature table using `new FeatureLayer(ServiceFeatureTable)`.\n+   4. Load the layer asynchronously using `FeatureLayer.loadAsync()`.\n+7. Add feature layer to map using `Map.getOperationalLayers().add(FeatureLayer)`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0MTU0NQ=="}, "originalCommit": {"oid": "e6b612ce4ca5c1f8a19c2f66c676413b6545a546"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjUxMzc3OnYy", "diffSide": "RIGHT", "path": "local_server/local-server-geoprocessing/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToyNzoyNFrOF61uMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToyNzoyNFrOF61uMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0MTkwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Create and run a local server with `LocalServer.instance`.\n          \n          \n            \n            1. Create and run a local server with `LocalServer.INSTANCE`.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/461#discussion_r397241905", "createdAt": "2020-03-24T15:27:24Z", "author": {"login": "Rachael-E"}, "path": "local_server/local-server-geoprocessing/README.md", "diffHunk": "@@ -1,45 +1,43 @@\n-# Local Server Geoprocessing\n+# Local server geoprocessing\n \n-Create contour lines from local raster data and Local Server.\n+Create contour lines from local raster data using a local geoprocessing package `.gpk` and the contour geoprocessing tool.\n \n-This is accomplished using a local geoprocessing package (.gpk) and the contour geoprocessing tool.\n+![Image of local server geoprocessing](LocalServerGeoprocessing.png)\n \n-**Note:** Local Server is not supported on MacOS\n+## Use case\n \n-![](LocalServerGeoprocessing.png)\n+For executing offline geoprocessing tasks in your ArcGIS Runtime apps via an offline (local) server.\n \n ## How to use the sample\n \n Contour Line Controls (Top Left):\n-* Interval-- Specifies the spacing between contour lines.\n-* Generate Contours -. Adds contour lines to map using interval.\n-* Clear Results -. Removes contour lines from map.\n \n-## How it works\n+* Interval - Specifies the spacing between contour lines.\n+* Generate Contours - Adds contour lines to map using interval.\n+* Clear Results - Removes contour lines from map.\n \n-To start a `GeoprocessingTask` that generates contour lines from raster data:\n+## How it works\n \n-1. Add raster data to map using as an `ArcGISTiledLayer`.\n-2. Create and run a `LocalServer`.\n-    * `LocalServer.INSTANCE` creates a local server\n-    * `Server.startAsync()` starts the server asynchronously\n-3. Wait for server to be in the `LocalServerStatus.STARTED` state.\n-    * `Server.addStatusChangedListener()` fires whenever the running status of the local server has changed.\n+1. Create and run a local server with `LocalServer.instance`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b612ce4ca5c1f8a19c2f66c676413b6545a546"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU0NDgyOnYy", "diffSide": "RIGHT", "path": "local_server/local-server-geoprocessing/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozMzo0MFrOF62Bxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozMzo0MFrOF62Bxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NjkxOA==", "bodyText": "reverting to Java specific instructions here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                2. Create a parameter using `inputs.insert(\"ContourInterval\", new GeoprocessingDouble(double))` with name `ContourInterval` and with the interval set as its value.\n          \n          \n            \n                2. Create a parameter using `GeoprocessingParameters.getInputs().put(\"Interval\", new GeoprocessingDouble(double))` with name \"Interval\" and with the interval set as its value.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/461#discussion_r397246918", "createdAt": "2020-03-24T15:33:40Z", "author": {"login": "Rachael-E"}, "path": "local_server/local-server-geoprocessing/README.md", "diffHunk": "@@ -1,45 +1,43 @@\n-# Local Server Geoprocessing\n+# Local server geoprocessing\n \n-Create contour lines from local raster data and Local Server.\n+Create contour lines from local raster data using a local geoprocessing package `.gpk` and the contour geoprocessing tool.\n \n-This is accomplished using a local geoprocessing package (.gpk) and the contour geoprocessing tool.\n+![Image of local server geoprocessing](LocalServerGeoprocessing.png)\n \n-**Note:** Local Server is not supported on MacOS\n+## Use case\n \n-![](LocalServerGeoprocessing.png)\n+For executing offline geoprocessing tasks in your ArcGIS Runtime apps via an offline (local) server.\n \n ## How to use the sample\n \n Contour Line Controls (Top Left):\n-* Interval-- Specifies the spacing between contour lines.\n-* Generate Contours -. Adds contour lines to map using interval.\n-* Clear Results -. Removes contour lines from map.\n \n-## How it works\n+* Interval - Specifies the spacing between contour lines.\n+* Generate Contours - Adds contour lines to map using interval.\n+* Clear Results - Removes contour lines from map.\n \n-To start a `GeoprocessingTask` that generates contour lines from raster data:\n+## How it works\n \n-1. Add raster data to map using as an `ArcGISTiledLayer`.\n-2. Create and run a `LocalServer`.\n-    * `LocalServer.INSTANCE` creates a local server\n-    * `Server.startAsync()` starts the server asynchronously\n-3. Wait for server to be in the `LocalServerStatus.STARTED` state.\n-    * `Server.addStatusChangedListener()` fires whenever the running status of the local server has changed.\n+1. Create and run a local server with `LocalServer.instance`.\n+2. Start the server asynchronously with `Server.startAsync()`.\n+3. Wait for server to be in the  `LocalServerStatus.STARTED` state.\n+   * Callbacks attached to `Server.addStatusChangedListener()` will invoke whenever the status of the local server has changed.\n 4. Start a `LocalGeoprocessingService` and run a `GeoprocessingTask`.\n-    * `new LocalGeoprocessingService(Url, ServiceType)`, creates a local geoprocessing service\n-    * `LocalGeoprocessingService.startAsync()` starts the geoprocessing service asynchronously\n-    * `new GeoprocessingTask(LocalGeoprocessingService.getUrl() + \"/Contour\")`, creates a geoprocessing task that uses the contour lines tool\n-5. Create `GeoprocessingParameters` and add a `GeoprocessingDouble` as a parameter using set interval.\n-    * `new GeoprocessingParameters(ExecutionType)`, creates geoprocess parameters\n-    * `GeoprocessingParameters.getInputs().put(\"Interval\", new GeoprocessingDouble(double))`, creates a parameter with name `Interval` with the interval set as its value.\n-6. Create and start a `GeoprocessingJob` using the parameters from above.\n-    * `GeoprocessingTask.createJob(GeoprocessingParameters)`, creates a geoprocessing job\n-    * `GeoprocessingJob.start()`, starts job\n-7. Add contour lines as an `ArcGISMapImageLayer` to map.\n-    * get url from local geoprocessing service, `LocalGeoprocessingService.getUrl()`\n-    * get server job id of geoprocessing job, `GeoprocessingJob.getServerJobId()`\n-    * replace `GPServer` from url with `MapServer/jobs/jobId`, to get generate contour lines data\n-    * create a map image layer from that new url and add that layer to the map\n+    1. Instantiate `LocalGeoprocessingService(Url, ServiceType)` to create a local geoprocessing service.\n+    2. Invoke `LocalGeoprocessingService.start()` to start the service asynchronously.\n+    3. Instantiate `GeoprocessingTask(LocalGeoprocessingService.url() + \"/Contour\")` to create a geoprocessing task that uses the contour lines tool.\n+5. Create an instance of `GeoprocessingParameters` and add a `GeoprocessingDouble` as a parameter using `setInterval`.\n+    1. Instantiate `GeoprocessingParameters(ExecutionType)` creates geoprocessing parameters.\n+    2. Create a parameter using `inputs.insert(\"ContourInterval\", new GeoprocessingDouble(double))` with name `ContourInterval` and with the interval set as its value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b612ce4ca5c1f8a19c2f66c676413b6545a546"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU0ODc2OnYy", "diffSide": "RIGHT", "path": "local_server/local-server-geoprocessing/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozNDozMlrOF62ETg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoyMjo0MFrOF7UfmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NzU2Ng==", "bodyText": "looks like we don't use this step in Java, I can't find it in the code?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/461#discussion_r397247566", "createdAt": "2020-03-24T15:34:32Z", "author": {"login": "Rachael-E"}, "path": "local_server/local-server-geoprocessing/README.md", "diffHunk": "@@ -1,45 +1,43 @@\n-# Local Server Geoprocessing\n+# Local server geoprocessing\n \n-Create contour lines from local raster data and Local Server.\n+Create contour lines from local raster data using a local geoprocessing package `.gpk` and the contour geoprocessing tool.\n \n-This is accomplished using a local geoprocessing package (.gpk) and the contour geoprocessing tool.\n+![Image of local server geoprocessing](LocalServerGeoprocessing.png)\n \n-**Note:** Local Server is not supported on MacOS\n+## Use case\n \n-![](LocalServerGeoprocessing.png)\n+For executing offline geoprocessing tasks in your ArcGIS Runtime apps via an offline (local) server.\n \n ## How to use the sample\n \n Contour Line Controls (Top Left):\n-* Interval-- Specifies the spacing between contour lines.\n-* Generate Contours -. Adds contour lines to map using interval.\n-* Clear Results -. Removes contour lines from map.\n \n-## How it works\n+* Interval - Specifies the spacing between contour lines.\n+* Generate Contours - Adds contour lines to map using interval.\n+* Clear Results - Removes contour lines from map.\n \n-To start a `GeoprocessingTask` that generates contour lines from raster data:\n+## How it works\n \n-1. Add raster data to map using as an `ArcGISTiledLayer`.\n-2. Create and run a `LocalServer`.\n-    * `LocalServer.INSTANCE` creates a local server\n-    * `Server.startAsync()` starts the server asynchronously\n-3. Wait for server to be in the `LocalServerStatus.STARTED` state.\n-    * `Server.addStatusChangedListener()` fires whenever the running status of the local server has changed.\n+1. Create and run a local server with `LocalServer.instance`.\n+2. Start the server asynchronously with `Server.startAsync()`.\n+3. Wait for server to be in the  `LocalServerStatus.STARTED` state.\n+   * Callbacks attached to `Server.addStatusChangedListener()` will invoke whenever the status of the local server has changed.\n 4. Start a `LocalGeoprocessingService` and run a `GeoprocessingTask`.\n-    * `new LocalGeoprocessingService(Url, ServiceType)`, creates a local geoprocessing service\n-    * `LocalGeoprocessingService.startAsync()` starts the geoprocessing service asynchronously\n-    * `new GeoprocessingTask(LocalGeoprocessingService.getUrl() + \"/Contour\")`, creates a geoprocessing task that uses the contour lines tool\n-5. Create `GeoprocessingParameters` and add a `GeoprocessingDouble` as a parameter using set interval.\n-    * `new GeoprocessingParameters(ExecutionType)`, creates geoprocess parameters\n-    * `GeoprocessingParameters.getInputs().put(\"Interval\", new GeoprocessingDouble(double))`, creates a parameter with name `Interval` with the interval set as its value.\n-6. Create and start a `GeoprocessingJob` using the parameters from above.\n-    * `GeoprocessingTask.createJob(GeoprocessingParameters)`, creates a geoprocessing job\n-    * `GeoprocessingJob.start()`, starts job\n-7. Add contour lines as an `ArcGISMapImageLayer` to map.\n-    * get url from local geoprocessing service, `LocalGeoprocessingService.getUrl()`\n-    * get server job id of geoprocessing job, `GeoprocessingJob.getServerJobId()`\n-    * replace `GPServer` from url with `MapServer/jobs/jobId`, to get generate contour lines data\n-    * create a map image layer from that new url and add that layer to the map\n+    1. Instantiate `LocalGeoprocessingService(Url, ServiceType)` to create a local geoprocessing service.\n+    2. Invoke `LocalGeoprocessingService.start()` to start the service asynchronously.\n+    3. Instantiate `GeoprocessingTask(LocalGeoprocessingService.url() + \"/Contour\")` to create a geoprocessing task that uses the contour lines tool.\n+5. Create an instance of `GeoprocessingParameters` and add a `GeoprocessingDouble` as a parameter using `setInterval`.\n+    1. Instantiate `GeoprocessingParameters(ExecutionType)` creates geoprocessing parameters.\n+    2. Create a parameter using `inputs.insert(\"ContourInterval\", new GeoprocessingDouble(double))` with name `ContourInterval` and with the interval set as its value.\n+    3.  Set the input with the interval value using `gpParams.setInputs(inputs)`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b612ce4ca5c1f8a19c2f66c676413b6545a546"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0NjA3Mw==", "bodyText": "You're right, this step is unnecessary. The action is already dealt with in the point above. I've removed it \ud83d\udc4d", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/461#discussion_r397746073", "createdAt": "2020-03-25T10:22:40Z", "author": {"login": "JonLavi"}, "path": "local_server/local-server-geoprocessing/README.md", "diffHunk": "@@ -1,45 +1,43 @@\n-# Local Server Geoprocessing\n+# Local server geoprocessing\n \n-Create contour lines from local raster data and Local Server.\n+Create contour lines from local raster data using a local geoprocessing package `.gpk` and the contour geoprocessing tool.\n \n-This is accomplished using a local geoprocessing package (.gpk) and the contour geoprocessing tool.\n+![Image of local server geoprocessing](LocalServerGeoprocessing.png)\n \n-**Note:** Local Server is not supported on MacOS\n+## Use case\n \n-![](LocalServerGeoprocessing.png)\n+For executing offline geoprocessing tasks in your ArcGIS Runtime apps via an offline (local) server.\n \n ## How to use the sample\n \n Contour Line Controls (Top Left):\n-* Interval-- Specifies the spacing between contour lines.\n-* Generate Contours -. Adds contour lines to map using interval.\n-* Clear Results -. Removes contour lines from map.\n \n-## How it works\n+* Interval - Specifies the spacing between contour lines.\n+* Generate Contours - Adds contour lines to map using interval.\n+* Clear Results - Removes contour lines from map.\n \n-To start a `GeoprocessingTask` that generates contour lines from raster data:\n+## How it works\n \n-1. Add raster data to map using as an `ArcGISTiledLayer`.\n-2. Create and run a `LocalServer`.\n-    * `LocalServer.INSTANCE` creates a local server\n-    * `Server.startAsync()` starts the server asynchronously\n-3. Wait for server to be in the `LocalServerStatus.STARTED` state.\n-    * `Server.addStatusChangedListener()` fires whenever the running status of the local server has changed.\n+1. Create and run a local server with `LocalServer.instance`.\n+2. Start the server asynchronously with `Server.startAsync()`.\n+3. Wait for server to be in the  `LocalServerStatus.STARTED` state.\n+   * Callbacks attached to `Server.addStatusChangedListener()` will invoke whenever the status of the local server has changed.\n 4. Start a `LocalGeoprocessingService` and run a `GeoprocessingTask`.\n-    * `new LocalGeoprocessingService(Url, ServiceType)`, creates a local geoprocessing service\n-    * `LocalGeoprocessingService.startAsync()` starts the geoprocessing service asynchronously\n-    * `new GeoprocessingTask(LocalGeoprocessingService.getUrl() + \"/Contour\")`, creates a geoprocessing task that uses the contour lines tool\n-5. Create `GeoprocessingParameters` and add a `GeoprocessingDouble` as a parameter using set interval.\n-    * `new GeoprocessingParameters(ExecutionType)`, creates geoprocess parameters\n-    * `GeoprocessingParameters.getInputs().put(\"Interval\", new GeoprocessingDouble(double))`, creates a parameter with name `Interval` with the interval set as its value.\n-6. Create and start a `GeoprocessingJob` using the parameters from above.\n-    * `GeoprocessingTask.createJob(GeoprocessingParameters)`, creates a geoprocessing job\n-    * `GeoprocessingJob.start()`, starts job\n-7. Add contour lines as an `ArcGISMapImageLayer` to map.\n-    * get url from local geoprocessing service, `LocalGeoprocessingService.getUrl()`\n-    * get server job id of geoprocessing job, `GeoprocessingJob.getServerJobId()`\n-    * replace `GPServer` from url with `MapServer/jobs/jobId`, to get generate contour lines data\n-    * create a map image layer from that new url and add that layer to the map\n+    1. Instantiate `LocalGeoprocessingService(Url, ServiceType)` to create a local geoprocessing service.\n+    2. Invoke `LocalGeoprocessingService.start()` to start the service asynchronously.\n+    3. Instantiate `GeoprocessingTask(LocalGeoprocessingService.url() + \"/Contour\")` to create a geoprocessing task that uses the contour lines tool.\n+5. Create an instance of `GeoprocessingParameters` and add a `GeoprocessingDouble` as a parameter using `setInterval`.\n+    1. Instantiate `GeoprocessingParameters(ExecutionType)` creates geoprocessing parameters.\n+    2. Create a parameter using `inputs.insert(\"ContourInterval\", new GeoprocessingDouble(double))` with name `ContourInterval` and with the interval set as its value.\n+    3.  Set the input with the interval value using `gpParams.setInputs(inputs)`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NzU2Ng=="}, "originalCommit": {"oid": "e6b612ce4ca5c1f8a19c2f66c676413b6545a546"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU2MDE2OnYy", "diffSide": "RIGHT", "path": "local_server/local-server-feature-layer/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozNjo0OVrOF62LgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozNjo0OVrOF62LgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0OTQwOQ==", "bodyText": "looking at official doc for Local Server, it is a capitalized term, so we should ensure that's consistent\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Local server feature layer\n          \n          \n            \n            # Local Server feature layer", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/461#discussion_r397249409", "createdAt": "2020-03-24T15:36:49Z", "author": {"login": "Rachael-E"}, "path": "local_server/local-server-feature-layer/README.md", "diffHunk": "@@ -1,36 +1,35 @@\n-# Local Server Feature Layer\n+# Local server feature layer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b612ce4ca5c1f8a19c2f66c676413b6545a546"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU2MTE5OnYy", "diffSide": "RIGHT", "path": "local_server/local-server-geoprocessing/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozNzowNVrOF62MJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozNzowNVrOF62MJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0OTU3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Local server geoprocessing\n          \n          \n            \n            # Local Server geoprocessing", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/461#discussion_r397249573", "createdAt": "2020-03-24T15:37:05Z", "author": {"login": "Rachael-E"}, "path": "local_server/local-server-geoprocessing/README.md", "diffHunk": "@@ -1,45 +1,43 @@\n-# Local Server Geoprocessing\n+# Local server geoprocessing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b612ce4ca5c1f8a19c2f66c676413b6545a546"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU2NTQ5OnYy", "diffSide": "RIGHT", "path": "local_server/local-server-map-image-layer/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozODowMFrOF62O3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozODowMFrOF62O3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MDI3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Create and run a local server with `LocalServer.instance`.\n          \n          \n            \n            1. Create and run a local server with `LocalServer.INSTANCE`.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/461#discussion_r397250270", "createdAt": "2020-03-24T15:38:00Z", "author": {"login": "Rachael-E"}, "path": "local_server/local-server-map-image-layer/README.md", "diffHunk": "@@ -1,39 +1,45 @@\n-# Local Server Map Image Layer\n+# Local Server map image layer\n \n-Create a local map imagery service and show its tiles in a map.\n+Start the Local Server and Local Map Service, create an ArcGIS Map Image Layer from the Local Map Service, and add it to a map.\n \n-**Note:** Local Server is not supported on MacOS\n+![Image of local server map image layer](screenshot.png)\n \n-![](LocalServerMapImageLayer.png)\n+## Use case\n+\n+For executing offline geoprocessing tasks in your ArcGIS Runtime apps via an offline (local) server.\n \n ## How to use the sample\n \n-A Local Server and Local Map Service will automatically be started and once running a Map Image Layer will be created and added to the map.\n+The Local Server and local map service will automatically be started and, once running, a map image layer will be created and added to the map.\n \n ## How it works\n \n-To create a `ArcGISMapImageLayer` from a `LocalMapService`:\n-\n-1. Create and run a local server.\n-    * `LocalServer.INSTANCE` creates a local server\n-    * `Server.startAsync()` starts the server asynchronously\n-2. Wait for server to be in th. `LocalServerStatus.STARTED` state.\n-    * `Server.addStatusChangedListener()` fires whenever the status of the local server has changed.\n-3. Create and run a local map service.\n-    * `new LocalMapService(Url)`, creates a local map service with the given url path to mpk file\n-    * `LocalMapService.startAsync()`, starts the service asynchronously\n-    * service will be added to the local server automatically\n-4. Wait for map service to be in th. `LocalServerStatus.STARTED` state.\n-    * `LocalMapService.addStatusChangedListener()` fires whenever the status of the local service has changed.\n-5. Create a map image layer from local map service.\n-    * create a `new ArcGISMapImageLayer(Url)` from local map service url, `LocalMapService.getUrl()`\n-    * load the layer asynchronously, `ArcGISMapImageLayer.loadAsync()`\n-6. Add map image layer to map, `Map.getOperationalLayers().add(ArcGISMapImageLayer)`.\n+1. Create and run a local server with `LocalServer.instance`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b612ce4ca5c1f8a19c2f66c676413b6545a546"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU2ODM5OnYy", "diffSide": "RIGHT", "path": "local_server/local-server-services/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozODozNVrOF62QpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozODozNVrOF62QpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MDcyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Local server services\n          \n          \n            \n            # Local Server services", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/461#discussion_r397250724", "createdAt": "2020-03-24T15:38:35Z", "author": {"login": "Rachael-E"}, "path": "local_server/local-server-services/README.md", "diffHunk": "@@ -1,38 +1,55 @@\n-# Local Server Services\n+# Local server services", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b612ce4ca5c1f8a19c2f66c676413b6545a546"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU3NTQyOnYy", "diffSide": "RIGHT", "path": "local_server/local-server-services/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0MDowN1rOF62VOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0MDowN1rOF62VOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MTg5OA==", "bodyText": "I don't have local server up and running to check how it looks, but we should probably stick with the original description of how to use the sample which will be Java specific\n\nChoose an option from the dropdown control to filter packages by service type. Then click the Open button to choose a package. Finally, click the Start button to start the service. The service's status will be displayed in the center log.\n\n\nTo stop a service, select it from the Running Services list and click the Stop Service button. To go to the service's URL in your default web browser, select it and click the Go to URL button.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/461#discussion_r397251898", "createdAt": "2020-03-24T15:40:07Z", "author": {"login": "Rachael-E"}, "path": "local_server/local-server-services/README.md", "diffHunk": "@@ -1,38 +1,55 @@\n-# Local Server Services\n+# Local server services\n \n-Manage multiple running services in Local Server.\n+Demonstrates how to start and stop the Local Server and start and stop a local map, feature, and geoprocessing service running on the Local Server.\n \n-**Note:** Local Server is not supported on MacOS\n+![Image of local server services](LocalServerServices.png)\n \n-![](LocalServerServices.png)\n+## Use case\n+\n+For executing offline geoprocessing tasks in your ArcGIS Runtime apps via an offline (local) server.\n \n ## How to use the sample\n \n-Choose an option from the dropdown control to filter packages by service type. Then click the Open button to choose a package. Finally, click the Start button to start the service. The service's status will be displayed in the center log.\n+Click `Start Local Server` to start the Local Server. Click `Stop Local Server` to stop the Local Server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b612ce4ca5c1f8a19c2f66c676413b6545a546"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU3NjgyOnYy", "diffSide": "RIGHT", "path": "local_server/local-server-services/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0MDoyNFrOF62WFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0MDoyNFrOF62WFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MjExOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Create and run a local server with `LocalServer.instance`.\n          \n          \n            \n            1. Create and run a local server with `LocalServer.INSTANCE`.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/461#discussion_r397252118", "createdAt": "2020-03-24T15:40:24Z", "author": {"login": "Rachael-E"}, "path": "local_server/local-server-services/README.md", "diffHunk": "@@ -1,38 +1,55 @@\n-# Local Server Services\n+# Local server services\n \n-Manage multiple running services in Local Server.\n+Demonstrates how to start and stop the Local Server and start and stop a local map, feature, and geoprocessing service running on the Local Server.\n \n-**Note:** Local Server is not supported on MacOS\n+![Image of local server services](LocalServerServices.png)\n \n-![](LocalServerServices.png)\n+## Use case\n+\n+For executing offline geoprocessing tasks in your ArcGIS Runtime apps via an offline (local) server.\n \n ## How to use the sample\n \n-Choose an option from the dropdown control to filter packages by service type. Then click the Open button to choose a package. Finally, click the Start button to start the service. The service's status will be displayed in the center log.\n+Click `Start Local Server` to start the Local Server. Click `Stop Local Server` to stop the Local Server.\n+\n+The `Map Service` combo box lets you to pick a local service that is available.\n+\n+After browsing for the desired file, click `Start Service` to start the selected service.\n \n-To stop a service, select it from the Running Services list and click the Stop Service button. To go to the service's URL in your default web browser, select it and click the Go to URL button.\n+When the running service's url appears, select it and click `Open Url`. To stop this running service, click `Stop Service`.\n \n ## How it works\n \n-To start a `LocalService`:\n+To start a `LocalServer` and attach a `LocalService`:\n+\n+1. Create and run a local server with `LocalServer.instance`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b612ce4ca5c1f8a19c2f66c676413b6545a546"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU4MDQzOnYy", "diffSide": "RIGHT", "path": "local_server/local-server-services/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0MTowN1rOF62YWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoyNDoyNFrOF7Uj6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MjY5OA==", "bodyText": "missing full stop at the end of this section", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/461#discussion_r397252698", "createdAt": "2020-03-24T15:41:07Z", "author": {"login": "Rachael-E"}, "path": "local_server/local-server-services/README.md", "diffHunk": "@@ -1,38 +1,55 @@\n-# Local Server Services\n+# Local server services\n \n-Manage multiple running services in Local Server.\n+Demonstrates how to start and stop the Local Server and start and stop a local map, feature, and geoprocessing service running on the Local Server.\n \n-**Note:** Local Server is not supported on MacOS\n+![Image of local server services](LocalServerServices.png)\n \n-![](LocalServerServices.png)\n+## Use case\n+\n+For executing offline geoprocessing tasks in your ArcGIS Runtime apps via an offline (local) server.\n \n ## How to use the sample\n \n-Choose an option from the dropdown control to filter packages by service type. Then click the Open button to choose a package. Finally, click the Start button to start the service. The service's status will be displayed in the center log.\n+Click `Start Local Server` to start the Local Server. Click `Stop Local Server` to stop the Local Server.\n+\n+The `Map Service` combo box lets you to pick a local service that is available.\n+\n+After browsing for the desired file, click `Start Service` to start the selected service.\n \n-To stop a service, select it from the Running Services list and click the Stop Service button. To go to the service's URL in your default web browser, select it and click the Go to URL button.\n+When the running service's url appears, select it and click `Open Url`. To stop this running service, click `Stop Service`.\n \n ## How it works\n \n-To start a `LocalService`:\n+To start a `LocalServer` and attach a `LocalService`:\n+\n+1. Create and run a local server with `LocalServer.instance`.\n+2. Start the server asynchronously with `Server.startAsync()`.\n+3. Wait for server to be in the  `LocalServerStatus.STARTED` state.\n+   * Callbacks attached to `Server.addStatusChangedListener()` will invoke whenever the status of the local server has changed.\n+4. Create and run a local service. Here is an example of running a `LocalMapService`:\n+    1. Instantiate `LocalMapService(Url)` to create a local map service with the given URL path to map package (`mpk` or `mpkx` file).\n+    2. Start the job with `LocalMapServic.estartAsync()`.\n+       * The service is added to the `LocalServer` automatically.\n+\n+To stop a `LocalServer` and any attached `LocalServices`:\n \n-1. Start the local server.\n-    * `LocalServer.INSTANCE` creates a local server\n-    * `server.startAsync()` starts the server asynchronously\n-2. Wait for server to be in th. `LocalServerStatus.STARTED` state.\n-    * `Server.addStatusChangedListener()` fires whenever the running status of the local server\n-changes\n-3. Create and run a local service.\n-    * `new LocalMapService(Url)` creates a local map service with the given url path to mpk file\n-    * `service.startAsync()` starts the service asynchronously\n-4. Stop the service with `service.stopAsync().`\n+1. If required, you can retrieve a list of all running services with `LocalServer.INSTANCE.getServices()`.\n+2. Stop the services asynchronously using `LocalService.stopAsync()`.\n+3. Use `LocalServer.INSTANCE.stopAsync()` to stop the server asynchronously. You can use `.addDoneListener()` on this process to perform additional actions after the server is successfully stopped, such as removing temporary files", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b612ce4ca5c1f8a19c2f66c676413b6545a546"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0NzE3OQ==", "bodyText": "Good catch, thanks!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/461#discussion_r397747179", "createdAt": "2020-03-25T10:24:24Z", "author": {"login": "JonLavi"}, "path": "local_server/local-server-services/README.md", "diffHunk": "@@ -1,38 +1,55 @@\n-# Local Server Services\n+# Local server services\n \n-Manage multiple running services in Local Server.\n+Demonstrates how to start and stop the Local Server and start and stop a local map, feature, and geoprocessing service running on the Local Server.\n \n-**Note:** Local Server is not supported on MacOS\n+![Image of local server services](LocalServerServices.png)\n \n-![](LocalServerServices.png)\n+## Use case\n+\n+For executing offline geoprocessing tasks in your ArcGIS Runtime apps via an offline (local) server.\n \n ## How to use the sample\n \n-Choose an option from the dropdown control to filter packages by service type. Then click the Open button to choose a package. Finally, click the Start button to start the service. The service's status will be displayed in the center log.\n+Click `Start Local Server` to start the Local Server. Click `Stop Local Server` to stop the Local Server.\n+\n+The `Map Service` combo box lets you to pick a local service that is available.\n+\n+After browsing for the desired file, click `Start Service` to start the selected service.\n \n-To stop a service, select it from the Running Services list and click the Stop Service button. To go to the service's URL in your default web browser, select it and click the Go to URL button.\n+When the running service's url appears, select it and click `Open Url`. To stop this running service, click `Stop Service`.\n \n ## How it works\n \n-To start a `LocalService`:\n+To start a `LocalServer` and attach a `LocalService`:\n+\n+1. Create and run a local server with `LocalServer.instance`.\n+2. Start the server asynchronously with `Server.startAsync()`.\n+3. Wait for server to be in the  `LocalServerStatus.STARTED` state.\n+   * Callbacks attached to `Server.addStatusChangedListener()` will invoke whenever the status of the local server has changed.\n+4. Create and run a local service. Here is an example of running a `LocalMapService`:\n+    1. Instantiate `LocalMapService(Url)` to create a local map service with the given URL path to map package (`mpk` or `mpkx` file).\n+    2. Start the job with `LocalMapServic.estartAsync()`.\n+       * The service is added to the `LocalServer` automatically.\n+\n+To stop a `LocalServer` and any attached `LocalServices`:\n \n-1. Start the local server.\n-    * `LocalServer.INSTANCE` creates a local server\n-    * `server.startAsync()` starts the server asynchronously\n-2. Wait for server to be in th. `LocalServerStatus.STARTED` state.\n-    * `Server.addStatusChangedListener()` fires whenever the running status of the local server\n-changes\n-3. Create and run a local service.\n-    * `new LocalMapService(Url)` creates a local map service with the given url path to mpk file\n-    * `service.startAsync()` starts the service asynchronously\n-4. Stop the service with `service.stopAsync().`\n+1. If required, you can retrieve a list of all running services with `LocalServer.INSTANCE.getServices()`.\n+2. Stop the services asynchronously using `LocalService.stopAsync()`.\n+3. Use `LocalServer.INSTANCE.stopAsync()` to stop the server asynchronously. You can use `.addDoneListener()` on this process to perform additional actions after the server is successfully stopped, such as removing temporary files", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MjY5OA=="}, "originalCommit": {"oid": "e6b612ce4ca5c1f8a19c2f66c676413b6545a546"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 182, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}