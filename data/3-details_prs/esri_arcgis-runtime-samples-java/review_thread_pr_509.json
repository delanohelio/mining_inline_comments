{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMDM1NzA5", "number": 509, "reviewThreads": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NDowOFrOD5SfOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMToxNzozNlrOELN7kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzk4MzI5OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NDowOFrOGQd75A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjo1NzoxNFrOGQyzhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMDg2OA==", "bodyText": "I think we recently discussed naming this \"Animate images with image overlays\" so that it reads a bit smoother. Let's refer back to the common repo and see whether that change was made official.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419920868", "createdAt": "2020-05-05T07:44:08Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/README.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Animate images with image overlay", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI2Mjc4OQ==", "bodyText": "Mike just confirmed it's to stay as singular", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420262789", "createdAt": "2020-05-05T16:57:14Z", "author": {"login": "Rachael-E"}, "path": "scene/animate-images-with-image-overlay/README.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Animate images with image overlay", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMDg2OA=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzk4NjI1OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NTowMlrOGQd9oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxNjo1OFrOGQxFKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMTMxMg==", "bodyText": "Perhaps we can just remove this first sentence? It's more general info / about the data rather than how to use the sample.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419921312", "createdAt": "2020-05-05T07:45:02Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/README.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Animate images with image overlay\n+\n+Animate a series of images with an image overlay.\n+\n+![Image of animate images with image overlay](AnimateImagesWithImageOverlay.gif)\n+\n+## Use case\n+\n+An image overlay is useful for displaying fast and dynamic images; for example, rendering real-time sensor data captured from a drone. Each frame from the drone becomes a static image which is updated on the fly as the data is made available.\n+\n+## How to use the sample\n+\n+The application loads a map of the Southwestern United States. Click the \"Start/Stop\" button to start or stop the radar animation. Use the drop down menu to select how quickly the animation plays. Move the slider to change the opacity of the image overlay.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5NTQzNg==", "bodyText": "I think it's ok to keep this in, it adds some context. We have other samples where we say the map is loading over such and such a place.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420195436", "createdAt": "2020-05-05T15:23:45Z", "author": {"login": "Rachael-E"}, "path": "scene/animate-images-with-image-overlay/README.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Animate images with image overlay\n+\n+Animate a series of images with an image overlay.\n+\n+![Image of animate images with image overlay](AnimateImagesWithImageOverlay.gif)\n+\n+## Use case\n+\n+An image overlay is useful for displaying fast and dynamic images; for example, rendering real-time sensor data captured from a drone. Each frame from the drone becomes a static image which is updated on the fly as the data is made available.\n+\n+## How to use the sample\n+\n+The application loads a map of the Southwestern United States. Click the \"Start/Stop\" button to start or stop the radar animation. Use the drop down menu to select how quickly the animation plays. Move the slider to change the opacity of the image overlay.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMTMxMg=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNDUzOQ==", "bodyText": "I've never actually noticed that kind of info being added into 'how to use the sample'. I thought we were generally trying to put it in 'about the data'", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420234539", "createdAt": "2020-05-05T16:16:58Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/README.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Animate images with image overlay\n+\n+Animate a series of images with an image overlay.\n+\n+![Image of animate images with image overlay](AnimateImagesWithImageOverlay.gif)\n+\n+## Use case\n+\n+An image overlay is useful for displaying fast and dynamic images; for example, rendering real-time sensor data captured from a drone. Each frame from the drone becomes a static image which is updated on the fly as the data is made available.\n+\n+## How to use the sample\n+\n+The application loads a map of the Southwestern United States. Click the \"Start/Stop\" button to start or stop the radar animation. Use the drop down menu to select how quickly the animation plays. Move the slider to change the opacity of the image overlay.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMTMxMg=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzk5MjQ2OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NzowOVrOGQeBgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NzowOVrOGQeBgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMjMwNg==", "bodyText": "Perhaps we can rephrase this sentence so that it's not so perscriptive, so that we don't accidentally imply that 15fps is the only way to do it? e.g.\nSet up a timer with your desired interval time. For example, an interval of 67ms is roughly equivalent to  15 fps.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419922306", "createdAt": "2020-05-05T07:47:09Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/README.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Animate images with image overlay\n+\n+Animate a series of images with an image overlay.\n+\n+![Image of animate images with image overlay](AnimateImagesWithImageOverlay.gif)\n+\n+## Use case\n+\n+An image overlay is useful for displaying fast and dynamic images; for example, rendering real-time sensor data captured from a drone. Each frame from the drone becomes a static image which is updated on the fly as the data is made available.\n+\n+## How to use the sample\n+\n+The application loads a map of the Southwestern United States. Click the \"Start/Stop\" button to start or stop the radar animation. Use the drop down menu to select how quickly the animation plays. Move the slider to change the opacity of the image overlay.\n+\n+## How it works\n+\n+1. Create an `ImageOverlay` and add it to the `SceneView`.\n+2. Set up a timer with an initial interval time of 67ms, equivalent to ~15fps.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzk5ODQ1OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0OTowNlrOGQeFTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNToyNzo0N1rOGQu4Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMzI3Ng==", "bodyText": "Perhaps we should add some information here on there being two ways of creating an ImageOverlay:\nFrom a URL and from a JavaFX Image. For the latter, TIFF is not supported", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419923276", "createdAt": "2020-05-05T07:49:06Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/README.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Animate images with image overlay\n+\n+Animate a series of images with an image overlay.\n+\n+![Image of animate images with image overlay](AnimateImagesWithImageOverlay.gif)\n+\n+## Use case\n+\n+An image overlay is useful for displaying fast and dynamic images; for example, rendering real-time sensor data captured from a drone. Each frame from the drone becomes a static image which is updated on the fly as the data is made available.\n+\n+## How to use the sample\n+\n+The application loads a map of the Southwestern United States. Click the \"Start/Stop\" button to start or stop the radar animation. Use the drop down menu to select how quickly the animation plays. Move the slider to change the opacity of the image overlay.\n+\n+## How it works\n+\n+1. Create an `ImageOverlay` and add it to the `SceneView`.\n+2. Set up a timer with an initial interval time of 67ms, equivalent to ~15fps.\n+3. For every image, create a new `ImageFrame` and add it to the image overlay at evern timer interval.\n+\n+## Relevant API\n+\n+* ImageFrame\n+* ImageOverlay\n+* SceneView\n+\n+## About the data\n+\n+These radar images were captured by the US National Weather Service (NWS). They highlight the Pacific Southwest sector which is made up of part the western United States and Mexico. For more information visit the [National Weather Service](https://www.weather.gov/jetstream/gis) website.\n+\n+## Additional information\n+\n+The supported image formats are GeoTIFF, TIFF, JPEG, and PNG. `ImageOverlay` does not support the rich processing and rendering capabilities of a `RasterLayer`. Use `Raster` and `RasterLayer` for static image rendering, analysis, and persistence.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5ODQ0Mg==", "bodyText": "I think this is probably more API ref than sample description territory. Whilst it's always nice to know the different options, we often use one of many constructors in a sample without laying out all the other options since it isn't directly used in the sample. There's also the possibility more constructors will be added in the future and we'd have an overhead of remembering to update sample doc.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420198442", "createdAt": "2020-05-05T15:27:47Z", "author": {"login": "Rachael-E"}, "path": "scene/animate-images-with-image-overlay/README.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Animate images with image overlay\n+\n+Animate a series of images with an image overlay.\n+\n+![Image of animate images with image overlay](AnimateImagesWithImageOverlay.gif)\n+\n+## Use case\n+\n+An image overlay is useful for displaying fast and dynamic images; for example, rendering real-time sensor data captured from a drone. Each frame from the drone becomes a static image which is updated on the fly as the data is made available.\n+\n+## How to use the sample\n+\n+The application loads a map of the Southwestern United States. Click the \"Start/Stop\" button to start or stop the radar animation. Use the drop down menu to select how quickly the animation plays. Move the slider to change the opacity of the image overlay.\n+\n+## How it works\n+\n+1. Create an `ImageOverlay` and add it to the `SceneView`.\n+2. Set up a timer with an initial interval time of 67ms, equivalent to ~15fps.\n+3. For every image, create a new `ImageFrame` and add it to the image overlay at evern timer interval.\n+\n+## Relevant API\n+\n+* ImageFrame\n+* ImageOverlay\n+* SceneView\n+\n+## About the data\n+\n+These radar images were captured by the US National Weather Service (NWS). They highlight the Pacific Southwest sector which is made up of part the western United States and Mexico. For more information visit the [National Weather Service](https://www.weather.gov/jetstream/gis) website.\n+\n+## Additional information\n+\n+The supported image formats are GeoTIFF, TIFF, JPEG, and PNG. `ImageOverlay` does not support the rich processing and rendering capabilities of a `RasterLayer`. Use `Raster` and `RasterLayer` for static image rendering, analysis, and persistence.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMzI3Ng=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDAwMDU0OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0OTo1MFrOGQeGoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNToyODoyNlrOGQu6Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMzYxNw==", "bodyText": "Perhaps we should take the drone keyword out. It's a very specific use case, but there's no direct relevance to the API", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419923617", "createdAt": "2020-05-05T07:49:50Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/README.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Animate images with image overlay\n+\n+Animate a series of images with an image overlay.\n+\n+![Image of animate images with image overlay](AnimateImagesWithImageOverlay.gif)\n+\n+## Use case\n+\n+An image overlay is useful for displaying fast and dynamic images; for example, rendering real-time sensor data captured from a drone. Each frame from the drone becomes a static image which is updated on the fly as the data is made available.\n+\n+## How to use the sample\n+\n+The application loads a map of the Southwestern United States. Click the \"Start/Stop\" button to start or stop the radar animation. Use the drop down menu to select how quickly the animation plays. Move the slider to change the opacity of the image overlay.\n+\n+## How it works\n+\n+1. Create an `ImageOverlay` and add it to the `SceneView`.\n+2. Set up a timer with an initial interval time of 67ms, equivalent to ~15fps.\n+3. For every image, create a new `ImageFrame` and add it to the image overlay at evern timer interval.\n+\n+## Relevant API\n+\n+* ImageFrame\n+* ImageOverlay\n+* SceneView\n+\n+## About the data\n+\n+These radar images were captured by the US National Weather Service (NWS). They highlight the Pacific Southwest sector which is made up of part the western United States and Mexico. For more information visit the [National Weather Service](https://www.weather.gov/jetstream/gis) website.\n+\n+## Additional information\n+\n+The supported image formats are GeoTIFF, TIFF, JPEG, and PNG. `ImageOverlay` does not support the rich processing and rendering capabilities of a `RasterLayer`. Use `Raster` and `RasterLayer` for static image rendering, analysis, and persistence.\n+\n+## Tags\n+\n+3D, animation, drone, dynamic, image frame, image overlay, real time, rendering", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5ODk0Ng==", "bodyText": "there is no direct relevance to the API, however I remember Jared saying it's one of the main use cases for this functionality, so we should leave this in.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420198946", "createdAt": "2020-05-05T15:28:26Z", "author": {"login": "Rachael-E"}, "path": "scene/animate-images-with-image-overlay/README.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Animate images with image overlay\n+\n+Animate a series of images with an image overlay.\n+\n+![Image of animate images with image overlay](AnimateImagesWithImageOverlay.gif)\n+\n+## Use case\n+\n+An image overlay is useful for displaying fast and dynamic images; for example, rendering real-time sensor data captured from a drone. Each frame from the drone becomes a static image which is updated on the fly as the data is made available.\n+\n+## How to use the sample\n+\n+The application loads a map of the Southwestern United States. Click the \"Start/Stop\" button to start or stop the radar animation. Use the drop down menu to select how quickly the animation plays. Move the slider to change the opacity of the image overlay.\n+\n+## How it works\n+\n+1. Create an `ImageOverlay` and add it to the `SceneView`.\n+2. Set up a timer with an initial interval time of 67ms, equivalent to ~15fps.\n+3. For every image, create a new `ImageFrame` and add it to the image overlay at evern timer interval.\n+\n+## Relevant API\n+\n+* ImageFrame\n+* ImageOverlay\n+* SceneView\n+\n+## About the data\n+\n+These radar images were captured by the US National Weather Service (NWS). They highlight the Pacific Southwest sector which is made up of part the western United States and Mexico. For more information visit the [National Weather Service](https://www.weather.gov/jetstream/gis) website.\n+\n+## Additional information\n+\n+The supported image formats are GeoTIFF, TIFF, JPEG, and PNG. `ImageOverlay` does not support the rich processing and rendering capabilities of a `RasterLayer`. Use `Raster` and `RasterLayer` for static image rendering, analysis, and persistence.\n+\n+## Tags\n+\n+3D, animation, drone, dynamic, image frame, image overlay, real time, rendering", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMzYxNw=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDAwMzkyOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/README.metadata.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo1MDo1MlrOGQeIsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo1MDo1MlrOGQeIsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNDE0NA==", "bodyText": "I think we're supposed to leave this entry out of the README.metadata.json, but I'm not sure any more. @mikewilburn, could you refresh our memories please?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419924144", "createdAt": "2020-05-05T07:50:52Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/README.metadata.json", "diffHunk": "@@ -0,0 +1,30 @@\n+{\n+    \"category\": \"Scene\",\n+    \"description\": \"Animate a series of images with an image overlay.\",\n+    \"ignore\": false,\n+    \"images\": [\n+        \"AnimateImageWithImageOverlay.gif\"\n+    ],\n+    \"keywords\": [\n+        \"3D\",\n+        \"animation\",\n+        \"drone\",\n+        \"dynamic\",\n+        \"image frame\",\n+        \"image overlay\",\n+        \"real time\",\n+        \"rendering\"\n+    ],\n+    \"redirect_from\": \"/java/latest/sample-code/animate-images-with-image-overlay.htm\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDAwODIyOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/README.metadata.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo1MjoxNFrOGQeLYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo1MjoxNFrOGQeLYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNDgzMg==", "bodyText": "I don't think we need to add the suffix 'sample' here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"title\": \"Animate Images With Image Overlay Sample\"\n          \n          \n            \n                \"title\": \"Animate Images With Image Overlay\"", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419924832", "createdAt": "2020-05-05T07:52:14Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/README.metadata.json", "diffHunk": "@@ -0,0 +1,30 @@\n+{\n+    \"category\": \"Scene\",\n+    \"description\": \"Animate a series of images with an image overlay.\",\n+    \"ignore\": false,\n+    \"images\": [\n+        \"AnimateImageWithImageOverlay.gif\"\n+    ],\n+    \"keywords\": [\n+        \"3D\",\n+        \"animation\",\n+        \"drone\",\n+        \"dynamic\",\n+        \"image frame\",\n+        \"image overlay\",\n+        \"real time\",\n+        \"rendering\"\n+    ],\n+    \"redirect_from\": \"/java/latest/sample-code/animate-images-with-image-overlay.htm\",\n+    \"relevant_apis\": [\n+        \"ImageFrame\",\n+        \"ImageOverlay\",\n+        \"SceneView\"\n+    ],\n+    \"snippets\": [\n+        \"src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlaySample.java\",\n+      \"src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java\",\n+      \"src/main/resources/animate_images_with_image)overlay.fxml\"\n+    ],\n+    \"title\": \"Animate Images With Image Overlay Sample\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDAxNDYwOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo1NDoxNlrOGQePQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTozMTowMFrOGQvCGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNTgyNg==", "bodyText": "I'm not 100% sure any more, but I think the standard order for the imports is:\njava.*\n<newline>\njavafx.*\n<newline>\ncom.esri.*", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419925826", "createdAt": "2020-05-05T07:54:16Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIwMDk4NA==", "bodyText": "yes that's it, good spot!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420200984", "createdAt": "2020-05-05T15:31:00Z", "author": {"login": "Rachael-E"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNTgyNg=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDAxODA0OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo1NToxNVrOGQeRRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo1NToxNVrOGQeRRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNjM0MQ==", "bodyText": "I think in most samples we didn't do the newline after the @FXML annotation. It's a bit annoying since the IntelliJ auto-foratting will muck this up again at some point.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @FXML\n          \n          \n            \n              private SceneView sceneView;\n          \n          \n            \n              @FXML\n          \n          \n            \n              private Button controlAnimationButton;\n          \n          \n            \n              @FXML\n          \n          \n            \n              private Slider opacitySlider;\n          \n          \n            \n              @FXML\n          \n          \n            \n              private ComboBox<String> framesComboBox;\n          \n          \n            \n              @FXML private SceneView sceneView;\n          \n          \n            \n              @FXML private Button controlAnimationButton;\n          \n          \n            \n              @FXML private Slider opacitySlider;\n          \n          \n            \n              @FXML private ComboBox<String> framesComboBox;", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419926341", "createdAt": "2020-05-05T07:55:15Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDAyNDA1OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo1NzowNlrOGQeU_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjozMjozN1rOGQxuVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNzI5NA==", "bodyText": "We might not need this as a member variable, could just make it a var inside addNextImageFrameToImageOverlay?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419927294", "createdAt": "2020-05-05T07:57:06Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzOTQ3Mg==", "bodyText": "It might also make more sense to call it 'frameIndex', since we use it to pick an entry from List<ImageFrame> imageFrames, not from imageFiles[]", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419939472", "createdAt": "2020-05-05T08:20:10Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNzI5NA=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxNDAyNA==", "bodyText": "this has to be a member variable so that the count is tracked correctly: instantiating it as 0 inside the variable just makes the index set to 0 everytime. If I'm misunderstanding, could you let me know what you were thinking please?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420214024", "createdAt": "2020-05-05T15:48:49Z", "author": {"login": "Rachael-E"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNzI5NA=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0NTA3OA==", "bodyText": "I got mixed up, I meant perhaps instantiate it in the initialize method, but really it makes sense where it is just now, so lets leave it as is.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420245078", "createdAt": "2020-05-05T16:32:37Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNzI5NA=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDAzMTMyOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo1OToyNFrOGQeZgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo1OToyNFrOGQeZgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyODQ1MQ==", "bodyText": "I think the samples convention was not to instantiate class members when we declare them, but do either in the main method, with a comment about what they are for, or ideally  just before you use them. I don't actually mind them being instantiated here, but best check what the common pattern is.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419928451", "createdAt": "2020-05-05T07:59:24Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDAzOTUzOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODowMTo1N1rOGQeetg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoyNTo0MFrOGQxb6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyOTc4Mg==", "bodyText": "Can we just define an envelope straight away with four corner points, instead of Evelope(center, width, height)?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419929782", "createdAt": "2020-05-05T08:01:57Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyOTAxNg==", "bodyText": "so the current implementation ensures the image frame and viewpoint sits exactly in the correct geographic location for the data provided. I could change it to an envelope with four corners if you thought there was a significant benefit in doing so over the existing implementation, though it ends up in the same lines of code plus a change in setting up the viewpoint logic. As always there's more than one way to skin a cat! I'm just not sure of the benefit of the 4 point envelope over the existing implementation.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420229016", "createdAt": "2020-05-05T16:08:57Z", "author": {"login": "Rachael-E"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyOTc4Mg=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDM2Mg==", "bodyText": "I just find the constructur Envelope(center, width, height) incredibly unintuitive. We aren't extracting the geographic location from the images or any other data source, so there's not really much of a point in doing it that way.The way we are creating the envelope up there is essentially the same as adding/subtracting 15.09589635986124, -14.3770441522488 from the x/y of the centre-point, respectively. We could just write these values out so it's clearer where in the world these corner points are. But yeah, a matter of preference!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420240362", "createdAt": "2020-05-05T16:25:40Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyOTc4Mg=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDA0NjAwOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODowMzo1NFrOGQeivA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODowMzo1NFrOGQeivA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzMDgxMg==", "bodyText": "There's only one ImageOverlay being used in this sample, so we can make it a class member instead of repeating sceneView.getImageOverlays().get(0) here and below?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419930812", "createdAt": "2020-05-05T08:03:54Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a new image frame from the image at the current index and add it to the image overlay.\n+   */\n+  private void addNextImageFrameToImageOverlay() {\n+\n+    // set image frame to image overlay\n+    sceneView.getImageOverlays().get(0).setImageFrame(imageFrames.get(imageIndex));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDA4NDQzOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoxNTowMVrOGQe6DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzozNTowMVrOGRHNWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNjc4MQ==", "bodyText": "Some suggestions for the comments in this section. We should specify how we're sorting the file paths and ideall why (so that they display in order). Did you try without sorting? I would have thought the files are read in alphabetically when you do .listFiles().\nIn the last section we're not actually creating an image in the intermediate step, we're using the ImageFrame(URI, Envelope) constructor, so we should specify that there. Perhaps it's worth adding a comment somewhere that we can do ImageFrame(Image, Envelope)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // instantiate a new empty list to hold image frames\n          \n          \n            \n                  imageFrames = new ArrayList<>();\n          \n          \n            \n                  // get the image files from local storage as an unordered list\n          \n          \n            \n                  File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n          \n          \n            \n                  // sort the list of image files\n          \n          \n            \n                  if (imageFiles != null) {\n          \n          \n            \n                    Arrays.sort(imageFiles);\n          \n          \n            \n                    // create an image with the given path and use it to create an image frame\n          \n          \n            \n                    for (File file : imageFiles) {\n          \n          \n            \n                      ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n          \n          \n            \n                      imageFrames.add(imageFrame);\n          \n          \n            \n                    }\n          \n          \n            \n                  }\n          \n          \n            \n                  // instantiate a new array to hold image frames\n          \n          \n            \n                  imageFrames = new ArrayList<>();\n          \n          \n            \n                  \n          \n          \n            \n                  // get the image files from local storage\n          \n          \n            \n                  File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n          \n          \n            \n                  \n          \n          \n            \n                  // sort the list of image files by file name in ascending order\n          \n          \n            \n                  if (imageFiles != null) {\n          \n          \n            \n                    Arrays.sort(imageFiles);\n          \n          \n            \n                    \n          \n          \n            \n                    // create an image frame with the file path URI and add it to the array of image frames\n          \n          \n            \n                    for (File file : imageFiles) {\n          \n          \n            \n                      ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n          \n          \n            \n                      imageFrames.add(imageFrame);\n          \n          \n            \n                    }\n          \n          \n            \n                  }", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419936781", "createdAt": "2020-05-05T08:15:01Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0ODUwNQ==", "bodyText": "Great thanks for the comment improvement suggestions. And yep, so we do need to sort to be on the safe side - here's the doc from the .listFiles():\n\nThere is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular,guaranteed to appear in alphabetical order.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420248505", "createdAt": "2020-05-05T16:37:21Z", "author": {"login": "Rachael-E"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNjc4MQ=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5NzA4Mg==", "bodyText": "Good find!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420597082", "createdAt": "2020-05-06T07:35:01Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNjc4MQ=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDA5MDIwOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoxNjo0N1rOGQe9pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzozNDoyOFrOGRHMRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNzcwMw==", "bodyText": "This is UI stuff so perhaps it's better to do it before we get to setting up the Scene/SceneView. It might be even possible to define all these things in the FXML file, might be worth having a look?\nI also think it's counterintuitive to have the high values at the top rather than the bottom.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419937703", "createdAt": "2020-05-05T08:16:47Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI2MjAxMw==", "bodyText": "I spent a while researching about how to define the above in the FXML but had no success :( if you know of a way could you let me know please?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420262013", "createdAt": "2020-05-05T16:56:06Z", "author": {"login": "Rachael-E"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNzcwMw=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5NjgwNA==", "bodyText": "I don't know whether this is possible off the top of my head, it was just a passing thought! If you couldn't find any way then I doubt I'll find anything either, so no worries leaving it like this", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420596804", "createdAt": "2020-05-06T07:34:28Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNzcwMw=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDA5Mjk5OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoxNzo0M1rOGQe_fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoxNzo0M1rOGQe_fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODE3Mw==", "bodyText": "This method is being called at the end of initialize so maybe we can put it directly after initialize, that way we're not making readers scroll past the two other methods first.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419938173", "createdAt": "2020-05-05T08:17:43Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a new image frame from the image at the current index and add it to the image overlay.\n+   */\n+  private void addNextImageFrameToImageOverlay() {\n+\n+    // set image frame to image overlay\n+    sceneView.getImageOverlays().get(0).setImageFrame(imageFrames.get(imageIndex));\n+    // increment the index to keep track of which image to load next\n+    imageIndex++;\n+    // reset index once all files have been loaded\n+    if (imageIndex == imageFrames.size())\n+      imageIndex = 0;\n+  }\n+\n+  /**\n+   * Controls the opacity of the image overlay using the slider.\n+   */\n+  @FXML\n+  private void changeImageOverlayOpacity() {\n+    sceneView.getImageOverlays().get(0).setOpacity((float) opacitySlider.getValue());\n+  }\n+\n+  /**\n+   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   */\n+  private void startNewAnimationTimer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDEwMzgyOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoyMDo1MFrOGQfF7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoyMDo1MFrOGQfF7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzOTgyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Create a new image frame from the image at the current index and add it to the image overlay.\n          \n          \n            \n               * Sets the next image frame from the array of image frames to the image overlay.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419939823", "createdAt": "2020-05-05T08:20:50Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a new image frame from the image at the current index and add it to the image overlay.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDEwODY2OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoyMjoxNlrOGQfI_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoyMjoxNlrOGQfI_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MDYwNg==", "bodyText": "It's not technically adding the next image frame, but repalcing the previous one, so maybe we should call it:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private void addNextImageFrameToImageOverlay() {\n          \n          \n            \n              private void setNextImageFrameToImageOverlay() {", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419940606", "createdAt": "2020-05-05T08:22:16Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a new image frame from the image at the current index and add it to the image overlay.\n+   */\n+  private void addNextImageFrameToImageOverlay() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDExMzkyOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoyMzo1NVrOGQfMPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoyMzo1NVrOGQfMPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MTQzOA==", "bodyText": "Same here, if you make a class member ImageOverlay imageOverlay, you can avoid interrogating the sceneView:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                sceneView.getImageOverlays().get(0).setOpacity((float) opacitySlider.getValue());\n          \n          \n            \n                imageOverlay.setOpacity((float) opacitySlider.getValue());", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419941438", "createdAt": "2020-05-05T08:23:55Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a new image frame from the image at the current index and add it to the image overlay.\n+   */\n+  private void addNextImageFrameToImageOverlay() {\n+\n+    // set image frame to image overlay\n+    sceneView.getImageOverlays().get(0).setImageFrame(imageFrames.get(imageIndex));\n+    // increment the index to keep track of which image to load next\n+    imageIndex++;\n+    // reset index once all files have been loaded\n+    if (imageIndex == imageFrames.size())\n+      imageIndex = 0;\n+  }\n+\n+  /**\n+   * Controls the opacity of the image overlay using the slider.\n+   */\n+  @FXML\n+  private void changeImageOverlayOpacity() {\n+    sceneView.getImageOverlays().get(0).setOpacity((float) opacitySlider.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDEyODQzOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoyNzo1MVrOGQfVEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzozMjo0MVrOGRHJCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MzY5OA==", "bodyText": "If you wanted, you could add Key-Value pairs of String-Int to the ComboBox, and use a cell factory to display the key (15/30/60 fps), and then on selection just put in the corresponding value (17/33/67) straight into the startNewAnimationTimer. Let me know if you want me to walk you through it.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419943698", "createdAt": "2020-05-05T08:27:51Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a new image frame from the image at the current index and add it to the image overlay.\n+   */\n+  private void addNextImageFrameToImageOverlay() {\n+\n+    // set image frame to image overlay\n+    sceneView.getImageOverlays().get(0).setImageFrame(imageFrames.get(imageIndex));\n+    // increment the index to keep track of which image to load next\n+    imageIndex++;\n+    // reset index once all files have been loaded\n+    if (imageIndex == imageFrames.size())\n+      imageIndex = 0;\n+  }\n+\n+  /**\n+   * Controls the opacity of the image overlay using the slider.\n+   */\n+  @FXML\n+  private void changeImageOverlayOpacity() {\n+    sceneView.getImageOverlays().get(0).setOpacity((float) opacitySlider.getValue());\n+  }\n+\n+  /**\n+   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   */\n+  private void startNewAnimationTimer() {\n+\n+    timer = new Timer(true);\n+    TimerTask timerTask = new TimerTask() {\n+      @Override\n+      public void run() {\n+        addNextImageFrameToImageOverlay();\n+      }\n+    };\n+    timer.scheduleAtFixedRate(timerTask, 1L, period);\n+  }\n+\n+  /**\n+   * Handles the rate at which the image frames are displayed using the combo box.\n+   */\n+  @FXML\n+  private void handleframesComboBoxInteraction() {\n+    // set the period for the chosen fps \n+    switch (framesComboBox.getSelectionModel().getSelectedItem()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI2NjE4Nw==", "bodyText": "Thanks, I'd considered the use of a cell factory but then decided to go for the switch since it's a fairly basic set up and we can comment to show the conversion \"maths\". We have other Java samples that use the switch for similar \"simplicity\" so it seemed fitting. Though we also have cell factory for simple conversions too! Unless you have strong feelings about it we can leave as is.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420266187", "createdAt": "2020-05-05T17:02:20Z", "author": {"login": "Rachael-E"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a new image frame from the image at the current index and add it to the image overlay.\n+   */\n+  private void addNextImageFrameToImageOverlay() {\n+\n+    // set image frame to image overlay\n+    sceneView.getImageOverlays().get(0).setImageFrame(imageFrames.get(imageIndex));\n+    // increment the index to keep track of which image to load next\n+    imageIndex++;\n+    // reset index once all files have been loaded\n+    if (imageIndex == imageFrames.size())\n+      imageIndex = 0;\n+  }\n+\n+  /**\n+   * Controls the opacity of the image overlay using the slider.\n+   */\n+  @FXML\n+  private void changeImageOverlayOpacity() {\n+    sceneView.getImageOverlays().get(0).setOpacity((float) opacitySlider.getValue());\n+  }\n+\n+  /**\n+   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   */\n+  private void startNewAnimationTimer() {\n+\n+    timer = new Timer(true);\n+    TimerTask timerTask = new TimerTask() {\n+      @Override\n+      public void run() {\n+        addNextImageFrameToImageOverlay();\n+      }\n+    };\n+    timer.scheduleAtFixedRate(timerTask, 1L, period);\n+  }\n+\n+  /**\n+   * Handles the rate at which the image frames are displayed using the combo box.\n+   */\n+  @FXML\n+  private void handleframesComboBoxInteraction() {\n+    // set the period for the chosen fps \n+    switch (framesComboBox.getSelectionModel().getSelectedItem()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MzY5OA=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5NTk3Ng==", "bodyText": "I think the whole conversion stuff distracts from the actual sample's intentions, but if there's other samples that do this too then you can just leave it.\nI think having this at the beginning of the sample and then using a cell factory is just as informative:\nframesComboBox.getItems().addAll(\nnew ImmutablePair(\"60 frames per second\", \"17\"), // 1000ms/17 = 60 fps\nnew ImmutablePair( \"30 frames per second\", \"33\"), // 1000ms/30 = 30 fps\nnew ImmutablePair( \"15 frames per second\", \"67\") // 1000ms/15 = 15 fps\n);", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420595976", "createdAt": "2020-05-06T07:32:41Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a new image frame from the image at the current index and add it to the image overlay.\n+   */\n+  private void addNextImageFrameToImageOverlay() {\n+\n+    // set image frame to image overlay\n+    sceneView.getImageOverlays().get(0).setImageFrame(imageFrames.get(imageIndex));\n+    // increment the index to keep track of which image to load next\n+    imageIndex++;\n+    // reset index once all files have been loaded\n+    if (imageIndex == imageFrames.size())\n+      imageIndex = 0;\n+  }\n+\n+  /**\n+   * Controls the opacity of the image overlay using the slider.\n+   */\n+  @FXML\n+  private void changeImageOverlayOpacity() {\n+    sceneView.getImageOverlays().get(0).setOpacity((float) opacitySlider.getValue());\n+  }\n+\n+  /**\n+   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   */\n+  private void startNewAnimationTimer() {\n+\n+    timer = new Timer(true);\n+    TimerTask timerTask = new TimerTask() {\n+      @Override\n+      public void run() {\n+        addNextImageFrameToImageOverlay();\n+      }\n+    };\n+    timer.scheduleAtFixedRate(timerTask, 1L, period);\n+  }\n+\n+  /**\n+   * Handles the rate at which the image frames are displayed using the combo box.\n+   */\n+  @FXML\n+  private void handleframesComboBoxInteraction() {\n+    // set the period for the chosen fps \n+    switch (framesComboBox.getSelectionModel().getSelectedItem()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MzY5OA=="}, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDE0MTQwOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/resources/animate_images_with_image_overlay.fxml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODozMTo0OVrOGQfdHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODozMTo0OVrOGQfdHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0NTc1Nw==", "bodyText": "GitHub is conveniently letting us know there's a newline missing here \ud83d\ude04", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419945757", "createdAt": "2020-05-05T08:31:49Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/resources/animate_images_with_image_overlay.fxml", "diffHunk": "@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Esri.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+  ~ use this file except in compliance with the License. You may obtain a copy of\n+  ~ the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+  ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+  ~ License for the specific language governing permissions and limitations under\n+  ~ the License.\n+  -->\n+\n+<?import javafx.scene.layout.*?>\n+\n+<?import com.esri.arcgisruntime.mapping.view.SceneView?>\n+<?import javafx.geometry.Insets?>\n+<?import javafx.scene.control.Slider?>\n+<?import javafx.scene.control.Button?>\n+<?import javafx.scene.control.ComboBox?>\n+<?import javafx.scene.paint.Color?>\n+<?import javafx.scene.control.Label?>\n+<StackPane fx:controller=\"com.esri.samples.animate_images_with_image_overlay.AnimateImagesWithImageOverlayController\"\n+           xmlns:fx=\"http://javafx.com/fxml\" stylesheets=\"/style.css\">\n+    <SceneView fx:id=\"sceneView\"/>\n+    <VBox StackPane.alignment=\"BOTTOM_CENTER\" maxWidth=\"-Infinity\" maxHeight=\"50\" styleClass=\"panel-region\" alignment=\"TOP_CENTER\">\n+    <StackPane.margin>\n+        <Insets bottom=\"20\"/>\n+    </StackPane.margin>\n+    <padding>\n+        <Insets topRightBottomLeft=\"20\"/>\n+    </padding>\n+        <background>\n+            <Background>\n+                <fills>\n+                    <BackgroundFill>\n+                        <fill>\n+                            <Color opacity=\"0.3\"/>\n+                        </fill>\n+                    </BackgroundFill>\n+                </fills>\n+            </Background>\n+        </background>\n+        <GridPane hgap=\"30\" vgap=\"10\" maxWidth=\"500\">\n+\n+            <Button fx:id=\"controlAnimationButton\" text=\"Stop\" maxWidth=\"500\" GridPane.rowIndex=\"0\" GridPane.columnIndex=\"0\" onAction=\"#handlecontrolAnimationButtonClicked\"/>\n+            <ComboBox fx:id=\"framesComboBox\" GridPane.rowIndex=\"0\" GridPane.columnIndex=\"1\" maxWidth=\"Infinity\" onAction=\"#handleframesComboBoxInteraction\"/>\n+            <Label text=\"Opacity:\" GridPane.rowIndex=\"1\" GridPane.columnIndex=\"0\"/>\n+            <Slider fx:id=\"opacitySlider\" GridPane.rowIndex=\"1\" showTickLabels=\"true\" majorTickUnit=\"50\" GridPane.columnIndex=\"1\" maxWidth=\"Infinity\" max=\"1\" value=\"1\" onMouseDragged=\"#changeImageOverlayOpacity\" onMouseReleased=\"#changeImageOverlayOpacity\"/>\n+            \n+        </GridPane>\n+    </VBox>\n+    \n+</StackPane>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDE1NTUzOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/resources/animate_images_with_image_overlay.fxml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODozNTo1NVrOGQfl2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODozNTo1NVrOGQfl2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0Nzk5Mw==", "bodyText": "Every time I see this in FXML files I cringe a bit \ud83d\ude1e\nI've recently used CSS to get rid of some of this stuff and hide it in styles.css:\nhttps://github.com/Esri/arcgis-runtime-samples-java/pull/498/files\nPerhaps we can make that a regular thing with new samples?\nThe trick is to add styleClass=\"stack-pane\" to the StackPane, and then you can target individual FXML elements with rules, e.g. for a VBox:\n.stack-pane VBox {\n  -fx-text-fill: white;\n    -fx-background-color: rgba(0, 0, 0, 0.3);\n    -fx-padding: 10;\n    -fx-max-width: 200;\n    -fx-max-height: 120;\n    -fx-spacing: 10;\n}\n\nIt'll also allow you to hide away a lot of the max width etc. definitions.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419947993", "createdAt": "2020-05-05T08:35:55Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/resources/animate_images_with_image_overlay.fxml", "diffHunk": "@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Esri.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+  ~ use this file except in compliance with the License. You may obtain a copy of\n+  ~ the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+  ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+  ~ License for the specific language governing permissions and limitations under\n+  ~ the License.\n+  -->\n+\n+<?import javafx.scene.layout.*?>\n+\n+<?import com.esri.arcgisruntime.mapping.view.SceneView?>\n+<?import javafx.geometry.Insets?>\n+<?import javafx.scene.control.Slider?>\n+<?import javafx.scene.control.Button?>\n+<?import javafx.scene.control.ComboBox?>\n+<?import javafx.scene.paint.Color?>\n+<?import javafx.scene.control.Label?>\n+<StackPane fx:controller=\"com.esri.samples.animate_images_with_image_overlay.AnimateImagesWithImageOverlayController\"\n+           xmlns:fx=\"http://javafx.com/fxml\" stylesheets=\"/style.css\">\n+    <SceneView fx:id=\"sceneView\"/>\n+    <VBox StackPane.alignment=\"BOTTOM_CENTER\" maxWidth=\"-Infinity\" maxHeight=\"50\" styleClass=\"panel-region\" alignment=\"TOP_CENTER\">\n+    <StackPane.margin>\n+        <Insets bottom=\"20\"/>\n+    </StackPane.margin>\n+    <padding>\n+        <Insets topRightBottomLeft=\"20\"/>\n+    </padding>\n+        <background>\n+            <Background>\n+                <fills>\n+                    <BackgroundFill>\n+                        <fill>\n+                            <Color opacity=\"0.3\"/>\n+                        </fill>\n+                    </BackgroundFill>\n+                </fills>\n+            </Background>\n+        </background>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODY3ODE0OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/resources/animate_images_with_image_overlay.fxml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOToyNzoyMVrOGRK4kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzozNzo1M1rOGReCcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1NzI5OQ==", "bodyText": "Just found a couple of resource for CSS in fxml:\nhttps://docs.oracle.com/javafx/2/layout/style_css.htm\nhttps://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html#gridpane\nYou could get rid of the rules here by adding to the css:\nGrid Pane {\n\t-fx-max-width: 500;\n    -fx-hgap: 30;\n    -fx-vgap: 10;\n}\n\nIt looks like we could get away with removing the styleClass=\"stack-pane\" and styleClass=\"panel-region\" (there's no other stack-pane that we need to differentiate that one from in the fxml file). Might be worth trying to remove them and see how the CSS reacts.\nI think moving the 'min/maxWidth' parameters to the CSS is definitely ok, it's more cosmetic rather than any direct relevance to the code. I think it'd be good to highlight the fx:id parts and the method calls (onAction=\"#handleframesComboBoxInteraction\"), so let's bring those to the front of the node declarations.\nLooks like you can also define the alignment within the StackPane in the CSS file:\nhttps://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html#stackpane\nYou could even declare most of the params for the slider:\nhttps://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html#slider\nonly thing I can't see in there is whether we can control the element's position inside the grid pane (i.e. replace GridPane.rowIndex=\"0\" etc.)\nI'll let you decide when too much is too much \ud83d\ude04", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420657299", "createdAt": "2020-05-06T09:27:21Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/resources/animate_images_with_image_overlay.fxml", "diffHunk": "@@ -25,34 +25,17 @@\n <?import javafx.scene.paint.Color?>\n <?import javafx.scene.control.Label?>\n <StackPane fx:controller=\"com.esri.samples.animate_images_with_image_overlay.AnimateImagesWithImageOverlayController\"\n-           xmlns:fx=\"http://javafx.com/fxml\" stylesheets=\"/style.css\">\n+           xmlns:fx=\"http://javafx.com/fxml\" stylesheets=\"/style.css\" styleClass=\"stack-pane\">\n     <SceneView fx:id=\"sceneView\"/>\n-    <VBox StackPane.alignment=\"BOTTOM_CENTER\" maxWidth=\"-Infinity\" maxHeight=\"50\" styleClass=\"panel-region\" alignment=\"TOP_CENTER\">\n+    <VBox StackPane.alignment=\"BOTTOM_CENTER\" styleClass=\"panel-region\" alignment=\"TOP_CENTER\">\n     <StackPane.margin>\n         <Insets bottom=\"20\"/>\n     </StackPane.margin>\n-    <padding>\n-        <Insets topRightBottomLeft=\"20\"/>\n-    </padding>\n-        <background>\n-            <Background>\n-                <fills>\n-                    <BackgroundFill>\n-                        <fill>\n-                            <Color opacity=\"0.3\"/>\n-                        </fill>\n-                    </BackgroundFill>\n-                </fills>\n-            </Background>\n-        </background>\n         <GridPane hgap=\"30\" vgap=\"10\" maxWidth=\"500\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f6b5cc05d12a37df18eeda9ca60e8435afbca2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3MTEyMg==", "bodyText": "ok, I've done what I can with the css! thanks for the helpful links.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420971122", "createdAt": "2020-05-06T17:37:53Z", "author": {"login": "Rachael-E"}, "path": "scene/animate-images-with-image-overlay/src/main/resources/animate_images_with_image_overlay.fxml", "diffHunk": "@@ -25,34 +25,17 @@\n <?import javafx.scene.paint.Color?>\n <?import javafx.scene.control.Label?>\n <StackPane fx:controller=\"com.esri.samples.animate_images_with_image_overlay.AnimateImagesWithImageOverlayController\"\n-           xmlns:fx=\"http://javafx.com/fxml\" stylesheets=\"/style.css\">\n+           xmlns:fx=\"http://javafx.com/fxml\" stylesheets=\"/style.css\" styleClass=\"stack-pane\">\n     <SceneView fx:id=\"sceneView\"/>\n-    <VBox StackPane.alignment=\"BOTTOM_CENTER\" maxWidth=\"-Infinity\" maxHeight=\"50\" styleClass=\"panel-region\" alignment=\"TOP_CENTER\">\n+    <VBox StackPane.alignment=\"BOTTOM_CENTER\" styleClass=\"panel-region\" alignment=\"TOP_CENTER\">\n     <StackPane.margin>\n         <Insets bottom=\"20\"/>\n     </StackPane.margin>\n-    <padding>\n-        <Insets topRightBottomLeft=\"20\"/>\n-    </padding>\n-        <background>\n-            <Background>\n-                <fills>\n-                    <BackgroundFill>\n-                        <fill>\n-                            <Color opacity=\"0.3\"/>\n-                        </fill>\n-                    </BackgroundFill>\n-                </fills>\n-            </Background>\n-        </background>\n         <GridPane hgap=\"30\" vgap=\"10\" maxWidth=\"500\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1NzI5OQ=="}, "originalCommit": {"oid": "99f6b5cc05d12a37df18eeda9ca60e8435afbca2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTA1OTk0OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/README.metadata.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzo0MjoxN1rOGXK-RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzo0MjoxN1rOGXK-RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1MDIxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"title\": \"Animate Images With Image Overlay\"\n          \n          \n            \n                \"title\": \"Animate Images with Image Overlay\"", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r426950212", "createdAt": "2020-05-18T23:42:17Z", "author": {"login": "tschie"}, "path": "scene/animate-images-with-image-overlay/README.metadata.json", "diffHunk": "@@ -0,0 +1,30 @@\n+{\n+    \"category\": \"Scene\",\n+    \"description\": \"Animate a series of images with an image overlay.\",\n+    \"ignore\": false,\n+    \"images\": [\n+        \"AnimateImageWithImageOverlay.gif\"\n+    ],\n+    \"keywords\": [\n+        \"3D\",\n+        \"animation\",\n+        \"drone\",\n+        \"dynamic\",\n+        \"image frame\",\n+        \"image overlay\",\n+        \"real time\",\n+        \"rendering\"\n+    ],\n+    \"redirect_from\": \"\",\n+    \"relevant_apis\": [\n+        \"ImageFrame\",\n+        \"ImageOverlay\",\n+        \"SceneView\"\n+    ],\n+    \"snippets\": [\n+        \"src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlaySample.java\",\n+      \"src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java\",\n+      \"src/main/resources/animate_images_with_image)overlay.fxml\"\n+    ],\n+    \"title\": \"Animate Images With Image Overlay\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTA2MTIyOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/README.metadata.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzo0Mjo1OVrOGXK_Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzo0Mjo1OVrOGXK_Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1MDQwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlaySample.java\",\n          \n          \n            \n                  \"src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlaySample.java\",", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r426950407", "createdAt": "2020-05-18T23:42:59Z", "author": {"login": "tschie"}, "path": "scene/animate-images-with-image-overlay/README.metadata.json", "diffHunk": "@@ -0,0 +1,30 @@\n+{\n+    \"category\": \"Scene\",\n+    \"description\": \"Animate a series of images with an image overlay.\",\n+    \"ignore\": false,\n+    \"images\": [\n+        \"AnimateImageWithImageOverlay.gif\"\n+    ],\n+    \"keywords\": [\n+        \"3D\",\n+        \"animation\",\n+        \"drone\",\n+        \"dynamic\",\n+        \"image frame\",\n+        \"image overlay\",\n+        \"real time\",\n+        \"rendering\"\n+    ],\n+    \"redirect_from\": \"\",\n+    \"relevant_apis\": [\n+        \"ImageFrame\",\n+        \"ImageOverlay\",\n+        \"SceneView\"\n+    ],\n+    \"snippets\": [\n+        \"src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlaySample.java\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTA2MzA1OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/README.metadata.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzo0NDowNFrOGXLAKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzo0NDowNFrOGXLAKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1MDY5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"src/main/resources/animate_images_with_image)overlay.fxml\"\n          \n          \n            \n                  \"src/main/resources/animate_images_with_image_overlay.fxml\"", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r426950698", "createdAt": "2020-05-18T23:44:04Z", "author": {"login": "tschie"}, "path": "scene/animate-images-with-image-overlay/README.metadata.json", "diffHunk": "@@ -0,0 +1,30 @@\n+{\n+    \"category\": \"Scene\",\n+    \"description\": \"Animate a series of images with an image overlay.\",\n+    \"ignore\": false,\n+    \"images\": [\n+        \"AnimateImageWithImageOverlay.gif\"\n+    ],\n+    \"keywords\": [\n+        \"3D\",\n+        \"animation\",\n+        \"drone\",\n+        \"dynamic\",\n+        \"image frame\",\n+        \"image overlay\",\n+        \"real time\",\n+        \"rendering\"\n+    ],\n+    \"redirect_from\": \"\",\n+    \"relevant_apis\": [\n+        \"ImageFrame\",\n+        \"ImageOverlay\",\n+        \"SceneView\"\n+    ],\n+    \"snippets\": [\n+        \"src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlaySample.java\",\n+      \"src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java\",\n+      \"src/main/resources/animate_images_with_image)overlay.fxml\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTExNzM2OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoxNDo0MlrOGXLhqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoxNToxNVrOGXLiPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1OTI3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // instantiate a new empty list to hold image frames\n          \n          \n            \n                  imageFrames = new ArrayList<>();\n          \n          \n            \n                  // get the image files from local storage as an unordered list\n          \n          \n            \n                  File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n          \n          \n            \n                  // sort the list of image files by file name in ascending order\n          \n          \n            \n                  if (imageFiles != null) {\n          \n          \n            \n                    Arrays.sort(imageFiles);\n          \n          \n            \n                    // create an image frame from the file path and add it to the list of image frames\n          \n          \n            \n                    for (File file : imageFiles) {\n          \n          \n            \n                      ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n          \n          \n            \n                      imageFrames.add(imageFrame);\n          \n          \n            \n                    }\n          \n          \n            \n                  }\n          \n          \n            \n                  \n          \n          \n            \n                  // get the image files from local storage as an unordered list\n          \n          \n            \n                  File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n          \n          \n            \n                  // sort the list of image files by file name in ascending order\n          \n          \n            \n                  if (imageFiles != null) {\n          \n          \n            \n                    imageFrames = Arrays.stream(imageFiles)\n          \n          \n            \n                            .sorted()\n          \n          \n            \n                            .map(f -> new ImageFrame(f.getAbsolutePath(), imageFrameEnvelope))\n          \n          \n            \n                            .collect(Collectors.toList());\n          \n          \n            \n                  }", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r426959272", "createdAt": "2020-05-19T00:14:42Z", "author": {"login": "tschie"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timer timer;\n+  private boolean isTimerRunning;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+      // set timer running tracker to true when sample loads\n+      isTimerRunning = true;\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image frame from the file path and add it to the list of image frames\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1OTQyMA==", "bodyText": "Should also handle the case of missing data with an alert.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r426959420", "createdAt": "2020-05-19T00:15:15Z", "author": {"login": "tschie"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timer timer;\n+  private boolean isTimerRunning;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+      // set timer running tracker to true when sample loads\n+      isTimerRunning = true;\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image frame from the file path and add it to the list of image frames\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1OTI3Mg=="}, "originalCommit": {"oid": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTEzOTYzOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoyNzozN1rOGXLvCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoyNzozN1rOGXLvCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MjY5OA==", "bodyText": "I think the Timeline API we use in other samples would work well here:\nanimation = new Timeline();\nanimation.setCycleCount(-1); // loop animation\nanimation.getKeyFrames().add(new KeyFrame(Duration.millis(Math.round(1000 / fps)), e -> {\n  imageOverlay.setImageFrame(imageFrames.get(frameIndex));\n  // update to the next frame\n  frameIndex = (frameIndex + 1) % imageFrames.size();\n}));\nYou only need to create it once when you create the frames and your start/stop button could then just do animation.play() and animation.pause().", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r426962698", "createdAt": "2020-05-19T00:27:37Z", "author": {"login": "tschie"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timer timer;\n+  private boolean isTimerRunning;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+      // set timer running tracker to true when sample loads\n+      isTimerRunning = true;\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image frame from the file path and add it to the list of image frames\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   */\n+  private void startNewAnimationTimer() {\n+\n+    timer = new Timer(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTE0MDMyOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoyODowMFrOGXLvfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoyODowMFrOGXLvfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MjgxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private void handleframesComboBoxInteraction() {\n          \n          \n            \n              private void handleFramesComboBoxInteraction() {", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r426962814", "createdAt": "2020-05-19T00:28:00Z", "author": {"login": "tschie"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timer timer;\n+  private boolean isTimerRunning;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+      // set timer running tracker to true when sample loads\n+      isTimerRunning = true;\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image frame from the file path and add it to the list of image frames\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   */\n+  private void startNewAnimationTimer() {\n+\n+    timer = new Timer(true);\n+    TimerTask timerTask = new TimerTask() {\n+      @Override\n+      public void run() {\n+        setNextImageFrameToImageOverlay();\n+      }\n+    };\n+    timer.scheduleAtFixedRate(timerTask, 1L, period);\n+  }\n+  \n+  /**\n+   * Sets the next image frame from the array of image frames to the image overlay.\n+   */\n+  private void setNextImageFrameToImageOverlay() {\n+\n+    // set image frame to image overlay\n+    imageOverlay.setImageFrame(imageFrames.get(frameIndex));\n+    // increment the index to keep track of which image to load next\n+    frameIndex++;\n+    // reset index once all files have been loaded\n+    if (frameIndex == imageFrames.size())\n+      frameIndex = 0;\n+  }\n+\n+  /**\n+   * Controls the opacity of the image overlay using the slider.\n+   */\n+  @FXML\n+  private void changeImageOverlayOpacity() {\n+    imageOverlay.setOpacity((float) opacitySlider.getValue());\n+  }\n+\n+  /**\n+   * Handles the rate at which the image frames are displayed using the combo box.\n+   */\n+  @FXML\n+  private void handleframesComboBoxInteraction() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTE0MDU3OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoyODoxMVrOGXLvpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoyODoxMVrOGXLvpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2Mjg1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private void handlecontrolAnimationButtonClicked() {\n          \n          \n            \n              private void handleControlAnimationButtonClicked() {", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r426962854", "createdAt": "2020-05-19T00:28:11Z", "author": {"login": "tschie"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timer timer;\n+  private boolean isTimerRunning;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+      // set timer running tracker to true when sample loads\n+      isTimerRunning = true;\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image frame from the file path and add it to the list of image frames\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   */\n+  private void startNewAnimationTimer() {\n+\n+    timer = new Timer(true);\n+    TimerTask timerTask = new TimerTask() {\n+      @Override\n+      public void run() {\n+        setNextImageFrameToImageOverlay();\n+      }\n+    };\n+    timer.scheduleAtFixedRate(timerTask, 1L, period);\n+  }\n+  \n+  /**\n+   * Sets the next image frame from the array of image frames to the image overlay.\n+   */\n+  private void setNextImageFrameToImageOverlay() {\n+\n+    // set image frame to image overlay\n+    imageOverlay.setImageFrame(imageFrames.get(frameIndex));\n+    // increment the index to keep track of which image to load next\n+    frameIndex++;\n+    // reset index once all files have been loaded\n+    if (frameIndex == imageFrames.size())\n+      frameIndex = 0;\n+  }\n+\n+  /**\n+   * Controls the opacity of the image overlay using the slider.\n+   */\n+  @FXML\n+  private void changeImageOverlayOpacity() {\n+    imageOverlay.setOpacity((float) opacitySlider.getValue());\n+  }\n+\n+  /**\n+   * Handles the rate at which the image frames are displayed using the combo box.\n+   */\n+  @FXML\n+  private void handleframesComboBoxInteraction() {\n+    // set the period for the chosen fps \n+    switch (framesComboBox.getSelectionModel().getSelectedItem()) {\n+      case \"60 frames per second\":\n+        period = 17; // 1000ms/17 = 60 fps\n+        break;\n+      case \"30 frames per second\":\n+        period = 33; // 1000ms/33 = 30 fps\n+        break;\n+      case \"15 frames per second\":\n+        period = 67; // 1000ms/67 = 15 fps\n+        break;\n+    }\n+\n+    if (isTimerRunning) {\n+      timer.cancel();\n+      startNewAnimationTimer();\n+    }\n+  }\n+\n+  /**\n+   * Stops/starts the animation of the image frames on the image overlay.\n+   */\n+  @FXML\n+  private void handlecontrolAnimationButtonClicked() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mjg5MTI2OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTowNToxN1rOGcUx_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOToyNDo0NFrOGdpctQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1Mzc4OQ==", "bodyText": "@Rachael-E regarding the performance aspect of this, have you tried holding on to an ArrayList<Image> and creating the ImageFrame ad-hoc, only when it needs to be displayed? There seems to be quite a difference in memory consumption between a collection of Image and ImageFrame, as other platforms are reporting", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r432353789", "createdAt": "2020-05-29T09:05:17Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timer timer;\n+  private boolean isTimerRunning;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+      // set timer running tracker to true when sample loads\n+      isTimerRunning = true;\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image frame from the file path and add it to the list of image frames\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzczNDE1Nw==", "bodyText": "thanks @JonLavi no haven't tried this: is this the agreed way forward from the samples team perspective? I've been out the loop :D just waiting on @tschie 2nd review and I can make changes then: I know we're already going to change the drop down text from \"xx fps\" to \"slow\" etc. If there's anything else to go in I'd be grateful to hear it!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r433734157", "createdAt": "2020-06-02T09:13:11Z", "author": {"login": "Rachael-E"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timer timer;\n+  private boolean isTimerRunning;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+      // set timer running tracker to true when sample loads\n+      isTimerRunning = true;\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image frame from the file path and add it to the list of image frames\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1Mzc4OQ=="}, "originalCommit": {"oid": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0MDk4MQ==", "bodyText": "There's no concensus as of yet for which way is to be chosen across all platforms. It looks like for some, an ArrayList<Image> provies a less smooth animation. I think it would be a matter of testing it out and seeing whether it runs smoothly still and consumes less memory. Hopefully the team can agree to add some info to the 'Additional Information' section of the Readme - it's still in PR.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r433740981", "createdAt": "2020-06-02T09:24:44Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timer timer;\n+  private boolean isTimerRunning;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+      // set timer running tracker to true when sample loads\n+      isTimerRunning = true;\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image frame from the file path and add it to the list of image frames\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1Mzc4OQ=="}, "originalCommit": {"oid": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTkyNzYxOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDo1NjozM1rOGssoVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTowMjowMFrOGsy6Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyMTc1MA==", "bodyText": "I'm surprised this can't be done with just frameIndex++. The modulo operation looks a bit funky \ud83d\ude04", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449521750", "createdAt": "2020-07-03T10:56:33Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -120,34 +115,22 @@ public void initialize() {\n   }\n \n   /**\n-   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   * Set up a timer to display the images at the specified speed from the combobox.\n    */\n   private void startNewAnimationTimer() {\n \n-    timer = new Timer(true);\n-    TimerTask timerTask = new TimerTask() {\n-      @Override\n-      public void run() {\n-        setNextImageFrameToImageOverlay();\n-      }\n-    };\n-    timer.scheduleAtFixedRate(timerTask, 1L, period);\n+    animation = new Timeline();\n+    animation.setCycleCount(-1); // loop animation\n+    animation.getKeyFrames().add(new KeyFrame(Duration.millis(period), e -> {\n+      // set image frame to image overlay\n+      imageOverlay.setImageFrame(imageFrames.get(frameIndex));\n+      // update to the next frame\n+      frameIndex = (frameIndex + 1) % imageFrames.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0df2753ff04d3b3a09387f0125f05dcfec13a18"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwOTY1Mw==", "bodyText": "this won't work because it would just count up infinitely: going beyond the total size of the array which is 240. The modulo here keeps the logic concise and neat, otherwise we'd have to do as I had before which adds more codelines:\n    frameIndex++;\t\n    // reset index once all files have been loaded\t\n    if (frameIndex == imageFrames.size())\t\n      frameIndex = 0;", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449609653", "createdAt": "2020-07-03T14:26:20Z", "author": {"login": "Rachael-E"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -120,34 +115,22 @@ public void initialize() {\n   }\n \n   /**\n-   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   * Set up a timer to display the images at the specified speed from the combobox.\n    */\n   private void startNewAnimationTimer() {\n \n-    timer = new Timer(true);\n-    TimerTask timerTask = new TimerTask() {\n-      @Override\n-      public void run() {\n-        setNextImageFrameToImageOverlay();\n-      }\n-    };\n-    timer.scheduleAtFixedRate(timerTask, 1L, period);\n+    animation = new Timeline();\n+    animation.setCycleCount(-1); // loop animation\n+    animation.getKeyFrames().add(new KeyFrame(Duration.millis(period), e -> {\n+      // set image frame to image overlay\n+      imageOverlay.setImageFrame(imageFrames.get(frameIndex));\n+      // update to the next frame\n+      frameIndex = (frameIndex + 1) % imageFrames.size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyMTc1MA=="}, "originalCommit": {"oid": "f0df2753ff04d3b3a09387f0125f05dcfec13a18"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYyNDU5NA==", "bodyText": "True, but at the cost of 2 extra lines of code and a comment, that is much more easy to comprehend", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449624594", "createdAt": "2020-07-03T15:02:00Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -120,34 +115,22 @@ public void initialize() {\n   }\n \n   /**\n-   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   * Set up a timer to display the images at the specified speed from the combobox.\n    */\n   private void startNewAnimationTimer() {\n \n-    timer = new Timer(true);\n-    TimerTask timerTask = new TimerTask() {\n-      @Override\n-      public void run() {\n-        setNextImageFrameToImageOverlay();\n-      }\n-    };\n-    timer.scheduleAtFixedRate(timerTask, 1L, period);\n+    animation = new Timeline();\n+    animation.setCycleCount(-1); // loop animation\n+    animation.getKeyFrames().add(new KeyFrame(Duration.millis(period), e -> {\n+      // set image frame to image overlay\n+      imageOverlay.setImageFrame(imageFrames.get(frameIndex));\n+      // update to the next frame\n+      frameIndex = (frameIndex + 1) % imageFrames.size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyMTc1MA=="}, "originalCommit": {"oid": "f0df2753ff04d3b3a09387f0125f05dcfec13a18"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTkzNDY4OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDo1OToxMVrOGssssg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDo1OToxMVrOGssssg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyMjg2Ng==", "bodyText": "We're technically now using the Timeline class so may need to find better wording for this?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449522866", "createdAt": "2020-07-03T10:59:11Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/README.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Animate images with image overlay\n+\n+Animate a series of images with an image overlay.\n+\n+![Image of animate images with image overlay](AnimateImagesWithImageOverlay.gif)\n+\n+## Use case\n+\n+An image overlay is useful for displaying fast and dynamic images; for example, rendering real-time sensor data captured from a drone. Each frame from the drone becomes a static image which is updated on the fly as the data is made available.\n+\n+## How to use the sample\n+\n+The application loads a map of the Southwestern United States. Click the \"Start/Stop\" button to start or stop the radar animation. Use the drop down menu to select how quickly the animation plays. Move the slider to change the opacity of the image overlay.\n+\n+## How it works\n+\n+1. Create an `ImageOverlay` and add it to the `SceneView`.\n+2. Set up a timer with an interval period.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "532c0c6fc3a9d311dfbd0875bf42b9f904849034"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTkzNTU4OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/README.metadata.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDo1OTozMVrOGsstRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDo1OTozMVrOGsstRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyMzAxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"AnimateImageWithImageOverlay.gif\"\n          \n          \n            \n                    \"AnimateImagesWithImageOverlay.gif\"", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449523012", "createdAt": "2020-07-03T10:59:31Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/README.metadata.json", "diffHunk": "@@ -0,0 +1,33 @@\n+{\n+    \"category\": \"Scene\",\n+    \"description\": \"Animate a series of images with an image overlay.\",\n+    \"ignore\": false,\n+    \"images\": [\n+        \"AnimateImageWithImageOverlay.gif\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "532c0c6fc3a9d311dfbd0875bf42b9f904849034"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTk2ODQ1OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMToxMjo1MFrOGstAzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDozMToyNVrOGsyIQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyODAxNQ==", "bodyText": "we should really have a default case in this switch, you could just put it on 'slow'?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449528015", "createdAt": "2020-07-03T11:12:50Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javafx.animation.Animation;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+import javafx.util.Duration;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timeline animation;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with speed descriptions\n+      framesComboBox.getItems().addAll(\"Fast\", \"Medium\", \"Slow\");\n+      // open the sample at slow speed\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        imageFrames = Arrays.stream(imageFiles)\n+          .sorted()\n+          .map(f -> new ImageFrame(f.getAbsolutePath(), imageFrameEnvelope))\n+          .collect(Collectors.toList());\n+      }\n+\n+      startNewAnimationTimeline();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Set up a timeline to display the images at the specified speed from the combobox.\n+   */\n+  private void startNewAnimationTimeline() {\n+\n+    animation = new Timeline();\n+    animation.setCycleCount(-1); // loop animation\n+    animation.getKeyFrames().add(new KeyFrame(Duration.millis(period), e -> {\n+      // set image frame to image overlay\n+      imageOverlay.setImageFrame(imageFrames.get(frameIndex));\n+      // update to the next frame\n+      frameIndex = (frameIndex + 1) % imageFrames.size();\n+    }));\n+    animation.play();\n+  }\n+  \n+  /**\n+   * Controls the opacity of the image overlay using the slider.\n+   */\n+  @FXML\n+  private void changeImageOverlayOpacity() {\n+    imageOverlay.setOpacity((float) opacitySlider.getValue());\n+  }\n+\n+  /**\n+   * Handles the rate at which the image frames are displayed using the combo box.\n+   */\n+  @FXML\n+  private void handleFramesComboBoxInteraction() {\n+    // set the period for the chosen frame display speed \n+    switch (framesComboBox.getSelectionModel().getSelectedItem()) {\n+      case \"Fast\":\n+        period = 17;\n+        break;\n+      case \"Medium\":\n+        period = 33;\n+        break;\n+      case \"Slow\":\n+        period = 67;\n+        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "532c0c6fc3a9d311dfbd0875bf42b9f904849034"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxMTg0MA==", "bodyText": "I think because there's no other way any other value can be chosen in the combobox, we don't need a default here: it can only be one of \"fast\", \"medium\" or \"slow\".  In the code at the beginning we select index 2 from the combo box, and don't set that to anything else in the code (it would throw an error if we tried to set it to something beyond that index).", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449611840", "createdAt": "2020-07-03T14:31:25Z", "author": {"login": "Rachael-E"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javafx.animation.Animation;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+import javafx.util.Duration;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timeline animation;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with speed descriptions\n+      framesComboBox.getItems().addAll(\"Fast\", \"Medium\", \"Slow\");\n+      // open the sample at slow speed\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        imageFrames = Arrays.stream(imageFiles)\n+          .sorted()\n+          .map(f -> new ImageFrame(f.getAbsolutePath(), imageFrameEnvelope))\n+          .collect(Collectors.toList());\n+      }\n+\n+      startNewAnimationTimeline();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Set up a timeline to display the images at the specified speed from the combobox.\n+   */\n+  private void startNewAnimationTimeline() {\n+\n+    animation = new Timeline();\n+    animation.setCycleCount(-1); // loop animation\n+    animation.getKeyFrames().add(new KeyFrame(Duration.millis(period), e -> {\n+      // set image frame to image overlay\n+      imageOverlay.setImageFrame(imageFrames.get(frameIndex));\n+      // update to the next frame\n+      frameIndex = (frameIndex + 1) % imageFrames.size();\n+    }));\n+    animation.play();\n+  }\n+  \n+  /**\n+   * Controls the opacity of the image overlay using the slider.\n+   */\n+  @FXML\n+  private void changeImageOverlayOpacity() {\n+    imageOverlay.setOpacity((float) opacitySlider.getValue());\n+  }\n+\n+  /**\n+   * Handles the rate at which the image frames are displayed using the combo box.\n+   */\n+  @FXML\n+  private void handleFramesComboBoxInteraction() {\n+    // set the period for the chosen frame display speed \n+    switch (framesComboBox.getSelectionModel().getSelectedItem()) {\n+      case \"Fast\":\n+        period = 17;\n+        break;\n+      case \"Medium\":\n+        period = 33;\n+        break;\n+      case \"Slow\":\n+        period = 67;\n+        break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyODAxNQ=="}, "originalCommit": {"oid": "532c0c6fc3a9d311dfbd0875bf42b9f904849034"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTk3MDQzOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMToxMzo0NlrOGstCJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMToxMzo0NlrOGstCJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyODM1OA==", "bodyText": "In theory this could be a local var. Are we worried about GC being a problem here?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449528358", "createdAt": "2020-07-03T11:13:46Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javafx.animation.Animation;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+import javafx.util.Duration;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "532c0c6fc3a9d311dfbd0875bf42b9f904849034"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTk3NjI0OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/resources/animate_images_with_image_overlay/style.css", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMToxNjowM1rOGstFmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMToxNjowM1rOGstFmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyOTI0MQ==", "bodyText": "lots of blank space here that can go", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449529241", "createdAt": "2020-07-03T11:16:03Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/resources/animate_images_with_image_overlay/style.css", "diffHunk": "@@ -0,0 +1,37 @@\n+StackPane {\n+    -fx-alignment: bottom-center\n+}\n+\n+VBox {\n+    -fx-background-color: rgba(0, 0, 0, 0.3);\n+    -fx-padding: 20;\n+    -fx-max-width: 300;\n+    -fx-max-height: 50;\n+    -fx-spacing: 10;\n+    -fx-alignment: top-center\n+}\n+\n+GridPane {\n+    -fx-hgap: 30;\n+    -fx-vgap: 10;\n+    -fx-padding: 10 0 0 10;\n+}\n+\n+Button {\n+    -fx-width: 500;\n+}\n+\n+Slider {\n+    -fx-show-tick-labels: true;\n+    -fx-major-tick-unit: 50;\n+} .axis {\n+    -fx-tick-label-fill: white;}\n+\n+Label {\n+    -fx-text-fill: white;\n+}\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "532c0c6fc3a9d311dfbd0875bf42b9f904849034"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTk3ODM1OnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/resources/animate_images_with_image_overlay/style.css", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMToxNjo0OVrOGstG2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMToxNjo0OVrOGstG2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyOTU2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            } .axis {\n          \n          \n            \n                -fx-tick-label-fill: white;}\n          \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n            .axis {\n          \n          \n            \n                -fx-tick-label-fill: white;\n          \n          \n            \n            }", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449529560", "createdAt": "2020-07-03T11:16:49Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/resources/animate_images_with_image_overlay/style.css", "diffHunk": "@@ -0,0 +1,37 @@\n+StackPane {\n+    -fx-alignment: bottom-center\n+}\n+\n+VBox {\n+    -fx-background-color: rgba(0, 0, 0, 0.3);\n+    -fx-padding: 20;\n+    -fx-max-width: 300;\n+    -fx-max-height: 50;\n+    -fx-spacing: 10;\n+    -fx-alignment: top-center\n+}\n+\n+GridPane {\n+    -fx-hgap: 30;\n+    -fx-vgap: 10;\n+    -fx-padding: 10 0 0 10;\n+}\n+\n+Button {\n+    -fx-width: 500;\n+}\n+\n+Slider {\n+    -fx-show-tick-labels: true;\n+    -fx-major-tick-unit: 50;\n+} .axis {\n+    -fx-tick-label-fill: white;}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "532c0c6fc3a9d311dfbd0875bf42b9f904849034"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTk4MDMzOnYy", "diffSide": "RIGHT", "path": "scene/animate-images-with-image-overlay/src/main/resources/animate_images_with_image_overlay/main.fxml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMToxNzozNlrOGstIDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMToxNzozNlrOGstIDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyOTg3MA==", "bodyText": "I think you can squeeze this parameter into the CSS as well", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449529870", "createdAt": "2020-07-03T11:17:36Z", "author": {"login": "JonLavi"}, "path": "scene/animate-images-with-image-overlay/src/main/resources/animate_images_with_image_overlay/main.fxml", "diffHunk": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Esri.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+  ~ use this file except in compliance with the License. You may obtain a copy of\n+  ~ the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+  ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+  ~ License for the specific language governing permissions and limitations under\n+  ~ the License.\n+  -->\n+\n+<?import javafx.scene.layout.*?>\n+\n+<?import com.esri.arcgisruntime.mapping.view.SceneView?>\n+<?import javafx.geometry.Insets?>\n+<?import javafx.scene.control.Slider?>\n+<?import javafx.scene.control.Button?>\n+<?import javafx.scene.control.ComboBox?>\n+<?import javafx.scene.control.Label?>\n+<StackPane fx:controller=\"com.esri.samples.animate_images_with_image_overlay.AnimateImagesWithImageOverlayController\"\n+           xmlns:fx=\"http://javafx.com/fxml\" stylesheets=\"/animate_images_with_image_overlay/style.css\">\n+    <SceneView fx:id=\"sceneView\"/>\n+    <VBox>\n+    <StackPane.margin>\n+        <Insets bottom=\"20\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "532c0c6fc3a9d311dfbd0875bf42b9f904849034"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 9, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}