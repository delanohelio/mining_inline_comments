{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyODI2MzM2", "number": 543, "reviewThreads": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1ODoxM1rOEVEHyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDowMDoyOVrOEhmaNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTIzMDgxOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1ODoxM1rOG7m9hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1ODoxM1rOG7m9hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1NzUxMA==", "bodyText": "Let's add a short description to this class, just for some context. An example based on some other classes extending dialog:\n/**\n * Custom dialog for editing feature attributes.\n */\n\nAlso, although it has no direct implications in the way we are using it, it would be more correct to define this as:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class EditAttributesDialog extends Dialog<String>{\n          \n          \n            \n            public class EditAttributesDialog extends Dialog<Feature>{\n          \n      \n    \n    \n  \n\nSince we are using this dialog to interact with a particular feature (as you have it in the constructor).", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r465157510", "createdAt": "2020-08-04T15:58:13Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.fxml.FXML;\n+import javafx.fxml.FXMLLoader;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.Dialog;\n+import javafx.scene.control.TextField;\n+\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+\n+public class EditAttributesDialog extends Dialog<String>{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTI1NTg0OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjowNDoxN1rOG7nNFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNTo1Nzo0MVrOHJL5mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2MTQ5Mw==", "bodyText": "We don't generally add the files directly from the source code, but set up the settings.gradle file to download these when the gradle run task is started. Check out this example:\nhttps://github.com/Esri/arcgis-runtime-samples-java/blob/master/editing/edit-and-sync-features/settings.gradle#L6-L16\nThere should be a link to the location of the file on ArcGIS Online (AGOL) in the sample's design.\nThe correct path for it would then be /resources/edit_features_with_feature_linked_annotation/<possibly some other folder>.\nWhereas the last folder might be the result of a folder within the archive coming from AGOL (or none!).", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r465161493", "createdAt": "2020-08-04T16:04:17Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationController.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.fxml.FXML;\n+import javafx.geometry.Point2D;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationController {\n+  @FXML private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @FXML private void initialize() {\n+\n+    try {\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // add a map to the map view\n+      mapView.setMap(map);\n+\n+      // create the geodatabase from the local .geodatabase file\n+      Geodatabase geodatabase = new Geodatabase(\"loudoun_anno.geodatabase\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5NDIwMQ==", "bodyText": "@JonLavi @sclaridge just to note the above path for storing samples data is incorrect!\n/resources/sample_name should be for UI/style files (.fxml/css) only. Any samples data needs to be stored in a samples-data directory. You can see this pattern in the edit and sync features sample that Jon referred to above.\ne.g. for your sample\n    ant.unzip(\n            src: file(\"./data.zip\"),\n            dest: file(\"./samples-data/loudon\")\n    )", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r479394201", "createdAt": "2020-08-28T15:57:41Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationController.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.fxml.FXML;\n+import javafx.geometry.Point2D;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationController {\n+  @FXML private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @FXML private void initialize() {\n+\n+    try {\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // add a map to the map view\n+      mapView.setMap(map);\n+\n+      // create the geodatabase from the local .geodatabase file\n+      Geodatabase geodatabase = new Geodatabase(\"loudoun_anno.geodatabase\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2MTQ5Mw=="}, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTI3MTM3OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjowODowNlrOG7nWkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjowODowNlrOG7nWkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2MzkyMQ==", "bodyText": "It's generally considered better to write\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (identifyLayerResults.size() > 0) {\n          \n          \n            \n                    if (!identifyLayerResults.size().isEmpty()) {", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r465163921", "createdAt": "2020-08-04T16:08:06Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationController.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.fxml.FXML;\n+import javafx.geometry.Point2D;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationController {\n+  @FXML private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @FXML private void initialize() {\n+\n+    try {\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // add a map to the map view\n+      mapView.setMap(map);\n+\n+      // create the geodatabase from the local .geodatabase file\n+      Geodatabase geodatabase = new Geodatabase(\"loudoun_anno.geodatabase\");\n+      geodatabase.addDoneLoadingListener(() -> {\n+        //load the geodatabase\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Select the nearest feature, or move the point or polyline vertex to the given screen point.\n+   */\n+  private void selectOrMove(Point2D screenPoint) {\n+\n+    // if a feature hasn't been selected, select the feature\n+    if (selectedFeature == null) {\n+      identifyFeature(screenPoint);\n+    } else {\n+      // convert the screen point to a map point\n+      Point mapPoint = mapView.screenToLocation(screenPoint);\n+      // if the feature is a polyline, move the polyline\n+      if (selectedFeatureIsPolyline) {\n+        movePolylineVertex(mapPoint);\n+      } else {\n+        // if the feature is a point, move the point\n+        movePoint(mapPoint);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Identify a feature near the given screen point.\n+   */\n+  private void identifyFeature(Point2D screenPoint) {\n+\n+    // clear any previously selected features\n+    clearSelection();\n+    selectedFeature = null;\n+\n+    // identify across all layers\n+    ListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 1, false);\n+    identifyLayerResultsFuture.addDoneListener(() -> {\n+      try {\n+        // get the list of results from the future\n+        List<IdentifyLayerResult> identifyLayerResults = identifyLayerResultsFuture.get();\n+        // if one or more results have been identified\n+        if (identifyLayerResults.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTI5NDA2OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoxMzoyMFrOG7nkdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoxMzoyMFrOG7nkdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2NzQ3OQ==", "bodyText": "Nice work on this, there's only a couple of things we could improve here.\nIn the first line, were technically creating a Future object, which we then unpack with .get() to get the actual 'edit result' from inside. So Let's call this object editResultFuture\nSince the lambda inside the DoneListener will only ever run if the future isDone(), there no need to check that again within the listener. You can just go ahead and do .get().\nLastly, we don't generally display the whole error message (i.e.  e.getCause().getMessage() in the alerts) but just show something in plain english, describing what may have gone wrong. So let's update that message\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ListenableFuture<Void> editResult = selectedFeature.getFeatureTable().updateFeatureAsync(selectedFeature);\n          \n          \n            \n                editResult.addDoneListener(() -> {\n          \n          \n            \n                          try {\n          \n          \n            \n                            if (editResult.isDone()) {\n          \n          \n            \n                              editResult.get();\n          \n          \n            \n                            }\n          \n          \n            \n                          } catch (InterruptedException | ExecutionException e) {\n          \n          \n            \n                            new Alert(Alert.AlertType.ERROR, \"Cannot update attributes: \" + e.getCause().getMessage()).show();\n          \n          \n            \n                          }\n          \n          \n            \n                        }\n          \n          \n            \n                );\n          \n          \n            \n                ListenableFuture<Void> editResultFuture = selectedFeature.getFeatureTable().updateFeatureAsync(selectedFeature);\n          \n          \n            \n                editResultFuture.addDoneListener(() -> {\n          \n          \n            \n                          try {\n          \n          \n            \n                            editResultFuture.get();\n          \n          \n            \n                          } catch (InterruptedException | ExecutionException e) {\n          \n          \n            \n                            new Alert(Alert.AlertType.ERROR, \"Error updating attributes.\").show();\n          \n          \n            \n                          }\n          \n          \n            \n                        }\n          \n          \n            \n                );", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r465167479", "createdAt": "2020-08-04T16:13:20Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationController.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.fxml.FXML;\n+import javafx.geometry.Point2D;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationController {\n+  @FXML private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @FXML private void initialize() {\n+\n+    try {\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // add a map to the map view\n+      mapView.setMap(map);\n+\n+      // create the geodatabase from the local .geodatabase file\n+      Geodatabase geodatabase = new Geodatabase(\"loudoun_anno.geodatabase\");\n+      geodatabase.addDoneLoadingListener(() -> {\n+        //load the geodatabase\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Select the nearest feature, or move the point or polyline vertex to the given screen point.\n+   */\n+  private void selectOrMove(Point2D screenPoint) {\n+\n+    // if a feature hasn't been selected, select the feature\n+    if (selectedFeature == null) {\n+      identifyFeature(screenPoint);\n+    } else {\n+      // convert the screen point to a map point\n+      Point mapPoint = mapView.screenToLocation(screenPoint);\n+      // if the feature is a polyline, move the polyline\n+      if (selectedFeatureIsPolyline) {\n+        movePolylineVertex(mapPoint);\n+      } else {\n+        // if the feature is a point, move the point\n+        movePoint(mapPoint);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Identify a feature near the given screen point.\n+   */\n+  private void identifyFeature(Point2D screenPoint) {\n+\n+    // clear any previously selected features\n+    clearSelection();\n+    selectedFeature = null;\n+\n+    // identify across all layers\n+    ListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 1, false);\n+    identifyLayerResultsFuture.addDoneListener(() -> {\n+      try {\n+        // get the list of results from the future\n+        List<IdentifyLayerResult> identifyLayerResults = identifyLayerResultsFuture.get();\n+        // if one or more results have been identified\n+        if (identifyLayerResults.size() > 0) {\n+          // retrieve the first result\n+          IdentifyLayerResult layerResult = identifyLayerResults.get(0);\n+          // check that the result is a feature layer, thereby excluding annotation layers\n+          if (layerResult.getLayerContent() instanceof FeatureLayer) {\n+            // get a reference to the identified feature\n+            selectedFeature = (Feature) layerResult.getElements().get(0);\n+            // check the geometry and select the feature\n+            selectFeature(layerResult);\n+          }\n+        }\n+      } catch (Exception e) {\n+        e.printStackTrace();\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Check if the identified feature is a straight polyline or a point, and select the feature.\n+   * For a point feature, show a dialog to edit attributes. Future clicks will call move functions.\n+   */\n+  private void selectFeature(IdentifyLayerResult layerResult) {\n+\n+    try {\n+      // if the selected feature is a polyline\n+      if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POLYLINE) {\n+        // create a polyline builder from the selected feature\n+        PolylineBuilder polylineBuilder = new PolylineBuilder((Polyline) selectedFeature.getGeometry());\n+        // get a list of parts of the selected polyline\n+        List<Part> parts = polylineBuilder.getParts();\n+        parts.forEach(part -> {\n+          // if the selected feature is a polyline with any part containing more than one segment\n+          // (i.e. a curve)\n+          if (part.getPointCount() > 2) {\n+            selectedFeature = null;\n+            // show message reminding user to select straight (single segment) polylines only\n+            new Alert(Alert.AlertType.WARNING, \"Select straight (single segment) polylines only.\").show();\n+            // return early, effectively disallowing selection of multi segmented polylines\n+            return;\n+          } else {\n+            // select the polyline feature\n+            ((FeatureLayer) layerResult.getLayerContent()).selectFeature(selectedFeature);\n+            selectedFeatureIsPolyline = true;\n+          }\n+        });\n+      }\n+      // if the selected feature is a point, select the feature\n+      else if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POINT) {\n+        ((FeatureLayer) layerResult.getLayerContent()).selectFeature(selectedFeature);\n+        // open a dialog to edit the feature's attributes\n+        showEditableAttributes(selectedFeature);\n+      } else {\n+        new Alert(Alert.AlertType.WARNING, \"Feature of unexpected geometry type selected.\").show();\n+      }\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a dialog with text fields to allow editing of the given feature's 'AD_ADDRESS' and\n+   * 'ST_STR_NAM' attributes.\n+   */\n+  private void showEditableAttributes(Feature selectedFeature) {\n+\n+    // create a dialog to edit the attributes of the selected feature\n+    EditAttributesDialog editAttributesDialog = new EditAttributesDialog(selectedFeature);\n+\n+    // show the dialog and wait for the user response\n+    editAttributesDialog.showAndWait();\n+  }\n+\n+  /**\n+   * Update the attributes of the selected feature.\n+   */\n+  private void updateAttributes(Feature selectedFeature) {\n+\n+    // update feature in the feature table\n+    ListenableFuture<Void> editResult = selectedFeature.getFeatureTable().updateFeatureAsync(selectedFeature);\n+    editResult.addDoneListener(() -> {\n+              try {\n+                if (editResult.isDone()) {\n+                  editResult.get();\n+                }\n+              } catch (InterruptedException | ExecutionException e) {\n+                new Alert(Alert.AlertType.ERROR, \"Cannot update attributes: \" + e.getCause().getMessage()).show();\n+              }\n+            }\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTMxNTc5OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoxODoyNVrOG7nxqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoxODoyNVrOG7nxqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MDg1OA==", "bodyText": "For your methods, it's common practice to put @param descriptions of the parameters in the JavaDoc above method descriptions.\nIntellij Top tip: you can auto-generate a template by writing /** in the line above a method signature, then hitting return. All you'll have to do is then fill in the descriptions. The rest of your methods would need updating as well.\nI think they should also be written in active voice, e.g. Creates/Moves, etc. But not 100% sure.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r465170858", "createdAt": "2020-08-04T16:18:25Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationController.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.fxml.FXML;\n+import javafx.geometry.Point2D;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationController {\n+  @FXML private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @FXML private void initialize() {\n+\n+    try {\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // add a map to the map view\n+      mapView.setMap(map);\n+\n+      // create the geodatabase from the local .geodatabase file\n+      Geodatabase geodatabase = new Geodatabase(\"loudoun_anno.geodatabase\");\n+      geodatabase.addDoneLoadingListener(() -> {\n+        //load the geodatabase\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Select the nearest feature, or move the point or polyline vertex to the given screen point.\n+   */\n+  private void selectOrMove(Point2D screenPoint) {\n+\n+    // if a feature hasn't been selected, select the feature\n+    if (selectedFeature == null) {\n+      identifyFeature(screenPoint);\n+    } else {\n+      // convert the screen point to a map point\n+      Point mapPoint = mapView.screenToLocation(screenPoint);\n+      // if the feature is a polyline, move the polyline\n+      if (selectedFeatureIsPolyline) {\n+        movePolylineVertex(mapPoint);\n+      } else {\n+        // if the feature is a point, move the point\n+        movePoint(mapPoint);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Identify a feature near the given screen point.\n+   */\n+  private void identifyFeature(Point2D screenPoint) {\n+\n+    // clear any previously selected features\n+    clearSelection();\n+    selectedFeature = null;\n+\n+    // identify across all layers\n+    ListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 1, false);\n+    identifyLayerResultsFuture.addDoneListener(() -> {\n+      try {\n+        // get the list of results from the future\n+        List<IdentifyLayerResult> identifyLayerResults = identifyLayerResultsFuture.get();\n+        // if one or more results have been identified\n+        if (identifyLayerResults.size() > 0) {\n+          // retrieve the first result\n+          IdentifyLayerResult layerResult = identifyLayerResults.get(0);\n+          // check that the result is a feature layer, thereby excluding annotation layers\n+          if (layerResult.getLayerContent() instanceof FeatureLayer) {\n+            // get a reference to the identified feature\n+            selectedFeature = (Feature) layerResult.getElements().get(0);\n+            // check the geometry and select the feature\n+            selectFeature(layerResult);\n+          }\n+        }\n+      } catch (Exception e) {\n+        e.printStackTrace();\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Check if the identified feature is a straight polyline or a point, and select the feature.\n+   * For a point feature, show a dialog to edit attributes. Future clicks will call move functions.\n+   */\n+  private void selectFeature(IdentifyLayerResult layerResult) {\n+\n+    try {\n+      // if the selected feature is a polyline\n+      if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POLYLINE) {\n+        // create a polyline builder from the selected feature\n+        PolylineBuilder polylineBuilder = new PolylineBuilder((Polyline) selectedFeature.getGeometry());\n+        // get a list of parts of the selected polyline\n+        List<Part> parts = polylineBuilder.getParts();\n+        parts.forEach(part -> {\n+          // if the selected feature is a polyline with any part containing more than one segment\n+          // (i.e. a curve)\n+          if (part.getPointCount() > 2) {\n+            selectedFeature = null;\n+            // show message reminding user to select straight (single segment) polylines only\n+            new Alert(Alert.AlertType.WARNING, \"Select straight (single segment) polylines only.\").show();\n+            // return early, effectively disallowing selection of multi segmented polylines\n+            return;\n+          } else {\n+            // select the polyline feature\n+            ((FeatureLayer) layerResult.getLayerContent()).selectFeature(selectedFeature);\n+            selectedFeatureIsPolyline = true;\n+          }\n+        });\n+      }\n+      // if the selected feature is a point, select the feature\n+      else if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POINT) {\n+        ((FeatureLayer) layerResult.getLayerContent()).selectFeature(selectedFeature);\n+        // open a dialog to edit the feature's attributes\n+        showEditableAttributes(selectedFeature);\n+      } else {\n+        new Alert(Alert.AlertType.WARNING, \"Feature of unexpected geometry type selected.\").show();\n+      }\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a dialog with text fields to allow editing of the given feature's 'AD_ADDRESS' and\n+   * 'ST_STR_NAM' attributes.\n+   */\n+  private void showEditableAttributes(Feature selectedFeature) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTM1NDA5OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/resources/edit_features_with_feature_linked_annotation/main.fxml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoyNzo1MVrOG7oJLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoyNzo1MVrOG7oJLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3Njg3Nw==", "bodyText": "This FXML file doesn't really do much, and considering the main reason we use FXML is to refactor away some of the UI styling, I would personally say we could get rid of this one, and simply move all the code from the controller class to the sample class. We should keep the FXML file for the editing dialog, however, because that does do quite a bit of work - that's where all the refactoring gains are for the UI styling.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r465176877", "createdAt": "2020-08-04T16:27:51Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/resources/edit_features_with_feature_linked_annotation/main.fxml", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Esri.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+  ~ use this file except in compliance with the License. You may obtain a copy of\n+  ~ the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+  ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+  ~ License for the specific language governing permissions and limitations under\n+  ~ the License.\n+  -->\n+\n+<?import com.esri.arcgisruntime.mapping.view.MapView?>\n+<?import javafx.scene.layout.StackPane?>\n+<StackPane fx:controller=\"com.esri.samples.edit_features_with_feature_linked_annotation.EditFeaturesWithFeatureLinkedAnnotationController\"\n+           xmlns:fx=\"http://javafx.com/fxml\">\n+    <MapView fx:id=\"mapView\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTQwMTk2OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjo0MDoyNFrOG7onNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjo0MDoyNFrOG7onNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4NDU2NQ==", "bodyText": "I think JavaFX 11.0.2 is the newest version, so we should update that here", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r465184565", "createdAt": "2020-08-04T16:40:24Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/build.gradle", "diffHunk": "@@ -0,0 +1,74 @@\n+plugins {\n+    id 'application'\n+    id 'org.openjfx.javafxplugin' version '0.0.5'\n+}\n+\n+group = 'com.esri.samples'\n+\n+ext {\n+    arcgisVersion = '100.9.0-2852'\n+}\n+\n+javafx {\n+    version = \"11.0.1\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTQwOTQwOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjo0MjoyM1rOG7or5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNjoyNDozOVrOG-WHDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4NTc2Ng==", "bodyText": "I think we need to put the remaining code (line 50 onwards) inside this try statements, since if we fail to load the fxml loader, we won't want to execute any of the other code, as we don't have access to any of these FXML defined javafx objects.\nIt seems like our other samples don't do this though, so let's do some research on this which is the correct pattern!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r465185766", "createdAt": "2020-08-04T16:42:23Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.fxml.FXML;\n+import javafx.fxml.FXMLLoader;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.Dialog;\n+import javafx.scene.control.TextField;\n+\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+\n+public class EditAttributesDialog extends Dialog<String>{\n+\n+  @FXML private TextField addressTextField;\n+  @FXML private TextField streetNameTextField;\n+  @FXML private ButtonType continueButton;\n+\n+  EditAttributesDialog(Feature selectedFeature){\n+    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/edit_features_with_feature_linked_annotation/edit_attributes_dialog.fxml\"));\n+    loader.setRoot(this);\n+    loader.setController(this);\n+\n+    setTitle(\"Edit Feature Attributes\");\n+\n+    try {\n+      loader.load();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwNzc1Ng==", "bodyText": "If I put the remaining code inside the try statement, when the loader fails, the rest of the code doesn't execute, but the code that executes after instantiating the dialog in showEditableAttributes() creates an empty dialog:\n\nHowever, if I remove the try catch entirely and have EditAttributesDialog throw the Exception, it can be handled in showEditableAttributes():\ntry {\n      // create a dialog to edit the attributes of the selected feature\n      EditAttributesDialog editAttributesDialog = new EditAttributesDialog(selectedFeature);\n\n      // show the dialog and wait for the user response\n      editAttributesDialog.showAndWait();\n\n      // update the selected feature's feature table\n      updateAttributes(selectedFeature);\n    } catch (Exception e) {\n      new Alert(Alert.AlertType.ERROR, \"Error: \" + e).show();\n    }", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r468007756", "createdAt": "2020-08-10T15:53:07Z", "author": {"login": "sclaridge"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.fxml.FXML;\n+import javafx.fxml.FXMLLoader;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.Dialog;\n+import javafx.scene.control.TextField;\n+\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+\n+public class EditAttributesDialog extends Dialog<String>{\n+\n+  @FXML private TextField addressTextField;\n+  @FXML private TextField streetNameTextField;\n+  @FXML private ButtonType continueButton;\n+\n+  EditAttributesDialog(Feature selectedFeature){\n+    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/edit_features_with_feature_linked_annotation/edit_attributes_dialog.fxml\"));\n+    loader.setRoot(this);\n+    loader.setController(this);\n+\n+    setTitle(\"Edit Feature Attributes\");\n+\n+    try {\n+      loader.load();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4NTc2Ng=="}, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAyNzE1MQ==", "bodyText": "Good spot on these!\n\nHowever, if I remove the try catch entirely and have EditAttributesDialog throw the Exception, it can be handled in showEditableAttributes():\n\nI don't think it's a good idea to handle the exceptions in a different method, at least in the context of a sample. Best we keep the complexity to a minimum there.\nSo, looks like what you had originally was correct. Let's just leave it as is then \ud83d\udc4d", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r468027151", "createdAt": "2020-08-10T16:24:39Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.fxml.FXML;\n+import javafx.fxml.FXMLLoader;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.Dialog;\n+import javafx.scene.control.TextField;\n+\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+\n+public class EditAttributesDialog extends Dialog<String>{\n+\n+  @FXML private TextField addressTextField;\n+  @FXML private TextField streetNameTextField;\n+  @FXML private ButtonType continueButton;\n+\n+  EditAttributesDialog(Feature selectedFeature){\n+    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/edit_features_with_feature_linked_annotation/edit_attributes_dialog.fxml\"));\n+    loader.setRoot(this);\n+    loader.setController(this);\n+\n+    setTitle(\"Edit Feature Attributes\");\n+\n+    try {\n+      loader.load();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4NTc2Ng=="}, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTQ2MDE2OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjo1NTozOFrOG7pLWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1NDoyOFrOG7-apg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE5MzgxOQ==", "bodyText": "This code looks like a repetition of the method\nprivate void updateAttributes(Feature selectedFeature)\n\nin the controller class.\nNot too sure if it's good practice, but you could modify the signature to:\nstatic void updateAttributes(Feature selectedFeature)\n\nBy leaving out private and making it static, it would be 'protected', meaning available to this dialog class, and it being 'static' would allow you to import it into this file as a static import:\nimport static com.esri.samples.edit_features_with_feature_linked_annotation.EditFeaturesWithFeatureLinkedAnnotationController.updateAttributes;\n\nAnd then you could replace the whole ListenableFuture block here with simply:\n          // update feature in the feature table\n          updateAttributes(selectedFeature);\n\nLike I said, not sure whether this is good practice.\n@colinanderson could you advise whether this is considered SOLID?\nBut before you go through the effort of doing this, I suppose we'd need @Rachael-E 's input whether this is user-friendly enough...", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r465193819", "createdAt": "2020-08-04T16:55:38Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.fxml.FXML;\n+import javafx.fxml.FXMLLoader;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.Dialog;\n+import javafx.scene.control.TextField;\n+\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+\n+public class EditAttributesDialog extends Dialog<String>{\n+\n+  @FXML private TextField addressTextField;\n+  @FXML private TextField streetNameTextField;\n+  @FXML private ButtonType continueButton;\n+\n+  EditAttributesDialog(Feature selectedFeature){\n+    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/edit_features_with_feature_linked_annotation/edit_attributes_dialog.fxml\"));\n+    loader.setRoot(this);\n+    loader.setController(this);\n+\n+    setTitle(\"Edit Feature Attributes\");\n+\n+    try {\n+      loader.load();\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+\n+    // populate text fields with current attribute values\n+    addressTextField.setText(selectedFeature.getAttributes().get(\"AD_ADDRESS\").toString());\n+    streetNameTextField.setText(selectedFeature.getAttributes().get(\"ST_STR_NAM\").toString());\n+\n+    // convert the result to an address and street name when the ok button is clicked.\n+    setResultConverter(dialogButton -> {\n+      if (dialogButton == continueButton) {\n+        try {\n+          // set AD_ADDRESS value to the int from the text field\n+          selectedFeature.getAttributes().put(\"AD_ADDRESS\", Integer.parseInt(addressTextField.getText()));\n+\n+          // set ST_STR_NAM value to the string from the text field\n+          selectedFeature.getAttributes().put(\"ST_STR_NAM\", streetNameTextField.getText());\n+\n+          // update feature in the feature table\n+          ListenableFuture<Void> editResult = selectedFeature.getFeatureTable().updateFeatureAsync(selectedFeature);\n+          editResult.addDoneListener(() -> {\n+                    try {\n+                      if (editResult.isDone()) {\n+                        editResult.get();\n+                      }\n+                    } catch (InterruptedException | ExecutionException e) {\n+                      new Alert(Alert.AlertType.ERROR, \"Cannot update attributes: \" + e.getCause().getMessage()).show();\n+                    }\n+                  }\n+          );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTc5OA==", "bodyText": "As I mentioned in the comment on your questions, we also have the possibility to have the Dialog return the data to edit back to the main Controller class, and then do the updateFeatureAsync call back in there. In hindsight that might actually be the better way forward. Then we'd abstract away the data input through the UI, but keep the Runtime API call to updateFeatureAsync within the main class.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r465541798", "createdAt": "2020-08-05T07:54:28Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.fxml.FXML;\n+import javafx.fxml.FXMLLoader;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.Dialog;\n+import javafx.scene.control.TextField;\n+\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+\n+public class EditAttributesDialog extends Dialog<String>{\n+\n+  @FXML private TextField addressTextField;\n+  @FXML private TextField streetNameTextField;\n+  @FXML private ButtonType continueButton;\n+\n+  EditAttributesDialog(Feature selectedFeature){\n+    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/edit_features_with_feature_linked_annotation/edit_attributes_dialog.fxml\"));\n+    loader.setRoot(this);\n+    loader.setController(this);\n+\n+    setTitle(\"Edit Feature Attributes\");\n+\n+    try {\n+      loader.load();\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+\n+    // populate text fields with current attribute values\n+    addressTextField.setText(selectedFeature.getAttributes().get(\"AD_ADDRESS\").toString());\n+    streetNameTextField.setText(selectedFeature.getAttributes().get(\"ST_STR_NAM\").toString());\n+\n+    // convert the result to an address and street name when the ok button is clicked.\n+    setResultConverter(dialogButton -> {\n+      if (dialogButton == continueButton) {\n+        try {\n+          // set AD_ADDRESS value to the int from the text field\n+          selectedFeature.getAttributes().put(\"AD_ADDRESS\", Integer.parseInt(addressTextField.getText()));\n+\n+          // set ST_STR_NAM value to the string from the text field\n+          selectedFeature.getAttributes().put(\"ST_STR_NAM\", streetNameTextField.getText());\n+\n+          // update feature in the feature table\n+          ListenableFuture<Void> editResult = selectedFeature.getFeatureTable().updateFeatureAsync(selectedFeature);\n+          editResult.addDoneListener(() -> {\n+                    try {\n+                      if (editResult.isDone()) {\n+                        editResult.get();\n+                      }\n+                    } catch (InterruptedException | ExecutionException e) {\n+                      new Alert(Alert.AlertType.ERROR, \"Cannot update attributes: \" + e.getCause().getMessage()).show();\n+                    }\n+                  }\n+          );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE5MzgxOQ=="}, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzYyODE3OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoyODozNFrOG79lkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoyODozNFrOG79lkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODIxMA==", "bodyText": "Looks like every time we call clearSelection(), we also do selectedFeature = null. So it would be possible to put that statement in the method as well.\nWe could also pop the statement selectedFeatureIsPolyline = false; in the method as well, although it's not necessary to set that boolean every time.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r465528210", "createdAt": "2020-08-05T07:28:34Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationController.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.fxml.FXML;\n+import javafx.geometry.Point2D;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationController {\n+  @FXML private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @FXML private void initialize() {\n+\n+    try {\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // add a map to the map view\n+      mapView.setMap(map);\n+\n+      // create the geodatabase from the local .geodatabase file\n+      Geodatabase geodatabase = new Geodatabase(\"loudoun_anno.geodatabase\");\n+      geodatabase.addDoneLoadingListener(() -> {\n+        //load the geodatabase\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Select the nearest feature, or move the point or polyline vertex to the given screen point.\n+   */\n+  private void selectOrMove(Point2D screenPoint) {\n+\n+    // if a feature hasn't been selected, select the feature\n+    if (selectedFeature == null) {\n+      identifyFeature(screenPoint);\n+    } else {\n+      // convert the screen point to a map point\n+      Point mapPoint = mapView.screenToLocation(screenPoint);\n+      // if the feature is a polyline, move the polyline\n+      if (selectedFeatureIsPolyline) {\n+        movePolylineVertex(mapPoint);\n+      } else {\n+        // if the feature is a point, move the point\n+        movePoint(mapPoint);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Identify a feature near the given screen point.\n+   */\n+  private void identifyFeature(Point2D screenPoint) {\n+\n+    // clear any previously selected features\n+    clearSelection();\n+    selectedFeature = null;\n+\n+    // identify across all layers\n+    ListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 1, false);\n+    identifyLayerResultsFuture.addDoneListener(() -> {\n+      try {\n+        // get the list of results from the future\n+        List<IdentifyLayerResult> identifyLayerResults = identifyLayerResultsFuture.get();\n+        // if one or more results have been identified\n+        if (identifyLayerResults.size() > 0) {\n+          // retrieve the first result\n+          IdentifyLayerResult layerResult = identifyLayerResults.get(0);\n+          // check that the result is a feature layer, thereby excluding annotation layers\n+          if (layerResult.getLayerContent() instanceof FeatureLayer) {\n+            // get a reference to the identified feature\n+            selectedFeature = (Feature) layerResult.getElements().get(0);\n+            // check the geometry and select the feature\n+            selectFeature(layerResult);\n+          }\n+        }\n+      } catch (Exception e) {\n+        e.printStackTrace();\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Check if the identified feature is a straight polyline or a point, and select the feature.\n+   * For a point feature, show a dialog to edit attributes. Future clicks will call move functions.\n+   */\n+  private void selectFeature(IdentifyLayerResult layerResult) {\n+\n+    try {\n+      // if the selected feature is a polyline\n+      if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POLYLINE) {\n+        // create a polyline builder from the selected feature\n+        PolylineBuilder polylineBuilder = new PolylineBuilder((Polyline) selectedFeature.getGeometry());\n+        // get a list of parts of the selected polyline\n+        List<Part> parts = polylineBuilder.getParts();\n+        parts.forEach(part -> {\n+          // if the selected feature is a polyline with any part containing more than one segment\n+          // (i.e. a curve)\n+          if (part.getPointCount() > 2) {\n+            selectedFeature = null;\n+            // show message reminding user to select straight (single segment) polylines only\n+            new Alert(Alert.AlertType.WARNING, \"Select straight (single segment) polylines only.\").show();\n+            // return early, effectively disallowing selection of multi segmented polylines\n+            return;\n+          } else {\n+            // select the polyline feature\n+            ((FeatureLayer) layerResult.getLayerContent()).selectFeature(selectedFeature);\n+            selectedFeatureIsPolyline = true;\n+          }\n+        });\n+      }\n+      // if the selected feature is a point, select the feature\n+      else if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POINT) {\n+        ((FeatureLayer) layerResult.getLayerContent()).selectFeature(selectedFeature);\n+        // open a dialog to edit the feature's attributes\n+        showEditableAttributes(selectedFeature);\n+      } else {\n+        new Alert(Alert.AlertType.WARNING, \"Feature of unexpected geometry type selected.\").show();\n+      }\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a dialog with text fields to allow editing of the given feature's 'AD_ADDRESS' and\n+   * 'ST_STR_NAM' attributes.\n+   */\n+  private void showEditableAttributes(Feature selectedFeature) {\n+\n+    // create a dialog to edit the attributes of the selected feature\n+    EditAttributesDialog editAttributesDialog = new EditAttributesDialog(selectedFeature);\n+\n+    // show the dialog and wait for the user response\n+    editAttributesDialog.showAndWait();\n+  }\n+\n+  /**\n+   * Update the attributes of the selected feature.\n+   */\n+  private void updateAttributes(Feature selectedFeature) {\n+\n+    // update feature in the feature table\n+    ListenableFuture<Void> editResult = selectedFeature.getFeatureTable().updateFeatureAsync(selectedFeature);\n+    editResult.addDoneListener(() -> {\n+              try {\n+                if (editResult.isDone()) {\n+                  editResult.get();\n+                }\n+              } catch (InterruptedException | ExecutionException e) {\n+                new Alert(Alert.AlertType.ERROR, \"Cannot update attributes: \" + e.getCause().getMessage()).show();\n+              }\n+            }\n+    );\n+  }\n+\n+  /**\n+   * Move the selected point feature to the given map point by updating the selected\n+   * feature's geometry and feature table.\n+   */\n+  private void movePoint(Point mapPoint) {\n+\n+    // set the selected features' geometry to a new map point\n+    selectedFeature.setGeometry(mapPoint);\n+\n+    // update the selected feature's feature table\n+    updateAttributes(selectedFeature);\n+\n+    // clear selection of the point\n+    clearSelection();\n+    selectedFeature = null;\n+  }\n+\n+  /**\n+   * Move the last of the vertex point of the currently selected polyline to the given map point by updating the\n+   * selected feature's geometry and feature table.\n+   */\n+  private void movePolylineVertex(Point mapPoint) {\n+\n+    // get the selected feature's geometry as a polyline\n+    Polyline polyline = (Polyline) selectedFeature.getGeometry();\n+\n+    // create a polyline builder to add and remove parts from the polyline\n+    PolylineBuilder polylineBuilder = new PolylineBuilder(polyline);\n+\n+    // get the nearest vertex to the map point on the polyline\n+    ProximityResult nearestVertex = GeometryEngine.nearestVertex(polyline, (Point) GeometryEngine.project(mapPoint, polyline.getSpatialReference()));\n+\n+    // get the part of the polyline nearest to the map point\n+    Part part = polylineBuilder.getParts().get((int) nearestVertex.getPartIndex());\n+\n+    // remove the nearest point to the map point from the part\n+    part.removePoint((int) nearestVertex.getPointIndex());\n+\n+    // add the map point as the new point on the part\n+    part.addPoint((Point) GeometryEngine.project(mapPoint, polyline.getSpatialReference()));\n+\n+    // add the part to the polyline\n+    polylineBuilder.getParts().add(part);\n+\n+    // set the selected feature's geometry to the new polyline\n+    selectedFeature.setGeometry(polylineBuilder.toGeometry());\n+\n+    // update the selected feature's feature table\n+    updateAttributes(selectedFeature);\n+\n+    // clear selection of the polyline\n+    clearSelection();\n+    selectedFeatureIsPolyline = false;\n+    selectedFeature = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 286}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzYzNDA0OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzozMDoxOFrOG79pFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzozMDoxOFrOG79pFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyOTEwOA==", "bodyText": "This is a really long line, so let's just break it down for readability:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ProximityResult nearestVertex = GeometryEngine.nearestVertex(polyline, (Point) GeometryEngine.project(mapPoint, polyline.getSpatialReference()));\n          \n          \n            \n                ProximityResult nearestVertex =\n          \n          \n            \n                        GeometryEngine.nearestVertex(polyline, (Point) GeometryEngine.project(mapPoint, polyline.getSpatialReference()));", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r465529108", "createdAt": "2020-08-05T07:30:18Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationController.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.fxml.FXML;\n+import javafx.geometry.Point2D;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationController {\n+  @FXML private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @FXML private void initialize() {\n+\n+    try {\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // add a map to the map view\n+      mapView.setMap(map);\n+\n+      // create the geodatabase from the local .geodatabase file\n+      Geodatabase geodatabase = new Geodatabase(\"loudoun_anno.geodatabase\");\n+      geodatabase.addDoneLoadingListener(() -> {\n+        //load the geodatabase\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Select the nearest feature, or move the point or polyline vertex to the given screen point.\n+   */\n+  private void selectOrMove(Point2D screenPoint) {\n+\n+    // if a feature hasn't been selected, select the feature\n+    if (selectedFeature == null) {\n+      identifyFeature(screenPoint);\n+    } else {\n+      // convert the screen point to a map point\n+      Point mapPoint = mapView.screenToLocation(screenPoint);\n+      // if the feature is a polyline, move the polyline\n+      if (selectedFeatureIsPolyline) {\n+        movePolylineVertex(mapPoint);\n+      } else {\n+        // if the feature is a point, move the point\n+        movePoint(mapPoint);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Identify a feature near the given screen point.\n+   */\n+  private void identifyFeature(Point2D screenPoint) {\n+\n+    // clear any previously selected features\n+    clearSelection();\n+    selectedFeature = null;\n+\n+    // identify across all layers\n+    ListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 1, false);\n+    identifyLayerResultsFuture.addDoneListener(() -> {\n+      try {\n+        // get the list of results from the future\n+        List<IdentifyLayerResult> identifyLayerResults = identifyLayerResultsFuture.get();\n+        // if one or more results have been identified\n+        if (identifyLayerResults.size() > 0) {\n+          // retrieve the first result\n+          IdentifyLayerResult layerResult = identifyLayerResults.get(0);\n+          // check that the result is a feature layer, thereby excluding annotation layers\n+          if (layerResult.getLayerContent() instanceof FeatureLayer) {\n+            // get a reference to the identified feature\n+            selectedFeature = (Feature) layerResult.getElements().get(0);\n+            // check the geometry and select the feature\n+            selectFeature(layerResult);\n+          }\n+        }\n+      } catch (Exception e) {\n+        e.printStackTrace();\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Check if the identified feature is a straight polyline or a point, and select the feature.\n+   * For a point feature, show a dialog to edit attributes. Future clicks will call move functions.\n+   */\n+  private void selectFeature(IdentifyLayerResult layerResult) {\n+\n+    try {\n+      // if the selected feature is a polyline\n+      if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POLYLINE) {\n+        // create a polyline builder from the selected feature\n+        PolylineBuilder polylineBuilder = new PolylineBuilder((Polyline) selectedFeature.getGeometry());\n+        // get a list of parts of the selected polyline\n+        List<Part> parts = polylineBuilder.getParts();\n+        parts.forEach(part -> {\n+          // if the selected feature is a polyline with any part containing more than one segment\n+          // (i.e. a curve)\n+          if (part.getPointCount() > 2) {\n+            selectedFeature = null;\n+            // show message reminding user to select straight (single segment) polylines only\n+            new Alert(Alert.AlertType.WARNING, \"Select straight (single segment) polylines only.\").show();\n+            // return early, effectively disallowing selection of multi segmented polylines\n+            return;\n+          } else {\n+            // select the polyline feature\n+            ((FeatureLayer) layerResult.getLayerContent()).selectFeature(selectedFeature);\n+            selectedFeatureIsPolyline = true;\n+          }\n+        });\n+      }\n+      // if the selected feature is a point, select the feature\n+      else if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POINT) {\n+        ((FeatureLayer) layerResult.getLayerContent()).selectFeature(selectedFeature);\n+        // open a dialog to edit the feature's attributes\n+        showEditableAttributes(selectedFeature);\n+      } else {\n+        new Alert(Alert.AlertType.WARNING, \"Feature of unexpected geometry type selected.\").show();\n+      }\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a dialog with text fields to allow editing of the given feature's 'AD_ADDRESS' and\n+   * 'ST_STR_NAM' attributes.\n+   */\n+  private void showEditableAttributes(Feature selectedFeature) {\n+\n+    // create a dialog to edit the attributes of the selected feature\n+    EditAttributesDialog editAttributesDialog = new EditAttributesDialog(selectedFeature);\n+\n+    // show the dialog and wait for the user response\n+    editAttributesDialog.showAndWait();\n+  }\n+\n+  /**\n+   * Update the attributes of the selected feature.\n+   */\n+  private void updateAttributes(Feature selectedFeature) {\n+\n+    // update feature in the feature table\n+    ListenableFuture<Void> editResult = selectedFeature.getFeatureTable().updateFeatureAsync(selectedFeature);\n+    editResult.addDoneListener(() -> {\n+              try {\n+                if (editResult.isDone()) {\n+                  editResult.get();\n+                }\n+              } catch (InterruptedException | ExecutionException e) {\n+                new Alert(Alert.AlertType.ERROR, \"Cannot update attributes: \" + e.getCause().getMessage()).show();\n+              }\n+            }\n+    );\n+  }\n+\n+  /**\n+   * Move the selected point feature to the given map point by updating the selected\n+   * feature's geometry and feature table.\n+   */\n+  private void movePoint(Point mapPoint) {\n+\n+    // set the selected features' geometry to a new map point\n+    selectedFeature.setGeometry(mapPoint);\n+\n+    // update the selected feature's feature table\n+    updateAttributes(selectedFeature);\n+\n+    // clear selection of the point\n+    clearSelection();\n+    selectedFeature = null;\n+  }\n+\n+  /**\n+   * Move the last of the vertex point of the currently selected polyline to the given map point by updating the\n+   * selected feature's geometry and feature table.\n+   */\n+  private void movePolylineVertex(Point mapPoint) {\n+\n+    // get the selected feature's geometry as a polyline\n+    Polyline polyline = (Polyline) selectedFeature.getGeometry();\n+\n+    // create a polyline builder to add and remove parts from the polyline\n+    PolylineBuilder polylineBuilder = new PolylineBuilder(polyline);\n+\n+    // get the nearest vertex to the map point on the polyline\n+    ProximityResult nearestVertex = GeometryEngine.nearestVertex(polyline, (Point) GeometryEngine.project(mapPoint, polyline.getSpatialReference()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 263}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzY1Mzk4OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/README.metadata.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzozNjoyN1rOG791Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzozNjoyN1rOG791Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzMjE2Ng==", "bodyText": "Let's not forget to add the category here.\nIf you haven't been using the script to generate this, do give it a shot. We're constantly optimising it so it would be helpful to see the output with every new sample\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"category\": \"\",\n          \n          \n            \n                \"category\": \"Editing\",", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r465532166", "createdAt": "2020-08-05T07:36:27Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/README.metadata.json", "diffHunk": "@@ -0,0 +1,34 @@\n+{\n+    \"category\": \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzY2Mjc1OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/resources/edit_features_with_feature_linked_annotation/edit_attributes_dialog.fxml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzozOToxNlrOG796cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzozOToxNlrOG796cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzMzU1NA==", "bodyText": "Looks like the imports here are out of order. The optimize-imports commands should sort that out easily", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r465533554", "createdAt": "2020-08-05T07:39:16Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/resources/edit_features_with_feature_linked_annotation/edit_attributes_dialog.fxml", "diffHunk": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Esri.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+  ~ use this file except in compliance with the License. You may obtain a copy of\n+  ~ the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+  ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+  ~ License for the specific language governing permissions and limitations under\n+  ~ the License.\n+  -->\n+\n+<?import javafx.scene.control.Dialog?>\n+<?import javafx.scene.control.DialogPane?>\n+<?import javafx.scene.layout.GridPane?>\n+<?import javafx.scene.control.Label?>\n+<?import javafx.scene.control.TextField?>\n+<?import javafx.scene.control.ButtonType?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzQyMDc3OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzo0NDo0NVrOG-PLZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzo0NDo0NVrOG-PLZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxMzU3Mw==", "bodyText": "Do you need to check isDone? I think just calling get() will either work or throw an exception.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r467913573", "createdAt": "2020-08-10T13:44:45Z", "author": {"login": "colinanderson"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.fxml.FXML;\n+import javafx.fxml.FXMLLoader;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.Dialog;\n+import javafx.scene.control.TextField;\n+\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+\n+public class EditAttributesDialog extends Dialog<String>{\n+\n+  @FXML private TextField addressTextField;\n+  @FXML private TextField streetNameTextField;\n+  @FXML private ButtonType continueButton;\n+\n+  EditAttributesDialog(Feature selectedFeature){\n+    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/edit_features_with_feature_linked_annotation/edit_attributes_dialog.fxml\"));\n+    loader.setRoot(this);\n+    loader.setController(this);\n+\n+    setTitle(\"Edit Feature Attributes\");\n+\n+    try {\n+      loader.load();\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+\n+    // populate text fields with current attribute values\n+    addressTextField.setText(selectedFeature.getAttributes().get(\"AD_ADDRESS\").toString());\n+    streetNameTextField.setText(selectedFeature.getAttributes().get(\"ST_STR_NAM\").toString());\n+\n+    // convert the result to an address and street name when the ok button is clicked.\n+    setResultConverter(dialogButton -> {\n+      if (dialogButton == continueButton) {\n+        try {\n+          // set AD_ADDRESS value to the int from the text field\n+          selectedFeature.getAttributes().put(\"AD_ADDRESS\", Integer.parseInt(addressTextField.getText()));\n+\n+          // set ST_STR_NAM value to the string from the text field\n+          selectedFeature.getAttributes().put(\"ST_STR_NAM\", streetNameTextField.getText());\n+\n+          // update feature in the feature table\n+          ListenableFuture<Void> editResult = selectedFeature.getFeatureTable().updateFeatureAsync(selectedFeature);\n+          editResult.addDoneListener(() -> {\n+                    try {\n+                      if (editResult.isDone()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f56af536455f25ec115baae09200b731ebc9098"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA0MDYyOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxMzo0OFrOG_gsWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxMzo0OFrOG_gsWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0OTExMg==", "bodyText": "Nice work on tidying this up.\nI've had a closer look and there's actually no need to return the selected feature here. This is because there's a handle on it in the main sample code already (from when we run mapView.identifyLayersAsync). So for the sake of simplicty let's convert back to return null;", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r469249112", "createdAt": "2020-08-12T13:13:48Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import javafx.fxml.FXML;\n+import javafx.fxml.FXMLLoader;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.Dialog;\n+import javafx.scene.control.TextField;\n+\n+import com.esri.arcgisruntime.data.Feature;\n+\n+/**\n+ * Custom dialog for editing feature attributes.\n+ */\n+public class EditAttributesDialog extends Dialog<Feature>{\n+\n+  @FXML private TextField addressTextField;\n+  @FXML private TextField streetNameTextField;\n+  @FXML private ButtonType continueButton;\n+\n+  EditAttributesDialog(Feature selectedFeature){\n+    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/edit_features_with_feature_linked_annotation/edit_attributes_dialog.fxml\"));\n+    loader.setRoot(this);\n+    loader.setController(this);\n+\n+    setTitle(\"Edit Feature Attributes\");\n+\n+    try {\n+      loader.load();\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+\n+    // populate text fields with current attribute values\n+    addressTextField.setText(selectedFeature.getAttributes().get(\"AD_ADDRESS\").toString());\n+    streetNameTextField.setText(selectedFeature.getAttributes().get(\"ST_STR_NAM\").toString());\n+\n+    // convert the result to an address and street name when the ok button is clicked.\n+    setResultConverter(dialogButton -> {\n+      if (dialogButton == continueButton) {\n+        try {\n+          // set AD_ADDRESS value to the int from the text field\n+          selectedFeature.getAttributes().put(\"AD_ADDRESS\", Integer.parseInt(addressTextField.getText()));\n+\n+          // set ST_STR_NAM value to the string from the text field\n+          selectedFeature.getAttributes().put(\"ST_STR_NAM\", streetNameTextField.getText());\n+\n+          return selectedFeature;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e27fd3d13cde6b60a9cc355a1d0694f09d7f98d"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA1NDE2OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNzowMFrOG_g0fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNzowMFrOG_g0fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MTE5Ng==", "bodyText": "Let's just give this a tad more breathing space and separate into two blocks. One where we create the GDB, and the other where we add the done loading listener:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n          \n          \n            \n                  geodatabase.addDoneLoadingListener(() -> {\n          \n          \n            \n                  Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n          \n          \n            \n                  \n          \n          \n            \n                  geodatabase.addDoneLoadingListener(() -> {", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r469251196", "createdAt": "2020-08-12T13:17:00Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./src/main/resources/edit_features_with_feature_linked_annotation/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+      geodatabase.addDoneLoadingListener(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e27fd3d13cde6b60a9cc355a1d0694f09d7f98d"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjEwMTg3OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoyNzo0NFrOG_hREA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODowNTozOFrOHAXjxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1ODUxMg==", "bodyText": "We can be a bit more generous here and give a larger tolerance. That way it'll be a bit easier to select the lines.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 1, false);\n          \n          \n            \n                ListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 10, false);", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r469258512", "createdAt": "2020-08-12T13:27:44Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./src/main/resources/edit_features_with_feature_linked_annotation/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Selects the nearest feature, or move the point or polyline vertex to the given screen point.\n+   *\n+   * @param screenPoint location the user clicked\n+   */\n+  private void selectOrMove(Point2D screenPoint) {\n+\n+    // if a feature hasn't been selected, select the feature\n+    if (selectedFeature == null) {\n+      identifyFeature(screenPoint);\n+    } else {\n+      // convert the screen point to a map point\n+      Point mapPoint = mapView.screenToLocation(screenPoint);\n+      // if the feature is a polyline, move the polyline\n+      if (selectedFeatureIsPolyline) {\n+        movePolylineVertex(mapPoint);\n+      } else {\n+        // if the feature is a point, move the point\n+        movePoint(mapPoint);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Identifies a feature near the given screen point.\n+   *\n+   * @param screenPoint location the user clicked\n+   */\n+  private void identifyFeature(Point2D screenPoint) {\n+\n+    // clear any previously selected features\n+    clearSelection();\n+\n+    // identify across all layers\n+    ListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 1, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e27fd3d13cde6b60a9cc355a1d0694f09d7f98d"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0ODAzNg==", "bodyText": "Increasing the tolerance forces you to zoom in to select a feature, as annotation layers are identified as the top most layer. A for loop can be added to ignore the annotation layers and select the feature. I think this implementation is cleaner, and is similar to the identify workflow in the Android sample.\n// identify across all layers\nListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 10, false);\n    identifyLayerResultsFuture.addDoneListener(() -> {\n      try {\n        // get the list of results from the future\n        List<IdentifyLayerResult> identifyLayerResults = identifyLayerResultsFuture.get();\n        // for each layer from which an element was identified\n        for (IdentifyLayerResult layerResult : identifyLayerResults) {\n          // check if the layer is a feature layer, thereby excluding annotation layers\n          if (layerResult.getLayerContent() instanceof FeatureLayer) {\n            // get a reference to the identified feature\n            selectedFeature = (Feature) layerResult.getElements().get(0);\n            // check the geometry and select the feature\n            selectFeature(layerResult);\n            return;\n          }\n     }", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r470148036", "createdAt": "2020-08-13T18:05:38Z", "author": {"login": "sclaridge"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./src/main/resources/edit_features_with_feature_linked_annotation/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Selects the nearest feature, or move the point or polyline vertex to the given screen point.\n+   *\n+   * @param screenPoint location the user clicked\n+   */\n+  private void selectOrMove(Point2D screenPoint) {\n+\n+    // if a feature hasn't been selected, select the feature\n+    if (selectedFeature == null) {\n+      identifyFeature(screenPoint);\n+    } else {\n+      // convert the screen point to a map point\n+      Point mapPoint = mapView.screenToLocation(screenPoint);\n+      // if the feature is a polyline, move the polyline\n+      if (selectedFeatureIsPolyline) {\n+        movePolylineVertex(mapPoint);\n+      } else {\n+        // if the feature is a point, move the point\n+        movePoint(mapPoint);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Identifies a feature near the given screen point.\n+   *\n+   * @param screenPoint location the user clicked\n+   */\n+  private void identifyFeature(Point2D screenPoint) {\n+\n+    // clear any previously selected features\n+    clearSelection();\n+\n+    // identify across all layers\n+    ListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 1, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1ODUxMg=="}, "originalCommit": {"oid": "0e27fd3d13cde6b60a9cc355a1d0694f09d7f98d"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjEyMjY0OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzozMjoxNlrOG_hdeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzozMjoxNlrOG_hdeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2MTY5MA==", "bodyText": "I personally think we can simplify this by turning the if-statment around. Doing an 'early return' is very much a C# pattern, as far as I'm aware.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // if the selected feature is a polyline with any part containing more than one segment\n          \n          \n            \n                      // (i.e. a curve)\n          \n          \n            \n                      if (part.getPointCount() > 2) {\n          \n          \n            \n                        selectedFeature = null;\n          \n          \n            \n                        // show message reminding user to select straight (single segment) polylines only\n          \n          \n            \n                        new Alert(Alert.AlertType.WARNING, \"Select straight (single segment) polylines only.\").show();\n          \n          \n            \n                        // return early, effectively disallowing selection of multi segmented polylines\n          \n          \n            \n                        return;\n          \n          \n            \n                      } else {\n          \n          \n            \n                        // select the polyline feature\n          \n          \n            \n                        ((FeatureLayer) layerResult.getLayerContent()).selectFeature(selectedFeature);\n          \n          \n            \n                        selectedFeatureIsPolyline = true;\n          \n          \n            \n                      }\n          \n          \n            \n                      // only select single segment lines\n          \n          \n            \n                      if (part.getPointCount() <= 2) {\n          \n          \n            \n                        // select the polyline feature\n          \n          \n            \n                        ((FeatureLayer) layerResult.getLayerContent()).selectFeature(selectedFeature);\n          \n          \n            \n                        selectedFeatureIsPolyline = true;\n          \n          \n            \n                      \n          \n          \n            \n                      } else {\n          \n          \n            \n                        selectedFeature = null;\n          \n          \n            \n                        // show message reminding user to select straight (single segment) polylines only\n          \n          \n            \n                        new Alert(Alert.AlertType.WARNING, \"Select straight (single segment) polylines only.\").show();\n          \n          \n            \n                      }", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r469261690", "createdAt": "2020-08-12T13:32:16Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./src/main/resources/edit_features_with_feature_linked_annotation/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Selects the nearest feature, or move the point or polyline vertex to the given screen point.\n+   *\n+   * @param screenPoint location the user clicked\n+   */\n+  private void selectOrMove(Point2D screenPoint) {\n+\n+    // if a feature hasn't been selected, select the feature\n+    if (selectedFeature == null) {\n+      identifyFeature(screenPoint);\n+    } else {\n+      // convert the screen point to a map point\n+      Point mapPoint = mapView.screenToLocation(screenPoint);\n+      // if the feature is a polyline, move the polyline\n+      if (selectedFeatureIsPolyline) {\n+        movePolylineVertex(mapPoint);\n+      } else {\n+        // if the feature is a point, move the point\n+        movePoint(mapPoint);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Identifies a feature near the given screen point.\n+   *\n+   * @param screenPoint location the user clicked\n+   */\n+  private void identifyFeature(Point2D screenPoint) {\n+\n+    // clear any previously selected features\n+    clearSelection();\n+\n+    // identify across all layers\n+    ListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 1, false);\n+    identifyLayerResultsFuture.addDoneListener(() -> {\n+      try {\n+        // get the list of results from the future\n+        List<IdentifyLayerResult> identifyLayerResults = identifyLayerResultsFuture.get();\n+        // if one or more results have been identified\n+        if (!identifyLayerResults.isEmpty()) {\n+          // retrieve the first result\n+          IdentifyLayerResult layerResult = identifyLayerResults.get(0);\n+          // check that the result is a feature layer, thereby excluding annotation layers\n+          if (layerResult.getLayerContent() instanceof FeatureLayer) {\n+            // get a reference to the identified feature\n+            selectedFeature = (Feature) layerResult.getElements().get(0);\n+            // check the geometry and select the feature\n+            selectFeature(layerResult);\n+          }\n+        }\n+      } catch (Exception e) {\n+        e.printStackTrace();\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Checks if the identified feature is a straight polyline or a point, and select the feature.\n+   * For a point feature, show a dialog to edit attributes. Future clicks will call move functions.\n+   *\n+   * @param layerResult identify layer result\n+   */\n+  private void selectFeature(IdentifyLayerResult layerResult) {\n+\n+    try {\n+      // if the selected feature is a polyline\n+      if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POLYLINE) {\n+        // create a polyline builder from the selected feature\n+        PolylineBuilder polylineBuilder = new PolylineBuilder((Polyline) selectedFeature.getGeometry());\n+        // get a list of parts of the selected polyline\n+        List<Part> parts = polylineBuilder.getParts();\n+        parts.forEach(part -> {\n+          // if the selected feature is a polyline with any part containing more than one segment\n+          // (i.e. a curve)\n+          if (part.getPointCount() > 2) {\n+            selectedFeature = null;\n+            // show message reminding user to select straight (single segment) polylines only\n+            new Alert(Alert.AlertType.WARNING, \"Select straight (single segment) polylines only.\").show();\n+            // return early, effectively disallowing selection of multi segmented polylines\n+            return;\n+          } else {\n+            // select the polyline feature\n+            ((FeatureLayer) layerResult.getLayerContent()).selectFeature(selectedFeature);\n+            selectedFeatureIsPolyline = true;\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e27fd3d13cde6b60a9cc355a1d0694f09d7f98d"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjM2MzUxOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoyNjozMVrOG_j0Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoyNjozMVrOG_j0Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwMDI4Mw==", "bodyText": "I'm not the documentation expert, but I have the impression we usually start @param descriptions with the, and describe these parameters based on their context within the function. So we could write here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param screenPoint location the user clicked\n          \n          \n            \n               * @param screenPoint the screen point at which to select a feature, or to move a feature to", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r469300283", "createdAt": "2020-08-12T14:26:31Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./src/main/resources/edit_features_with_feature_linked_annotation/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Selects the nearest feature, or move the point or polyline vertex to the given screen point.\n+   *\n+   * @param screenPoint location the user clicked", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e27fd3d13cde6b60a9cc355a1d0694f09d7f98d"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjM3MDY4OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoyODowOFrOG_j4_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoyODowOFrOG_j4_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwMTUwMQ==", "bodyText": "Another documentation suggestion: we can describe what purpose this parameter serves within the method:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param screenPoint location the user clicked\n          \n          \n            \n               * @param screenPoint the screen point at which to identify a feature", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r469301501", "createdAt": "2020-08-12T14:28:08Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./src/main/resources/edit_features_with_feature_linked_annotation/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Selects the nearest feature, or move the point or polyline vertex to the given screen point.\n+   *\n+   * @param screenPoint location the user clicked\n+   */\n+  private void selectOrMove(Point2D screenPoint) {\n+\n+    // if a feature hasn't been selected, select the feature\n+    if (selectedFeature == null) {\n+      identifyFeature(screenPoint);\n+    } else {\n+      // convert the screen point to a map point\n+      Point mapPoint = mapView.screenToLocation(screenPoint);\n+      // if the feature is a polyline, move the polyline\n+      if (selectedFeatureIsPolyline) {\n+        movePolylineVertex(mapPoint);\n+      } else {\n+        // if the feature is a point, move the point\n+        movePoint(mapPoint);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Identifies a feature near the given screen point.\n+   *\n+   * @param screenPoint location the user clicked", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e27fd3d13cde6b60a9cc355a1d0694f09d7f98d"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjM3NDE3OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoyODo1MlrOG_j7Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoyODo1MlrOG_j7Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwMjA5OQ==", "bodyText": "Just another suggestion:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param layerResult identify layer result\n          \n          \n            \n               * @param layerResult the identify layer result from which to select a feature", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r469302099", "createdAt": "2020-08-12T14:28:52Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./src/main/resources/edit_features_with_feature_linked_annotation/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Selects the nearest feature, or move the point or polyline vertex to the given screen point.\n+   *\n+   * @param screenPoint location the user clicked\n+   */\n+  private void selectOrMove(Point2D screenPoint) {\n+\n+    // if a feature hasn't been selected, select the feature\n+    if (selectedFeature == null) {\n+      identifyFeature(screenPoint);\n+    } else {\n+      // convert the screen point to a map point\n+      Point mapPoint = mapView.screenToLocation(screenPoint);\n+      // if the feature is a polyline, move the polyline\n+      if (selectedFeatureIsPolyline) {\n+        movePolylineVertex(mapPoint);\n+      } else {\n+        // if the feature is a point, move the point\n+        movePoint(mapPoint);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Identifies a feature near the given screen point.\n+   *\n+   * @param screenPoint location the user clicked\n+   */\n+  private void identifyFeature(Point2D screenPoint) {\n+\n+    // clear any previously selected features\n+    clearSelection();\n+\n+    // identify across all layers\n+    ListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 1, false);\n+    identifyLayerResultsFuture.addDoneListener(() -> {\n+      try {\n+        // get the list of results from the future\n+        List<IdentifyLayerResult> identifyLayerResults = identifyLayerResultsFuture.get();\n+        // if one or more results have been identified\n+        if (!identifyLayerResults.isEmpty()) {\n+          // retrieve the first result\n+          IdentifyLayerResult layerResult = identifyLayerResults.get(0);\n+          // check that the result is a feature layer, thereby excluding annotation layers\n+          if (layerResult.getLayerContent() instanceof FeatureLayer) {\n+            // get a reference to the identified feature\n+            selectedFeature = (Feature) layerResult.getElements().get(0);\n+            // check the geometry and select the feature\n+            selectFeature(layerResult);\n+          }\n+        }\n+      } catch (Exception e) {\n+        e.printStackTrace();\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Checks if the identified feature is a straight polyline or a point, and select the feature.\n+   * For a point feature, show a dialog to edit attributes. Future clicks will call move functions.\n+   *\n+   * @param layerResult identify layer result", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e27fd3d13cde6b60a9cc355a1d0694f09d7f98d"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjM4NjE5OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDozMTo0MFrOG_kDAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDozMTo0MFrOG_kDAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNDA2Nw==", "bodyText": "Let's show an alert here instead of just printing the stack trace:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    e.printStackTrace();\n          \n          \n            \n                    new Alert(Alert.AlertType.ERROR, \"Error identifying the clicked feature.\").show();", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r469304067", "createdAt": "2020-08-12T14:31:40Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./src/main/resources/edit_features_with_feature_linked_annotation/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Selects the nearest feature, or move the point or polyline vertex to the given screen point.\n+   *\n+   * @param screenPoint location the user clicked\n+   */\n+  private void selectOrMove(Point2D screenPoint) {\n+\n+    // if a feature hasn't been selected, select the feature\n+    if (selectedFeature == null) {\n+      identifyFeature(screenPoint);\n+    } else {\n+      // convert the screen point to a map point\n+      Point mapPoint = mapView.screenToLocation(screenPoint);\n+      // if the feature is a polyline, move the polyline\n+      if (selectedFeatureIsPolyline) {\n+        movePolylineVertex(mapPoint);\n+      } else {\n+        // if the feature is a point, move the point\n+        movePoint(mapPoint);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Identifies a feature near the given screen point.\n+   *\n+   * @param screenPoint location the user clicked\n+   */\n+  private void identifyFeature(Point2D screenPoint) {\n+\n+    // clear any previously selected features\n+    clearSelection();\n+\n+    // identify across all layers\n+    ListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 1, false);\n+    identifyLayerResultsFuture.addDoneListener(() -> {\n+      try {\n+        // get the list of results from the future\n+        List<IdentifyLayerResult> identifyLayerResults = identifyLayerResultsFuture.get();\n+        // if one or more results have been identified\n+        if (!identifyLayerResults.isEmpty()) {\n+          // retrieve the first result\n+          IdentifyLayerResult layerResult = identifyLayerResults.get(0);\n+          // check that the result is a feature layer, thereby excluding annotation layers\n+          if (layerResult.getLayerContent() instanceof FeatureLayer) {\n+            // get a reference to the identified feature\n+            selectedFeature = (Feature) layerResult.getElements().get(0);\n+            // check the geometry and select the feature\n+            selectFeature(layerResult);\n+          }\n+        }\n+      } catch (Exception e) {\n+        e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e27fd3d13cde6b60a9cc355a1d0694f09d7f98d"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjM5ODIwOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDozNDoxOVrOG_kKlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDozNDoxOVrOG_kKlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNjAwNQ==", "bodyText": "It doesn't look like there's any need for this try/catch block anymore, since all the asynchronous actions are now being done in other methods? In which case we can just remove it", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r469306005", "createdAt": "2020-08-12T14:34:19Z", "author": {"login": "JonLavi"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./src/main/resources/edit_features_with_feature_linked_annotation/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Selects the nearest feature, or move the point or polyline vertex to the given screen point.\n+   *\n+   * @param screenPoint location the user clicked\n+   */\n+  private void selectOrMove(Point2D screenPoint) {\n+\n+    // if a feature hasn't been selected, select the feature\n+    if (selectedFeature == null) {\n+      identifyFeature(screenPoint);\n+    } else {\n+      // convert the screen point to a map point\n+      Point mapPoint = mapView.screenToLocation(screenPoint);\n+      // if the feature is a polyline, move the polyline\n+      if (selectedFeatureIsPolyline) {\n+        movePolylineVertex(mapPoint);\n+      } else {\n+        // if the feature is a point, move the point\n+        movePoint(mapPoint);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Identifies a feature near the given screen point.\n+   *\n+   * @param screenPoint location the user clicked\n+   */\n+  private void identifyFeature(Point2D screenPoint) {\n+\n+    // clear any previously selected features\n+    clearSelection();\n+\n+    // identify across all layers\n+    ListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 1, false);\n+    identifyLayerResultsFuture.addDoneListener(() -> {\n+      try {\n+        // get the list of results from the future\n+        List<IdentifyLayerResult> identifyLayerResults = identifyLayerResultsFuture.get();\n+        // if one or more results have been identified\n+        if (!identifyLayerResults.isEmpty()) {\n+          // retrieve the first result\n+          IdentifyLayerResult layerResult = identifyLayerResults.get(0);\n+          // check that the result is a feature layer, thereby excluding annotation layers\n+          if (layerResult.getLayerContent() instanceof FeatureLayer) {\n+            // get a reference to the identified feature\n+            selectedFeature = (Feature) layerResult.getElements().get(0);\n+            // check the geometry and select the feature\n+            selectFeature(layerResult);\n+          }\n+        }\n+      } catch (Exception e) {\n+        e.printStackTrace();\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Checks if the identified feature is a straight polyline or a point, and select the feature.\n+   * For a point feature, show a dialog to edit attributes. Future clicks will call move functions.\n+   *\n+   * @param layerResult identify layer result\n+   */\n+  private void selectFeature(IdentifyLayerResult layerResult) {\n+\n+    try {\n+      // if the selected feature is a polyline\n+      if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POLYLINE) {\n+        // create a polyline builder from the selected feature\n+        PolylineBuilder polylineBuilder = new PolylineBuilder((Polyline) selectedFeature.getGeometry());\n+        // get a list of parts of the selected polyline\n+        List<Part> parts = polylineBuilder.getParts();\n+        parts.forEach(part -> {\n+          // if the selected feature is a polyline with any part containing more than one segment\n+          // (i.e. a curve)\n+          if (part.getPointCount() > 2) {\n+            selectedFeature = null;\n+            // show message reminding user to select straight (single segment) polylines only\n+            new Alert(Alert.AlertType.WARNING, \"Select straight (single segment) polylines only.\").show();\n+            // return early, effectively disallowing selection of multi segmented polylines\n+            return;\n+          } else {\n+            // select the polyline feature\n+            ((FeatureLayer) layerResult.getLayerContent()).selectFeature(selectedFeature);\n+            selectedFeatureIsPolyline = true;\n+          }\n+        });\n+      }\n+      // if the selected feature is a point, select the feature\n+      else if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POINT) {\n+        ((FeatureLayer) layerResult.getLayerContent()).selectFeature(selectedFeature);\n+        // open a dialog to edit the feature's attributes\n+        showEditableAttributes(selectedFeature);\n+      } else {\n+        new Alert(Alert.AlertType.WARNING, \"Feature of unexpected geometry type selected.\").show();\n+      }\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e27fd3d13cde6b60a9cc355a1d0694f09d7f98d"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzIxNDk3OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzo0NjowMlrOHJPSqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzo0NjowMlrOHJPSqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0OTc2OA==", "bodyText": "we can update this to 100.9.0 now that we're live!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r479449768", "createdAt": "2020-08-28T17:46:02Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/build.gradle", "diffHunk": "@@ -0,0 +1,74 @@\n+plugins {\n+    id 'application'\n+    id 'org.openjfx.javafxplugin' version '0.0.5'\n+}\n+\n+group = 'com.esri.samples'\n+\n+ext {\n+    arcgisVersion = '100.9.0-2852'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0b749465df4b5bc20d0c61aa4b3837e368825d4"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzI0MjM2OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzo1NToyMVrOHJPj5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzo1NToyMVrOHJPj5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NDE4MA==", "bodyText": "this description doesn't include actually moving an address point on the sample. This threw me initially as I clicked \"OK\" or \"Cancel\" and then clicked on the map/another point: wasn't expecting the address point to move too.  We should add in some additional documentation for this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Pan and zoom the map to see that the text on the map is annotation, not labels. Click one of the address points to update the house number (AD_ADDRESS) and street name (ST_STR_NAM). Click one of the dashed parcel polylines and click another location to change its geometry. NOTE: Selection is only enabled for points and straight (single segment) polylines.\n          \n          \n            \n            Pan and zoom the map to see that the text on the map is annotation, not labels. Click one of the address points to update the house number (AD_ADDRESS) and street name (ST_STR_NAM). Once you have edited the feature attributes, click \"OK\" and then click again on the map to move the address point to a new location. You can also click one of the dashed parcel polylines and click another location to change its geometry and update its annotation (distance in feet). NOTE: Selection is only enabled for points and straight (single segment) polylines.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r479454180", "createdAt": "2020-08-28T17:55:21Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/README.md", "diffHunk": "@@ -0,0 +1,42 @@\n+# Edit features with feature-linked annotation\n+\n+Edit feature attributes which are linked to annotation through an expression.\n+\n+![Image of edit features with feature-linked annotation](EditFeaturesWithFeatureLinkedAnnotation.png)\n+\n+## Use case\n+\n+Annotation is useful for displaying text that you don't want to move or resize when the map is panned or zoomed (unlike labels which will move and resize). Feature-linked annotation will update when a feature attribute referenced by the annotation expression is also updated. Additionally, the position of the annotation will transform to match any transformation to the linked feature's geometry.\n+\n+## How to use the sample\n+\n+Pan and zoom the map to see that the text on the map is annotation, not labels. Click one of the address points to update the house number (AD_ADDRESS) and street name (ST_STR_NAM). Click one of the dashed parcel polylines and click another location to change its geometry. NOTE: Selection is only enabled for points and straight (single segment) polylines.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0b749465df4b5bc20d0c61aa4b3837e368825d4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzI3MTE1OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODowNTozOFrOHJP2Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODowNTozOFrOHJP2Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1ODg5OA==", "bodyText": "to make sure the samples data is included within a production zip made from this file, we also here need to include the following code here - this should be done for all samples which require locally saved data to run.\n    from (\"samples-data\") {\n        into \"samples-data\"\n    }", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r479458898", "createdAt": "2020-08-28T18:05:38Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/build.gradle", "diffHunk": "@@ -0,0 +1,74 @@\n+plugins {\n+    id 'application'\n+    id 'org.openjfx.javafxplugin' version '0.0.5'\n+}\n+\n+group = 'com.esri.samples'\n+\n+ext {\n+    arcgisVersion = '100.9.0-2852'\n+}\n+\n+javafx {\n+    version = \"11.0.2\"\n+    modules = [ 'javafx.controls', 'javafx.fxml' ]\n+}\n+\n+compileJava.options.encoding = 'UTF-8'\n+\n+repositories {\n+    jcenter()\n+    maven {\n+        url 'https://esri.bintray.com/arcgis'\n+    }\n+    maven {\n+        url 'http://olympus.esri.com/artifactory/arcgisruntime-repo'\n+    }\n+}\n+\n+configurations {\n+    natives\n+}\n+\n+dependencies {\n+    compile \"com.esri.arcgisruntime:arcgis-java:$arcgisVersion\"\n+    natives \"com.esri.arcgisruntime:arcgis-java-jnilibs:$arcgisVersion\"\n+    natives \"com.esri.arcgisruntime:arcgis-java-resources:$arcgisVersion\"\n+}\n+\n+task copyNatives(type: Copy) {\n+    description = \"Copies the arcgis native libraries into the project build directory for development.\"\n+    group = \"build\"\n+    configurations.natives.asFileTree.each {\n+        from(zipTree(it))\n+    }\n+    // store native libraries in a common location shared with other samples\n+    into \"${System.properties.getProperty(\"user.home\")}/.arcgis/$arcgisVersion\"\n+}\n+\n+run {\n+    dependsOn copyNatives\n+    mainClassName = 'com.esri.samples.edit_features_with_feature_linked_annotation.EditFeaturesWithFeatureLinkedAnnotationLauncher'\n+}\n+\n+jar {\n+    duplicatesStrategy = DuplicatesStrategy.EXCLUDE\n+    manifest {\n+        attributes(\"Main-Class\": \"$mainClassName\")\n+    }\n+    from {\n+        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }\n+    }\n+}\n+\n+task productionZip(type: Zip) {\n+    group = 'distribution'\n+    from copyNatives", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0b749465df4b5bc20d0c61aa4b3837e368825d4"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzI3NzEzOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/settings.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODowNzo0N1rOHJP6Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODowNzo0N1rOHJP6Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1OTg0Mg==", "bodyText": "I added a comment in Jon's review, but just in case it gets lost: samples data should always be saved into a samples-data directory. The resources are reserved for UI or style files.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        dest: file(\"./src/main/resources/edit_features_with_feature_linked_annotation/loudon\")\n          \n          \n            \n                        dest: file(\"./samples-data/loudon\")", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r479459842", "createdAt": "2020-08-28T18:07:47Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/settings.gradle", "diffHunk": "@@ -0,0 +1,16 @@\n+rootProject.name = 'edit-features-with-feature-linked-annotation'\n+\n+// download sample data\n+def ant = new groovy.util.AntBuilder()\n+\n+if (!file(\"./samples-data\").exists()) {\n+    ant.get(\n+            src: \"https://arcgisruntime.maps.arcgis.com/sharing/rest/content/items/74c0c9fa80f4498c9739cc42531e9948/data\",\n+            dest: file(\"./data.zip\")\n+    )\n+    ant.unzip(\n+            src: file(\"./data.zip\"),\n+            dest: file(\"./src/main/resources/edit_features_with_feature_linked_annotation/loudon\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0b749465df4b5bc20d0c61aa4b3837e368825d4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDIzOTIxOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowMToyMlrOHMq2Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowMToyMlrOHMq2Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0NjkxNQ==", "bodyText": "in in line javadoc comments (i.e. those not describing a method/class), full stops/periods aren't required.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // convert the result to an address and street name when the ok button is clicked.\n          \n          \n            \n                // convert the result to an address and street name when the ok button is clicked", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r483046915", "createdAt": "2020-09-03T15:01:22Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import javafx.fxml.FXML;\n+import javafx.fxml.FXMLLoader;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.Dialog;\n+import javafx.scene.control.TextField;\n+\n+import com.esri.arcgisruntime.data.Feature;\n+\n+/**\n+ * Custom dialog for editing feature attributes.\n+ */\n+public class EditAttributesDialog extends Dialog<Feature>{\n+\n+  @FXML private TextField addressTextField;\n+  @FXML private TextField streetNameTextField;\n+  @FXML private ButtonType continueButton;\n+\n+  EditAttributesDialog(Feature selectedFeature){\n+    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/edit_features_with_feature_linked_annotation/edit_attributes_dialog.fxml\"));\n+    loader.setRoot(this);\n+    loader.setController(this);\n+\n+    setTitle(\"Edit Feature Attributes\");\n+\n+    try {\n+      loader.load();\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+\n+    // populate text fields with current attribute values\n+    addressTextField.setText(selectedFeature.getAttributes().get(\"AD_ADDRESS\").toString());\n+    streetNameTextField.setText(selectedFeature.getAttributes().get(\"ST_STR_NAM\").toString());\n+\n+    // convert the result to an address and street name when the ok button is clicked.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96616d1bf0b0e6b2cabb316cb505a714b85479a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDMxMDczOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNToxNzo0NlrOHMrjUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNToxNzo0NlrOHMrjUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1ODUxMw==", "bodyText": "to avoid a keyboard-happy user like me inadvertently throwing a java.lang.NumberFormatException by putting lots of extra numbers in in this field ;)\nwe can put in something like the following:\n          // ensure input is equal to or less than 5 characters (max length for addresses in area)\n          if (addressTextField.getLength() <= 5){\n            // set AD_ADDRESS value to the int from the text field\n            selectedFeature.getAttributes().put(\"AD_ADDRESS\", Integer.parseInt(addressTextField.getText()));\n          } else  {\n            new Alert(Alert.AlertType.WARNING, \"Field not updated. Integer must be less than 6 characters\").showAndWait();\n          }\nSee also this stackoverflow post for understanding better why an exception is thrown here when putting in too many digits.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r483058513", "createdAt": "2020-09-03T15:17:46Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import javafx.fxml.FXML;\n+import javafx.fxml.FXMLLoader;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.Dialog;\n+import javafx.scene.control.TextField;\n+\n+import com.esri.arcgisruntime.data.Feature;\n+\n+/**\n+ * Custom dialog for editing feature attributes.\n+ */\n+public class EditAttributesDialog extends Dialog<Feature>{\n+\n+  @FXML private TextField addressTextField;\n+  @FXML private TextField streetNameTextField;\n+  @FXML private ButtonType continueButton;\n+\n+  EditAttributesDialog(Feature selectedFeature){\n+    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/edit_features_with_feature_linked_annotation/edit_attributes_dialog.fxml\"));\n+    loader.setRoot(this);\n+    loader.setController(this);\n+\n+    setTitle(\"Edit Feature Attributes\");\n+\n+    try {\n+      loader.load();\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+\n+    // populate text fields with current attribute values\n+    addressTextField.setText(selectedFeature.getAttributes().get(\"AD_ADDRESS\").toString());\n+    streetNameTextField.setText(selectedFeature.getAttributes().get(\"ST_STR_NAM\").toString());\n+\n+    // convert the result to an address and street name when the ok button is clicked.\n+    setResultConverter(dialogButton -> {\n+      if (dialogButton == continueButton) {\n+        try {\n+          // set AD_ADDRESS value to the int from the text field", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96616d1bf0b0e6b2cabb316cb505a714b85479a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDMzNzIxOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNToyMzoxNlrOHMrziA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNToyMzoxNlrOHMrziA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA2MjY2NA==", "bodyText": "perhaps this would be better named as \"updateButton\"? We could also update the button text to show \"Update\" which is perhaps a bit clearer than \"Ok\" in terms of what the user is doing if they click to edit the feature.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r483062664", "createdAt": "2020-09-03T15:23:16Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditAttributesDialog.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import javafx.fxml.FXML;\n+import javafx.fxml.FXMLLoader;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.Dialog;\n+import javafx.scene.control.TextField;\n+\n+import com.esri.arcgisruntime.data.Feature;\n+\n+/**\n+ * Custom dialog for editing feature attributes.\n+ */\n+public class EditAttributesDialog extends Dialog<Feature>{\n+\n+  @FXML private TextField addressTextField;\n+  @FXML private TextField streetNameTextField;\n+  @FXML private ButtonType continueButton;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96616d1bf0b0e6b2cabb316cb505a714b85479a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDUxNDQ4OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/resources/edit_features_with_feature_linked_annotation/edit_attributes_dialog.fxml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjowMzo0OVrOHMtiug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjowMzo0OVrOHMtiug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA5MTEzMA==", "bodyText": "Usually on our samples desktop applications, I'd expect to see the cancel button on the right hand side of dialog, not the left. Our other samples follow this pattern too, so let's stick with that by switching \"OK_DONE\" for \"FINISH\" (looks like JavaFX controls the position of the buttons and the enum seems to do the same thing in this case). I also think \"Update\" might be clearer than \"Ok\".\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <ButtonType fx:id=\"continueButton\" buttonData=\"OK_DONE\" text=\"Ok\"/>\n          \n          \n            \n                        <ButtonType fx:id=\"continueButton\" buttonData=\"FINISH\" text=\"Update\"/>", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r483091130", "createdAt": "2020-09-03T16:03:49Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/resources/edit_features_with_feature_linked_annotation/edit_attributes_dialog.fxml", "diffHunk": "@@ -0,0 +1,39 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Esri.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+  ~ use this file except in compliance with the License. You may obtain a copy of\n+  ~ the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+  ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+  ~ License for the specific language governing permissions and limitations under\n+  ~ the License.\n+  -->\n+\n+<?import javafx.scene.control.DialogPane?>\n+<?import javafx.scene.control.TextField?>\n+<?import javafx.scene.control.Label?>\n+<?import javafx.scene.control.ButtonType?>\n+<?import javafx.scene.layout.GridPane?>\n+<fx:root type=\"javafx.scene.control.Dialog\"\n+         xmlns:fx=\"http://javafx.com/fxml\">\n+    <dialogPane>\n+        <DialogPane>\n+            <content>\n+                <GridPane vgap=\"10\" hgap=\"10\">\n+                    <Label text=\"AD_ADDRESS:\" GridPane.rowIndex=\"0\" GridPane.columnIndex=\"0\"/>\n+                    <TextField fx:id=\"addressTextField\" GridPane.rowIndex=\"0\" GridPane.columnIndex=\"1\"/>\n+                    <Label text=\"ST_STR_NAM:\" GridPane.rowIndex=\"1\" GridPane.columnIndex=\"0\"/>\n+                    <TextField fx:id=\"streetNameTextField\" GridPane.rowIndex=\"1\" GridPane.columnIndex=\"1\"/>\n+                </GridPane>\n+            </content>\n+            <ButtonType fx:id=\"continueButton\" buttonData=\"OK_DONE\" text=\"Ok\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96616d1bf0b0e6b2cabb316cb505a714b85479a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDkyNzEwOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo1Njo1NFrOHMxmRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo1Njo1NFrOHMxmRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1NzU3NA==", "bodyText": "all of these can be local variables in the start method, since they are not referenced elsewhere in the class. We don't need to worry about these being garbage collected, since we're not waiting for them to finish loading before doing something with them.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r483157574", "createdAt": "2020-09-03T17:56:54Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96616d1bf0b0e6b2cabb316cb505a714b85479a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDkzOTUzOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODowMDozNlrOHMxuGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODowMDozNlrOHMxuGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1OTU3Nw==", "bodyText": "we should make this an instance variable. Since it is a loadable, and we are waiting on it to finish loading, there is a small chance it's initial reference will be garbage collected and by the time the addDoneLoadingListener has returned, the initial geodatabase reference is lost and the app will hang.  Let's add the following up above the start method:\n  private Geodatabase geodatabase; // keep loadable in scope to avoid garbage collection\n\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n          \n          \n            \n                  geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r483159577", "createdAt": "2020-09-03T18:00:36Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./samples-data/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96616d1bf0b0e6b2cabb316cb505a714b85479a"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDk1MjU0OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODowNTowMlrOHMx2tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODowNTowMlrOHMx2tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2MTc4MQ==", "bodyText": "we can simplify the following with:\n// add the annotation and feature layers to the map\nmap.getOperationalLayers().addAll(Arrays.asList(\n     addressPointFeatureLayer, parcelLinesFeatureLayer, addressPointsAnnotationLayer, parcelLinesAnnotationLayer));", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r483161781", "createdAt": "2020-09-03T18:05:02Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./samples-data/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96616d1bf0b0e6b2cabb316cb505a714b85479a"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDk2NTMxOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODowODo1MlrOHMx-tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODowODo1MlrOHMx-tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2MzgzMQ==", "bodyText": "by the time we're using local variables for the FeatureLayer's here (see comment above), that's a lot of references to the word FeatureLayer in this block of code. For situations like this, we can make use of Java 10's keyword \"var\". This replaces the type information when declaring local variables and clears the readability up a little.\nAlso since these are quite long lines of code, we should stagger them a little:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // create feature layers from tables in the geodatabase\n          \n          \n            \n                      addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n          \n          \n            \n                      parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n          \n          \n            \n                      // create annotation layers from tables in the geodatabase\n          \n          \n            \n                      addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n          \n          \n            \n                      parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n          \n          \n            \n                     // create feature layers from tables in the geodatabase\n          \n          \n            \n                     var addressPointFeatureLayer =\n          \n          \n            \n                       new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n          \n          \n            \n                     var parcelLinesFeatureLayer =\n          \n          \n            \n                       new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n          \n          \n            \n                     // create annotation layers from tables in the geodatabase\n          \n          \n            \n                     var addressPointsAnnotationLayer =\n          \n          \n            \n                       new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n          \n          \n            \n                     var parcelLinesAnnotationLayer =\n          \n          \n            \n                       new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r483163831", "createdAt": "2020-09-03T18:08:52Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./samples-data/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96616d1bf0b0e6b2cabb316cb505a714b85479a"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDk4MDUwOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoxMzoyNVrOHMyIYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoxMzoyNVrOHMyIYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2NjMwNw==", "bodyText": "I think for a readability perspective, it makes more sense for us to move this loadAsync call up (to above the geodatabase.addDoneLoadingListener() even though it doesn't make much of a difference from a code execution perspective.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r483166307", "createdAt": "2020-09-03T18:13:25Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./samples-data/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96616d1bf0b0e6b2cabb316cb505a714b85479a"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDk5NTcwOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoxNzo1MlrOHMySAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoxNzo1MlrOHMySAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2ODc2OQ==", "bodyText": "with moving the logic from the single use method directly into this listener, we can borrow some of the original method description and use it here instead:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // set on click behaviour\n          \n          \n            \n                  // select the nearest feature from where the user clicked, or move the selected feature to the given screen point", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r483168769", "createdAt": "2020-09-03T18:17:52Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./samples-data/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96616d1bf0b0e6b2cabb316cb505a714b85479a"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDk5NzQwOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoxODoyNlrOHMyTGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoxODoyNlrOHMyTGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2OTA1MA==", "bodyText": "we can remove this comment: the code below it is clear enough to describe it is checking the primary mouse button was clicked.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // check that the primary mouse button was clicked", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r483169050", "createdAt": "2020-09-03T18:18:26Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./samples-data/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96616d1bf0b0e6b2cabb316cb505a714b85479a"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTAwMTI2OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoxOTozN1rOHMyVkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoxOTozN1rOHMyVkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2OTY4MA==", "bodyText": "it's common with the Android implementations to have single use methods, but with Java SE samples we don't do this as often. The logic in this method isn't too verbose, so let's just remove the method and insert the code from that method directly here instead.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      selectOrMove(screenPoint);\n          \n          \n            \n                // if a feature hasn't been selected, select the feature\n          \n          \n            \n                if (selectedFeature == null) {\n          \n          \n            \n                  identifyFeature(screenPoint);\n          \n          \n            \n                } else {\n          \n          \n            \n                  // convert the screen point to a map point\n          \n          \n            \n                  Point mapPoint = mapView.screenToLocation(screenPoint);\n          \n          \n            \n                  // if the feature is a polyline, move the polyline\n          \n          \n            \n                  if (selectedFeatureIsPolyline) {\n          \n          \n            \n                    movePolylineVertex(mapPoint);\n          \n          \n            \n                  } else {\n          \n          \n            \n                    // if the feature is a point, move the point\n          \n          \n            \n                    movePoint(mapPoint);\n          \n          \n            \n                  }\n          \n          \n            \n                }```", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r483169680", "createdAt": "2020-09-03T18:19:37Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./samples-data/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96616d1bf0b0e6b2cabb316cb505a714b85479a"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTI3OTI3OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMToxMjo0NVrOHN7Tvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMToxMjo0NVrOHN7Tvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM2NTI0Ng==", "bodyText": "rather than casting this long to an int (which could result in a stack overflow if the long is greater than the maximum allowed int value), we can use the following method which would throw an informative exception in case of the above happening. Very unlikely in this sample but good practice I believe.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Part part = polylineBuilder.getParts().get((int) nearestVertex.getPartIndex());\n          \n          \n            \n                Part part = polylineBuilder.getParts().get(Math.toIntExact(nearestVertex.getPartIndex()));", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r484365246", "createdAt": "2020-09-07T11:12:45Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./samples-data/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Selects the nearest feature, or move the point or polyline vertex to the given screen point.\n+   *\n+   * @param screenPoint the screen point at which to select a feature, or to move a feature to\n+   */\n+  private void selectOrMove(Point2D screenPoint) {\n+\n+    // if a feature hasn't been selected, select the feature\n+    if (selectedFeature == null) {\n+      identifyFeature(screenPoint);\n+    } else {\n+      // convert the screen point to a map point\n+      Point mapPoint = mapView.screenToLocation(screenPoint);\n+      // if the feature is a polyline, move the polyline\n+      if (selectedFeatureIsPolyline) {\n+        movePolylineVertex(mapPoint);\n+      } else {\n+        // if the feature is a point, move the point\n+        movePoint(mapPoint);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Identifies a feature near the given screen point.\n+   *\n+   * @param screenPoint the screen point at which to identify a feature\n+   */\n+  private void identifyFeature(Point2D screenPoint) {\n+\n+    // clear any previously selected features\n+    clearSelection();\n+\n+    // identify across all layers\n+    ListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 10, false);\n+    identifyLayerResultsFuture.addDoneListener(() -> {\n+      try {\n+        // get the list of results from the future\n+        List<IdentifyLayerResult> identifyLayerResults = identifyLayerResultsFuture.get();\n+        // for each layer from which an element was identified\n+        for (IdentifyLayerResult layerResult : identifyLayerResults) {\n+          // check if the layer is a feature layer, thereby excluding annotation layers\n+          if (layerResult.getLayerContent() instanceof FeatureLayer) {\n+            // get a reference to the identified feature\n+            selectedFeature = (Feature) layerResult.getElements().get(0);\n+            // check the geometry and select the feature\n+            selectFeature(layerResult);\n+            return;\n+          }\n+        }\n+      } catch (Exception e) {\n+        new Alert(Alert.AlertType.ERROR, \"Error identifying the clicked feature.\").show();\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Checks if the identified feature is a straight polyline or a point, and select the feature.\n+   * For a point feature, show a dialog to edit attributes. Future clicks will call move functions.\n+   *\n+   * @param layerResult the identify layer result from which to select a feature\n+   */\n+  private void selectFeature(IdentifyLayerResult layerResult) {\n+\n+    // if the selected feature is a polyline\n+    if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POLYLINE) {\n+      // create a polyline builder from the selected feature\n+      PolylineBuilder polylineBuilder = new PolylineBuilder((Polyline) selectedFeature.getGeometry());\n+      // get a list of parts of the selected polyline\n+      List<Part> parts = polylineBuilder.getParts();\n+      parts.forEach(part -> {\n+        // only select single segment lines\n+        if (part.getPointCount() <= 2) {\n+          // select the polyline feature\n+          ((FeatureLayer) layerResult.getLayerContent()).selectFeature(selectedFeature);\n+          selectedFeatureIsPolyline = true;\n+        } else {\n+          selectedFeature = null;\n+          // show message reminding user to select straight (single segment) polylines only\n+          new Alert(Alert.AlertType.WARNING, \"Select straight (single segment) polylines only.\").show();\n+        }\n+      });\n+    }\n+    // if the selected feature is a point, select the feature\n+    else if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POINT) {\n+      ((FeatureLayer) layerResult.getLayerContent()).selectFeature(selectedFeature);\n+      // open a dialog to edit the feature's attributes\n+      showEditableAttributes(selectedFeature);\n+    } else {\n+      new Alert(Alert.AlertType.WARNING, \"Feature of unexpected geometry type selected.\").show();\n+    }\n+  }\n+\n+  /**\n+   * Creates a dialog with text fields to allow editing of the given feature's 'AD_ADDRESS' and\n+   * 'ST_STR_NAM' attributes.\n+   *\n+   * @param selectedFeature the feature to update\n+   */\n+  private void showEditableAttributes(Feature selectedFeature) {\n+\n+    // create a dialog to edit the attributes of the selected feature\n+    EditAttributesDialog editAttributesDialog = new EditAttributesDialog(selectedFeature);\n+\n+    // show the dialog and wait for the user response\n+    editAttributesDialog.showAndWait();\n+\n+    // update the selected feature's feature table\n+    updateAttributes(selectedFeature);\n+  }\n+\n+  /**\n+   * Updates the attributes of the selected feature.\n+   *\n+   * @param selectedFeature the feature to update\n+   */\n+  static void updateAttributes(Feature selectedFeature) {\n+\n+    // update feature in the feature table\n+    ListenableFuture<Void> editResultFuture = selectedFeature.getFeatureTable().updateFeatureAsync(selectedFeature);\n+    editResultFuture.addDoneListener(() -> {\n+        try {\n+            editResultFuture.get();\n+        } catch (InterruptedException | ExecutionException e) {\n+          new Alert(Alert.AlertType.ERROR, \"Error updating attributes.\").show();\n+        }\n+      }\n+    );\n+  }\n+\n+  /**\n+   * Moves the selected point feature to the given map point by updating the selected\n+   * feature's geometry and feature table.\n+   *\n+   * @param mapPoint the location to move point feature\n+   */\n+  private void movePoint(Point mapPoint) {\n+\n+    // set the selected features' geometry to a new map point\n+    selectedFeature.setGeometry(mapPoint);\n+\n+    // update the selected feature's feature table\n+    updateAttributes(selectedFeature);\n+\n+    // clear selection of the point\n+    clearSelection();\n+  }\n+\n+  /**\n+   * Moves the last of the vertex point of the currently selected polyline to the given map point by updating the\n+   * selected feature's geometry and feature table.\n+   *\n+   * @param mapPoint the location to move polyline feature\n+   */\n+  private void movePolylineVertex(Point mapPoint) {\n+\n+    // get the selected feature's geometry as a polyline\n+    Polyline polyline = (Polyline) selectedFeature.getGeometry();\n+\n+    // create a polyline builder to add and remove parts from the polyline\n+    PolylineBuilder polylineBuilder = new PolylineBuilder(polyline);\n+\n+    // get the nearest vertex to the map point on the polyline\n+    ProximityResult nearestVertex =\n+      GeometryEngine.nearestVertex(polyline, (Point) GeometryEngine.project(mapPoint, polyline.getSpatialReference()));\n+\n+    // get the part of the polyline nearest to the map point\n+    Part part = polylineBuilder.getParts().get((int) nearestVertex.getPartIndex());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96616d1bf0b0e6b2cabb316cb505a714b85479a"}, "originalPosition": 294}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTc5OTI3OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzo1MjozOFrOHOAJjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzo1MjozOFrOHOAJjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ0NDU1OQ==", "bodyText": "since we don't use the variable parts more than once, we can directly add the forEach like so:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  List<Part> parts = polylineBuilder.getParts();\n          \n          \n            \n                  parts.forEach(part -> {\n          \n          \n            \n                  polylineBuilder.getParts().forEach(part -> {", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r484444559", "createdAt": "2020-09-07T13:52:38Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private FeatureLayer addressPointFeatureLayer;\n+  private FeatureLayer parcelLinesFeatureLayer;\n+  private AnnotationLayer addressPointsAnnotationLayer;\n+  private AnnotationLayer parcelLinesAnnotationLayer;\n+  private Feature selectedFeature = null;\n+  private boolean selectedFeatureIsPolyline = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+      \n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./samples-data/loudon/loudoun_anno.geodatabase\");\n+      Geodatabase geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          addressPointFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          parcelLinesFeatureLayer = new FeatureLayer(geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          addressPointsAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          parcelLinesAnnotationLayer = new AnnotationLayer(geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers to the map\n+          map.getOperationalLayers().add(addressPointFeatureLayer);\n+          map.getOperationalLayers().add(parcelLinesFeatureLayer);\n+\n+          // add the annotation layers to the map\n+          map.getOperationalLayers().add(addressPointsAnnotationLayer);\n+          map.getOperationalLayers().add(parcelLinesAnnotationLayer);\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+      geodatabase.loadAsync();\n+\n+      // set on click behaviour\n+      mapView.setOnMouseClicked(event -> {\n+        // check that the primary mouse button was clicked\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // call select or move method to move to the point\n+          selectOrMove(screenPoint);\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Selects the nearest feature, or move the point or polyline vertex to the given screen point.\n+   *\n+   * @param screenPoint the screen point at which to select a feature, or to move a feature to\n+   */\n+  private void selectOrMove(Point2D screenPoint) {\n+\n+    // if a feature hasn't been selected, select the feature\n+    if (selectedFeature == null) {\n+      identifyFeature(screenPoint);\n+    } else {\n+      // convert the screen point to a map point\n+      Point mapPoint = mapView.screenToLocation(screenPoint);\n+      // if the feature is a polyline, move the polyline\n+      if (selectedFeatureIsPolyline) {\n+        movePolylineVertex(mapPoint);\n+      } else {\n+        // if the feature is a point, move the point\n+        movePoint(mapPoint);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Identifies a feature near the given screen point.\n+   *\n+   * @param screenPoint the screen point at which to identify a feature\n+   */\n+  private void identifyFeature(Point2D screenPoint) {\n+\n+    // clear any previously selected features\n+    clearSelection();\n+\n+    // identify across all layers\n+    ListenableFuture<List<IdentifyLayerResult>> identifyLayerResultsFuture = mapView.identifyLayersAsync(screenPoint, 10, false);\n+    identifyLayerResultsFuture.addDoneListener(() -> {\n+      try {\n+        // get the list of results from the future\n+        List<IdentifyLayerResult> identifyLayerResults = identifyLayerResultsFuture.get();\n+        // for each layer from which an element was identified\n+        for (IdentifyLayerResult layerResult : identifyLayerResults) {\n+          // check if the layer is a feature layer, thereby excluding annotation layers\n+          if (layerResult.getLayerContent() instanceof FeatureLayer) {\n+            // get a reference to the identified feature\n+            selectedFeature = (Feature) layerResult.getElements().get(0);\n+            // check the geometry and select the feature\n+            selectFeature(layerResult);\n+            return;\n+          }\n+        }\n+      } catch (Exception e) {\n+        new Alert(Alert.AlertType.ERROR, \"Error identifying the clicked feature.\").show();\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Checks if the identified feature is a straight polyline or a point, and select the feature.\n+   * For a point feature, show a dialog to edit attributes. Future clicks will call move functions.\n+   *\n+   * @param layerResult the identify layer result from which to select a feature\n+   */\n+  private void selectFeature(IdentifyLayerResult layerResult) {\n+\n+    // if the selected feature is a polyline\n+    if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POLYLINE) {\n+      // create a polyline builder from the selected feature\n+      PolylineBuilder polylineBuilder = new PolylineBuilder((Polyline) selectedFeature.getGeometry());\n+      // get a list of parts of the selected polyline\n+      List<Part> parts = polylineBuilder.getParts();\n+      parts.forEach(part -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96616d1bf0b0e6b2cabb316cb505a714b85479a"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjY2NDMwOnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOTo1NzowNVrOHO_7ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOTo1NzowNVrOHO_7ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ4OTU2Ng==", "bodyText": "just some wordsmithing here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // add the feature layers and annotation layers to the map\n          \n          \n            \n                      // add the feature and annotation layers to the map", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r485489566", "createdAt": "2020-09-09T09:57:05Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private Geodatabase geodatabase; // keep loadable in scope to avoid garbage collection\n+  private Feature selectedFeature = null;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+\n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./samples-data/loudon/loudoun_anno.geodatabase\");\n+      geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+\n+      geodatabase.loadAsync();\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          var addressPointFeatureLayer = new FeatureLayer(\n+            geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          var parcelLinesFeatureLayer = new FeatureLayer(\n+            geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          var addressPointsAnnotationLayer = new AnnotationLayer(\n+            geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          var parcelLinesAnnotationLayer = new AnnotationLayer(\n+            geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers and annotation layers to the map", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924c240f55b27603be178aef26019340df599dc7"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjY2OTU1OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOTo1ODoyMFrOHO_-uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOTo1ODoyMFrOHO_-uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5MDM2Mw==", "bodyText": "correcting apostrophe\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          // set the selected features' geometry to a new map point\n          \n          \n            \n                          // set the selected feature's geometry to a new map point", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r485490363", "createdAt": "2020-09-09T09:58:20Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private Geodatabase geodatabase; // keep loadable in scope to avoid garbage collection\n+  private Feature selectedFeature = null;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+\n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./samples-data/loudon/loudoun_anno.geodatabase\");\n+      geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+\n+      geodatabase.loadAsync();\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          var addressPointFeatureLayer = new FeatureLayer(\n+            geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          var parcelLinesFeatureLayer = new FeatureLayer(\n+            geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          var addressPointsAnnotationLayer = new AnnotationLayer(\n+            geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          var parcelLinesAnnotationLayer = new AnnotationLayer(\n+            geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers and annotation layers to the map\n+          map.getOperationalLayers().addAll(Arrays.asList(\n+            addressPointFeatureLayer, parcelLinesFeatureLayer, addressPointsAnnotationLayer, parcelLinesAnnotationLayer));\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+\n+      // select the nearest feature from where the user clicked, or move the selected feature to the given screen point\n+      mapView.setOnMouseClicked(event -> {\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // if a feature hasn't been selected, select the feature\n+          if (selectedFeature == null) {\n+            identifyFeature(screenPoint);\n+          } else {\n+            // convert the screen point to a map point\n+            Point mapPoint = mapView.screenToLocation(screenPoint);\n+\n+            // if the feature is a polyline, move the polyline\n+            if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POLYLINE) {\n+              // get the selected feature's geometry as a polyline\n+              Polyline polyline = (Polyline) selectedFeature.getGeometry();\n+\n+              // create a polyline builder to add and remove parts from the polyline\n+              PolylineBuilder polylineBuilder = new PolylineBuilder(polyline);\n+\n+              // get the nearest vertex to the map point on the polyline\n+              ProximityResult nearestVertex =\n+                GeometryEngine.nearestVertex(polyline, (Point) GeometryEngine.project(mapPoint, polyline.getSpatialReference()));\n+\n+              // get the part of the polyline nearest to the map point\n+              Part part = polylineBuilder.getParts().get(Math.toIntExact(nearestVertex.getPartIndex()));\n+\n+              // remove the nearest point to the map point from the part\n+              part.removePoint((int) nearestVertex.getPointIndex());\n+\n+              // add the map point as the new point on the part\n+              part.addPoint((Point) GeometryEngine.project(mapPoint, polyline.getSpatialReference()));\n+\n+              // set the selected feature's geometry to the new polyline\n+              selectedFeature.setGeometry(polylineBuilder.toGeometry());\n+\n+              // if the feature is a point, move the point\n+            } else if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POINT) {\n+              // set the selected features' geometry to a new map point", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924c240f55b27603be178aef26019340df599dc7"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjY3NzY2OnYy", "diffSide": "RIGHT", "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDowMDoyOVrOHPADwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDowMDoyOVrOHPADwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5MTY1MA==", "bodyText": "just a suggestion: I think this might be a littler clearer, but up to you if you want to accept this change!\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // clear the selected feature\n          \n          \n            \n                        // remove the selection of the feature", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/543#discussion_r485491650", "createdAt": "2020-09-09T10:00:29Z", "author": {"login": "Rachael-E"}, "path": "editing/edit-features-with-feature-linked-annotation/src/main/java/com.esri.samples.edit_features_with_feature_linked_annotation/EditFeaturesWithFeatureLinkedAnnotationSample.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.edit_features_with_feature_linked_annotation;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.Feature;\n+import com.esri.arcgisruntime.data.Geodatabase;\n+import com.esri.arcgisruntime.geometry.GeometryEngine;\n+import com.esri.arcgisruntime.geometry.GeometryType;\n+import com.esri.arcgisruntime.geometry.Part;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.ProximityResult;\n+import com.esri.arcgisruntime.layers.AnnotationLayer;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.IdentifyLayerResult;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+public class EditFeaturesWithFeatureLinkedAnnotationSample extends Application {\n+\n+  private MapView mapView;\n+  private Geodatabase geodatabase; // keep loadable in scope to avoid garbage collection\n+  private Feature selectedFeature = null;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add JavaFX scene to stage\n+      stage.setTitle(\"Edit Features With Feature-linked Annotation Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create the map with a light gray canvas basemap centered on Loudoun, Virginia\n+      ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS_VECTOR, 39.0204, -77.4159, 18);\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // add the map view to stack pane\n+      stackPane.getChildren().addAll(mapView);\n+\n+      // create and load the geodatabase\n+      File geodatabaseFile = new File(System.getProperty(\"data.dir\"),\n+        \"./samples-data/loudon/loudoun_anno.geodatabase\");\n+      geodatabase = new Geodatabase(geodatabaseFile.getAbsolutePath());\n+\n+      geodatabase.loadAsync();\n+      geodatabase.addDoneLoadingListener(() -> {\n+        if (geodatabase.getLoadStatus() == LoadStatus.LOADED) {\n+          // create feature layers from tables in the geodatabase\n+          var addressPointFeatureLayer = new FeatureLayer(\n+            geodatabase.getGeodatabaseFeatureTable(\"Loudoun_Address_Points_1\"));\n+          var parcelLinesFeatureLayer = new FeatureLayer(\n+            geodatabase.getGeodatabaseFeatureTable(\"ParcelLines_1\"));\n+          // create annotation layers from tables in the geodatabase\n+          var addressPointsAnnotationLayer = new AnnotationLayer(\n+            geodatabase.getGeodatabaseAnnotationTable(\"Loudoun_Address_PointsAnno_1\"));\n+          var parcelLinesAnnotationLayer = new AnnotationLayer(\n+            geodatabase.getGeodatabaseAnnotationTable(\"ParcelLinesAnno_1\"));\n+\n+          // add the feature layers and annotation layers to the map\n+          map.getOperationalLayers().addAll(Arrays.asList(\n+            addressPointFeatureLayer, parcelLinesFeatureLayer, addressPointsAnnotationLayer, parcelLinesAnnotationLayer));\n+        } else {\n+          // show alert if geodatabase fails to load\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Geodatabase.\").show();\n+        }\n+      });\n+\n+      // select the nearest feature from where the user clicked, or move the selected feature to the given screen point\n+      mapView.setOnMouseClicked(event -> {\n+        if (event.isStillSincePress() && event.getButton() == MouseButton.PRIMARY) {\n+          // create a point where the user clicked\n+          Point2D screenPoint = new Point2D(event.getX(), event.getY());\n+          // if a feature hasn't been selected, select the feature\n+          if (selectedFeature == null) {\n+            identifyFeature(screenPoint);\n+          } else {\n+            // convert the screen point to a map point\n+            Point mapPoint = mapView.screenToLocation(screenPoint);\n+\n+            // if the feature is a polyline, move the polyline\n+            if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POLYLINE) {\n+              // get the selected feature's geometry as a polyline\n+              Polyline polyline = (Polyline) selectedFeature.getGeometry();\n+\n+              // create a polyline builder to add and remove parts from the polyline\n+              PolylineBuilder polylineBuilder = new PolylineBuilder(polyline);\n+\n+              // get the nearest vertex to the map point on the polyline\n+              ProximityResult nearestVertex =\n+                GeometryEngine.nearestVertex(polyline, (Point) GeometryEngine.project(mapPoint, polyline.getSpatialReference()));\n+\n+              // get the part of the polyline nearest to the map point\n+              Part part = polylineBuilder.getParts().get(Math.toIntExact(nearestVertex.getPartIndex()));\n+\n+              // remove the nearest point to the map point from the part\n+              part.removePoint((int) nearestVertex.getPointIndex());\n+\n+              // add the map point as the new point on the part\n+              part.addPoint((Point) GeometryEngine.project(mapPoint, polyline.getSpatialReference()));\n+\n+              // set the selected feature's geometry to the new polyline\n+              selectedFeature.setGeometry(polylineBuilder.toGeometry());\n+\n+              // if the feature is a point, move the point\n+            } else if (selectedFeature.getGeometry().getGeometryType() == GeometryType.POINT) {\n+              // set the selected features' geometry to a new map point\n+              selectedFeature.setGeometry(mapPoint);\n+            }\n+            // update the selected feature's feature table\n+            updateAttributes(selectedFeature);\n+\n+            // clear the selected feature", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924c240f55b27603be178aef26019340df599dc7"}, "originalPosition": 153}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 81, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}