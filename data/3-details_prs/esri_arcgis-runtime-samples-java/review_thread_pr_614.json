{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NDcyNjkx", "number": 614, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzoyNzo0MVrOFFllKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMzo1MTowOFrOFYZGLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDAyOTIxOnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzoyNzo0MVrOIGK04Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMzo0MjowM1rOIiWkSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzOTc0NQ==", "bodyText": "I think it would make sense to keep raster as singular throughout, unless there's a mechanism to apply a rule to a whole group of rasters in bulk?\nHowever if the design for this is already finalised, just disregard this comment \ud83d\ude01\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Apply mosaic rule to rasters\n          \n          \n            \n            # Apply mosaic rule to raster", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r543339745", "createdAt": "2020-12-15T13:27:41Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/README.md", "diffHunk": "@@ -0,0 +1,43 @@\n+# Apply mosaic rule to rasters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzcxNzAxNA==", "bodyText": "The design has been finalized, so I'll stick with rasters!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r567717014", "createdAt": "2021-02-01T10:32:23Z", "author": {"login": "sclaridge"}, "path": "raster/apply-mosaic-rule-to-rasters/README.md", "diffHunk": "@@ -0,0 +1,43 @@\n+# Apply mosaic rule to rasters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzOTc0NQ=="}, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg5MjIzMw==", "bodyText": "I agree with Jon here, though checking the design I now understand why it's plural:\n\nMosaic rules are applied to mosaic datasets, which are a mesh of several rasters managed together as one", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r572892233", "createdAt": "2021-02-09T13:42:03Z", "author": {"login": "Rachael-E"}, "path": "raster/apply-mosaic-rule-to-rasters/README.md", "diffHunk": "@@ -0,0 +1,43 @@\n+# Apply mosaic rule to rasters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzOTc0NQ=="}, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDA0OTc2OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozMTo0NlrOIGLAtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozMTo0NlrOIGLAtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0Mjc3Mw==", "bodyText": "Maybe we can be a bit more specific and name this mosaicRuleComboBox?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r543342773", "createdAt": "2020-12-15T13:31:46Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a label\n+      Label mosaicRuleLabel = new Label(\"Choose a mosaic rule: \");\n+      mosaicRuleLabel.setTextFill(Color.WHITE);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDA1ODA4OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozMzozNFrOIGLFrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozMzozNFrOIGLFrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NDA0NA==", "bodyText": "Should we just put the URL right in the constructor to avoid making a String variable only used once?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  String imageServiceURL = \"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\";\n          \n          \n            \n                  ImageServiceRaster imageServiceRaster = new ImageServiceRaster(imageServiceURL);\n          \n          \n            \n                  ImageServiceRaster imageServiceRaster =\n          \n          \n            \n                   new ImageServiceRaster(\"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\");", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r543344044", "createdAt": "2020-12-15T13:33:34Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a label\n+      Label mosaicRuleLabel = new Label(\"Choose a mosaic rule: \");\n+      mosaicRuleLabel.setTextFill(Color.WHITE);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+\n+      // set up the control panel UI\n+      VBox controlsVBox = new VBox(6);\n+      controlsVBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0, 0, 0, 0.3)\"),\n+        CornerRadii.EMPTY, Insets.EMPTY)));\n+      controlsVBox.setPadding(new Insets(10.0));\n+      controlsVBox.setMaxSize(210, 50);\n+      controlsVBox.setVisible(false);\n+      // add the label and combo box to the control panel\n+      controlsVBox.getChildren().addAll(mosaicRuleLabel, comboBox);\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // add draw status listener to the map view\n+      mapView.addDrawStatusChangedListener (drawStatusChangedEvent -> {\n+        // show progress indicator while map view is drawing\n+        if (drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS) {\n+          progressIndicator.setVisible(true);\n+        }\n+        else {\n+          progressIndicator.setVisible(false);\n+        }\n+      });\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set the map to the map view\n+      mapView.setMap(map);\n+\n+      // create a raster layer from the image service raster\n+      String imageServiceURL = \"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\";\n+      ImageServiceRaster imageServiceRaster = new ImageServiceRaster(imageServiceURL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDA3Mjg4OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozNjo0N1rOIGLOHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozNjo0N1rOIGLOHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NjIwNg==", "bodyText": "I've never actually seen .setValue. Should maybe double check that it's doing the same as           comboBox.getSelectionModel().select(0);?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r543346206", "createdAt": "2020-12-15T13:36:47Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a label\n+      Label mosaicRuleLabel = new Label(\"Choose a mosaic rule: \");\n+      mosaicRuleLabel.setTextFill(Color.WHITE);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+\n+      // set up the control panel UI\n+      VBox controlsVBox = new VBox(6);\n+      controlsVBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0, 0, 0, 0.3)\"),\n+        CornerRadii.EMPTY, Insets.EMPTY)));\n+      controlsVBox.setPadding(new Insets(10.0));\n+      controlsVBox.setMaxSize(210, 50);\n+      controlsVBox.setVisible(false);\n+      // add the label and combo box to the control panel\n+      controlsVBox.getChildren().addAll(mosaicRuleLabel, comboBox);\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // add draw status listener to the map view\n+      mapView.addDrawStatusChangedListener (drawStatusChangedEvent -> {\n+        // show progress indicator while map view is drawing\n+        if (drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS) {\n+          progressIndicator.setVisible(true);\n+        }\n+        else {\n+          progressIndicator.setVisible(false);\n+        }\n+      });\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set the map to the map view\n+      mapView.setMap(map);\n+\n+      // create a raster layer from the image service raster\n+      String imageServiceURL = \"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\";\n+      ImageServiceRaster imageServiceRaster = new ImageServiceRaster(imageServiceURL);\n+      rasterLayer = new RasterLayer(imageServiceRaster);\n+\n+      // add raster layer as an operational layer to the map\n+      map.getOperationalLayers().add(rasterLayer);\n+\n+      // listen for the raster layer to finish loading\n+      rasterLayer.addDoneLoadingListener(() -> {\n+        if (rasterLayer.getLoadStatus() == LoadStatus.LOADED) {\n+          // when loaded, set map view's viewpoint to the image service raster's center\n+          mapView.setViewpoint(new Viewpoint(imageServiceRaster.getServiceInfo().getFullExtent().getCenter(), 25000.0));\n+\n+          // enable UI interaction once the raster layer has loaded\n+          controlsVBox.setVisible(true);\n+\n+          // add the mosaic rules to the combo box\n+          comboBox.getItems().addAll(\"Default\", \"Northwest\", \"Center\", \"By attribute\", \"Lock raster\");\n+\n+          // set the default combo box value\n+          comboBox.setValue(\"Default\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDA4Nzc4OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozOTo0NlrOIGLWrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozOTo0NlrOIGLWrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0ODM5Nw==", "bodyText": "I think we can do these things independently from waiting for the RasterLayer to load, and it might make sense to move them closer to line 152 (where we add the listener: comboBox.getSelectionModel().selectedItemProperty().addListener)? That way it's clearer what these added values are going to be used for", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r543348397", "createdAt": "2020-12-15T13:39:46Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a label\n+      Label mosaicRuleLabel = new Label(\"Choose a mosaic rule: \");\n+      mosaicRuleLabel.setTextFill(Color.WHITE);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+\n+      // set up the control panel UI\n+      VBox controlsVBox = new VBox(6);\n+      controlsVBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0, 0, 0, 0.3)\"),\n+        CornerRadii.EMPTY, Insets.EMPTY)));\n+      controlsVBox.setPadding(new Insets(10.0));\n+      controlsVBox.setMaxSize(210, 50);\n+      controlsVBox.setVisible(false);\n+      // add the label and combo box to the control panel\n+      controlsVBox.getChildren().addAll(mosaicRuleLabel, comboBox);\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // add draw status listener to the map view\n+      mapView.addDrawStatusChangedListener (drawStatusChangedEvent -> {\n+        // show progress indicator while map view is drawing\n+        if (drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS) {\n+          progressIndicator.setVisible(true);\n+        }\n+        else {\n+          progressIndicator.setVisible(false);\n+        }\n+      });\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set the map to the map view\n+      mapView.setMap(map);\n+\n+      // create a raster layer from the image service raster\n+      String imageServiceURL = \"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\";\n+      ImageServiceRaster imageServiceRaster = new ImageServiceRaster(imageServiceURL);\n+      rasterLayer = new RasterLayer(imageServiceRaster);\n+\n+      // add raster layer as an operational layer to the map\n+      map.getOperationalLayers().add(rasterLayer);\n+\n+      // listen for the raster layer to finish loading\n+      rasterLayer.addDoneLoadingListener(() -> {\n+        if (rasterLayer.getLoadStatus() == LoadStatus.LOADED) {\n+          // when loaded, set map view's viewpoint to the image service raster's center\n+          mapView.setViewpoint(new Viewpoint(imageServiceRaster.getServiceInfo().getFullExtent().getCenter(), 25000.0));\n+\n+          // enable UI interaction once the raster layer has loaded\n+          controlsVBox.setVisible(true);\n+\n+          // add the mosaic rules to the combo box\n+          comboBox.getItems().addAll(\"Default\", \"Northwest\", \"Center\", \"By attribute\", \"Lock raster\");\n+\n+          // set the default combo box value\n+          comboBox.setValue(\"Default\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDA5NTQyOnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0MToyN1rOIGLbSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0MToyN1rOIGLbSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0OTU3OA==", "bodyText": "In @jenmerritt new sample, there is a method setupUI (or similarly named), that hides all this javaFX stuff a bit further to the bottom of the file. Might be worth considering this as a new pattern? Perhaps a discussion with @Rachael-E and Mark on this would be good? After all, it just distracts a bit from the ArcGIS runtime goodness", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r543349578", "createdAt": "2020-12-15T13:41:27Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a label\n+      Label mosaicRuleLabel = new Label(\"Choose a mosaic rule: \");\n+      mosaicRuleLabel.setTextFill(Color.WHITE);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+\n+      // set up the control panel UI\n+      VBox controlsVBox = new VBox(6);\n+      controlsVBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0, 0, 0, 0.3)\"),\n+        CornerRadii.EMPTY, Insets.EMPTY)));\n+      controlsVBox.setPadding(new Insets(10.0));\n+      controlsVBox.setMaxSize(210, 50);\n+      controlsVBox.setVisible(false);\n+      // add the label and combo box to the control panel\n+      controlsVBox.getChildren().addAll(mosaicRuleLabel, comboBox);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDEwMzk4OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0MzowMVrOIGLgCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMzo0NDowM1rOIiWpyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1MDc5NQ==", "bodyText": "Double check with @Rachael-E if we want to show the contents of the exception/load error as a standard for samples now?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r543350795", "createdAt": "2020-12-15T13:43:01Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a label\n+      Label mosaicRuleLabel = new Label(\"Choose a mosaic rule: \");\n+      mosaicRuleLabel.setTextFill(Color.WHITE);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+\n+      // set up the control panel UI\n+      VBox controlsVBox = new VBox(6);\n+      controlsVBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0, 0, 0, 0.3)\"),\n+        CornerRadii.EMPTY, Insets.EMPTY)));\n+      controlsVBox.setPadding(new Insets(10.0));\n+      controlsVBox.setMaxSize(210, 50);\n+      controlsVBox.setVisible(false);\n+      // add the label and combo box to the control panel\n+      controlsVBox.getChildren().addAll(mosaicRuleLabel, comboBox);\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // add draw status listener to the map view\n+      mapView.addDrawStatusChangedListener (drawStatusChangedEvent -> {\n+        // show progress indicator while map view is drawing\n+        if (drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS) {\n+          progressIndicator.setVisible(true);\n+        }\n+        else {\n+          progressIndicator.setVisible(false);\n+        }\n+      });\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set the map to the map view\n+      mapView.setMap(map);\n+\n+      // create a raster layer from the image service raster\n+      String imageServiceURL = \"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\";\n+      ImageServiceRaster imageServiceRaster = new ImageServiceRaster(imageServiceURL);\n+      rasterLayer = new RasterLayer(imageServiceRaster);\n+\n+      // add raster layer as an operational layer to the map\n+      map.getOperationalLayers().add(rasterLayer);\n+\n+      // listen for the raster layer to finish loading\n+      rasterLayer.addDoneLoadingListener(() -> {\n+        if (rasterLayer.getLoadStatus() == LoadStatus.LOADED) {\n+          // when loaded, set map view's viewpoint to the image service raster's center\n+          mapView.setViewpoint(new Viewpoint(imageServiceRaster.getServiceInfo().getFullExtent().getCenter(), 25000.0));\n+\n+          // enable UI interaction once the raster layer has loaded\n+          controlsVBox.setVisible(true);\n+\n+          // add the mosaic rules to the combo box\n+          comboBox.getItems().addAll(\"Default\", \"Northwest\", \"Center\", \"By attribute\", \"Lock raster\");\n+\n+          // set the default combo box value\n+          comboBox.setValue(\"Default\");\n+\n+          // create a mosaic rule for the image service raster if one does not already exist\n+          if (imageServiceRaster.getMosaicRule() == null) {\n+            mosaicRule = new MosaicRule();\n+            imageServiceRaster.setMosaicRule(mosaicRule);\n+          }\n+        } else {\n+          // show alert if raster layer fails to load.\n+          new Alert(Alert.AlertType.ERROR, \"Error loading raster layer.\").show();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg5MzY0MQ==", "bodyText": "yeh we could add that in here since this dialog box would pop up: if there is a meaningful message. Sometimes there isn't in which case we don't put that extra detail in.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r572893641", "createdAt": "2021-02-09T13:44:03Z", "author": {"login": "Rachael-E"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a label\n+      Label mosaicRuleLabel = new Label(\"Choose a mosaic rule: \");\n+      mosaicRuleLabel.setTextFill(Color.WHITE);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+\n+      // set up the control panel UI\n+      VBox controlsVBox = new VBox(6);\n+      controlsVBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0, 0, 0, 0.3)\"),\n+        CornerRadii.EMPTY, Insets.EMPTY)));\n+      controlsVBox.setPadding(new Insets(10.0));\n+      controlsVBox.setMaxSize(210, 50);\n+      controlsVBox.setVisible(false);\n+      // add the label and combo box to the control panel\n+      controlsVBox.getChildren().addAll(mosaicRuleLabel, comboBox);\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // add draw status listener to the map view\n+      mapView.addDrawStatusChangedListener (drawStatusChangedEvent -> {\n+        // show progress indicator while map view is drawing\n+        if (drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS) {\n+          progressIndicator.setVisible(true);\n+        }\n+        else {\n+          progressIndicator.setVisible(false);\n+        }\n+      });\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set the map to the map view\n+      mapView.setMap(map);\n+\n+      // create a raster layer from the image service raster\n+      String imageServiceURL = \"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\";\n+      ImageServiceRaster imageServiceRaster = new ImageServiceRaster(imageServiceURL);\n+      rasterLayer = new RasterLayer(imageServiceRaster);\n+\n+      // add raster layer as an operational layer to the map\n+      map.getOperationalLayers().add(rasterLayer);\n+\n+      // listen for the raster layer to finish loading\n+      rasterLayer.addDoneLoadingListener(() -> {\n+        if (rasterLayer.getLoadStatus() == LoadStatus.LOADED) {\n+          // when loaded, set map view's viewpoint to the image service raster's center\n+          mapView.setViewpoint(new Viewpoint(imageServiceRaster.getServiceInfo().getFullExtent().getCenter(), 25000.0));\n+\n+          // enable UI interaction once the raster layer has loaded\n+          controlsVBox.setVisible(true);\n+\n+          // add the mosaic rules to the combo box\n+          comboBox.getItems().addAll(\"Default\", \"Northwest\", \"Center\", \"By attribute\", \"Lock raster\");\n+\n+          // set the default combo box value\n+          comboBox.setValue(\"Default\");\n+\n+          // create a mosaic rule for the image service raster if one does not already exist\n+          if (imageServiceRaster.getMosaicRule() == null) {\n+            mosaicRule = new MosaicRule();\n+            imageServiceRaster.setMosaicRule(mosaicRule);\n+          }\n+        } else {\n+          // show alert if raster layer fails to load.\n+          new Alert(Alert.AlertType.ERROR, \"Error loading raster layer.\").show();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1MDc5NQ=="}, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDExNjU1OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0NTozNVrOIGLnQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0NTozNVrOIGLnQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1MjY0Mw==", "bodyText": "I think the established order for this after the recent PRs was something along the lines of:\n(not 100% about the comments though, @jenmerritt could advise?)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // create a map with the light gray basemap style\n          \n          \n            \n                  ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n          \n          \n            \n            \n          \n          \n            \n                  // set the map to the map view\n          \n          \n            \n                  mapView.setMap(map);\n          \n          \n            \n                  // create a map with the light gray basemap style\n          \n          \n            \n                  ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n          \n          \n            \n            \t\n          \n          \n            \n            \t  // create a map view and set its map\n          \n          \n            \n                  mapView = new MapView();\n          \n          \n            \n                  mapView.setMap(map);\n          \n      \n    \n    \n  \n\nWe'd then need to move mapView.addDrawStatusChangedListener down below this", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r543352643", "createdAt": "2020-12-15T13:45:35Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a label\n+      Label mosaicRuleLabel = new Label(\"Choose a mosaic rule: \");\n+      mosaicRuleLabel.setTextFill(Color.WHITE);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+\n+      // set up the control panel UI\n+      VBox controlsVBox = new VBox(6);\n+      controlsVBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0, 0, 0, 0.3)\"),\n+        CornerRadii.EMPTY, Insets.EMPTY)));\n+      controlsVBox.setPadding(new Insets(10.0));\n+      controlsVBox.setMaxSize(210, 50);\n+      controlsVBox.setVisible(false);\n+      // add the label and combo box to the control panel\n+      controlsVBox.getChildren().addAll(mosaicRuleLabel, comboBox);\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // add draw status listener to the map view\n+      mapView.addDrawStatusChangedListener (drawStatusChangedEvent -> {\n+        // show progress indicator while map view is drawing\n+        if (drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS) {\n+          progressIndicator.setVisible(true);\n+        }\n+        else {\n+          progressIndicator.setVisible(false);\n+        }\n+      });\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set the map to the map view\n+      mapView.setMap(map);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDE1ODUwOnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/build.gradle", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo1NDowNVrOIGL_0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxOTowMjo0NlrOIhyF8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1ODkyOQ==", "bodyText": "I've just noticed this doesn't run the task createGradlePropertiesAndWriteApiKey, meaning it just kind of fails weirdly with a mention of apiKey, if it isn't set inside the gradle.properties already.\nShould run also do that task first, or dependsOn it?\nI know we've recently been implementing this, so just wondering if/where any users would find documentation when they get stuck?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r543358929", "createdAt": "2020-12-15T13:54:05Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/build.gradle", "diffHunk": "@@ -0,0 +1,89 @@\n+plugins {\n+    id 'application'\n+    id 'org.openjfx.javafxplugin' version '0.0.8'\n+}\n+\n+group = 'com.esri.samples'\n+\n+ext {\n+    arcgisVersion = '100.10.0-2993'\n+}\n+\n+javafx {\n+    version = \"11.0.2\"\n+    modules = [ 'javafx.controls', 'javafx.fxml']\n+}\n+\n+compileJava.options.encoding = 'UTF-8'\n+\n+repositories {\n+    jcenter()\n+    maven {\n+        url 'https://esri.jfrog.io/artifactory/arcgis'\n+    }\n+    maven {\n+        url 'http://olympus.esri.com/artifactory/arcgisruntime-repo'\n+    }\n+}\n+\n+configurations {\n+    natives\n+}\n+\n+dependencies {\n+    implementation \"com.esri.arcgisruntime:arcgis-java:$arcgisVersion\"\n+    natives \"com.esri.arcgisruntime:arcgis-java-jnilibs:$arcgisVersion\"\n+    natives \"com.esri.arcgisruntime:arcgis-java-resources:$arcgisVersion\"\n+}\n+\n+task createGradlePropertiesAndWriteApiKey {\n+    description = \"Creates a new gradle.properties file with an empty API key variable in the user home ./gradle folder, if the file doesn't already exist.\"\n+    group = \"build\"\n+    def propertiesFile = new File(\"${System.properties.getProperty(\"user.home\")}/.gradle/gradle.properties\")\n+    if (!propertiesFile.exists()) {\n+        print(\"Go to \" + new URL(\"https://developers.arcgis.com/dashboard\") + \" to get an API key.\")\n+        print(\" Add your API key to ${System.properties.getProperty(\"user.home\")}\\\\.gradle\\\\gradle.properties.\")\n+        propertiesFile.write(\"apiKey = \")\n+    }\n+}\n+\n+task copyNatives(type: Copy) {\n+    description = \"Copies the arcgis native libraries into the project build directory for development.\"\n+    group = \"build\"\n+    configurations.natives.asFileTree.each {\n+        from(zipTree(it))\n+    }\n+    // store native libraries in a common location shared with other samples\n+    into \"${System.properties.getProperty(\"user.home\")}/.arcgis/$arcgisVersion\"\n+}\n+\n+run {\n+    doFirst {\n+        // sets the API key from the gradle.properties file as a Java system property\n+        systemProperty 'apiKey', apiKey", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI5ODU5NA==", "bodyText": "The createGradlePropertiesAndWriteApiKey task should create the gradle properties file when the sample is first built. Does this happen if the sample is built, the file is deleted and the sample is run after?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r544298594", "createdAt": "2020-12-16T13:30:20Z", "author": {"login": "sclaridge"}, "path": "raster/apply-mosaic-rule-to-rasters/build.gradle", "diffHunk": "@@ -0,0 +1,89 @@\n+plugins {\n+    id 'application'\n+    id 'org.openjfx.javafxplugin' version '0.0.8'\n+}\n+\n+group = 'com.esri.samples'\n+\n+ext {\n+    arcgisVersion = '100.10.0-2993'\n+}\n+\n+javafx {\n+    version = \"11.0.2\"\n+    modules = [ 'javafx.controls', 'javafx.fxml']\n+}\n+\n+compileJava.options.encoding = 'UTF-8'\n+\n+repositories {\n+    jcenter()\n+    maven {\n+        url 'https://esri.jfrog.io/artifactory/arcgis'\n+    }\n+    maven {\n+        url 'http://olympus.esri.com/artifactory/arcgisruntime-repo'\n+    }\n+}\n+\n+configurations {\n+    natives\n+}\n+\n+dependencies {\n+    implementation \"com.esri.arcgisruntime:arcgis-java:$arcgisVersion\"\n+    natives \"com.esri.arcgisruntime:arcgis-java-jnilibs:$arcgisVersion\"\n+    natives \"com.esri.arcgisruntime:arcgis-java-resources:$arcgisVersion\"\n+}\n+\n+task createGradlePropertiesAndWriteApiKey {\n+    description = \"Creates a new gradle.properties file with an empty API key variable in the user home ./gradle folder, if the file doesn't already exist.\"\n+    group = \"build\"\n+    def propertiesFile = new File(\"${System.properties.getProperty(\"user.home\")}/.gradle/gradle.properties\")\n+    if (!propertiesFile.exists()) {\n+        print(\"Go to \" + new URL(\"https://developers.arcgis.com/dashboard\") + \" to get an API key.\")\n+        print(\" Add your API key to ${System.properties.getProperty(\"user.home\")}\\\\.gradle\\\\gradle.properties.\")\n+        propertiesFile.write(\"apiKey = \")\n+    }\n+}\n+\n+task copyNatives(type: Copy) {\n+    description = \"Copies the arcgis native libraries into the project build directory for development.\"\n+    group = \"build\"\n+    configurations.natives.asFileTree.each {\n+        from(zipTree(it))\n+    }\n+    // store native libraries in a common location shared with other samples\n+    into \"${System.properties.getProperty(\"user.home\")}/.arcgis/$arcgisVersion\"\n+}\n+\n+run {\n+    doFirst {\n+        // sets the API key from the gradle.properties file as a Java system property\n+        systemProperty 'apiKey', apiKey", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1ODkyOQ=="}, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4MDg0Mw==", "bodyText": "It doesn't seem to do that for me, I have to run the task createGradlePropertiesAndWriteApiKey manually. However it might just be something iffy with my setup. If it works for other people then there's nothing to worry about", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r547180843", "createdAt": "2020-12-22T09:57:13Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/build.gradle", "diffHunk": "@@ -0,0 +1,89 @@\n+plugins {\n+    id 'application'\n+    id 'org.openjfx.javafxplugin' version '0.0.8'\n+}\n+\n+group = 'com.esri.samples'\n+\n+ext {\n+    arcgisVersion = '100.10.0-2993'\n+}\n+\n+javafx {\n+    version = \"11.0.2\"\n+    modules = [ 'javafx.controls', 'javafx.fxml']\n+}\n+\n+compileJava.options.encoding = 'UTF-8'\n+\n+repositories {\n+    jcenter()\n+    maven {\n+        url 'https://esri.jfrog.io/artifactory/arcgis'\n+    }\n+    maven {\n+        url 'http://olympus.esri.com/artifactory/arcgisruntime-repo'\n+    }\n+}\n+\n+configurations {\n+    natives\n+}\n+\n+dependencies {\n+    implementation \"com.esri.arcgisruntime:arcgis-java:$arcgisVersion\"\n+    natives \"com.esri.arcgisruntime:arcgis-java-jnilibs:$arcgisVersion\"\n+    natives \"com.esri.arcgisruntime:arcgis-java-resources:$arcgisVersion\"\n+}\n+\n+task createGradlePropertiesAndWriteApiKey {\n+    description = \"Creates a new gradle.properties file with an empty API key variable in the user home ./gradle folder, if the file doesn't already exist.\"\n+    group = \"build\"\n+    def propertiesFile = new File(\"${System.properties.getProperty(\"user.home\")}/.gradle/gradle.properties\")\n+    if (!propertiesFile.exists()) {\n+        print(\"Go to \" + new URL(\"https://developers.arcgis.com/dashboard\") + \" to get an API key.\")\n+        print(\" Add your API key to ${System.properties.getProperty(\"user.home\")}\\\\.gradle\\\\gradle.properties.\")\n+        propertiesFile.write(\"apiKey = \")\n+    }\n+}\n+\n+task copyNatives(type: Copy) {\n+    description = \"Copies the arcgis native libraries into the project build directory for development.\"\n+    group = \"build\"\n+    configurations.natives.asFileTree.each {\n+        from(zipTree(it))\n+    }\n+    // store native libraries in a common location shared with other samples\n+    into \"${System.properties.getProperty(\"user.home\")}/.arcgis/$arcgisVersion\"\n+}\n+\n+run {\n+    doFirst {\n+        // sets the API key from the gradle.properties file as a Java system property\n+        systemProperty 'apiKey', apiKey", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1ODkyOQ=="}, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjI5NDY0MA==", "bodyText": "we should look into this more: if Jon is coming across this as a first time using this task others will too. I can take a look on a fresh windows setup!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r572294640", "createdAt": "2021-02-08T19:02:46Z", "author": {"login": "Rachael-E"}, "path": "raster/apply-mosaic-rule-to-rasters/build.gradle", "diffHunk": "@@ -0,0 +1,89 @@\n+plugins {\n+    id 'application'\n+    id 'org.openjfx.javafxplugin' version '0.0.8'\n+}\n+\n+group = 'com.esri.samples'\n+\n+ext {\n+    arcgisVersion = '100.10.0-2993'\n+}\n+\n+javafx {\n+    version = \"11.0.2\"\n+    modules = [ 'javafx.controls', 'javafx.fxml']\n+}\n+\n+compileJava.options.encoding = 'UTF-8'\n+\n+repositories {\n+    jcenter()\n+    maven {\n+        url 'https://esri.jfrog.io/artifactory/arcgis'\n+    }\n+    maven {\n+        url 'http://olympus.esri.com/artifactory/arcgisruntime-repo'\n+    }\n+}\n+\n+configurations {\n+    natives\n+}\n+\n+dependencies {\n+    implementation \"com.esri.arcgisruntime:arcgis-java:$arcgisVersion\"\n+    natives \"com.esri.arcgisruntime:arcgis-java-jnilibs:$arcgisVersion\"\n+    natives \"com.esri.arcgisruntime:arcgis-java-resources:$arcgisVersion\"\n+}\n+\n+task createGradlePropertiesAndWriteApiKey {\n+    description = \"Creates a new gradle.properties file with an empty API key variable in the user home ./gradle folder, if the file doesn't already exist.\"\n+    group = \"build\"\n+    def propertiesFile = new File(\"${System.properties.getProperty(\"user.home\")}/.gradle/gradle.properties\")\n+    if (!propertiesFile.exists()) {\n+        print(\"Go to \" + new URL(\"https://developers.arcgis.com/dashboard\") + \" to get an API key.\")\n+        print(\" Add your API key to ${System.properties.getProperty(\"user.home\")}\\\\.gradle\\\\gradle.properties.\")\n+        propertiesFile.write(\"apiKey = \")\n+    }\n+}\n+\n+task copyNatives(type: Copy) {\n+    description = \"Copies the arcgis native libraries into the project build directory for development.\"\n+    group = \"build\"\n+    configurations.natives.asFileTree.each {\n+        from(zipTree(it))\n+    }\n+    // store native libraries in a common location shared with other samples\n+    into \"${System.properties.getProperty(\"user.home\")}/.arcgis/$arcgisVersion\"\n+}\n+\n+run {\n+    doFirst {\n+        // sets the API key from the gradle.properties file as a Java system property\n+        systemProperty 'apiKey', apiKey", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1ODkyOQ=="}, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDE5MDIwOnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowMDowMVrOIGMSLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowMDowMVrOIGMSLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2MzYzMA==", "bodyText": "We can simplify this a fair bit by passing the result of the comparison == straight into .setVisible.\nUp to you and @Rachael-E to decide if this is a sacrifice of legibility though\nOther than that, I think the inside comment does explain the whole block, so we could get rid of // add draw status lisener...\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // add draw status listener to the map view\n          \n          \n            \n                  mapView.addDrawStatusChangedListener (drawStatusChangedEvent -> {\n          \n          \n            \n                    // show progress indicator while map view is drawing\n          \n          \n            \n                    if (drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS) {\n          \n          \n            \n                      progressIndicator.setVisible(true);\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                      progressIndicator.setVisible(false);\n          \n          \n            \n                    }\n          \n          \n            \n                  });\n          \n          \n            \n                  // show progress indicator while map view is drawing\n          \n          \n            \n                  mapView.addDrawStatusChangedListener(drawStatusChangedEvent -> \n          \n          \n            \n                    progressIndicator.setVisible(drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS)\n          \n          \n            \n                  );", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r543363630", "createdAt": "2020-12-15T14:00:01Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a label\n+      Label mosaicRuleLabel = new Label(\"Choose a mosaic rule: \");\n+      mosaicRuleLabel.setTextFill(Color.WHITE);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+\n+      // set up the control panel UI\n+      VBox controlsVBox = new VBox(6);\n+      controlsVBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0, 0, 0, 0.3)\"),\n+        CornerRadii.EMPTY, Insets.EMPTY)));\n+      controlsVBox.setPadding(new Insets(10.0));\n+      controlsVBox.setMaxSize(210, 50);\n+      controlsVBox.setVisible(false);\n+      // add the label and combo box to the control panel\n+      controlsVBox.getChildren().addAll(mosaicRuleLabel, comboBox);\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // add draw status listener to the map view\n+      mapView.addDrawStatusChangedListener (drawStatusChangedEvent -> {\n+        // show progress indicator while map view is drawing\n+        if (drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS) {\n+          progressIndicator.setVisible(true);\n+        }\n+        else {\n+          progressIndicator.setVisible(false);\n+        }\n+      });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDE5MzU2OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowMDozOVrOIGMUKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowMDozOVrOIGMUKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2NDEzOA==", "bodyText": "I think wait is a bit more plain english than the technical term listen\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // listen for the raster layer to finish loading\n          \n          \n            \n                  // wait for the raster layer to finish loading", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r543364138", "createdAt": "2020-12-15T14:00:39Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a label\n+      Label mosaicRuleLabel = new Label(\"Choose a mosaic rule: \");\n+      mosaicRuleLabel.setTextFill(Color.WHITE);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+\n+      // set up the control panel UI\n+      VBox controlsVBox = new VBox(6);\n+      controlsVBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0, 0, 0, 0.3)\"),\n+        CornerRadii.EMPTY, Insets.EMPTY)));\n+      controlsVBox.setPadding(new Insets(10.0));\n+      controlsVBox.setMaxSize(210, 50);\n+      controlsVBox.setVisible(false);\n+      // add the label and combo box to the control panel\n+      controlsVBox.getChildren().addAll(mosaicRuleLabel, comboBox);\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // add draw status listener to the map view\n+      mapView.addDrawStatusChangedListener (drawStatusChangedEvent -> {\n+        // show progress indicator while map view is drawing\n+        if (drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS) {\n+          progressIndicator.setVisible(true);\n+        }\n+        else {\n+          progressIndicator.setVisible(false);\n+        }\n+      });\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set the map to the map view\n+      mapView.setMap(map);\n+\n+      // create a raster layer from the image service raster\n+      String imageServiceURL = \"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\";\n+      ImageServiceRaster imageServiceRaster = new ImageServiceRaster(imageServiceURL);\n+      rasterLayer = new RasterLayer(imageServiceRaster);\n+\n+      // add raster layer as an operational layer to the map\n+      map.getOperationalLayers().add(rasterLayer);\n+\n+      // listen for the raster layer to finish loading", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDE5NTIwOnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowMTowNFrOIGMVKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowMTowNFrOIGMVKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2NDM5NQ==", "bodyText": "Let's add an a to make it more plain english?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // add raster layer as an operational layer to the map\n          \n          \n            \n                  // add a raster layer as an operational layer to the map", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r543364395", "createdAt": "2020-12-15T14:01:04Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a label\n+      Label mosaicRuleLabel = new Label(\"Choose a mosaic rule: \");\n+      mosaicRuleLabel.setTextFill(Color.WHITE);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+\n+      // set up the control panel UI\n+      VBox controlsVBox = new VBox(6);\n+      controlsVBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0, 0, 0, 0.3)\"),\n+        CornerRadii.EMPTY, Insets.EMPTY)));\n+      controlsVBox.setPadding(new Insets(10.0));\n+      controlsVBox.setMaxSize(210, 50);\n+      controlsVBox.setVisible(false);\n+      // add the label and combo box to the control panel\n+      controlsVBox.getChildren().addAll(mosaicRuleLabel, comboBox);\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // add draw status listener to the map view\n+      mapView.addDrawStatusChangedListener (drawStatusChangedEvent -> {\n+        // show progress indicator while map view is drawing\n+        if (drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS) {\n+          progressIndicator.setVisible(true);\n+        }\n+        else {\n+          progressIndicator.setVisible(false);\n+        }\n+      });\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set the map to the map view\n+      mapView.setMap(map);\n+\n+      // create a raster layer from the image service raster\n+      String imageServiceURL = \"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\";\n+      ImageServiceRaster imageServiceRaster = new ImageServiceRaster(imageServiceURL);\n+      rasterLayer = new RasterLayer(imageServiceRaster);\n+\n+      // add raster layer as an operational layer to the map", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDE5NzY4OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowMTozMVrOIGMWjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowMTozMVrOIGMWjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2NDc1MQ==", "bodyText": "Some more possibility for plain english here as well?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // when loaded, set map view's viewpoint to the image service raster's center\n          \n          \n            \n                      // when loaded, set the map view's viewpoint to the image service raster's center", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r543364751", "createdAt": "2020-12-15T14:01:31Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a label\n+      Label mosaicRuleLabel = new Label(\"Choose a mosaic rule: \");\n+      mosaicRuleLabel.setTextFill(Color.WHITE);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+\n+      // set up the control panel UI\n+      VBox controlsVBox = new VBox(6);\n+      controlsVBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0, 0, 0, 0.3)\"),\n+        CornerRadii.EMPTY, Insets.EMPTY)));\n+      controlsVBox.setPadding(new Insets(10.0));\n+      controlsVBox.setMaxSize(210, 50);\n+      controlsVBox.setVisible(false);\n+      // add the label and combo box to the control panel\n+      controlsVBox.getChildren().addAll(mosaicRuleLabel, comboBox);\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // add draw status listener to the map view\n+      mapView.addDrawStatusChangedListener (drawStatusChangedEvent -> {\n+        // show progress indicator while map view is drawing\n+        if (drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS) {\n+          progressIndicator.setVisible(true);\n+        }\n+        else {\n+          progressIndicator.setVisible(false);\n+        }\n+      });\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set the map to the map view\n+      mapView.setMap(map);\n+\n+      // create a raster layer from the image service raster\n+      String imageServiceURL = \"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\";\n+      ImageServiceRaster imageServiceRaster = new ImageServiceRaster(imageServiceURL);\n+      rasterLayer = new RasterLayer(imageServiceRaster);\n+\n+      // add raster layer as an operational layer to the map\n+      map.getOperationalLayers().add(rasterLayer);\n+\n+      // listen for the raster layer to finish loading\n+      rasterLayer.addDoneLoadingListener(() -> {\n+        if (rasterLayer.getLoadStatus() == LoadStatus.LOADED) {\n+          // when loaded, set map view's viewpoint to the image service raster's center", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDI3MzU3OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxMzozOVrOIGNDqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxMzozOVrOIGNDqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM3NjI5Ng==", "bodyText": "There's an argument here for checking out whether it's necessary to overwrite our member variable MosaicRule mosaicRule, and then explicitly set it imageServiceRaster.setMosaicRule(mosaicRule); every time (line 179).\nI'm wondering if it'd be possible to set the mosaic rule once when the app starts up, and then just modify the contents of the member variable MosaicRule mosaicRule, and the rule would update properly in the view every time? Let's discuss this on a call, it might be easier to explain (and we can test it!)", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r543376296", "createdAt": "2020-12-15T14:13:39Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a label\n+      Label mosaicRuleLabel = new Label(\"Choose a mosaic rule: \");\n+      mosaicRuleLabel.setTextFill(Color.WHITE);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+\n+      // set up the control panel UI\n+      VBox controlsVBox = new VBox(6);\n+      controlsVBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0, 0, 0, 0.3)\"),\n+        CornerRadii.EMPTY, Insets.EMPTY)));\n+      controlsVBox.setPadding(new Insets(10.0));\n+      controlsVBox.setMaxSize(210, 50);\n+      controlsVBox.setVisible(false);\n+      // add the label and combo box to the control panel\n+      controlsVBox.getChildren().addAll(mosaicRuleLabel, comboBox);\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // add draw status listener to the map view\n+      mapView.addDrawStatusChangedListener (drawStatusChangedEvent -> {\n+        // show progress indicator while map view is drawing\n+        if (drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS) {\n+          progressIndicator.setVisible(true);\n+        }\n+        else {\n+          progressIndicator.setVisible(false);\n+        }\n+      });\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set the map to the map view\n+      mapView.setMap(map);\n+\n+      // create a raster layer from the image service raster\n+      String imageServiceURL = \"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\";\n+      ImageServiceRaster imageServiceRaster = new ImageServiceRaster(imageServiceURL);\n+      rasterLayer = new RasterLayer(imageServiceRaster);\n+\n+      // add raster layer as an operational layer to the map\n+      map.getOperationalLayers().add(rasterLayer);\n+\n+      // listen for the raster layer to finish loading\n+      rasterLayer.addDoneLoadingListener(() -> {\n+        if (rasterLayer.getLoadStatus() == LoadStatus.LOADED) {\n+          // when loaded, set map view's viewpoint to the image service raster's center\n+          mapView.setViewpoint(new Viewpoint(imageServiceRaster.getServiceInfo().getFullExtent().getCenter(), 25000.0));\n+\n+          // enable UI interaction once the raster layer has loaded\n+          controlsVBox.setVisible(true);\n+\n+          // add the mosaic rules to the combo box\n+          comboBox.getItems().addAll(\"Default\", \"Northwest\", \"Center\", \"By attribute\", \"Lock raster\");\n+\n+          // set the default combo box value\n+          comboBox.setValue(\"Default\");\n+\n+          // create a mosaic rule for the image service raster if one does not already exist\n+          if (imageServiceRaster.getMosaicRule() == null) {\n+            mosaicRule = new MosaicRule();\n+            imageServiceRaster.setMosaicRule(mosaicRule);\n+          }\n+        } else {\n+          // show alert if raster layer fails to load.\n+          new Alert(Alert.AlertType.ERROR, \"Error loading raster layer.\").show();\n+        }\n+      });\n+\n+      // set the mosaic rule of the image service raster based on rule chosen from the combo box\n+      comboBox.getSelectionModel().selectedItemProperty().addListener(e -> {\n+        // create a new mosaic rule\n+        mosaicRule = new MosaicRule();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b30100f63ade227f40e2618d676dab54f64cf03"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NzY0MjA0OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzoyMzoyNlrOIdhAOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzoyMzoyNlrOIdhAOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgyMDM0NQ==", "bodyText": "If you wanted, you could instantiate the combobox directly with the items, instead of adding them in a separate line,\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // create a combo box\n          \n          \n            \n                mosaicRuleComboBox = new ComboBox<>();\n          \n          \n            \n                mosaicRuleComboBox.setMaxWidth(Double.MAX_VALUE);\n          \n          \n            \n            \n          \n          \n            \n                // add the mosaic rules to the combo box\n          \n          \n            \n                mosaicRuleComboBox.getItems().addAll(\"Default\", \"Northwest\", \"Center\", \"By attribute\", \"Lock raster\");\n          \n          \n            \n            \n          \n          \n            \n                // set the default combo box value\n          \n          \n            \n                mosaicRuleComboBox.getSelectionModel().select(0);\n          \n          \n            \n                // create a combo box with the mosaic rules\n          \n          \n            \n                mosaicRuleComboBox = new ComboBox<>(\n          \n          \n            \n                        FXCollections.observableArrayList(\"Default\", \"Northwest\", \"Center\", \"By attribute\", \"Lock raster\"));\n          \n          \n            \n                mosaicRuleComboBox.setMaxWidth(Double.MAX_VALUE);\n          \n          \n            \n            \n          \n          \n            \n                // set the default combo box value\n          \n          \n            \n                mosaicRuleComboBox.getSelectionModel().select(0);", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r567820345", "createdAt": "2021-02-01T13:23:26Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private ComboBox<String> mosaicRuleComboBox;\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+  private VBox controlsVBox;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // setup the UI\n+      setupUI();\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // show progress indicator while map view is drawing\n+      mapView.addDrawStatusChangedListener(drawStatusChangedEvent ->\n+        progressIndicator.setVisible(drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS));\n+\n+      // set the map to the map view\n+      mapView.setMap(map);\n+\n+      // create a raster layer from the image service raster\n+      ImageServiceRaster imageServiceRaster = new ImageServiceRaster(\"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\");\n+      rasterLayer = new RasterLayer(imageServiceRaster);\n+\n+      // add a raster layer as an operational layer to the map\n+      map.getOperationalLayers().add(rasterLayer);\n+\n+      // wait for the raster layer to finish loading\n+      rasterLayer.addDoneLoadingListener(() -> {\n+        if (rasterLayer.getLoadStatus() == LoadStatus.LOADED) {\n+          // when loaded, set the map view's viewpoint to the image service raster's center\n+          mapView.setViewpoint(new Viewpoint(imageServiceRaster.getServiceInfo().getFullExtent().getCenter(), 25000.0));\n+\n+          // enable UI interaction once the raster layer has loaded\n+          controlsVBox.setVisible(true);\n+\n+          // create a mosaic rule for the image service raster if one does not already exist\n+          if (imageServiceRaster.getMosaicRule() == null) {\n+            mosaicRule = new MosaicRule();\n+            imageServiceRaster.setMosaicRule(mosaicRule);\n+          }\n+        } else {\n+          // show alert if raster layer fails to load.\n+          new Alert(Alert.AlertType.ERROR, \"Error loading raster layer.\").show();\n+        }\n+      });\n+\n+      // set the mosaic rule of the image service raster based on rule chosen from the combo box\n+      mosaicRuleComboBox.getSelectionModel().selectedItemProperty().addListener(e -> {\n+        // create a new mosaic rule\n+        mosaicRule = new MosaicRule();\n+\n+        switch (mosaicRuleComboBox.getSelectionModel().getSelectedItem()) {\n+          case \"Default\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.NONE);\n+            break;\n+          case \"Northwest\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.NORTHWEST);\n+            mosaicRule.setMosaicOperation(MosaicOperation.FIRST);\n+            break;\n+          case \"Center\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.CENTER);\n+            mosaicRule.setMosaicOperation(MosaicOperation.BLEND);\n+            break;\n+          case \"By attribute\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.ATTRIBUTE);\n+            mosaicRule.setSortField(\"OBJECTID\");\n+            break;\n+          case \"Lock raster\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.LOCK_RASTER);\n+            mosaicRule.getLockRasterIds().clear();\n+            mosaicRule.getLockRasterIds().addAll(Arrays.asList(1L, 7L, 12L));\n+            break;\n+        }\n+        // set the mosaic rule of the image service raster\n+        imageServiceRaster.setMosaicRule(mosaicRule);\n+      });\n+\n+      // add the map view, control panel and progress indicator to the stack pane\n+      stackPane.getChildren().addAll(mapView,controlsVBox, progressIndicator);\n+      StackPane.setAlignment(controlsVBox, Pos.TOP_LEFT);\n+      StackPane.setMargin(controlsVBox, new Insets(10, 0, 0, 10));\n+    } catch (Exception e) {\n+      // on any error, display the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Creates a UI with a drop down box.\n+   */\n+  private void setupUI() {\n+    // create a label\n+    Label mosaicRuleLabel = new Label(\"Choose a mosaic rule: \");\n+    mosaicRuleLabel.setTextFill(Color.WHITE);\n+\n+    // create a combo box\n+    mosaicRuleComboBox = new ComboBox<>();\n+    mosaicRuleComboBox.setMaxWidth(Double.MAX_VALUE);\n+\n+    // add the mosaic rules to the combo box\n+    mosaicRuleComboBox.getItems().addAll(\"Default\", \"Northwest\", \"Center\", \"By attribute\", \"Lock raster\");\n+\n+    // set the default combo box value\n+    mosaicRuleComboBox.getSelectionModel().select(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3094a60e0a5a18aef782e77f0a8556e4fadb0b66"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NzY2NDI5OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzoyNzo0MlrOIdhNkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzoyNzo0MlrOIdhNkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgyMzc2MQ==", "bodyText": "2021 by now? \ud83d\ude01", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r567823761", "createdAt": "2021-02-01T13:27:42Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2020 Esri.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3094a60e0a5a18aef782e77f0a8556e4fadb0b66"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NzY2ODU3OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzoyODozNVrOIdhP9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzoyODozNVrOIdhP9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgyNDM3Mw==", "bodyText": "I don't think there's any risk of RasterLayer going out of scope (it's inside the Map), but I might be wrong and misremembering the reason for this fix. Might be worth looking up again?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r567824373", "createdAt": "2021-02-01T13:28:35Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private ComboBox<String> mosaicRuleComboBox;\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3094a60e0a5a18aef782e77f0a8556e4fadb0b66"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NzY3NTAxOnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzoyOTo1NlrOIdhTwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzoyOTo1NlrOIdhTwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgyNTM0Ng==", "bodyText": "Should we stick to the character limit? I think shortening it like this would be enough\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  ImageServiceRaster imageServiceRaster = new ImageServiceRaster(\"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\");\n          \n          \n            \n                  ImageServiceRaster imageServiceRaster = new ImageServiceRaster(\n          \n          \n            \n                  \"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\");", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r567825346", "createdAt": "2021-02-01T13:29:56Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private ComboBox<String> mosaicRuleComboBox;\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+  private VBox controlsVBox;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // setup the UI\n+      setupUI();\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // show progress indicator while map view is drawing\n+      mapView.addDrawStatusChangedListener(drawStatusChangedEvent ->\n+        progressIndicator.setVisible(drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS));\n+\n+      // set the map to the map view\n+      mapView.setMap(map);\n+\n+      // create a raster layer from the image service raster\n+      ImageServiceRaster imageServiceRaster = new ImageServiceRaster(\"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3094a60e0a5a18aef782e77f0a8556e4fadb0b66"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NzY5MDYwOnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzozMzo0MVrOIdhdUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzozMzo0MVrOIdhdUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgyNzc5NQ==", "bodyText": "Leaving out the type also works here.\nConsidering it's UI I'd be tempted to shove it in setupUI as well, but it would require making it a class member, so that decision is up to you!\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n          \n          \n            \n                  ProgressIndicator progressIndicator = new ProgressIndicator();", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r567827795", "createdAt": "2021-02-01T13:33:41Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private ComboBox<String> mosaicRuleComboBox;\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+  private VBox controlsVBox;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // setup the UI\n+      setupUI();\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3094a60e0a5a18aef782e77f0a8556e4fadb0b66"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NzcwMDA5OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzozNTo1N1rOIdhjLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzozNTo1N1rOIdhjLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgyOTI5NA==", "bodyText": "perhaps we can put some of this in setupUI as well?\nIt's good to show that the MapView belongs in the StackPane though.\nIt would be quite a big pattern change, so maybe worth a discussion with the team, however it'd make away with a lot of JavaFX code and leave the Runtime code front an centre, so just an idea.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r567829294", "createdAt": "2021-02-01T13:35:57Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private ComboBox<String> mosaicRuleComboBox;\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+  private VBox controlsVBox;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // setup the UI\n+      setupUI();\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // show progress indicator while map view is drawing\n+      mapView.addDrawStatusChangedListener(drawStatusChangedEvent ->\n+        progressIndicator.setVisible(drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS));\n+\n+      // set the map to the map view\n+      mapView.setMap(map);\n+\n+      // create a raster layer from the image service raster\n+      ImageServiceRaster imageServiceRaster = new ImageServiceRaster(\"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\");\n+      rasterLayer = new RasterLayer(imageServiceRaster);\n+\n+      // add a raster layer as an operational layer to the map\n+      map.getOperationalLayers().add(rasterLayer);\n+\n+      // wait for the raster layer to finish loading\n+      rasterLayer.addDoneLoadingListener(() -> {\n+        if (rasterLayer.getLoadStatus() == LoadStatus.LOADED) {\n+          // when loaded, set the map view's viewpoint to the image service raster's center\n+          mapView.setViewpoint(new Viewpoint(imageServiceRaster.getServiceInfo().getFullExtent().getCenter(), 25000.0));\n+\n+          // enable UI interaction once the raster layer has loaded\n+          controlsVBox.setVisible(true);\n+\n+          // create a mosaic rule for the image service raster if one does not already exist\n+          if (imageServiceRaster.getMosaicRule() == null) {\n+            mosaicRule = new MosaicRule();\n+            imageServiceRaster.setMosaicRule(mosaicRule);\n+          }\n+        } else {\n+          // show alert if raster layer fails to load.\n+          new Alert(Alert.AlertType.ERROR, \"Error loading raster layer.\").show();\n+        }\n+      });\n+\n+      // set the mosaic rule of the image service raster based on rule chosen from the combo box\n+      mosaicRuleComboBox.getSelectionModel().selectedItemProperty().addListener(e -> {\n+        // create a new mosaic rule\n+        mosaicRule = new MosaicRule();\n+\n+        switch (mosaicRuleComboBox.getSelectionModel().getSelectedItem()) {\n+          case \"Default\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.NONE);\n+            break;\n+          case \"Northwest\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.NORTHWEST);\n+            mosaicRule.setMosaicOperation(MosaicOperation.FIRST);\n+            break;\n+          case \"Center\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.CENTER);\n+            mosaicRule.setMosaicOperation(MosaicOperation.BLEND);\n+            break;\n+          case \"By attribute\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.ATTRIBUTE);\n+            mosaicRule.setSortField(\"OBJECTID\");\n+            break;\n+          case \"Lock raster\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.LOCK_RASTER);\n+            mosaicRule.getLockRasterIds().clear();\n+            mosaicRule.getLockRasterIds().addAll(Arrays.asList(1L, 7L, 12L));\n+            break;\n+        }\n+        // set the mosaic rule of the image service raster\n+        imageServiceRaster.setMosaicRule(mosaicRule);\n+      });\n+\n+      // add the map view, control panel and progress indicator to the stack pane\n+      stackPane.getChildren().addAll(mapView,controlsVBox, progressIndicator);\n+      StackPane.setAlignment(controlsVBox, Pos.TOP_LEFT);\n+      StackPane.setMargin(controlsVBox, new Insets(10, 0, 0, 10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3094a60e0a5a18aef782e77f0a8556e4fadb0b66"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NzcwMzM5OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzozNjo1MlrOIdhlXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzozNjo1MlrOIdhlXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgyOTg1Mg==", "bodyText": "Missing a space here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  stackPane.getChildren().addAll(mapView,controlsVBox, progressIndicator);\n          \n          \n            \n                  stackPane.getChildren().addAll(mapView, controlsVBox, progressIndicator);", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r567829852", "createdAt": "2021-02-01T13:36:52Z", "author": {"login": "JonLavi"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private ComboBox<String> mosaicRuleComboBox;\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private RasterLayer rasterLayer; // keep loadable in scope to avoid garbage collection\n+  private VBox controlsVBox;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // setup the UI\n+      setupUI();\n+\n+      // create a progress indicator\n+      ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // show progress indicator while map view is drawing\n+      mapView.addDrawStatusChangedListener(drawStatusChangedEvent ->\n+        progressIndicator.setVisible(drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS));\n+\n+      // set the map to the map view\n+      mapView.setMap(map);\n+\n+      // create a raster layer from the image service raster\n+      ImageServiceRaster imageServiceRaster = new ImageServiceRaster(\"https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer\");\n+      rasterLayer = new RasterLayer(imageServiceRaster);\n+\n+      // add a raster layer as an operational layer to the map\n+      map.getOperationalLayers().add(rasterLayer);\n+\n+      // wait for the raster layer to finish loading\n+      rasterLayer.addDoneLoadingListener(() -> {\n+        if (rasterLayer.getLoadStatus() == LoadStatus.LOADED) {\n+          // when loaded, set the map view's viewpoint to the image service raster's center\n+          mapView.setViewpoint(new Viewpoint(imageServiceRaster.getServiceInfo().getFullExtent().getCenter(), 25000.0));\n+\n+          // enable UI interaction once the raster layer has loaded\n+          controlsVBox.setVisible(true);\n+\n+          // create a mosaic rule for the image service raster if one does not already exist\n+          if (imageServiceRaster.getMosaicRule() == null) {\n+            mosaicRule = new MosaicRule();\n+            imageServiceRaster.setMosaicRule(mosaicRule);\n+          }\n+        } else {\n+          // show alert if raster layer fails to load.\n+          new Alert(Alert.AlertType.ERROR, \"Error loading raster layer.\").show();\n+        }\n+      });\n+\n+      // set the mosaic rule of the image service raster based on rule chosen from the combo box\n+      mosaicRuleComboBox.getSelectionModel().selectedItemProperty().addListener(e -> {\n+        // create a new mosaic rule\n+        mosaicRule = new MosaicRule();\n+\n+        switch (mosaicRuleComboBox.getSelectionModel().getSelectedItem()) {\n+          case \"Default\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.NONE);\n+            break;\n+          case \"Northwest\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.NORTHWEST);\n+            mosaicRule.setMosaicOperation(MosaicOperation.FIRST);\n+            break;\n+          case \"Center\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.CENTER);\n+            mosaicRule.setMosaicOperation(MosaicOperation.BLEND);\n+            break;\n+          case \"By attribute\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.ATTRIBUTE);\n+            mosaicRule.setSortField(\"OBJECTID\");\n+            break;\n+          case \"Lock raster\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.LOCK_RASTER);\n+            mosaicRule.getLockRasterIds().clear();\n+            mosaicRule.getLockRasterIds().addAll(Arrays.asList(1L, 7L, 12L));\n+            break;\n+        }\n+        // set the mosaic rule of the image service raster\n+        imageServiceRaster.setMosaicRule(mosaicRule);\n+      });\n+\n+      // add the map view, control panel and progress indicator to the stack pane\n+      stackPane.getChildren().addAll(mapView,controlsVBox, progressIndicator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3094a60e0a5a18aef782e77f0a8556e4fadb0b66"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwNzE4NTQzOnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxOTowNzoxN1rOIhyQtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxOTowNzoxN1rOIhyQtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjI5NzM5Nw==", "bodyText": "this would have been ok to leave as 2020 since that's when the code was originally authored: no harm to update it to 2021 but just a note for future!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r572297397", "createdAt": "2021-02-08T19:07:17Z", "author": {"login": "Rachael-E"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2021 Esri.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "134fdb3410fc2bdb3f3feefa57f44c2e499b2c22"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMTEzNTYxOnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMzozNDozMlrOIiWPXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMzozNDozMlrOIiWPXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg4Njg3OA==", "bodyText": "I think the checker is picking up that these aren't sorted alphabetically, gosh I wouldn't have noticed this at all otherwise!\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            image service, mosaic rule, mosaic method, raster\n          \n          \n            \n            image service, mosaic method, mosaic rule, raster", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r572886878", "createdAt": "2021-02-09T13:34:32Z", "author": {"login": "Rachael-E"}, "path": "raster/apply-mosaic-rule-to-rasters/README.md", "diffHunk": "@@ -0,0 +1,43 @@\n+# Apply mosaic rule to rasters\n+\n+Apply mosaic rule to a mosaic dataset of rasters.\n+\n+![Apply mosaic rule to rasters](ApplyMosaicRuleToRasters.png)\n+\n+## Use case\n+\n+An image service can use a mosaic rule to mosaic multiple rasters on-the-fly. A mosaic rule can specify which rasters are selected, and how the selected rasters are z-ordered. It can also specify how overlapping pixels from different rasters at the same location are resolved.\n+\n+For example, when using the \"By Attribute\" mosaic method, the values in an attribute field are used to sort the images, and when using the \"Center\" method, the image closest to the center of the display is positioned as the top image in the mosaic. Additionally, mosaic operation allows you to define how to resolve the overlapping cells, such as choosing a blending operation.\n+\n+Specifying mosaic rules is useful for viewing overlapping rasters. For example, using the \"By Attribute\" mosaic method to sort the rasters based on their acquisition date allows the newest image to be on top. Using \"mean\" mosaic operation makes the overlapping areas contain the mean cell values from all the overlapping rasters.\n+\n+## How to use the sample\n+\n+When the rasters are loaded, choose from a list of preset mosaic rules to apply to the rasters.\n+\n+## How it works\n+\n+1. Create an `ImageServiceRaster` using the service's URL.\n+2. Create a `MosaicRule` object and set it to the image service raster using `setMosaicRule(mosaicRule)`, if it does not specify a mosaic rule.\n+3. Create a `RasterLayer` from the image service raster and add it to the map.\n+4. Set the `mosaicMethod`, `mosaicOperation` and other properties of the mosaic rule object accordingly to specify the rule on the raster dataset.\n+\n+## Relevant API\n+\n+* ImageServiceRaster\n+* MosaicMethod\n+* MosaicOperation\n+* MosaicRule\n+\n+## About the data\n+\n+This sample uses a [raster image service](https://sampleserver7.arcgisonline.com/server/rest/services/amberg_germany/ImageServer) hosted on *ArcGIS Online* that shows aerial images of Amberg, Germany.\n+\n+## Additional information\n+\n+For more information, see [Understanding the mosaicking rules](https://desktop.arcgis.com/en/arcmap/latest/manage-data/raster-and-images/understanding-the-mosaicking-rules-for-a-mosaic-dataset.htm) from *ArcGIS Desktop* documentation. To learn more about how to define certain mosaic rules, see [Mosaic rule objects](https://developers.arcgis.com/documentation/common-data-types/mosaic-rules.htm) from *ArcGIS for Developers*.\n+\n+## Tags\n+\n+image service, mosaic rule, mosaic method, raster", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "134fdb3410fc2bdb3f3feefa57f44c2e499b2c22"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMTE3NDU4OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMzo0MzowMVrOIiWnCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMzo0MzowMVrOIiWnCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg5MjkzOA==", "bodyText": "let's move this to after the mapview has been set to the map: keeps consistency with our other samples where we open the code with our own Runtime specific set up.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r572892938", "createdAt": "2021-02-09T13:43:01Z", "author": {"login": "Rachael-E"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2021 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.collections.FXCollections;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private ComboBox<String> mosaicRuleComboBox;\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private ProgressIndicator progressIndicator;\n+  private VBox controlsVBox;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // setup the UI\n+      setupUI();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "134fdb3410fc2bdb3f3feefa57f44c2e499b2c22"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMTE4NTM0OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMzo0NToyOFrOIiWtuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMzo0NToyOFrOIiWtuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg5NDY0OA==", "bodyText": "I'm not too sure as a user why I have to add these lock raster IDs: can you add a comment to explain what this is? Is this selecting certain rasters from the mosaic dataset to display?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r572894648", "createdAt": "2021-02-09T13:45:28Z", "author": {"login": "Rachael-E"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2021 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.collections.FXCollections;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private ComboBox<String> mosaicRuleComboBox;\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private ProgressIndicator progressIndicator;\n+  private VBox controlsVBox;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // setup the UI\n+      setupUI();\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // show progress indicator while map view is drawing\n+      mapView.addDrawStatusChangedListener(drawStatusChangedEvent ->\n+        progressIndicator.setVisible(drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS));\n+\n+      // set the map to the map view\n+      mapView.setMap(map);\n+\n+      // create a raster layer from the image service raster\n+      ImageServiceRaster imageServiceRaster = new ImageServiceRaster(\n+        \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/amberg_germany/ImageServer\");\n+      RasterLayer rasterLayer = new RasterLayer(imageServiceRaster);\n+\n+      // add a raster layer as an operational layer to the map\n+      map.getOperationalLayers().add(rasterLayer);\n+\n+      // wait for the raster layer to finish loading\n+      rasterLayer.addDoneLoadingListener(() -> {\n+        if (rasterLayer.getLoadStatus() == LoadStatus.LOADED) {\n+          // when loaded, set the map view's viewpoint to the image service raster's center\n+          mapView.setViewpoint(new Viewpoint(imageServiceRaster.getServiceInfo().getFullExtent().getCenter(), 25000.0));\n+\n+          // enable UI interaction once the raster layer has loaded\n+          controlsVBox.setVisible(true);\n+\n+          // create a mosaic rule for the image service raster if one does not already exist\n+          if (imageServiceRaster.getMosaicRule() == null) {\n+            mosaicRule = new MosaicRule();\n+            imageServiceRaster.setMosaicRule(mosaicRule);\n+          }\n+        } else {\n+          // show alert if raster layer fails to load.\n+          new Alert(Alert.AlertType.ERROR, \"Error loading raster layer.\").show();\n+        }\n+      });\n+\n+      // set the mosaic rule of the image service raster based on rule chosen from the combo box\n+      mosaicRuleComboBox.getSelectionModel().selectedItemProperty().addListener(e -> {\n+        // create a new mosaic rule\n+        mosaicRule = new MosaicRule();\n+\n+        switch (mosaicRuleComboBox.getSelectionModel().getSelectedItem()) {\n+          case \"Default\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.NONE);\n+            break;\n+          case \"Northwest\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.NORTHWEST);\n+            mosaicRule.setMosaicOperation(MosaicOperation.FIRST);\n+            break;\n+          case \"Center\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.CENTER);\n+            mosaicRule.setMosaicOperation(MosaicOperation.BLEND);\n+            break;\n+          case \"By attribute\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.ATTRIBUTE);\n+            mosaicRule.setSortField(\"OBJECTID\");\n+            break;\n+          case \"Lock raster\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.LOCK_RASTER);\n+            mosaicRule.getLockRasterIds().clear();\n+            mosaicRule.getLockRasterIds().addAll(Arrays.asList(1L, 7L, 12L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "134fdb3410fc2bdb3f3feefa57f44c2e499b2c22"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMTIwOTMwOnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMzo1MDoyMFrOIiW8BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMzo1MDoyMFrOIiW8BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg5ODMwOQ==", "bodyText": "I'd move the progressIndicator out of here and put it in place where it is first called in the start method. You could then also remove it as a member variable.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r572898309", "createdAt": "2021-02-09T13:50:20Z", "author": {"login": "Rachael-E"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2021 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.collections.FXCollections;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private ComboBox<String> mosaicRuleComboBox;\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private ProgressIndicator progressIndicator;\n+  private VBox controlsVBox;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // setup the UI\n+      setupUI();\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // show progress indicator while map view is drawing\n+      mapView.addDrawStatusChangedListener(drawStatusChangedEvent ->\n+        progressIndicator.setVisible(drawStatusChangedEvent.getDrawStatus() == DrawStatus.IN_PROGRESS));\n+\n+      // set the map to the map view\n+      mapView.setMap(map);\n+\n+      // create a raster layer from the image service raster\n+      ImageServiceRaster imageServiceRaster = new ImageServiceRaster(\n+        \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/amberg_germany/ImageServer\");\n+      RasterLayer rasterLayer = new RasterLayer(imageServiceRaster);\n+\n+      // add a raster layer as an operational layer to the map\n+      map.getOperationalLayers().add(rasterLayer);\n+\n+      // wait for the raster layer to finish loading\n+      rasterLayer.addDoneLoadingListener(() -> {\n+        if (rasterLayer.getLoadStatus() == LoadStatus.LOADED) {\n+          // when loaded, set the map view's viewpoint to the image service raster's center\n+          mapView.setViewpoint(new Viewpoint(imageServiceRaster.getServiceInfo().getFullExtent().getCenter(), 25000.0));\n+\n+          // enable UI interaction once the raster layer has loaded\n+          controlsVBox.setVisible(true);\n+\n+          // create a mosaic rule for the image service raster if one does not already exist\n+          if (imageServiceRaster.getMosaicRule() == null) {\n+            mosaicRule = new MosaicRule();\n+            imageServiceRaster.setMosaicRule(mosaicRule);\n+          }\n+        } else {\n+          // show alert if raster layer fails to load.\n+          new Alert(Alert.AlertType.ERROR, \"Error loading raster layer.\").show();\n+        }\n+      });\n+\n+      // set the mosaic rule of the image service raster based on rule chosen from the combo box\n+      mosaicRuleComboBox.getSelectionModel().selectedItemProperty().addListener(e -> {\n+        // create a new mosaic rule\n+        mosaicRule = new MosaicRule();\n+\n+        switch (mosaicRuleComboBox.getSelectionModel().getSelectedItem()) {\n+          case \"Default\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.NONE);\n+            break;\n+          case \"Northwest\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.NORTHWEST);\n+            mosaicRule.setMosaicOperation(MosaicOperation.FIRST);\n+            break;\n+          case \"Center\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.CENTER);\n+            mosaicRule.setMosaicOperation(MosaicOperation.BLEND);\n+            break;\n+          case \"By attribute\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.ATTRIBUTE);\n+            mosaicRule.setSortField(\"OBJECTID\");\n+            break;\n+          case \"Lock raster\":\n+            mosaicRule.setMosaicMethod(MosaicMethod.LOCK_RASTER);\n+            mosaicRule.getLockRasterIds().clear();\n+            mosaicRule.getLockRasterIds().addAll(Arrays.asList(1L, 7L, 12L));\n+            break;\n+        }\n+        // set the mosaic rule of the image service raster\n+        imageServiceRaster.setMosaicRule(mosaicRule);\n+      });\n+\n+      // add the map view, control panel and progress indicator to the stack pane\n+      stackPane.getChildren().addAll(mapView, controlsVBox, progressIndicator);\n+      StackPane.setAlignment(controlsVBox, Pos.TOP_LEFT);\n+      StackPane.setMargin(controlsVBox, new Insets(10, 0, 0, 10));\n+    } catch (Exception e) {\n+      // on any error, display the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Creates a UI with a drop down box.\n+   */\n+  private void setupUI() {\n+    // create a progress indicator\n+    progressIndicator = new ProgressIndicator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "134fdb3410fc2bdb3f3feefa57f44c2e499b2c22"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMTIxMzI2OnYy", "diffSide": "RIGHT", "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMzo1MTowOFrOIiW-Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMzo1MTowOFrOIiW-Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg5ODkwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // show progress indicator while map view is drawing\n          \n          \n            \n                  mapView.addDrawStatusChangedListener(drawStatusChangedEvent ->\n          \n          \n            \n                  // show progress indicator while map view is drawing\n          \n          \n            \n                  var progressIndicator = new ProgressIndicator();\n          \n          \n            \n                  mapView.addDrawStatusChangedListener(drawStatusChangedEvent ->", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/614#discussion_r572898907", "createdAt": "2021-02-09T13:51:08Z", "author": {"login": "Rachael-E"}, "path": "raster/apply-mosaic-rule-to-rasters/src/main/java/com/esri/samples/apply_mosaic_rule_to_rasters/ApplyMosaicRuleToRastersSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2021 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.apply_mosaic_rule_to_rasters;\n+\n+import java.util.Arrays;\n+\n+import javafx.application.Application;\n+import javafx.collections.FXCollections;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Color;\n+import javafx.scene.control.Label;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.layers.RasterLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.view.DrawStatus;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.raster.ImageServiceRaster;\n+import com.esri.arcgisruntime.raster.MosaicRule;\n+import com.esri.arcgisruntime.raster.MosaicMethod;\n+import com.esri.arcgisruntime.raster.MosaicOperation;\n+\n+public class ApplyMosaicRuleToRastersSample extends Application {\n+\n+  private ComboBox<String> mosaicRuleComboBox;\n+  private MapView mapView;\n+  private MosaicRule mosaicRule;\n+  private ProgressIndicator progressIndicator;\n+  private VBox controlsVBox;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Apply Mosaic Rule To Rasters Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // setup the UI\n+      setupUI();\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // create a map view\n+      mapView = new MapView();\n+\n+      // show progress indicator while map view is drawing\n+      mapView.addDrawStatusChangedListener(drawStatusChangedEvent ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "134fdb3410fc2bdb3f3feefa57f44c2e499b2c22"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4879, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}