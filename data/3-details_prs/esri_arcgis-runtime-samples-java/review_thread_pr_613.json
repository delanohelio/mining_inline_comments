{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2ODQzMjY5", "number": 613, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoxODoyMVrOFFjujQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNjo0MDo1MFrOFXNz2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzcyNTU3OnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoxODoyMVrOIGIEew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxMjo0MjozNFrOIhhIqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5NDU4Nw==", "bodyText": "I think for the name of the sample, it really depends on what the sample is trying to show. Is the main thing to show how to create a SymbolStyle class, or is the Symbol the end goal (rather than just what we use to show it on the map?)\nWe have a whole bunch of samples saying simple X symbol, so perhaps the point of this sample is to show how to make specifically a SymbolStyle from a Web Style? In which case I think Create symbol style from web style is a good name", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r543294587", "createdAt": "2020-12-15T12:18:21Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/README.md", "diffHunk": "@@ -0,0 +1,46 @@\n+# Create symbols from web styles", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjAxNjgxMQ==", "bodyText": "I'd be happy with \"Create symbol styles from web styles\" if we want to be more explicit, probs a good one to bounce around the samples team too.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r572016811", "createdAt": "2021-02-08T12:42:34Z", "author": {"login": "Rachael-E"}, "path": "symbology/create-symbols-from-web-styles/README.md", "diffHunk": "@@ -0,0 +1,46 @@\n+# Create symbols from web styles", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5NDU4Nw=="}, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzczMDI4OnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoxOTozMlrOIGIHXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoxOTozMlrOIGIHXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5NTMyNQ==", "bodyText": "If we agree on the purpose of this sample, we might have to update this to something along the lines of\nCreate a symbol style from a style file hosted on a portal\nIn case the actual displaying of the Symbol objects to the map isn't the main subject here?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r543295325", "createdAt": "2020-12-15T12:19:32Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/README.md", "diffHunk": "@@ -0,0 +1,46 @@\n+# Create symbols from web styles\n+\n+Create symbols from a style file hosted on a portal.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzczNTYxOnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoyMDo1NlrOIGIKgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoyMDo1NlrOIGIKgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5NjEzMA==", "bodyText": "Might be up to the decision of the samples team, but perhaps the whole instructions on the UniqueValueRenderer are slightly distracting? Although I'm not sure if they are an integral part to creating SymbolStyles from web styles?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r543296130", "createdAt": "2020-12-15T12:20:56Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/README.md", "diffHunk": "@@ -0,0 +1,46 @@\n+# Create symbols from web styles\n+\n+Create symbols from a style file hosted on a portal.\n+\n+![Image of create symbols from web styles](CreateSymbolsFromWebStyles.png)\n+\n+## Use case\n+\n+Style files hosted on an ArcGIS Online or Enterprise portal are known as web styles. They can be used to style symbols on a feature layer or graphic overlay.\n+\n+## How to use the sample\n+\n+The sample displays a map with a set of symbols that represent the categories of the features within the dataset. Pan and zoom on the map and view the legend to explore the appearance and names of the different symbols from the selected symbol style.\n+\n+## How it works\n+\n+1. Create a `FeatureLayer` and add it to the map.\n+2. Create a `UniqueValueRenderer` and set it to the feature layer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzc2MDUzOnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoyNjo1NVrOIGIY8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoyNjo1NVrOIGIY8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5OTgyNA==", "bodyText": "We've not previously been putting out the contents of the error message (after all, this would be for the end-user who probably won't benefit much from the technical details).\nHowever if this is now the established pattern going forward, we should make an issue t update old samples with the same style of error messages", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r543299824", "createdAt": "2020-12-15T12:26:55Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzc2NjQ4OnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoyODoyOFrOIGIcdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwODo0Mjo1MlrOIRL3vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwMDcyNg==", "bodyText": "We should add a default case for this switch statement - is there any symbol that can be used as a catch-all for data that doesn't have a category that's in this list?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r543300726", "createdAt": "2020-12-15T12:28:28Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n+\n+      // display an error if the symbol style fails to load\n+      symbolStyle.addDoneLoadingListener(() -> {\n+        if (symbolStyle.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Error: could not load symbol style. Details: \\n\"\n+            + symbolStyle.getLoadError().getMessage()).show();\n+        }\n+      });\n+\n+      // setup the UI for the legend\n+      setupLegend();\n+\n+      // create a list of the required symbol names from the web style\n+      ArrayList<String> symbolNames = new ArrayList<>();\n+      symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n+        \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));\n+\n+      for (String symbolName : symbolNames) {\n+\n+        // search for each symbol in the symbol style\n+        List<String> searchKey = new ArrayList<>();\n+        searchKey.add(symbolName);\n+        ListenableFuture<Symbol> searchResult = symbolStyle.getSymbolAsync(searchKey);\n+        searchResult.addDoneListener(() -> {\n+          try {\n+            // get the symbol from the search result\n+            Symbol symbol = searchResult.get();\n+\n+            // get a list of all categories to be mapped to the symbol\n+            List<String> categories = mapSymbolNameToField(symbolName);\n+\n+            for (String category : categories) {\n+\n+              // create a unique value for each category\n+              List<Object> categoryValue = new ArrayList<>();\n+              categoryValue.add(category);\n+              UniqueValueRenderer.UniqueValue uniqueValue = new UniqueValueRenderer.UniqueValue(\n+                \"\", symbolName, symbol, categoryValue);\n+\n+              // add each unique value to the unique value renderer\n+              uniqueValueRenderer.getUniqueValues().add(uniqueValue);\n+            }\n+\n+            // create and add an image view and a label for the symbol to the legend on the UI\n+            ImageView imageView = createImageView(symbol);\n+            Label gridPaneLabel = new Label(symbolName);\n+            gridPane.add(imageView, 0, symbolNames.indexOf(symbolName) + 2);\n+            gridPane.add(gridPaneLabel, 1, symbolNames.indexOf(symbolName) + 2);\n+\n+          } catch (Exception e) {\n+            // on any error, display the stack trace.\n+            e.printStackTrace();\n+          }\n+        });\n+      }\n+\n+      // add a map scale changed listener on the map view to control the symbol sizes at different scales\n+      mapView.addMapScaleChangedListener(mapScaleChangedEvent -> {\n+        featureLayer.setScaleSymbols(!(mapView.getMapScale() < 80000));\n+      });\n+\n+      // add the map view and grid pane to the stack pane\n+      stackPane.getChildren().addAll(mapView, gridPane);\n+      StackPane.setAlignment(gridPane, Pos.TOP_LEFT);\n+      StackPane.setMargin(gridPane, new Insets(10, 0, 0, 10));\n+\n+    } catch (Exception e) {\n+      // on any error, display the stack trace.\n+      e.printStackTrace();\n+    }\n+\n+  }\n+\n+  /**\n+   * Creates a legend on the UI for the symbol styles.\n+   *\n+   */\n+  private void setupLegend() {\n+\n+    // create a grid pane and set the size, background color and spacing\n+    gridPane = new GridPane();\n+    gridPane.getColumnConstraints().addAll(Arrays.asList(new ColumnConstraints(70), new ColumnConstraints(120)));\n+    gridPane.setMaxWidth(175);\n+    gridPane.setMaxHeight(570);\n+    gridPane.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(255,255,255, 0.9)\"), CornerRadii.EMPTY,\n+      Insets.EMPTY)));\n+    gridPane.setPadding(new Insets(10));\n+    gridPane.setVgap(12);\n+\n+    // create a label to display the symbol style name as the title of the legend and add to the grid pane\n+    Label legendTitle = new Label(\"Style: \" + symbolStyle.getStyleName());\n+    legendTitle.setStyle(\"-fx-font-weight: bold\");\n+    gridPane.add(legendTitle, 0, 0,2,1);\n+\n+    // create labels for the column headings and add to the grid pane\n+    Label symbolTitle = new Label(\"Symbol\");\n+    symbolTitle.setStyle(\"-fx-font-weight: bold\");\n+    Label nameTitle = new Label(\"Name\");\n+    nameTitle.setStyle(\"-fx-font-weight: bold\");\n+    gridPane.add(symbolTitle, 0, 1);\n+    gridPane.add(nameTitle, 1, 1);\n+  }\n+\n+  /**\n+   * Returns a list of categories to be matched to a symbol name.\n+   *\n+   * @param symbolName the name of a symbol from a symbol style\n+   * @return categories a list of categories matched to the provided symbol name\n+   */\n+  private List<String> mapSymbolNameToField(String symbolName) {\n+\n+    List<String> categories = new ArrayList<>();\n+\n+    switch (symbolName) {\n+      case \"atm\":\n+        categories.add(\"Banking and Finance\");\n+        break;\n+      case \"beach\":\n+        categories.add(\"Beaches and Marinas\");\n+        break;\n+      case \"campground\":\n+        categories.add(\"Campgrounds\");\n+        break;\n+      case \"city-hall\":\n+        categories.addAll(Arrays.asList(\"City Halls\", \"Government Offices\"));\n+        break;\n+      case \"hospital\":\n+        categories.addAll(Arrays.asList(\"Hospitals and Medical Centers\", \"Health Screening and Testing\", \"Health Centers\",\n+          \"Mental Health Centers\"));\n+        break;\n+      case \"library\":\n+        categories.add(\"Libraries\");\n+        break;\n+      case \"park\":\n+        categories.add(\"Parks and Gardens\");\n+        break;\n+      case \"place-of-worship\":\n+        categories.add(\"Churches\");\n+        break;\n+      case \"police-station\":\n+        categories.add(\"Sheriff and Police Stations\");\n+        break;\n+      case \"post-office\":\n+        categories.addAll(Arrays.asList(\"DHL Locations\", \"Federal Express Locations\"));\n+        break;\n+      case \"school\":\n+        categories.addAll(Arrays.asList(\"Public High Schools\", \"Public Elementary Schools\", \"Private and Charter Schools\"));\n+        break;\n+      case \"trail\":\n+        categories.add(\"Trails\");\n+        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1MjY0NQ==", "bodyText": "Looking at this more, I only want the specific symbol names and categories in the switch statement to be used so it is very selective. I want to ignore all other categories (as there is so much data in the dataset). So as long as that is justification for not having a default, I think I'd want to leave it without?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r552452645", "createdAt": "2021-01-06T09:11:34Z", "author": {"login": "jenmerritt"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n+\n+      // display an error if the symbol style fails to load\n+      symbolStyle.addDoneLoadingListener(() -> {\n+        if (symbolStyle.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Error: could not load symbol style. Details: \\n\"\n+            + symbolStyle.getLoadError().getMessage()).show();\n+        }\n+      });\n+\n+      // setup the UI for the legend\n+      setupLegend();\n+\n+      // create a list of the required symbol names from the web style\n+      ArrayList<String> symbolNames = new ArrayList<>();\n+      symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n+        \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));\n+\n+      for (String symbolName : symbolNames) {\n+\n+        // search for each symbol in the symbol style\n+        List<String> searchKey = new ArrayList<>();\n+        searchKey.add(symbolName);\n+        ListenableFuture<Symbol> searchResult = symbolStyle.getSymbolAsync(searchKey);\n+        searchResult.addDoneListener(() -> {\n+          try {\n+            // get the symbol from the search result\n+            Symbol symbol = searchResult.get();\n+\n+            // get a list of all categories to be mapped to the symbol\n+            List<String> categories = mapSymbolNameToField(symbolName);\n+\n+            for (String category : categories) {\n+\n+              // create a unique value for each category\n+              List<Object> categoryValue = new ArrayList<>();\n+              categoryValue.add(category);\n+              UniqueValueRenderer.UniqueValue uniqueValue = new UniqueValueRenderer.UniqueValue(\n+                \"\", symbolName, symbol, categoryValue);\n+\n+              // add each unique value to the unique value renderer\n+              uniqueValueRenderer.getUniqueValues().add(uniqueValue);\n+            }\n+\n+            // create and add an image view and a label for the symbol to the legend on the UI\n+            ImageView imageView = createImageView(symbol);\n+            Label gridPaneLabel = new Label(symbolName);\n+            gridPane.add(imageView, 0, symbolNames.indexOf(symbolName) + 2);\n+            gridPane.add(gridPaneLabel, 1, symbolNames.indexOf(symbolName) + 2);\n+\n+          } catch (Exception e) {\n+            // on any error, display the stack trace.\n+            e.printStackTrace();\n+          }\n+        });\n+      }\n+\n+      // add a map scale changed listener on the map view to control the symbol sizes at different scales\n+      mapView.addMapScaleChangedListener(mapScaleChangedEvent -> {\n+        featureLayer.setScaleSymbols(!(mapView.getMapScale() < 80000));\n+      });\n+\n+      // add the map view and grid pane to the stack pane\n+      stackPane.getChildren().addAll(mapView, gridPane);\n+      StackPane.setAlignment(gridPane, Pos.TOP_LEFT);\n+      StackPane.setMargin(gridPane, new Insets(10, 0, 0, 10));\n+\n+    } catch (Exception e) {\n+      // on any error, display the stack trace.\n+      e.printStackTrace();\n+    }\n+\n+  }\n+\n+  /**\n+   * Creates a legend on the UI for the symbol styles.\n+   *\n+   */\n+  private void setupLegend() {\n+\n+    // create a grid pane and set the size, background color and spacing\n+    gridPane = new GridPane();\n+    gridPane.getColumnConstraints().addAll(Arrays.asList(new ColumnConstraints(70), new ColumnConstraints(120)));\n+    gridPane.setMaxWidth(175);\n+    gridPane.setMaxHeight(570);\n+    gridPane.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(255,255,255, 0.9)\"), CornerRadii.EMPTY,\n+      Insets.EMPTY)));\n+    gridPane.setPadding(new Insets(10));\n+    gridPane.setVgap(12);\n+\n+    // create a label to display the symbol style name as the title of the legend and add to the grid pane\n+    Label legendTitle = new Label(\"Style: \" + symbolStyle.getStyleName());\n+    legendTitle.setStyle(\"-fx-font-weight: bold\");\n+    gridPane.add(legendTitle, 0, 0,2,1);\n+\n+    // create labels for the column headings and add to the grid pane\n+    Label symbolTitle = new Label(\"Symbol\");\n+    symbolTitle.setStyle(\"-fx-font-weight: bold\");\n+    Label nameTitle = new Label(\"Name\");\n+    nameTitle.setStyle(\"-fx-font-weight: bold\");\n+    gridPane.add(symbolTitle, 0, 1);\n+    gridPane.add(nameTitle, 1, 1);\n+  }\n+\n+  /**\n+   * Returns a list of categories to be matched to a symbol name.\n+   *\n+   * @param symbolName the name of a symbol from a symbol style\n+   * @return categories a list of categories matched to the provided symbol name\n+   */\n+  private List<String> mapSymbolNameToField(String symbolName) {\n+\n+    List<String> categories = new ArrayList<>();\n+\n+    switch (symbolName) {\n+      case \"atm\":\n+        categories.add(\"Banking and Finance\");\n+        break;\n+      case \"beach\":\n+        categories.add(\"Beaches and Marinas\");\n+        break;\n+      case \"campground\":\n+        categories.add(\"Campgrounds\");\n+        break;\n+      case \"city-hall\":\n+        categories.addAll(Arrays.asList(\"City Halls\", \"Government Offices\"));\n+        break;\n+      case \"hospital\":\n+        categories.addAll(Arrays.asList(\"Hospitals and Medical Centers\", \"Health Screening and Testing\", \"Health Centers\",\n+          \"Mental Health Centers\"));\n+        break;\n+      case \"library\":\n+        categories.add(\"Libraries\");\n+        break;\n+      case \"park\":\n+        categories.add(\"Parks and Gardens\");\n+        break;\n+      case \"place-of-worship\":\n+        categories.add(\"Churches\");\n+        break;\n+      case \"police-station\":\n+        categories.add(\"Sheriff and Police Stations\");\n+        break;\n+      case \"post-office\":\n+        categories.addAll(Arrays.asList(\"DHL Locations\", \"Federal Express Locations\"));\n+        break;\n+      case \"school\":\n+        categories.addAll(Arrays.asList(\"Public High Schools\", \"Public Elementary Schools\", \"Private and Charter Schools\"));\n+        break;\n+      case \"trail\":\n+        categories.add(\"Trails\");\n+        break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwMDcyNg=="}, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg5MTE5OQ==", "bodyText": "Yep that seems fair! Just leave it as is in this case.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r554891199", "createdAt": "2021-01-11T08:42:52Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n+\n+      // display an error if the symbol style fails to load\n+      symbolStyle.addDoneLoadingListener(() -> {\n+        if (symbolStyle.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Error: could not load symbol style. Details: \\n\"\n+            + symbolStyle.getLoadError().getMessage()).show();\n+        }\n+      });\n+\n+      // setup the UI for the legend\n+      setupLegend();\n+\n+      // create a list of the required symbol names from the web style\n+      ArrayList<String> symbolNames = new ArrayList<>();\n+      symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n+        \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));\n+\n+      for (String symbolName : symbolNames) {\n+\n+        // search for each symbol in the symbol style\n+        List<String> searchKey = new ArrayList<>();\n+        searchKey.add(symbolName);\n+        ListenableFuture<Symbol> searchResult = symbolStyle.getSymbolAsync(searchKey);\n+        searchResult.addDoneListener(() -> {\n+          try {\n+            // get the symbol from the search result\n+            Symbol symbol = searchResult.get();\n+\n+            // get a list of all categories to be mapped to the symbol\n+            List<String> categories = mapSymbolNameToField(symbolName);\n+\n+            for (String category : categories) {\n+\n+              // create a unique value for each category\n+              List<Object> categoryValue = new ArrayList<>();\n+              categoryValue.add(category);\n+              UniqueValueRenderer.UniqueValue uniqueValue = new UniqueValueRenderer.UniqueValue(\n+                \"\", symbolName, symbol, categoryValue);\n+\n+              // add each unique value to the unique value renderer\n+              uniqueValueRenderer.getUniqueValues().add(uniqueValue);\n+            }\n+\n+            // create and add an image view and a label for the symbol to the legend on the UI\n+            ImageView imageView = createImageView(symbol);\n+            Label gridPaneLabel = new Label(symbolName);\n+            gridPane.add(imageView, 0, symbolNames.indexOf(symbolName) + 2);\n+            gridPane.add(gridPaneLabel, 1, symbolNames.indexOf(symbolName) + 2);\n+\n+          } catch (Exception e) {\n+            // on any error, display the stack trace.\n+            e.printStackTrace();\n+          }\n+        });\n+      }\n+\n+      // add a map scale changed listener on the map view to control the symbol sizes at different scales\n+      mapView.addMapScaleChangedListener(mapScaleChangedEvent -> {\n+        featureLayer.setScaleSymbols(!(mapView.getMapScale() < 80000));\n+      });\n+\n+      // add the map view and grid pane to the stack pane\n+      stackPane.getChildren().addAll(mapView, gridPane);\n+      StackPane.setAlignment(gridPane, Pos.TOP_LEFT);\n+      StackPane.setMargin(gridPane, new Insets(10, 0, 0, 10));\n+\n+    } catch (Exception e) {\n+      // on any error, display the stack trace.\n+      e.printStackTrace();\n+    }\n+\n+  }\n+\n+  /**\n+   * Creates a legend on the UI for the symbol styles.\n+   *\n+   */\n+  private void setupLegend() {\n+\n+    // create a grid pane and set the size, background color and spacing\n+    gridPane = new GridPane();\n+    gridPane.getColumnConstraints().addAll(Arrays.asList(new ColumnConstraints(70), new ColumnConstraints(120)));\n+    gridPane.setMaxWidth(175);\n+    gridPane.setMaxHeight(570);\n+    gridPane.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(255,255,255, 0.9)\"), CornerRadii.EMPTY,\n+      Insets.EMPTY)));\n+    gridPane.setPadding(new Insets(10));\n+    gridPane.setVgap(12);\n+\n+    // create a label to display the symbol style name as the title of the legend and add to the grid pane\n+    Label legendTitle = new Label(\"Style: \" + symbolStyle.getStyleName());\n+    legendTitle.setStyle(\"-fx-font-weight: bold\");\n+    gridPane.add(legendTitle, 0, 0,2,1);\n+\n+    // create labels for the column headings and add to the grid pane\n+    Label symbolTitle = new Label(\"Symbol\");\n+    symbolTitle.setStyle(\"-fx-font-weight: bold\");\n+    Label nameTitle = new Label(\"Name\");\n+    nameTitle.setStyle(\"-fx-font-weight: bold\");\n+    gridPane.add(symbolTitle, 0, 1);\n+    gridPane.add(nameTitle, 1, 1);\n+  }\n+\n+  /**\n+   * Returns a list of categories to be matched to a symbol name.\n+   *\n+   * @param symbolName the name of a symbol from a symbol style\n+   * @return categories a list of categories matched to the provided symbol name\n+   */\n+  private List<String> mapSymbolNameToField(String symbolName) {\n+\n+    List<String> categories = new ArrayList<>();\n+\n+    switch (symbolName) {\n+      case \"atm\":\n+        categories.add(\"Banking and Finance\");\n+        break;\n+      case \"beach\":\n+        categories.add(\"Beaches and Marinas\");\n+        break;\n+      case \"campground\":\n+        categories.add(\"Campgrounds\");\n+        break;\n+      case \"city-hall\":\n+        categories.addAll(Arrays.asList(\"City Halls\", \"Government Offices\"));\n+        break;\n+      case \"hospital\":\n+        categories.addAll(Arrays.asList(\"Hospitals and Medical Centers\", \"Health Screening and Testing\", \"Health Centers\",\n+          \"Mental Health Centers\"));\n+        break;\n+      case \"library\":\n+        categories.add(\"Libraries\");\n+        break;\n+      case \"park\":\n+        categories.add(\"Parks and Gardens\");\n+        break;\n+      case \"place-of-worship\":\n+        categories.add(\"Churches\");\n+        break;\n+      case \"police-station\":\n+        categories.add(\"Sheriff and Police Stations\");\n+        break;\n+      case \"post-office\":\n+        categories.addAll(Arrays.asList(\"DHL Locations\", \"Federal Express Locations\"));\n+        break;\n+      case \"school\":\n+        categories.addAll(Arrays.asList(\"Public High Schools\", \"Public Elementary Schools\", \"Private and Charter Schools\"));\n+        break;\n+      case \"trail\":\n+        categories.add(\"Trails\");\n+        break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwMDcyNg=="}, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzc3MzE2OnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozMDoxNFrOIGIgew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozMDoxNFrOIGIgew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwMTc1NQ==", "bodyText": "It's possible to instantiate the ArrayList and populate it with values in one statement:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  ArrayList<String> symbolNames = new ArrayList<>();\n          \n          \n            \n                  symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n          \n          \n            \n                    \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));\n          \n          \n            \n                  ArrayList<String> symbolNames = new ArrayList<>(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \n          \n          \n            \n                          \"hospital\", \"library\", \"park\", \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r543301755", "createdAt": "2020-12-15T12:30:14Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n+\n+      // display an error if the symbol style fails to load\n+      symbolStyle.addDoneLoadingListener(() -> {\n+        if (symbolStyle.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Error: could not load symbol style. Details: \\n\"\n+            + symbolStyle.getLoadError().getMessage()).show();\n+        }\n+      });\n+\n+      // setup the UI for the legend\n+      setupLegend();\n+\n+      // create a list of the required symbol names from the web style\n+      ArrayList<String> symbolNames = new ArrayList<>();\n+      symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n+        \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzc4NDM1OnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozMjo1NlrOIGIm2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozMjo1NlrOIGIm2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwMzM4Nw==", "bodyText": "There's two things we can improve here: since it's a single line within the lambda, we can get rid of the curly braces and the ; at the end of that single line. Also, instead of doing !(x < y), we can just do (x >= y). I means one less set of parentheses, and the ! is a bit easier to miss than seeing >=\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  mapView.addMapScaleChangedListener(mapScaleChangedEvent -> {\n          \n          \n            \n                    featureLayer.setScaleSymbols(!(mapView.getMapScale() < 80000));\n          \n          \n            \n                  });\n          \n          \n            \n                  mapView.addMapScaleChangedListener(mapScaleChangedEvent ->\n          \n          \n            \n                          featureLayer.setScaleSymbols(mapView.getMapScale() >= 80000));", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r543303387", "createdAt": "2020-12-15T12:32:56Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n+\n+      // display an error if the symbol style fails to load\n+      symbolStyle.addDoneLoadingListener(() -> {\n+        if (symbolStyle.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Error: could not load symbol style. Details: \\n\"\n+            + symbolStyle.getLoadError().getMessage()).show();\n+        }\n+      });\n+\n+      // setup the UI for the legend\n+      setupLegend();\n+\n+      // create a list of the required symbol names from the web style\n+      ArrayList<String> symbolNames = new ArrayList<>();\n+      symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n+        \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));\n+\n+      for (String symbolName : symbolNames) {\n+\n+        // search for each symbol in the symbol style\n+        List<String> searchKey = new ArrayList<>();\n+        searchKey.add(symbolName);\n+        ListenableFuture<Symbol> searchResult = symbolStyle.getSymbolAsync(searchKey);\n+        searchResult.addDoneListener(() -> {\n+          try {\n+            // get the symbol from the search result\n+            Symbol symbol = searchResult.get();\n+\n+            // get a list of all categories to be mapped to the symbol\n+            List<String> categories = mapSymbolNameToField(symbolName);\n+\n+            for (String category : categories) {\n+\n+              // create a unique value for each category\n+              List<Object> categoryValue = new ArrayList<>();\n+              categoryValue.add(category);\n+              UniqueValueRenderer.UniqueValue uniqueValue = new UniqueValueRenderer.UniqueValue(\n+                \"\", symbolName, symbol, categoryValue);\n+\n+              // add each unique value to the unique value renderer\n+              uniqueValueRenderer.getUniqueValues().add(uniqueValue);\n+            }\n+\n+            // create and add an image view and a label for the symbol to the legend on the UI\n+            ImageView imageView = createImageView(symbol);\n+            Label gridPaneLabel = new Label(symbolName);\n+            gridPane.add(imageView, 0, symbolNames.indexOf(symbolName) + 2);\n+            gridPane.add(gridPaneLabel, 1, symbolNames.indexOf(symbolName) + 2);\n+\n+          } catch (Exception e) {\n+            // on any error, display the stack trace.\n+            e.printStackTrace();\n+          }\n+        });\n+      }\n+\n+      // add a map scale changed listener on the map view to control the symbol sizes at different scales\n+      mapView.addMapScaleChangedListener(mapScaleChangedEvent -> {\n+        featureLayer.setScaleSymbols(!(mapView.getMapScale() < 80000));\n+      });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzgwMDk2OnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozNzowOFrOIGIwvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwODo0NDoyNFrOIRL6fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNTkxOA==", "bodyText": "I personally think it'd be more elegant to set the viewpoint programatically instead of hard-code it:\nmapView.setViewpoint(new Viewpoint(featureLayer.getFullExtent()));\nIt means we don't have to worry about updating this if the service changes somehow.\nThe big downside is, that this won't work unless the FeatureLayer isn't loaded, so this line would have to go inside a addDoneLoadingListener. So up to you and @Rachael-E to decide if this is worth doing", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r543305918", "createdAt": "2020-12-15T12:37:08Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1Njk2Nw==", "bodyText": "When I set to the feature layer extent it is too far zoomed out. The viewpoint set manually is zoomed in on a specific area with a nice spread of symbols. So if this is an ok justification for that, it would be good to leave it. Unless there is a way to be more selective about where on the feature layer you can create the viewpoint? Will leave this comment open for Rachael's review!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r552456967", "createdAt": "2021-01-06T09:20:03Z", "author": {"login": "jenmerritt"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNTkxOA=="}, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg5MTkwMw==", "bodyText": "I see your point, and that would make sense to leave it hard-coded then \ud83d\udc4d", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r554891903", "createdAt": "2021-01-11T08:44:24Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNTkxOA=="}, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzg2NDIxOnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1MToyMlrOIGJVLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxMjo0ODoxMFrOIhhV5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNTI0Ng==", "bodyText": "We should add a clearer error message here (plus e.getCause().getMessage(), if that's the way forward", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r543315246", "createdAt": "2020-12-15T12:51:22Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n+\n+      // display an error if the symbol style fails to load\n+      symbolStyle.addDoneLoadingListener(() -> {\n+        if (symbolStyle.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Error: could not load symbol style. Details: \\n\"\n+            + symbolStyle.getLoadError().getMessage()).show();\n+        }\n+      });\n+\n+      // setup the UI for the legend\n+      setupLegend();\n+\n+      // create a list of the required symbol names from the web style\n+      ArrayList<String> symbolNames = new ArrayList<>();\n+      symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n+        \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));\n+\n+      for (String symbolName : symbolNames) {\n+\n+        // search for each symbol in the symbol style\n+        List<String> searchKey = new ArrayList<>();\n+        searchKey.add(symbolName);\n+        ListenableFuture<Symbol> searchResult = symbolStyle.getSymbolAsync(searchKey);\n+        searchResult.addDoneListener(() -> {\n+          try {\n+            // get the symbol from the search result\n+            Symbol symbol = searchResult.get();\n+\n+            // get a list of all categories to be mapped to the symbol\n+            List<String> categories = mapSymbolNameToField(symbolName);\n+\n+            for (String category : categories) {\n+\n+              // create a unique value for each category\n+              List<Object> categoryValue = new ArrayList<>();\n+              categoryValue.add(category);\n+              UniqueValueRenderer.UniqueValue uniqueValue = new UniqueValueRenderer.UniqueValue(\n+                \"\", symbolName, symbol, categoryValue);\n+\n+              // add each unique value to the unique value renderer\n+              uniqueValueRenderer.getUniqueValues().add(uniqueValue);\n+            }\n+\n+            // create and add an image view and a label for the symbol to the legend on the UI\n+            ImageView imageView = createImageView(symbol);\n+            Label gridPaneLabel = new Label(symbolName);\n+            gridPane.add(imageView, 0, symbolNames.indexOf(symbolName) + 2);\n+            gridPane.add(gridPaneLabel, 1, symbolNames.indexOf(symbolName) + 2);\n+\n+          } catch (Exception e) {\n+            // on any error, display the stack trace.\n+            e.printStackTrace();\n+          }\n+        });\n+      }\n+\n+      // add a map scale changed listener on the map view to control the symbol sizes at different scales\n+      mapView.addMapScaleChangedListener(mapScaleChangedEvent -> {\n+        featureLayer.setScaleSymbols(!(mapView.getMapScale() < 80000));\n+      });\n+\n+      // add the map view and grid pane to the stack pane\n+      stackPane.getChildren().addAll(mapView, gridPane);\n+      StackPane.setAlignment(gridPane, Pos.TOP_LEFT);\n+      StackPane.setMargin(gridPane, new Insets(10, 0, 0, 10));\n+\n+    } catch (Exception e) {\n+      // on any error, display the stack trace.\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjAyMDE5OA==", "bodyText": "since this is at the end of the larger try/catch block for the start method, I'm happy with leaving this as generic and for the exception to be printed within the console log for the developer to debug.\nWhere we are being more explicit is for showing dialog pop up messages, where an end user who isn't a developer may wonder why something didn't load (e.g. feature layer not loading due to no internet connection).", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r572020198", "createdAt": "2021-02-08T12:48:10Z", "author": {"login": "Rachael-E"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n+\n+      // display an error if the symbol style fails to load\n+      symbolStyle.addDoneLoadingListener(() -> {\n+        if (symbolStyle.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Error: could not load symbol style. Details: \\n\"\n+            + symbolStyle.getLoadError().getMessage()).show();\n+        }\n+      });\n+\n+      // setup the UI for the legend\n+      setupLegend();\n+\n+      // create a list of the required symbol names from the web style\n+      ArrayList<String> symbolNames = new ArrayList<>();\n+      symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n+        \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));\n+\n+      for (String symbolName : symbolNames) {\n+\n+        // search for each symbol in the symbol style\n+        List<String> searchKey = new ArrayList<>();\n+        searchKey.add(symbolName);\n+        ListenableFuture<Symbol> searchResult = symbolStyle.getSymbolAsync(searchKey);\n+        searchResult.addDoneListener(() -> {\n+          try {\n+            // get the symbol from the search result\n+            Symbol symbol = searchResult.get();\n+\n+            // get a list of all categories to be mapped to the symbol\n+            List<String> categories = mapSymbolNameToField(symbolName);\n+\n+            for (String category : categories) {\n+\n+              // create a unique value for each category\n+              List<Object> categoryValue = new ArrayList<>();\n+              categoryValue.add(category);\n+              UniqueValueRenderer.UniqueValue uniqueValue = new UniqueValueRenderer.UniqueValue(\n+                \"\", symbolName, symbol, categoryValue);\n+\n+              // add each unique value to the unique value renderer\n+              uniqueValueRenderer.getUniqueValues().add(uniqueValue);\n+            }\n+\n+            // create and add an image view and a label for the symbol to the legend on the UI\n+            ImageView imageView = createImageView(symbol);\n+            Label gridPaneLabel = new Label(symbolName);\n+            gridPane.add(imageView, 0, symbolNames.indexOf(symbolName) + 2);\n+            gridPane.add(gridPaneLabel, 1, symbolNames.indexOf(symbolName) + 2);\n+\n+          } catch (Exception e) {\n+            // on any error, display the stack trace.\n+            e.printStackTrace();\n+          }\n+        });\n+      }\n+\n+      // add a map scale changed listener on the map view to control the symbol sizes at different scales\n+      mapView.addMapScaleChangedListener(mapScaleChangedEvent -> {\n+        featureLayer.setScaleSymbols(!(mapView.getMapScale() < 80000));\n+      });\n+\n+      // add the map view and grid pane to the stack pane\n+      stackPane.getChildren().addAll(mapView, gridPane);\n+      StackPane.setAlignment(gridPane, Pos.TOP_LEFT);\n+      StackPane.setMargin(gridPane, new Insets(10, 0, 0, 10));\n+\n+    } catch (Exception e) {\n+      // on any error, display the stack trace.\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNTI0Ng=="}, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzg2OTYyOnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1MjoyMVrOIGJYHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1MjoyMVrOIGJYHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNTk5Nw==", "bodyText": "There's an extra line here that can go\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * Creates a legend on the UI for the symbol styles.\n          \n          \n            \n               *\n          \n          \n            \n               */\n          \n          \n            \n              /**\n          \n          \n            \n               * Creates a legend on the UI for the symbol styles.\n          \n          \n            \n               */", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r543315997", "createdAt": "2020-12-15T12:52:21Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n+\n+      // display an error if the symbol style fails to load\n+      symbolStyle.addDoneLoadingListener(() -> {\n+        if (symbolStyle.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Error: could not load symbol style. Details: \\n\"\n+            + symbolStyle.getLoadError().getMessage()).show();\n+        }\n+      });\n+\n+      // setup the UI for the legend\n+      setupLegend();\n+\n+      // create a list of the required symbol names from the web style\n+      ArrayList<String> symbolNames = new ArrayList<>();\n+      symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n+        \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));\n+\n+      for (String symbolName : symbolNames) {\n+\n+        // search for each symbol in the symbol style\n+        List<String> searchKey = new ArrayList<>();\n+        searchKey.add(symbolName);\n+        ListenableFuture<Symbol> searchResult = symbolStyle.getSymbolAsync(searchKey);\n+        searchResult.addDoneListener(() -> {\n+          try {\n+            // get the symbol from the search result\n+            Symbol symbol = searchResult.get();\n+\n+            // get a list of all categories to be mapped to the symbol\n+            List<String> categories = mapSymbolNameToField(symbolName);\n+\n+            for (String category : categories) {\n+\n+              // create a unique value for each category\n+              List<Object> categoryValue = new ArrayList<>();\n+              categoryValue.add(category);\n+              UniqueValueRenderer.UniqueValue uniqueValue = new UniqueValueRenderer.UniqueValue(\n+                \"\", symbolName, symbol, categoryValue);\n+\n+              // add each unique value to the unique value renderer\n+              uniqueValueRenderer.getUniqueValues().add(uniqueValue);\n+            }\n+\n+            // create and add an image view and a label for the symbol to the legend on the UI\n+            ImageView imageView = createImageView(symbol);\n+            Label gridPaneLabel = new Label(symbolName);\n+            gridPane.add(imageView, 0, symbolNames.indexOf(symbolName) + 2);\n+            gridPane.add(gridPaneLabel, 1, symbolNames.indexOf(symbolName) + 2);\n+\n+          } catch (Exception e) {\n+            // on any error, display the stack trace.\n+            e.printStackTrace();\n+          }\n+        });\n+      }\n+\n+      // add a map scale changed listener on the map view to control the symbol sizes at different scales\n+      mapView.addMapScaleChangedListener(mapScaleChangedEvent -> {\n+        featureLayer.setScaleSymbols(!(mapView.getMapScale() < 80000));\n+      });\n+\n+      // add the map view and grid pane to the stack pane\n+      stackPane.getChildren().addAll(mapView, gridPane);\n+      StackPane.setAlignment(gridPane, Pos.TOP_LEFT);\n+      StackPane.setMargin(gridPane, new Insets(10, 0, 0, 10));\n+\n+    } catch (Exception e) {\n+      // on any error, display the stack trace.\n+      e.printStackTrace();\n+    }\n+\n+  }\n+\n+  /**\n+   * Creates a legend on the UI for the symbol styles.\n+   *\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzg5MDk4OnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1NzoxNFrOIGJkkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1NzoxNFrOIGJkkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxOTE4Nw==", "bodyText": "Could we add a comment about what this for loop's purpose is? Something like\n// build unique values for the renderer and construct a symbol for each feature\n?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r543319187", "createdAt": "2020-12-15T12:57:14Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n+\n+      // display an error if the symbol style fails to load\n+      symbolStyle.addDoneLoadingListener(() -> {\n+        if (symbolStyle.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Error: could not load symbol style. Details: \\n\"\n+            + symbolStyle.getLoadError().getMessage()).show();\n+        }\n+      });\n+\n+      // setup the UI for the legend\n+      setupLegend();\n+\n+      // create a list of the required symbol names from the web style\n+      ArrayList<String> symbolNames = new ArrayList<>();\n+      symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n+        \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));\n+\n+      for (String symbolName : symbolNames) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzkwMTcyOnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1OTozMlrOIGJqzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1OTozMlrOIGJqzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMDc4Mw==", "bodyText": "We should probably either use plain-english, or the full class names for these comments? So either\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returns an imageView populated with a symbol.\n          \n          \n            \n               * Returns an ImageView populated with a Symbol.\n          \n      \n    \n    \n  \n\nor:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returns an imageView populated with a symbol.\n          \n          \n            \n               * Returns an image view populated with a symbol.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r543320783", "createdAt": "2020-12-15T12:59:32Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n+\n+      // display an error if the symbol style fails to load\n+      symbolStyle.addDoneLoadingListener(() -> {\n+        if (symbolStyle.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Error: could not load symbol style. Details: \\n\"\n+            + symbolStyle.getLoadError().getMessage()).show();\n+        }\n+      });\n+\n+      // setup the UI for the legend\n+      setupLegend();\n+\n+      // create a list of the required symbol names from the web style\n+      ArrayList<String> symbolNames = new ArrayList<>();\n+      symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n+        \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));\n+\n+      for (String symbolName : symbolNames) {\n+\n+        // search for each symbol in the symbol style\n+        List<String> searchKey = new ArrayList<>();\n+        searchKey.add(symbolName);\n+        ListenableFuture<Symbol> searchResult = symbolStyle.getSymbolAsync(searchKey);\n+        searchResult.addDoneListener(() -> {\n+          try {\n+            // get the symbol from the search result\n+            Symbol symbol = searchResult.get();\n+\n+            // get a list of all categories to be mapped to the symbol\n+            List<String> categories = mapSymbolNameToField(symbolName);\n+\n+            for (String category : categories) {\n+\n+              // create a unique value for each category\n+              List<Object> categoryValue = new ArrayList<>();\n+              categoryValue.add(category);\n+              UniqueValueRenderer.UniqueValue uniqueValue = new UniqueValueRenderer.UniqueValue(\n+                \"\", symbolName, symbol, categoryValue);\n+\n+              // add each unique value to the unique value renderer\n+              uniqueValueRenderer.getUniqueValues().add(uniqueValue);\n+            }\n+\n+            // create and add an image view and a label for the symbol to the legend on the UI\n+            ImageView imageView = createImageView(symbol);\n+            Label gridPaneLabel = new Label(symbolName);\n+            gridPane.add(imageView, 0, symbolNames.indexOf(symbolName) + 2);\n+            gridPane.add(gridPaneLabel, 1, symbolNames.indexOf(symbolName) + 2);\n+\n+          } catch (Exception e) {\n+            // on any error, display the stack trace.\n+            e.printStackTrace();\n+          }\n+        });\n+      }\n+\n+      // add a map scale changed listener on the map view to control the symbol sizes at different scales\n+      mapView.addMapScaleChangedListener(mapScaleChangedEvent -> {\n+        featureLayer.setScaleSymbols(!(mapView.getMapScale() < 80000));\n+      });\n+\n+      // add the map view and grid pane to the stack pane\n+      stackPane.getChildren().addAll(mapView, gridPane);\n+      StackPane.setAlignment(gridPane, Pos.TOP_LEFT);\n+      StackPane.setMargin(gridPane, new Insets(10, 0, 0, 10));\n+\n+    } catch (Exception e) {\n+      // on any error, display the stack trace.\n+      e.printStackTrace();\n+    }\n+\n+  }\n+\n+  /**\n+   * Creates a legend on the UI for the symbol styles.\n+   *\n+   */\n+  private void setupLegend() {\n+\n+    // create a grid pane and set the size, background color and spacing\n+    gridPane = new GridPane();\n+    gridPane.getColumnConstraints().addAll(Arrays.asList(new ColumnConstraints(70), new ColumnConstraints(120)));\n+    gridPane.setMaxWidth(175);\n+    gridPane.setMaxHeight(570);\n+    gridPane.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(255,255,255, 0.9)\"), CornerRadii.EMPTY,\n+      Insets.EMPTY)));\n+    gridPane.setPadding(new Insets(10));\n+    gridPane.setVgap(12);\n+\n+    // create a label to display the symbol style name as the title of the legend and add to the grid pane\n+    Label legendTitle = new Label(\"Style: \" + symbolStyle.getStyleName());\n+    legendTitle.setStyle(\"-fx-font-weight: bold\");\n+    gridPane.add(legendTitle, 0, 0,2,1);\n+\n+    // create labels for the column headings and add to the grid pane\n+    Label symbolTitle = new Label(\"Symbol\");\n+    symbolTitle.setStyle(\"-fx-font-weight: bold\");\n+    Label nameTitle = new Label(\"Name\");\n+    nameTitle.setStyle(\"-fx-font-weight: bold\");\n+    gridPane.add(symbolTitle, 0, 1);\n+    gridPane.add(nameTitle, 1, 1);\n+  }\n+\n+  /**\n+   * Returns a list of categories to be matched to a symbol name.\n+   *\n+   * @param symbolName the name of a symbol from a symbol style\n+   * @return categories a list of categories matched to the provided symbol name\n+   */\n+  private List<String> mapSymbolNameToField(String symbolName) {\n+\n+    List<String> categories = new ArrayList<>();\n+\n+    switch (symbolName) {\n+      case \"atm\":\n+        categories.add(\"Banking and Finance\");\n+        break;\n+      case \"beach\":\n+        categories.add(\"Beaches and Marinas\");\n+        break;\n+      case \"campground\":\n+        categories.add(\"Campgrounds\");\n+        break;\n+      case \"city-hall\":\n+        categories.addAll(Arrays.asList(\"City Halls\", \"Government Offices\"));\n+        break;\n+      case \"hospital\":\n+        categories.addAll(Arrays.asList(\"Hospitals and Medical Centers\", \"Health Screening and Testing\", \"Health Centers\",\n+          \"Mental Health Centers\"));\n+        break;\n+      case \"library\":\n+        categories.add(\"Libraries\");\n+        break;\n+      case \"park\":\n+        categories.add(\"Parks and Gardens\");\n+        break;\n+      case \"place-of-worship\":\n+        categories.add(\"Churches\");\n+        break;\n+      case \"police-station\":\n+        categories.add(\"Sheriff and Police Stations\");\n+        break;\n+      case \"post-office\":\n+        categories.addAll(Arrays.asList(\"DHL Locations\", \"Federal Express Locations\"));\n+        break;\n+      case \"school\":\n+        categories.addAll(Arrays.asList(\"Public High Schools\", \"Public Elementary Schools\", \"Private and Charter Schools\"));\n+        break;\n+      case \"trail\":\n+        categories.add(\"Trails\");\n+        break;\n+    }\n+    return categories;\n+  }\n+\n+  /**\n+   * Returns an imageView populated with a symbol.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 274}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzkyMDg3OnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowMzo1N1rOIGJ1yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowMzo1N1rOIGJ1yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMzU5NA==", "bodyText": "I think we can avoid creating a new List<String and populating it on separate lines, by just passing Collections.singeltonList(item) directly into the method call:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> searchKey = new ArrayList<>();\n          \n          \n            \n                    searchKey.add(symbolName);\n          \n          \n            \n                    ListenableFuture<Symbol> searchResult = symbolStyle.getSymbolAsync(searchKey);\n          \n          \n            \n                    ListenableFuture<Symbol> searchResult = symbolStyle.getSymbolAsync(Collections.singletonList(symbolName));", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r543323594", "createdAt": "2020-12-15T13:03:57Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n+\n+      // display an error if the symbol style fails to load\n+      symbolStyle.addDoneLoadingListener(() -> {\n+        if (symbolStyle.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Error: could not load symbol style. Details: \\n\"\n+            + symbolStyle.getLoadError().getMessage()).show();\n+        }\n+      });\n+\n+      // setup the UI for the legend\n+      setupLegend();\n+\n+      // create a list of the required symbol names from the web style\n+      ArrayList<String> symbolNames = new ArrayList<>();\n+      symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n+        \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));\n+\n+      for (String symbolName : symbolNames) {\n+\n+        // search for each symbol in the symbol style\n+        List<String> searchKey = new ArrayList<>();\n+        searchKey.add(symbolName);\n+        ListenableFuture<Symbol> searchResult = symbolStyle.getSymbolAsync(searchKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzkyODE5OnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowNTo0MFrOIGJ6CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowNTo0MFrOIGJ6CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyNDY4MQ==", "bodyText": "I haven't been able to test this, but we might be able to do the same trick above and simply pass a Collections.singletonList(item) into the method call.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          List<Object> categoryValue = new ArrayList<>();\n          \n          \n            \n                          categoryValue.add(category);\n          \n          \n            \n                          UniqueValueRenderer.UniqueValue uniqueValue = new UniqueValueRenderer.UniqueValue(\n          \n          \n            \n                            \"\", symbolName, symbol, categoryValue);\n          \n          \n            \n                          UniqueValueRenderer.UniqueValue uniqueValue = new UniqueValueRenderer.UniqueValue(\n          \n          \n            \n                            \"\", symbolName, symbol, Collections.singletonList(category));\n          \n      \n    \n    \n  \n\nIt's possibly a bit less easy to read though, so up to you whether you choose to do it this way", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r543324681", "createdAt": "2020-12-15T13:05:40Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n+\n+      // display an error if the symbol style fails to load\n+      symbolStyle.addDoneLoadingListener(() -> {\n+        if (symbolStyle.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Error: could not load symbol style. Details: \\n\"\n+            + symbolStyle.getLoadError().getMessage()).show();\n+        }\n+      });\n+\n+      // setup the UI for the legend\n+      setupLegend();\n+\n+      // create a list of the required symbol names from the web style\n+      ArrayList<String> symbolNames = new ArrayList<>();\n+      symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n+        \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));\n+\n+      for (String symbolName : symbolNames) {\n+\n+        // search for each symbol in the symbol style\n+        List<String> searchKey = new ArrayList<>();\n+        searchKey.add(symbolName);\n+        ListenableFuture<Symbol> searchResult = symbolStyle.getSymbolAsync(searchKey);\n+        searchResult.addDoneListener(() -> {\n+          try {\n+            // get the symbol from the search result\n+            Symbol symbol = searchResult.get();\n+\n+            // get a list of all categories to be mapped to the symbol\n+            List<String> categories = mapSymbolNameToField(symbolName);\n+\n+            for (String category : categories) {\n+\n+              // create a unique value for each category\n+              List<Object> categoryValue = new ArrayList<>();\n+              categoryValue.add(category);\n+              UniqueValueRenderer.UniqueValue uniqueValue = new UniqueValueRenderer.UniqueValue(\n+                \"\", symbolName, symbol, categoryValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzk0NjA5OnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowOTozMlrOIGKEJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwODo0Mzo1OFrOIRL5sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyNzI2OA==", "bodyText": "Maybe a small comment to say here that the image views and labels are added according to the item's position in the list of symbol names? Particularly the +2 is a little puzzling, I'm guessing it's go to do with the headers for this grid pane. Might be easier to extract a variable Int something = symbolNames.indexOf(symbolName) + 2\nAlternatively maybe have 2 grid panes, one for the table headers (Label symbolTitle = new Label(\"Symbol\"); and Label nameTitle = new Label(\"Name\");, and then one for the 'data'? We can discuss over a call, might be easier to explain", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r543327268", "createdAt": "2020-12-15T13:09:32Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n+\n+      // display an error if the symbol style fails to load\n+      symbolStyle.addDoneLoadingListener(() -> {\n+        if (symbolStyle.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Error: could not load symbol style. Details: \\n\"\n+            + symbolStyle.getLoadError().getMessage()).show();\n+        }\n+      });\n+\n+      // setup the UI for the legend\n+      setupLegend();\n+\n+      // create a list of the required symbol names from the web style\n+      ArrayList<String> symbolNames = new ArrayList<>();\n+      symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n+        \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));\n+\n+      for (String symbolName : symbolNames) {\n+\n+        // search for each symbol in the symbol style\n+        List<String> searchKey = new ArrayList<>();\n+        searchKey.add(symbolName);\n+        ListenableFuture<Symbol> searchResult = symbolStyle.getSymbolAsync(searchKey);\n+        searchResult.addDoneListener(() -> {\n+          try {\n+            // get the symbol from the search result\n+            Symbol symbol = searchResult.get();\n+\n+            // get a list of all categories to be mapped to the symbol\n+            List<String> categories = mapSymbolNameToField(symbolName);\n+\n+            for (String category : categories) {\n+\n+              // create a unique value for each category\n+              List<Object> categoryValue = new ArrayList<>();\n+              categoryValue.add(category);\n+              UniqueValueRenderer.UniqueValue uniqueValue = new UniqueValueRenderer.UniqueValue(\n+                \"\", symbolName, symbol, categoryValue);\n+\n+              // add each unique value to the unique value renderer\n+              uniqueValueRenderer.getUniqueValues().add(uniqueValue);\n+            }\n+\n+            // create and add an image view and a label for the symbol to the legend on the UI\n+            ImageView imageView = createImageView(symbol);\n+            Label gridPaneLabel = new Label(symbolName);\n+            gridPane.add(imageView, 0, symbolNames.indexOf(symbolName) + 2);\n+            gridPane.add(gridPaneLabel, 1, symbolNames.indexOf(symbolName) + 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxMjAzNQ==", "bodyText": "I've separated this into 2 GridPanes.  I tried to move some styling into a css file, but of course the sample viewer doesn't read the individual sample's style file (until we are able to put some time into that) so the unique styles won't carry over. So for now, I've left all the required styling where it is.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r552512035", "createdAt": "2021-01-06T11:09:50Z", "author": {"login": "jenmerritt"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n+\n+      // display an error if the symbol style fails to load\n+      symbolStyle.addDoneLoadingListener(() -> {\n+        if (symbolStyle.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Error: could not load symbol style. Details: \\n\"\n+            + symbolStyle.getLoadError().getMessage()).show();\n+        }\n+      });\n+\n+      // setup the UI for the legend\n+      setupLegend();\n+\n+      // create a list of the required symbol names from the web style\n+      ArrayList<String> symbolNames = new ArrayList<>();\n+      symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n+        \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));\n+\n+      for (String symbolName : symbolNames) {\n+\n+        // search for each symbol in the symbol style\n+        List<String> searchKey = new ArrayList<>();\n+        searchKey.add(symbolName);\n+        ListenableFuture<Symbol> searchResult = symbolStyle.getSymbolAsync(searchKey);\n+        searchResult.addDoneListener(() -> {\n+          try {\n+            // get the symbol from the search result\n+            Symbol symbol = searchResult.get();\n+\n+            // get a list of all categories to be mapped to the symbol\n+            List<String> categories = mapSymbolNameToField(symbolName);\n+\n+            for (String category : categories) {\n+\n+              // create a unique value for each category\n+              List<Object> categoryValue = new ArrayList<>();\n+              categoryValue.add(category);\n+              UniqueValueRenderer.UniqueValue uniqueValue = new UniqueValueRenderer.UniqueValue(\n+                \"\", symbolName, symbol, categoryValue);\n+\n+              // add each unique value to the unique value renderer\n+              uniqueValueRenderer.getUniqueValues().add(uniqueValue);\n+            }\n+\n+            // create and add an image view and a label for the symbol to the legend on the UI\n+            ImageView imageView = createImageView(symbol);\n+            Label gridPaneLabel = new Label(symbolName);\n+            gridPane.add(imageView, 0, symbolNames.indexOf(symbolName) + 2);\n+            gridPane.add(gridPaneLabel, 1, symbolNames.indexOf(symbolName) + 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyNzI2OA=="}, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg5MTY5OA==", "bodyText": "Looks much nicer with the two grid panes \ud83d\udc4d\nAs for the CSS, I wouldn't worry about that too much. As long as it works in the SV then we are good to go.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r554891698", "createdAt": "2021-01-11T08:43:58Z", "author": {"login": "JonLavi"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane gridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n+\n+      // display an error if the symbol style fails to load\n+      symbolStyle.addDoneLoadingListener(() -> {\n+        if (symbolStyle.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Error: could not load symbol style. Details: \\n\"\n+            + symbolStyle.getLoadError().getMessage()).show();\n+        }\n+      });\n+\n+      // setup the UI for the legend\n+      setupLegend();\n+\n+      // create a list of the required symbol names from the web style\n+      ArrayList<String> symbolNames = new ArrayList<>();\n+      symbolNames.addAll(Arrays.asList(\"atm\", \"beach\", \"campground\", \"city-hall\", \"hospital\", \"library\", \"park\",\n+        \"place-of-worship\", \"police-station\", \"post-office\", \"school\", \"trail\"));\n+\n+      for (String symbolName : symbolNames) {\n+\n+        // search for each symbol in the symbol style\n+        List<String> searchKey = new ArrayList<>();\n+        searchKey.add(symbolName);\n+        ListenableFuture<Symbol> searchResult = symbolStyle.getSymbolAsync(searchKey);\n+        searchResult.addDoneListener(() -> {\n+          try {\n+            // get the symbol from the search result\n+            Symbol symbol = searchResult.get();\n+\n+            // get a list of all categories to be mapped to the symbol\n+            List<String> categories = mapSymbolNameToField(symbolName);\n+\n+            for (String category : categories) {\n+\n+              // create a unique value for each category\n+              List<Object> categoryValue = new ArrayList<>();\n+              categoryValue.add(category);\n+              UniqueValueRenderer.UniqueValue uniqueValue = new UniqueValueRenderer.UniqueValue(\n+                \"\", symbolName, symbol, categoryValue);\n+\n+              // add each unique value to the unique value renderer\n+              uniqueValueRenderer.getUniqueValues().add(uniqueValue);\n+            }\n+\n+            // create and add an image view and a label for the symbol to the legend on the UI\n+            ImageView imageView = createImageView(symbol);\n+            Label gridPaneLabel = new Label(symbolName);\n+            gridPane.add(imageView, 0, symbolNames.indexOf(symbolName) + 2);\n+            gridPane.add(gridPaneLabel, 1, symbolNames.indexOf(symbolName) + 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyNzI2OA=="}, "originalCommit": {"oid": "2b4f8ab51b326d737b00cf5eaf518a0edb12b28a"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5ODU5NzA5OnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNTozNjowMFrOIgmawg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxNzoyMzoxMlrOIht_5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA1NDc4Ng==", "bodyText": "I think an expansion on the comment here to explain what null defaults to would be good here to help the user understand the constructor better:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);\n          \n          \n            \n                  // create a symbol style from a web style. ArcGIS Online is used as the default portal when null is passed as the portal parameter\n          \n          \n            \n                  symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r571054786", "createdAt": "2021-02-05T15:36:00Z", "author": {"login": "Rachael-E"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane legendGridPane;\n+  private GridPane headerGridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384a9ea62a5c289c89a73aa397409f64a4e9cbcd"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjIyNzU1Ng==", "bodyText": "Agreed, have updated", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r572227556", "createdAt": "2021-02-08T17:23:12Z", "author": {"login": "jenmerritt"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane legendGridPane;\n+  private GridPane headerGridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to\n+      uniqueValueRenderer.getFieldNames().add(\"cat2\");\n+\n+      // set the unique value renderer on the feature layer\n+      featureLayer.setRenderer(uniqueValueRenderer);\n+\n+      // create a symbol style from a web style\n+      symbolStyle = new SymbolStyle(\"Esri2DPointSymbolsStyle\", null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA1NDc4Ng=="}, "originalCommit": {"oid": "384a9ea62a5c289c89a73aa397409f64a4e9cbcd"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5ODg3NTI3OnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNjo0MDowN1rOIgpIIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxNzoyNjozMVrOIhuJ4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA5OTE3MQ==", "bodyText": "I'm not sure how I feel about these add done loading listeners for if something has failed to load. I seem to remember this was something that was brought in a few releases ago to show the loadable pattern consistenly in our samples though.  It just seems like they get in the way a bit of the flow of the sample. If they have to stay due to a previous decision, could we separate out a method that takes a Loadable and call that method in place of this, and the later SymbolStyle loading check?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r571099171", "createdAt": "2021-02-05T16:40:07Z", "author": {"login": "Rachael-E"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane legendGridPane;\n+  private GridPane headerGridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384a9ea62a5c289c89a73aa397409f64a4e9cbcd"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjIzMDExMw==", "bodyText": "@Rachael-E Yeah I get your point - we don't have to have them, I guess it's the balance with making the sample flow better vs silently failing and showing how to avoid that - but I guess if we know the data works in our sample we can leave them out... Guess there are other samples (or tutorials etc) for learning loading patterns and that's not necessarily the point of this sample? Shall I just remove these?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r572230113", "createdAt": "2021-02-08T17:26:31Z", "author": {"login": "jenmerritt"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane legendGridPane;\n+  private GridPane headerGridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA5OTE3MQ=="}, "originalCommit": {"oid": "384a9ea62a5c289c89a73aa397409f64a4e9cbcd"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5ODg3ODMyOnYy", "diffSide": "RIGHT", "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNjo0MDo1MFrOIgpJ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNjo0MDo1MFrOIgpJ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA5OTYyOA==", "bodyText": "this is a really helpful comment! sometimes the strings passed into these parameters can be quite obscure as to where they come from.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/613#discussion_r571099628", "createdAt": "2021-02-05T16:40:50Z", "author": {"login": "Rachael-E"}, "path": "symbology/create-symbols-from-web-styles/src/main/java/com/esri/samples/create_symbols_from_web_styles/CreateSymbolsFromWebStylesSample.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.create_symbols_from_web_styles;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.ArcGISRuntimeEnvironment;\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.BasemapStyle;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.Symbol;\n+import com.esri.arcgisruntime.symbology.SymbolStyle;\n+import com.esri.arcgisruntime.symbology.UniqueValueRenderer;\n+\n+public class CreateSymbolsFromWebStylesSample extends Application {\n+\n+  private MapView mapView;\n+  private GridPane legendGridPane;\n+  private GridPane headerGridPane;\n+  private SymbolStyle symbolStyle;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Create Symbols From Web Styles Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // authentication with an API key or named user is required to access basemaps and other location services\n+      String yourAPIKey = System.getProperty(\"apiKey\");\n+      ArcGISRuntimeEnvironment.setApiKey(yourAPIKey);\n+\n+      // create a map with the light gray basemap style\n+      ArcGISMap map = new ArcGISMap(BasemapStyle.ARCGIS_LIGHT_GRAY);\n+\n+      // set an initial reference scale on the map for controlling symbol size\n+      map.setReferenceScale(100000);\n+\n+      // create a map view and set the map to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set a viewpoint on the map view\n+      mapView.setViewpoint(new Viewpoint(34.28301, -118.44186, 7000));\n+\n+      // create a feature layer from a service\n+      FeatureLayer featureLayer = new FeatureLayer(new ServiceFeatureTable(\n+        \"http://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/LA_County_Points_of_Interest/FeatureServer/0\"));\n+\n+      // add the feature layer to the map's operational layers\n+      map.getOperationalLayers().add(featureLayer);\n+\n+      // display an error if the feature layer fails to load\n+      featureLayer.addDoneLoadingListener(() -> {\n+        if (featureLayer.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) {\n+          new Alert(Alert.AlertType.ERROR, \"Feature layer failed to load. Details: \\n\"\n+            + featureLayer.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a unique value renderer\n+      UniqueValueRenderer uniqueValueRenderer = new UniqueValueRenderer();\n+\n+      // add the name of a field from the feature layer data that symbols will be mapped to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384a9ea62a5c289c89a73aa397409f64a4e9cbcd"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4871, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}