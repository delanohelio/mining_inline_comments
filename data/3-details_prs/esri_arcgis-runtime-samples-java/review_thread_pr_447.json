{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2OTAyMTYz", "number": 447, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowNzowOFrODo1Pdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0NjowN1rODo2F0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQxOTQyOnYy", "diffSide": "RIGHT", "path": "display_information/format-coordinates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowNzowOFrOF3oHUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOTo0NjowN1rOF39OEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3MzIzMg==", "bodyText": "since for the Java Samples we should just be using classes, we can remove these method references", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/447#discussion_r393873232", "createdAt": "2020-03-17T18:07:08Z", "author": {"login": "Rachael-E"}, "path": "display_information/format-coordinates/README.md", "diffHunk": "@@ -1,30 +1,29 @@\n-# Format Coordinates\n+# Format coordinates\n \n-Write coordinates in a variety of common formats.\n+Format coordinates in a variety of common notations.\n \n-Convert a map location Point in WGS84 to a String in a number of different coordinate notations (and vice versa) including decimal degrees; degrees, minutes, seconds; Universal Transverse Mercator (UTM), and United States National Grid (USNG).\n+![Image of format coordinates](FormatCoordinates.png)\n \n-![](FormatCoordinates.png)\n+## Use case\n+\n+The coordinate formatter can format a map location in WGS84 in a number of common coordinate notations. Parsing one of these formats to a location is also supported. Formats include decimal degrees; degrees, minutes, seconds; Universal Transverse Mercator (UTM), and United States National Grid (USNG).\n \n ## How to use the sample\n \n-Click on the map to see a callout with the clicked location's coordinate formatted in 4 different ways. You can also put a coordinate string in any of these formats in the text field. Hit Enter and the coordinate string will be converted to a map location which the callout will move to.\n+Click on the map to see a callout with the clicked location's coordinate formatted in 4 different ways. You can also put a coordinate string in any of these formats in the text field. Hit 'Enter' and the coordinate string will be parsed to a map location which the callout will move to.\n \n ## How it works\n \n-To convert between a `Point` and different coordinate formats using the\n-`CoordinateFormatter`:\n-\n 1. Get or create a map `Point` with a spatial reference.\n-2. Use one of the static \"to\" methods on `CoordinateFormatter` such as\n-  `CoordinateFormatter.toLatitudeLongitude(point, CoordinateFormatter.LatitudeLongitudeFormat.DECIMAL_DEGREES,4)` to get the formatted string`.\n+2. Use one of the static \"to\" methods on `CoordinateFormatter` such as `CoordinateFormatter.toLatitudeLongitude(point, CoordinateFormatter.LatitudeLongitudeFormat.DECIMAL_DEGREES, 4)` to get the formatted string.\n 3. To go from a formatted string to a `Point`, use one of the \"from\" static methods like `CoordinateFormatter.fromUtm(coordinateString, map.getSpatialReference(), CoordinateFormatter.UtmConversionMode.LATITUDE_BAND_INDICATORS)`.\n \n ## Relevant API\n \n-* ArcGISMap\n-* ArcGISTiledLayer\n-* Basemap\n-* Callout\n * CoordinateFormatter\n-* MapView\n+* CoordinateFormatter.LatitudeLongitudeFormat\n+* CoordinateFormatter.UtmConversionMode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd49b45d56c19ea38c04dc8a953e99d2da3a972"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxOTAyNA==", "bodyText": "Indeed - I'll go ahead and try and make sure this is the case for all the other PRs", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/447#discussion_r394219024", "createdAt": "2020-03-18T09:46:07Z", "author": {"login": "JonLavi"}, "path": "display_information/format-coordinates/README.md", "diffHunk": "@@ -1,30 +1,29 @@\n-# Format Coordinates\n+# Format coordinates\n \n-Write coordinates in a variety of common formats.\n+Format coordinates in a variety of common notations.\n \n-Convert a map location Point in WGS84 to a String in a number of different coordinate notations (and vice versa) including decimal degrees; degrees, minutes, seconds; Universal Transverse Mercator (UTM), and United States National Grid (USNG).\n+![Image of format coordinates](FormatCoordinates.png)\n \n-![](FormatCoordinates.png)\n+## Use case\n+\n+The coordinate formatter can format a map location in WGS84 in a number of common coordinate notations. Parsing one of these formats to a location is also supported. Formats include decimal degrees; degrees, minutes, seconds; Universal Transverse Mercator (UTM), and United States National Grid (USNG).\n \n ## How to use the sample\n \n-Click on the map to see a callout with the clicked location's coordinate formatted in 4 different ways. You can also put a coordinate string in any of these formats in the text field. Hit Enter and the coordinate string will be converted to a map location which the callout will move to.\n+Click on the map to see a callout with the clicked location's coordinate formatted in 4 different ways. You can also put a coordinate string in any of these formats in the text field. Hit 'Enter' and the coordinate string will be parsed to a map location which the callout will move to.\n \n ## How it works\n \n-To convert between a `Point` and different coordinate formats using the\n-`CoordinateFormatter`:\n-\n 1. Get or create a map `Point` with a spatial reference.\n-2. Use one of the static \"to\" methods on `CoordinateFormatter` such as\n-  `CoordinateFormatter.toLatitudeLongitude(point, CoordinateFormatter.LatitudeLongitudeFormat.DECIMAL_DEGREES,4)` to get the formatted string`.\n+2. Use one of the static \"to\" methods on `CoordinateFormatter` such as `CoordinateFormatter.toLatitudeLongitude(point, CoordinateFormatter.LatitudeLongitudeFormat.DECIMAL_DEGREES, 4)` to get the formatted string.\n 3. To go from a formatted string to a `Point`, use one of the \"from\" static methods like `CoordinateFormatter.fromUtm(coordinateString, map.getSpatialReference(), CoordinateFormatter.UtmConversionMode.LATITUDE_BAND_INDICATORS)`.\n \n ## Relevant API\n \n-* ArcGISMap\n-* ArcGISTiledLayer\n-* Basemap\n-* Callout\n * CoordinateFormatter\n-* MapView\n+* CoordinateFormatter.LatitudeLongitudeFormat\n+* CoordinateFormatter.UtmConversionMode", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3MzIzMg=="}, "originalCommit": {"oid": "ffd49b45d56c19ea38c04dc8a953e99d2da3a972"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU1MzI5OnYy", "diffSide": "RIGHT", "path": "display_information/show-labels-on-layer/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0NDo0M1rOF3pekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMToxMjozNlrOF4p2tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NTU3MQ==", "bodyText": "our sample is currently using the 115th congressional districts. Either we should update the readme to reflect that, or better yet, update our sample so that we are using the common design data", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/447#discussion_r393895571", "createdAt": "2020-03-17T18:44:43Z", "author": {"login": "Rachael-E"}, "path": "display_information/show-labels-on-layer/README.md", "diffHunk": "@@ -1,24 +1,43 @@\n-# Show Labels on Layer\n+# Show labels on layers\n \n-Add custom labels to a layer.\n+Display custom labels on a feature layer.\n \n-![](ShowLabelsOnLayer.png)\n+![Image of show labels on layers](ShowLabelsOnLayer.png)\n \n-## How it works\n+## Use case\n+\n+Labeling features is useful to visually display a key piece of information or attribute of a feature on a map. For example, you may want to label rivers or street with their names. \n+\n+## How to use the sample\n \n-To show labels on a feature layer:\n+Pan and zoom around the United States. Labels for congressional districts will be shown in red for Republican districts and blue for Democrat districts. Notice how labels pop into view as you zoom in.\n \n-1. First, create a `FeatureLayer` with a `ServiceFeatureTable` using an online feature service.\n-2. Create a `TextSymbol` to use for displaying the label text.\n-3. Create a JSON string for the label definition.\n+## How it works\n+\n+1. Create a `ServiceFeatureTable` using a feature service URL.\n+2. Create a `FeatureLayer` from the service feature table.\n+3. Create a `TextSymbol` to use for displaying the label text.\n+4. Create a JSON string for the label definition.\n     * Set the \"LabelExpressionInfo.expression\" key to express what the text the label should display. You can use fields of the feature by using `$feature.field_name` in the expression.\n     * To use the text symbol, set the \"symbol\" key to the symbol's JSON representation using `textSymbol.toJson()`.\n-4. Create a label definition from the JSON using `LabelDefinition.fromJson(json)`.`\n-5. Add the definition to the feature layer with `featureLayer.getLabelDefinitions().add(labelDefinition)`.\n-6. Lastly, enable labels on the layer using `featureLayer.setLabelsEnabled()`.\n+5. Create a label definition from the JSON using `LabelDefinition.fromJson(json)`.\n+6. Add the definition to the feature layer with `featureLayer.getLabelDefinitions().add(labelDefinition)`.\n+7. Lastly, enable labels on the layer using `featureLayer.setLabelsEnabled()`.\n \n ## Relevant API\n \n * FeatureLayer\n * LabelDefinition\n * TextSymbol\n+\n+## About the data\n+\n+This sample uses the [USA 116th Congressional Districts](https://www.arcgis.com/home/item.html?id=cc6a869374434bee9fefad45e291b779) feature layer hosted on ArcGIS Online.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd49b45d56c19ea38c04dc8a953e99d2da3a972"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxODQ5NA==", "bodyText": "That's a really good spot. I've updated the sample data (incl. the code, to match the good practices we preach).", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/447#discussion_r394218494", "createdAt": "2020-03-18T09:45:17Z", "author": {"login": "JonLavi"}, "path": "display_information/show-labels-on-layer/README.md", "diffHunk": "@@ -1,24 +1,43 @@\n-# Show Labels on Layer\n+# Show labels on layers\n \n-Add custom labels to a layer.\n+Display custom labels on a feature layer.\n \n-![](ShowLabelsOnLayer.png)\n+![Image of show labels on layers](ShowLabelsOnLayer.png)\n \n-## How it works\n+## Use case\n+\n+Labeling features is useful to visually display a key piece of information or attribute of a feature on a map. For example, you may want to label rivers or street with their names. \n+\n+## How to use the sample\n \n-To show labels on a feature layer:\n+Pan and zoom around the United States. Labels for congressional districts will be shown in red for Republican districts and blue for Democrat districts. Notice how labels pop into view as you zoom in.\n \n-1. First, create a `FeatureLayer` with a `ServiceFeatureTable` using an online feature service.\n-2. Create a `TextSymbol` to use for displaying the label text.\n-3. Create a JSON string for the label definition.\n+## How it works\n+\n+1. Create a `ServiceFeatureTable` using a feature service URL.\n+2. Create a `FeatureLayer` from the service feature table.\n+3. Create a `TextSymbol` to use for displaying the label text.\n+4. Create a JSON string for the label definition.\n     * Set the \"LabelExpressionInfo.expression\" key to express what the text the label should display. You can use fields of the feature by using `$feature.field_name` in the expression.\n     * To use the text symbol, set the \"symbol\" key to the symbol's JSON representation using `textSymbol.toJson()`.\n-4. Create a label definition from the JSON using `LabelDefinition.fromJson(json)`.`\n-5. Add the definition to the feature layer with `featureLayer.getLabelDefinitions().add(labelDefinition)`.\n-6. Lastly, enable labels on the layer using `featureLayer.setLabelsEnabled()`.\n+5. Create a label definition from the JSON using `LabelDefinition.fromJson(json)`.\n+6. Add the definition to the feature layer with `featureLayer.getLabelDefinitions().add(labelDefinition)`.\n+7. Lastly, enable labels on the layer using `featureLayer.setLabelsEnabled()`.\n \n ## Relevant API\n \n * FeatureLayer\n * LabelDefinition\n * TextSymbol\n+\n+## About the data\n+\n+This sample uses the [USA 116th Congressional Districts](https://www.arcgis.com/home/item.html?id=cc6a869374434bee9fefad45e291b779) feature layer hosted on ArcGIS Online.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NTU3MQ=="}, "originalCommit": {"oid": "ffd49b45d56c19ea38c04dc8a953e99d2da3a972"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk1MDMyNQ==", "bodyText": "oh cool, thank you!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/447#discussion_r394950325", "createdAt": "2020-03-19T11:12:36Z", "author": {"login": "Rachael-E"}, "path": "display_information/show-labels-on-layer/README.md", "diffHunk": "@@ -1,24 +1,43 @@\n-# Show Labels on Layer\n+# Show labels on layers\n \n-Add custom labels to a layer.\n+Display custom labels on a feature layer.\n \n-![](ShowLabelsOnLayer.png)\n+![Image of show labels on layers](ShowLabelsOnLayer.png)\n \n-## How it works\n+## Use case\n+\n+Labeling features is useful to visually display a key piece of information or attribute of a feature on a map. For example, you may want to label rivers or street with their names. \n+\n+## How to use the sample\n \n-To show labels on a feature layer:\n+Pan and zoom around the United States. Labels for congressional districts will be shown in red for Republican districts and blue for Democrat districts. Notice how labels pop into view as you zoom in.\n \n-1. First, create a `FeatureLayer` with a `ServiceFeatureTable` using an online feature service.\n-2. Create a `TextSymbol` to use for displaying the label text.\n-3. Create a JSON string for the label definition.\n+## How it works\n+\n+1. Create a `ServiceFeatureTable` using a feature service URL.\n+2. Create a `FeatureLayer` from the service feature table.\n+3. Create a `TextSymbol` to use for displaying the label text.\n+4. Create a JSON string for the label definition.\n     * Set the \"LabelExpressionInfo.expression\" key to express what the text the label should display. You can use fields of the feature by using `$feature.field_name` in the expression.\n     * To use the text symbol, set the \"symbol\" key to the symbol's JSON representation using `textSymbol.toJson()`.\n-4. Create a label definition from the JSON using `LabelDefinition.fromJson(json)`.`\n-5. Add the definition to the feature layer with `featureLayer.getLabelDefinitions().add(labelDefinition)`.\n-6. Lastly, enable labels on the layer using `featureLayer.setLabelsEnabled()`.\n+5. Create a label definition from the JSON using `LabelDefinition.fromJson(json)`.\n+6. Add the definition to the feature layer with `featureLayer.getLabelDefinitions().add(labelDefinition)`.\n+7. Lastly, enable labels on the layer using `featureLayer.setLabelsEnabled()`.\n \n ## Relevant API\n \n * FeatureLayer\n * LabelDefinition\n * TextSymbol\n+\n+## About the data\n+\n+This sample uses the [USA 116th Congressional Districts](https://www.arcgis.com/home/item.html?id=cc6a869374434bee9fefad45e291b779) feature layer hosted on ArcGIS Online.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NTU3MQ=="}, "originalCommit": {"oid": "ffd49b45d56c19ea38c04dc8a953e99d2da3a972"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU1ODU2OnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0NjowN1rOF3ph2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOTo0NjoyN1rOF39O6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NjQxMQ==", "bodyText": "this step could do with a code description, borrowed from the original:\nGraphic.getAttributes().put(\"DESCRIPTION\",)", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/447#discussion_r393896411", "createdAt": "2020-03-17T18:46:07Z", "author": {"login": "Rachael-E"}, "path": "display_information/update-graphics/README.md", "diffHunk": "@@ -21,31 +23,16 @@ Update Graphic's Symbol:\n \n ## How it works\n \n-How to change a `Graphic`'s symbol, attributes, and geometry:\n-\n-1. Create a `GraphicsOverlay` and attach it to the `MapView`.\n-2. Create graphics using a `Point` and `SimpleMarkerSymbol`.\n-    * point gives the x,y-coordinate location of where SimpleMarkerSymbol will be located\n-3. Add two Attributes to each graphic, `Graphic.getAttributes().put()`.\n-    * first attribute key NAME and value the name for that graphic\n-    * second attribute key DESCRIPTION and value a description for that graphic\n-4. Add graphics to the graphics overlay, `GraphicsOverlay.getGraphics().add(graphic)`.\n-5. Identify graphic that user has selected using `MapView.identifyGraphicsOverlayAsync(GraphicsOverlay,Point2D, tolerance, maximumResults)`.\n-    * graphics overlay, the one that was created above\n-    * point2D, from the user mouse click\n-    * tolerance, places buffer around the point2d\n-    * maxiumum result, sets the maximum amount of graphics to return near that point2d\n-6. Select graphic that user selected.\n-    * the identify will return a list of graphics\n-    * go through that list and set each graphic's selection to true, `Graphic.setSelected()`\n-7. To update graphic's location.\n-    * create a point from the user mouse click, `MapView.screenToLocation()`\n-    * set that point as the selected graphic's new geometry, `Graphic.setGeometry()`\n-8. To update graphic's attribute.\n-    * get attrubutes of selected graphic and set DESCRIPTION key, `Graphic.getAttributes().put(\"DESCRIPTION\",)`\n-9. To update graphic's symbol.\n-    * get symbol from the drop down box\n-    * assign that symbol to the selected graphic, `Graphic.setSymbol()`\n+1. Capture clicks on the `MapView` by using `.setOnMouseClicked()`. Then use the event to create a `Point` from the clicked location. \n+2. Identify the clicked graphics using `MapView.identifyGraphicsOverlayAsync(graphicsOverlay, pointClicked, tolerance, max results)`.\n+3. To select a clicked graphics, iterate through the list of graphics returned by the identification method, and set each graphic's selection property to `true`.\n+4. To update graphic's location, create a new `Point` from the user's clicked point, and use `Graphic.setGeometry(point)` to modify the graphic's geometry.\n+5. To update a graphic's attribute, get the attributes of the selected graphic and set the `DESCRIPTION` key with the desired string value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd49b45d56c19ea38c04dc8a953e99d2da3a972"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxOTI0MQ==", "bodyText": "Added it back", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/447#discussion_r394219241", "createdAt": "2020-03-18T09:46:27Z", "author": {"login": "JonLavi"}, "path": "display_information/update-graphics/README.md", "diffHunk": "@@ -21,31 +23,16 @@ Update Graphic's Symbol:\n \n ## How it works\n \n-How to change a `Graphic`'s symbol, attributes, and geometry:\n-\n-1. Create a `GraphicsOverlay` and attach it to the `MapView`.\n-2. Create graphics using a `Point` and `SimpleMarkerSymbol`.\n-    * point gives the x,y-coordinate location of where SimpleMarkerSymbol will be located\n-3. Add two Attributes to each graphic, `Graphic.getAttributes().put()`.\n-    * first attribute key NAME and value the name for that graphic\n-    * second attribute key DESCRIPTION and value a description for that graphic\n-4. Add graphics to the graphics overlay, `GraphicsOverlay.getGraphics().add(graphic)`.\n-5. Identify graphic that user has selected using `MapView.identifyGraphicsOverlayAsync(GraphicsOverlay,Point2D, tolerance, maximumResults)`.\n-    * graphics overlay, the one that was created above\n-    * point2D, from the user mouse click\n-    * tolerance, places buffer around the point2d\n-    * maxiumum result, sets the maximum amount of graphics to return near that point2d\n-6. Select graphic that user selected.\n-    * the identify will return a list of graphics\n-    * go through that list and set each graphic's selection to true, `Graphic.setSelected()`\n-7. To update graphic's location.\n-    * create a point from the user mouse click, `MapView.screenToLocation()`\n-    * set that point as the selected graphic's new geometry, `Graphic.setGeometry()`\n-8. To update graphic's attribute.\n-    * get attrubutes of selected graphic and set DESCRIPTION key, `Graphic.getAttributes().put(\"DESCRIPTION\",)`\n-9. To update graphic's symbol.\n-    * get symbol from the drop down box\n-    * assign that symbol to the selected graphic, `Graphic.setSymbol()`\n+1. Capture clicks on the `MapView` by using `.setOnMouseClicked()`. Then use the event to create a `Point` from the clicked location. \n+2. Identify the clicked graphics using `MapView.identifyGraphicsOverlayAsync(graphicsOverlay, pointClicked, tolerance, max results)`.\n+3. To select a clicked graphics, iterate through the list of graphics returned by the identification method, and set each graphic's selection property to `true`.\n+4. To update graphic's location, create a new `Point` from the user's clicked point, and use `Graphic.setGeometry(point)` to modify the graphic's geometry.\n+5. To update a graphic's attribute, get the attributes of the selected graphic and set the `DESCRIPTION` key with the desired string value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NjQxMQ=="}, "originalCommit": {"oid": "ffd49b45d56c19ea38c04dc8a953e99d2da3a972"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 136, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}