{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NTQ5NjQ4", "number": 556, "reviewThreads": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyNTo0MVrOEkeDSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyMjoyNlrOEsp0jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njc2NTU0OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyNTo0MVrOHTbl0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjozODoxNlrOHV37xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzNzA0Mg==", "bodyText": "Don't forget to add a screenshot (and maybe even a fancy gif for the SV?)", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490137042", "createdAt": "2020-09-17T10:25:41Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,43 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![](ShowLocationHistory.png)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY5ODU2NQ==", "bodyText": "Sorry, what I meant here was the 'alt' text is missing. It should say:\n![Image of show location history](ShowLocationHistory.png)", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r492698565", "createdAt": "2020-09-22T12:38:16Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,43 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![](ShowLocationHistory.png)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzNzA0Mg=="}, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njc2OTM0OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyNjo0OFrOHTboFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyNjo0OFrOHTboFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzNzYyMw==", "bodyText": "I don't think we need this description, it's quite obvious and the type of basemap/graphics aren't really that relevant to the way the API works", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490137623", "createdAt": "2020-09-17T10:26:48Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,43 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![](ShowLocationHistory.png)\n+\n+## Use case\n+\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. An unmapped trail, for example, could be added to the map using this technique.\n+\n+## How to use the sample\n+\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history.\n+\n+## How it works\n+\n+1. If necessary, request location permission from the operating system.\n+2. Create a `GraphicsOverlay` to show each point and another `GraphicsOverlay` for displaying the route line.\n+3. Create a `SimulatedLocationDataSource` and initialize it with a polyline. Start the `SimulatedLocationDataSource` to begin receiving location updates.\n+4. Use a `LocationChangedListener` on the `simulatedLocationDataSource` to get location updates.\n+5. When the location updates store that location, display a point on the map at the location, and re-create the route polyline.\n+\n+## Relevant API\n+\n+* LocationDataSource.Position\n+* LocationDataSource\n+* LocationDataSource.Location\n+* LocationDataSource.LocationChangedEvent\n+* LocationDataSource.LocationChangedListener\n+* LocationDisplay.AutoPanMode\n+* MapView.LocationDisplay\n+* SimulatedLocationDataSource\n+* SimulationParameters\n+\n+## About the data\n+\n+The sample uses a dark gray basemap with lime and red graphics. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njc3MTYxOnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyNzoyNVrOHTbpcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo0MzoyNlrOHUDwfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzNzk2OA==", "bodyText": "I might suggest adding a mention of the simulated location data source here already, since this section by itself would give the users the impression they are seeing some sort of 'live' location?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490137968", "createdAt": "2020-09-17T10:27:25Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,43 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![](ShowLocationHistory.png)\n+\n+## Use case\n+\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. An unmapped trail, for example, could be added to the map using this technique.\n+\n+## How to use the sample\n+\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwMzgyNA==", "bodyText": "Perhaps I could also add a line like: \"To track a user's real position, use the LocationDataSource instead\"?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490403824", "createdAt": "2020-09-17T16:37:56Z", "author": {"login": "sclaridge"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,43 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![](ShowLocationHistory.png)\n+\n+## Use case\n+\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. An unmapped trail, for example, could be added to the map using this technique.\n+\n+## How to use the sample\n+\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzNzk2OA=="}, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5NTEzNA==", "bodyText": "Yes, that's a good call. It's important to make clear to the users that they are not actually driving through LA when they run this sample ;)", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490795134", "createdAt": "2020-09-18T08:43:26Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,43 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![](ShowLocationHistory.png)\n+\n+## Use case\n+\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. An unmapped trail, for example, could be added to the map using this technique.\n+\n+## How to use the sample\n+\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzNzk2OA=="}, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njc3NDE5OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyODoxMlrOHTbq-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyODoxMlrOHTbq-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzODM2MQ==", "bodyText": "We don't have this in Java, so I think we can leave this out. A potential sample with the NMEA api would handle passing in 'real' data into LocationDataSource", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490138361", "createdAt": "2020-09-17T10:28:12Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,43 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![](ShowLocationHistory.png)\n+\n+## Use case\n+\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. An unmapped trail, for example, could be added to the map using this technique.\n+\n+## How to use the sample\n+\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history.\n+\n+## How it works\n+\n+1. If necessary, request location permission from the operating system.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njc5MDA5OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozMjo1NFrOHTb0uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozMjo1NFrOHTb0uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MDg1Ng==", "bodyText": "We could put this one at the top of the list, so they are sorted 'alphabetically'.\nNot that there's a general tendenct only to put top-level classes in here, but since the inner classes Location, LocaitonChangedEvent, etc. are all quite important, this is ok.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490140856", "createdAt": "2020-09-17T10:32:54Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,43 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![](ShowLocationHistory.png)\n+\n+## Use case\n+\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. An unmapped trail, for example, could be added to the map using this technique.\n+\n+## How to use the sample\n+\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history.\n+\n+## How it works\n+\n+1. If necessary, request location permission from the operating system.\n+2. Create a `GraphicsOverlay` to show each point and another `GraphicsOverlay` for displaying the route line.\n+3. Create a `SimulatedLocationDataSource` and initialize it with a polyline. Start the `SimulatedLocationDataSource` to begin receiving location updates.\n+4. Use a `LocationChangedListener` on the `simulatedLocationDataSource` to get location updates.\n+5. When the location updates store that location, display a point on the map at the location, and re-create the route polyline.\n+\n+## Relevant API\n+\n+* LocationDataSource.Position\n+* LocationDataSource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njc5MjE0OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.metadata.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozMzozMVrOHTb1-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozMzozMVrOHTb1-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MTE3OA==", "bodyText": "This should say\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"ShowLocationHistory.jpg\"\n          \n          \n            \n                    \"ShowLocationHistory.png\"\n          \n      \n    \n    \n  \n\nIf you haven't been using the metadata script to generate this file, it's worth giving it a try, since it does deal with quite a lot of the things that may have typos in it!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490141178", "createdAt": "2020-09-17T10:33:31Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/README.metadata.json", "diffHunk": "@@ -0,0 +1,45 @@\n+{\n+    \"category\": \"Map view\",\n+    \"description\": \"Display your location history on the map.\",\n+    \"ignore\": false,\n+    \"images\": [\n+        \"ShowLocationHistory.jpg\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjgwMzg3OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozNjo1N1rOHTb8_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNToxODozMVrOHV_fsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0Mjk3NA==", "bodyText": "I think this API is already available in 100.9.0, so might be able to merge this straight into master. Depends on whether @TADraeseke and @mbcoder think that's worth doing without the NMEA API and sample also being available...", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490142974", "createdAt": "2020-09-17T10:36:57Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/build.gradle", "diffHunk": "@@ -0,0 +1,75 @@\n+plugins {\n+    id 'application'\n+    id 'org.openjfx.javafxplugin' version '0.0.5'\n+}\n+\n+group = 'com.esri.samples'\n+\n+ext {\n+    arcgisVersion = '100.10.0-2902'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgyMjQ1MQ==", "bodyText": "After discussing this with @TADraeseke, this sample can be merged into dev so that it can be released alongside the NMEA API.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r492822451", "createdAt": "2020-09-22T15:18:31Z", "author": {"login": "sclaridge"}, "path": "map_view/show-location-history/build.gradle", "diffHunk": "@@ -0,0 +1,75 @@\n+plugins {\n+    id 'application'\n+    id 'org.openjfx.javafxplugin' version '0.0.5'\n+}\n+\n+group = 'com.esri.samples'\n+\n+ext {\n+    arcgisVersion = '100.10.0-2902'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0Mjk3NA=="}, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njg2OTYyOnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1NzoyMFrOHTclDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1NzoyMFrOHTclDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1MzIyOA==", "bodyText": "instead of referring to the URL, you can simply do:`\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n          \n          \n            \n                  ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n          \n      \n    \n    \n  \n\nStandard basemaps all have a method on the Basemap class to create them:\nhttps://developers.arcgis.com/java/latest/api-reference/reference/com/esri/arcgisruntime/mapping/Basemap.html", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490153228", "createdAt": "2020-09-17T10:57:20Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njg5NDY0OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTowNDo0NFrOHTcz6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTowNDo0NFrOHTcz6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1NzAzNA==", "bodyText": "I'd suggest perhaps moving this beneath the creation of the GraphicsOverlays and Polyline Builder. That way we have all the parts up and ready before want to make use of them inside the map.\nThen, perhaps we should move the parts that set up the SimulatedLocationDataSource and configure the LocationDisplay (lines 122-154) inside this load-done check. After all, there's not much of a reason to start the LocationDisplay if our map is not working.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490157034", "createdAt": "2020-09-17T11:04:44Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjkwOTk1OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTowOToyOFrOHTc8zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTo0MDo1NFrOHVH1zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1OTMwOQ==", "bodyText": "I find the interaction with panning and switching the auto-pan on and off is not that intuitive? It doesn't help that the auto-pan functionality is not continuous, but only happens when the dot is approaching the edge of the screen. Not sure if this can be adjusted somehow.\nPerhaps this sample could benefit from a tick-box to enable/disable auto-pan? When the tick-box would be checked, the manual panning with the mouse should be disabled (or, panning with the mouse would de-activate that tickbox). What do you think?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490159309", "createdAt": "2020-09-17T11:09:28Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n+        SpatialReference.create(3857));\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // start the simulated location data source\n+      simulatedLocationDataSource.startAsync();\n+      simulatedLocationDataSource.addLocationChangedListener(locationChangedEvent -> {\n+        // if location tracking is turned off, do not add to the polyline\n+        if (!isTrackingEnabled) {\n+          return;\n+        }\n+        // get the position as a point from locationChangedEvent\n+        Point position = locationChangedEvent.getLocation().getPosition();\n+\n+        // add the new point to the polyline\n+        polylineBuilder.addPoint(position);\n+\n+        // add the new point to the graphics overlay\n+        locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+\n+        // reset the old polyline connecting the points\n+        locationHistoryLineOverlay.getGraphics().clear();\n+\n+        // add the updated polyline to the graphics overlay\n+        locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+      });\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      mapView.getLocationDisplay().setLocationDataSource(simulatedLocationDataSource);\n+      mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      mapView.getLocationDisplay().setInitialZoomScale(7000);\n+\n+      trackingButton.setOnAction(event -> {\n+        // if the user has panned away from the location display, turn it on again\n+        if (mapView.getLocationDisplay().getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+          mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwMjM2OQ==", "bodyText": "I agree, I think a checkbox toggling the auto-pan would be more intuitive.\nHowever, when the auto-pan is off the issue with the extra polylines still occurs when the user pans away.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490402369", "createdAt": "2020-09-17T16:35:41Z", "author": {"login": "sclaridge"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n+        SpatialReference.create(3857));\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // start the simulated location data source\n+      simulatedLocationDataSource.startAsync();\n+      simulatedLocationDataSource.addLocationChangedListener(locationChangedEvent -> {\n+        // if location tracking is turned off, do not add to the polyline\n+        if (!isTrackingEnabled) {\n+          return;\n+        }\n+        // get the position as a point from locationChangedEvent\n+        Point position = locationChangedEvent.getLocation().getPosition();\n+\n+        // add the new point to the polyline\n+        polylineBuilder.addPoint(position);\n+\n+        // add the new point to the graphics overlay\n+        locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+\n+        // reset the old polyline connecting the points\n+        locationHistoryLineOverlay.getGraphics().clear();\n+\n+        // add the updated polyline to the graphics overlay\n+        locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+      });\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      mapView.getLocationDisplay().setLocationDataSource(simulatedLocationDataSource);\n+      mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      mapView.getLocationDisplay().setInitialZoomScale(7000);\n+\n+      trackingButton.setOnAction(event -> {\n+        // if the user has panned away from the location display, turn it on again\n+        if (mapView.getLocationDisplay().getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+          mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1OTMwOQ=="}, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5NjAwNA==", "bodyText": "I'll have a closer look at the code. I didn't notice any connection between the drawing and listening to panning on the map, but it's possible that one thing is triggering another?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490796004", "createdAt": "2020-09-18T08:44:59Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n+        SpatialReference.create(3857));\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // start the simulated location data source\n+      simulatedLocationDataSource.startAsync();\n+      simulatedLocationDataSource.addLocationChangedListener(locationChangedEvent -> {\n+        // if location tracking is turned off, do not add to the polyline\n+        if (!isTrackingEnabled) {\n+          return;\n+        }\n+        // get the position as a point from locationChangedEvent\n+        Point position = locationChangedEvent.getLocation().getPosition();\n+\n+        // add the new point to the polyline\n+        polylineBuilder.addPoint(position);\n+\n+        // add the new point to the graphics overlay\n+        locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+\n+        // reset the old polyline connecting the points\n+        locationHistoryLineOverlay.getGraphics().clear();\n+\n+        // add the updated polyline to the graphics overlay\n+        locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+      });\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      mapView.getLocationDisplay().setLocationDataSource(simulatedLocationDataSource);\n+      mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      mapView.getLocationDisplay().setInitialZoomScale(7000);\n+\n+      trackingButton.setOnAction(event -> {\n+        // if the user has panned away from the location display, turn it on again\n+        if (mapView.getLocationDisplay().getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+          mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1OTMwOQ=="}, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxMzkxNA==", "bodyText": "It happens when position = mapView.getLocationDisplay().getMapLocation() so that the LocationDisplay symbol moves ahead of the tracking. When the position is set this way and auto-pan is disabled, if the user pans away then back to the tracking, extra graphics are drawn.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490813914", "createdAt": "2020-09-18T09:15:55Z", "author": {"login": "sclaridge"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n+        SpatialReference.create(3857));\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // start the simulated location data source\n+      simulatedLocationDataSource.startAsync();\n+      simulatedLocationDataSource.addLocationChangedListener(locationChangedEvent -> {\n+        // if location tracking is turned off, do not add to the polyline\n+        if (!isTrackingEnabled) {\n+          return;\n+        }\n+        // get the position as a point from locationChangedEvent\n+        Point position = locationChangedEvent.getLocation().getPosition();\n+\n+        // add the new point to the polyline\n+        polylineBuilder.addPoint(position);\n+\n+        // add the new point to the graphics overlay\n+        locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+\n+        // reset the old polyline connecting the points\n+        locationHistoryLineOverlay.getGraphics().clear();\n+\n+        // add the updated polyline to the graphics overlay\n+        locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+      });\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      mapView.getLocationDisplay().setLocationDataSource(simulatedLocationDataSource);\n+      mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      mapView.getLocationDisplay().setInitialZoomScale(7000);\n+\n+      trackingButton.setOnAction(event -> {\n+        // if the user has panned away from the location display, turn it on again\n+        if (mapView.getLocationDisplay().getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+          mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1OTMwOQ=="}, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4NDcwNA==", "bodyText": "So I think this fixes the issue with the extra polylines, and also sets the LocationDisplay marker ahead of the tracking graphics:\n// get the position as a point from the simulated location data source\nInteger nextPoint = simulatedLocationDataSource.getCurrentLocationIndex()-1;\nLocationDataSource.Location nextLocation = simulatedLocationDataSource.getLocations().get(nextPoint);\nPoint position = new Point(nextLocation.getPosition().getX(),nextLocation.getPosition().getY());", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490984704", "createdAt": "2020-09-18T14:22:09Z", "author": {"login": "sclaridge"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n+        SpatialReference.create(3857));\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // start the simulated location data source\n+      simulatedLocationDataSource.startAsync();\n+      simulatedLocationDataSource.addLocationChangedListener(locationChangedEvent -> {\n+        // if location tracking is turned off, do not add to the polyline\n+        if (!isTrackingEnabled) {\n+          return;\n+        }\n+        // get the position as a point from locationChangedEvent\n+        Point position = locationChangedEvent.getLocation().getPosition();\n+\n+        // add the new point to the polyline\n+        polylineBuilder.addPoint(position);\n+\n+        // add the new point to the graphics overlay\n+        locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+\n+        // reset the old polyline connecting the points\n+        locationHistoryLineOverlay.getGraphics().clear();\n+\n+        // add the updated polyline to the graphics overlay\n+        locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+      });\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      mapView.getLocationDisplay().setLocationDataSource(simulatedLocationDataSource);\n+      mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      mapView.getLocationDisplay().setInitialZoomScale(7000);\n+\n+      trackingButton.setOnAction(event -> {\n+        // if the user has panned away from the location display, turn it on again\n+        if (mapView.getLocationDisplay().getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+          mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1OTMwOQ=="}, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkxMDYwNA==", "bodyText": "I was thinking of something similar, but that feels a little counterintuitive from a user perspective.\nI'd check whether any of the other platforms are doing something similar. If they aren't specifically working around this, then we may have a small bug in the LocationDisplay API on Java.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r491910604", "createdAt": "2020-09-21T09:40:54Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n+        SpatialReference.create(3857));\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // start the simulated location data source\n+      simulatedLocationDataSource.startAsync();\n+      simulatedLocationDataSource.addLocationChangedListener(locationChangedEvent -> {\n+        // if location tracking is turned off, do not add to the polyline\n+        if (!isTrackingEnabled) {\n+          return;\n+        }\n+        // get the position as a point from locationChangedEvent\n+        Point position = locationChangedEvent.getLocation().getPosition();\n+\n+        // add the new point to the polyline\n+        polylineBuilder.addPoint(position);\n+\n+        // add the new point to the graphics overlay\n+        locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+\n+        // reset the old polyline connecting the points\n+        locationHistoryLineOverlay.getGraphics().clear();\n+\n+        // add the updated polyline to the graphics overlay\n+        locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+      });\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      mapView.getLocationDisplay().setLocationDataSource(simulatedLocationDataSource);\n+      mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      mapView.getLocationDisplay().setInitialZoomScale(7000);\n+\n+      trackingButton.setOnAction(event -> {\n+        // if the user has panned away from the location display, turn it on again\n+        if (mapView.getLocationDisplay().getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+          mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1OTMwOQ=="}, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjkxNTM1OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToxMToxNFrOHTdAAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToxMToxNFrOHTdAAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2MDEyOQ==", "bodyText": "Technically we'll be filling the gap of the polyline when we start tracking again. So perhaps this comment should say 'do not draw points or extend the polyline'? Something along those lines", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490160129", "createdAt": "2020-09-17T11:11:14Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n+        SpatialReference.create(3857));\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // start the simulated location data source\n+      simulatedLocationDataSource.startAsync();\n+      simulatedLocationDataSource.addLocationChangedListener(locationChangedEvent -> {\n+        // if location tracking is turned off, do not add to the polyline", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njk0MjU1OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToxODo1NFrOHTdP7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToxODo1NFrOHTdP7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2NDIwNw==", "bodyText": "This is a bit of a tricky statement. If you're creating a Polyline.fromJson, then there's technically no need to cast it to a Polyline, since it's an object of that class already.\nBut, we can't do  Polyline routePolyline = Polyline.fromJson(),, because the return type of that is a 'Geometry'. This is because that method is indirectly referring to Geometry.fromJson, which is the type from which Polyline inherits.\nSo to keep with the class structure, it's best to do the following:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n          \n          \n            \n                  Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n          \n      \n    \n    \n  \n\nThat way we're accessing the method fromJson at it's lowest level, and trying to cast the result to a Polygon. If there's an error somewhere there, the message might also make it a little easier to understand why something broke (either with creating a generic Geometry from the Json, or with casting it to a Polyline)", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490164207", "createdAt": "2020-09-17T11:18:54Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njk2MjE1OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToyNDowMFrOHTdbIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToyNDowMFrOHTdbIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2NzA3NQ==", "bodyText": "Instead of repeatedly querying the mapView's LocationDisplay, we can save it to a variable. Although it adds a line of code, it makes the other lines a bit clearer:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  mapView.getLocationDisplay().setLocationDataSource(simulatedLocationDataSource);\n          \n          \n            \n                  mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n          \n          \n            \n                  mapView.getLocationDisplay().setInitialZoomScale(7000);\n          \n          \n            \n            \n          \n          \n            \n                  trackingButton.setOnAction(event -> {\n          \n          \n            \n                    // if the user has panned away from the location display, turn it on again\n          \n          \n            \n                    if (mapView.getLocationDisplay().getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n          \n          \n            \n                      mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n          \n          \n            \n            \t  LocationDisplay locationDisplay = mapView.getLocationDisplay();\n          \n          \n            \n                  locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n          \n          \n            \n                  locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n          \n          \n            \n                  locationDisplay.setInitialZoomScale(7000);\n          \n          \n            \n            \n          \n          \n            \n                  trackingButton.setOnAction(event -> {\n          \n          \n            \n                    // if the user has panned away from the location display, turn it on again\n          \n          \n            \n                    if (locationDisplay.getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n          \n          \n            \n                      locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490167075", "createdAt": "2020-09-17T11:24:00Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n+        SpatialReference.create(3857));\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // start the simulated location data source\n+      simulatedLocationDataSource.startAsync();\n+      simulatedLocationDataSource.addLocationChangedListener(locationChangedEvent -> {\n+        // if location tracking is turned off, do not add to the polyline\n+        if (!isTrackingEnabled) {\n+          return;\n+        }\n+        // get the position as a point from locationChangedEvent\n+        Point position = locationChangedEvent.getLocation().getPosition();\n+\n+        // add the new point to the polyline\n+        polylineBuilder.addPoint(position);\n+\n+        // add the new point to the graphics overlay\n+        locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+\n+        // reset the old polyline connecting the points\n+        locationHistoryLineOverlay.getGraphics().clear();\n+\n+        // add the updated polyline to the graphics overlay\n+        locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+      });\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      mapView.getLocationDisplay().setLocationDataSource(simulatedLocationDataSource);\n+      mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      mapView.getLocationDisplay().setInitialZoomScale(7000);\n+\n+      trackingButton.setOnAction(event -> {\n+        // if the user has panned away from the location display, turn it on again\n+        if (mapView.getLocationDisplay().getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+          mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njk3MjE4OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToyNjo0OFrOHTdhLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToyNjo0OFrOHTdhLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2ODYyMQ==", "bodyText": "There's absolutely nothing wrong with the way this is done here (arguably it's easier to read), but if you wanted to save yourself one line, a cheeky way of setting a value to it's opposite would be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (isTrackingEnabled) {\n          \n          \n            \n                      trackingButton.setText(\"Start Tracking\");\n          \n          \n            \n                      isTrackingEnabled = false;\n          \n          \n            \n                    } else {\n          \n          \n            \n                      trackingButton.setText(\"Stop Tracking\");\n          \n          \n            \n                      isTrackingEnabled = true;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (isTrackingEnabled) {\n          \n          \n            \n                      trackingButton.setText(\"Start Tracking\");\n          \n          \n            \n                    } else {\n          \n          \n            \n                      trackingButton.setText(\"Stop Tracking\");\n          \n          \n            \n                    }\n          \n          \n            \n                    isTrackingEnabled = !isTrackingEnabled;", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490168621", "createdAt": "2020-09-17T11:26:48Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n+        SpatialReference.create(3857));\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // start the simulated location data source\n+      simulatedLocationDataSource.startAsync();\n+      simulatedLocationDataSource.addLocationChangedListener(locationChangedEvent -> {\n+        // if location tracking is turned off, do not add to the polyline\n+        if (!isTrackingEnabled) {\n+          return;\n+        }\n+        // get the position as a point from locationChangedEvent\n+        Point position = locationChangedEvent.getLocation().getPosition();\n+\n+        // add the new point to the polyline\n+        polylineBuilder.addPoint(position);\n+\n+        // add the new point to the graphics overlay\n+        locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+\n+        // reset the old polyline connecting the points\n+        locationHistoryLineOverlay.getGraphics().clear();\n+\n+        // add the updated polyline to the graphics overlay\n+        locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+      });\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      mapView.getLocationDisplay().setLocationDataSource(simulatedLocationDataSource);\n+      mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      mapView.getLocationDisplay().setInitialZoomScale(7000);\n+\n+      trackingButton.setOnAction(event -> {\n+        // if the user has panned away from the location display, turn it on again\n+        if (mapView.getLocationDisplay().getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+          mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        }\n+        // toggle the location tracking when the button is clicked\n+        if (isTrackingEnabled) {\n+          trackingButton.setText(\"Start Tracking\");\n+          isTrackingEnabled = false;\n+        } else {\n+          trackingButton.setText(\"Stop Tracking\");\n+          isTrackingEnabled = true;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njk3NDQ3OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToyNzoyOVrOHTdihQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToyNzoyOVrOHTdihQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2ODk2NQ==", "bodyText": "I think a newline here would be good to separate this from the block above\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } catch (Exception e) {\n          \n          \n            \n                \n          \n          \n            \n                } catch (Exception e) {", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490168965", "createdAt": "2020-09-17T11:27:29Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n+        SpatialReference.create(3857));\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // start the simulated location data source\n+      simulatedLocationDataSource.startAsync();\n+      simulatedLocationDataSource.addLocationChangedListener(locationChangedEvent -> {\n+        // if location tracking is turned off, do not add to the polyline\n+        if (!isTrackingEnabled) {\n+          return;\n+        }\n+        // get the position as a point from locationChangedEvent\n+        Point position = locationChangedEvent.getLocation().getPosition();\n+\n+        // add the new point to the polyline\n+        polylineBuilder.addPoint(position);\n+\n+        // add the new point to the graphics overlay\n+        locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+\n+        // reset the old polyline connecting the points\n+        locationHistoryLineOverlay.getGraphics().clear();\n+\n+        // add the updated polyline to the graphics overlay\n+        locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+      });\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      mapView.getLocationDisplay().setLocationDataSource(simulatedLocationDataSource);\n+      mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      mapView.getLocationDisplay().setInitialZoomScale(7000);\n+\n+      trackingButton.setOnAction(event -> {\n+        // if the user has panned away from the location display, turn it on again\n+        if (mapView.getLocationDisplay().getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+          mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        }\n+        // toggle the location tracking when the button is clicked\n+        if (isTrackingEnabled) {\n+          trackingButton.setText(\"Start Tracking\");\n+          isTrackingEnabled = false;\n+        } else {\n+          trackingButton.setText(\"Stop Tracking\");\n+          isTrackingEnabled = true;\n+        }\n+      });\n+\n+      // add the map view and tracking button to the stack pane\n+      stackPane.getChildren().addAll(mapView, trackingButton);\n+      StackPane.setAlignment(trackingButton, Pos.TOP_LEFT);\n+      StackPane.setMargin(trackingButton, new Insets(10, 0, 0, 10));\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njk4ODU4OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTozMTowOFrOHTdqoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTozMTowOFrOHTdqoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3MTA0MA==", "bodyText": "This WKID corresponds to WebMercator, which we also have a utility method for (just makes it a bit more clear which reference we'll be using):\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n          \n          \n            \n                  Point center = new Point(-13185535.98, 4037766.28, SpatialReferences.getWebMercator());", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490171040", "createdAt": "2020-09-17T11:31:08Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njk5MzA4OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTozMjozNVrOHTdtWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTozMjozNVrOHTdtWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3MTczOQ==", "bodyText": "If the variable point above is not being re-used, we could consider writing:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  mapView.setViewpoint(new Viewpoint(center, 7000));\n          \n          \n            \n                  mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28, SpatialReferences.getWebMercator()), 7000));\n          \n      \n    \n    \n  \n\nIt's a bit of a mouthfull, but some of the other samples do this as well. Either way works though, so it's just a matter of preference!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490171739", "createdAt": "2020-09-17T11:32:35Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzAwMjk3OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTozNToyM1rOHTdzFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo0MjozMFrOHUDusw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3MzIwNQ==", "bodyText": "As you've already mentioned, it might be worth investigating a try-catch for this particular part of the code. The reason is that if there's every a problem getting this file (for example, the Gradle script didn't download it properly), we'd get a meaningful error in the catch block. At the moment the code would defer to the catch at line 175. Have a try in structuring it in a way that we display an error to the user, saying there was a problem getting the simulated data.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490173205", "createdAt": "2020-09-17T11:35:23Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM5OTM4MA==", "bodyText": "Sounds good! Do you think I should only catch IOExceptions? I imagine the try-catch with this block of code will be above the map.addDoneLoadingListener?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490399380", "createdAt": "2020-09-17T16:30:53Z", "author": {"login": "sclaridge"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3MzIwNQ=="}, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5NDY3NQ==", "bodyText": "Not sure which exceptions we'd need to handle, but the IDE will tell you if you're missing any. If there are more than say 3 specific exception types, we can simply do a generic catch (Exception e), since all we're really doing is displaying an error, not working with the internals of the individual exceptions.\nFor the structure: Yeah I think above is probably a good place to put it. We'd want that polyline ready to go before we do anything particular with the Map and MapView.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490794675", "createdAt": "2020-09-18T08:42:30Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3MzIwNQ=="}, "originalCommit": {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzE4MTUwOnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzo1MzoxNFrOHWa_fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOToxMDo1OFrOHWfnwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3Mjk1Ng==", "bodyText": "I think it'd be more percise to say This sample uses a simulated data source to allow the sample to be useful on devices without a location data source. This is since just because a device is desktop, doesn't mean it won't have the means of getting it's location. For example most desktop devices can get a rough location via WiFi, etc.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r493272956", "createdAt": "2020-09-23T07:53:14Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -6,37 +6,34 @@ Display your location history on the map.\n \n ## Use case\n \n-You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. An unmapped trail, for example, could be added to the map using this technique.\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. For example, an unmapped trail could be added to the map using this technique.\n \n ## How to use the sample\n \n-Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history.\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history. This sample uses a simulated data source to allow the sample to be useful on desktop/non-mobile devices.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d73addf25ddb5a51998b31755ae4e64f6a647d4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0ODgwMA==", "bodyText": "Sounds good! I could also add this to the use case: You can use an existing dataset in place of a connection to a GPS device. A simulated data source is useful if you're giving a demonstration or are working with previously collected data. from Setting up the simulation. But that could be redundant!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r493348800", "createdAt": "2020-09-23T09:10:58Z", "author": {"login": "sclaridge"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -6,37 +6,34 @@ Display your location history on the map.\n \n ## Use case\n \n-You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. An unmapped trail, for example, could be added to the map using this technique.\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. For example, an unmapped trail could be added to the map using this technique.\n \n ## How to use the sample\n \n-Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history.\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history. This sample uses a simulated data source to allow the sample to be useful on desktop/non-mobile devices.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3Mjk1Ng=="}, "originalCommit": {"oid": "8d73addf25ddb5a51998b31755ae4e64f6a647d4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDAyNzU2OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyMTozOFrOHXdWpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyMTozOFrOHXdWpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MDIyOQ==", "bodyText": "Maybe we can be a bit more descriptive about what this block does. The second part of the sentence sounds a bit like we're admitting it's a workaround, so perhaps we can reword it slightly to say this is deliberate?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // track previous location to ensure the route line appears behind the location display symbol\n          \n          \n            \n                    // create a listener to track the previous location, to draw a route line behind the location display symbol", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r494360229", "createdAt": "2020-09-24T14:21:38Z", "author": {"login": "JonLavi"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n+\n+      try {\n+        // access the json of the location points\n+        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+          StandardCharsets.UTF_8);\n+        // create a polyline from the location points\n+        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n+          SpatialReferences.getWebMercator());\n+\n+        // create a simulated location data source\n+        SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+        // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+        simulatedLocationDataSource.setLocations(\n+          routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+        // configure the map view's location display to follow the simulated location data source\n+        LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+        locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+        locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        locationDisplay.setInitialZoomScale(7000);\n+\n+        // track previous location to ensure the route line appears behind the location display symbol", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad68c9199f4ab69fb155715606819850cf405fd0"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjg2OTg1OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzo0NTo1N1rOHbuQCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzo0NTo1N1rOHbuQCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzMTM2OA==", "bodyText": "I think we need to specify/reword this slightly to make clear what happens when the app opens: when it opened I assumed the moving point was tracking location (a moving point on a map) before realising that tracking makes an actual path.\nI've suggested removing the reference to \"allow the sample to be useful on devices without a location data source\" since that instruction is repeated in the \"About the data\" section.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history. This sample uses a simulated data source to allow the sample to be useful on devices without a location data source.\n          \n          \n            \n            The sample loads with a moving simulated location data source. Click the button to start tracking the location, which will appear as red points on the map. A green line will connect the points for easier visualization. Click the button again to stop updating the location history.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498831368", "createdAt": "2020-10-02T13:45:57Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,40 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![Image of show location history](ShowLocationHistory.png)\n+\n+## Use case\n+\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. For example, an unmapped trail could be added to the map using this technique.\n+\n+## How to use the sample\n+\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history. This sample uses a simulated data source to allow the sample to be useful on devices without a location data source.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjg3Mzc2OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzo0NzowMlrOHbuSeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzo0NzowMlrOHbuSeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzMTk5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. Create a `SimulatedLocationDataSource` and initialize it with a polyline. Start the `SimulatedLocationDataSource` to begin receiving location updates.\n          \n          \n            \n            2. Create a `SimulatedLocationDataSource` and initialize it with a `Polyline`. Start the `SimulatedLocationDataSource` to begin receiving location updates.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498831994", "createdAt": "2020-10-02T13:47:02Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,40 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![Image of show location history](ShowLocationHistory.png)\n+\n+## Use case\n+\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. For example, an unmapped trail could be added to the map using this technique.\n+\n+## How to use the sample\n+\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history. This sample uses a simulated data source to allow the sample to be useful on devices without a location data source.\n+\n+## How it works\n+\n+1. Create a `GraphicsOverlay` to show each point and another `GraphicsOverlay` for displaying the route line.\n+2. Create a `SimulatedLocationDataSource` and initialize it with a polyline. Start the `SimulatedLocationDataSource` to begin receiving location updates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjkyMDM1OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzo1OTozOFrOHbuwBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDoxMTozMVrOHbvL4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzOTU1Nw==", "bodyText": "This has always been a slightly contentious deviation by Java from the rest of the samples team to not include inner classes/methods in the \"Relevant API\" section. The idea being that LocationDataSource in itself is clear enough for this section, and that the inner workings of it are described within the \"How it Works\" section and code well. So from that perspective, I'd be in favour of removing these and keeping only LocationDataSource.  It's not a biggy if you want to keep them in though.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498839557", "createdAt": "2020-10-02T13:59:38Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,40 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![Image of show location history](ShowLocationHistory.png)\n+\n+## Use case\n+\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. For example, an unmapped trail could be added to the map using this technique.\n+\n+## How to use the sample\n+\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history. This sample uses a simulated data source to allow the sample to be useful on devices without a location data source.\n+\n+## How it works\n+\n+1. Create a `GraphicsOverlay` to show each point and another `GraphicsOverlay` for displaying the route line.\n+2. Create a `SimulatedLocationDataSource` and initialize it with a polyline. Start the `SimulatedLocationDataSource` to begin receiving location updates.\n+3. Use a `LocationChangedListener` on the `simulatedLocationDataSource` to get location updates.\n+4. When the location updates store that location, display a point on the map at the location, and re-create the route polyline.\n+\n+## Relevant API\n+\n+* LocationDataSource\n+* LocationDataSource.Location\n+* LocationDataSource.LocationChangedEvent\n+* LocationDataSource.LocationChangedListener\n+* LocationDataSource.Position", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NjY5MQ==", "bodyText": "Also: I guess we're not really using LocationDataSource in this sample, but SimulatedLocationDataSource? The only place we use LocationDataSource is to create a listener, and there's no reference to the class in \"How it works\": only in the \"About the Data\" section which is what got me thinking.\nIn which case do we only want to include LocationDataSource.LocationChangedEvent and LocationDataSource.LocationChangedListener", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498846691", "createdAt": "2020-10-02T14:11:31Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,40 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![Image of show location history](ShowLocationHistory.png)\n+\n+## Use case\n+\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. For example, an unmapped trail could be added to the map using this technique.\n+\n+## How to use the sample\n+\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history. This sample uses a simulated data source to allow the sample to be useful on devices without a location data source.\n+\n+## How it works\n+\n+1. Create a `GraphicsOverlay` to show each point and another `GraphicsOverlay` for displaying the route line.\n+2. Create a `SimulatedLocationDataSource` and initialize it with a polyline. Start the `SimulatedLocationDataSource` to begin receiving location updates.\n+3. Use a `LocationChangedListener` on the `simulatedLocationDataSource` to get location updates.\n+4. When the location updates store that location, display a point on the map at the location, and re-create the route polyline.\n+\n+## Relevant API\n+\n+* LocationDataSource\n+* LocationDataSource.Location\n+* LocationDataSource.LocationChangedEvent\n+* LocationDataSource.LocationChangedListener\n+* LocationDataSource.Position", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzOTU1Nw=="}, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjkyMzM1OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDowMDoyNVrOHbux9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDowMDoyNVrOHbux9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0MDA1NQ==", "bodyText": "e.g. this I am in favour of keeping because it specifically links the MapView to a LocationDisplay: if we just had MapView it wouldn't be clear its link to the sample other than the usual \"display a map on the map view\".", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498840055", "createdAt": "2020-10-02T14:00:25Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,40 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![Image of show location history](ShowLocationHistory.png)\n+\n+## Use case\n+\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. For example, an unmapped trail could be added to the map using this technique.\n+\n+## How to use the sample\n+\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history. This sample uses a simulated data source to allow the sample to be useful on devices without a location data source.\n+\n+## How it works\n+\n+1. Create a `GraphicsOverlay` to show each point and another `GraphicsOverlay` for displaying the route line.\n+2. Create a `SimulatedLocationDataSource` and initialize it with a polyline. Start the `SimulatedLocationDataSource` to begin receiving location updates.\n+3. Use a `LocationChangedListener` on the `simulatedLocationDataSource` to get location updates.\n+4. When the location updates store that location, display a point on the map at the location, and re-create the route polyline.\n+\n+## Relevant API\n+\n+* LocationDataSource\n+* LocationDataSource.Location\n+* LocationDataSource.LocationChangedEvent\n+* LocationDataSource.LocationChangedListener\n+* LocationDataSource.Position\n+* LocationDisplay.AutoPanMode\n+* MapView.LocationDisplay", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjkzMTU0OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDowMjo0MVrOHbu3Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo0OTo1NlrOHdOh1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0MTQxOA==", "bodyText": "Kinda feel we might be a bit thin on the ground here instruction wise. E.g. we don't have a mention of getting the LocationDisplay from the MapView. Is there another sample in the pipeline that will be going over the basics of location displays? If so, we don't need to be too explicit about that here but I think it's worth dropping in mention of locationDisplay here since it's referred to in the Relevant API section.\nA good way to think about it: If it's not relevant enough to be in the \"How it works\", it's not relevant enough to go in the Relevant API section.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498841418", "createdAt": "2020-10-02T14:02:41Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,40 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![Image of show location history](ShowLocationHistory.png)\n+\n+## Use case\n+\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. For example, an unmapped trail could be added to the map using this technique.\n+\n+## How to use the sample\n+\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history. This sample uses a simulated data source to allow the sample to be useful on devices without a location data source.\n+\n+## How it works", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0MzUzNg==", "bodyText": "Also the autopan is an interesting feature of the sample, and it's referenced in the Relevant API: some reference to that instruction here would be good to do also.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498843536", "createdAt": "2020-10-02T14:06:16Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,40 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![Image of show location history](ShowLocationHistory.png)\n+\n+## Use case\n+\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. For example, an unmapped trail could be added to the map using this technique.\n+\n+## How to use the sample\n+\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history. This sample uses a simulated data source to allow the sample to be useful on devices without a location data source.\n+\n+## How it works", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0MTQxOA=="}, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwODc4OA==", "bodyText": "I'm not mentioning SimulationParameters in the \"How it works\" section. Would it be ok to also remove it from the Relevant API section?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r500408788", "createdAt": "2020-10-06T15:49:56Z", "author": {"login": "sclaridge"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,40 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![Image of show location history](ShowLocationHistory.png)\n+\n+## Use case\n+\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. For example, an unmapped trail could be added to the map using this technique.\n+\n+## How to use the sample\n+\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history. This sample uses a simulated data source to allow the sample to be useful on devices without a location data source.\n+\n+## How it works", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0MTQxOA=="}, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjk3MjkxOnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDoxNDoxOFrOHbvSCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDoxNDoxOFrOHbvSCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0ODI2NQ==", "bodyText": "Is there a sample coming through for LocationDataSource? If so, we should come back to this readme when it's completed and hyperlink to it here. Or alternatively I might like to see some API Ref when it's available to hyperlink this class to for users wanting to easily access more info (not available until 100.10.0 release)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A custom set of points is used to create a `Polyline` and initialize a `SimulatedLocationDataSource`. The simulated location data source enables easier testing and allows the sample to be used on devices without an actively updating GPS signal. To track a user's real position, use the `LocationDataSource` instead. \n          \n          \n            \n            A custom set of points (provided in JSON format) is used to create a `Polyline` and initialize a `SimulatedLocationDataSource`. The simulated location data source enables easier testing and allows the sample to be used on devices without an actively updating GPS signal. To track a user's real position, use `LocationDataSource` instead.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498848265", "createdAt": "2020-10-02T14:14:18Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -0,0 +1,40 @@\n+# Show location history\n+\n+Display your location history on the map.\n+\n+![Image of show location history](ShowLocationHistory.png)\n+\n+## Use case\n+\n+You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. For example, an unmapped trail could be added to the map using this technique.\n+\n+## How to use the sample\n+\n+Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history. This sample uses a simulated data source to allow the sample to be useful on devices without a location data source.\n+\n+## How it works\n+\n+1. Create a `GraphicsOverlay` to show each point and another `GraphicsOverlay` for displaying the route line.\n+2. Create a `SimulatedLocationDataSource` and initialize it with a polyline. Start the `SimulatedLocationDataSource` to begin receiving location updates.\n+3. Use a `LocationChangedListener` on the `simulatedLocationDataSource` to get location updates.\n+4. When the location updates store that location, display a point on the map at the location, and re-create the route polyline.\n+\n+## Relevant API\n+\n+* LocationDataSource\n+* LocationDataSource.Location\n+* LocationDataSource.LocationChangedEvent\n+* LocationDataSource.LocationChangedListener\n+* LocationDataSource.Position\n+* LocationDisplay.AutoPanMode\n+* MapView.LocationDisplay\n+* SimulatedLocationDataSource\n+* SimulationParameters\n+\n+## About the data\n+\n+A custom set of points is used to create a `Polyline` and initialize a `SimulatedLocationDataSource`. The simulated location data source enables easier testing and allows the sample to be used on devices without an actively updating GPS signal. To track a user's real position, use the `LocationDataSource` instead. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjk5MzU3OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.metadata.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDoxOTo0OVrOHbve2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDoxOTo0OVrOHbve2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MTU0Ng==", "bodyText": "I think a gif would look cool here! Both for the website and for the sample viewer. If you create a gif, then ensure the reference both here and in the readme are to the gif. The .png doesn't have to be referenced, it can just sit in the sample directory and the sample viewer will pick it up automatically.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498851546", "createdAt": "2020-10-02T14:19:49Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/README.metadata.json", "diffHunk": "@@ -0,0 +1,45 @@\n+{\n+    \"category\": \"Map view\",\n+    \"description\": \"Display your location history on the map.\",\n+    \"ignore\": false,\n+    \"images\": [\n+        \"ShowLocationHistory.png\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzE2ODY5OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTowNjowMVrOHbxNSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTowNjowMVrOHbxNSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg3OTgxOQ==", "bodyText": "I think we can handle this better than setting up a boolean to track things. I'm proposing to use a ToggleButton. See what you think, and we can have a chat about it too.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498879819", "createdAt": "2020-10-02T15:06:01Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzE3MDY5OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTowNjozNFrOHbxOkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTowNjozNFrOHbxOkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4MDE0NQ==", "bodyText": "if we make this a ToggleButton we can use the isSelected() property to keep a track on the tracking status without needing to add an extra boolean variable.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498880145", "createdAt": "2020-10-02T15:06:34Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzE3NDMyOnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTowNzozMlrOHbxQyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTowNzozMlrOHbxQyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4MDcxMg==", "bodyText": "I'm thinking something like the following....but let's have a chat about it as it has its positives and  possible negatives:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      if (isTrackingEnabled) {\n          \n          \n            \n                        trackingButton.setText(\"Start Tracking\");\n          \n          \n            \n                        simulatedLocationDataSource.removeLocationChangedListener(locationChangedListener);\n          \n          \n            \n                      } else {\n          \n          \n            \n                        trackingButton.setText(\"Stop Tracking\");\n          \n          \n            \n                        simulatedLocationDataSource.addLocationChangedListener(locationChangedListener);\n          \n          \n            \n                      }\n          \n          \n            \n                      isTrackingEnabled = !isTrackingEnabled;\n          \n          \n            \n                    });\n          \n          \n            \n                      if (trackingButton.isSelected()) {\n          \n          \n            \n                        trackingButton.setStyle(\"-fx-background-color: #00ff00; \");\n          \n          \n            \n                        trackingButton.setText(\"Tracking Status: ACTIVE\");\n          \n          \n            \n                        simulatedLocationDataSource.addLocationChangedListener(locationChangedListener);\n          \n          \n            \n                      } else {\n          \n          \n            \n                        trackingButton.setStyle(\"-fx-background-color: #F16345; \");\n          \n          \n            \n                        trackingButton.setText(\"Tracking Status: STOPPED\");\n          \n          \n            \n                        simulatedLocationDataSource.removeLocationChangedListener(locationChangedListener);\n          \n          \n            \n                      }\n          \n          \n            \n                    });", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498880712", "createdAt": "2020-10-02T15:07:32Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n+\n+      try {\n+        // access the json of the location points\n+        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+          StandardCharsets.UTF_8);\n+        // create a polyline from the location points\n+        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n+          SpatialReferences.getWebMercator());\n+\n+        // create a simulated location data source\n+        SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+        // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+        simulatedLocationDataSource.setLocations(\n+          routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+        // configure the map view's location display to follow the simulated location data source\n+        LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+        locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+        locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        locationDisplay.setInitialZoomScale(7000);\n+\n+        // create a listener to track the previous location, to draw a route line behind the location display symbol\n+        LocationChangedListener locationChangedListener = (LocationDataSource.LocationChangedEvent locationChangedEvent) -> {\n+\n+          // reset the old polyline connecting the points\n+            locationHistoryLineOverlay.getGraphics().clear();\n+\n+            // add any previous position to the history\n+            if (position != null) {\n+              // add the new point to the polyline\n+              polylineBuilder.addPoint(position);\n+              // add the new point to the graphics overlay\n+              locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+            }\n+            // store the current position\n+            position = locationChangedEvent.getLocation().getPosition();\n+\n+            // add the updated polyline to the graphics overlay\n+            locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+          };\n+\n+        trackingButton.setOnAction(event -> {\n+          // if the user has panned away from the location display, turn it on again\n+          if (locationDisplay.getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+          }\n+          // toggle the location tracking when the button is clicked\n+          if (isTrackingEnabled) {\n+            trackingButton.setText(\"Start Tracking\");\n+            simulatedLocationDataSource.removeLocationChangedListener(locationChangedListener);\n+          } else {\n+            trackingButton.setText(\"Stop Tracking\");\n+            simulatedLocationDataSource.addLocationChangedListener(locationChangedListener);\n+          }\n+          isTrackingEnabled = !isTrackingEnabled;\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzE5NzA5OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToxMzo0NFrOHbxfeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToxMzo0NFrOHbxfeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4NDQ3Mg==", "bodyText": "the only pitfall to this is that of course, if you click and drag around the mapview you could lose the simulated data point unless you click the button again. If you click the button and don't touch the mapview, then the simulated data point is kept nicely within the mapview though.\nIs this as designed? What it be worth considering setting it up so that even if you interact with the mapview it always comes back to keep the point in the mapview?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498884472", "createdAt": "2020-10-02T15:13:44Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n+\n+      try {\n+        // access the json of the location points\n+        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+          StandardCharsets.UTF_8);\n+        // create a polyline from the location points\n+        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n+          SpatialReferences.getWebMercator());\n+\n+        // create a simulated location data source\n+        SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+        // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+        simulatedLocationDataSource.setLocations(\n+          routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+        // configure the map view's location display to follow the simulated location data source\n+        LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+        locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+        locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        locationDisplay.setInitialZoomScale(7000);\n+\n+        // create a listener to track the previous location, to draw a route line behind the location display symbol\n+        LocationChangedListener locationChangedListener = (LocationDataSource.LocationChangedEvent locationChangedEvent) -> {\n+\n+          // reset the old polyline connecting the points\n+            locationHistoryLineOverlay.getGraphics().clear();\n+\n+            // add any previous position to the history\n+            if (position != null) {\n+              // add the new point to the polyline\n+              polylineBuilder.addPoint(position);\n+              // add the new point to the graphics overlay\n+              locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+            }\n+            // store the current position\n+            position = locationChangedEvent.getLocation().getPosition();\n+\n+            // add the updated polyline to the graphics overlay\n+            locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+          };\n+\n+        trackingButton.setOnAction(event -> {\n+          // if the user has panned away from the location display, turn it on again\n+          if (locationDisplay.getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzIxMDg4OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToxNzozN1rOHbxoVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToxNzozN1rOHbxoVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4Njc0MQ==", "bodyText": "this can all go on the one line without exceeding the recommended line limit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n          \n          \n            \n                      SpatialReferences.getWebMercator());\n          \n          \n            \n                    Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWebMercator());", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498886741", "createdAt": "2020-10-02T15:17:37Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n+\n+      try {\n+        // access the json of the location points\n+        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+          StandardCharsets.UTF_8);\n+        // create a polyline from the location points\n+        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n+          SpatialReferences.getWebMercator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzU1MDc1OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowMjo0M1rOHb1AEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowMjo0M1rOHb1AEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MTk3MQ==", "bodyText": "the indentation is off by two on this block (IntelliJ has a shortcut to auto-indent if you haven't seen that already!)", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498941971", "createdAt": "2020-10-02T17:02:43Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n+\n+      try {\n+        // access the json of the location points\n+        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+          StandardCharsets.UTF_8);\n+        // create a polyline from the location points\n+        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n+          SpatialReferences.getWebMercator());\n+\n+        // create a simulated location data source\n+        SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+        // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+        simulatedLocationDataSource.setLocations(\n+          routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+        // configure the map view's location display to follow the simulated location data source\n+        LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+        locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+        locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        locationDisplay.setInitialZoomScale(7000);\n+\n+        // create a listener to track the previous location, to draw a route line behind the location display symbol\n+        LocationChangedListener locationChangedListener = (LocationDataSource.LocationChangedEvent locationChangedEvent) -> {\n+\n+          // reset the old polyline connecting the points\n+            locationHistoryLineOverlay.getGraphics().clear();\n+\n+            // add any previous position to the history\n+            if (position != null) {\n+              // add the new point to the polyline\n+              polylineBuilder.addPoint(position);\n+              // add the new point to the graphics overlay\n+              locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+            }\n+            // store the current position\n+            position = locationChangedEvent.getLocation().getPosition();\n+\n+            // add the updated polyline to the graphics overlay\n+            locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+          };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzU2OTAxOnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowODo1MVrOHb1LuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowODo1MVrOHb1LuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0NDk1Mg==", "bodyText": "something isn't quite right with this try catch block. This set up infers if anything within the block goes wrong, it's because there was an Error \"loading the simulated data\" which wouldn't be accurate. However, if anything does go wrong, it will bubble up to the try/catch initiated at the start of the start() method.\nTherefore we can remove this try/catch since anything going wrong with Json would be handled by the start() method try/catch. If we wanted to be extra safe for this data, we could put in an if condition to e.g. ensure the string isn't empty/the file exists and if it is return an Alert: but the data should be there since in this instance it is bundled with the sample (e.g. other sample data is not). Looking at our other samples bringing in resources as stream, looks like we don't put that extra check in (doesn't mean we shouldn't going forward, just an observation).", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498944952", "createdAt": "2020-10-02T17:08:51Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n+\n+      try {\n+        // access the json of the location points\n+        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+          StandardCharsets.UTF_8);\n+        // create a polyline from the location points\n+        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n+          SpatialReferences.getWebMercator());\n+\n+        // create a simulated location data source\n+        SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+        // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+        simulatedLocationDataSource.setLocations(\n+          routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+        // configure the map view's location display to follow the simulated location data source\n+        LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+        locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+        locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        locationDisplay.setInitialZoomScale(7000);\n+\n+        // create a listener to track the previous location, to draw a route line behind the location display symbol\n+        LocationChangedListener locationChangedListener = (LocationDataSource.LocationChangedEvent locationChangedEvent) -> {\n+\n+          // reset the old polyline connecting the points\n+            locationHistoryLineOverlay.getGraphics().clear();\n+\n+            // add any previous position to the history\n+            if (position != null) {\n+              // add the new point to the polyline\n+              polylineBuilder.addPoint(position);\n+              // add the new point to the graphics overlay\n+              locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+            }\n+            // store the current position\n+            position = locationChangedEvent.getLocation().getPosition();\n+\n+            // add the updated polyline to the graphics overlay\n+            locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+          };\n+\n+        trackingButton.setOnAction(event -> {\n+          // if the user has panned away from the location display, turn it on again\n+          if (locationDisplay.getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+          }\n+          // toggle the location tracking when the button is clicked\n+          if (isTrackingEnabled) {\n+            trackingButton.setText(\"Start Tracking\");\n+            simulatedLocationDataSource.removeLocationChangedListener(locationChangedListener);\n+          } else {\n+            trackingButton.setText(\"Stop Tracking\");\n+            simulatedLocationDataSource.addLocationChangedListener(locationChangedListener);\n+          }\n+          isTrackingEnabled = !isTrackingEnabled;\n+        });\n+\n+        // enable the button interactions when the map is loaded\n+        map.addDoneLoadingListener(() -> {\n+\n+          if (map.getLoadStatus() == LoadStatus.LOADED) {\n+            trackingButton.setDisable(false);\n+\n+            // start the simulated location data source\n+            simulatedLocationDataSource.startAsync();\n+\n+          } else {\n+            new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+          }\n+        });\n+\n+        // add the map view and tracking button to the stack pane\n+        stackPane.getChildren().addAll(mapView, trackingButton);\n+        StackPane.setAlignment(trackingButton, Pos.TOP_LEFT);\n+        StackPane.setMargin(trackingButton, new Insets(10, 0, 0, 10));\n+\n+      } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzQ0MDI4OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyNjoxN1rOHcW3PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyNjoxN1rOHcW3PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5Njc2NQ==", "bodyText": "remove excess line here", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r499496765", "createdAt": "2020-10-05T10:26:17Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTg5NDY4OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMToyMDowMVrOHdBjzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMToyMDowMVrOHdBjzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5NjMwMA==", "bodyText": "we can put in a direct reference to why the map has failed to load with:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n          \n          \n            \n                        new Alert(Alert.AlertType.ERROR, \"Map failed to load\" +       map.getLoadError().getCause().getMessage()).show();", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r500196300", "createdAt": "2020-10-06T11:20:01Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n+\n+      try {\n+        // access the json of the location points\n+        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+          StandardCharsets.UTF_8);\n+        // create a polyline from the location points\n+        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n+          SpatialReferences.getWebMercator());\n+\n+        // create a simulated location data source\n+        SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+        // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+        simulatedLocationDataSource.setLocations(\n+          routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+        // configure the map view's location display to follow the simulated location data source\n+        LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+        locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+        locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        locationDisplay.setInitialZoomScale(7000);\n+\n+        // create a listener to track the previous location, to draw a route line behind the location display symbol\n+        LocationChangedListener locationChangedListener = (LocationDataSource.LocationChangedEvent locationChangedEvent) -> {\n+\n+          // reset the old polyline connecting the points\n+            locationHistoryLineOverlay.getGraphics().clear();\n+\n+            // add any previous position to the history\n+            if (position != null) {\n+              // add the new point to the polyline\n+              polylineBuilder.addPoint(position);\n+              // add the new point to the graphics overlay\n+              locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+            }\n+            // store the current position\n+            position = locationChangedEvent.getLocation().getPosition();\n+\n+            // add the updated polyline to the graphics overlay\n+            locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+          };\n+\n+        trackingButton.setOnAction(event -> {\n+          // if the user has panned away from the location display, turn it on again\n+          if (locationDisplay.getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+          }\n+          // toggle the location tracking when the button is clicked\n+          if (isTrackingEnabled) {\n+            trackingButton.setText(\"Start Tracking\");\n+            simulatedLocationDataSource.removeLocationChangedListener(locationChangedListener);\n+          } else {\n+            trackingButton.setText(\"Stop Tracking\");\n+            simulatedLocationDataSource.addLocationChangedListener(locationChangedListener);\n+          }\n+          isTrackingEnabled = !isTrackingEnabled;\n+        });\n+\n+        // enable the button interactions when the map is loaded\n+        map.addDoneLoadingListener(() -> {\n+\n+          if (map.getLoadStatus() == LoadStatus.LOADED) {\n+            trackingButton.setDisable(false);\n+\n+            // start the simulated location data source\n+            simulatedLocationDataSource.startAsync();\n+\n+          } else {\n+            new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjI3NjEwOnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzowNjo0MFrOHf992w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzowNjo0MFrOHf992w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4MzE2Mw==", "bodyText": "let's add in SimulationParameters here as you were asking about: we can also be a bit clearer about how the Polyline and parameters are being added, since technically, we aren't initializing the SimulatedLocationDataSource with them: we are creating a new one and then setting its location.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. Create a `SimulatedLocationDataSource` and initialize it with a `Polyline`. Start the `SimulatedLocationDataSource` to begin receiving location updates.\n          \n          \n            \n            2. Create a `SimulatedLocationDataSource` and call its `setLocations()` method, passing the route `Polyline` and new `SimulatedParameters` as parameters. Start the `SimulatedLocationDataSource` to begin receiving location updates.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r503283163", "createdAt": "2020-10-12T13:06:40Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -2,38 +2,34 @@\n \n Display your location history on the map.\n \n-![Image of show location history](ShowLocationHistory.png)\n+![Image of show location history](ShowLocationHistory.gif)\n \n ## Use case\n \n You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. For example, an unmapped trail could be added to the map using this technique.\n \n ## How to use the sample\n \n-Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history. This sample uses a simulated data source to allow the sample to be useful on devices without a location data source.\n-\n+The sample loads with a moving simulated location data source. Click the button to start tracking the location, which will appear as red points on the map. A green line will connect the points for easier visualization. Click the button again to stop updating the location history.\n ## How it works\n \n 1. Create a `GraphicsOverlay` to show each point and another `GraphicsOverlay` for displaying the route line.\n-2. Create a `SimulatedLocationDataSource` and initialize it with a polyline. Start the `SimulatedLocationDataSource` to begin receiving location updates.\n+2. Create a `SimulatedLocationDataSource` and initialize it with a `Polyline`. Start the `SimulatedLocationDataSource` to begin receiving location updates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "940accfec4ec4a96cc5b3c7add28c19cf8e9d8d3"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjM0NjQ1OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoyNToxM1rOHf-ogw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoyNToxM1rOHf-ogw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI5NDA4Mw==", "bodyText": "since it's not strictly used in an initializer, slight word tweak here: let me know if you think it doesn't make sense, we can try to find a better word!\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A custom set of points (provided in JSON format) is used to create a `Polyline` and initialize a `SimulatedLocationDataSource`. The simulated location data source enables easier testing and allows the sample to be used on devices without an actively updating GPS signal. To track a user's real position, use `NMEALocationDataSource` instead. \n          \n          \n            \n            A custom set of points (provided in JSON format) is used to create a `Polyline` and configure a `SimulatedLocationDataSource`. The simulated location data source enables easier testing and allows the sample to be used on devices without an actively updating GPS signal. To track a user's real position, use `NMEALocationDataSource` instead.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r503294083", "createdAt": "2020-10-12T13:25:13Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/README.md", "diffHunk": "@@ -2,38 +2,34 @@\n \n Display your location history on the map.\n \n-![Image of show location history](ShowLocationHistory.png)\n+![Image of show location history](ShowLocationHistory.gif)\n \n ## Use case\n \n You can track device location history and display it as lines and points on the map. The history can be used to visualize how the user moved through the world, to retrace their steps, or to create new feature geometry. For example, an unmapped trail could be added to the map using this technique.\n \n ## How to use the sample\n \n-Click the button to start tracking your location, which will appear as points on the map. A line will connect the points for easier visualization. Click the button again to stop updating the location history. This sample uses a simulated data source to allow the sample to be useful on devices without a location data source.\n-\n+The sample loads with a moving simulated location data source. Click the button to start tracking the location, which will appear as red points on the map. A green line will connect the points for easier visualization. Click the button again to stop updating the location history.\n ## How it works\n \n 1. Create a `GraphicsOverlay` to show each point and another `GraphicsOverlay` for displaying the route line.\n-2. Create a `SimulatedLocationDataSource` and initialize it with a polyline. Start the `SimulatedLocationDataSource` to begin receiving location updates.\n+2. Create a `SimulatedLocationDataSource` and initialize it with a `Polyline`. Start the `SimulatedLocationDataSource` to begin receiving location updates.\n 3. Use a `LocationChangedListener` on the `simulatedLocationDataSource` to get location updates.\n 4. When the location updates store that location, display a point on the map at the location, and re-create the route polyline.\n \n ## Relevant API\n \n-* LocationDataSource\n-* LocationDataSource.Location\n * LocationDataSource.LocationChangedEvent\n * LocationDataSource.LocationChangedListener\n-* LocationDataSource.Position\n * LocationDisplay.AutoPanMode\n * MapView.LocationDisplay\n * SimulatedLocationDataSource\n * SimulationParameters\n \n ## About the data\n \n-A custom set of points is used to create a `Polyline` and initialize a `SimulatedLocationDataSource`. The simulated location data source enables easier testing and allows the sample to be used on devices without an actively updating GPS signal. To track a user's real position, use the `LocationDataSource` instead. \n+A custom set of points (provided in JSON format) is used to create a `Polyline` and initialize a `SimulatedLocationDataSource`. The simulated location data source enables easier testing and allows the sample to be used on devices without an actively updating GPS signal. To track a user's real position, use `NMEALocationDataSource` instead. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "940accfec4ec4a96cc5b3c7add28c19cf8e9d8d3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjQ4NzExOnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/resources/show_location_history/style.css", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo1OTozMlrOHf_-Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo1OTozMlrOHf_-Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMxNTk5MQ==", "bodyText": "we can remove these since we have none of the above in this sample :)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .label {\n          \n          \n            \n              -fx-text-fill: black;\n          \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n            .slider .axis {\n          \n          \n            \n                -fx-tick-label-fill: white;\n          \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n            .range-slider .axis {\n          \n          \n            \n                -fx-tick-label-fill: white;\n          \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n            .panel-region .check-box {\n          \n          \n            \n               -fx-text-fill: white;\n          \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n            .panel-region .radio-button {\n          \n          \n            \n               -fx-text-fill: white;\n          \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n            .color-picker .color-picker-label {\n          \n          \n            \n               -fx-text-fill: black;\n          \n          \n            \n            }", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r503315991", "createdAt": "2020-10-12T13:59:32Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/src/main/resources/show_location_history/style.css", "diffHunk": "@@ -0,0 +1,27 @@\n+.panel-region .label {\n+  -fx-text-fill: white;\n+}\n+\n+.label {\n+  -fx-text-fill: black;\n+}\n+\n+.slider .axis {\n+    -fx-tick-label-fill: white;\n+}\n+\n+.range-slider .axis {\n+    -fx-tick-label-fill: white;\n+}\n+\n+.panel-region .check-box {\n+   -fx-text-fill: white;\n+}\n+\n+.panel-region .radio-button {\n+   -fx-text-fill: white;\n+}\n+\n+.color-picker .color-picker-label {\n+   -fx-text-fill: black;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "940accfec4ec4a96cc5b3c7add28c19cf8e9d8d3"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjUyMTQ2OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/README.metadata.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDowODoxNFrOHgATLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDowODoxNFrOHgATLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyMTM5MQ==", "bodyText": "we should remove the following classes from keywords and relevant API section here since we have removed them from the readme:\n\nLocationDataSource\nLocationDataSource.Location\nLocationDataSource.Position", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r503321391", "createdAt": "2020-10-12T14:08:14Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/README.metadata.json", "diffHunk": "@@ -3,7 +3,7 @@\n     \"description\": \"Display your location history on the map.\",\n     \"ignore\": false,\n     \"images\": [\n-        \"ShowLocationHistory.png\"\n+        \"ShowLocationHistory.gif\"\n     ],\n     \"keywords\": [\n         \"GPS\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "940accfec4ec4a96cc5b3c7add28c19cf8e9d8d3"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjU3OTk3OnYy", "diffSide": "RIGHT", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyMjoyNlrOHgA2Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyMjoyNlrOHgA2Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzMDM5NQ==", "bodyText": "let's add this in just to make it super neat!\ncontrolsHBox.setAlignment(Pos.CENTER);", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r503330395", "createdAt": "2020-10-12T14:22:26Z", "author": {"login": "Rachael-E"}, "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -111,84 +120,88 @@ public void start(Stage stage) {\n       // create a polyline builder to connect the location points\n       PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n \n-      try {\n-        // access the json of the location points\n-        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n-          StandardCharsets.UTF_8);\n-        // create a polyline from the location points\n-        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n-          SpatialReferences.getWebMercator());\n-\n-        // create a simulated location data source\n-        SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n-        // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n-        simulatedLocationDataSource.setLocations(\n-          routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n-\n-        // configure the map view's location display to follow the simulated location data source\n-        LocationDisplay locationDisplay = mapView.getLocationDisplay();\n-        locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n-        locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n-        locationDisplay.setInitialZoomScale(7000);\n-\n-        // create a listener to track the previous location, to draw a route line behind the location display symbol\n-        LocationChangedListener locationChangedListener = (LocationDataSource.LocationChangedEvent locationChangedEvent) -> {\n-\n-          // reset the old polyline connecting the points\n-            locationHistoryLineOverlay.getGraphics().clear();\n-\n-            // add any previous position to the history\n-            if (position != null) {\n-              // add the new point to the polyline\n-              polylineBuilder.addPoint(position);\n-              // add the new point to the graphics overlay\n-              locationHistoryOverlay.getGraphics().add(new Graphic(position));\n-            }\n-            // store the current position\n-            position = locationChangedEvent.getLocation().getPosition();\n-\n-            // add the updated polyline to the graphics overlay\n-            locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n-          };\n-\n-        trackingButton.setOnAction(event -> {\n-          // if the user has panned away from the location display, turn it on again\n-          if (locationDisplay.getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n-            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n-          }\n-          // toggle the location tracking when the button is clicked\n-          if (isTrackingEnabled) {\n-            trackingButton.setText(\"Start Tracking\");\n-            simulatedLocationDataSource.removeLocationChangedListener(locationChangedListener);\n-          } else {\n-            trackingButton.setText(\"Stop Tracking\");\n-            simulatedLocationDataSource.addLocationChangedListener(locationChangedListener);\n-          }\n-          isTrackingEnabled = !isTrackingEnabled;\n-        });\n-\n-        // enable the button interactions when the map is loaded\n-        map.addDoneLoadingListener(() -> {\n-\n-          if (map.getLoadStatus() == LoadStatus.LOADED) {\n-            trackingButton.setDisable(false);\n-\n-            // start the simulated location data source\n-            simulatedLocationDataSource.startAsync();\n-\n-          } else {\n-            new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n-          }\n-        });\n-\n-        // add the map view and tracking button to the stack pane\n-        stackPane.getChildren().addAll(mapView, trackingButton);\n-        StackPane.setAlignment(trackingButton, Pos.TOP_LEFT);\n-        StackPane.setMargin(trackingButton, new Insets(10, 0, 0, 10));\n-\n-      } catch (IOException e) {\n-        new Alert(Alert.AlertType.ERROR, \"Error loading simulated data\").show();\n-      }\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"), StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWebMercator());\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+      locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+      locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      locationDisplay.setInitialZoomScale(7000);\n+\n+      // create a listener to track the previous location, to draw a route line behind the location display symbol\n+      LocationChangedListener locationChangedListener =\n+        (LocationDataSource.LocationChangedEvent locationChangedEvent) -> {\n+\n+        // reset the old polyline connecting the points\n+        locationHistoryLineOverlay.getGraphics().clear();\n+\n+        // add any previous position to the history\n+        if (position != null) {\n+          // add the new point to the polyline\n+          polylineBuilder.addPoint(position);\n+          // add the new point to the graphics overlay\n+          locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+        }\n+        // store the current position\n+        position = locationChangedEvent.getLocation().getPosition();\n+\n+        // add the updated polyline to the graphics overlay\n+        locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+      };\n+\n+      trackingButton.setOnAction(event -> {\n+        // if the user has panned away from the location display, turn it on again\n+        if (locationDisplay.getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+          locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        }\n+        // toggle the location tracking when the button is clicked\n+        if (trackingButton.isSelected()) {\n+          simulatedLocationDataSource.addLocationChangedListener(locationChangedListener);\n+          trackingButton.setText(\"Active\");\n+          trackingButton.setStyle(\"-fx-focus-color: #00ff00;\");\n+        } else {\n+          simulatedLocationDataSource.removeLocationChangedListener(locationChangedListener);\n+          trackingButton.setText(\"Stopped\");\n+          trackingButton.setStyle(\"-fx-focus-color: #f16345;\");\n+        }\n+      });\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+\n+          // start the simulated location data source\n+          simulatedLocationDataSource.startAsync();\n+\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load: \" + map.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a control panel and add the label and button UI components\n+      HBox controlsHBox = new HBox(6);\n+      controlsHBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0,0,0,0.3)\"), CornerRadii.EMPTY, Insets.EMPTY)));\n+      controlsHBox.setPadding(new Insets(10.0));\n+      controlsHBox.setMaxSize(180, 50);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "940accfec4ec4a96cc5b3c7add28c19cf8e9d8d3"}, "originalPosition": 220}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 120, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}