{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwOTI2MTA3", "number": 579, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoxODoyOFrOEysh7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxMzo1MVrOE1yIhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTkzODM2OnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoxODoyOFrOHpeblA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoxODoyOFrOHpeblA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1MjI0NA==", "bodyText": "It might be really good to have the ability to directly drag graphics without clicking them first. It might complicate the code a bit, but worth looking into.\nI've notice that if I try to drag without the initial click to select the graphics first, there's a NullPointerException, meaning we need to check on drag whether there's a graphics selected.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r513252244", "createdAt": "2020-10-28T08:18:28Z", "author": {"login": "JonLavi"}, "path": "display_information/update-graphics/README.md", "diffHunk": "@@ -11,8 +11,8 @@ A field worker may want to update a graphic's properties to adjust which real-wo\n ## How to use the sample\n \n Update Graphic's Location:\n-  - click on a graphic, then click the update location button\n-  - now click a new location on the map to move graphic\n+  - click on a graphic, then drag the graphic to a new location", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919f7daa5526c12159c970e1711fd7e78be5cb27"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTk0MjE2OnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoxOToyOFrOHpedzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoxOToyOFrOHpedzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1MjgxMw==", "bodyText": "Technically escape doesn't stop the moving, it de-selects the graphic. Also, it's not just escape, but a single click outside the graphic will also de-select it.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r513252813", "createdAt": "2020-10-28T08:19:28Z", "author": {"login": "JonLavi"}, "path": "display_information/update-graphics/README.md", "diffHunk": "@@ -11,8 +11,8 @@ A field worker may want to update a graphic's properties to adjust which real-wo\n ## How to use the sample\n \n Update Graphic's Location:\n-  - click on a graphic, then click the update location button\n-  - now click a new location on the map to move graphic\n+  - click on a graphic, then drag the graphic to a new location\n+  - press ESCAPE to stop moving the graphic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919f7daa5526c12159c970e1711fd7e78be5cb27"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTk1MzA4OnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyMjoxOVrOHpekRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyMjoxOVrOHpekRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NDQ3MQ==", "bodyText": "We've already used the term MapView in step 1, so I think it'd be ok to write map view in plain English?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r513254471", "createdAt": "2020-10-28T08:22:19Z", "author": {"login": "JonLavi"}, "path": "display_information/update-graphics/README.md", "diffHunk": "@@ -26,13 +26,13 @@ Update Graphic's Symbol:\n 1. Capture clicks on the `MapView` by using `.setOnMouseClicked()`. Then use the event to create a `Point` from the clicked location. \n 2. Identify the clicked graphics using `MapView.identifyGraphicsOverlayAsync(graphicsOverlay, pointClicked, tolerance, max results)`.\n 3. To select a clicked graphics, iterate through the list of graphics returned by the identification method, and set each graphic's selection property to `true`.\n-4. To update graphic's location, create a new `Point` from the user's clicked point, and use `Graphic.setGeometry(point)` to modify the graphic's geometry.\n+4. To update a graphic's location, capture drags on the `MapView` using `.setOnMouseDragged()`, and use `Graphic.setGeometry(point)` to modify the graphic's geometry from the dragged location.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919f7daa5526c12159c970e1711fd7e78be5cb27"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTk1OTYzOnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyNDowMlrOHpeoLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyNDowMlrOHpeoLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NTQ2OA==", "bodyText": "While we're at it, lets make these comments plain English?\nPeraps // create the combo box for the UI?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r513255468", "createdAt": "2020-10-28T08:24:02Z", "author": {"login": "JonLavi"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -90,18 +92,15 @@ public void start(Stage stage) {\n       controlsVBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0,0,0,0.3)\"), CornerRadii.EMPTY,\n               Insets.EMPTY)));\n       controlsVBox.setPadding(new Insets(10.0));\n-      controlsVBox.setMaxSize(180, 150);\n+      controlsVBox.setMaxSize(180, 100);\n       controlsVBox.getStyleClass().add(\"panel-region\");\n \n       // create buttons for user interaction\n-      updateLocationButton = new Button(\"Update Location\");\n       updateDescriptionButton = new Button(\"Update Description\");\n-      updateLocationButton.setMaxWidth(Double.MAX_VALUE);\n       updateDescriptionButton.setMaxWidth(Double.MAX_VALUE);\n-      updateLocationButton.setDisable(true);\n       updateDescriptionButton.setDisable(true);\n \n-      // create section for combo box\n+      // create combo box", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919f7daa5526c12159c970e1711fd7e78be5cb27"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTk2MDk1OnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyNDoyM1rOHpeo-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyNDoyM1rOHpeo-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NTY3NA==", "bodyText": "Another suggestion for plain english? Also, we only have one button now, by the looks of it? Would also be nice to order the items in the comment in the same order as they are in the code:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // add label, combo box and buttons to the control panel\n          \n          \n            \n                  // add the button, label, and combo box to the control panel", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r513255674", "createdAt": "2020-10-28T08:24:23Z", "author": {"login": "JonLavi"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -117,8 +116,8 @@ public void start(Stage stage) {\n         }\n       });\n \n-      // add label, dropdown and buttons to the control panel\n-      controlsVBox.getChildren().addAll(updateLocationButton, updateDescriptionButton, symbolLabel, symbolBox);\n+      // add label, combo box and buttons to the control panel", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919f7daa5526c12159c970e1711fd7e78be5cb27"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTk2OTYxOnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyNjo0OVrOHpeuZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyNjo0OVrOHpeuZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NzA2MA==", "bodyText": "Good catch on renaming this, definitely makes more sense \ud83d\udc4d", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r513257060", "createdAt": "2020-10-28T08:26:49Z", "author": {"login": "JonLavi"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -260,10 +281,14 @@ private void createGraphics() {\n     }\n   }\n \n-  private void enableUI(boolean enable) {\n-    updateDescriptionButton.setDisable(enable);\n-    updateLocationButton.setDisable(enable);\n-    symbolBox.setDisable(enable);\n+  /**\n+   * Disables the visibility of the UI controls\n+   *\n+   * @param disable visibility of the UI\n+   */\n+  private void disableUI(boolean disable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919f7daa5526c12159c970e1711fd7e78be5cb27"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTk3NzQ4OnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyOToxMVrOHpezbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyOToxMVrOHpezbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1ODM0OQ==", "bodyText": "It looks like we need a null check here, to avoid a NullPointerException when no graphics is selected and we're dragging around:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (selectedGraphic.isSelected()) {\n          \n          \n            \n                    if (selectedGraphic != null && selectedGraphic.isSelected()) {", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r513258349", "createdAt": "2020-10-28T08:29:11Z", "author": {"login": "JonLavi"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -167,39 +159,68 @@ public void start(Stage stage) {\n \n       mapView.setOnMouseClicked(e -> {\n         if (e.getButton() == MouseButton.PRIMARY && e.isStillSincePress()) {\n+\n           // clear any selected graphic\n           graphicsOverlay.clearSelection();\n \n+          // set the cursor to default\n+          mapView.setCursor(Cursor.DEFAULT);\n+\n           // create a point from location clicked\n-          Point2D mapViewPoint = new Point2D(e.getX(), e.getY());\n-\n-          if (isUpdateLocationActive) {\n-            // add new location to selected graphic\n-            Point mapPoint = mapView.screenToLocation(mapViewPoint);\n-            selectedGraphic.setGeometry(mapPoint);\n-            isUpdateLocationActive = false;\n-          } else {\n-            // identify the graphic that was selected\n-            identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n-\n-            identifyGraphics.addDoneListener(() -> {\n-              try {\n-                if (!identifyGraphics.get().getGraphics().isEmpty()) {\n-                  // store the selected graphic\n-                  selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n-                  selectedGraphic.setSelected(true);\n-                  String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n-                  symbolBox.getSelectionModel().select(style);\n-\n-                  enableUI(false);\n-                } else {\n-                  enableUI(true);\n-                }\n-              } catch (Exception x) {\n-                new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+          mapViewPoint = new Point2D(e.getX(), e.getY());\n+\n+          // identify graphics on the graphics overlay\n+          identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n+\n+          identifyGraphics.addDoneListener(() -> {\n+            try {\n+              if (!identifyGraphics.get().getGraphics().isEmpty()) {\n+                // get the first identified graphic\n+                selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n+                // select the identified graphic\n+                selectedGraphic.setSelected(true);\n+                // update the drop down box with the identified graphic's current symbol\n+                String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n+                symbolBox.getSelectionModel().select(style);\n+                // show the UI\n+                disableUI(false);\n+              } else {\n+                disableUI(true);\n               }\n-            });\n-          }\n+            } catch (Exception x) {\n+              new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+            }\n+          });\n+        }\n+      });\n+\n+      mapView.setOnMouseDragged(e -> {\n+        if (selectedGraphic.isSelected()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919f7daa5526c12159c970e1711fd7e78be5cb27"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTk4NjI3OnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODozMToyNlrOHpe4oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxMzo0MVrOHuQPzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1OTY4MA==", "bodyText": "It would be really cool if we could identify any potential graphic at the clicked point, select it, and then allow to drag if the mouse pointer is held down. We might be able to do that by extracting a method e.g. identifyGraphicAtClickedPoint, and then allowing to select it. Could be a bit tricky to do it elegantly, so I would suggest don't spend too much time on it if the code starts growing arms and legs!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r513259680", "createdAt": "2020-10-28T08:31:26Z", "author": {"login": "JonLavi"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -167,39 +159,68 @@ public void start(Stage stage) {\n \n       mapView.setOnMouseClicked(e -> {\n         if (e.getButton() == MouseButton.PRIMARY && e.isStillSincePress()) {\n+\n           // clear any selected graphic\n           graphicsOverlay.clearSelection();\n \n+          // set the cursor to default\n+          mapView.setCursor(Cursor.DEFAULT);\n+\n           // create a point from location clicked\n-          Point2D mapViewPoint = new Point2D(e.getX(), e.getY());\n-\n-          if (isUpdateLocationActive) {\n-            // add new location to selected graphic\n-            Point mapPoint = mapView.screenToLocation(mapViewPoint);\n-            selectedGraphic.setGeometry(mapPoint);\n-            isUpdateLocationActive = false;\n-          } else {\n-            // identify the graphic that was selected\n-            identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n-\n-            identifyGraphics.addDoneListener(() -> {\n-              try {\n-                if (!identifyGraphics.get().getGraphics().isEmpty()) {\n-                  // store the selected graphic\n-                  selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n-                  selectedGraphic.setSelected(true);\n-                  String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n-                  symbolBox.getSelectionModel().select(style);\n-\n-                  enableUI(false);\n-                } else {\n-                  enableUI(true);\n-                }\n-              } catch (Exception x) {\n-                new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+          mapViewPoint = new Point2D(e.getX(), e.getY());\n+\n+          // identify graphics on the graphics overlay\n+          identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n+\n+          identifyGraphics.addDoneListener(() -> {\n+            try {\n+              if (!identifyGraphics.get().getGraphics().isEmpty()) {\n+                // get the first identified graphic\n+                selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n+                // select the identified graphic\n+                selectedGraphic.setSelected(true);\n+                // update the drop down box with the identified graphic's current symbol\n+                String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n+                symbolBox.getSelectionModel().select(style);\n+                // show the UI\n+                disableUI(false);\n+              } else {\n+                disableUI(true);\n               }\n-            });\n-          }\n+            } catch (Exception x) {\n+              new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+            }\n+          });\n+        }\n+      });\n+\n+      mapView.setOnMouseDragged(e -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919f7daa5526c12159c970e1711fd7e78be5cb27"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MjczNA==", "bodyText": "@sclaridge perhaps Jon's suggestion combined with my attempt below might work? Like Jon says though, don't spend too long on it, we have a workable solution from the first suggestion I put up.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r518262734", "createdAt": "2020-11-05T18:13:41Z", "author": {"login": "Rachael-E"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -167,39 +159,68 @@ public void start(Stage stage) {\n \n       mapView.setOnMouseClicked(e -> {\n         if (e.getButton() == MouseButton.PRIMARY && e.isStillSincePress()) {\n+\n           // clear any selected graphic\n           graphicsOverlay.clearSelection();\n \n+          // set the cursor to default\n+          mapView.setCursor(Cursor.DEFAULT);\n+\n           // create a point from location clicked\n-          Point2D mapViewPoint = new Point2D(e.getX(), e.getY());\n-\n-          if (isUpdateLocationActive) {\n-            // add new location to selected graphic\n-            Point mapPoint = mapView.screenToLocation(mapViewPoint);\n-            selectedGraphic.setGeometry(mapPoint);\n-            isUpdateLocationActive = false;\n-          } else {\n-            // identify the graphic that was selected\n-            identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n-\n-            identifyGraphics.addDoneListener(() -> {\n-              try {\n-                if (!identifyGraphics.get().getGraphics().isEmpty()) {\n-                  // store the selected graphic\n-                  selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n-                  selectedGraphic.setSelected(true);\n-                  String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n-                  symbolBox.getSelectionModel().select(style);\n-\n-                  enableUI(false);\n-                } else {\n-                  enableUI(true);\n-                }\n-              } catch (Exception x) {\n-                new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+          mapViewPoint = new Point2D(e.getX(), e.getY());\n+\n+          // identify graphics on the graphics overlay\n+          identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n+\n+          identifyGraphics.addDoneListener(() -> {\n+            try {\n+              if (!identifyGraphics.get().getGraphics().isEmpty()) {\n+                // get the first identified graphic\n+                selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n+                // select the identified graphic\n+                selectedGraphic.setSelected(true);\n+                // update the drop down box with the identified graphic's current symbol\n+                String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n+                symbolBox.getSelectionModel().select(style);\n+                // show the UI\n+                disableUI(false);\n+              } else {\n+                disableUI(true);\n               }\n-            });\n-          }\n+            } catch (Exception x) {\n+              new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+            }\n+          });\n+        }\n+      });\n+\n+      mapView.setOnMouseDragged(e -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1OTY4MA=="}, "originalCommit": {"oid": "919f7daa5526c12159c970e1711fd7e78be5cb27"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjAyODYzOnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODo0MjozNlrOHpfRpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODo0MjozNlrOHpfRpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2NjA4Ng==", "bodyText": "Ideally we should be enabling the UI again after we stop dragging, because the graphics is still selected and the user might want to update it's properties?\nStrictly speaking, we don't have to disable the UI while dragging at all, since we have to stop dragging anyway to interact with the UI properly? Might be worth a play around with it just to see which works best.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r513266086", "createdAt": "2020-10-28T08:42:36Z", "author": {"login": "JonLavi"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -167,39 +159,68 @@ public void start(Stage stage) {\n \n       mapView.setOnMouseClicked(e -> {\n         if (e.getButton() == MouseButton.PRIMARY && e.isStillSincePress()) {\n+\n           // clear any selected graphic\n           graphicsOverlay.clearSelection();\n \n+          // set the cursor to default\n+          mapView.setCursor(Cursor.DEFAULT);\n+\n           // create a point from location clicked\n-          Point2D mapViewPoint = new Point2D(e.getX(), e.getY());\n-\n-          if (isUpdateLocationActive) {\n-            // add new location to selected graphic\n-            Point mapPoint = mapView.screenToLocation(mapViewPoint);\n-            selectedGraphic.setGeometry(mapPoint);\n-            isUpdateLocationActive = false;\n-          } else {\n-            // identify the graphic that was selected\n-            identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n-\n-            identifyGraphics.addDoneListener(() -> {\n-              try {\n-                if (!identifyGraphics.get().getGraphics().isEmpty()) {\n-                  // store the selected graphic\n-                  selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n-                  selectedGraphic.setSelected(true);\n-                  String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n-                  symbolBox.getSelectionModel().select(style);\n-\n-                  enableUI(false);\n-                } else {\n-                  enableUI(true);\n-                }\n-              } catch (Exception x) {\n-                new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+          mapViewPoint = new Point2D(e.getX(), e.getY());\n+\n+          // identify graphics on the graphics overlay\n+          identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n+\n+          identifyGraphics.addDoneListener(() -> {\n+            try {\n+              if (!identifyGraphics.get().getGraphics().isEmpty()) {\n+                // get the first identified graphic\n+                selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n+                // select the identified graphic\n+                selectedGraphic.setSelected(true);\n+                // update the drop down box with the identified graphic's current symbol\n+                String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n+                symbolBox.getSelectionModel().select(style);\n+                // show the UI\n+                disableUI(false);\n+              } else {\n+                disableUI(true);\n               }\n-            });\n-          }\n+            } catch (Exception x) {\n+              new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+            }\n+          });\n+        }\n+      });\n+\n+      mapView.setOnMouseDragged(e -> {\n+        if (selectedGraphic.isSelected()) {\n+          // set the cursor to the move\n+          mapView.setCursor(Cursor.MOVE);\n+\n+          // disable to UI while moving the graphic\n+          disableUI(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919f7daa5526c12159c970e1711fd7e78be5cb27"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjA2NjQyOnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODo1MjowNlrOHpfoKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODo1MjowNlrOHpfoKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI3MTg0OA==", "bodyText": "@Rachael-E on the line below we have the comment regarding keeping map in scope to avoid garbage collection. I can't see any part of the code where this might happen here? The only async operation is on mapView:\nmapView.identifyGraphicsOverlayAsync\n\nWas it decided to leave these comments in as a standard, or can we remove this one and make map a local member?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r513271848", "createdAt": "2020-10-28T08:52:06Z", "author": {"login": "JonLavi"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -51,9 +54,7 @@\n \n public class UpdateGraphicsSample extends Application {\n \n-  private boolean isUpdateLocationActive;\n   private List<SimpleMarkerSymbol> markers;\n-  private Button updateLocationButton;\n   private Button updateDescriptionButton;\n   private ComboBox<String> symbolBox;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919f7daa5526c12159c970e1711fd7e78be5cb27"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjE2MTgwOnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToxNjowNFrOHpgibQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODoyODo1OFrOHrFUgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4Njc2NQ==", "bodyText": "I had to look this one up a bit. Not sure which element of the SV takes focus away from the map view, but I don't think we should include the code in the sample if it's just a workaround for the SV. Can't provide an alternative off the top of my head, but we might want to do a session to check what we can do to avoid adding it here.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r513286765", "createdAt": "2020-10-28T09:16:04Z", "author": {"login": "JonLavi"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -167,39 +159,68 @@ public void start(Stage stage) {\n \n       mapView.setOnMouseClicked(e -> {\n         if (e.getButton() == MouseButton.PRIMARY && e.isStillSincePress()) {\n+\n           // clear any selected graphic\n           graphicsOverlay.clearSelection();\n \n+          // set the cursor to default\n+          mapView.setCursor(Cursor.DEFAULT);\n+\n           // create a point from location clicked\n-          Point2D mapViewPoint = new Point2D(e.getX(), e.getY());\n-\n-          if (isUpdateLocationActive) {\n-            // add new location to selected graphic\n-            Point mapPoint = mapView.screenToLocation(mapViewPoint);\n-            selectedGraphic.setGeometry(mapPoint);\n-            isUpdateLocationActive = false;\n-          } else {\n-            // identify the graphic that was selected\n-            identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n-\n-            identifyGraphics.addDoneListener(() -> {\n-              try {\n-                if (!identifyGraphics.get().getGraphics().isEmpty()) {\n-                  // store the selected graphic\n-                  selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n-                  selectedGraphic.setSelected(true);\n-                  String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n-                  symbolBox.getSelectionModel().select(style);\n-\n-                  enableUI(false);\n-                } else {\n-                  enableUI(true);\n-                }\n-              } catch (Exception x) {\n-                new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+          mapViewPoint = new Point2D(e.getX(), e.getY());\n+\n+          // identify graphics on the graphics overlay\n+          identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n+\n+          identifyGraphics.addDoneListener(() -> {\n+            try {\n+              if (!identifyGraphics.get().getGraphics().isEmpty()) {\n+                // get the first identified graphic\n+                selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n+                // select the identified graphic\n+                selectedGraphic.setSelected(true);\n+                // update the drop down box with the identified graphic's current symbol\n+                String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n+                symbolBox.getSelectionModel().select(style);\n+                // show the UI\n+                disableUI(false);\n+              } else {\n+                disableUI(true);\n               }\n-            });\n-          }\n+            } catch (Exception x) {\n+              new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+            }\n+          });\n+        }\n+      });\n+\n+      mapView.setOnMouseDragged(e -> {\n+        if (selectedGraphic.isSelected()) {\n+          // set the cursor to the move\n+          mapView.setCursor(Cursor.MOVE);\n+\n+          // disable to UI while moving the graphic\n+          disableUI(true);\n+\n+          // create a point from the dragged location\n+          mapViewPoint = new Point2D(e.getX(), e.getY());\n+          Point mapPoint = mapView.screenToLocation(mapViewPoint);\n+\n+          // update the location of the graphic to the dragged location\n+          selectedGraphic.setGeometry(mapPoint);\n+          mapView.requestFocus();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919f7daa5526c12159c970e1711fd7e78be5cb27"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4OTQ5Nw==", "bodyText": "Based on this link, for key events the target is the node that has focus, but for mouse events the target is the node at the location of the cursor. I tried to use stackpane.onKeyPressed() like the Create and Save KML File sample, but I didn't have any luck.\nWould you recommended scrapping the ESC key functionality? A second click will de-select and stop moving the point.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r514489497", "createdAt": "2020-10-29T18:48:58Z", "author": {"login": "sclaridge"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -167,39 +159,68 @@ public void start(Stage stage) {\n \n       mapView.setOnMouseClicked(e -> {\n         if (e.getButton() == MouseButton.PRIMARY && e.isStillSincePress()) {\n+\n           // clear any selected graphic\n           graphicsOverlay.clearSelection();\n \n+          // set the cursor to default\n+          mapView.setCursor(Cursor.DEFAULT);\n+\n           // create a point from location clicked\n-          Point2D mapViewPoint = new Point2D(e.getX(), e.getY());\n-\n-          if (isUpdateLocationActive) {\n-            // add new location to selected graphic\n-            Point mapPoint = mapView.screenToLocation(mapViewPoint);\n-            selectedGraphic.setGeometry(mapPoint);\n-            isUpdateLocationActive = false;\n-          } else {\n-            // identify the graphic that was selected\n-            identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n-\n-            identifyGraphics.addDoneListener(() -> {\n-              try {\n-                if (!identifyGraphics.get().getGraphics().isEmpty()) {\n-                  // store the selected graphic\n-                  selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n-                  selectedGraphic.setSelected(true);\n-                  String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n-                  symbolBox.getSelectionModel().select(style);\n-\n-                  enableUI(false);\n-                } else {\n-                  enableUI(true);\n-                }\n-              } catch (Exception x) {\n-                new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+          mapViewPoint = new Point2D(e.getX(), e.getY());\n+\n+          // identify graphics on the graphics overlay\n+          identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n+\n+          identifyGraphics.addDoneListener(() -> {\n+            try {\n+              if (!identifyGraphics.get().getGraphics().isEmpty()) {\n+                // get the first identified graphic\n+                selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n+                // select the identified graphic\n+                selectedGraphic.setSelected(true);\n+                // update the drop down box with the identified graphic's current symbol\n+                String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n+                symbolBox.getSelectionModel().select(style);\n+                // show the UI\n+                disableUI(false);\n+              } else {\n+                disableUI(true);\n               }\n-            });\n-          }\n+            } catch (Exception x) {\n+              new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+            }\n+          });\n+        }\n+      });\n+\n+      mapView.setOnMouseDragged(e -> {\n+        if (selectedGraphic.isSelected()) {\n+          // set the cursor to the move\n+          mapView.setCursor(Cursor.MOVE);\n+\n+          // disable to UI while moving the graphic\n+          disableUI(true);\n+\n+          // create a point from the dragged location\n+          mapViewPoint = new Point2D(e.getX(), e.getY());\n+          Point mapPoint = mapView.screenToLocation(mapViewPoint);\n+\n+          // update the location of the graphic to the dragged location\n+          selectedGraphic.setGeometry(mapPoint);\n+          mapView.requestFocus();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4Njc2NQ=="}, "originalCommit": {"oid": "919f7daa5526c12159c970e1711fd7e78be5cb27"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkzNzk4Nw==", "bodyText": "That's probably a good idea, considering the ESC functionality it an added bonus, but that extra line of code is a bit confusing!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r514937987", "createdAt": "2020-10-30T08:28:58Z", "author": {"login": "JonLavi"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -167,39 +159,68 @@ public void start(Stage stage) {\n \n       mapView.setOnMouseClicked(e -> {\n         if (e.getButton() == MouseButton.PRIMARY && e.isStillSincePress()) {\n+\n           // clear any selected graphic\n           graphicsOverlay.clearSelection();\n \n+          // set the cursor to default\n+          mapView.setCursor(Cursor.DEFAULT);\n+\n           // create a point from location clicked\n-          Point2D mapViewPoint = new Point2D(e.getX(), e.getY());\n-\n-          if (isUpdateLocationActive) {\n-            // add new location to selected graphic\n-            Point mapPoint = mapView.screenToLocation(mapViewPoint);\n-            selectedGraphic.setGeometry(mapPoint);\n-            isUpdateLocationActive = false;\n-          } else {\n-            // identify the graphic that was selected\n-            identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n-\n-            identifyGraphics.addDoneListener(() -> {\n-              try {\n-                if (!identifyGraphics.get().getGraphics().isEmpty()) {\n-                  // store the selected graphic\n-                  selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n-                  selectedGraphic.setSelected(true);\n-                  String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n-                  symbolBox.getSelectionModel().select(style);\n-\n-                  enableUI(false);\n-                } else {\n-                  enableUI(true);\n-                }\n-              } catch (Exception x) {\n-                new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+          mapViewPoint = new Point2D(e.getX(), e.getY());\n+\n+          // identify graphics on the graphics overlay\n+          identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n+\n+          identifyGraphics.addDoneListener(() -> {\n+            try {\n+              if (!identifyGraphics.get().getGraphics().isEmpty()) {\n+                // get the first identified graphic\n+                selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n+                // select the identified graphic\n+                selectedGraphic.setSelected(true);\n+                // update the drop down box with the identified graphic's current symbol\n+                String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n+                symbolBox.getSelectionModel().select(style);\n+                // show the UI\n+                disableUI(false);\n+              } else {\n+                disableUI(true);\n               }\n-            });\n-          }\n+            } catch (Exception x) {\n+              new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+            }\n+          });\n+        }\n+      });\n+\n+      mapView.setOnMouseDragged(e -> {\n+        if (selectedGraphic.isSelected()) {\n+          // set the cursor to the move\n+          mapView.setCursor(Cursor.MOVE);\n+\n+          // disable to UI while moving the graphic\n+          disableUI(true);\n+\n+          // create a point from the dragged location\n+          mapViewPoint = new Point2D(e.getX(), e.getY());\n+          Point mapPoint = mapView.screenToLocation(mapViewPoint);\n+\n+          // update the location of the graphic to the dragged location\n+          selectedGraphic.setGeometry(mapPoint);\n+          mapView.requestFocus();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4Njc2NQ=="}, "originalCommit": {"oid": "919f7daa5526c12159c970e1711fd7e78be5cb27"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODEyMTA5OnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjowMjoyOFrOHrVvYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjowMjoyOFrOHrVvYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwNzAwOQ==", "bodyText": "Should we add a mention now to click outside of a graphic to de-select it?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r515207009", "createdAt": "2020-10-30T16:02:28Z", "author": {"login": "JonLavi"}, "path": "display_information/update-graphics/README.md", "diffHunk": "@@ -12,7 +12,6 @@ A field worker may want to update a graphic's properties to adjust which real-wo\n \n Update Graphic's Location:\n   - click on a graphic, then drag the graphic to a new location", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89dcbb6fb1cc1a51ef441a14b679c091109a9d01"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzY0NTk3OnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTo0OTowNFrOHuJuaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTo0OTowNFrOHuJuaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1NTg4MA==", "bodyText": "From a readme style perspective, this should be a \" plain english\" approach rather than a list. e.g. something like\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Update Graphic's Location:\n          \n          \n            \n            To update the graphic's location, click on a graphic and then drag it to a new location. Use the \"Update Description\" button to provide a new description for the graphic, and use the \"Update Symbol\" drop down menu to choose a new symbol. Click away from the graphic to de-select it.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r518155880", "createdAt": "2020-11-05T15:49:04Z", "author": {"login": "Rachael-E"}, "path": "display_information/update-graphics/README.md", "diffHunk": "@@ -11,8 +11,8 @@ A field worker may want to update a graphic's properties to adjust which real-wo\n ## How to use the sample\n \n Update Graphic's Location:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "045dbcef294ac0a0ba2e5ccc4e31b7c198747e5b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODExNzM5OnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzozMzoxM1rOHuOUkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzozMzoxM1rOHuOUkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIzMTE4Nw==", "bodyText": "we don't have to assert it's null here, the compiler will auto set all member variables to a reasonable default, generally null in this case.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Graphic identifiedGraphic = null;\n          \n          \n            \n              private Graphic identifiedGraphic;", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r518231187", "createdAt": "2020-11-05T17:33:13Z", "author": {"login": "Rachael-E"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -51,17 +53,14 @@\n \n public class UpdateGraphicsSample extends Application {\n \n-  private boolean isUpdateLocationActive;\n   private List<SimpleMarkerSymbol> markers;\n-  private Button updateLocationButton;\n   private Button updateDescriptionButton;\n   private ComboBox<String> symbolBox;\n \n-  private ArcGISMap map; // keep loadable in scope to avoid garbage collection\n   private MapView mapView;\n-  private Graphic selectedGraphic;\n+  private Graphic identifiedGraphic = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "045dbcef294ac0a0ba2e5ccc4e31b7c198747e5b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODI4NjY4OnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODowNjozOFrOHuP_kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODowOToyOFrOHuQGSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1ODU3OQ==", "bodyText": "A few things in this suggestion.\n\nWhen the sample loads, and the user clicks and drags on the map view, a null pointer exception is thrown. This continues until a user clicks to select a graphic, and then it's not seen again. We could handle that by showing an error in the mapView.setOnMouseDragged listener, or, by simply moving that listener in the identifyGraphics.addDoneListener (see suggestion).\n\nThe benefit to this approach is that we know the identifiedGraphic should never be null (since it's already identified), and a null pointer shouldn't be able to be thrown. Also when the sample loads, a user could click and drag the map view if they wanted to before it gets locked when selecting a graphic.\n\nIf a user selects a graphic but clicks and drags on the other side of the screen, the point is dragged. I'd expect the graphic only to be dragged if the cursor was actually on the graphic. I think Jon has suggested something similar above to address this but might have too many code arms and legs to follow phrase! So to make it clear to the user that the graphic is still selected and in drag mode, I've suggested a simple Cursor.CLOSED_HAND here to make it visually obvious we're still dragging.\n\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            disableUI(false);\n          \n          \n            \n                            disableUI(false);\n          \n          \n            \n            \n          \n          \n            \n                            // enable dragging of the identified graphic to move its location\n          \n          \n            \n                            mapView.setOnMouseDragged(event -> {\n          \n          \n            \n            \n          \n          \n            \n                                if (identifiedGraphic.isSelected() && identifiedGraphic != null) {\n          \n          \n            \n                                  // set the cursor to closed hand to indicate graphic dragging is active\n          \n          \n            \n                                  mapView.setCursor(Cursor.CLOSED_HAND);\n          \n          \n            \n                                  // create a point from the dragged location\n          \n          \n            \n                                  mapViewPoint = new Point2D(event.getX(), event.getY());\n          \n          \n            \n                                  Point mapPoint = mapView.screenToLocation(mapViewPoint);\n          \n          \n            \n                                  // update the location of the graphic to the dragged location\n          \n          \n            \n                                  identifiedGraphic.setGeometry(mapPoint);\n          \n          \n            \n                                } else new Alert(Alert.AlertType.ERROR, \"Error selecting graphic\").show();\n          \n          \n            \n                            });", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r518258579", "createdAt": "2020-11-05T18:06:38Z", "author": {"login": "Rachael-E"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -167,39 +156,52 @@ public void start(Stage stage) {\n \n       mapView.setOnMouseClicked(e -> {\n         if (e.getButton() == MouseButton.PRIMARY && e.isStillSincePress()) {\n+          // set the cursor to default\n+          mapView.setCursor(Cursor.DEFAULT);\n+\n           // clear any selected graphic\n           graphicsOverlay.clearSelection();\n \n-          // create a point from location clicked\n-          Point2D mapViewPoint = new Point2D(e.getX(), e.getY());\n-\n-          if (isUpdateLocationActive) {\n-            // add new location to selected graphic\n-            Point mapPoint = mapView.screenToLocation(mapViewPoint);\n-            selectedGraphic.setGeometry(mapPoint);\n-            isUpdateLocationActive = false;\n-          } else {\n-            // identify the graphic that was selected\n-            identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n-\n-            identifyGraphics.addDoneListener(() -> {\n-              try {\n-                if (!identifyGraphics.get().getGraphics().isEmpty()) {\n-                  // store the selected graphic\n-                  selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n-                  selectedGraphic.setSelected(true);\n-                  String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n-                  symbolBox.getSelectionModel().select(style);\n-\n-                  enableUI(false);\n-                } else {\n-                  enableUI(true);\n-                }\n-              } catch (Exception x) {\n-                new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+          // create a point where the user clicked\n+          mapViewPoint = new Point2D(e.getX(), e.getY());\n+\n+          // identify graphics on the graphics overlay\n+          ListenableFuture<IdentifyGraphicsOverlayResult> identifyGraphics =\n+            mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n+\n+          identifyGraphics.addDoneListener(() -> {\n+            try {\n+              if (!identifyGraphics.get().getGraphics().isEmpty()) {\n+                // get the first identified graphic\n+                identifiedGraphic = identifyGraphics.get().getGraphics().get(0);\n+                // select the identified graphic\n+                identifiedGraphic.setSelected(true);\n+                // update the drop down box with the identified graphic's current symbol\n+                String style = ((SimpleMarkerSymbol) identifiedGraphic.getSymbol()).getStyle().toString();\n+                symbolBox.getSelectionModel().select(style);\n+                // show the UI\n+                disableUI(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "045dbcef294ac0a0ba2e5ccc4e31b7c198747e5b"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MDI5OQ==", "bodyText": "Alternatively, it is possible to simultaneously click and drag the graphic with the following.\nHowever, I had to bump the tolerance up quite high since there is a bit of lag with the drag and if the mouse travels faster than the graphic, it leaves it behind. With this bigger tolerance though, more than one graphic can be selected and it results in a fun dance between the two graphics moving...if you'd like to take this code and work around it to avoid that behaviour, see what you think: it might take a fair bit of time, I've had to leave it for now. Otherwise the workflow I've suggested above is just fine!\n      mapView.setOnMouseDragged(e -> {\n        if (e.getButton() == MouseButton.PRIMARY) {\n//           create a point where the user clicked\n          mapViewPoint = new Point2D(e.getX(), e.getY());\n\n          // identify graphics on the graphics overlay\n          ListenableFuture<IdentifyGraphicsOverlayResult> identifyGraphics =\n            mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 50, false);\n\n          identifyGraphics.addDoneListener(() -> {\n            try {\n              if (!identifyGraphics.get().getGraphics().isEmpty()) {\n                // get the first identified graphic\n                identifiedGraphic = identifyGraphics.get().getGraphics().get(0);\n                // select the identified graphic\n                identifiedGraphic.setSelected(true);\n                // update the drop down box with the identified graphic's current symbol\n                String style = ((SimpleMarkerSymbol) identifiedGraphic.getSymbol()).getStyle().toString();\n                symbolBox.getSelectionModel().select(style);\n                // show the UI\n                disableUI(false);\n\n                // enable dragging of the identified graphic to move its location\n                if (identifiedGraphic.isSelected() && identifiedGraphic != null) {\n                  // set the cursor to closed hand to indicate graphic dragging is active\n//                      mapView.setCursor(Cursor.CLOSED_HAND);\n                  // create a point from the dragged location\n                  mapViewPoint = new Point2D(e.getX(), e.getY());\n                  Point mapPoint = mapView.screenToLocation(mapViewPoint);\n                  // update the location of the graphic to the dragged location\n                  identifiedGraphic.setGeometry(mapPoint);\n                } else new Alert(Alert.AlertType.ERROR, \"Error selecting graphic\").show();\n\n                // clear any selected graphic when clicking on the map view\n                mapView.setOnMouseClicked(mouseEvent -> {\n                  if (mouseEvent.isStillSincePress()) {\n                    graphicsOverlay.clearSelection();\n                  }\n                });\n\n              } else {\n                disableUI(true);\n              }\n            } catch (Exception x) {\n              new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n            }\n          });\n        }\n      });", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r518260299", "createdAt": "2020-11-05T18:09:28Z", "author": {"login": "Rachael-E"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -167,39 +156,52 @@ public void start(Stage stage) {\n \n       mapView.setOnMouseClicked(e -> {\n         if (e.getButton() == MouseButton.PRIMARY && e.isStillSincePress()) {\n+          // set the cursor to default\n+          mapView.setCursor(Cursor.DEFAULT);\n+\n           // clear any selected graphic\n           graphicsOverlay.clearSelection();\n \n-          // create a point from location clicked\n-          Point2D mapViewPoint = new Point2D(e.getX(), e.getY());\n-\n-          if (isUpdateLocationActive) {\n-            // add new location to selected graphic\n-            Point mapPoint = mapView.screenToLocation(mapViewPoint);\n-            selectedGraphic.setGeometry(mapPoint);\n-            isUpdateLocationActive = false;\n-          } else {\n-            // identify the graphic that was selected\n-            identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n-\n-            identifyGraphics.addDoneListener(() -> {\n-              try {\n-                if (!identifyGraphics.get().getGraphics().isEmpty()) {\n-                  // store the selected graphic\n-                  selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n-                  selectedGraphic.setSelected(true);\n-                  String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n-                  symbolBox.getSelectionModel().select(style);\n-\n-                  enableUI(false);\n-                } else {\n-                  enableUI(true);\n-                }\n-              } catch (Exception x) {\n-                new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+          // create a point where the user clicked\n+          mapViewPoint = new Point2D(e.getX(), e.getY());\n+\n+          // identify graphics on the graphics overlay\n+          ListenableFuture<IdentifyGraphicsOverlayResult> identifyGraphics =\n+            mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n+\n+          identifyGraphics.addDoneListener(() -> {\n+            try {\n+              if (!identifyGraphics.get().getGraphics().isEmpty()) {\n+                // get the first identified graphic\n+                identifiedGraphic = identifyGraphics.get().getGraphics().get(0);\n+                // select the identified graphic\n+                identifiedGraphic.setSelected(true);\n+                // update the drop down box with the identified graphic's current symbol\n+                String style = ((SimpleMarkerSymbol) identifiedGraphic.getSymbol()).getStyle().toString();\n+                symbolBox.getSelectionModel().select(style);\n+                // show the UI\n+                disableUI(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1ODU3OQ=="}, "originalCommit": {"oid": "045dbcef294ac0a0ba2e5ccc4e31b7c198747e5b"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODMwMjIwOnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxMDo0M1rOHuQJLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxMDo0M1rOHuQJLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MTAzNw==", "bodyText": "Missing a period from this javadoc\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Disables the visibility of the UI controls\n          \n          \n            \n               * Disables the visibility of the UI controls.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r518261037", "createdAt": "2020-11-05T18:10:43Z", "author": {"login": "Rachael-E"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -260,10 +262,14 @@ private void createGraphics() {\n     }\n   }\n \n-  private void enableUI(boolean enable) {\n-    updateDescriptionButton.setDisable(enable);\n-    updateLocationButton.setDisable(enable);\n-    symbolBox.setDisable(enable);\n+  /**\n+   * Disables the visibility of the UI controls", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "045dbcef294ac0a0ba2e5ccc4e31b7c198747e5b"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODMwOTIzOnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxMjozM1rOHuQNdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxMjozM1rOHuQNdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MjEzNA==", "bodyText": "let's give the boolean parameter a slightly more meaningful name\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private void disableUI(boolean disable) {\n          \n          \n            \n              private void disableUI(boolean isDisabled) {", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r518262134", "createdAt": "2020-11-05T18:12:33Z", "author": {"login": "Rachael-E"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -260,10 +262,14 @@ private void createGraphics() {\n     }\n   }\n \n-  private void enableUI(boolean enable) {\n-    updateDescriptionButton.setDisable(enable);\n-    updateLocationButton.setDisable(enable);\n-    symbolBox.setDisable(enable);\n+  /**\n+   * Disables the visibility of the UI controls\n+   *\n+   * @param disable visibility of the UI\n+   */\n+  private void disableUI(boolean disable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "045dbcef294ac0a0ba2e5ccc4e31b7c198747e5b"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODMxMzY2OnYy", "diffSide": "RIGHT", "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxMzo1MVrOHuQQKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxMzo1MVrOHuQQKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MjgyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // set the cursor to the move\n          \n          \n            \n                      // set the cursor to the move icon", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/579#discussion_r518262826", "createdAt": "2020-11-05T18:13:51Z", "author": {"login": "Rachael-E"}, "path": "display_information/update-graphics/src/main/java/com/esri/samples/update_graphics/UpdateGraphicsSample.java", "diffHunk": "@@ -167,39 +156,52 @@ public void start(Stage stage) {\n \n       mapView.setOnMouseClicked(e -> {\n         if (e.getButton() == MouseButton.PRIMARY && e.isStillSincePress()) {\n+          // set the cursor to default\n+          mapView.setCursor(Cursor.DEFAULT);\n+\n           // clear any selected graphic\n           graphicsOverlay.clearSelection();\n \n-          // create a point from location clicked\n-          Point2D mapViewPoint = new Point2D(e.getX(), e.getY());\n-\n-          if (isUpdateLocationActive) {\n-            // add new location to selected graphic\n-            Point mapPoint = mapView.screenToLocation(mapViewPoint);\n-            selectedGraphic.setGeometry(mapPoint);\n-            isUpdateLocationActive = false;\n-          } else {\n-            // identify the graphic that was selected\n-            identifyGraphics = mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n-\n-            identifyGraphics.addDoneListener(() -> {\n-              try {\n-                if (!identifyGraphics.get().getGraphics().isEmpty()) {\n-                  // store the selected graphic\n-                  selectedGraphic = identifyGraphics.get().getGraphics().get(0);\n-                  selectedGraphic.setSelected(true);\n-                  String style = ((SimpleMarkerSymbol) selectedGraphic.getSymbol()).getStyle().toString();\n-                  symbolBox.getSelectionModel().select(style);\n-\n-                  enableUI(false);\n-                } else {\n-                  enableUI(true);\n-                }\n-              } catch (Exception x) {\n-                new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+          // create a point where the user clicked\n+          mapViewPoint = new Point2D(e.getX(), e.getY());\n+\n+          // identify graphics on the graphics overlay\n+          ListenableFuture<IdentifyGraphicsOverlayResult> identifyGraphics =\n+            mapView.identifyGraphicsOverlayAsync(graphicsOverlay, mapViewPoint, 10, false);\n+\n+          identifyGraphics.addDoneListener(() -> {\n+            try {\n+              if (!identifyGraphics.get().getGraphics().isEmpty()) {\n+                // get the first identified graphic\n+                identifiedGraphic = identifyGraphics.get().getGraphics().get(0);\n+                // select the identified graphic\n+                identifiedGraphic.setSelected(true);\n+                // update the drop down box with the identified graphic's current symbol\n+                String style = ((SimpleMarkerSymbol) identifiedGraphic.getSymbol()).getStyle().toString();\n+                symbolBox.getSelectionModel().select(style);\n+                // show the UI\n+                disableUI(false);\n+              } else {\n+                disableUI(true);\n               }\n-            });\n-          }\n+            } catch (Exception x) {\n+              new Alert(Alert.AlertType.ERROR, \"Error identifying clicked graphic\").show();\n+            }\n+          });\n+        }\n+      });\n+\n+      mapView.setOnMouseDragged(e -> {\n+        if (identifiedGraphic.isSelected() && identifiedGraphic != null) {\n+          // set the cursor to the move", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "045dbcef294ac0a0ba2e5ccc4e31b7c198747e5b"}, "originalPosition": 169}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4810, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}