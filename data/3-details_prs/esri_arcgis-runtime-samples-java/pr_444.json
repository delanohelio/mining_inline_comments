{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMjkxNDcx", "number": 444, "title": "Update readmes to match common design (analysis category)", "bodyText": "With the common designs now having gone through a full overhaul, this PR applies the updated readmes to the Java samples in the category Analysis.\nI've done my best to apply all the proper terminology in the how to use the sample and how it works sections. For example click instead of tap, and to use the correct API names. The data in this batch matches the data used in the common designs, so there's no need to change here.\n@Rachael-E could you have a look when you find some time between Android readmes? Thanks!!", "createdAt": "2020-02-26T14:09:00Z", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/444", "merged": true, "mergeCommit": {"oid": "18292753adc0c11fa881f9c7219f35b4441befd1"}, "closed": true, "closedAt": "2020-03-04T15:36:46Z", "author": {"login": "JonLavi"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIGGlfAH2gAyMzgwMjkxNDcxOjAxN2Q5ZTNhNDM1NjJmMzdjNWJkYjQyMGJjZTRhYzk0Y2FhMTI5MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKUOlCgFqTM2ODY1NjA1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "017d9e3a43562f37c5bdb420bce4ac94caa12925", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/017d9e3a43562f37c5bdb420bce4ac94caa12925", "committedDate": "2020-02-26T12:44:06Z", "message": "update analyse hotspots"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d094cba3db455bd512a9dcc594300c9c3ff7d902", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/d094cba3db455bd512a9dcc594300c9c3ff7d902", "committedDate": "2020-02-26T12:45:45Z", "message": "update distance measurement analysis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd3828a0e5911cce2c5157cb5f359eb38e1ed195", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/cd3828a0e5911cce2c5157cb5f359eb38e1ed195", "committedDate": "2020-02-26T12:48:00Z", "message": "update line of sight geoelement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c5a48127e85fd10bb63c8077c73f4733b036485", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/7c5a48127e85fd10bb63c8077c73f4733b036485", "committedDate": "2020-02-26T12:48:43Z", "message": "update line of sight location"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "045f1f224762ab6f03fe037fd84a66d86d754b80", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/045f1f224762ab6f03fe037fd84a66d86d754b80", "committedDate": "2020-02-26T12:51:36Z", "message": "update viewshed camera"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55c370ce0057bd815ebe2d3093076f0b2229101f", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/55c370ce0057bd815ebe2d3093076f0b2229101f", "committedDate": "2020-02-26T12:54:15Z", "message": "update viewshed geoelement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f35cdb571482b6b62b3747161aadc21a630225ff", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/f35cdb571482b6b62b3747161aadc21a630225ff", "committedDate": "2020-02-26T12:57:30Z", "message": "update viewshed geoprocessing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06a3808ad53560bfc392ae72906d995ff29b2f51", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/06a3808ad53560bfc392ae72906d995ff29b2f51", "committedDate": "2020-02-26T12:58:57Z", "message": "update viewshed location"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c77b1611664a8b61a32baa4dc8f079caacb4ddc", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/3c77b1611664a8b61a32baa4dc8f079caacb4ddc", "committedDate": "2020-02-26T14:02:32Z", "message": "casing of sample names / readme headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d2155c820ee724c0dab5ca6cde8e32403655a5d", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/7d2155c820ee724c0dab5ca6cde8e32403655a5d", "committedDate": "2020-02-26T14:04:34Z", "message": "tap -> click"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MTY4ODUx", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/444#pullrequestreview-368168851", "createdAt": "2020-03-03T17:14:41Z", "commit": {"oid": "7d2155c820ee724c0dab5ca6cde8e32403655a5d"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzoxNDo0MlrOFxPAQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzozMzoyMFrOFxPo4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3MDM2OA==", "bodyText": "As a team we decided on keeping class names out of how to use the sample section and keeping it plain english (going by the wiki), though before that change was agreed a few readmes had already been approved. We caught a few of these in the Android readmes too. We replaced them with plain english in Android, I've changed it below along with reverting the button name to how we implement it in Java!\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Select a date range (between 1998-01-01 and 1998-05-31) from the dialog and click Analyze. The results will be shown on the map upon successful completion of the `GeoprocessingJob`.\n          \n          \n            \n            Select a date range (between 1998-01-01 and 1998-05-31) from the dialog and click \"Analyze Hotspots\". The results will be shown on the map upon successful completion of the geoprocessing job.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/444#discussion_r387170368", "createdAt": "2020-03-03T17:14:42Z", "author": {"login": "Rachael-E"}, "path": "analysis/analyze-hotspots/README.md", "diffHunk": "@@ -1,31 +1,33 @@\n-# Analyze Hotspots\n+# Analyze hotspots\n \n-Perform hotspot analysis using a geoprocessing service.\n+Use a geoprocessing service and a set of features to identify statistically significant hot spots and cold spots.\n \n-In this case, frequency of 911 calls in an area are analyzed.\n+![Image of analyze hotspots](AnalyzeHotspots.png)\n \n-![](AnalyzeHotspots.png)\n+## Use case\n+\n+This tool identifies statistically significant spatial clusters of high values (hot spots) and low values (cold spots). For example, a hotspot analysis based on the frequency of 911 calls within a set region.\n \n ## How to use the sample\n \n-Select a start and end date using the datepickers between 1/1/1998 and 5/31/1998 respectively. Click the \"Analyze hotspots\" button to start the geoprocessing job.\n+Select a date range (between 1998-01-01 and 1998-05-31) from the dialog and click Analyze. The results will be shown on the map upon successful completion of the `GeoprocessingJob`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d2155c820ee724c0dab5ca6cde8e32403655a5d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3NDA4Mw==", "bodyText": "this isn't a part of Java's API: no classes called this. Again this was something we came across a lot in the Android readmes and we had to double check for classes in here that aren't part of our sdk.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * MeasurementChangedEvent", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/444#discussion_r387174083", "createdAt": "2020-03-03T17:21:11Z", "author": {"login": "Rachael-E"}, "path": "analysis/distance-measurement-analysis/README.md", "diffHunk": "@@ -1,33 +1,34 @@\n-# Distance Measurement Analysis\n+# Distance measurement analysis\n \n-Measure distances within a scene.\n+Measure distances between two points in 3D.\n \n-The distance measurement analysis allows you to add the same measuring experience found in ArcGIS Pro, City Engine, and the ArcGIS API for JavaScript to your app. You can set the unit system of measurement (metric or imperial) and have the units automatically switch to one appropriate for the current scale. The rendering is handled internally so it doesn't interfere with other analyses like viewsheds.\n+![Image of distance measurement analysis](DistanceMeasurementAnalysis.png)\n \n-![](DistanceMeasurementAnalysis.png)\n+## Use case\n+\n+The distance measurement analysis allows you to add to your app the same interactive measuring experience found in ArcGIS Pro, City Engine, and the ArcGIS API for JavaScript. You can set the unit system of measurement (metric or imperial). The units automatically switch to one appropriate for the current scale.\n \n ## How to use the sample\n \n-Choose a unit system for the measurement in the UI dropdown. Click any location in the scene to start measuring. Move the mouse to an end location, and click to complete the measure. Clicking any new location after this will start a new measurement.\n+Choose a unit system for the measurement. Click any location in the scene to start measuring. Move the mouse to an end location, and click to complete the measurement. Click a new location to clear and start a new measurement.\n \n ## How it works\n \n-To measure distances with the `LocationDistanceMeasurement` analysis:\n-\n-1. Create an `AnalysisOverlay` and add it to your scene view's analysis overlay collection: `sceneView.getAnalysisOverlays().add(analysisOverlay)`.\n-2. Create a `LocationDistanceMeasurement`, specifying the `startLocation` and `endLocation`. These can be the same point to start with. Add the analysis to the analysis overlay: `analysisOverlay.getAnalyses().add(LocationDistanceMeasurement)`. The measuring line will be drawn for you between the two points.\n-3. The `measurementChanged` callback will fire if the distances change. You can get the new values for the `directDistance`, `horizontalDistance`, and `verticalDistance` from the `MeasurementChangedEvent` returned by the callback. The distance objects contain both a scalar value and a unit of measurement.\n+1. Create an `AnalysisOverlay` object and add it to the analysis overlay collection of the `SceneView` object.\n+2. Specify the start location and end location to create a `LocationDistanceMeasurement` object. Initially, the start and end locations can be the same point.\n+3. Add the location distance measurement analysis to the analysis overlay.\n+4. The `measurementChanged` callback will trigger if the distances change. You can get the new values for the `directDistance`, `horizontalDistance`, and `verticalDistance` from the `MeasurementChangedEvent` object returned by the callback.\n \n ## Relevant API\n \n * AnalysisOverlay\n * LocationDistanceMeasurement\n-* UnitSystem\n+* MeasurementChangedEvent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d2155c820ee724c0dab5ca6cde8e32403655a5d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3NTI2NA==", "bodyText": "the original readme linked to the gif: just pointing this out, might be worth keeping it as the gif?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/444#discussion_r387175264", "createdAt": "2020-03-03T17:23:12Z", "author": {"login": "Rachael-E"}, "path": "analysis/line-of-sight-location/README.md", "diffHunk": "@@ -1,28 +1,32 @@\n-# Line of Sight Location\n+# Line of sight location\n \n-Perform line of sight analysis in real-time.\n+Perform a line of sight analysis between two points in real time.\n+\n+![Image of line of sight location](LineOfSightLocation.png)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d2155c820ee724c0dab5ca6cde8e32403655a5d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3NTg3Mw==", "bodyText": "the image paths in the common design readmes rarely match the names of those in our existing implementations we noticed: we decided to keep the name of our existing image so as not to add more time going through and renaming images.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ![Image of line of sight geoelement](LineOfSightGeo.jpg)\n          \n          \n            \n            ![Image of line of sight geoelement](LineOfSightGeoElement.gif)", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/444#discussion_r387175873", "createdAt": "2020-03-03T17:24:15Z", "author": {"login": "Rachael-E"}, "path": "analysis/line-of-sight-geoelement/README.md", "diffHunk": "@@ -1,29 +1,35 @@\n-# Line of Sight GeoElement\n+# Line of sight geoelement\n \n Show a line of sight between two moving objects.\n \n-To determine if an observer can see a target, you can show a line of sight between them. The line will be green until it is obstructed, in which case it will turn red. By using the GeoElement variant of the line of sight, the line will automatically update when either GeoElement moves.\n+![Image of line of sight geoelement](LineOfSightGeo.jpg)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d2155c820ee724c0dab5ca6cde8e32403655a5d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3Njc0NQ==", "bodyText": "I think we should include the paranthesis at the end of method calls?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Get the resulting `ArcGISMapImageLayer` using `GeoprocessingResult.getMapImageLayer`.\n          \n          \n            \n            1. Get the resulting `ArcGISMapImageLayer` using `GeoprocessingResult.getMapImageLayer()`.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/444#discussion_r387176745", "createdAt": "2020-03-03T17:25:49Z", "author": {"login": "Rachael-E"}, "path": "analysis/analyze-hotspots/README.md", "diffHunk": "@@ -1,31 +1,33 @@\n-# Analyze Hotspots\n+# Analyze hotspots\n \n-Perform hotspot analysis using a geoprocessing service.\n+Use a geoprocessing service and a set of features to identify statistically significant hot spots and cold spots.\n \n-In this case, frequency of 911 calls in an area are analyzed.\n+![Image of analyze hotspots](AnalyzeHotspots.png)\n \n-![](AnalyzeHotspots.png)\n+## Use case\n+\n+This tool identifies statistically significant spatial clusters of high values (hot spots) and low values (cold spots). For example, a hotspot analysis based on the frequency of 911 calls within a set region.\n \n ## How to use the sample\n \n-Select a start and end date using the datepickers between 1/1/1998 and 5/31/1998 respectively. Click the \"Analyze hotspots\" button to start the geoprocessing job.\n+Select a date range (between 1998-01-01 and 1998-05-31) from the dialog and click Analyze. The results will be shown on the map upon successful completion of the `GeoprocessingJob`.\n \n ## How it works\n \n-To analyze hotspots using a geoprocessing service:\n-\n-1. Create a `GeoprocessingTask` with the URL set to the endpoint of the geoprocessing service.\n-2. Create a query string with the date range as an input of `GeoprocessingParameters`.\n-3. Use the `GeoprocessingTask` to create a `GeoprocessingJob` with the parameters.\n-4. Start the job and wait for it to complete and return a `GeoprocessingResult`.\n-5. Get the resulting `ArcGISMapImageLayer` using `geoprocessingResult.getMapImageLayer()`.\n-6. Add the layer to the map's operational layers.\n+1. Create a `GeoprocessingTask` with the URL set to the endpoint of a geoprocessing service.\n+1. Create a query string with the date range as an input of `GeoprocessingParameters`.\n+1. Use the `GeoprocessingTask` to create a `GeoprocessingJob` with the `GeoprocessingParameters` instance.\n+1. Start the `GeoprocessingJob` and wait for it to complete and return a `GeoprocessingResult`.\n+1. Get the resulting `ArcGISMapImageLayer` using `GeoprocessingResult.getMapImageLayer`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d2155c820ee724c0dab5ca6cde8e32403655a5d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3ODY1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Click to set a destination for the vehicle (a GeoElement). The vehicle will 'drive' towards the tapped location. The viewshed analysis will update as the vehicle moves.\n          \n          \n            \n            Click to set a destination for the vehicle (a GeoElement). The vehicle will 'drive' towards the clicked location. The viewshed analysis will update as the vehicle moves.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/444#discussion_r387178652", "createdAt": "2020-03-03T17:29:10Z", "author": {"login": "Rachael-E"}, "path": "analysis/viewshed-geoelement/README.md", "diffHunk": "@@ -1,29 +1,39 @@\n-# Viewshed GeoElement\n+# Viewshed geoelement\n \n-Attach a viewshed to an object to visualize what it sees.\n+Analyze the viewshed for an object (GeoElement) in a scene.\n \n-![](ViewshedGeoElement.gif)\n+![Image of viewshed for geoelement](ViewshedGeoElement.png)\n+\n+## Use case\n+\n+A viewshed analysis is a type of visual analysis you can perform on a scene. The viewshed aims to answer the question 'What can I see from a given location?'. The output is an overlay with two different colors - one representing the visible areas (green) and the other representing the obstructed areas (red).\n \n ## How to use the sample\n \n-Once the scene is done loading, click on a location for the tank to drive to. It will automatically turn and drive straight towards the clicked point. The viewshed will automatically move and rotate with the tank.\n+Click to set a destination for the vehicle (a GeoElement). The vehicle will 'drive' towards the tapped location. The viewshed analysis will update as the vehicle moves.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d2155c820ee724c0dab5ca6cde8e32403655a5d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4MDI1NQ==", "bodyText": "CameraController is a parent class in our API, we should probably be more specific here with OrbitGeoElementCameraController", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/444#discussion_r387180255", "createdAt": "2020-03-03T17:32:16Z", "author": {"login": "Rachael-E"}, "path": "analysis/viewshed-geoelement/README.md", "diffHunk": "@@ -1,29 +1,39 @@\n-# Viewshed GeoElement\n+# Viewshed geoelement\n \n-Attach a viewshed to an object to visualize what it sees.\n+Analyze the viewshed for an object (GeoElement) in a scene.\n \n-![](ViewshedGeoElement.gif)\n+![Image of viewshed for geoelement](ViewshedGeoElement.png)\n+\n+## Use case\n+\n+A viewshed analysis is a type of visual analysis you can perform on a scene. The viewshed aims to answer the question 'What can I see from a given location?'. The output is an overlay with two different colors - one representing the visible areas (green) and the other representing the obstructed areas (red).\n \n ## How to use the sample\n \n-Once the scene is done loading, click on a location for the tank to drive to. It will automatically turn and drive straight towards the clicked point. The viewshed will automatically move and rotate with the tank.\n+Click to set a destination for the vehicle (a GeoElement). The vehicle will 'drive' towards the tapped location. The viewshed analysis will update as the vehicle moves.\n \n ## How it works\n \n-To attach a viewshed to a `GeoElement`:\n+1. Create and show the scene, with an elevation source and a buildings layer.\n+2. Add a model (the `GeoElement`) to represent the observer (in this case, a tank).\n+    * Use a `SimpleRenderer` which has a heading expression set in the `GraphicsOverlay`. This way you can relate the viewshed's heading to the `GeoElement` object's heading.\n+3. Create a `GeoElementViewshed` with configuration for the viewshed analysis.\n+4. Add the viewshed to an `AnalysisOverlay` and add the overlay to the scene.\n+5. Configure the SceneView `CameraController` to orbit the vehicle.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d2155c820ee724c0dab5ca6cde8e32403655a5d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4MDc2OQ==", "bodyText": "let's remove LocationViewshed from this list since it's in the relevant API section", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/444#discussion_r387180769", "createdAt": "2020-03-03T17:33:20Z", "author": {"login": "Rachael-E"}, "path": "analysis/viewshed-location/README.md", "diffHunk": "@@ -1,26 +1,34 @@\n-# Viewshed Location\n+# Viewshed location\n \n-Adjust the position, angles, range, and style of a viewshed.\n+Perform a viewshed analysis from a defined vantage point. \n \n-![](ViewshedLocation.png)\n+![Image of viewshed location](ViewshedLocation.png)\n+\n+## Use case\n+\n+A 3D viewshed analysis is a type of visual analysis you can perform on a scene. The viewshed shows what can be seen from a given location. The output is an overlay with two different colors - one representing the visible areas (green) and the other representing the obstructed areas (red). Viewshed analysis is a form of \"exploratory analysis\", which means the results are calculated on the current scale of the data, and the results are generated very quickly. If more \"conclusive\" results are required, consider using a `GeoprocessingTask` to perform a viewshed instead.\n \n ## How to use the sample\n \n-Use the corner UI controls to change the properties of the viewshed and see them updated instantly. To move the viewshed, click on the scene and move your mouse. Click again to stop moving the viewshed.\n+Use the sliders to change the properties (heading, pitch, etc.), of the viewshed and see them updated in real time.  To move the viewshed, click on the scene and move your mouse. Click again to stop moving the viewshed.\n \n ## How it works\n \n-To create a viewshed from a location and directional parameters:\n-\n 1. Create a `LocationViewshed` passing in the observer location, heading, pitch, horizontal/vertical angles, and min/max distances.\n-2. Set the property values directly on the viewshed instance for location, direction, range, and visibility properties. The colors are global, so change them via the static properties on `Viewshed`.\n+2. Set the property values on the viewshed instance for location, direction, range, and visibility properties. \n \n ## Relevant API\n \n-* 3D\n * AnalysisOverlay\n-* ArcGISTiledElevationSource\n-* ArcGISScene\n * ArcGISSceneLayer\n+* ArcGISTiledElevationSource\n * LocationViewshed\n-* SceneView\n\\ No newline at end of file\n+* Viewshed\n+\n+## About the data\n+\n+The scene shows a [buildings layer in Brest, France](https://tiles.arcgis.com/tiles/P3ePLMYs2RVChkJx/arcgis/rest/services/Buildings_Brest/SceneServer/layers/0) hosted on ArcGIS Online.\n+\n+## Tags\n+\n+3D, frustum, LocationViewshed, Scene, viewshed, visibility analysis", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d2155c820ee724c0dab5ca6cde8e32403655a5d"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MjAzMTA5", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/444#pullrequestreview-368203109", "createdAt": "2020-03-03T18:03:28Z", "commit": {"oid": "7d2155c820ee724c0dab5ca6cde8e32403655a5d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aee4953c1f2717df0ac2cc0694d092c1a1972df7", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/aee4953c1f2717df0ac2cc0694d092c1a1972df7", "committedDate": "2020-03-03T21:40:01Z", "message": "implement review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dd3f1460ce0e7df4ea992ff35895ec3e75d18b3", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/0dd3f1460ce0e7df4ea992ff35895ec3e75d18b3", "committedDate": "2020-03-03T21:41:47Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Rachael Ellen <36415565+Rachael-E@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NjU2MDU0", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/444#pullrequestreview-368656054", "createdAt": "2020-03-04T10:19:21Z", "commit": {"oid": "0dd3f1460ce0e7df4ea992ff35895ec3e75d18b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3520, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}