{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2OTA0NzI5", "number": 449, "title": "New sample: Perform valve isolation trace", "bodyText": "A sample for the upcoming 'isolation trace' functionality in Utility Network for 100.8.", "createdAt": "2020-03-11T20:27:44Z", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449", "merged": true, "mergeCommit": {"oid": "e9cddc00cb9c87fb3c99772dabddfc39a34ab683"}, "closed": true, "closedAt": "2020-09-28T08:40:21Z", "author": {"login": "JonLavi"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDlm9nAH2gAyMzg2OTA0NzI5Ojg0ZTRkZDQwM2MxM2I1NTc4MzdlMmUxOTMyMWVjMTQ4NDA2YmEwOWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLoI1JgH2gAyMzg2OTA0NzI5OjQ4YjhiZDcyYWE4ZjgzNDYwNWE5OTU5YmE1OWMyZWFkMjcwNzdlNTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "84e4dd403c13b557837e2e19321ec148406ba09d", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/84e4dd403c13b557837e2e19321ec148406ba09d", "committedDate": "2020-02-12T12:36:54Z", "message": "project setup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1741017c3f6e3350025bb49e28526a592e2f71c", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/c1741017c3f6e3350025bb49e28526a592e2f71c", "committedDate": "2020-02-12T12:50:04Z", "message": "add basic ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dfe4ad30661c85955e7ffda95eda337e3c84601", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/1dfe4ad30661c85955e7ffda95eda337e3c84601", "committedDate": "2020-02-12T14:45:56Z", "message": "add sample"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49e20101a3a417e1d555a6ad0f54cfe1016dfc5b", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/49e20101a3a417e1d555a6ad0f54cfe1016dfc5b", "committedDate": "2020-02-12T14:59:34Z", "message": "add list cell, improve UI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6e348b24f80dd6f6ccf9972f612c73eb80ed536", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/e6e348b24f80dd6f6ccf9972f612c73eb80ed536", "committedDate": "2020-02-12T15:08:56Z", "message": "UI polishing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a99590171fb9c6522f7ac20e4fef38f392f6120", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/8a99590171fb9c6522f7ac20e4fef38f392f6120", "committedDate": "2020-02-17T10:32:54Z", "message": "update to use gas network"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da4d04d6f22c2e6a38ecb946d0db0637e0f46379", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/da4d04d6f22c2e6a38ecb946d0db0637e0f46379", "committedDate": "2020-02-18T11:08:14Z", "message": "var naming typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "688b9b1edfcd1300c3e6d7d633dd7bc4e5f587e9", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/688b9b1edfcd1300c3e6d7d633dd7bc4e5f587e9", "committedDate": "2020-02-18T11:12:31Z", "message": "improve label text"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "486e8f43282110aa295024d26d8eb07b0a2da8cc", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/486e8f43282110aa295024d26d8eb07b0a2da8cc", "committedDate": "2020-02-26T11:40:35Z", "message": "update runtime version, javafx dependency, launcher class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "761d7dc2513b60dca3cb64a9979de9bc0c4b398b", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/761d7dc2513b60dca3cb64a9979de9bc0c4b398b", "committedDate": "2020-03-10T23:41:28Z", "message": "move to UN category, activate isolation trace, improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf7a1a68e191d1c1cfb6cabcbd80db22fef431f4", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/bf7a1a68e191d1c1cfb6cabcbd80db22fef431f4", "committedDate": "2020-03-10T23:51:57Z", "message": "deal with trace returning 0 results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/0b4123761bf6170fd7ff6050c23e6fd919398857", "committedDate": "2020-03-10T23:54:27Z", "message": "update error/info text"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNzIyMDgz", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#pullrequestreview-401722083", "createdAt": "2020-04-28T10:56:18Z", "commit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDo1NjoxOVrOGNOZXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTo0MDo1M1rOGNP3eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUyMDU0Mw==", "bodyText": "since this is an instruction rather than a title, this should be sentence case", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416520543", "createdAt": "2020-04-28T10:56:19Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/src/main/resources/perform_valve_isolation_trace.fxml", "diffHunk": "@@ -0,0 +1,57 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Esri.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+  ~ use this file except in compliance with the License. You may obtain a copy of\n+  ~ the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+  ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+  ~ License for the specific language governing permissions and limitations under\n+  ~ the License.\n+  -->\n+\n+<?import com.esri.arcgisruntime.mapping.view.MapView?>\n+<?import javafx.geometry.Insets?>\n+<?import javafx.scene.control.*?>\n+<?import javafx.scene.layout.*?>\n+<?import javafx.scene.paint.Color?>\n+<StackPane\n+        fx:controller=\"com.esri.samples.perform_valve_isolation_trace.PerformValveIsolationTraceController\"\n+        xmlns:fx=\"http://javafx.com/fxml\" stylesheets=\"style.css\">\n+    <!--SDK MapView-->\n+    <MapView fx:id=\"mapView\"/>\n+    <ProgressIndicator fx:id=\"progressIndicator\" StackPane.alignment=\"CENTER\"/>\n+    <!--Controls Area-->\n+    <VBox StackPane.alignment=\"TOP_LEFT\" maxWidth=\"300\" maxHeight=\"130\" styleClass=\"panel-region\" spacing=\"10\">\n+        <!--Control Panel Styling-->\n+        <padding>\n+            <Insets topRightBottomLeft=\"10\"/>\n+        </padding>\n+        <background>\n+            <Background>\n+                <fills>\n+                    <BackgroundFill>\n+                        <fill>\n+                            <Color opacity=\"0.75\"/>\n+                        </fill>\n+                    </BackgroundFill>\n+                </fills>\n+            </Background>\n+        </background>\n+\n+        <Label text=\"Choose Category for Filter Barrier:\" styleClass=\"title\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUyMDgxNg==", "bodyText": "same for here: instruction rather than title so sentence case is best", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416520816", "createdAt": "2020-04-28T10:56:46Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/src/main/resources/perform_valve_isolation_trace.fxml", "diffHunk": "@@ -0,0 +1,57 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Esri.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+  ~ use this file except in compliance with the License. You may obtain a copy of\n+  ~ the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+  ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+  ~ License for the specific language governing permissions and limitations under\n+  ~ the License.\n+  -->\n+\n+<?import com.esri.arcgisruntime.mapping.view.MapView?>\n+<?import javafx.geometry.Insets?>\n+<?import javafx.scene.control.*?>\n+<?import javafx.scene.layout.*?>\n+<?import javafx.scene.paint.Color?>\n+<StackPane\n+        fx:controller=\"com.esri.samples.perform_valve_isolation_trace.PerformValveIsolationTraceController\"\n+        xmlns:fx=\"http://javafx.com/fxml\" stylesheets=\"style.css\">\n+    <!--SDK MapView-->\n+    <MapView fx:id=\"mapView\"/>\n+    <ProgressIndicator fx:id=\"progressIndicator\" StackPane.alignment=\"CENTER\"/>\n+    <!--Controls Area-->\n+    <VBox StackPane.alignment=\"TOP_LEFT\" maxWidth=\"300\" maxHeight=\"130\" styleClass=\"panel-region\" spacing=\"10\">\n+        <!--Control Panel Styling-->\n+        <padding>\n+            <Insets topRightBottomLeft=\"10\"/>\n+        </padding>\n+        <background>\n+            <Background>\n+                <fills>\n+                    <BackgroundFill>\n+                        <fill>\n+                            <Color opacity=\"0.75\"/>\n+                        </fill>\n+                    </BackgroundFill>\n+                </fills>\n+            </Background>\n+        </background>\n+\n+        <Label text=\"Choose Category for Filter Barrier:\" styleClass=\"title\"/>\n+\n+        <HBox maxWidth=\"300\" spacing=\"10\">\n+            <ComboBox fx:id=\"categorySelectionComboBox\" promptText=\"Utility Category\" disable=\"true\" minWidth=\"250\"/>\n+            <Button fx:id=\"traceButton\" text=\"Trace\" onAction=\"#handleTraceClick\" disable=\"true\" minWidth=\"50\"/>\n+        </HBox>\n+\n+        <CheckBox fx:id=\"includeIsolatedFeaturesCheckbox\" text=\"Include Isolated Features\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUyMTg5OQ==", "bodyText": "I'm never too sure of this process for the dev branch: I think it's ok to leave the build number like this since when it gets merged into master with the release then @tschie updates it to 100.8.0 anyway?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416521899", "createdAt": "2020-04-28T10:58:45Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/build.gradle", "diffHunk": "@@ -0,0 +1,77 @@\n+plugins {\n+    id 'application'\n+    id 'org.openjfx.javafxplugin' version '0.0.5'\n+}\n+\n+group = 'com.esri.samples'\n+\n+ext {\n+    arcgisVersion = '100.8.0-2720'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUyNDA2OA==", "bodyText": "I guess this alt text is already approved from the design, but it's different to how we did our other samples which were of the standard \"Image of\" + name of the sample. Just an observation, I like this description since it's more clear.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416524068", "createdAt": "2020-04-28T11:02:35Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of a utility network with an isolation trace applied to it](PerformValveIsolationTrace.png)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUyNDM3MQ==", "bodyText": "just adding a suggestion for the updated UI text case I've suggested later\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Create and set the configuration's filter barriers by selecting a category. Check or uncheck 'Include Isolated Features'. Click 'Trace' to run a subnetwork-based isolation trace.\n          \n          \n            \n            Create and set the configuration's filter barriers by selecting a category. Check or uncheck 'Include isolated features'. Click 'Trace' to run a subnetwork-based isolation trace.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416524371", "createdAt": "2020-04-28T11:03:08Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of a utility network with an isolation trace applied to it](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or uncheck 'Include Isolated Features'. Click 'Trace' to run a subnetwork-based isolation trace.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUyNTU4Nw==", "bodyText": "Filter Barrier: Category exists\n\nwhat is this relating to? I don't see it in the UI. I'm thinking it should be the \"Choose catergory for filter barrier\" drop down list.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416525587", "createdAt": "2020-04-28T11:05:24Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of a utility network with an isolation trace applied to it](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or uncheck 'Include Isolated Features'. Click 'Trace' to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create a `MapView`.\n+2. Create and load a `UtilityNetwork` with a feature service URL.\n+3. Create a `Map` that contains `FeatureLayer`(s) that are part of this utility network.\n+4. Create a default starting location from a given asset type and global id.\n+5. Add a `GraphicsOverlay` with a `Graphic` that represents this starting location.\n+6. Populate the choice list for the 'Filter Barrier: Category exists' from `UtilityNetworkDefinition.getCategories()`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUyNjcwOQ==", "bodyText": "drop the apostrophe here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            7. Get a default `UtilityTraceConfiguration` from a given tier in a domain network. Set it's `Filter` with a new `UtilityTraceFilter`.\n          \n          \n            \n            7. Get a default `UtilityTraceConfiguration` from a given tier in a domain network. Set its `Filter` with a new `UtilityTraceFilter`.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416526709", "createdAt": "2020-04-28T11:07:24Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of a utility network with an isolation trace applied to it](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or uncheck 'Include Isolated Features'. Click 'Trace' to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create a `MapView`.\n+2. Create and load a `UtilityNetwork` with a feature service URL.\n+3. Create a `Map` that contains `FeatureLayer`(s) that are part of this utility network.\n+4. Create a default starting location from a given asset type and global id.\n+5. Add a `GraphicsOverlay` with a `Graphic` that represents this starting location.\n+6. Populate the choice list for the 'Filter Barrier: Category exists' from `UtilityNetworkDefinition.getCategories()`.\n+7. Get a default `UtilityTraceConfiguration` from a given tier in a domain network. Set it's `Filter` with a new `UtilityTraceFilter`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUyNzA0NQ==", "bodyText": "doesn't look like Filter is an API class for us? So can just use plain english here.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416527045", "createdAt": "2020-04-28T11:08:08Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of a utility network with an isolation trace applied to it](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or uncheck 'Include Isolated Features'. Click 'Trace' to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create a `MapView`.\n+2. Create and load a `UtilityNetwork` with a feature service URL.\n+3. Create a `Map` that contains `FeatureLayer`(s) that are part of this utility network.\n+4. Create a default starting location from a given asset type and global id.\n+5. Add a `GraphicsOverlay` with a `Graphic` that represents this starting location.\n+6. Populate the choice list for the 'Filter Barrier: Category exists' from `UtilityNetworkDefinition.getCategories()`.\n+7. Get a default `UtilityTraceConfiguration` from a given tier in a domain network. Set it's `Filter` with a new `UtilityTraceFilter`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUyNzI1Mg==", "bodyText": "since we made our reference to buttons standard in the readme refactorings, let's go for double quotes here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            8. When 'Trace' is clicked,\n          \n          \n            \n            8. When \"Trace\" is clicked,", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416527252", "createdAt": "2020-04-28T11:08:36Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of a utility network with an isolation trace applied to it](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or uncheck 'Include Isolated Features'. Click 'Trace' to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create a `MapView`.\n+2. Create and load a `UtilityNetwork` with a feature service URL.\n+3. Create a `Map` that contains `FeatureLayer`(s) that are part of this utility network.\n+4. Create a default starting location from a given asset type and global id.\n+5. Add a `GraphicsOverlay` with a `Graphic` that represents this starting location.\n+6. Populate the choice list for the 'Filter Barrier: Category exists' from `UtilityNetworkDefinition.getCategories()`.\n+7. Get a default `UtilityTraceConfiguration` from a given tier in a domain network. Set it's `Filter` with a new `UtilityTraceFilter`.\n+8. When 'Trace' is clicked,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUyNzc5OQ==", "bodyText": "TraceConfiguration isn't an API class in Java: we've already referred to a utilityTraceConfiguration before, so this could probably just be plain english, or, UtilityTraceConfiguration.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416527799", "createdAt": "2020-04-28T11:09:40Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of a utility network with an isolation trace applied to it](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or uncheck 'Include Isolated Features'. Click 'Trace' to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create a `MapView`.\n+2. Create and load a `UtilityNetwork` with a feature service URL.\n+3. Create a `Map` that contains `FeatureLayer`(s) that are part of this utility network.\n+4. Create a default starting location from a given asset type and global id.\n+5. Add a `GraphicsOverlay` with a `Graphic` that represents this starting location.\n+6. Populate the choice list for the 'Filter Barrier: Category exists' from `UtilityNetworkDefinition.getCategories()`.\n+7. Get a default `UtilityTraceConfiguration` from a given tier in a domain network. Set it's `Filter` with a new `UtilityTraceFilter`.\n+8. When 'Trace' is clicked,\n+    - Create a new `UtilityCategoryComparison` with the selected category and `UtilityCategoryComparisonOperator.EXISTS`. \n+    - Assign this condition to `utilityTraceFilter.setBarriers()` from the default configuration from step 7. Update this configuration's `.isIncludeIsolatedFeatures` property.\n+    - Create a `UtilityTraceParameters` with `UtilityTraceType.ISOLATION` and default starting location from step 4. \n+    - Set its `TraceConfiguration` with this configuration and then, run a `utilityNetwork.TraceAsync`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUyODA3Mg==", "bodyText": "Excess space to remove\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The [Naperville gas](https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer)  network feature service, hosted on ArcGIS Online, contains a utility network used to run the isolation trace shown in this sample.\n          \n          \n            \n            The [Naperville gas](https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer) network feature service, hosted on ArcGIS Online, contains a utility network used to run the isolation trace shown in this sample.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416528072", "createdAt": "2020-04-28T11:10:14Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of a utility network with an isolation trace applied to it](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or uncheck 'Include Isolated Features'. Click 'Trace' to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create a `MapView`.\n+2. Create and load a `UtilityNetwork` with a feature service URL.\n+3. Create a `Map` that contains `FeatureLayer`(s) that are part of this utility network.\n+4. Create a default starting location from a given asset type and global id.\n+5. Add a `GraphicsOverlay` with a `Graphic` that represents this starting location.\n+6. Populate the choice list for the 'Filter Barrier: Category exists' from `UtilityNetworkDefinition.getCategories()`.\n+7. Get a default `UtilityTraceConfiguration` from a given tier in a domain network. Set it's `Filter` with a new `UtilityTraceFilter`.\n+8. When 'Trace' is clicked,\n+    - Create a new `UtilityCategoryComparison` with the selected category and `UtilityCategoryComparisonOperator.EXISTS`. \n+    - Assign this condition to `utilityTraceFilter.setBarriers()` from the default configuration from step 7. Update this configuration's `.isIncludeIsolatedFeatures` property.\n+    - Create a `UtilityTraceParameters` with `UtilityTraceType.ISOLATION` and default starting location from step 4. \n+    - Set its `TraceConfiguration` with this configuration and then, run a `utilityNetwork.TraceAsync`.\n+9. For every `FeatureLayer` in the map, select the features returned by `GetFeaturesForElementsAsync` from the elements matching their `NetworkSource.getName()` with the layer's `FeatureTable.getName()`.\n+\n+## Relevant API\n+\n+* UtilityCategory\n+* UtilityCategoryComparison\n+* UtilityCategoryComparisonOperator\n+* UtilityDomainNetwork\n+* UtilityElement\n+* UtilityElementTraceResult\n+* UtilityNetwork\n+* UtilityNetworkDefinition\n+* UtilityTraceFilter\n+* UtilityTier\n+* UtilityTraceParameters\n+* UtilityTraceResult\n+* UtilityTraceType\n+\n+## About the data\n+\n+The [Naperville gas](https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer)  network feature service, hosted on ArcGIS Online, contains a utility network used to run the isolation trace shown in this sample.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUzOTQ5OA==", "bodyText": "looking at our doc for utility network, I'm not convinced this is the best sample to show this constructor. The doc says the following for the constructor that takes a URL and a map:\n\nUsually used when instantiating a UtilityNetwork object from a web map.\n\nSince we aren't doing this, I think it's more appropriate here to use the basic constructor which just takes the URL, unless there was a specific reason you chose this constructor? if so a comment as to why is probably good.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416539498", "createdAt": "2020-04-28T11:31:24Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL, map);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0MDkwMg==", "bodyText": "to avoid repeating the code in line 141, looks like we could use:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              Point startingLocationGeometryPoint = (Point) startingLocationFeatures.get(0).getGeometry();\n          \n          \n            \n                              Point startingLocationGeometryPoint = (Point) startingLocationGeometry;", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416540902", "createdAt": "2020-04-28T11:34:06Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL, map);\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // get a trace configuration from a tier\n+          UtilityNetworkDefinition networkDefinition = utilityNetwork.getDefinition();\n+          UtilityDomainNetwork domainNetwork = networkDefinition.getDomainNetwork(\"Pipeline\");\n+          UtilityTier tier = domainNetwork.getTier(\"Pipe Distribution System\");\n+          traceConfiguration = tier.getTraceConfiguration();\n+\n+          // create a trace filter\n+          traceConfiguration.setFilter(new UtilityTraceFilter());\n+\n+          // get a default starting location\n+          UtilityNetworkSource networkSource = networkDefinition.getNetworkSource(\"Gas Device\");\n+          UtilityAssetGroup assetGroup = networkSource.getAssetGroup(\"Meter\");\n+          UtilityAssetType assetType = assetGroup.getAssetType(\"Customer\");\n+          startingLocation = utilityNetwork.createElement(assetType, UUID.fromString(\"98A06E95-70BE-43E7-91B7-E34C9D3CB9FF\"));\n+\n+          // get the first feature for the starting location, and get its geometry\n+          ListenableFuture<List<ArcGISFeature>> elementFeaturesFuture =\n+                  utilityNetwork.fetchFeaturesForElementsAsync(Collections.singletonList(startingLocation));\n+\n+          elementFeaturesFuture.addDoneListener(() -> {\n+            try {\n+              List<ArcGISFeature> startingLocationFeatures = elementFeaturesFuture.get();\n+\n+              if (!startingLocationFeatures.isEmpty()) {\n+                Geometry startingLocationGeometry = startingLocationFeatures.get(0).getGeometry();\n+\n+                if (startingLocationGeometry instanceof Point){\n+                  Point startingLocationGeometryPoint = (Point) startingLocationFeatures.get(0).getGeometry();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0MTcyNQ==", "bodyText": "Android's implementation came across a time issue where the sample wouldn't always load at this viewpoint due to async call backs with the loading listener. We instead hard coded the starting location point to avoid this and set the viewpoint for the mapview at the start of the code. It's probably worth doing the same thing here.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416541725", "createdAt": "2020-04-28T11:35:37Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL, map);\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // get a trace configuration from a tier\n+          UtilityNetworkDefinition networkDefinition = utilityNetwork.getDefinition();\n+          UtilityDomainNetwork domainNetwork = networkDefinition.getDomainNetwork(\"Pipeline\");\n+          UtilityTier tier = domainNetwork.getTier(\"Pipe Distribution System\");\n+          traceConfiguration = tier.getTraceConfiguration();\n+\n+          // create a trace filter\n+          traceConfiguration.setFilter(new UtilityTraceFilter());\n+\n+          // get a default starting location\n+          UtilityNetworkSource networkSource = networkDefinition.getNetworkSource(\"Gas Device\");\n+          UtilityAssetGroup assetGroup = networkSource.getAssetGroup(\"Meter\");\n+          UtilityAssetType assetType = assetGroup.getAssetType(\"Customer\");\n+          startingLocation = utilityNetwork.createElement(assetType, UUID.fromString(\"98A06E95-70BE-43E7-91B7-E34C9D3CB9FF\"));\n+\n+          // get the first feature for the starting location, and get its geometry\n+          ListenableFuture<List<ArcGISFeature>> elementFeaturesFuture =\n+                  utilityNetwork.fetchFeaturesForElementsAsync(Collections.singletonList(startingLocation));\n+\n+          elementFeaturesFuture.addDoneListener(() -> {\n+            try {\n+              List<ArcGISFeature> startingLocationFeatures = elementFeaturesFuture.get();\n+\n+              if (!startingLocationFeatures.isEmpty()) {\n+                Geometry startingLocationGeometry = startingLocationFeatures.get(0).getGeometry();\n+\n+                if (startingLocationGeometry instanceof Point){\n+                  Point startingLocationGeometryPoint = (Point) startingLocationFeatures.get(0).getGeometry();\n+\n+                // create a graphic for the starting location and add it to the graphics overlay\n+                Graphic startingLocationGraphic = new Graphic(startingLocationGeometry, startingPointSymbol);\n+                startingLocationGraphicsOverlay.getGraphics().add(startingLocationGraphic);\n+\n+                // set the map's viewpoint to the starting location\n+                mapView.setViewpointAsync(new Viewpoint(startingLocationGeometryPoint, 3000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0Mjk3Mw==", "bodyText": "missing Javadoc for this method", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416542973", "createdAt": "2020-04-28T11:37:45Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL, map);\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // get a trace configuration from a tier\n+          UtilityNetworkDefinition networkDefinition = utilityNetwork.getDefinition();\n+          UtilityDomainNetwork domainNetwork = networkDefinition.getDomainNetwork(\"Pipeline\");\n+          UtilityTier tier = domainNetwork.getTier(\"Pipe Distribution System\");\n+          traceConfiguration = tier.getTraceConfiguration();\n+\n+          // create a trace filter\n+          traceConfiguration.setFilter(new UtilityTraceFilter());\n+\n+          // get a default starting location\n+          UtilityNetworkSource networkSource = networkDefinition.getNetworkSource(\"Gas Device\");\n+          UtilityAssetGroup assetGroup = networkSource.getAssetGroup(\"Meter\");\n+          UtilityAssetType assetType = assetGroup.getAssetType(\"Customer\");\n+          startingLocation = utilityNetwork.createElement(assetType, UUID.fromString(\"98A06E95-70BE-43E7-91B7-E34C9D3CB9FF\"));\n+\n+          // get the first feature for the starting location, and get its geometry\n+          ListenableFuture<List<ArcGISFeature>> elementFeaturesFuture =\n+                  utilityNetwork.fetchFeaturesForElementsAsync(Collections.singletonList(startingLocation));\n+\n+          elementFeaturesFuture.addDoneListener(() -> {\n+            try {\n+              List<ArcGISFeature> startingLocationFeatures = elementFeaturesFuture.get();\n+\n+              if (!startingLocationFeatures.isEmpty()) {\n+                Geometry startingLocationGeometry = startingLocationFeatures.get(0).getGeometry();\n+\n+                if (startingLocationGeometry instanceof Point){\n+                  Point startingLocationGeometryPoint = (Point) startingLocationFeatures.get(0).getGeometry();\n+\n+                // create a graphic for the starting location and add it to the graphics overlay\n+                Graphic startingLocationGraphic = new Graphic(startingLocationGeometry, startingPointSymbol);\n+                startingLocationGraphicsOverlay.getGraphics().add(startingLocationGraphic);\n+\n+                // set the map's viewpoint to the starting location\n+                mapView.setViewpointAsync(new Viewpoint(startingLocationGeometryPoint, 3000));\n+\n+                // build the choice list for categories populated with the 'Name' property of each 'UtilityCategory' in the 'UtilityNetworkDefinition'\n+                categorySelectionComboBox.getItems().addAll(networkDefinition.getCategories());\n+                categorySelectionComboBox.getSelectionModel().select(0);\n+                categorySelectionComboBox.setCellFactory(param -> new UtilityCategoryListCell());\n+                categorySelectionComboBox.setButtonCell(new UtilityCategoryListCell());\n+\n+                // enable the UI\n+                enableUI();\n+\n+                // hide the progress indicator\n+                progressIndicator.setVisible(false);\n+\n+                // update the status text\n+                statusLabel.setText(\"Utility network loaded. Ready to perform trace...\");\n+                }\n+\n+              } else {\n+                new Alert(Alert.AlertType.ERROR, \"Error getting starting location geometry.\").show();\n+              }\n+            } catch (ExecutionException | InterruptedException e) {\n+              new Alert(Alert.AlertType.ERROR, \"Error getting starting location feature.\").show();\n+            }\n+          });\n+\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Utility Network.\").show();\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  @FXML", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0NDYzNA==", "bodyText": "with a slight tweak of the enableUI method to remove the progress indicator and take a boolean as a parameter, these lines could be neatened up with:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  traceButton.setDisable(true);\n          \n          \n            \n                     `enableUI(true)`;\n          \n      \n    \n    \n  \n\njust a suggestion to consider since it would mean tweaking of code elsewhere: not a must!", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416544634", "createdAt": "2020-04-28T11:40:53Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL, map);\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // get a trace configuration from a tier\n+          UtilityNetworkDefinition networkDefinition = utilityNetwork.getDefinition();\n+          UtilityDomainNetwork domainNetwork = networkDefinition.getDomainNetwork(\"Pipeline\");\n+          UtilityTier tier = domainNetwork.getTier(\"Pipe Distribution System\");\n+          traceConfiguration = tier.getTraceConfiguration();\n+\n+          // create a trace filter\n+          traceConfiguration.setFilter(new UtilityTraceFilter());\n+\n+          // get a default starting location\n+          UtilityNetworkSource networkSource = networkDefinition.getNetworkSource(\"Gas Device\");\n+          UtilityAssetGroup assetGroup = networkSource.getAssetGroup(\"Meter\");\n+          UtilityAssetType assetType = assetGroup.getAssetType(\"Customer\");\n+          startingLocation = utilityNetwork.createElement(assetType, UUID.fromString(\"98A06E95-70BE-43E7-91B7-E34C9D3CB9FF\"));\n+\n+          // get the first feature for the starting location, and get its geometry\n+          ListenableFuture<List<ArcGISFeature>> elementFeaturesFuture =\n+                  utilityNetwork.fetchFeaturesForElementsAsync(Collections.singletonList(startingLocation));\n+\n+          elementFeaturesFuture.addDoneListener(() -> {\n+            try {\n+              List<ArcGISFeature> startingLocationFeatures = elementFeaturesFuture.get();\n+\n+              if (!startingLocationFeatures.isEmpty()) {\n+                Geometry startingLocationGeometry = startingLocationFeatures.get(0).getGeometry();\n+\n+                if (startingLocationGeometry instanceof Point){\n+                  Point startingLocationGeometryPoint = (Point) startingLocationFeatures.get(0).getGeometry();\n+\n+                // create a graphic for the starting location and add it to the graphics overlay\n+                Graphic startingLocationGraphic = new Graphic(startingLocationGeometry, startingPointSymbol);\n+                startingLocationGraphicsOverlay.getGraphics().add(startingLocationGraphic);\n+\n+                // set the map's viewpoint to the starting location\n+                mapView.setViewpointAsync(new Viewpoint(startingLocationGeometryPoint, 3000));\n+\n+                // build the choice list for categories populated with the 'Name' property of each 'UtilityCategory' in the 'UtilityNetworkDefinition'\n+                categorySelectionComboBox.getItems().addAll(networkDefinition.getCategories());\n+                categorySelectionComboBox.getSelectionModel().select(0);\n+                categorySelectionComboBox.setCellFactory(param -> new UtilityCategoryListCell());\n+                categorySelectionComboBox.setButtonCell(new UtilityCategoryListCell());\n+\n+                // enable the UI\n+                enableUI();\n+\n+                // hide the progress indicator\n+                progressIndicator.setVisible(false);\n+\n+                // update the status text\n+                statusLabel.setText(\"Utility network loaded. Ready to perform trace...\");\n+                }\n+\n+              } else {\n+                new Alert(Alert.AlertType.ERROR, \"Error getting starting location geometry.\").show();\n+              }\n+            } catch (ExecutionException | InterruptedException e) {\n+              new Alert(Alert.AlertType.ERROR, \"Error getting starting location feature.\").show();\n+            }\n+          });\n+\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Utility Network.\").show();\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  @FXML\n+  private void handleTraceClick() {\n+    try {\n+      // clear previous selection from the layers\n+      mapView.getMap().getOperationalLayers().forEach(layer -> {\n+        if (layer instanceof FeatureLayer) {\n+          ((FeatureLayer) layer).clearSelection();\n+        }\n+      });\n+\n+      // show the progress indicator and update the status text\n+      progressIndicator.setVisible(true);\n+      statusLabel.setText(\"Running isolation trace...\");\n+\n+      // disable the UI\n+      traceButton.setDisable(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857"}, "originalPosition": 201}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "938c046101e7256e1cfc8152cee437532647af52", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/938c046101e7256e1cfc8152cee437532647af52", "committedDate": "2020-04-28T12:42:28Z", "message": "update with review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc3833730c79b135c553e2ff7bde30688b922bec", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/cc3833730c79b135c553e2ff7bde30688b922bec", "committedDate": "2020-04-28T12:50:07Z", "message": "update to newer 100.8 build"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODM3NDc5", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#pullrequestreview-401837479", "createdAt": "2020-04-28T13:32:06Z", "commit": {"oid": "cc3833730c79b135c553e2ff7bde30688b922bec"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzozMjowNlrOGNULcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzozMjowNlrOGNULcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNTI4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Enables/disable the UI and hides/shows the progress indicator.\n          \n          \n            \n               * Enables/disables the UI and hides/shows the progress indicator.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416615281", "createdAt": "2020-04-28T13:32:06Z", "author": {"login": "Rachael-E"}, "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -256,44 +252,47 @@ private void handleTraceClick() {\n                   featureQueryResultListenableFuture.addDoneListener(() -> {\n                     // update the status text, enable the buttons and hide the progress indicator\n                     statusLabel.setText(\"Isolation trace completed.\");\n-                    enableUI();\n+                    enableUI(true);\n                   });\n                 }\n               });\n \n             } else {\n               statusLabel.setText(\"Isolation trace completed.\");\n               new Alert(Alert.AlertType.INFORMATION, \"Isolation trace returned no elements.\").show();\n-              enableUI();\n+              enableUI(true);\n             }\n \n           } else {\n             statusLabel.setText(\"Trace failed.\");\n             new Alert(Alert.AlertType.ERROR, \"Isolation trace result is not a utility element.\").show();\n-            enableUI();\n+            enableUI(true);\n           }\n \n         } catch (Exception e) {\n           statusLabel.setText(\"Trace failed.\");\n           new Alert(Alert.AlertType.ERROR, \"Error getting isolation trace result.\").show();\n-          enableUI();\n+          enableUI(true);\n         }\n       });\n \n     } catch (Exception e) {\n       new Alert(Alert.AlertType.ERROR, \"Error performing isolation trace.\").show();\n-      enableUI();\n+      enableUI(true);\n     }\n   }\n \n+\n   /**\n-   * Enables the UI and hides the progress indicator.\n+   * Enables/disable the UI and hides/shows the progress indicator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc3833730c79b135c553e2ff7bde30688b922bec"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea12e481344e040ba791eafb52baba1a0abf50f1", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/ea12e481344e040ba791eafb52baba1a0abf50f1", "committedDate": "2020-04-28T13:39:30Z", "message": "Update utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java\n\nCo-Authored-By: Rachael Ellen <36415565+Rachael-E@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9dc6a3eb6453b48c63ea5448291bc2f7ab22660", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/f9dc6a3eb6453b48c63ea5448291bc2f7ab22660", "committedDate": "2020-05-05T09:09:52Z", "message": "improve CSS usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7016b11259c2aef68b46c09027c7dbf2e545146", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/d7016b11259c2aef68b46c09027c7dbf2e545146", "committedDate": "2020-05-05T09:10:51Z", "message": "Merge branch 'perform_valve_isolation_trace' of github.com:Esri/arcgis-runtime-samples-java into perform_valve_isolation_trace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d91a47c03c57e91760e9d5bd14634f87c4a131b", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/8d91a47c03c57e91760e9d5bd14634f87c4a131b", "committedDate": "2020-05-05T09:11:59Z", "message": "add newline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccac8f5a9237715b13ef44c8a0cd219ce76a46ee", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/ccac8f5a9237715b13ef44c8a0cd219ce76a46ee", "committedDate": "2020-05-05T09:12:34Z", "message": "indentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ec1462fa948b8a7b186bcbb26c012a3a738b581", "author": {"user": {"login": "tschie", "name": "Tyler Schiewe"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/8ec1462fa948b8a7b186bcbb26c012a3a738b581", "committedDate": "2020-05-07T17:03:21Z", "message": "change version to 100.8.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc2067a076c496ec97004bee26a1d9911d3fa2ef", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/cc2067a076c496ec97004bee26a1d9911d3fa2ef", "committedDate": "2020-07-15T12:29:02Z", "message": "Merge remote-tracking branch 'origin/master' into perform_valve_isolation_trace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d39f4347415968f7efc61e298daa445aabd346a", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/0d39f4347415968f7efc61e298daa445aabd346a", "committedDate": "2020-07-15T12:30:05Z", "message": "update gradle and javafx versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "485d37314d96bce2f2b364107541eebde2335ce7", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/485d37314d96bce2f2b364107541eebde2335ce7", "committedDate": "2020-07-15T12:37:00Z", "message": "update README.metadata.json with script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/ceab44edceab74a8564083b6f10f7f8e54f85fbd", "committedDate": "2020-07-15T12:45:27Z", "message": "update file paths"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NzU3MjQx", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#pullrequestreview-486757241", "createdAt": "2020-09-11T12:23:22Z", "commit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjoyMzoyMlrOHQcpGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzoyMjowMVrOHQnXIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwODUzOQ==", "bodyText": "Check or -> Check for", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487008539", "createdAt": "2020-09-11T12:23:22Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of Perform valve isolation trace](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or \"Include isolated features\". Click \"Trace\" to run a subnetwork-based isolation trace.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA3OTgzMw==", "bodyText": "Consider reordering these steps to match the order in the code? As an example, here's how  the README for trace-a-utility-network starts:\n1. Create a `Map` and add it to a `MapView`.\n2. Using the URL to a utility network's feature service, create `FeatureLayer`s that contain the utility network's features, and add them to the operational layers of the map.\n3. Create and load a `UtilityNetwork` with the same feature service URL and map.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487079833", "createdAt": "2020-09-11T14:23:44Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of Perform valve isolation trace](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or \"Include isolated features\". Click \"Trace\" to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create a `MapView`.\n+2. Create and load a `UtilityNetwork` with a feature service URL.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5MDk4NQ==", "bodyText": "Consider elaborating on how the starting location is dealt with, especially fetching its features and creating the Graphic (mentioned below) from the first of them.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487090985", "createdAt": "2020-09-11T14:39:59Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of Perform valve isolation trace](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or \"Include isolated features\". Click \"Trace\" to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create a `MapView`.\n+2. Create and load a `UtilityNetwork` with a feature service URL.\n+3. Create a `Map` that contains `FeatureLayer`(s) that are part of this utility network.\n+4. Create a default starting location from a given asset type and global id.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5NDMxMA==", "bodyText": "Drop the dot from .isIncludeIsolatedFeatures?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487094310", "createdAt": "2020-09-11T14:44:45Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of Perform valve isolation trace](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or \"Include isolated features\". Click \"Trace\" to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create a `MapView`.\n+2. Create and load a `UtilityNetwork` with a feature service URL.\n+3. Create a `Map` that contains `FeatureLayer`(s) that are part of this utility network.\n+4. Create a default starting location from a given asset type and global id.\n+5. Add a `GraphicsOverlay` with a `Graphic` that represents this starting location.\n+6. Populate the combo box for choosing the filter barrier category from `UtilityNetworkDefinition.getCategories()`.\n+7. Get a default `UtilityTraceConfiguration` from a given tier in a domain network. Set its filter with a new `UtilityTraceFilter`.\n+8. When \"Trace\" is clicked,\n+    - Create a new `UtilityCategoryComparison` with the selected category and `UtilityCategoryComparisonOperator.EXISTS`. \n+    - Assign this condition to `utilityTraceFilter.setBarriers()` from the default configuration from step 7. Update this configuration's `.isIncludeIsolatedFeatures` property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5NTI4MQ==", "bodyText": "Casing traceAsync", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487095281", "createdAt": "2020-09-11T14:46:07Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of Perform valve isolation trace](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or \"Include isolated features\". Click \"Trace\" to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create a `MapView`.\n+2. Create and load a `UtilityNetwork` with a feature service URL.\n+3. Create a `Map` that contains `FeatureLayer`(s) that are part of this utility network.\n+4. Create a default starting location from a given asset type and global id.\n+5. Add a `GraphicsOverlay` with a `Graphic` that represents this starting location.\n+6. Populate the combo box for choosing the filter barrier category from `UtilityNetworkDefinition.getCategories()`.\n+7. Get a default `UtilityTraceConfiguration` from a given tier in a domain network. Set its filter with a new `UtilityTraceFilter`.\n+8. When \"Trace\" is clicked,\n+    - Create a new `UtilityCategoryComparison` with the selected category and `UtilityCategoryComparisonOperator.EXISTS`. \n+    - Assign this condition to `utilityTraceFilter.setBarriers()` from the default configuration from step 7. Update this configuration's `.isIncludeIsolatedFeatures` property.\n+    - Create a `UtilityTraceParameters` with `UtilityTraceType.ISOLATION` and default starting location from step 4. \n+    - Set its utility trace configuration with this configuration and then, run a `utilityNetwork.TraceAsync`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExMjE5NQ==", "bodyText": "What is GetFeaturesForElementsAsync? Should this be something more like:\n\n\nGet the list of UtilityElements from the first trace result.\nFor every FeatureLayer in the map, select all the features for which the layer's FeatureTable.getTableName() matches the NetworkSource.getName() of one of the UtilityElements.\n\n\nAt least that's what the code seems to be doing. However I see there's a method UtilityNetwork.fetchFeaturesForElementsAsync(). Just wondering if we're meant to be using that? (Just asking)", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487112195", "createdAt": "2020-09-11T15:12:37Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of Perform valve isolation trace](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or \"Include isolated features\". Click \"Trace\" to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create a `MapView`.\n+2. Create and load a `UtilityNetwork` with a feature service URL.\n+3. Create a `Map` that contains `FeatureLayer`(s) that are part of this utility network.\n+4. Create a default starting location from a given asset type and global id.\n+5. Add a `GraphicsOverlay` with a `Graphic` that represents this starting location.\n+6. Populate the combo box for choosing the filter barrier category from `UtilityNetworkDefinition.getCategories()`.\n+7. Get a default `UtilityTraceConfiguration` from a given tier in a domain network. Set its filter with a new `UtilityTraceFilter`.\n+8. When \"Trace\" is clicked,\n+    - Create a new `UtilityCategoryComparison` with the selected category and `UtilityCategoryComparisonOperator.EXISTS`. \n+    - Assign this condition to `utilityTraceFilter.setBarriers()` from the default configuration from step 7. Update this configuration's `.isIncludeIsolatedFeatures` property.\n+    - Create a `UtilityTraceParameters` with `UtilityTraceType.ISOLATION` and default starting location from step 4. \n+    - Set its utility trace configuration with this configuration and then, run a `utilityNetwork.TraceAsync`.\n+9. For every `FeatureLayer` in the map, select the features returned by `GetFeaturesForElementsAsync` from the elements matching their `NetworkSource.getName()` with the layer's `FeatureTable.getName()`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExNjQ2OQ==", "bodyText": "Should this be 100.9.0 now? (just asking)", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487116469", "createdAt": "2020-09-11T15:19:36Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/build.gradle", "diffHunk": "@@ -0,0 +1,77 @@\n+plugins {\n+    id 'application'\n+    id 'org.openjfx.javafxplugin' version '0.0.5'\n+}\n+\n+group = 'com.esri.samples'\n+\n+ext {\n+    arcgisVersion = '100.8.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMTM0NA==", "bodyText": "renderers -> a renderer", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487121344", "createdAt": "2020-09-11T15:27:37Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0ODU0OA==", "bodyText": "Space missing here and indentation does awry a couple of lines below", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487148548", "createdAt": "2020-09-11T16:14:24Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL);\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // get a trace configuration from a tier\n+          UtilityNetworkDefinition networkDefinition = utilityNetwork.getDefinition();\n+          UtilityDomainNetwork domainNetwork = networkDefinition.getDomainNetwork(\"Pipeline\");\n+          UtilityTier tier = domainNetwork.getTier(\"Pipe Distribution System\");\n+          traceConfiguration = tier.getTraceConfiguration();\n+\n+          // create a trace filter\n+          traceConfiguration.setFilter(new UtilityTraceFilter());\n+\n+          // get a default starting location\n+          UtilityNetworkSource networkSource = networkDefinition.getNetworkSource(\"Gas Device\");\n+          UtilityAssetGroup assetGroup = networkSource.getAssetGroup(\"Meter\");\n+          UtilityAssetType assetType = assetGroup.getAssetType(\"Customer\");\n+          startingLocation = utilityNetwork.createElement(assetType, UUID.fromString(\"98A06E95-70BE-43E7-91B7-E34C9D3CB9FF\"));\n+\n+          // get the first feature for the starting location, and get its geometry\n+          ListenableFuture<List<ArcGISFeature>> elementFeaturesFuture =\n+                  utilityNetwork.fetchFeaturesForElementsAsync(Collections.singletonList(startingLocation));\n+\n+          elementFeaturesFuture.addDoneListener(() -> {\n+            try {\n+              List<ArcGISFeature> startingLocationFeatures = elementFeaturesFuture.get();\n+\n+              if (!startingLocationFeatures.isEmpty()) {\n+                Geometry startingLocationGeometry = startingLocationFeatures.get(0).getGeometry();\n+\n+                if (startingLocationGeometry instanceof Point){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3ODQwMw==", "bodyText": "Could move this before the if and avoid calling categorySelectionComboBox.getSelectionModel().getSelectedItem() twice", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487178403", "createdAt": "2020-09-11T17:10:43Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL);\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // get a trace configuration from a tier\n+          UtilityNetworkDefinition networkDefinition = utilityNetwork.getDefinition();\n+          UtilityDomainNetwork domainNetwork = networkDefinition.getDomainNetwork(\"Pipeline\");\n+          UtilityTier tier = domainNetwork.getTier(\"Pipe Distribution System\");\n+          traceConfiguration = tier.getTraceConfiguration();\n+\n+          // create a trace filter\n+          traceConfiguration.setFilter(new UtilityTraceFilter());\n+\n+          // get a default starting location\n+          UtilityNetworkSource networkSource = networkDefinition.getNetworkSource(\"Gas Device\");\n+          UtilityAssetGroup assetGroup = networkSource.getAssetGroup(\"Meter\");\n+          UtilityAssetType assetType = assetGroup.getAssetType(\"Customer\");\n+          startingLocation = utilityNetwork.createElement(assetType, UUID.fromString(\"98A06E95-70BE-43E7-91B7-E34C9D3CB9FF\"));\n+\n+          // get the first feature for the starting location, and get its geometry\n+          ListenableFuture<List<ArcGISFeature>> elementFeaturesFuture =\n+                  utilityNetwork.fetchFeaturesForElementsAsync(Collections.singletonList(startingLocation));\n+\n+          elementFeaturesFuture.addDoneListener(() -> {\n+            try {\n+              List<ArcGISFeature> startingLocationFeatures = elementFeaturesFuture.get();\n+\n+              if (!startingLocationFeatures.isEmpty()) {\n+                Geometry startingLocationGeometry = startingLocationFeatures.get(0).getGeometry();\n+\n+                if (startingLocationGeometry instanceof Point){\n+                  Point startingLocationGeometryPoint = (Point) startingLocationGeometry;\n+\n+                // create a graphic for the starting location and add it to the graphics overlay\n+                Graphic startingLocationGraphic = new Graphic(startingLocationGeometry, startingPointSymbol);\n+                startingLocationGraphicsOverlay.getGraphics().add(startingLocationGraphic);\n+\n+                // set the map's viewpoint to the starting location\n+                mapView.setViewpointAsync(new Viewpoint(startingLocationGeometryPoint, 3000));\n+\n+                // build the choice list for categories populated with the 'Name' property of each 'UtilityCategory' in the 'UtilityNetworkDefinition'\n+                categorySelectionComboBox.getItems().addAll(networkDefinition.getCategories());\n+                categorySelectionComboBox.getSelectionModel().select(0);\n+                categorySelectionComboBox.setCellFactory(param -> new UtilityCategoryListCell());\n+                categorySelectionComboBox.setButtonCell(new UtilityCategoryListCell());\n+\n+                // enable the UI\n+                enableUI(true);\n+\n+                // update the status text\n+                statusLabel.setText(\"Utility network loaded. Ready to perform trace...\");\n+                }\n+\n+              } else {\n+                new Alert(Alert.AlertType.ERROR, \"Error getting starting location geometry.\").show();\n+              }\n+            } catch (ExecutionException | InterruptedException e) {\n+              new Alert(Alert.AlertType.ERROR, \"Error getting starting location feature.\").show();\n+            }\n+          });\n+\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Utility Network.\").show();\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Uses the starting location and the selected filter barrier category to perform a valve isolation trace, then\n+   * selects all connected elements found in the trace to highlight them.\n+   */\n+  @FXML\n+  private void handleTraceClick() {\n+    try {\n+      // clear previous selection from the layers\n+      mapView.getMap().getOperationalLayers().forEach(layer -> {\n+        if (layer instanceof FeatureLayer) {\n+          ((FeatureLayer) layer).clearSelection();\n+        }\n+      });\n+\n+      // disable the UI, show the progress indicator and update the status text\n+      enableUI(false);\n+      statusLabel.setText(\"Running isolation trace...\");\n+\n+      // get the selected utility category\n+      if (categorySelectionComboBox.getSelectionModel().getSelectedItem() != null) {\n+        UtilityCategory selectedCategory = categorySelectionComboBox.getSelectionModel().getSelectedItem();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MTY4OQ==", "bodyText": "I find that !enable needs to be passed to all 4 lines above", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487181689", "createdAt": "2020-09-11T17:17:08Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL);\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // get a trace configuration from a tier\n+          UtilityNetworkDefinition networkDefinition = utilityNetwork.getDefinition();\n+          UtilityDomainNetwork domainNetwork = networkDefinition.getDomainNetwork(\"Pipeline\");\n+          UtilityTier tier = domainNetwork.getTier(\"Pipe Distribution System\");\n+          traceConfiguration = tier.getTraceConfiguration();\n+\n+          // create a trace filter\n+          traceConfiguration.setFilter(new UtilityTraceFilter());\n+\n+          // get a default starting location\n+          UtilityNetworkSource networkSource = networkDefinition.getNetworkSource(\"Gas Device\");\n+          UtilityAssetGroup assetGroup = networkSource.getAssetGroup(\"Meter\");\n+          UtilityAssetType assetType = assetGroup.getAssetType(\"Customer\");\n+          startingLocation = utilityNetwork.createElement(assetType, UUID.fromString(\"98A06E95-70BE-43E7-91B7-E34C9D3CB9FF\"));\n+\n+          // get the first feature for the starting location, and get its geometry\n+          ListenableFuture<List<ArcGISFeature>> elementFeaturesFuture =\n+                  utilityNetwork.fetchFeaturesForElementsAsync(Collections.singletonList(startingLocation));\n+\n+          elementFeaturesFuture.addDoneListener(() -> {\n+            try {\n+              List<ArcGISFeature> startingLocationFeatures = elementFeaturesFuture.get();\n+\n+              if (!startingLocationFeatures.isEmpty()) {\n+                Geometry startingLocationGeometry = startingLocationFeatures.get(0).getGeometry();\n+\n+                if (startingLocationGeometry instanceof Point){\n+                  Point startingLocationGeometryPoint = (Point) startingLocationGeometry;\n+\n+                // create a graphic for the starting location and add it to the graphics overlay\n+                Graphic startingLocationGraphic = new Graphic(startingLocationGeometry, startingPointSymbol);\n+                startingLocationGraphicsOverlay.getGraphics().add(startingLocationGraphic);\n+\n+                // set the map's viewpoint to the starting location\n+                mapView.setViewpointAsync(new Viewpoint(startingLocationGeometryPoint, 3000));\n+\n+                // build the choice list for categories populated with the 'Name' property of each 'UtilityCategory' in the 'UtilityNetworkDefinition'\n+                categorySelectionComboBox.getItems().addAll(networkDefinition.getCategories());\n+                categorySelectionComboBox.getSelectionModel().select(0);\n+                categorySelectionComboBox.setCellFactory(param -> new UtilityCategoryListCell());\n+                categorySelectionComboBox.setButtonCell(new UtilityCategoryListCell());\n+\n+                // enable the UI\n+                enableUI(true);\n+\n+                // update the status text\n+                statusLabel.setText(\"Utility network loaded. Ready to perform trace...\");\n+                }\n+\n+              } else {\n+                new Alert(Alert.AlertType.ERROR, \"Error getting starting location geometry.\").show();\n+              }\n+            } catch (ExecutionException | InterruptedException e) {\n+              new Alert(Alert.AlertType.ERROR, \"Error getting starting location feature.\").show();\n+            }\n+          });\n+\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Utility Network.\").show();\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Uses the starting location and the selected filter barrier category to perform a valve isolation trace, then\n+   * selects all connected elements found in the trace to highlight them.\n+   */\n+  @FXML\n+  private void handleTraceClick() {\n+    try {\n+      // clear previous selection from the layers\n+      mapView.getMap().getOperationalLayers().forEach(layer -> {\n+        if (layer instanceof FeatureLayer) {\n+          ((FeatureLayer) layer).clearSelection();\n+        }\n+      });\n+\n+      // disable the UI, show the progress indicator and update the status text\n+      enableUI(false);\n+      statusLabel.setText(\"Running isolation trace...\");\n+\n+      // get the selected utility category\n+      if (categorySelectionComboBox.getSelectionModel().getSelectedItem() != null) {\n+        UtilityCategory selectedCategory = categorySelectionComboBox.getSelectionModel().getSelectedItem();\n+        // create a category comparison for the trace\n+        // NOTE: UtilityNetworkAttributeComparison or UtilityCategoryComparison with Operator.DoesNotExists\n+        // can also be used. These conditions can be joined with either UtilityTraceOrCondition or UtilityTraceAndCondition.\n+        UtilityCategoryComparison categoryComparison = new UtilityCategoryComparison(selectedCategory, UtilityCategoryComparisonOperator.EXISTS);\n+        // set the category comparison to the barriers of the configuration's trace filter\n+        traceConfiguration.getFilter().setBarriers(categoryComparison);\n+      }\n+\n+      // set the configuration to include or leave out isolated features\n+      traceConfiguration.setIncludeIsolatedFeatures(includeIsolatedFeaturesCheckbox.isSelected());\n+\n+      // build parameters for the isolation trace\n+      UtilityTraceParameters traceParameters = new UtilityTraceParameters(UtilityTraceType.ISOLATION, Collections.singletonList(startingLocation));\n+      traceParameters.setTraceConfiguration(traceConfiguration);\n+\n+      // run the trace and get the result\n+      ListenableFuture<List<UtilityTraceResult>> utilityTraceResultsFuture = utilityNetwork.traceAsync(traceParameters);\n+      utilityTraceResultsFuture.addDoneListener(() -> {\n+        try {\n+          List<UtilityTraceResult> utilityTraceResults = utilityTraceResultsFuture.get();\n+\n+          if (utilityTraceResults.get(0) instanceof UtilityElementTraceResult) {\n+            UtilityElementTraceResult utilityElementTraceResult = (UtilityElementTraceResult) utilityTraceResults.get(0);\n+\n+            if (!utilityElementTraceResult.getElements().isEmpty()) {\n+\n+              // iterate through the map's feature layers\n+              mapView.getMap().getOperationalLayers().forEach(layer -> {\n+                if (layer instanceof FeatureLayer) {\n+\n+                  // create query parameters to find features whose network source name matches the layer's feature\n+                  // table name\n+                  QueryParameters queryParameters = new QueryParameters();\n+                  utilityElementTraceResult.getElements().forEach(utilityElement -> {\n+\n+                    String networkSourceName = utilityElement.getNetworkSource().getName();\n+                    String featureTableName = ((FeatureLayer) layer).getFeatureTable().getTableName();\n+\n+                    if (networkSourceName.equals(featureTableName)) {\n+                      queryParameters.getObjectIds().add(utilityElement.getObjectId());\n+                    }\n+                  });\n+\n+                  // select features that match the query\n+                  ListenableFuture<FeatureQueryResult> featureQueryResultListenableFuture =\n+                          ((FeatureLayer) layer).selectFeaturesAsync(queryParameters, FeatureLayer.SelectionMode.NEW);\n+\n+                  // wait for the selection to finish\n+                  featureQueryResultListenableFuture.addDoneListener(() -> {\n+                    // update the status text, enable the buttons and hide the progress indicator\n+                    statusLabel.setText(\"Isolation trace completed.\");\n+                    enableUI(true);\n+                  });\n+                }\n+              });\n+\n+            } else {\n+              statusLabel.setText(\"Isolation trace completed.\");\n+              new Alert(Alert.AlertType.INFORMATION, \"Isolation trace returned no elements.\").show();\n+              enableUI(true);\n+            }\n+\n+          } else {\n+            statusLabel.setText(\"Trace failed.\");\n+            new Alert(Alert.AlertType.ERROR, \"Isolation trace result is not a utility element.\").show();\n+            enableUI(true);\n+          }\n+\n+        } catch (Exception e) {\n+          statusLabel.setText(\"Trace failed.\");\n+          new Alert(Alert.AlertType.ERROR, \"Error getting isolation trace result.\").show();\n+          enableUI(true);\n+        }\n+      });\n+\n+    } catch (Exception e) {\n+      new Alert(Alert.AlertType.ERROR, \"Error performing isolation trace.\").show();\n+      enableUI(true);\n+    }\n+  }\n+\n+\n+  /**\n+   * Enables/disables the UI and hides/shows the progress indicator.\n+   *\n+   * @param enable whether to enable or disable the UI\n+   */\n+  private void enableUI(boolean enable) {\n+    progressIndicator.setVisible(!enable);\n+    traceButton.setDisable(enable);\n+    categorySelectionComboBox.setDisable(enable);\n+    includeIsolatedFeaturesCheckbox.setDisable(enable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MTk4NA==", "bodyText": "Copyright missing", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487181984", "createdAt": "2020-09-11T17:17:45Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceLauncher.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.esri.samples.perform_valve_isolation_trace;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MzE4Mw==", "bodyText": "Delete blank lines", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487183183", "createdAt": "2020-09-11T17:20:08Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/UtilityCategoryListCell.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import javafx.scene.control.ListCell;\n+\n+/**\n+ * Shows the name of the UtilityCategory in the selection combobox.\n+ */\n+public class UtilityCategoryListCell extends ListCell<UtilityCategory> {\n+    @Override\n+    protected void updateItem(UtilityCategory item, boolean empty) {\n+        super.updateItem(item, empty);\n+        if (empty) {\n+            setText(null);\n+        } else {\n+            setText(item.getName());\n+        }\n+    }\n+}\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4NDE2MA==", "bodyText": "I find style.css is missing. It works with:\nstylesheets=\"/perform_valve_isolation_trace/style.css\"", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487184160", "createdAt": "2020-09-11T17:22:01Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/src/main/resources/perform_valve_isolation_trace/main.fxml", "diffHunk": "@@ -0,0 +1,41 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Esri.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+  ~ use this file except in compliance with the License. You may obtain a copy of\n+  ~ the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+  ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+  ~ License for the specific language governing permissions and limitations under\n+  ~ the License.\n+  -->\n+\n+<?import com.esri.arcgisruntime.mapping.view.MapView?>\n+<?import javafx.geometry.Insets?>\n+<?import javafx.scene.control.*?>\n+<?import javafx.scene.layout.*?>\n+<?import javafx.scene.paint.Color?>\n+<StackPane\n+        fx:controller=\"com.esri.samples.perform_valve_isolation_trace.PerformValveIsolationTraceController\"\n+        xmlns:fx=\"http://javafx.com/fxml\" stylesheets=\"style.css\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e7ea9835f60dfa9748928ed8a2ac1b6f7eeb186", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/3e7ea9835f60dfa9748928ed8a2ac1b6f7eeb186", "committedDate": "2020-09-16T13:08:32Z", "message": "Merge remote-tracking branch 'origin/master' into perform_valve_isolation_trace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84757e619317e5848a163f45dbbda425188dc848", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/84757e619317e5848a163f45dbbda425188dc848", "committedDate": "2020-09-16T13:31:08Z", "message": "update with review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "242773a8c608aae2e9617541234bdc2582811f7a", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/242773a8c608aae2e9617541234bdc2582811f7a", "committedDate": "2020-09-16T14:39:13Z", "message": "update README.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNTQzMjA5", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#pullrequestreview-491543209", "createdAt": "2020-09-18T14:57:12Z", "commit": {"oid": "242773a8c608aae2e9617541234bdc2582811f7a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo1NzoxMlrOHUQuXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTo1MTozNVrOHUSucQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwNzU4Mg==", "bodyText": "I'd say definitely yes. What difference is there between this java file and the other java files?", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r491007582", "createdAt": "2020-09-18T14:57:12Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceLauncher.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.esri.samples.perform_valve_isolation_trace;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MTk4NA=="}, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzMjczNw==", "bodyText": "@JonLavi I've found the common design now and compared it with this doc, and I see how you've endeavoured to retain the wording of the design. My personal preference would be to make this doc describe what the Java code does, as an aid to people reading the code for the first time. However, I leave it to the samples team to decide the best approach.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r491032737", "createdAt": "2020-09-18T15:38:50Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of Perform valve isolation trace](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or \"Include isolated features\". Click \"Trace\" to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create a `MapView`.\n+2. Create and load a `UtilityNetwork` with a feature service URL.\n+3. Create a `Map` that contains `FeatureLayer`(s) that are part of this utility network.\n+4. Create a default starting location from a given asset type and global id.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5MDk4NQ=="}, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzMzUxOA==", "bodyText": "This is another place, like below, where this list could be modified to match the Java code rather than the common design doc.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r491033518", "createdAt": "2020-09-18T15:40:10Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of Perform valve isolation trace](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or \"Include isolated features\". Click \"Trace\" to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create a `MapView`.\n+2. Create and load a `UtilityNetwork` with a feature service URL.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA3OTgzMw=="}, "originalCommit": {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0MDM2OQ==", "bodyText": "What is GetFeaturesForElementsAsync? Should this be something more like:\n\n\nGet the list of UtilityElements from the first trace result.\nFor every FeatureLayer in the map, select all the features for which the layer's FeatureTable.getTableName() matches the NetworkSource.getName() of one of the UtilityElements.\n\n\nAt least that's what the code seems to be doing. However I see there's a method UtilityNetwork.fetchFeaturesForElementsAsync(). Just wondering if we're meant to be using that? (Just asking)\n\n\n\nGood spot - the readme wrongly states GetFeaturesForElementsAsync. The correct method name is fetchFeaturesForElementsAsync (line 134), so I'll just update that reference.\n\nActually I hadn't noticed that the code calls fetchFeaturesForElementsAsync, partly because that's done quite far removed from the code that this step describes. This is another place where I think it'd help for this doc to match the Java code rather than the common design doc.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r491040369", "createdAt": "2020-09-18T15:51:35Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of Perform valve isolation trace](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or uncheck 'Include Isolated Features'. Click 'Trace' to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create a `MapView`.\n+2. Create and load a `UtilityNetwork` with a feature service URL.\n+3. Create a `Map` that contains `FeatureLayer`(s) that are part of this utility network.\n+4. Create a default starting location from a given asset type and global id.\n+5. Add a `GraphicsOverlay` with a `Graphic` that represents this starting location.\n+6. Populate the combo box for choosing the filter barrier category from `UtilityNetworkDefinition.getCategories()`.\n+7. Get a default `UtilityTraceConfiguration` from a given tier in a domain network. Set its filter with a new `UtilityTraceFilter`.\n+8. When \"Trace\" is clicked,\n+    - Create a new `UtilityCategoryComparison` with the selected category and `UtilityCategoryComparisonOperator.EXISTS`. \n+    - Assign this condition to `utilityTraceFilter.setBarriers()` from the default configuration from step 7. Update this configuration's `utilityTraceConfiguration.isIncludeIsolatedFeatures()` property.\n+    - Create a `UtilityTraceParameters` with `UtilityTraceType.ISOLATION` and default starting location from step 4. \n+    - Set its utility trace configuration with this configuration and then, run a `utilityNetwork.traceAsync()`.\n+9. For every `FeatureLayer` in the map, select the features returned by `utilityNetwork.fetchFeaturesForElementsAsync()` from the elements matching their `NetworkSource.getName()` with the layer's `FeatureTable.getName()`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "242773a8c608aae2e9617541234bdc2582811f7a"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c16290a75579e9d4c806347f4c5a6a1ead9a30fc", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/c16290a75579e9d4c806347f4c5a6a1ead9a30fc", "committedDate": "2020-09-22T12:27:51Z", "message": "update readme with review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNDc3NDUx", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#pullrequestreview-493477451", "createdAt": "2020-09-22T13:47:13Z", "commit": {"oid": "c16290a75579e9d4c806347f4c5a6a1ead9a30fc"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo0NzoxM1rOHV66oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo1Mjo1NVrOHV7MRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0NzQyNA==", "bodyText": "The code for step 8 is actually the first thing in the DoneLoading listener, so step 8 seems to belong immediately after step 3.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r492747424", "createdAt": "2020-09-22T13:47:13Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,55 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of Perform valve isolation trace](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or uncheck 'Include Isolated Features'. Click 'Trace' to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create an `ArcGISMap` and add it to a `MapView`.\n+2. Using the URL to a utility network's feature service, create `FeatureLayer`s that contain the utility network's features, and add them to the operational layers of the map.\n+3. Create and load a `UtilityNetwork` with the same feature service URL and map.\n+4. Create a `UtilityElement` to represent a default starting location from the `UtilityNetwork`, using a given asset type and global id.\n+5. Add a `GraphicsOverlay` with a `Graphic` that represents this starting location.\n+6. Use `utilityNetwork.fetchFeaturesForElementsAsync()` to obtain the geometry of this element, and place the created graphic at that geometry.\n+7. Populate the combo box for choosing the filter barrier category from `UtilityNetworkDefinition.getCategories()`.\n+8. Get a default `UtilityTraceConfiguration` from a given tier in a domain network. Set its filter with a new `UtilityTraceFilter`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c16290a75579e9d4c806347f4c5a6a1ead9a30fc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1MTk0Mg==", "bodyText": "I'd swap steps 5 and 6 over, since the call to utilityNetwork.fetchFeaturesForElementsAsync comes immediately after creating the UtilityElement representing the starting location.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r492751942", "createdAt": "2020-09-22T13:52:55Z", "author": {"login": "alan-edi"}, "path": "utility_network/perform-valve-isolation-trace/README.md", "diffHunk": "@@ -0,0 +1,55 @@\n+# Perform valve isolation trace\n+\n+Run a filtered trace to locate operable features that will isolate an area from the flow of network resources.\n+\n+![Image of Perform valve isolation trace](PerformValveIsolationTrace.png)\n+\n+## Use case\n+\n+Determine the set of operable features required to stop a network's resource, effectively isolating an area of the network. For example, you can choose to return only accessible and operable valves: ones that are not paved over or rusted shut.\n+\n+## How to use the sample\n+\n+Create and set the configuration's filter barriers by selecting a category. Check or uncheck 'Include Isolated Features'. Click 'Trace' to run a subnetwork-based isolation trace.\n+\n+## How it works\n+\n+1. Create an `ArcGISMap` and add it to a `MapView`.\n+2. Using the URL to a utility network's feature service, create `FeatureLayer`s that contain the utility network's features, and add them to the operational layers of the map.\n+3. Create and load a `UtilityNetwork` with the same feature service URL and map.\n+4. Create a `UtilityElement` to represent a default starting location from the `UtilityNetwork`, using a given asset type and global id.\n+5. Add a `GraphicsOverlay` with a `Graphic` that represents this starting location.\n+6. Use `utilityNetwork.fetchFeaturesForElementsAsync()` to obtain the geometry of this element, and place the created graphic at that geometry.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c16290a75579e9d4c806347f4c5a6a1ead9a30fc"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48b8bd72aa8f834605a9959ba59c2ead27077e54", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/48b8bd72aa8f834605a9959ba59c2ead27077e54", "committedDate": "2020-09-23T08:16:15Z", "message": "update 'How it works'"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3529, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}