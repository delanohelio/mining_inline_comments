{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MTA1MDc5", "number": 454, "title": "Update readmes to match common design (Feature Layers category) 4/4", "bodyText": "", "createdAt": "2020-03-16T09:38:47Z", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454", "merged": true, "mergeCommit": {"oid": "5bda75d4d459050241cc5161e4febd8949095260"}, "closed": true, "closedAt": "2020-04-24T10:43:23Z", "author": {"login": "JonLavi"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOKz1CgH2gAyMzg5MTA1MDc5OmRjZTljMzY2NDMwNTBmY2VlZjIxODc4Yjk2OTY4MGFhYzdiNDA1ZDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcavHZkAFqTM5OTgzNTQ4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dce9c36643050fceef21878b969680aac7b405d0", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/dce9c36643050fceef21878b969680aac7b405d0", "committedDate": "2020-03-16T09:36:41Z", "message": "update readmes to match common design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ed001aeceae1949e3ee99714c51d2dd251d99e8", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/7ed001aeceae1949e3ee99714c51d2dd251d99e8", "committedDate": "2020-03-18T15:39:32Z", "message": "Update 'Relevant API'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08c1f16116ee7b08fd4be4137170259fcb710b02", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/08c1f16116ee7b08fd4be4137170259fcb710b02", "committedDate": "2020-03-18T15:40:28Z", "message": "pdate 'Relevant API'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "277118d780fbd85455ec01e5797c8fda32b82877", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/277118d780fbd85455ec01e5797c8fda32b82877", "committedDate": "2020-03-18T15:41:39Z", "message": "Update 'Relevant API'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/16a388131763183bb965a95a5fb5ef671280eab4", "committedDate": "2020-03-18T15:42:20Z", "message": "Update 'Relevant API'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDI4MDcy", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#pullrequestreview-378428072", "createdAt": "2020-03-20T12:08:27Z", "commit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjowODoyN1rOF5RKwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzoyODoxNlrOF5TpDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5NDQzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Related features are useful for managing relational information, like what you would store in a relational database management system (RDBMS). You can define relationship between records as one-to-one, one-to-many, or many-to-one. For example, you could model inspections and facilities as a many-to-one relationship. Then, for any facility feature, you could list related inspection features.\n          \n          \n            \n            Related features are useful for managing relational information, like what you would store in a relational database management system (RDBMS). You can define relationships between records as one-to-one, one-to-many, or many-to-one. For example, you could model inspections and facilities as a many-to-one relationship. Then, for any facility feature, you could list related inspection features.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r395594434", "createdAt": "2020-03-20T12:08:27Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/list-related-features/README.md", "diffHunk": "@@ -1,37 +1,30 @@\n-# List Related Features\n+# List related features\n \n-Find features related to the selected feature.\n+List features related to the selected feature.\n \n-![](ListRelatedFeatures.png)\n+![Image of list related features](ListRelatedFeatures.png)\n+\n+## Use case\n+\n+Related features are useful for managing relational information, like what you would store in a relational database management system (RDBMS). You can define relationship between records as one-to-one, one-to-many, or many-to-one. For example, you could model inspections and facilities as a many-to-one relationship. Then, for any facility feature, you could list related inspection features.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5NTIyMg==", "bodyText": "update to java guide\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `ServiceFeatureTable` supports three request modes, which define how features are requested from the service and stored in the local table. The feature request modes have different performance characteristics. Use **On interaction cache** in scenarios with large amounts of infrequently edited data. See [Table performance concepts](https://developers.arcgis.com/net/latest/wpf/guide/layers.htm#ESRI_SECTION1_40F10593308A4718971C9A8F5FB9EC7D) to learn more.\n          \n          \n            \n            `ServiceFeatureTable` supports three request modes, which define how features are requested from the service and stored in the local table. The feature request modes have different performance characteristics. Use **On interaction cache** in scenarios with large amounts of infrequently edited data. See [Table performance concepts](https://developers.arcgis.com/java/latest/guide/layers.htm#ESRI_SECTION1_40F10593308A4718971C9A8F5FB9EC7D) to learn more.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r395595222", "createdAt": "2020-03-20T12:10:02Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/service-feature-table-cache/README.md", "diffHunk": "@@ -1,22 +1,36 @@\n-# Service Feature Table (Cache)\n+# Service feature table (cache)\n \n-Cache features on the client when the user interacts.\n+Display a feature layer from a service using the **on interaction cache** feature request mode.\n \n-On-interaction-cache mode will fetch features within the current extent when needed (performing a pan or zoom) from the server and caches those features within a table on the client's side. Any queries performed on features within that table will be performed locally, otherwise they will be requested from the server.\n+![Image of service feature table on interaction cache](ServiceFeatureTableCache.png)\n \n-![](ServiceFeatureTableCache.png)\n+## Use case\n \n-## How it works\n+`ServiceFeatureTable` supports three request modes, which define how features are requested from the service and stored in the local table. The feature request modes have different performance characteristics. Use **On interaction cache** in scenarios with large amounts of infrequently edited data. See [Table performance concepts](https://developers.arcgis.com/net/latest/wpf/guide/layers.htm#ESRI_SECTION1_40F10593308A4718971C9A8F5FB9EC7D) to learn more.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5NTk3NQ==", "bodyText": "this isn't a class of it's own so we should report it as:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * FeatureRequestMode\n          \n          \n            \n            * ServiceFeatureTable.FeatureRequestMode", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r395595975", "createdAt": "2020-03-20T12:11:42Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/service-feature-table-cache/README.md", "diffHunk": "@@ -1,22 +1,36 @@\n-# Service Feature Table (Cache)\n+# Service feature table (cache)\n \n-Cache features on the client when the user interacts.\n+Display a feature layer from a service using the **on interaction cache** feature request mode.\n \n-On-interaction-cache mode will fetch features within the current extent when needed (performing a pan or zoom) from the server and caches those features within a table on the client's side. Any queries performed on features within that table will be performed locally, otherwise they will be requested from the server.\n+![Image of service feature table on interaction cache](ServiceFeatureTableCache.png)\n \n-![](ServiceFeatureTableCache.png)\n+## Use case\n \n-## How it works\n+`ServiceFeatureTable` supports three request modes, which define how features are requested from the service and stored in the local table. The feature request modes have different performance characteristics. Use **On interaction cache** in scenarios with large amounts of infrequently edited data. See [Table performance concepts](https://developers.arcgis.com/net/latest/wpf/guide/layers.htm#ESRI_SECTION1_40F10593308A4718971C9A8F5FB9EC7D) to learn more.\n+\n+## How to use the sample\n \n-How to set `FeatureRequestMode.ON_INTERACTION_CACHE` mode:\n+Run the sample and pan and zoom around the map. With each interaction, features will be requested and stored in a local cache. Each subsequent interaction will display features from the cache and only request new features from the service.\n \n-1. Create a `ServiceFeatureTable` from a URL.\n-2. Set request mode of table, `ServiceFeatureTable.setFeatureRequestMode(FeatureRequestMode.ON_INTERACTION_CACHE)`.\n+## How it works\n+\n+1. Set the `ServiceFeatureTable.FeatureRequestMode` property of the service feature table to `ON_INTERACTION_CACHE` before the table is loaded.\n+2. Add the table to the map using a `FeatureLayer`; features will be requested for the visible extent as the user pans and zooms.\n \n ## Relevant API\n \n-* ArcGISMap\n * FeatureLayer\n-* MapView\n+* FeatureRequestMode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5Njc5Mg==", "bodyText": "another sample where our data used differs to the design. As with other ones, we can either update the sample here or refer to the actual data used (this is what we used for Android):\n\nThe sample opens with an initial visible extent centered over pool permit statuses in California.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r395596792", "createdAt": "2020-03-20T12:13:32Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/service-feature-table-cache/README.md", "diffHunk": "@@ -1,22 +1,36 @@\n-# Service Feature Table (Cache)\n+# Service feature table (cache)\n \n-Cache features on the client when the user interacts.\n+Display a feature layer from a service using the **on interaction cache** feature request mode.\n \n-On-interaction-cache mode will fetch features within the current extent when needed (performing a pan or zoom) from the server and caches those features within a table on the client's side. Any queries performed on features within that table will be performed locally, otherwise they will be requested from the server.\n+![Image of service feature table on interaction cache](ServiceFeatureTableCache.png)\n \n-![](ServiceFeatureTableCache.png)\n+## Use case\n \n-## How it works\n+`ServiceFeatureTable` supports three request modes, which define how features are requested from the service and stored in the local table. The feature request modes have different performance characteristics. Use **On interaction cache** in scenarios with large amounts of infrequently edited data. See [Table performance concepts](https://developers.arcgis.com/net/latest/wpf/guide/layers.htm#ESRI_SECTION1_40F10593308A4718971C9A8F5FB9EC7D) to learn more.\n+\n+## How to use the sample\n \n-How to set `FeatureRequestMode.ON_INTERACTION_CACHE` mode:\n+Run the sample and pan and zoom around the map. With each interaction, features will be requested and stored in a local cache. Each subsequent interaction will display features from the cache and only request new features from the service.\n \n-1. Create a `ServiceFeatureTable` from a URL.\n-2. Set request mode of table, `ServiceFeatureTable.setFeatureRequestMode(FeatureRequestMode.ON_INTERACTION_CACHE)`.\n+## How it works\n+\n+1. Set the `ServiceFeatureTable.FeatureRequestMode` property of the service feature table to `ON_INTERACTION_CACHE` before the table is loaded.\n+2. Add the table to the map using a `FeatureLayer`; features will be requested for the visible extent as the user pans and zooms.\n \n ## Relevant API\n \n-* ArcGISMap\n * FeatureLayer\n-* MapView\n+* FeatureRequestMode\n * ServiceFeatureTable\n-* ServiceFeatureTable.FeatureRequestMode\n+\n+## About the data\n+\n+The U.S. National Bridge Inventory describes 600,000 bridges in the United States. The sample uses [US Bridges](https://arcgisruntime.maps.arcgis.com/home/item.html?id=250b103a722c4e1ea71e562eac61be1b), a modified copy of the U.S. National Bridge Inventory hosted on ArcGIS Online. The sample opens with an initial visible extent centered over Bridgeport, CT.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5ODI0OA==", "bodyText": "Another mismatched data one! The current data is:\n\nThe sample opens with a tree maintenance feature layer centered over San Francisco.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r395598248", "createdAt": "2020-03-20T12:16:56Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/service-feature-table-manual-cache/README.md", "diffHunk": "@@ -1,26 +1,37 @@\n-# Service Feature Table (Manual Cache)\n+# Service feature table (manual cache)\n \n-Request features on demand.\n+Display a feature layer from a service using the **manual cache** feature request mode.\n \n-![](ServiceFeatureTableManualCache.png)\n+![Image of service feature table manual cache](ServiceFeatureTableManualCache.png)\n \n-## How to use the sample\n+## Use case\n \n-Click on the Request Cache button to manually request Features. Returned label displays how many features were returned by the service.\n+`ServiceFeatureTable` supports three request modes, which define how features are requested from the service and stored in the local table. The feature request modes have different performance characteristics. Use **manual cache** in scenarios where you want to explicitly control requests for features. See [Table performance concepts](https://developers.arcgis.com/net/latest/wpf/guide/layers.htm#ESRI_SECTION1_40F10593308A4718971C9A8F5FB9EC7D) to learn more.\n \n-Note: Maximum of Features returned is set to 1000.\n+## How to use the sample\n \n-## How it works\n+Run the sample and pan and zoom around the map. No features will be requested and displayed automatically. Press the Populate button, and features will display.\n \n-How to set `FeatureRequestMode.MANUAL_CACHE` mode:\n+## How it works\n \n-1. Create a `ServiceFeatureTable` from a URL.\n-2. Set request mode of table, `ServiceFeatureTable.setFeatureRequestMode(FeatureRequestMode.MANUAL_CACHE)`.\n+1. Set the `ServiceFeatureTable.FeatureRequestMode` property of the service feature table to `MANUAL_CACHE` before the table is loaded.\n+2. Load the table.\n+3. Call `populateFromServiceAsync()` on the table to request features.\n \n ## Relevant API\n \n-* ArcGISMap\n * FeatureLayer\n-* MapView\n+* FeatureRequestMode\n * ServiceFeatureTable\n-* ServiceFeatureTable.FeatureRequestMode\n+\n+## About the data\n+\n+The U.S. National Bridge Inventory describes 600,000 bridges in the United States. The sample uses [US Bridges](https://arcgisruntime.maps.arcgis.com/home/item.html?id=250b103a722c4e1ea71e562eac61be1b), a modified copy of the U.S. National Bridge Inventory hosted on ArcGIS Online. The sample opens with an initial visible extent centered over Bridgeport, CT.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5OTk2MQ==", "bodyText": "the button on our sample is to \"Request Cache\" and we also list how many features are returned", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r395599961", "createdAt": "2020-03-20T12:20:44Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/service-feature-table-manual-cache/README.md", "diffHunk": "@@ -1,26 +1,37 @@\n-# Service Feature Table (Manual Cache)\n+# Service feature table (manual cache)\n \n-Request features on demand.\n+Display a feature layer from a service using the **manual cache** feature request mode.\n \n-![](ServiceFeatureTableManualCache.png)\n+![Image of service feature table manual cache](ServiceFeatureTableManualCache.png)\n \n-## How to use the sample\n+## Use case\n \n-Click on the Request Cache button to manually request Features. Returned label displays how many features were returned by the service.\n+`ServiceFeatureTable` supports three request modes, which define how features are requested from the service and stored in the local table. The feature request modes have different performance characteristics. Use **manual cache** in scenarios where you want to explicitly control requests for features. See [Table performance concepts](https://developers.arcgis.com/net/latest/wpf/guide/layers.htm#ESRI_SECTION1_40F10593308A4718971C9A8F5FB9EC7D) to learn more.\n \n-Note: Maximum of Features returned is set to 1000.\n+## How to use the sample\n \n-## How it works\n+Run the sample and pan and zoom around the map. No features will be requested and displayed automatically. Press the Populate button, and features will display.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMDExNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * FeatureRequestMode\n          \n          \n            \n            * ServiceFeatureTable.FeatureRequestMode", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r395600114", "createdAt": "2020-03-20T12:21:03Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/service-feature-table-manual-cache/README.md", "diffHunk": "@@ -1,26 +1,37 @@\n-# Service Feature Table (Manual Cache)\n+# Service feature table (manual cache)\n \n-Request features on demand.\n+Display a feature layer from a service using the **manual cache** feature request mode.\n \n-![](ServiceFeatureTableManualCache.png)\n+![Image of service feature table manual cache](ServiceFeatureTableManualCache.png)\n \n-## How to use the sample\n+## Use case\n \n-Click on the Request Cache button to manually request Features. Returned label displays how many features were returned by the service.\n+`ServiceFeatureTable` supports three request modes, which define how features are requested from the service and stored in the local table. The feature request modes have different performance characteristics. Use **manual cache** in scenarios where you want to explicitly control requests for features. See [Table performance concepts](https://developers.arcgis.com/net/latest/wpf/guide/layers.htm#ESRI_SECTION1_40F10593308A4718971C9A8F5FB9EC7D) to learn more.\n \n-Note: Maximum of Features returned is set to 1000.\n+## How to use the sample\n \n-## How it works\n+Run the sample and pan and zoom around the map. No features will be requested and displayed automatically. Press the Populate button, and features will display.\n \n-How to set `FeatureRequestMode.MANUAL_CACHE` mode:\n+## How it works\n \n-1. Create a `ServiceFeatureTable` from a URL.\n-2. Set request mode of table, `ServiceFeatureTable.setFeatureRequestMode(FeatureRequestMode.MANUAL_CACHE)`.\n+1. Set the `ServiceFeatureTable.FeatureRequestMode` property of the service feature table to `MANUAL_CACHE` before the table is loaded.\n+2. Load the table.\n+3. Call `populateFromServiceAsync()` on the table to request features.\n \n ## Relevant API\n \n-* ArcGISMap\n * FeatureLayer\n-* MapView\n+* FeatureRequestMode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyNzAwMQ==", "bodyText": "this needs to be updated for Java\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `ServiceFeatureTable` supports three request modes, which define how features are requested from the service and stored in the local table. The feature request modes have different performance characteristics. Use **no cache** in scenarios where you always want the freshest data. See [Table performance concepts](https://developers.arcgis.com/net/latest/wpf/guide/layers.htm#ESRI_SECTION1_40F10593308A4718971C9A8F5FB9EC7D) in the *ArcGIS Runtime SDK for .NET* guide to learn more.\n          \n          \n            \n            `ServiceFeatureTable` supports three request modes, which define how features are requested from the service and stored in the local table. The feature request modes have different performance characteristics. Use **no cache** in scenarios where you always want the freshest data. See [Table performance concepts](https://developers.arcgis.com/java/latest/guide/layers.htm#ESRI_SECTION1_40F10593308A4718971C9A8F5FB9EC7DD) in the *ArcGIS Runtime SDK for Java* guide to learn more.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r395627001", "createdAt": "2020-03-20T13:14:28Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/service-feature-table-no-cache/README.md", "diffHunk": "@@ -1,22 +1,38 @@\n-# Service Feature Table (No Cache)\n+# Service feature table (no cache)\n \n-Show features without caching.\n+Display a feature layer from a service using the **no cache** feature request mode.\n \n-On-interaction-no-cache mode will always fetch Features from the server and doesn't cache any Features on the client's side. This meaning that Features will be fetched whenever the ArcGISMap pans, zooms, selects, or queries.\n+![Image of service feature table no cache](ServiceFeatureTableNoCache.png)\n \n-![](ServiceFeatureTableNoCache.png)\n+## Use case\n \n-## How it works\n+`ServiceFeatureTable` supports three request modes, which define how features are requested from the service and stored in the local table. The feature request modes have different performance characteristics. Use **no cache** in scenarios where you always want the freshest data. See [Table performance concepts](https://developers.arcgis.com/net/latest/wpf/guide/layers.htm#ESRI_SECTION1_40F10593308A4718971C9A8F5FB9EC7D) in the *ArcGIS Runtime SDK for .NET* guide to learn more.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyNzMzMg==", "bodyText": "same as samples above, for Android we didn't change the data (open issue though) and used the following description:\n\nThe sample opens with an initial visible extent centered over pool permit statuses in California.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r395627332", "createdAt": "2020-03-20T13:15:04Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/service-feature-table-no-cache/README.md", "diffHunk": "@@ -1,22 +1,38 @@\n-# Service Feature Table (No Cache)\n+# Service feature table (no cache)\n \n-Show features without caching.\n+Display a feature layer from a service using the **no cache** feature request mode.\n \n-On-interaction-no-cache mode will always fetch Features from the server and doesn't cache any Features on the client's side. This meaning that Features will be fetched whenever the ArcGISMap pans, zooms, selects, or queries.\n+![Image of service feature table no cache](ServiceFeatureTableNoCache.png)\n \n-![](ServiceFeatureTableNoCache.png)\n+## Use case\n \n-## How it works\n+`ServiceFeatureTable` supports three request modes, which define how features are requested from the service and stored in the local table. The feature request modes have different performance characteristics. Use **no cache** in scenarios where you always want the freshest data. See [Table performance concepts](https://developers.arcgis.com/net/latest/wpf/guide/layers.htm#ESRI_SECTION1_40F10593308A4718971C9A8F5FB9EC7D) in the *ArcGIS Runtime SDK for .NET* guide to learn more.\n+\n+## How to use the sample\n+\n+Run the sample and pan and zoom around the map. With each interaction, new features will be requested from the service and displayed on the map.\n \n-How to set `FeatureRequestMode.ON_INTERACTION_NO_CAHCE` mode:\n+## How it works\n \n-1. Create a `ServiceFeatureTable` from a URL.\n-2. Set request mode of table, `ServiceFeatureTable.setFeatureRequestMode(FeatureRequestMode.ON_INTERACTION_NO_CAHCE)`.\n+1. Set the `ServiceFeatureTable.FeatureRequestMode` property of the service feature table to `NO_CACHE` before the table is loaded.\n+2. Add the table to the map using a `FeatureLayer`; features will be requested for the visible extent as the user pans and zooms.\n \n ## Relevant API\n \n-* ArcGISMap\n * FeatureLayer\n-* MapView\n+* FeatureRequestMode\n * ServiceFeatureTable\n-* ServiceFeatureTable.FeatureRequestMode\n+\n+## About the data\n+\n+The U.S. National Bridge Inventory describes 600,000 bridges in the United States. The sample uses [US Bridges](https://arcgisruntime.maps.arcgis.com/home/item.html?id=250b103a722c4e1ea71e562eac61be1b), a modified copy of the U.S. National Bridge Inventory hosted on ArcGIS Online. The sample opens with an initial visible extent centered over Bridgeport, CT.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyNzg3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * FeatureRequestMode\n          \n          \n            \n            * ServiceFeatureTable.FeatureRequestMode", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r395627879", "createdAt": "2020-03-20T13:15:58Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/service-feature-table-no-cache/README.md", "diffHunk": "@@ -1,22 +1,38 @@\n-# Service Feature Table (No Cache)\n+# Service feature table (no cache)\n \n-Show features without caching.\n+Display a feature layer from a service using the **no cache** feature request mode.\n \n-On-interaction-no-cache mode will always fetch Features from the server and doesn't cache any Features on the client's side. This meaning that Features will be fetched whenever the ArcGISMap pans, zooms, selects, or queries.\n+![Image of service feature table no cache](ServiceFeatureTableNoCache.png)\n \n-![](ServiceFeatureTableNoCache.png)\n+## Use case\n \n-## How it works\n+`ServiceFeatureTable` supports three request modes, which define how features are requested from the service and stored in the local table. The feature request modes have different performance characteristics. Use **no cache** in scenarios where you always want the freshest data. See [Table performance concepts](https://developers.arcgis.com/net/latest/wpf/guide/layers.htm#ESRI_SECTION1_40F10593308A4718971C9A8F5FB9EC7D) in the *ArcGIS Runtime SDK for .NET* guide to learn more.\n+\n+## How to use the sample\n+\n+Run the sample and pan and zoom around the map. With each interaction, new features will be requested from the service and displayed on the map.\n \n-How to set `FeatureRequestMode.ON_INTERACTION_NO_CAHCE` mode:\n+## How it works\n \n-1. Create a `ServiceFeatureTable` from a URL.\n-2. Set request mode of table, `ServiceFeatureTable.setFeatureRequestMode(FeatureRequestMode.ON_INTERACTION_NO_CAHCE)`.\n+1. Set the `ServiceFeatureTable.FeatureRequestMode` property of the service feature table to `NO_CACHE` before the table is loaded.\n+2. Add the table to the map using a `FeatureLayer`; features will be requested for the visible extent as the user pans and zooms.\n \n ## Relevant API\n \n-* ArcGISMap\n * FeatureLayer\n-* MapView\n+* FeatureRequestMode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyODczMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * OrderBy\n          \n          \n            \n            * QueryParameters.OrderBy", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r395628733", "createdAt": "2020-03-20T13:17:38Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/statistical-query-group-and-sort/README.md", "diffHunk": "@@ -1,39 +1,50 @@\n-# Statistical Query Group And Sort\n+# Statistical query group and sort\n \n-Group and sort feature statistics by different fields.\n+Query a feature table for statistics, grouping and sorting by different fields.\n \n-![](StatisticalQueryGroupAndSort.png)\n+![Image of statistical query group and sort](StatisticalQueryGroupAndSort.png)\n+\n+## Use case\n+\n+You can use statistical queries, grouping and sorting to process large amounts of data saved in feature tables. This is helpful for identifying trends and relationships within the data, which can be used to support further interpretations and decisions. For example, a health agency can use information on medical conditions occurring throughout a country to identify at-risk areas or demographics, and decide on further action and preventive measures.\n \n ## How to use the sample\n \n-The sample will start with some default options selected. You can immediately click the \"Get Statistics\" button to see the results for these options.\n+The sample will start with some default options selected. You can immediately click the \"Get Statistics\" button to see the results for these options. There are several ways to customize your queries:\n \n-To change the statistic definitions, you can add statistic definitions to the top-left table using the combo boxes and \"Add button\". Select a table row and click \"Remove\" to remove the statistic definition.\n+* You can add statistic definitions to the top-left table using the combo boxes and \"Add\" button. Select a table row and click \"Remove\" to remove a definition.\n \n-To change the group-by fields, check the box by the field you want to group by in the bottom-left list view.\n+* To change the Group-by fields, check the box by the field you want to group by in the bottom-left list view.\n \n-To change the order-by fields, select a group by field (it must be checked) and click the \">>\" button to add it to the Order By table. To remove a field from the Order by table, select it and click the \"<<\" button. To change the sort order of the order-by field, click on a cell in the Sort Order column to edit it using a ComboBox.\n+* To change the Order-by fields, select a Group-by field (it must be checked) and click the \">>\" button to add it to the Order-by table. To remove a field from the Order-by table, select it and click the \"<<\" button. To change the sort order of the Order-by field, the cells of the \"Sort Order\" column are combo-boxes that may be either ASCENDING or DESCENDING.\n \n ## How it works\n \n-To query statistics from a feature table:\n-\n-1. Create and load a `ServiceFeatureTable`.\n+1. Create a `ServiceFeatureTable` using the URL of a feature service and load the table.\n 2. Get the feature tables field names list with `featureTable.getFields()`.\n 3. Create `StatisticDefinition`s specifying the field to compute statistics on and the `StatisticType` to compute.\n 4. Create `StatisticsQueryParameters` passing in the list of statistic definitions.\n 5. To have the results grouped by fields, add the field names to the query parameters' `groupByFieldNames` collection.\n 6. To have the results ordered by fields, create `OrderBy`s, specifying the field name and `SortOrder`. Pass these `OrderBy`s to the parameters' `orderByFields` collection.\n-7. To execute the query, call `featureTable.queryStatisticsAsync(queryParameters)`\n+7. To execute the query, call `featureTable.queryStatisticsAsync(queryParameters)`.\n 8. Get the `StatisticQueryResult`. From this, you can get an iterator of `StatisticRecord`s to loop through and display.\n \n- ## Relevant API\n+## About the data\n+\n+This sample uses a [Diabetes, Obesity, and Inactivity by US County](https://www.arcgis.com/home/item.html?id=392420848e634079bc7d0648586e818f) feature layer hosted on ArcGIS Online.\n+\n+## Relevant API\n \n * Field\n+* OrderBy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzMzMxNA==", "bodyText": "Just to be 100% accurate with our UI:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Pan and zoom to define the extent for the query. Use the 'Cities in current extent' checkbox to control whether the query only includes features in the visible extent. Use the 'Cities grater than 5M' checkbox to filter the results to only those cities with a population greater than 5 million people. Click 'Get statistics' to perform the query. The query will return population-based statistics from the combined results of all features matching the query criteria.\n          \n          \n            \n            Pan and zoom to define the extent for the query. Use the 'Only cities in current extent' checkbox to control whether the query only includes features in the visible extent. Use the 'Only cities greater than 5M' checkbox to filter the results to only those cities with a population greater than 5 million people. Click 'Get statistics' to perform the query. The query will return population-based statistics from the combined results of all features matching the query criteria.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r395633314", "createdAt": "2020-03-20T13:25:34Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/statistical-query/README.md", "diffHunk": "@@ -1,33 +1,35 @@\n-# Statistical Query\n+# Statistical query\n \n-Get aggregated feature statistics for a specified field.\n+Query a table to get aggregated statistics back for a specific field.\n \n-![](StatisticalQuery.png)\n+![Image of statistical query](StatisticalQuery.jpg)\n+\n+## Use case\n+\n+For example, a county boundaries table with population information can be queried to return aggregated results for total, average, maximum, and minimum population, rather than downloading the values for every county and calculating statistics manually.\n \n ## How to use the sample\n \n-Check the boxes for the filters you want to use in the query (a spatial filter and an attribute filter). Click\n-the \"Get Statistics\" button to execute the query. A dialog will open with the statistics result.\n+Pan and zoom to define the extent for the query. Use the 'Cities in current extent' checkbox to control whether the query only includes features in the visible extent. Use the 'Cities grater than 5M' checkbox to filter the results to only those cities with a population greater than 5 million people. Click 'Get statistics' to perform the query. The query will return population-based statistics from the combined results of all features matching the query criteria.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNDIzMg==", "bodyText": "We should provide a code example here e.g. from the original\nfeatureTable.popuateFromServiceAsync(queryParameters, true, outputFields)", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r395634232", "createdAt": "2020-03-20T13:27:05Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/time-based-query/README.md", "diffHunk": "@@ -1,29 +1,37 @@\n-# Time Based Query\n+# Time-based query\n \n-Filter features within a time range.\n+Query data using a time extent. \n \n-![](TimeBasedQuery.png)\n+![Image of time-based query](TimeBasedQuery.png)\n \n-## How it works\n+## Use case\n+\n+This workflow can be used to return records that are between a specified start and end date. For example, records of Canada goose sightings over time could be queried to only show sightings during the winter migration time period.\n+\n+## How to use the sample\n \n-To query features by a time extent:\n+Run the sample, and a subset of records will be displayed on the map.\n+\n+## How it works\n \n-1. Create a `ServiceFeatureTable` from the URL of a feature service.\n-2. Set the feature table's feature request mode to manual with `featureTable.setFeatureRequestMode(MANUAL_CACHE)`.\n-3. After loading the service feature table, create `QueryParameters`.\n-4. Create two `Calendar` objects with the beginning and ending timestamps and create a `TimeExtent` with them.\n-5. Set the time extent with `queryParameters.setTimeExtent(timeExtent)`\n-6. Populate the table with features in the time extent with `featureTable.popuateFromServiceAsync(queryParameters, true, outputFields)`.\n-    * The second argument is whether to clear the cache of features or not.\n-    * The output fields is a list of fields of the features to return. Use a list of one string `\"*\"` to get all of the fields.\n-7. Finally, create a feature layer from the feature table with `new FeatureLayer(featureTable)`, and add it to the map with `map.getOperationalLayers().add(featureLayer)` to see the features in the time extent.\n+1. An instance of `ServiceFeatureTable` is created by passing a URL to the REST endpoint of a time-enabled service. Time-enabled services will have TimeInfo defined in the service description. This information is specified in ArcMap or ArcGIS Pro prior to publishing the service.\n+2. The feature request mode of the `ServiceFeatureTable` is set to `ManualCache`, so that the developer can control how and when the feature table is populated with data.\n+3. A `FeatureLayer` is created by passing in the instance of the `ServiceFeatureTable`.\n+4. A `TimeExtent` object is created by specifying start and end date/time objects.\n+5. A `QueryParmaters` object is created with the `TimeExtent`.\n+6. `ServiceFeatureTable.populateFromServiceAsync()` is executed by passing in the `QueryParameters`.\n+7. The feature table is populated with data that matches the provided query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNDgxNg==", "bodyText": "I've noticed this whole section is in passive voice: usually we use the active voice for this section. We should also provide more code examples, e.g. for here featureTable.setFeatureRequestMode(MANUAL_CACHE)", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r395634816", "createdAt": "2020-03-20T13:28:00Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/time-based-query/README.md", "diffHunk": "@@ -1,29 +1,37 @@\n-# Time Based Query\n+# Time-based query\n \n-Filter features within a time range.\n+Query data using a time extent. \n \n-![](TimeBasedQuery.png)\n+![Image of time-based query](TimeBasedQuery.png)\n \n-## How it works\n+## Use case\n+\n+This workflow can be used to return records that are between a specified start and end date. For example, records of Canada goose sightings over time could be queried to only show sightings during the winter migration time period.\n+\n+## How to use the sample\n \n-To query features by a time extent:\n+Run the sample, and a subset of records will be displayed on the map.\n+\n+## How it works\n \n-1. Create a `ServiceFeatureTable` from the URL of a feature service.\n-2. Set the feature table's feature request mode to manual with `featureTable.setFeatureRequestMode(MANUAL_CACHE)`.\n-3. After loading the service feature table, create `QueryParameters`.\n-4. Create two `Calendar` objects with the beginning and ending timestamps and create a `TimeExtent` with them.\n-5. Set the time extent with `queryParameters.setTimeExtent(timeExtent)`\n-6. Populate the table with features in the time extent with `featureTable.popuateFromServiceAsync(queryParameters, true, outputFields)`.\n-    * The second argument is whether to clear the cache of features or not.\n-    * The output fields is a list of fields of the features to return. Use a list of one string `\"*\"` to get all of the fields.\n-7. Finally, create a feature layer from the feature table with `new FeatureLayer(featureTable)`, and add it to the map with `map.getOperationalLayers().add(featureLayer)` to see the features in the time extent.\n+1. An instance of `ServiceFeatureTable` is created by passing a URL to the REST endpoint of a time-enabled service. Time-enabled services will have TimeInfo defined in the service description. This information is specified in ArcMap or ArcGIS Pro prior to publishing the service.\n+2. The feature request mode of the `ServiceFeatureTable` is set to `ManualCache`, so that the developer can control how and when the feature table is populated with data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNDk1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            query, time, time Extent\n          \n          \n            \n            query, time, time extent", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r395634957", "createdAt": "2020-03-20T13:28:16Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/time-based-query/README.md", "diffHunk": "@@ -1,29 +1,37 @@\n-# Time Based Query\n+# Time-based query\n \n-Filter features within a time range.\n+Query data using a time extent. \n \n-![](TimeBasedQuery.png)\n+![Image of time-based query](TimeBasedQuery.png)\n \n-## How it works\n+## Use case\n+\n+This workflow can be used to return records that are between a specified start and end date. For example, records of Canada goose sightings over time could be queried to only show sightings during the winter migration time period.\n+\n+## How to use the sample\n \n-To query features by a time extent:\n+Run the sample, and a subset of records will be displayed on the map.\n+\n+## How it works\n \n-1. Create a `ServiceFeatureTable` from the URL of a feature service.\n-2. Set the feature table's feature request mode to manual with `featureTable.setFeatureRequestMode(MANUAL_CACHE)`.\n-3. After loading the service feature table, create `QueryParameters`.\n-4. Create two `Calendar` objects with the beginning and ending timestamps and create a `TimeExtent` with them.\n-5. Set the time extent with `queryParameters.setTimeExtent(timeExtent)`\n-6. Populate the table with features in the time extent with `featureTable.popuateFromServiceAsync(queryParameters, true, outputFields)`.\n-    * The second argument is whether to clear the cache of features or not.\n-    * The output fields is a list of fields of the features to return. Use a list of one string `\"*\"` to get all of the fields.\n-7. Finally, create a feature layer from the feature table with `new FeatureLayer(featureTable)`, and add it to the map with `map.getOperationalLayers().add(featureLayer)` to see the features in the time extent.\n+1. An instance of `ServiceFeatureTable` is created by passing a URL to the REST endpoint of a time-enabled service. Time-enabled services will have TimeInfo defined in the service description. This information is specified in ArcMap or ArcGIS Pro prior to publishing the service.\n+2. The feature request mode of the `ServiceFeatureTable` is set to `ManualCache`, so that the developer can control how and when the feature table is populated with data.\n+3. A `FeatureLayer` is created by passing in the instance of the `ServiceFeatureTable`.\n+4. A `TimeExtent` object is created by specifying start and end date/time objects.\n+5. A `QueryParmaters` object is created with the `TimeExtent`.\n+6. `ServiceFeatureTable.populateFromServiceAsync()` is executed by passing in the `QueryParameters`.\n+7. The feature table is populated with data that matches the provided query.\n \n ## Relevant API\n \n-* ArcGISMap\n-* Basemap\n-* FeatureLayer\n-* MapView\n * QueryParameters\n * ServiceFeatureTable\n * TimeExtent\n+\n+## About the data\n+\n+This sample uses Atlantic hurricane data from the year 2000. The data is from the National Hurricane Center (NOAA / National Weather Service).\n+\n+## Tags\n+\n+query, time, time Extent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a388131763183bb965a95a5fb5ef671280eab4"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc176a5c098bb639bb1c884d2478d0f704d13ad3", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/cc176a5c098bb639bb1c884d2478d0f704d13ad3", "committedDate": "2020-03-25T15:23:42Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Rachael Ellen <36415565+Rachael-E@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19bff6d175c4213dad78967d3be0bad0b80c880e", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/19bff6d175c4213dad78967d3be0bad0b80c880e", "committedDate": "2020-03-25T16:31:16Z", "message": "update sample data and use loadable pattern, apply review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df764c3d01f958118ef8b57cc4861d1ed2efca41", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/df764c3d01f958118ef8b57cc4861d1ed2efca41", "committedDate": "2020-03-25T16:38:21Z", "message": "update screenshots, update 'how to use'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODMyODY0", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#pullrequestreview-399832864", "createdAt": "2020-04-24T10:37:34Z", "commit": {"oid": "df764c3d01f958118ef8b57cc4861d1ed2efca41"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDozNzozNFrOGLRh2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDozODo0N1rOGLRkpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ3NDcxNQ==", "bodyText": "don't need this comment here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // create feature layer with its service feature table", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r414474715", "createdAt": "2020-04-24T10:37:34Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/service-feature-table-cache/src/main/java/com/esri/samples/service_feature_table_cache/ServiceFeatureTableCacheSample.java", "diffHunk": "@@ -52,15 +54,18 @@ public void start(Stage stage) {\n       stage.setScene(scene);\n       stage.show();\n \n-      // create a view for this ArcGISMap\n+      // create a map view\n       mapView = new MapView();\n \n       // create a ArcGISMap with the light Gray Canvas basemap\n       ArcGISMap map = new ArcGISMap(Basemap.createLightGrayCanvas());\n \n+      // set ArcGISMap to be displayed in ArcGISMap view\n+      mapView.setMap(map);\n+\n       // set an initial viewpoint\n-      map.setInitialViewpoint(new Viewpoint(new Envelope(-1.30758164047166E7, 4014771.46954516, -1.30730056797177E7,\n-          4016869.78617381, 0, 0, SpatialReferences.getWebMercator())));\n+      map.setInitialViewpoint(new Viewpoint(new Envelope(-140.740858094945, 14.1552479740679, -47.693259181055,\n+              64.8874243113506, SpatialReferences.getWgs84())));\n \n       // create feature layer with its service feature table", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df764c3d01f958118ef8b57cc4861d1ed2efca41"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ3NTQzMA==", "bodyText": "can remove this line\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // create feature layer with its service feature table", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#discussion_r414475430", "createdAt": "2020-04-24T10:38:47Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/service-feature-table-no-cache/src/main/java/com/esri/samples/service_feature_table_no_cache/ServiceFeatureTableNoCacheSample.java", "diffHunk": "@@ -51,32 +52,41 @@ public void start(Stage stage) {\n       stage.setScene(scene);\n       stage.show();\n \n-      ArcGISMap map = new ArcGISMap(Basemap.createTopographic());\n+      // create a view for this ArcGISMap\n+      mapView = new MapView();\n \n-      // create starting viewpoint for ArcGISMap\n-      SpatialReference spatialReference = SpatialReferences.getWebMercator();\n-      Point leftPoint = new Point(-1.30758164047166E7, 4014771.46954516, spatialReference);\n-      Point rightPoint = new Point(-1.30730056797177E7, 4016869.78617381, spatialReference);\n-      Envelope envelope = new Envelope(leftPoint, rightPoint);\n-      Viewpoint viewpoint = new Viewpoint(envelope);\n+      // create a ArcGISMap with the light Gray Canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createLightGrayCanvas());\n \n-      // set starting viewpoint for ArcGISMap\n-      map.setInitialViewpoint(viewpoint);\n+      // set ArcGISMap to be displayed in ArcGISMap view\n+      mapView.setMap(map);\n \n-      // create service feature table from URL\n-      final String serviceFeatureUrl = \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/PoolPermits/FeatureServer/0\";\n-      ServiceFeatureTable featureTable = new ServiceFeatureTable(serviceFeatureUrl);\n+      // set an initial viewpoint\n+      map.setInitialViewpoint(new Viewpoint(new Envelope(-140.740858094945, 14.1552479740679, -47.693259181055,\n+              64.8874243113506, SpatialReferences.getWgs84())));\n \n-      // set cache mode for table to no caching\n-      featureTable.setFeatureRequestMode(ServiceFeatureTable.FeatureRequestMode.ON_INTERACTION_NO_CACHE);\n-      FeatureLayer featureLayer = new FeatureLayer(featureTable);\n+      // create feature layer with its service feature table", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df764c3d01f958118ef8b57cc4861d1ed2efca41"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f30c8fa94a925f96b3bdf531fa18548fd5654be", "author": {"user": {"login": "Rachael-E", "name": "Rachael Ellen"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/4f30c8fa94a925f96b3bdf531fa18548fd5654be", "committedDate": "2020-04-24T10:40:40Z", "message": "Update feature_layers/service-feature-table-cache/src/main/java/com/esri/samples/service_feature_table_cache/ServiceFeatureTableCacheSample.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d817f391612f6fd93dd71597493701d17d895dcf", "author": {"user": {"login": "Rachael-E", "name": "Rachael Ellen"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/d817f391612f6fd93dd71597493701d17d895dcf", "committedDate": "2020-04-24T10:40:50Z", "message": "Update feature_layers/service-feature-table-no-cache/src/main/java/com/esri/samples/service_feature_table_no_cache/ServiceFeatureTableNoCacheSample.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODM1NDgx", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/454#pullrequestreview-399835481", "createdAt": "2020-04-24T10:41:44Z", "commit": {"oid": "d817f391612f6fd93dd71597493701d17d895dcf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3545, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}