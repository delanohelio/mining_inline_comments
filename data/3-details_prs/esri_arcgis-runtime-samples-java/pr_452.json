{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3OTIxNzE5", "number": 452, "title": "Update readmes to match common design (Feature Layers category) 2/x", "bodyText": "", "createdAt": "2020-03-13T18:36:25Z", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/452", "merged": true, "mergeCommit": {"oid": "deb60c2f9308e3619b53cc8ac438dd69776442cd"}, "closed": true, "closedAt": "2020-03-27T09:36:06Z", "author": {"login": "JonLavi"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNUtIvAH2gAyMzg3OTIxNzE5OjFiOTI0MzUwYzU2MDc3NDVmN2VkZjNmM2Q1YjcyN2MxMzkzMjFiMzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRtY6YAH2gAyMzg3OTIxNzE5OmEzMmRhYTM5M2JkMjg5MDgyMWZhMTVmZWI1NmVkYjU5NTI5MWFmOGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1b924350c5607745f7edf3f3d5b727c139321b31", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/1b924350c5607745f7edf3f3d5b727c139321b31", "committedDate": "2020-03-13T18:34:30Z", "message": "update readmes to match common design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "163ce8bd3a470d54936b2dc419c5c00c1aa5f005", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/163ce8bd3a470d54936b2dc419c5c00c1aa5f005", "committedDate": "2020-03-18T15:34:17Z", "message": "Update 'Relevant API'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3OTkxMDgy", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/452#pullrequestreview-377991082", "createdAt": "2020-03-19T18:33:29Z", "commit": {"oid": "163ce8bd3a470d54936b2dc419c5c00c1aa5f005"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODozMzoyOVrOF47bAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTowMzo1OFrOF48efA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIzODE0Ng==", "bodyText": "looks like this has been split over two lines, might just be the diff rendering though", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/452#discussion_r395238146", "createdAt": "2020-03-19T18:33:29Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/feature-layer-dictionary-renderer/README.md", "diffHunk": "@@ -1,40 +1,40 @@\n-# Dictionary Renderer with Feature Layer\n+# Dictionary renderer with feature layer\n \n Convert features into graphics to show them with mil2525d symbols.\n \n-The dictionary renderer creates these graphics using a mil2525d style file and the attributes attached to each feature within the geodatabase.\n+![Image of dictionary renderer with feature layer](FeatureLayerDictionaryRenderer.png)\n \n-![](FeatureLayerDictionaryRenderer.png)\n+## Use case\n+\n+A dictionary renderer uses a style file along with a rule engine to display advanced symbology.\n+This is useful for displaying features using precise military symbology.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "163ce8bd3a470d54936b2dc419c5c00c1aa5f005"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIzOTk0OQ==", "bodyText": "hmm so we don't have SymbolDictionary in our API, instead we use this:\nDictionarySymbolStyle.createFromFile(stylxFile.getAbsolutePath())", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/452#discussion_r395239949", "createdAt": "2020-03-19T18:36:40Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/feature-layer-dictionary-renderer/README.md", "diffHunk": "@@ -1,40 +1,40 @@\n-# Dictionary Renderer with Feature Layer\n+# Dictionary renderer with feature layer\n \n Convert features into graphics to show them with mil2525d symbols.\n \n-The dictionary renderer creates these graphics using a mil2525d style file and the attributes attached to each feature within the geodatabase.\n+![Image of dictionary renderer with feature layer](FeatureLayerDictionaryRenderer.png)\n \n-![](FeatureLayerDictionaryRenderer.png)\n+## Use case\n+\n+A dictionary renderer uses a style file along with a rule engine to display advanced symbology.\n+This is useful for displaying features using precise military symbology.\n+\n+## How to use the sample\n+\n+Pan and zoom around the map. Observe the displayed military symbology on the map.\n \n ## How it works\n \n-To apply a `DictionaryRenderer` and display mil2525d graphics:\n-\n-1. Create a `Geodatabase(geodatabasePath)`.\n-    * geodatabasePath, local path to geodatabase\n-2. Load the geodatabase asynchronously, `Geodatabase.loadAsync()`.\n-    * this will allows the application to continue working while the geodatabase loads in all feature tables\n-3. Create a `SymbolDicitonary`, `SymbolDictionary(specificationType)`.\n-    * specificationType, this will be the mil2525d.stylx file\n-    * load asynchronously, `DictionarySymbol.loadAsync()`\n-4. Wait for geodatabase to completely load, `Geodatabase.addDoneLoadingListener()`.\n-5. Cycle through each `GeodatabaseFeatureTable` from geodatabase, `Geodatabase.getGeodatabaseFeatureTables()`.\n-6. Create a `FeatureLayer` from each table within the geodatabase, `FeatureLayer(GeodatabaseFeatureTable)`.\n-    * load asynchronouly, `FeatureLayer.loadAsync()`\n-7. Wait for each layer to load, `FeatureLayer.addDoneLoadingListener`.\n-8. Check if layer is last layer to load and create `Envelope` from each layer.\n-    * set this envelope to be the `Viewpoint` of the map view, `MapView.setViewpoint(new Viewpoint(Envelope))`\n-9. Add feature layer to map, `Map.getOperationalLayers().add(FeatureLayer)`.\n-10. Create `DictionaryRenderer(SymbolDictionary)` and attach to feature layer, `FeatureLayer.setRenderer(DictionaryRenderer)`.\n+1. Create a `Geodatabase` using `Geodatabase(geodatabasePath)`.\n+2. Load the geodatabase asynchronously using `Geodatabase.loadAsync()`.\n+3. Instantiate a `SymbolDicitonary`  using `SymbolDictionary(specificationType)`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "163ce8bd3a470d54936b2dc419c5c00c1aa5f005"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MDExMg==", "bodyText": "This will need updating too\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            4. Load the symbol dictionary asynchronously using `DictionarySymbol.loadAsync()`.\n          \n          \n            \n            4. Load the symbol dictionary asynchronously using `DictionarySymbolStyle.loadAsync()`.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/452#discussion_r395250112", "createdAt": "2020-03-19T18:54:38Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/feature-layer-dictionary-renderer/README.md", "diffHunk": "@@ -1,40 +1,40 @@\n-# Dictionary Renderer with Feature Layer\n+# Dictionary renderer with feature layer\n \n Convert features into graphics to show them with mil2525d symbols.\n \n-The dictionary renderer creates these graphics using a mil2525d style file and the attributes attached to each feature within the geodatabase.\n+![Image of dictionary renderer with feature layer](FeatureLayerDictionaryRenderer.png)\n \n-![](FeatureLayerDictionaryRenderer.png)\n+## Use case\n+\n+A dictionary renderer uses a style file along with a rule engine to display advanced symbology.\n+This is useful for displaying features using precise military symbology.\n+\n+## How to use the sample\n+\n+Pan and zoom around the map. Observe the displayed military symbology on the map.\n \n ## How it works\n \n-To apply a `DictionaryRenderer` and display mil2525d graphics:\n-\n-1. Create a `Geodatabase(geodatabasePath)`.\n-    * geodatabasePath, local path to geodatabase\n-2. Load the geodatabase asynchronously, `Geodatabase.loadAsync()`.\n-    * this will allows the application to continue working while the geodatabase loads in all feature tables\n-3. Create a `SymbolDicitonary`, `SymbolDictionary(specificationType)`.\n-    * specificationType, this will be the mil2525d.stylx file\n-    * load asynchronously, `DictionarySymbol.loadAsync()`\n-4. Wait for geodatabase to completely load, `Geodatabase.addDoneLoadingListener()`.\n-5. Cycle through each `GeodatabaseFeatureTable` from geodatabase, `Geodatabase.getGeodatabaseFeatureTables()`.\n-6. Create a `FeatureLayer` from each table within the geodatabase, `FeatureLayer(GeodatabaseFeatureTable)`.\n-    * load asynchronouly, `FeatureLayer.loadAsync()`\n-7. Wait for each layer to load, `FeatureLayer.addDoneLoadingListener`.\n-8. Check if layer is last layer to load and create `Envelope` from each layer.\n-    * set this envelope to be the `Viewpoint` of the map view, `MapView.setViewpoint(new Viewpoint(Envelope))`\n-9. Add feature layer to map, `Map.getOperationalLayers().add(FeatureLayer)`.\n-10. Create `DictionaryRenderer(SymbolDictionary)` and attach to feature layer, `FeatureLayer.setRenderer(DictionaryRenderer)`.\n+1. Create a `Geodatabase` using `Geodatabase(geodatabasePath)`.\n+2. Load the geodatabase asynchronously using `Geodatabase.loadAsync()`.\n+3. Instantiate a `SymbolDicitonary`  using `SymbolDictionary(specificationType)`.\n+    * `specificationType` will be the mil2525d.stylx file.\n+4. Load the symbol dictionary asynchronously using `DictionarySymbol.loadAsync()`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "163ce8bd3a470d54936b2dc419c5c00c1aa5f005"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MDc0NQ==", "bodyText": "I know that in our sample we've called the DictionarySymbolStyle \"symbolDictionary\" but for this part of the readme I think we should be as clear as possible with:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            12. Create `DictionaryRenderer(SymbolDictionary)` and attach to the feature layer using `FeatureLayer.setRenderer(DictionaryRenderer)`.\n          \n          \n            \n            12. Create `DictionaryRenderer(dictionarySymbolStyle)` and attach to the feature layer using `FeatureLayer.setRenderer(dictionaryRenderer)`.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/452#discussion_r395250745", "createdAt": "2020-03-19T18:55:47Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/feature-layer-dictionary-renderer/README.md", "diffHunk": "@@ -1,40 +1,40 @@\n-# Dictionary Renderer with Feature Layer\n+# Dictionary renderer with feature layer\n \n Convert features into graphics to show them with mil2525d symbols.\n \n-The dictionary renderer creates these graphics using a mil2525d style file and the attributes attached to each feature within the geodatabase.\n+![Image of dictionary renderer with feature layer](FeatureLayerDictionaryRenderer.png)\n \n-![](FeatureLayerDictionaryRenderer.png)\n+## Use case\n+\n+A dictionary renderer uses a style file along with a rule engine to display advanced symbology.\n+This is useful for displaying features using precise military symbology.\n+\n+## How to use the sample\n+\n+Pan and zoom around the map. Observe the displayed military symbology on the map.\n \n ## How it works\n \n-To apply a `DictionaryRenderer` and display mil2525d graphics:\n-\n-1. Create a `Geodatabase(geodatabasePath)`.\n-    * geodatabasePath, local path to geodatabase\n-2. Load the geodatabase asynchronously, `Geodatabase.loadAsync()`.\n-    * this will allows the application to continue working while the geodatabase loads in all feature tables\n-3. Create a `SymbolDicitonary`, `SymbolDictionary(specificationType)`.\n-    * specificationType, this will be the mil2525d.stylx file\n-    * load asynchronously, `DictionarySymbol.loadAsync()`\n-4. Wait for geodatabase to completely load, `Geodatabase.addDoneLoadingListener()`.\n-5. Cycle through each `GeodatabaseFeatureTable` from geodatabase, `Geodatabase.getGeodatabaseFeatureTables()`.\n-6. Create a `FeatureLayer` from each table within the geodatabase, `FeatureLayer(GeodatabaseFeatureTable)`.\n-    * load asynchronouly, `FeatureLayer.loadAsync()`\n-7. Wait for each layer to load, `FeatureLayer.addDoneLoadingListener`.\n-8. Check if layer is last layer to load and create `Envelope` from each layer.\n-    * set this envelope to be the `Viewpoint` of the map view, `MapView.setViewpoint(new Viewpoint(Envelope))`\n-9. Add feature layer to map, `Map.getOperationalLayers().add(FeatureLayer)`.\n-10. Create `DictionaryRenderer(SymbolDictionary)` and attach to feature layer, `FeatureLayer.setRenderer(DictionaryRenderer)`.\n+1. Create a `Geodatabase` using `Geodatabase(geodatabasePath)`.\n+2. Load the geodatabase asynchronously using `Geodatabase.loadAsync()`.\n+3. Instantiate a `SymbolDicitonary`  using `SymbolDictionary(specificationType)`.\n+    * `specificationType` will be the mil2525d.stylx file.\n+4. Load the symbol dictionary asynchronously using `DictionarySymbol.loadAsync()`.\n+5. Wait for geodatabase to completely load by connecting to `Geodatabase.addDoneLoadingListener()`.\n+6. Cycle through each `GeodatabaseFeatureTable` from the geodatabase using `Geodatabase.getGeodatabaseFeatureTables()`.\n+7. Create a `FeatureLayer` from each table within the geodatabase using `FeatureLayer(GeodatabaseFeatureTable)`.\n+8. Load the feature layer asynchronously with `FeatureLayer.loadAsync()`.\n+9. Wait for each layer to load using `FeatureLayer.addDoneLoadingListener`.\n+10. After the last layer has loaded, then create a new `Envelope` from a union of the extents of all layers.\n+    * Set the envelope to be the `Viewpoint` of the map view using `MapView.setViewpoint(new Viewpoint(Envelope))`.\n+11. Add the feature layer to map using `Map.getOperationalLayers().add(FeatureLayer)`.\n+12. Create `DictionaryRenderer(SymbolDictionary)` and attach to the feature layer using `FeatureLayer.setRenderer(DictionaryRenderer)`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "163ce8bd3a470d54936b2dc419c5c00c1aa5f005"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MTIzMg==", "bodyText": "DictionarySymbolStyle for Java", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/452#discussion_r395251232", "createdAt": "2020-03-19T18:56:34Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/feature-layer-dictionary-renderer/README.md", "diffHunk": "@@ -1,40 +1,40 @@\n-# Dictionary Renderer with Feature Layer\n+# Dictionary renderer with feature layer\n \n Convert features into graphics to show them with mil2525d symbols.\n \n-The dictionary renderer creates these graphics using a mil2525d style file and the attributes attached to each feature within the geodatabase.\n+![Image of dictionary renderer with feature layer](FeatureLayerDictionaryRenderer.png)\n \n-![](FeatureLayerDictionaryRenderer.png)\n+## Use case\n+\n+A dictionary renderer uses a style file along with a rule engine to display advanced symbology.\n+This is useful for displaying features using precise military symbology.\n+\n+## How to use the sample\n+\n+Pan and zoom around the map. Observe the displayed military symbology on the map.\n \n ## How it works\n \n-To apply a `DictionaryRenderer` and display mil2525d graphics:\n-\n-1. Create a `Geodatabase(geodatabasePath)`.\n-    * geodatabasePath, local path to geodatabase\n-2. Load the geodatabase asynchronously, `Geodatabase.loadAsync()`.\n-    * this will allows the application to continue working while the geodatabase loads in all feature tables\n-3. Create a `SymbolDicitonary`, `SymbolDictionary(specificationType)`.\n-    * specificationType, this will be the mil2525d.stylx file\n-    * load asynchronously, `DictionarySymbol.loadAsync()`\n-4. Wait for geodatabase to completely load, `Geodatabase.addDoneLoadingListener()`.\n-5. Cycle through each `GeodatabaseFeatureTable` from geodatabase, `Geodatabase.getGeodatabaseFeatureTables()`.\n-6. Create a `FeatureLayer` from each table within the geodatabase, `FeatureLayer(GeodatabaseFeatureTable)`.\n-    * load asynchronouly, `FeatureLayer.loadAsync()`\n-7. Wait for each layer to load, `FeatureLayer.addDoneLoadingListener`.\n-8. Check if layer is last layer to load and create `Envelope` from each layer.\n-    * set this envelope to be the `Viewpoint` of the map view, `MapView.setViewpoint(new Viewpoint(Envelope))`\n-9. Add feature layer to map, `Map.getOperationalLayers().add(FeatureLayer)`.\n-10. Create `DictionaryRenderer(SymbolDictionary)` and attach to feature layer, `FeatureLayer.setRenderer(DictionaryRenderer)`.\n+1. Create a `Geodatabase` using `Geodatabase(geodatabasePath)`.\n+2. Load the geodatabase asynchronously using `Geodatabase.loadAsync()`.\n+3. Instantiate a `SymbolDicitonary`  using `SymbolDictionary(specificationType)`.\n+    * `specificationType` will be the mil2525d.stylx file.\n+4. Load the symbol dictionary asynchronously using `DictionarySymbol.loadAsync()`.\n+5. Wait for geodatabase to completely load by connecting to `Geodatabase.addDoneLoadingListener()`.\n+6. Cycle through each `GeodatabaseFeatureTable` from the geodatabase using `Geodatabase.getGeodatabaseFeatureTables()`.\n+7. Create a `FeatureLayer` from each table within the geodatabase using `FeatureLayer(GeodatabaseFeatureTable)`.\n+8. Load the feature layer asynchronously with `FeatureLayer.loadAsync()`.\n+9. Wait for each layer to load using `FeatureLayer.addDoneLoadingListener`.\n+10. After the last layer has loaded, then create a new `Envelope` from a union of the extents of all layers.\n+    * Set the envelope to be the `Viewpoint` of the map view using `MapView.setViewpoint(new Viewpoint(Envelope))`.\n+11. Add the feature layer to map using `Map.getOperationalLayers().add(FeatureLayer)`.\n+12. Create `DictionaryRenderer(SymbolDictionary)` and attach to the feature layer using `FeatureLayer.setRenderer(DictionaryRenderer)`.\n \n ## Relevant API\n \n-* ArcGISMap\n-* Basemap\n * DictionaryRenderer\n-* Envelope\n-* FeatureLayer\n-* Geodatabase\n-* GeometryEngine\n-* MapView\n * SymbolDictionary", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "163ce8bd3a470d54936b2dc419c5c00c1aa5f005"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MTQ0Ng==", "bodyText": "can remove API class names from tags", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/452#discussion_r395251446", "createdAt": "2020-03-19T18:56:49Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/feature-layer-dictionary-renderer/README.md", "diffHunk": "@@ -1,40 +1,40 @@\n-# Dictionary Renderer with Feature Layer\n+# Dictionary renderer with feature layer\n \n Convert features into graphics to show them with mil2525d symbols.\n \n-The dictionary renderer creates these graphics using a mil2525d style file and the attributes attached to each feature within the geodatabase.\n+![Image of dictionary renderer with feature layer](FeatureLayerDictionaryRenderer.png)\n \n-![](FeatureLayerDictionaryRenderer.png)\n+## Use case\n+\n+A dictionary renderer uses a style file along with a rule engine to display advanced symbology.\n+This is useful for displaying features using precise military symbology.\n+\n+## How to use the sample\n+\n+Pan and zoom around the map. Observe the displayed military symbology on the map.\n \n ## How it works\n \n-To apply a `DictionaryRenderer` and display mil2525d graphics:\n-\n-1. Create a `Geodatabase(geodatabasePath)`.\n-    * geodatabasePath, local path to geodatabase\n-2. Load the geodatabase asynchronously, `Geodatabase.loadAsync()`.\n-    * this will allows the application to continue working while the geodatabase loads in all feature tables\n-3. Create a `SymbolDicitonary`, `SymbolDictionary(specificationType)`.\n-    * specificationType, this will be the mil2525d.stylx file\n-    * load asynchronously, `DictionarySymbol.loadAsync()`\n-4. Wait for geodatabase to completely load, `Geodatabase.addDoneLoadingListener()`.\n-5. Cycle through each `GeodatabaseFeatureTable` from geodatabase, `Geodatabase.getGeodatabaseFeatureTables()`.\n-6. Create a `FeatureLayer` from each table within the geodatabase, `FeatureLayer(GeodatabaseFeatureTable)`.\n-    * load asynchronouly, `FeatureLayer.loadAsync()`\n-7. Wait for each layer to load, `FeatureLayer.addDoneLoadingListener`.\n-8. Check if layer is last layer to load and create `Envelope` from each layer.\n-    * set this envelope to be the `Viewpoint` of the map view, `MapView.setViewpoint(new Viewpoint(Envelope))`\n-9. Add feature layer to map, `Map.getOperationalLayers().add(FeatureLayer)`.\n-10. Create `DictionaryRenderer(SymbolDictionary)` and attach to feature layer, `FeatureLayer.setRenderer(DictionaryRenderer)`.\n+1. Create a `Geodatabase` using `Geodatabase(geodatabasePath)`.\n+2. Load the geodatabase asynchronously using `Geodatabase.loadAsync()`.\n+3. Instantiate a `SymbolDicitonary`  using `SymbolDictionary(specificationType)`.\n+    * `specificationType` will be the mil2525d.stylx file.\n+4. Load the symbol dictionary asynchronously using `DictionarySymbol.loadAsync()`.\n+5. Wait for geodatabase to completely load by connecting to `Geodatabase.addDoneLoadingListener()`.\n+6. Cycle through each `GeodatabaseFeatureTable` from the geodatabase using `Geodatabase.getGeodatabaseFeatureTables()`.\n+7. Create a `FeatureLayer` from each table within the geodatabase using `FeatureLayer(GeodatabaseFeatureTable)`.\n+8. Load the feature layer asynchronously with `FeatureLayer.loadAsync()`.\n+9. Wait for each layer to load using `FeatureLayer.addDoneLoadingListener`.\n+10. After the last layer has loaded, then create a new `Envelope` from a union of the extents of all layers.\n+    * Set the envelope to be the `Viewpoint` of the map view using `MapView.setViewpoint(new Viewpoint(Envelope))`.\n+11. Add the feature layer to map using `Map.getOperationalLayers().add(FeatureLayer)`.\n+12. Create `DictionaryRenderer(SymbolDictionary)` and attach to the feature layer using `FeatureLayer.setRenderer(DictionaryRenderer)`.\n \n ## Relevant API\n \n-* ArcGISMap\n-* Basemap\n * DictionaryRenderer\n-* Envelope\n-* FeatureLayer\n-* Geodatabase\n-* GeometryEngine\n-* MapView\n * SymbolDictionary\n+\n+## Tags\n+\n+DictionaryRenderer, DictionarySymbolStyle, military, symbol", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "163ce8bd3a470d54936b2dc419c5c00c1aa5f005"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1NTQyMA==", "bodyText": "this is something we noticed with the Android refactoring: most of the guide references point to .NET. We should point it to Java, (and this should probably also have some alt text to go with it too):\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Note: You could also use the 'Services Pattern' and access the Geodatabase class via a Feature Service served up via ArcGIS Online or ArcGIS Enterprise. Instead of using the Geodatabase class to access the .geodatabase file on disk, you would use GeodatabaseSyncTask point to a Uri instead. For more information review the document: https://developers.arcgis.com/net/latest/wpf/guide/create-an-offline-layer.htm.\n          \n          \n            \n            Note: You could also use the 'Services Pattern' and access the Geodatabase class via a Feature Service served up via ArcGIS Online or ArcGIS Enterprise. Instead of using the Geodatabase class to access the .geodatabase file on disk, you would use GeodatabaseSyncTask point to a Uri instead. For more information review the document: https://developers.arcgis.com/java/latest/guide/work-with-offline-layers.htm.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/452#discussion_r395255420", "createdAt": "2020-03-19T19:03:58Z", "author": {"login": "Rachael-E"}, "path": "feature_layers/feature-layer-geodatabase/README.md", "diffHunk": "@@ -1,24 +1,43 @@\n-# Feature Layer (Geodatabase)\n+# Feature layer (geodatabase)\n \n Display features from a local geodatabase.\n \n-![](FeatureLayerGeodatabase.png)\n+![Image of feature layer geodatabase](FeatureLayerGeodatabase.png)\n \n-## How it works\n+## Use case\n+\n+Accessing data from a local geodatabase is useful when working in an environment that has an inconsistent internet connection or that does not have an internet connection at all. For example, a department of transportation field worker might source map data from a local geodatabase when conducting signage inspections in rural areas with poor network coverage. \n \n-To create a `Geodatabase` and display it as a `FeatureLayer`:\n+## How to use the sample\n+\n+Pan and zoom around the map. View the data loaded from the geodatabase.\n+\n+## How it works\n \n 1. Create a geodatabase using the provided local resource, `new Geodatabase(geodatabaseResourceUrl)`.\n-2. Wait for geodatabase to load, `Geodatabase.addDoneLoadingListener(runnable)`\n-3. Get the `Trailheads` `GeodatabaseFeatureTable` from the geodatabase, `Geodatabase.getGeodatabaseFeatureTable(tableName)`\n-4. Create feature layer using the table from above, `new FeatureLayer(geodatabaseFeatureTable)`\n-5. Add feature layer to `ArcGISMap`, `ArcGISMap.getOperationalLayers().add(featureLayer)`\n+2. Wait for geodatabase to load, `Geodatabase.addDoneLoadingListener(runnable)`.\n+3. Get the 'Trailheads' `GeodatabaseFeatureTable` from the geodatabase, `Geodatabase.getGeodatabaseFeatureTable(tableName)`.\n+4. Create feature layer using the table from above, `new FeatureLayer(geodatabaseFeatureTable)`.\n+5. Add feature layer to `ArcGISMap` with `ArcGISMap.getOperationalLayers().add(featureLayer)`.\n \n ## Relevant API\n \n-* Basemap\n * FeatureLayer\n * Geodatabase\n * GeodatabaseFeatureTable\n-* Map\n-* MapView\n+\n+## About the data\n+\n+The sample shows trailheads in the greater Los Angeles area displayed on top of a vector tile basemap.\n+\n+## Additional information\n+\n+One of the ArcGIS Runtime data set types that can be accessed via the local storage of the device (i.e. hard drive, flash drive, micro SD card, USB stick, etc.) is a mobile geodatabase. A mobile geodatabase can be provisioned for use in an ArcGIS Runtime application by ArcMap. The following provide some helpful tips on how to create a mobile geodatabase file:\n+\n+In ArcMap, choose File > Share As > ArcGIS Runtime Content from the menu items to create the .geodatabase file (see the document: http://desktop.arcgis.com/en/arcmap/latest/map/working-with-arcmap/creating-arcgis-runtime-content.htm). \n+\n+Note: You could also use the 'Services Pattern' and access the Geodatabase class via a Feature Service served up via ArcGIS Online or ArcGIS Enterprise. Instead of using the Geodatabase class to access the .geodatabase file on disk, you would use GeodatabaseSyncTask point to a Uri instead. For more information review the document: https://developers.arcgis.com/net/latest/wpf/guide/create-an-offline-layer.htm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "163ce8bd3a470d54936b2dc419c5c00c1aa5f005"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42fa1f67b5c3a61af01b2051ad9812f2e0c405b6", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/42fa1f67b5c3a61af01b2051ad9812f2e0c405b6", "committedDate": "2020-03-25T13:39:18Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Rachael Ellen <36415565+Rachael-E@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c620521ee75552d5dfc59078aeaee48d6b754230", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/c620521ee75552d5dfc59078aeaee48d6b754230", "committedDate": "2020-03-25T13:44:16Z", "message": "update with review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6ce70a293e3c116c20b3a1e30d4dc9dada208a4", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/f6ce70a293e3c116c20b3a1e30d4dc9dada208a4", "committedDate": "2020-03-25T13:46:29Z", "message": "Merge branch 'feature_layers_update_readmes_2' of github.com:Esri/arcgis-runtime-samples-java into feature_layers_update_readmes_2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMTg1MTU2", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/452#pullrequestreview-381185156", "createdAt": "2020-03-25T14:12:24Z", "commit": {"oid": "f6ce70a293e3c116c20b3a1e30d4dc9dada208a4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a32daa393bd2890821fa15feb56edb595291af8a", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/a32daa393bd2890821fa15feb56edb595291af8a", "committedDate": "2020-03-27T09:35:44Z", "message": "Update README.md"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3536, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}