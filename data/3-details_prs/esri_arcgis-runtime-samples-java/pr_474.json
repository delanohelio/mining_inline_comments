{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NTA1ODE2", "number": 474, "title": "Update readmes to match common design (Network Analysis category) 1/2", "bodyText": "", "createdAt": "2020-04-21T07:59:01Z", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/474", "merged": true, "mergeCommit": {"oid": "e8fd0cd0ab20a31d62cadd821ca2eb7813d61032"}, "closed": true, "closedAt": "2020-04-24T11:17:06Z", "author": {"login": "JonLavi"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZuvLOgH2gAyNDA2NTA1ODE2OmZmM2E1OWNlNzQ2MGU5NzgxNjFhZmJmNTFiOTdiOTRmN2ZlMmRmYTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcavnPpgFqTM5OTg1NjQzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ff3a59ce7460e978161afbf51b97b94f7fe2dfa6", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/ff3a59ce7460e978161afbf51b97b94f7fe2dfa6", "committedDate": "2020-04-21T07:41:21Z", "message": "update readmes to match common design"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTk4MjU0", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/474#pullrequestreview-398998254", "createdAt": "2020-04-23T11:15:20Z", "commit": {"oid": "ff3a59ce7460e978161afbf51b97b94f7fe2dfa6"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToxNToyMFrOGKj_hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToyNzo0M1rOGKkbqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcyODY0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Quickly and accurately determining the most efficient route between a location and a facility is a frequently encountered task. For example, a city's fire department may need to know which firestations in the vicinity offer the quickest routes to multiple fires. Solving for the closest fire station to the fire's location using an impedance of \"travel time\" would provide this information.\n          \n          \n            \n            Quickly and accurately determining the most efficient route between a location and a facility is a frequently encountered task. For example, a city's fire department may need to know which fire stations in the vicinity offer the quickest routes to multiple fires. Solving for the closest fire station to the fire's location using an impedance of \"travel time\" would provide this information.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/474#discussion_r413728646", "createdAt": "2020-04-23T11:15:20Z", "author": {"login": "Rachael-E"}, "path": "network_analysis/closest-facility-static/README.md", "diffHunk": "@@ -1,36 +1,30 @@\n-# Closest Facility (Static)\n+# Closest facility (static)\n \n Find routes from several locations to the respective closest facility.\n \n-![](ClosestFacilityStatic.png)\n+![Image of find closest facility static](ClosestFacilityStatic.png)\n \n ## Use case\n \n-Quickly and accurately determining the most efficient route between a location and a facility is a frequently encountered task (e.g. emergency services).\n+Quickly and accurately determining the most efficient route between a location and a facility is a frequently encountered task. For example, a city's fire department may need to know which firestations in the vicinity offer the quickest routes to multiple fires. Solving for the closest fire station to the fire's location using an impedance of \"travel time\" would provide this information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3a59ce7460e978161afbf51b97b94f7fe2dfa6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczMTI2MQ==", "bodyText": "adjusting this to reflect the API class name even though grammatically it looks wrong!\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            3. Build a list of all `Facilities` and `Incidents`:\n          \n          \n            \n            3. Build a list of all `Facility`s and `Incident`s:", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/474#discussion_r413731261", "createdAt": "2020-04-23T11:19:47Z", "author": {"login": "Rachael-E"}, "path": "network_analysis/closest-facility-static/README.md", "diffHunk": "@@ -1,36 +1,30 @@\n-# Closest Facility (Static)\n+# Closest facility (static)\n \n Find routes from several locations to the respective closest facility.\n \n-![](ClosestFacilityStatic.png)\n+![Image of find closest facility static](ClosestFacilityStatic.png)\n \n ## Use case\n \n-Quickly and accurately determining the most efficient route between a location and a facility is a frequently encountered task (e.g. emergency services).\n+Quickly and accurately determining the most efficient route between a location and a facility is a frequently encountered task. For example, a city's fire department may need to know which firestations in the vicinity offer the quickest routes to multiple fires. Solving for the closest fire station to the fire's location using an impedance of \"travel time\" would provide this information.\n \n ## How to use the sample\n \n-Click the 'Solve Routes' button to determine and display the route from each incident (fire) to the nearest facility (fire station).\n+Click the 'Solve Routes' button to solve and display the route from each incident (fire) to the nearest facility (fire station).\n \n ## How it works\n \n-To display a `ClosestFacilityRoute` between several incidents and facilities:\n-\n-1. Create a `ClosestFacilityTask` using a Url from an online service.\n+1. Create a `ClosestFacilityTask` using a URL from an online service.\n 2. Get the default set of `ClosestFacilityParameters` from the task: `closestFacilityTask.createDefaultParametersAsync().get()`.\n-3. Build a list of all Facilities and Incidents:\n-    * Create a `FeatureTable` using `ServiceFeatureTable(Uri)`.\n-    * Query the `FeatureTable` for all `Feature`s using `.queryFeaturesAsync(queryParameters)`.\n-    * Iterate over the result and add each `Feature` to a `List`, instantiating the feature as a `Facility` or `Incident`.\n+3. Build a list of all `Facilities` and `Incidents`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3a59ce7460e978161afbf51b97b94f7fe2dfa6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczMTM3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * Query the `FeatureTable` for all `Features` using `queryFeaturesAsync(queryParameters)`.\n          \n          \n            \n              * Query the `FeatureTable` for all `Feature`s using `queryFeaturesAsync(queryParameters)`.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/474#discussion_r413731374", "createdAt": "2020-04-23T11:19:59Z", "author": {"login": "Rachael-E"}, "path": "network_analysis/closest-facility-static/README.md", "diffHunk": "@@ -1,36 +1,30 @@\n-# Closest Facility (Static)\n+# Closest facility (static)\n \n Find routes from several locations to the respective closest facility.\n \n-![](ClosestFacilityStatic.png)\n+![Image of find closest facility static](ClosestFacilityStatic.png)\n \n ## Use case\n \n-Quickly and accurately determining the most efficient route between a location and a facility is a frequently encountered task (e.g. emergency services).\n+Quickly and accurately determining the most efficient route between a location and a facility is a frequently encountered task. For example, a city's fire department may need to know which firestations in the vicinity offer the quickest routes to multiple fires. Solving for the closest fire station to the fire's location using an impedance of \"travel time\" would provide this information.\n \n ## How to use the sample\n \n-Click the 'Solve Routes' button to determine and display the route from each incident (fire) to the nearest facility (fire station).\n+Click the 'Solve Routes' button to solve and display the route from each incident (fire) to the nearest facility (fire station).\n \n ## How it works\n \n-To display a `ClosestFacilityRoute` between several incidents and facilities:\n-\n-1. Create a `ClosestFacilityTask` using a Url from an online service.\n+1. Create a `ClosestFacilityTask` using a URL from an online service.\n 2. Get the default set of `ClosestFacilityParameters` from the task: `closestFacilityTask.createDefaultParametersAsync().get()`.\n-3. Build a list of all Facilities and Incidents:\n-    * Create a `FeatureTable` using `ServiceFeatureTable(Uri)`.\n-    * Query the `FeatureTable` for all `Feature`s using `.queryFeaturesAsync(queryParameters)`.\n-    * Iterate over the result and add each `Feature` to a `List`, instantiating the feature as a `Facility` or `Incident`.\n+3. Build a list of all `Facilities` and `Incidents`:\n+  * Create a `FeatureTable` using `ServiceFeatureTable(Uri)`.\n+  * Query the `FeatureTable` for all `Features` using `queryFeaturesAsync(queryParameters)`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3a59ce7460e978161afbf51b97b94f7fe2dfa6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczMjQ4NA==", "bodyText": "we've been using double quotes elsewhere for buttons so might as well continue that!\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For simplicity, the sample comes loaded with a start and end stop. You can tap on the 'Find Route' button to display a route between these stops. Once the route is generated, turn-by-turn directions are shown in a list. You can use the 'Reset' button to reset the sample.\n          \n          \n            \n            For simplicity, the sample comes loaded with a start and end stop. You can tap on the \"Find Route\" button to display a route between these stops. Once the route is generated, turn-by-turn directions are shown in a list. You can use the \"Reset\" button to reset the sample.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/474#discussion_r413732484", "createdAt": "2020-04-23T11:21:46Z", "author": {"login": "Rachael-E"}, "path": "network_analysis/find-route/README.md", "diffHunk": "@@ -1,36 +1,35 @@\n-# Find Route\n+# Find route\n \n-Get a route between two stops with directions.\n+Display directions for a route between two points.\n \n-![](FindRoute.png)\n+![Image of find route](FindRoute.png)\n+\n+## Use case\n+\n+Find routes with driving directions between any number of locations. You might use the ArcGIS platform to create a custom network for routing on a private roads.\n \n ## How to use the sample\n \n-For simplicity, the sample comes loaded with a start and end stop. You can click on the Find route button to get a route between these stops. Once the route is generated, the DirectionMessages show step by step directions in the directions list.\n+For simplicity, the sample comes loaded with a start and end stop. You can tap on the 'Find Route' button to display a route between these stops. Once the route is generated, turn-by-turn directions are shown in a list. You can use the 'Reset' button to reset the sample.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3a59ce7460e978161afbf51b97b94f7fe2dfa6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczMzY5NA==", "bodyText": "updating this to reflect correctly the name of our method\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            3. Set `returnDirections` on the parameters to true.\n          \n          \n            \n            3. Use `setReturnDirections` on the parameters and set to true.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/474#discussion_r413733694", "createdAt": "2020-04-23T11:23:54Z", "author": {"login": "Rachael-E"}, "path": "network_analysis/find-route/README.md", "diffHunk": "@@ -1,36 +1,35 @@\n-# Find Route\n+# Find route\n \n-Get a route between two stops with directions.\n+Display directions for a route between two points.\n \n-![](FindRoute.png)\n+![Image of find route](FindRoute.png)\n+\n+## Use case\n+\n+Find routes with driving directions between any number of locations. You might use the ArcGIS platform to create a custom network for routing on a private roads.\n \n ## How to use the sample\n \n-For simplicity, the sample comes loaded with a start and end stop. You can click on the Find route button to get a route between these stops. Once the route is generated, the DirectionMessages show step by step directions in the directions list.\n+For simplicity, the sample comes loaded with a start and end stop. You can tap on the 'Find Route' button to display a route between these stops. Once the route is generated, turn-by-turn directions are shown in a list. You can use the 'Reset' button to reset the sample.\n \n ## How it works\n \n-To display a `Route` using a `RouteTask`:\n-\n-1. Create an `ArcGISMap`.\n-2. Add the map to the `MapView`, `MapView.setMap()`.\n-3. Create a route task using an URL from an online service.\n-    * online route task solves a route from an online route service\n-4. Set the `RouteParameters` to find a route between the `Stop`s.\n-5. Get the route using th. `RouteTask.solveAsync(routeParameters)`.\n-6. Display the route by adding it to a `GraphicsOverlay.getGraphics().add()`.\n-7. Show the step by step `DirectionMessage`s using the `Route.getDirectionManeuvers()` method.\n+1. Create a `RouteTask` using a URL to an online route service.\n+2. Generate default `RouteParameters` using `routeTask.createDefaultParametersAsync()`.\n+3. Set `returnDirections` on the parameters to true.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3a59ce7460e978161afbf51b97b94f7fe2dfa6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczNTg0OA==", "bodyText": "does this suggestion make sense? just want to get the API ref names right here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            4. Add `Stop`s to the parameters `stops` collection for each destination.\n          \n          \n            \n            4. Use `setStops` on the parameters to add `Stop`s to its stops collection for each destination.", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/474#discussion_r413735848", "createdAt": "2020-04-23T11:27:43Z", "author": {"login": "Rachael-E"}, "path": "network_analysis/find-route/README.md", "diffHunk": "@@ -1,36 +1,35 @@\n-# Find Route\n+# Find route\n \n-Get a route between two stops with directions.\n+Display directions for a route between two points.\n \n-![](FindRoute.png)\n+![Image of find route](FindRoute.png)\n+\n+## Use case\n+\n+Find routes with driving directions between any number of locations. You might use the ArcGIS platform to create a custom network for routing on a private roads.\n \n ## How to use the sample\n \n-For simplicity, the sample comes loaded with a start and end stop. You can click on the Find route button to get a route between these stops. Once the route is generated, the DirectionMessages show step by step directions in the directions list.\n+For simplicity, the sample comes loaded with a start and end stop. You can tap on the 'Find Route' button to display a route between these stops. Once the route is generated, turn-by-turn directions are shown in a list. You can use the 'Reset' button to reset the sample.\n \n ## How it works\n \n-To display a `Route` using a `RouteTask`:\n-\n-1. Create an `ArcGISMap`.\n-2. Add the map to the `MapView`, `MapView.setMap()`.\n-3. Create a route task using an URL from an online service.\n-    * online route task solves a route from an online route service\n-4. Set the `RouteParameters` to find a route between the `Stop`s.\n-5. Get the route using th. `RouteTask.solveAsync(routeParameters)`.\n-6. Display the route by adding it to a `GraphicsOverlay.getGraphics().add()`.\n-7. Show the step by step `DirectionMessage`s using the `Route.getDirectionManeuvers()` method.\n+1. Create a `RouteTask` using a URL to an online route service.\n+2. Generate default `RouteParameters` using `routeTask.createDefaultParametersAsync()`.\n+3. Set `returnDirections` on the parameters to true.\n+4. Add `Stop`s to the parameters `stops` collection for each destination.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3a59ce7460e978161afbf51b97b94f7fe2dfa6"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d3c61778f5a427a5b335695d954ebeecd7b17c4", "author": {"user": {"login": "JonLavi", "name": "Jonathan Lavi"}}, "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/9d3c61778f5a427a5b335695d954ebeecd7b17c4", "committedDate": "2020-04-23T16:28:46Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Rachael Ellen <36415565+Rachael-E@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODU2NDMy", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/474#pullrequestreview-399856432", "createdAt": "2020-04-24T11:16:31Z", "commit": {"oid": "9d3c61778f5a427a5b335695d954ebeecd7b17c4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3306, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}