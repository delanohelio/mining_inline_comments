{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzOTAyNTg4", "number": 963, "title": "Fixes #962: Reuse Ciphers vs. creating them new each time...", "bodyText": "Attempt to reuse ciphers vs. creating them each time in the record layer.  The ciphers are used on saveRecord and loadRecord.", "createdAt": "2020-06-12T22:04:21Z", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963", "merged": true, "mergeCommit": {"oid": "4a09514c36ac2594f8bc7cbc8d8b8b453496c9f8"}, "closed": true, "closedAt": "2020-06-22T16:24:03Z", "author": {"login": "jleach4"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqqg9hgBqjM0NDAxMDUyNjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABctzX2agFqTQzNTA4NDg2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e8303cfe6158fc27d632ce27fb21411c825249d", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/7e8303cfe6158fc27d632ce27fb21411c825249d", "committedDate": "2020-06-12T22:03:09Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}, "afterCommit": {"oid": "b17187a65e5f701cf837e87a8b02bf3401bdec45", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/b17187a65e5f701cf837e87a8b02bf3401bdec45", "committedDate": "2020-06-12T22:22:25Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b17187a65e5f701cf837e87a8b02bf3401bdec45", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/b17187a65e5f701cf837e87a8b02bf3401bdec45", "committedDate": "2020-06-12T22:22:25Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}, "afterCommit": {"oid": "a008dfd0835f1e08749d774ac7cb55a8eb91ef33", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/a008dfd0835f1e08749d774ac7cb55a8eb91ef33", "committedDate": "2020-06-12T22:26:55Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a008dfd0835f1e08749d774ac7cb55a8eb91ef33", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/a008dfd0835f1e08749d774ac7cb55a8eb91ef33", "committedDate": "2020-06-12T22:26:55Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}, "afterCommit": {"oid": "b418a63ffda588a5ee8442d891ca456d1cea4c07", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/b418a63ffda588a5ee8442d891ca456d1cea4c07", "committedDate": "2020-06-12T22:30:28Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b418a63ffda588a5ee8442d891ca456d1cea4c07", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/b418a63ffda588a5ee8442d891ca456d1cea4c07", "committedDate": "2020-06-12T22:30:28Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}, "afterCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/72b85dadd12d899208aec6c9f1753076f756dbb4", "committedDate": "2020-06-12T22:36:59Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTAwNjI4", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#pullrequestreview-430100628", "createdAt": "2020-06-13T01:12:07Z", "commit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMToxMjowN1rOGjU25Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTozNTowNFrOGjYD0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTA3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** MappedPool Class Attempts to reuse objects organized by keys.\n          \n          \n            \n            /**\n          \n          \n            \n              * MappedPool Class Attempts to reuse objects organized by keys.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439695077", "createdAt": "2020-06-13T01:12:07Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTM5Nw==", "bodyText": "I think we want to mark the API level of this class as API.Status.INTERNAL (using the stability annotations: @API(API.Status.INTERNAL)). Or, actually, package-private (for now) would probably work, though I could see us wanting to use it in more places in the future, at which point we might want to make it public but INTERNAL.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439695397", "createdAt": "2020-06-13T01:15:18Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTUwMw==", "bodyText": "Because this is a concurrent hash map instead of, say, a Guava Cache, I think this can potentially grow without bound (and therefore lead to memory leaks). I suppose that may not matter in the case of encryptors if there's only a small number of plausible algorithms in most use cases, so maybe it doesn't really matter.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439695503", "createdAt": "2020-06-13T01:16:14Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new LinkedBlockingQueue<>(DEFAULT_POOL_SIZE);\n+    protected final ConcurrentHashMap<K, Queue<V>> pool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTk1NQ==", "bodyText": "It's also not entirely obvious to me what the contract of this class is. By usage, it appears to be that you might want to reuse an object, but you might have internal state that makes it unable to be used in a thread safe manner, so the contract is: (1) get one of these instances using poll then (2) use it until you're done and (3) offer it back. So there's only one owner of the object any given time (thus preventing thread safety problems on the object), but you get re-use. That seems like a good change, but it would be nice to say that that's the intended use here.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439695955", "createdAt": "2020-06-13T01:21:03Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTA3Nw=="}, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTk4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439695983", "createdAt": "2020-06-13T01:21:17Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new LinkedBlockingQueue<>(DEFAULT_POOL_SIZE);\n+    protected final ConcurrentHashMap<K, Queue<V>> pool;\n+    private final MappedPoolProvider<K,V,E> mappedPoolProvider;\n+\n+    public MappedPool(MappedPoolProvider<K,V,E> mappedPoolProvider) {\n+        pool = new ConcurrentHashMap<>();\n+        this.mappedPoolProvider = mappedPoolProvider;\n+    }\n+\n+    public V poll(K key) throws E {\n+        Queue<V> queue = pool.computeIfAbsent(key, createQueue);\n+        V next = queue.poll();\n+        return next == null ? mappedPoolProvider.get(key) : next;\n+    }\n+\n+    public boolean offer(K key, V value) {\n+        Queue<V> queue = pool.get(key);\n+        if (queue != null) {\n+            return queue.offer(value);\n+        }\n+        return false;\n+    }\n+\n+    public List<K> getKeys() {\n+        return Collections.list(pool.keys());\n+    }\n+\n+    /**\n+     *\n+     * Warning, not a constant time operation.\n+     *\n+     * @param key key\n+     * @return size of pool\n+     */\n+    public int getPoolSize(K key) {\n+        Queue<V> queue = pool.get(key);\n+        return queue == null ? 0 : queue.size();\n+    }\n+\n+    /**\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjQ0MQ==", "bodyText": "Would it be preferable to use an ArrayBlockingQueue to avoid the garbage from objects created to maintain the linked list?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439696441", "createdAt": "2020-06-13T01:26:33Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new LinkedBlockingQueue<>(DEFAULT_POOL_SIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjYxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Tests of the MappedPool.\n          \n          \n            \n            /**\n          \n          \n            \n             * Tests of the {@link MappedPool}.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439696614", "createdAt": "2020-06-13T01:28:23Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjY1Mg==", "bodyText": "Ideally, these references to 64 would reference a constant, I suppose", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439696652", "createdAt": "2020-06-13T01:29:01Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        for (int i = 0; i < 100000; i++) {\n+            Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            assertNotNull(cipher);\n+            assertTrue(MAPPED_POOL.offer(CIPHER, cipher));\n+        }\n+        assertTrue(MAPPED_POOL.getPoolSize(CIPHER) == 1);\n+        assertTrue(MAPPED_POOL.getKeys().contains(CIPHER));\n+    }\n+\n+    @Test\n+    public void testMaxPoolSize() throws Exception {\n+        Cipher[] ciphers = new Cipher[1000];\n+        for (int i = 0; i < 1000; i++) {\n+            ciphers[i] = MAPPED_POOL.poll(CIPHER);\n+        }\n+        for (int i = 0; i < 64; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjY4MQ==", "bodyText": "Is this not a constant-time operation because LinkedBlockingQueue::size is O(n)?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439696681", "createdAt": "2020-06-13T01:29:23Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new LinkedBlockingQueue<>(DEFAULT_POOL_SIZE);\n+    protected final ConcurrentHashMap<K, Queue<V>> pool;\n+    private final MappedPoolProvider<K,V,E> mappedPoolProvider;\n+\n+    public MappedPool(MappedPoolProvider<K,V,E> mappedPoolProvider) {\n+        pool = new ConcurrentHashMap<>();\n+        this.mappedPoolProvider = mappedPoolProvider;\n+    }\n+\n+    public V poll(K key) throws E {\n+        Queue<V> queue = pool.computeIfAbsent(key, createQueue);\n+        V next = queue.poll();\n+        return next == null ? mappedPoolProvider.get(key) : next;\n+    }\n+\n+    public boolean offer(K key, V value) {\n+        Queue<V> queue = pool.get(key);\n+        if (queue != null) {\n+            return queue.offer(value);\n+        }\n+        return false;\n+    }\n+\n+    public List<K> getKeys() {\n+        return Collections.list(pool.keys());\n+    }\n+\n+    /**\n+     *\n+     * Warning, not a constant time operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NzAyMg==", "bodyText": "I think we saw problems from this computeIfAbsent locking bug (fixed in Java 9): https://bugs.openjdk.java.net/browse/JDK-8161372\nGiven that 2.9 requires a Java 11 runtime and we want to encourage people to switch to Java 11, it's possible this doesn't matter, but there was also a recent effort to remove some computeIfAbsent calls for now.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439747022", "createdAt": "2020-06-13T15:26:21Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new LinkedBlockingQueue<>(DEFAULT_POOL_SIZE);\n+    protected final ConcurrentHashMap<K, Queue<V>> pool;\n+    private final MappedPoolProvider<K,V,E> mappedPoolProvider;\n+\n+    public MappedPool(MappedPoolProvider<K,V,E> mappedPoolProvider) {\n+        pool = new ConcurrentHashMap<>();\n+        this.mappedPoolProvider = mappedPoolProvider;\n+    }\n+\n+    public V poll(K key) throws E {\n+        Queue<V> queue = pool.computeIfAbsent(key, createQueue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NzE5OQ==", "bodyText": "Is there some weird pessimal case here where this actually makes things worse? In particular, I'm trying to think if there are some use cases where this, like, turns an average object from something that generally lives in the \"short lived\" JVM memory to something that graduates to the older generation before being dereferenced. Maybe something where, like, there are \"bursts\" of activity to the thing being cached? I'm not sure, though.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439747199", "createdAt": "2020-06-13T15:29:21Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new LinkedBlockingQueue<>(DEFAULT_POOL_SIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NzUwMw==", "bodyText": "I'm not sure I see the utility here, in this test, of performing the operation 100000 times", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439747503", "createdAt": "2020-06-13T15:34:26Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        for (int i = 0; i < 100000; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NzUzNg==", "bodyText": "It seems like this test (or another) should test that the returned cipher is the same (i.e., pointer equal) to one previously offered (using the assertSame assertion).", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439747536", "createdAt": "2020-06-13T15:35:04Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        for (int i = 0; i < 100000; i++) {\n+            Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            assertNotNull(cipher);\n+            assertTrue(MAPPED_POOL.offer(CIPHER, cipher));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/72b85dadd12d899208aec6c9f1753076f756dbb4", "committedDate": "2020-06-12T22:36:59Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}, "afterCommit": {"oid": "deb6a32683f907b55a210a0f4440e8357e4405ee", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/deb6a32683f907b55a210a0f4440e8357e4405ee", "committedDate": "2020-06-15T18:46:09Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTY1Nzk0", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#pullrequestreview-430965794", "createdAt": "2020-06-15T20:23:17Z", "commit": {"oid": "deb6a32683f907b55a210a0f4440e8357e4405ee"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDoyMzoxOFrOGkBbdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDozMjo1MlrOGkBumA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNTMzMw==", "bodyText": "Could you remove the changes to this file? They don't look wrong to me, but I don't think we want to couple these together.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440425333", "createdAt": "2020-06-15T20:23:18Z", "author": {"login": "alecgrieser"}, "path": ".idea/compiler.xml", "diffHunk": "@@ -64,4 +78,4 @@\n       <module name=\"fdb-record-layer_test\" target=\"1.8\" />\n     </bytecodeTargetLevel>\n   </component>\n-</project>\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6a32683f907b55a210a0f4440e8357e4405ee"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNzM3MQ==", "bodyText": "Is there some weird pessimal case here where this actually makes things worse? In particular, I'm trying to think if there are some use cases where this, like, turns an average object from something that generally lives in the \"short lived\" JVM memory to something that graduates to the older generation before being dereferenced. Maybe something where, like, there are \"bursts\" of activity to the thing being cached? I'm not sure, though.\n(This was commented on an earlier version of the code, but I'm copying it here to avoid having the comment linger on outdated code.)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440427371", "createdAt": "2020-06-15T20:27:19Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import com.apple.foundationdb.annotation.API;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * MappedPool Class Attempts to reuse objects organized by keys.\n+ * This class can be used for objects that require thread safety but our expensive to create.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+@API(API.Status.EXPERIMENTAL)\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new ArrayBlockingQueue<>(DEFAULT_POOL_SIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6a32683f907b55a210a0f4440e8357e4405ee"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNzkwMg==", "bodyText": "This should either use assertEquals or assertSame.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440427902", "createdAt": "2020-06-15T20:28:18Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        Cipher lastCipher = null;\n+        for (int i = 0; i < 100; i++) {\n+            Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            if (lastCipher != null) {\n+                assertTrue(cipher.equals(lastCipher));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6a32683f907b55a210a0f4440e8357e4405ee"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyODAzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(MAPPED_POOL.getPoolSize(CIPHER) == 1);\n          \n          \n            \n                    assertEquals(1, MAPPED_POOL.getPoolSize(CIPHER));\n          \n      \n    \n    \n  \n\n(This will also need to import assertEquals, so this change itself won't compile.)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440428031", "createdAt": "2020-06-15T20:28:32Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        Cipher lastCipher = null;\n+        for (int i = 0; i < 100; i++) {\n+            Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            if (lastCipher != null) {\n+                assertTrue(cipher.equals(lastCipher));\n+                lastCipher = cipher;\n+            }\n+            assertNotNull(cipher);\n+            assertTrue(MAPPED_POOL.offer(CIPHER, cipher));\n+        }\n+        assertTrue(MAPPED_POOL.getPoolSize(CIPHER) == 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6a32683f907b55a210a0f4440e8357e4405ee"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyOTY3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(MAPPED_POOL.getKeys().contains(CIPHER));\n          \n          \n            \n                    assertThat(MAPPED_POOL.getKeys(), hasItem(CIPHER));\n          \n      \n    \n    \n  \n\nThis will need to import assertThat and Matchers.hasItem", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440429673", "createdAt": "2020-06-15T20:31:47Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        Cipher lastCipher = null;\n+        for (int i = 0; i < 100; i++) {\n+            Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            if (lastCipher != null) {\n+                assertTrue(cipher.equals(lastCipher));\n+                lastCipher = cipher;\n+            }\n+            assertNotNull(cipher);\n+            assertTrue(MAPPED_POOL.offer(CIPHER, cipher));\n+        }\n+        assertTrue(MAPPED_POOL.getPoolSize(CIPHER) == 1);\n+        assertTrue(MAPPED_POOL.getKeys().contains(CIPHER));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6a32683f907b55a210a0f4440e8357e4405ee"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyOTg0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(MAPPED_POOL.getPoolSize(CIPHER) == 64);\n          \n          \n            \n                    assertEquals(64, MAPPED_POOL.getPoolSize(CIPHER));", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440429847", "createdAt": "2020-06-15T20:32:08Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        Cipher lastCipher = null;\n+        for (int i = 0; i < 100; i++) {\n+            Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            if (lastCipher != null) {\n+                assertTrue(cipher.equals(lastCipher));\n+                lastCipher = cipher;\n+            }\n+            assertNotNull(cipher);\n+            assertTrue(MAPPED_POOL.offer(CIPHER, cipher));\n+        }\n+        assertTrue(MAPPED_POOL.getPoolSize(CIPHER) == 1);\n+        assertTrue(MAPPED_POOL.getKeys().contains(CIPHER));\n+    }\n+\n+    @Test\n+    public void testMaxPoolSize() throws Exception {\n+        Cipher[] ciphers = new Cipher[1000];\n+        for (int i = 0; i < 1000; i++) {\n+            ciphers[i] = MAPPED_POOL.poll(CIPHER);\n+        }\n+        for (int i = 0; i < 64; i++) {\n+            assertTrue(MAPPED_POOL.offer(CIPHER, ciphers[i]));\n+        }\n+        for (int i = 64; i < 1000; i++) {\n+            assertFalse(MAPPED_POOL.offer(CIPHER, ciphers[i]));\n+        }\n+        assertTrue(MAPPED_POOL.getPoolSize(CIPHER) == 64);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6a32683f907b55a210a0f4440e8357e4405ee"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMDIzMg==", "bodyText": "I think the change to have it check the lastCipher was aiming to do that, so it's possible that this is resolved (or almost resolved).", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440430232", "createdAt": "2020-06-15T20:32:52Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        for (int i = 0; i < 100000; i++) {\n+            Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            assertNotNull(cipher);\n+            assertTrue(MAPPED_POOL.offer(CIPHER, cipher));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NzUzNg=="}, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "deb6a32683f907b55a210a0f4440e8357e4405ee", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/deb6a32683f907b55a210a0f4440e8357e4405ee", "committedDate": "2020-06-15T18:46:09Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}, "afterCommit": {"oid": "6dbe9dc502f0aa52442a504952a3d9e417e7746e", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/6dbe9dc502f0aa52442a504952a3d9e417e7746e", "committedDate": "2020-06-16T16:49:23Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6dbe9dc502f0aa52442a504952a3d9e417e7746e", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/6dbe9dc502f0aa52442a504952a3d9e417e7746e", "committedDate": "2020-06-16T16:49:23Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}, "afterCommit": {"oid": "df14c33a8e77c00d5f519761a7713401f63062aa", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/df14c33a8e77c00d5f519761a7713401f63062aa", "committedDate": "2020-06-16T20:15:24Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODg2MDIx", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#pullrequestreview-431886021", "createdAt": "2020-06-16T20:57:48Z", "commit": {"oid": "df14c33a8e77c00d5f519761a7713401f63062aa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDo1Nzo0OFrOGks6Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDo1ODoyOFrOGks7qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNzc0Ng==", "bodyText": "Any opinion on this?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r441137746", "createdAt": "2020-06-16T20:57:48Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new LinkedBlockingQueue<>(DEFAULT_POOL_SIZE);\n+    protected final ConcurrentHashMap<K, Queue<V>> pool;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTUwMw=="}, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzODA4OA==", "bodyText": "This feels more like assertSame to me than assertEquals, but it's possible those are the same on Ciphers.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r441138088", "createdAt": "2020-06-16T20:58:28Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        Cipher lastCipher = null;\n+        for (int i = 0; i < 100; i++) {\n+            Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            if (lastCipher != null) {\n+                assertEquals(cipher, lastCipher);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df14c33a8e77c00d5f519761a7713401f63062aa"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df14c33a8e77c00d5f519761a7713401f63062aa", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/df14c33a8e77c00d5f519761a7713401f63062aa", "committedDate": "2020-06-16T20:15:24Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}, "afterCommit": {"oid": "8768c99bf79adc299bc1335809c82979b040df0a", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/8768c99bf79adc299bc1335809c82979b040df0a", "committedDate": "2020-06-17T18:31:33Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjkwNTQx", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#pullrequestreview-432690541", "createdAt": "2020-06-17T19:00:31Z", "commit": {"oid": "8768c99bf79adc299bc1335809c82979b040df0a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTowMDozMlrOGlTaMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTowMjozMlrOGlTedw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2ODQ5OQ==", "bodyText": "Looks like this is still outstanding.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r441768499", "createdAt": "2020-06-17T19:00:32Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjYxNA=="}, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2OTU5MQ==", "bodyText": "Hm, I see. I'm also willing to be flexible here, though I'm still a little concerned on a memory leak if there's a bug or something that results in too many keys being created. But if it makes a big difference on a hot path, that's fine, too.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r441769591", "createdAt": "2020-06-17T19:02:32Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new LinkedBlockingQueue<>(DEFAULT_POOL_SIZE);\n+    protected final ConcurrentHashMap<K, Queue<V>> pool;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTUwMw=="}, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8768c99bf79adc299bc1335809c82979b040df0a", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/8768c99bf79adc299bc1335809c82979b040df0a", "committedDate": "2020-06-17T18:31:33Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}, "afterCommit": {"oid": "ad28e6b93e115a79e40732ba3095bef46e5a11e6", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/ad28e6b93e115a79e40732ba3095bef46e5a11e6", "committedDate": "2020-06-17T20:00:25Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad28e6b93e115a79e40732ba3095bef46e5a11e6", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/ad28e6b93e115a79e40732ba3095bef46e5a11e6", "committedDate": "2020-06-17T20:00:25Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}, "afterCommit": {"oid": "f6b71ad44659424b1e6db13f2e2638b6c12f527d", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/f6b71ad44659424b1e6db13f2e2638b6c12f527d", "committedDate": "2020-06-17T20:06:37Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6b71ad44659424b1e6db13f2e2638b6c12f527d", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/f6b71ad44659424b1e6db13f2e2638b6c12f527d", "committedDate": "2020-06-17T20:06:37Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}, "afterCommit": {"oid": "ad28e6b93e115a79e40732ba3095bef46e5a11e6", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/ad28e6b93e115a79e40732ba3095bef46e5a11e6", "committedDate": "2020-06-17T20:00:25Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3be139d26a7782cf672677097450f5187199790a", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/3be139d26a7782cf672677097450f5187199790a", "committedDate": "2020-06-18T17:20:36Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad28e6b93e115a79e40732ba3095bef46e5a11e6", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/ad28e6b93e115a79e40732ba3095bef46e5a11e6", "committedDate": "2020-06-17T20:00:25Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}, "afterCommit": {"oid": "3be139d26a7782cf672677097450f5187199790a", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/3be139d26a7782cf672677097450f5187199790a", "committedDate": "2020-06-18T17:20:36Z", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTE4NjYx", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#pullrequestreview-433518661", "createdAt": "2020-06-18T17:55:08Z", "commit": {"oid": "3be139d26a7782cf672677097450f5187199790a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzo1NTowOFrOGl6KwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzo1NTowOFrOGl6KwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMzUyMA==", "bodyText": "Okay, looks like this just still needs to be cleaned up.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r442403520", "createdAt": "2020-06-18T17:55:08Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjYxNA=="}, "originalCommit": {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52084f31973d5feb061b4664cc069d4f40a4ac73", "author": {"user": {"login": "jleach4", "name": "John Leach"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/52084f31973d5feb061b4664cc069d4f40a4ac73", "committedDate": "2020-06-18T21:06:57Z", "message": "Update fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n\nCo-authored-by: Alec Grieser <alloc@apple.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjQ4MTkx", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#pullrequestreview-433648191", "createdAt": "2020-06-18T21:07:42Z", "commit": {"oid": "52084f31973d5feb061b4664cc069d4f40a4ac73"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDg0ODYw", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#pullrequestreview-435084860", "createdAt": "2020-06-22T16:23:53Z", "commit": {"oid": "52084f31973d5feb061b4664cc069d4f40a4ac73"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2624, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}