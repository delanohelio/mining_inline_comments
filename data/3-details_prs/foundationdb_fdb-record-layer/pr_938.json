{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0ODYzNTI1", "number": 938, "title": "Resolves #937: Merge PlannerExpression and RelationalPlannerExpression", "bodyText": "The experimental planner has grown a variety of class hierarchies that don't need to be distinct. In particular, the concept of a PlannerExpression (i.e., an entity that is memoized in the Cascades memo data structure) and RelationalPlannerExpression (i.e., an entity that transforms data flow) don't need to be distinct.\nThe only other PlannerExpressions at the moment are the predicate AST interfaces QueryComponent and QueryPredicate, which really don't need to be memoized.\nThis cleanup will substantially simplify the implementation of existential quantifiers.\nThis change is actually much less substantial than it looks. It's broken into several commits:\n\n63149e7 Resolves #805: removes the PlannerExpression interface from QueryComponent, which isn't going to be used in the experimental planner any more.\n86ffe5c removes the PlannerExpression interface from QueryPredicate, and introduces a new type of ExpressionMatcher that matches a predicate that is not a PlannerExpression.\n027ff80 cleans up the ExpressionRef interfaces. It does not merge ExpressionRef and GroupExpressionRef because it is nice to have an interface that doesn't support the internal mutation methods.\n2988959 merges RelationalPlannerExpression with PlannerExpression to form the new RelationalExpression interface.", "createdAt": "2020-05-07T18:58:49Z", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938", "merged": true, "mergeCommit": {"oid": "2c13e42cbed8ad4ba624dde73a9a5c22e65a0383"}, "closed": true, "closedAt": "2020-05-12T19:05:57Z", "author": {"login": "nschiefer"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceB7bzAH2gAyNDE0ODYzNTI1OjYzMTQ5ZTc4OTJhYjE2MDcyYWVmNTA4Y2RjZGQ5YmVmODliNjVjYmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgpHKBgFqTQxMDMzOTc0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "63149e7892ab16072aef508cdcdd9bef89b65cbb", "author": {"user": {"login": "nschiefer", "name": "Nicholas Schiefer"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/63149e7892ab16072aef508cdcdd9bef89b65cbb", "committedDate": "2020-05-04T16:18:38Z", "message": "Remove PlannerExpression from QueryComponent."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86ffe5c129f985dcc48f740f3ccba0565f5a4515", "author": {"user": {"login": "nschiefer", "name": "Nicholas Schiefer"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/86ffe5c129f985dcc48f740f3ccba0565f5a4515", "committedDate": "2020-05-04T16:18:43Z", "message": "Remove PlannerExpression from QueryPredicate.\n\nAdd new matchers for QueryPredicates outside of the PlannerExpression\ngraph."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "027ff80ff1e2b04a894ef5c67b80f01429804423", "author": {"user": {"login": "nschiefer", "name": "Nicholas Schiefer"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/027ff80ff1e2b04a894ef5c67b80f01429804423", "committedDate": "2020-05-04T16:18:43Z", "message": "Eliminate SingleExpressionRef and MutableExpressionRef."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29889596bd400bab9953863431f9b1b40d31077b", "author": {"user": {"login": "nschiefer", "name": "Nicholas Schiefer"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/29889596bd400bab9953863431f9b1b40d31077b", "committedDate": "2020-05-07T18:55:04Z", "message": "Resolves #937: Merge RelationalPlannerExpression and PlannerExpression."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODA4NTUy", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#pullrequestreview-407808552", "createdAt": "2020-05-07T20:23:39Z", "commit": {"oid": "63149e7892ab16072aef508cdcdd9bef89b65cbb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDoyMzozOVrOGSO4bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNTowMzoyOVrOGSoxng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3MTM3Mg==", "bodyText": "Should this be removed entirely?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#discussion_r421771372", "createdAt": "2020-05-07T20:23:39Z", "author": {"login": "ScottDugas"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/query/plan/temp/matchers/ExpressionMatcherTest.java", "diffHunk": "@@ -61,11 +61,10 @@\n public class ExpressionMatcherTest {\n     private static List<ExpressionMatcher<? extends Bindable>> existingMatchers = ImmutableList.of(\n             TypeMatcher.of(RecordQueryIndexPlan.class),\n-            TypeMatcher.of(QueryComponent.class),\n             TypeMatcher.of(RelationalPlannerExpression.class));\n     private static List<Bindable> existingBindables = ImmutableList.of(\n             new RecordQueryIndexPlan(\"fake_index\", IndexScanType.BY_VALUE, ScanComparisons.EMPTY, false),\n-            Query.field(\"fake_field\").equalsParameter(\"x\"),\n+            //Query.field(\"fake_field\").equalsParameter(\"x\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63149e7892ab16072aef508cdcdd9bef89b65cbb"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3MjgwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @param <T> tood\n          \n          \n            \n             * @param <T> the type of {@link RelationalExpressionWithPredicate} to match against", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#discussion_r422172804", "createdAt": "2020-05-08T14:24:00Z", "author": {"login": "ScottDugas"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/matchers/TypeWithPredicateMatcher.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * TypeWithPredicateMatcher.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp.matchers;\n+\n+import com.apple.foundationdb.record.query.plan.temp.Bindable;\n+import com.apple.foundationdb.record.query.plan.temp.PlannerExpression;\n+import com.apple.foundationdb.record.query.plan.temp.PlannerExpressionWithPredicate;\n+import com.apple.foundationdb.record.query.predicates.QueryPredicate;\n+import com.google.common.collect.ImmutableList;\n+\n+import javax.annotation.Nonnull;\n+import java.util.stream.Stream;\n+\n+/**\n+ * TODO.\n+ * @param <T> tood", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86ffe5c129f985dcc48f740f3ccba0565f5a4515"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3OTU1Ng==", "bodyText": "This could be PlannerExpressionWithPredicate instead of LogicalFilterExpression, right? But that would require a withOtherPredicate method on PlannerExpressionWithPredicate", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#discussion_r422179556", "createdAt": "2020-05-08T14:35:48Z", "author": {"login": "ScottDugas"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/rules/FlattenNestedAndPredicateRule.java", "diffHunk": "@@ -56,25 +60,31 @@\n  * </code>\n  */\n @API(API.Status.EXPERIMENTAL)\n-public class FlattenNestedAndPredicateRule extends PlannerRule<AndPredicate> {\n-    private static final ExpressionMatcher<ExpressionRef<QueryPredicate>> andChildrenMatcher = ReferenceMatcher.anyRef();\n-    private static final ReferenceMatcher<QueryPredicate> otherInnerComponentsMatcher = ReferenceMatcher.anyRef();\n-    private static final ExpressionMatcher<AndPredicate> root = TypeMatcher.of(AndPredicate.class,\n-            AnyChildWithRestMatcher.anyMatchingWithRest(\n-                    TypeMatcher.of(AndPredicate.class, AllChildrenMatcher.allMatching(andChildrenMatcher)),\n-                    otherInnerComponentsMatcher));\n+public class FlattenNestedAndPredicateRule extends PlannerRule<LogicalFilterExpression> {\n+    private static final ExpressionMatcher<QueryPredicate> andChildrenMatcher = TypeMatcher.of(QueryPredicate.class, AnyChildrenMatcher.ANY);\n+    private static final ExpressionMatcher<QueryPredicate> otherInnerComponentsMatcher = TypeMatcher.of(QueryPredicate.class, AnyChildrenMatcher.ANY);\n+    private static final ExpressionMatcher<ExpressionRef<RelationalPlannerExpression>> inner = ReferenceMatcher.anyRef();\n+    private static final ExpressionMatcher<LogicalFilterExpression> root = TypeWithPredicateMatcher.ofPredicate(LogicalFilterExpression.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86ffe5c129f985dcc48f740f3ccba0565f5a4515"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4NzUyMg==", "bodyText": "The only implementation of this is now GroupExpressionRef right? Is there a reason to keep the interface around?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#discussion_r422187522", "createdAt": "2020-05-08T14:49:50Z", "author": {"login": "ScottDugas"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/ExpressionRef.java", "diffHunk": "@@ -32,12 +32,13 @@\n \n /**\n  * This interface is used mostly as an (admittedly surmountable) barrier to rules mutating bound references directly,\n- * which is undefined behavior. Unlike {@link MutableExpressionRef}, it does not provide an <code>insert()</code> method,\n- * so the rule would need to cast the reference back to {@link MutableExpressionRef} before modifying it.\n+ * which is undefined behavior.\n  * @param <T> the type of planner expression that is contained in this reference\n  */\n @API(API.Status.EXPERIMENTAL)\n public interface ExpressionRef<T extends PlannerExpression> extends Bindable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "027ff80ff1e2b04a894ef5c67b80f01429804423"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5NTYxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * TODO.\n          \n          \n            \n             * Matches against a subclass of {@link RelationalExpressionWithPredicate} with a given matcher against the associated predicate, and a given matcher against the children.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#discussion_r422195614", "createdAt": "2020-05-08T15:03:29Z", "author": {"login": "ScottDugas"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/matchers/TypeWithPredicateMatcher.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * TypeWithPredicateMatcher.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp.matchers;\n+\n+import com.apple.foundationdb.record.query.plan.temp.Bindable;\n+import com.apple.foundationdb.record.query.plan.temp.RelationalExpressionWithPredicate;\n+import com.apple.foundationdb.record.query.plan.temp.RelationalExpression;\n+import com.apple.foundationdb.record.query.predicates.QueryPredicate;\n+import com.google.common.collect.ImmutableList;\n+\n+import javax.annotation.Nonnull;\n+import java.util.stream.Stream;\n+\n+/**\n+ * TODO.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29889596bd400bab9953863431f9b1b40d31077b"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzgyNTUz", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#pullrequestreview-408782553", "createdAt": "2020-05-10T21:16:36Z", "commit": {"oid": "29889596bd400bab9953863431f9b1b40d31077b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMToxNjozNlrOGTHqFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMjoyMTowMFrOGTIFWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwMTU4OQ==", "bodyText": "Consider to have a List<QueryPredicate> here. I am assuming that ANDs are just encoded within the QueryPredicate, but it seems to be a nice property to be a able to move the AND terms underneath around into other RelationExpressions. Sometimes, it might be even beneficial to move these terms into multiple expressions where a QueryPredicate term can exist and (e.g. for reapplication purposes, etc.). In those cases it would become necessary to relate those QueryPredicate instances in some way and having a list of AND terms here let's you do that just easier I think.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#discussion_r422701589", "createdAt": "2020-05-10T21:16:36Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/RelationalExpressionWithPredicate.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * RelationalExpressionWithPredicate.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.apple.foundationdb.record.query.predicates.QueryPredicate;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * A (relational) expression that has a predicate on it.\n+ */\n+public interface RelationalExpressionWithPredicate extends RelationalExpression {\n+    @Nonnull\n+    QueryPredicate getPredicate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29889596bd400bab9953863431f9b1b40d31077b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwMjE0Mw==", "bodyText": "Shouldn't this be done for Bindable? I mean you do allow T extends Bindable in the class definition, contains() for a Bindable that is no. RelationalExpression would always be `false.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#discussion_r422702143", "createdAt": "2020-05-10T21:21:36Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpressionPointerSet.java", "diffHunk": "@@ -55,10 +55,10 @@ public void addAll(@Nonnull PlannerExpressionPointerSet<T> otherSet) {\n \n     @Override\n     public boolean contains(Object o) {\n-        if (!(o instanceof PlannerExpression)) { // also handles null check\n+        if (!(o instanceof RelationalExpression)) { // also handles null check\n             return false;\n         } else {\n-            return members.contains(new Wrapper<>((PlannerExpression) o));\n+            return members.contains(new Wrapper<>((RelationalExpression) o));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29889596bd400bab9953863431f9b1b40d31077b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwMjY3Ng==", "bodyText": "Consider renaming!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#discussion_r422702676", "createdAt": "2020-05-10T21:26:24Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpressionPointerSet.java", "diffHunk": "@@ -27,12 +27,12 @@\n import java.util.Set;\n \n /**\n- * A set of {@link PlannerExpression}s that uses reference (\"pointer\") equality to determine equivalence for the\n+ * A set of {@link RelationalExpression}s that uses reference (\"pointer\") equality to determine equivalence for the\n  * purposes of set membership, rather than the {@link #equals(Object)} method used by the Java {@link Set} interface.\n  * This is important for implementing the memo data structure in {@link GroupExpressionRef}\n  * @param <T> the planner expression type contained in the set\n  */\n-public class PlannerExpressionPointerSet<T extends PlannerExpression> extends AbstractCollection<T> {\n+public class PlannerExpressionPointerSet<T extends Bindable> extends AbstractCollection<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29889596bd400bab9953863431f9b1b40d31077b"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwMzIwOA==", "bodyText": "This is a general comment re: this class. Consider using Guava Equivalence class, which comes with a subclass Equivalence.Identity which I think would eliminate the reason for the Wrapper class. Also, there is IdentityHashMap which can help here.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#discussion_r422703208", "createdAt": "2020-05-10T21:31:14Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpressionPointerSet.java", "diffHunk": "@@ -27,12 +27,12 @@\n import java.util.Set;\n \n /**\n- * A set of {@link PlannerExpression}s that uses reference (\"pointer\") equality to determine equivalence for the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29889596bd400bab9953863431f9b1b40d31077b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwMzY3MQ==", "bodyText": "How do you now explore the e.g. QueryPredicate expressions hanging off RelationalExpressions?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#discussion_r422703671", "createdAt": "2020-05-10T21:35:18Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/GroupExpressionPrinter.java", "diffHunk": "@@ -81,23 +81,23 @@ public String toString() {\n         return builder.toString();\n     }\n \n-    private void exploreGroup(@Nonnull ExpressionRef<? extends PlannerExpression> ref) {\n+    private void exploreGroup(@Nonnull ExpressionRef<? extends RelationalExpression> ref) {\n         if (!(ref instanceof GroupExpressionRef)) {\n             throw new RecordCoreException(\"tried to print a non-group reference with the GroupExpressionPrinter\");\n         }\n-        GroupExpressionRef<? extends PlannerExpression> groupRef = (GroupExpressionRef<? extends PlannerExpression>) ref;\n+        GroupExpressionRef<? extends RelationalExpression> groupRef = (GroupExpressionRef<? extends RelationalExpression>) ref;\n         seenGroups.put(groupRef, nextId);\n         groups.add(groupRef);\n         nextId++;\n-        for (PlannerExpression member : groupRef.getMembers()) {\n+        for (RelationalExpression member : groupRef.getMembers()) {\n             exploreExpression(member);\n         }\n     }\n \n-    private void exploreExpression(@Nonnull PlannerExpression expression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29889596bd400bab9953863431f9b1b40d31077b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwMzkxMA==", "bodyText": "Will we not ever descend into predicates, etc.?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#discussion_r422703910", "createdAt": "2020-05-10T21:37:32Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/CascadesPlanner.java", "diffHunk": "@@ -268,7 +267,7 @@ public void execute() {\n             getRules().getRulesMatching(expression).forEachRemaining(this::addTransformTask);\n \n             final PlanContext relativeContext = context;\n-            Iterator<? extends ExpressionRef<? extends PlannerExpression>> expressionChildren = expression.getPlannerExpressionChildren();\n+            Iterator<? extends ExpressionRef<? extends RelationalExpression>> expressionChildren = expression.getPlannerExpressionChildren();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29889596bd400bab9953863431f9b1b40d31077b"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwNjMxMw==", "bodyText": "use unqualified names if possible", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#discussion_r422706313", "createdAt": "2020-05-10T22:00:00Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/matchers/PlannerBindings.java", "diffHunk": "@@ -32,10 +31,10 @@\n \n /**\n  * A map-like structure that supports a map from a binding to a collection of {@link Bindable}s, such as\n- * {@link PlannerExpression}s and {@link ExpressionRef}s. A binding's key is a pointer to the {@link ExpressionMatcher}\n- * that created the binding, eliminating the need for a unique string or symbol identifier. A {@code PlannerBindings}\n- * is immutable but has a {@link Builder} that can be used to build up a set of bindings incrementally. Additionally,\n- * bindings can be combined using {@link #mergedWith(PlannerBindings)}.\n+ * {@link com.apple.foundationdb.record.query.plan.temp.RelationalExpression}s and {@link ExpressionRef}s. A binding's", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29889596bd400bab9953863431f9b1b40d31077b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwNjMzOQ==", "bodyText": "Same here.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#discussion_r422706339", "createdAt": "2020-05-10T22:00:11Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/matchers/PlannerBindings.java", "diffHunk": "@@ -83,8 +82,8 @@ public boolean containsKey(@Nonnull ExpressionMatcher<? extends Bindable> key) {\n \n     /**\n      * Retrieve all bindables bound to {@code key} if there is at least one such bindable. The bindables in the returned\n-     * list appear in same order as they appear in the list of children of the {@link PlannerExpression} that produced\n-     * this set of bindings. If no bindable is bound to this key, throw a {@link NoSuchElementException}.\n+     * list appear in same order as they appear in the list of children of the {@link com.apple.foundationdb.record.query.plan.temp.RelationalExpression}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29889596bd400bab9953863431f9b1b40d31077b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwODU2OA==", "bodyText": "This seems to contradict with the purpose of the property as stated in the java doc of the class. Are you counting QueryComponent or QueryPredicate?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#discussion_r422708568", "createdAt": "2020-05-10T22:21:00Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/properties/PredicateHeightProperty.java", "diffHunk": "@@ -42,30 +42,30 @@\n     private static final PredicateHeightProperty INSTANCE = new PredicateHeightProperty();\n \n     @Override\n-    public boolean shouldVisit(@Nonnull PlannerExpression expression) {\n+    public boolean shouldVisit(@Nonnull RelationalExpression expression) {\n         return true;\n     }\n \n     @Override\n-    public boolean shouldVisit(@Nonnull ExpressionRef<? extends PlannerExpression> ref) {\n+    public boolean shouldVisit(@Nonnull ExpressionRef<? extends RelationalExpression> ref) {\n         return true;\n     }\n \n     @Nonnull\n     @Override\n-    public Integer evaluateAtExpression(@Nonnull PlannerExpression expression, @Nonnull List<Integer> childResults) {\n+    public Integer evaluateAtExpression(@Nonnull RelationalExpression expression, @Nonnull List<Integer> childResults) {\n         int maxChildDepth = 0;\n         for (Integer childDepth : childResults) {\n             if (childDepth != null && childDepth > maxChildDepth) {\n                 maxChildDepth = childDepth;\n             }\n         }\n-        return maxChildDepth + (expression instanceof QueryPredicate ? 1 : 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29889596bd400bab9953863431f9b1b40d31077b"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7817102db464fd2d6f621eba0bcab06cf1f5c50b", "author": {"user": {"login": "nschiefer", "name": "Nicholas Schiefer"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/7817102db464fd2d6f621eba0bcab06cf1f5c50b", "committedDate": "2020-05-11T21:06:50Z", "message": "Respond to reviewer comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMjkwMDYx", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#pullrequestreview-410290061", "createdAt": "2020-05-12T17:59:02Z", "commit": {"oid": "7817102db464fd2d6f621eba0bcab06cf1f5c50b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzM5NzQx", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/938#pullrequestreview-410339741", "createdAt": "2020-05-12T19:05:35Z", "commit": {"oid": "7817102db464fd2d6f621eba0bcab06cf1f5c50b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2596, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}