{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MzAzNzgw", "number": 1053, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoxNToxN1rOEx-kyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoxNToxN1rOEx-kyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODQwOTA2OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexFunctionHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoxNToxN1rOHoXSGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoyNToxNlrOHoXuRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4NjU1Mw==", "bodyText": "It seems like, at least in principle, that this should also recurse down, say, nesting key expressions and remove Empty expressions children... On the other hand, that might be better included in some kind of \"key canonicalization\" function that recurses down all of the various key types.\nI could also see the argument that we should fix this to make \"incremental progress\" and then add full canonicalization later (not letting the perfect be the enemy of the good, etc.)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1053#discussion_r512086553", "createdAt": "2020-10-26T16:15:17Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexFunctionHelper.java", "diffHunk": "@@ -159,15 +160,33 @@ public static KeyExpression getGroupedKey(@Nonnull KeyExpression key) {\n             return key;\n         }\n         GroupingKeyExpression grouping = (GroupingKeyExpression) key;\n-        return getSubKey(grouping.getWholeKey(), grouping.getGroupingCount(), grouping.getColumnSize());\n+        return groupKey(getSubKey(grouping.getWholeKey(), grouping.getGroupingCount(), grouping.getColumnSize()));\n     }\n \n     public static KeyExpression getGroupingKey(@Nonnull KeyExpression key) {\n         if (!(key instanceof GroupingKeyExpression)) {\n             return EmptyKeyExpression.EMPTY;\n         }\n         GroupingKeyExpression grouping = (GroupingKeyExpression) key;\n-        return getSubKey(grouping.getWholeKey(), 0, grouping.getGroupingCount());\n+        return groupKey(getSubKey(grouping.getWholeKey(), 0, grouping.getGroupingCount()));\n+    }\n+\n+    protected static KeyExpression groupKey(@Nonnull KeyExpression key) {\n+        if (key instanceof ThenKeyExpression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729782ad36f43c3fae4e95dd58fcf40f020aa7eb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5MjYyMg==", "bodyText": "I could see the benefit of a centralized canonical form transform. Though some care is required in plumbing that in, since key expressions are persisted in meta-data and things might rely on equality comparisons there.\nBut I was thinking of this as local to the these functions and therefore only aiming to take care of the ones for which it is responsible. I do understand that in some of the cases, the affected Then actually existed in the input and wasn't constructed here. But per the contract, it could have been, or, looked at another way, the result is now the same as if it fell into the general \"splitting\" logic.\nSo I think I would prefer to take this rather than aiming for the more comprehensive one.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1053#discussion_r512092622", "createdAt": "2020-10-26T16:23:47Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexFunctionHelper.java", "diffHunk": "@@ -159,15 +160,33 @@ public static KeyExpression getGroupedKey(@Nonnull KeyExpression key) {\n             return key;\n         }\n         GroupingKeyExpression grouping = (GroupingKeyExpression) key;\n-        return getSubKey(grouping.getWholeKey(), grouping.getGroupingCount(), grouping.getColumnSize());\n+        return groupKey(getSubKey(grouping.getWholeKey(), grouping.getGroupingCount(), grouping.getColumnSize()));\n     }\n \n     public static KeyExpression getGroupingKey(@Nonnull KeyExpression key) {\n         if (!(key instanceof GroupingKeyExpression)) {\n             return EmptyKeyExpression.EMPTY;\n         }\n         GroupingKeyExpression grouping = (GroupingKeyExpression) key;\n-        return getSubKey(grouping.getWholeKey(), 0, grouping.getGroupingCount());\n+        return groupKey(getSubKey(grouping.getWholeKey(), 0, grouping.getGroupingCount()));\n+    }\n+\n+    protected static KeyExpression groupKey(@Nonnull KeyExpression key) {\n+        if (key instanceof ThenKeyExpression) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4NjU1Mw=="}, "originalCommit": {"oid": "729782ad36f43c3fae4e95dd58fcf40f020aa7eb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5Mzc2NA==", "bodyText": "Yeah, I think that makes sense", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1053#discussion_r512093764", "createdAt": "2020-10-26T16:25:16Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexFunctionHelper.java", "diffHunk": "@@ -159,15 +160,33 @@ public static KeyExpression getGroupedKey(@Nonnull KeyExpression key) {\n             return key;\n         }\n         GroupingKeyExpression grouping = (GroupingKeyExpression) key;\n-        return getSubKey(grouping.getWholeKey(), grouping.getGroupingCount(), grouping.getColumnSize());\n+        return groupKey(getSubKey(grouping.getWholeKey(), grouping.getGroupingCount(), grouping.getColumnSize()));\n     }\n \n     public static KeyExpression getGroupingKey(@Nonnull KeyExpression key) {\n         if (!(key instanceof GroupingKeyExpression)) {\n             return EmptyKeyExpression.EMPTY;\n         }\n         GroupingKeyExpression grouping = (GroupingKeyExpression) key;\n-        return getSubKey(grouping.getWholeKey(), 0, grouping.getGroupingCount());\n+        return groupKey(getSubKey(grouping.getWholeKey(), 0, grouping.getGroupingCount()));\n+    }\n+\n+    protected static KeyExpression groupKey(@Nonnull KeyExpression key) {\n+        if (key instanceof ThenKeyExpression) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4NjU1Mw=="}, "originalCommit": {"oid": "729782ad36f43c3fae4e95dd58fcf40f020aa7eb"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4764, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}