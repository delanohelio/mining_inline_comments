{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczOTEyNDU4", "number": 820, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDowMTozMVrODfAWAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoxOToxOVrODgcgEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODM4MDgyOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDowMTozMVrOFodkLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTowMTowOFrOFo-aIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MTc1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n          \n          \n            \n             * Note that index build state (especially records scanned) serves an informational purpose only as the number of records scanned is not necessarily 100% of records in total when the index build completes for several reasons:", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r377971758", "createdAt": "2020-02-12T00:01:31Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwOTg1OQ==", "bodyText": "Fixed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r378509859", "createdAt": "2020-02-12T21:01:08Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MTc1OA=="}, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODM4NjczOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDowNDo0NlrOFodn6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoyMzo1NlrOFpAvYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MjcxNA==", "bodyText": "This should probably catch RecordCoreException. It's also possible that we should introduce a new exception type, like, AggregateFunctionNotSupported or something, and that that function should throw that error, but catching RecordCoreException is probably fine for now. (And the exception can be changed safely if AggregateFunctionNotSupported is a sub-type of RecordCoreException.)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r377972714", "createdAt": "2020-02-12T00:04:46Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {\n+            try {\n+                return store.getSnapshotRecordCount()\n+                        .thenApply(totalRecords -> new IndexBuildState(indexState, scannedRecords, totalRecords));\n+            } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0ODA2NA==", "bodyText": "Done.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r378548064", "createdAt": "2020-02-12T22:23:56Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {\n+            try {\n+                return store.getSnapshotRecordCount()\n+                        .thenApply(totalRecords -> new IndexBuildState(indexState, scannedRecords, totalRecords));\n+            } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MjcxNA=="}, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODM4ODc5OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDowNTo1MlrOFodpIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMToyNDo0NFrOFo_Evg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MzAyNg==", "bodyText": "The scanned records and total records queries should be executable in parallel and then combinable into the IndexBuildState object, I think.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r377973026", "createdAt": "2020-02-12T00:05:52Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUyMDc2Ng==", "bodyText": "Done.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r378520766", "createdAt": "2020-02-12T21:24:44Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MzAyNg=="}, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODM5MTY2OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDowNzoyMlrOFodq4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMToxNToyN1rOFo-zrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MzQ3NQ==", "bodyText": "I think FDBRecordStore (here and elsewhere) could be FDBRecordStoreBase<?> (to avoid us taking an opinion here on which implementation of the interface is used).", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r377973475", "createdAt": "2020-02-12T00:07:22Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNjM5OA==", "bodyText": "Done.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r378516398", "createdAt": "2020-02-12T21:15:27Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MzQ3NQ=="}, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODM5MjMyOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDowNzo0OVrOFodrXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoyNDowN1rOFpAvrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MzU5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return a future that completes to the total records scanned.\n          \n          \n            \n                 * @return a future that completes to the total records scanned", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r377973597", "createdAt": "2020-02-12T00:07:49Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {\n+            try {\n+                return store.getSnapshotRecordCount()\n+                        .thenApply(totalRecords -> new IndexBuildState(indexState, scannedRecords, totalRecords));\n+            } catch (Exception ex) {\n+                // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+                // defined.\n+                return CompletableFuture.completedFuture(new IndexBuildState(indexState, scannedRecords, null));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the total records scanned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0ODE0MQ==", "bodyText": "Fixed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r378548141", "createdAt": "2020-02-12T22:24:07Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {\n+            try {\n+                return store.getSnapshotRecordCount()\n+                        .thenApply(totalRecords -> new IndexBuildState(indexState, scannedRecords, totalRecords));\n+            } catch (Exception ex) {\n+                // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+                // defined.\n+                return CompletableFuture.completedFuture(new IndexBuildState(indexState, scannedRecords, null));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the total records scanned.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MzU5Nw=="}, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODM5NTI2OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDowOTozMFrOFodtMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoyODoxM1rOFpA2kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NDA2Ng==", "bodyText": "These accessor methods are missing nullability annotations on their return types (especially important for the nullable ones).", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r377974066", "createdAt": "2020-02-12T00:09:30Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {\n+            try {\n+                return store.getSnapshotRecordCount()\n+                        .thenApply(totalRecords -> new IndexBuildState(indexState, scannedRecords, totalRecords));\n+            } catch (Exception ex) {\n+                // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+                // defined.\n+                return CompletableFuture.completedFuture(new IndexBuildState(indexState, scannedRecords, null));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the total records scanned.\n+     */\n+    public static CompletableFuture<Long> getRecordsScannedAsync(FDBRecordStore store, Index index) {\n+        return store.getContext().ensureActive()\n+                .get(OnlineIndexer.indexBuildScannedRecordsSubspace(store, index).getKey())\n+                .thenApply(FDBRecordStore::decodeRecordCount);\n+    }\n+\n+    /**\n+     * Get the index state.\n+     * @return the index state\n+     */\n+    public IndexState getIndexState() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0OTkwNw==", "bodyText": "Good catch. Fixed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r378549907", "createdAt": "2020-02-12T22:28:13Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {\n+            try {\n+                return store.getSnapshotRecordCount()\n+                        .thenApply(totalRecords -> new IndexBuildState(indexState, scannedRecords, totalRecords));\n+            } catch (Exception ex) {\n+                // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+                // defined.\n+                return CompletableFuture.completedFuture(new IndexBuildState(indexState, scannedRecords, null));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the total records scanned.\n+     */\n+    public static CompletableFuture<Long> getRecordsScannedAsync(FDBRecordStore store, Index index) {\n+        return store.getContext().ensureActive()\n+                .get(OnlineIndexer.indexBuildScannedRecordsSubspace(store, index).getKey())\n+                .thenApply(FDBRecordStore::decodeRecordCount);\n+    }\n+\n+    /**\n+     * Get the index state.\n+     * @return the index state\n+     */\n+    public IndexState getIndexState() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NDA2Ng=="}, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODM5NjE0OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoxMDowNFrOFodtvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjo0MTo0OVrOFpBMFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NDIwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The the estimated total number of records that need to be scanned to build the index. Currently, it uses the\n          \n          \n            \n                 * Get the estimated total number of records that need to be scanned to build the index. Currently, it uses the", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r377974206", "createdAt": "2020-02-12T00:10:04Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {\n+            try {\n+                return store.getSnapshotRecordCount()\n+                        .thenApply(totalRecords -> new IndexBuildState(indexState, scannedRecords, totalRecords));\n+            } catch (Exception ex) {\n+                // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+                // defined.\n+                return CompletableFuture.completedFuture(new IndexBuildState(indexState, scannedRecords, null));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the total records scanned.\n+     */\n+    public static CompletableFuture<Long> getRecordsScannedAsync(FDBRecordStore store, Index index) {\n+        return store.getContext().ensureActive()\n+                .get(OnlineIndexer.indexBuildScannedRecordsSubspace(store, index).getKey())\n+                .thenApply(FDBRecordStore::decodeRecordCount);\n+    }\n+\n+    /**\n+     * Get the index state.\n+     * @return the index state\n+     */\n+    public IndexState getIndexState() {\n+        return indexState;\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * <p>\n+     * The returned value should be ignored if the index state is not {@link IndexState#WRITE_ONLY}.\n+     * </p>\n+     * @return the number of scanned records\n+     * @see #getRecordsScannedAsync(FDBRecordStore, Index)\n+     */\n+    public Long getRecordsScanned() {\n+        return recordsScanned;\n+    }\n+\n+    /**\n+     * The the estimated total number of records that need to be scanned to build the index. Currently, it uses the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NTQxNA==", "bodyText": "Fixed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r378555414", "createdAt": "2020-02-12T22:41:49Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {\n+            try {\n+                return store.getSnapshotRecordCount()\n+                        .thenApply(totalRecords -> new IndexBuildState(indexState, scannedRecords, totalRecords));\n+            } catch (Exception ex) {\n+                // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+                // defined.\n+                return CompletableFuture.completedFuture(new IndexBuildState(indexState, scannedRecords, null));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the total records scanned.\n+     */\n+    public static CompletableFuture<Long> getRecordsScannedAsync(FDBRecordStore store, Index index) {\n+        return store.getContext().ensureActive()\n+                .get(OnlineIndexer.indexBuildScannedRecordsSubspace(store, index).getKey())\n+                .thenApply(FDBRecordStore::decodeRecordCount);\n+    }\n+\n+    /**\n+     * Get the index state.\n+     * @return the index state\n+     */\n+    public IndexState getIndexState() {\n+        return indexState;\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * <p>\n+     * The returned value should be ignored if the index state is not {@link IndexState#WRITE_ONLY}.\n+     * </p>\n+     * @return the number of scanned records\n+     * @see #getRecordsScannedAsync(FDBRecordStore, Index)\n+     */\n+    public Long getRecordsScanned() {\n+        return recordsScanned;\n+    }\n+\n+    /**\n+     * The the estimated total number of records that need to be scanned to build the index. Currently, it uses the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NDIwNg=="}, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODM5NzMzOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoxMDo1MlrOFodugg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjo0MTowMFrOFpBKxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NDQwMg==", "bodyText": "Probably this(indexState, null, null) instead", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r377974402", "createdAt": "2020-02-12T00:10:52Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {\n+            try {\n+                return store.getSnapshotRecordCount()\n+                        .thenApply(totalRecords -> new IndexBuildState(indexState, scannedRecords, totalRecords));\n+            } catch (Exception ex) {\n+                // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+                // defined.\n+                return CompletableFuture.completedFuture(new IndexBuildState(indexState, scannedRecords, null));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the total records scanned.\n+     */\n+    public static CompletableFuture<Long> getRecordsScannedAsync(FDBRecordStore store, Index index) {\n+        return store.getContext().ensureActive()\n+                .get(OnlineIndexer.indexBuildScannedRecordsSubspace(store, index).getKey())\n+                .thenApply(FDBRecordStore::decodeRecordCount);\n+    }\n+\n+    /**\n+     * Get the index state.\n+     * @return the index state\n+     */\n+    public IndexState getIndexState() {\n+        return indexState;\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * <p>\n+     * The returned value should be ignored if the index state is not {@link IndexState#WRITE_ONLY}.\n+     * </p>\n+     * @return the number of scanned records\n+     * @see #getRecordsScannedAsync(FDBRecordStore, Index)\n+     */\n+    public Long getRecordsScanned() {\n+        return recordsScanned;\n+    }\n+\n+    /**\n+     * The the estimated total number of records that need to be scanned to build the index. Currently, it uses the\n+     * number of all records in the store. In some cases, the real number of records that need to be scanned is less\n+     * than this.\n+     * <p>\n+     * To get the count, there must be a suitably grouped {@code COUNT} type index defined. Otherwise, it returns\n+     * {@code null}.\n+     * </p>\n+     * <p>\n+     * The returned value should be ignored if the index state is not {@link IndexState#WRITE_ONLY}.\n+     * </p>\n+     * @return the number of total records\n+     */\n+    public Long getRecordsInTotal() {\n+        return recordsInTotal;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final StringBuilder sb = new StringBuilder(\"IndexBuildState{\");\n+        sb.append(\"indexState=\").append(indexState);\n+        if (indexState == IndexState.WRITE_ONLY) {\n+            sb.append(\", scannedRecords=\").append(recordsScanned);\n+            sb.append(\", totalRecords=\").append((recordsInTotal == null) ? \"UNKNOWN\" : recordsInTotal);\n+        }\n+        sb.append('}');\n+        return sb.toString();\n+    }\n+\n+    private IndexBuildState(IndexState indexState, long recordsScanned, @Nullable Long recordsInTotal) {\n+        this.indexState = indexState;\n+        this.recordsScanned = recordsScanned;\n+        this.recordsInTotal = recordsInTotal;\n+    }\n+\n+    private IndexBuildState(IndexState indexState) {\n+        this.indexState = indexState;\n+        this.recordsScanned = null;\n+        this.recordsInTotal = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NTA3OA==", "bodyText": "Yeah, done.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r378555078", "createdAt": "2020-02-12T22:41:00Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {\n+            try {\n+                return store.getSnapshotRecordCount()\n+                        .thenApply(totalRecords -> new IndexBuildState(indexState, scannedRecords, totalRecords));\n+            } catch (Exception ex) {\n+                // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+                // defined.\n+                return CompletableFuture.completedFuture(new IndexBuildState(indexState, scannedRecords, null));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the total records scanned.\n+     */\n+    public static CompletableFuture<Long> getRecordsScannedAsync(FDBRecordStore store, Index index) {\n+        return store.getContext().ensureActive()\n+                .get(OnlineIndexer.indexBuildScannedRecordsSubspace(store, index).getKey())\n+                .thenApply(FDBRecordStore::decodeRecordCount);\n+    }\n+\n+    /**\n+     * Get the index state.\n+     * @return the index state\n+     */\n+    public IndexState getIndexState() {\n+        return indexState;\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * <p>\n+     * The returned value should be ignored if the index state is not {@link IndexState#WRITE_ONLY}.\n+     * </p>\n+     * @return the number of scanned records\n+     * @see #getRecordsScannedAsync(FDBRecordStore, Index)\n+     */\n+    public Long getRecordsScanned() {\n+        return recordsScanned;\n+    }\n+\n+    /**\n+     * The the estimated total number of records that need to be scanned to build the index. Currently, it uses the\n+     * number of all records in the store. In some cases, the real number of records that need to be scanned is less\n+     * than this.\n+     * <p>\n+     * To get the count, there must be a suitably grouped {@code COUNT} type index defined. Otherwise, it returns\n+     * {@code null}.\n+     * </p>\n+     * <p>\n+     * The returned value should be ignored if the index state is not {@link IndexState#WRITE_ONLY}.\n+     * </p>\n+     * @return the number of total records\n+     */\n+    public Long getRecordsInTotal() {\n+        return recordsInTotal;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final StringBuilder sb = new StringBuilder(\"IndexBuildState{\");\n+        sb.append(\"indexState=\").append(indexState);\n+        if (indexState == IndexState.WRITE_ONLY) {\n+            sb.append(\", scannedRecords=\").append(recordsScanned);\n+            sb.append(\", totalRecords=\").append((recordsInTotal == null) ? \"UNKNOWN\" : recordsInTotal);\n+        }\n+        sb.append('}');\n+        return sb.toString();\n+    }\n+\n+    private IndexBuildState(IndexState indexState, long recordsScanned, @Nullable Long recordsInTotal) {\n+        this.indexState = indexState;\n+        this.recordsScanned = recordsScanned;\n+        this.recordsInTotal = recordsInTotal;\n+    }\n+\n+    private IndexBuildState(IndexState indexState) {\n+        this.indexState = indexState;\n+        this.recordsScanned = null;\n+        this.recordsInTotal = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NDQwMg=="}, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQ2MDk4OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo0NDowNFrOFoeUVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzowNTowNVrOFpBvgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NDA4Nw==", "bodyText": "Maybe something like, \"If the OnlineIndexer has been configured to disable tracking progress (by setting setTrackProgress to false), then the number returned will not reflect the actual number of records scanned.\" Or something like that?\nI wonder if it is worth also clarifying here that this won't include all records added during the build, or if that should be only in one place (at the top, probably) and the other place(s) we want to mention it should reference that one place.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r377984087", "createdAt": "2020-02-12T00:44:04Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {\n+            try {\n+                return store.getSnapshotRecordCount()\n+                        .thenApply(totalRecords -> new IndexBuildState(indexState, scannedRecords, totalRecords));\n+            } catch (Exception ex) {\n+                // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+                // defined.\n+                return CompletableFuture.completedFuture(new IndexBuildState(indexState, scannedRecords, null));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the total records scanned.\n+     */\n+    public static CompletableFuture<Long> getRecordsScannedAsync(FDBRecordStore store, Index index) {\n+        return store.getContext().ensureActive()\n+                .get(OnlineIndexer.indexBuildScannedRecordsSubspace(store, index).getKey())\n+                .thenApply(FDBRecordStore::decodeRecordCount);\n+    }\n+\n+    /**\n+     * Get the index state.\n+     * @return the index state\n+     */\n+    public IndexState getIndexState() {\n+        return indexState;\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NDQ4Mg==", "bodyText": "Fixed wordings for \"track progress\".\nI didn't include clarifications for \"all records added during the build\" here because strictly speaking they are not \"records scanned\". But this clarification is useful when it is put under the context of comparing with the records in total. So I guess the top of IndexBuildState might be a better place. Added a point to the top.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r378564482", "createdAt": "2020-02-12T23:05:05Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {\n+            try {\n+                return store.getSnapshotRecordCount()\n+                        .thenApply(totalRecords -> new IndexBuildState(indexState, scannedRecords, totalRecords));\n+            } catch (Exception ex) {\n+                // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+                // defined.\n+                return CompletableFuture.completedFuture(new IndexBuildState(indexState, scannedRecords, null));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the total records scanned.\n+     */\n+    public static CompletableFuture<Long> getRecordsScannedAsync(FDBRecordStore store, Index index) {\n+        return store.getContext().ensureActive()\n+                .get(OnlineIndexer.indexBuildScannedRecordsSubspace(store, index).getKey())\n+                .thenApply(FDBRecordStore::decodeRecordCount);\n+    }\n+\n+    /**\n+     * Get the index state.\n+     * @return the index state\n+     */\n+    public IndexState getIndexState() {\n+        return indexState;\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NDA4Nw=="}, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQ2NTY1OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo0NjoxNlrOFoeXDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoyNzoxMFrOFpA0ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NDc4Mg==", "bodyText": "Is this intentionally a public method? Do we expect people to call it directly?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r377984782", "createdAt": "2020-02-12T00:46:16Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {\n+            try {\n+                return store.getSnapshotRecordCount()\n+                        .thenApply(totalRecords -> new IndexBuildState(indexState, scannedRecords, totalRecords));\n+            } catch (Exception ex) {\n+                // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+                // defined.\n+                return CompletableFuture.completedFuture(new IndexBuildState(indexState, scannedRecords, null));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the total records scanned.\n+     */\n+    public static CompletableFuture<Long> getRecordsScannedAsync(FDBRecordStore store, Index index) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0OTQ0Mw==", "bodyText": "I guess is it is fair if a caller only wants to know about the number of records scanned without creating a IndexBuildState object. The other two fields can both be got easily from FDBRecordStore.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r378549443", "createdAt": "2020-02-12T22:27:10Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves a informational purpose only in terms that records scanned is not necessarily 100% of records in total when the index build completes in several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> Records scanned does not include the records scanned in the {@link OnlineIndexer} whose {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStore, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStore store, Index index) {\n+        IndexState indexState = store.getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        return getRecordsScannedAsync(store, index).thenCompose(scannedRecords -> {\n+            try {\n+                return store.getSnapshotRecordCount()\n+                        .thenApply(totalRecords -> new IndexBuildState(indexState, scannedRecords, totalRecords));\n+            } catch (Exception ex) {\n+                // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+                // defined.\n+                return CompletableFuture.completedFuture(new IndexBuildState(indexState, scannedRecords, null));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * This does not include the records scanned in the {@link OnlineIndexer} whose\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} is set to false.\n+     * </p>\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the total records scanned.\n+     */\n+    public static CompletableFuture<Long> getRecordsScannedAsync(FDBRecordStore store, Index index) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NDc4Mg=="}, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQ3Njc3OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerBuildIndexTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1MjozOFrOFoeduQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoyOTowMlrOFpA39A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NjQ4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // Count index is not defined so we cannot lean the records in total from it.\n          \n          \n            \n                                // Count index is not defined so we cannot determine the records in total from it.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r377986489", "createdAt": "2020-02-12T00:52:38Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerBuildIndexTest.java", "diffHunk": "@@ -255,6 +257,18 @@ void singleRebuild(@Nonnull List<TestRecords1Proto.MySimpleRecord> records, @Nul\n             if (recordsWhileBuilding != null && recordsWhileBuilding.size() > 0) {\n                 additionalScans += (long)recordsWhileBuilding.size();\n             }\n+\n+            if (!wasReadableBeforeBuild) {\n+                try (FDBRecordContext context = openContext()) {\n+                    IndexBuildState indexBuildState = context.asyncToSync(FDBStoreTimer.Waits.WAIT_GET_INDEX_BUILD_STATES,\n+                            IndexBuildState.getIndexBuildStateAsync(recordStore, index));\n+                    assertEquals(IndexState.WRITE_ONLY, indexBuildState.getIndexState());\n+                    assertEquals(indexBuilder.getTotalRecordsScanned(), indexBuildState.getRecordsScanned());\n+                    // Count index is not defined so we cannot lean the records in total from it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1MDI2MA==", "bodyText": "Fixed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r378550260", "createdAt": "2020-02-12T22:29:02Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerBuildIndexTest.java", "diffHunk": "@@ -255,6 +257,18 @@ void singleRebuild(@Nonnull List<TestRecords1Proto.MySimpleRecord> records, @Nul\n             if (recordsWhileBuilding != null && recordsWhileBuilding.size() > 0) {\n                 additionalScans += (long)recordsWhileBuilding.size();\n             }\n+\n+            if (!wasReadableBeforeBuild) {\n+                try (FDBRecordContext context = openContext()) {\n+                    IndexBuildState indexBuildState = context.asyncToSync(FDBStoreTimer.Waits.WAIT_GET_INDEX_BUILD_STATES,\n+                            IndexBuildState.getIndexBuildStateAsync(recordStore, index));\n+                    assertEquals(IndexState.WRITE_ONLY, indexBuildState.getIndexState());\n+                    assertEquals(indexBuilder.getTotalRecordsScanned(), indexBuildState.getRecordsScanned());\n+                    // Count index is not defined so we cannot lean the records in total from it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NjQ4OQ=="}, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQ3OTAwOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerBuildIndexTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1Mzo0NFrOFoee9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjo0MDowMlrOFpBJRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NjgwNQ==", "bodyText": "Why does this depend on wasReadableBeforeBuild being false?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r377986805", "createdAt": "2020-02-12T00:53:44Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerBuildIndexTest.java", "diffHunk": "@@ -255,6 +257,18 @@ void singleRebuild(@Nonnull List<TestRecords1Proto.MySimpleRecord> records, @Nul\n             if (recordsWhileBuilding != null && recordsWhileBuilding.size() > 0) {\n                 additionalScans += (long)recordsWhileBuilding.size();\n             }\n+\n+            if (!wasReadableBeforeBuild) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NDY5NQ==", "bodyText": "wasReadableBeforeBuild  was for the case that a readable index calls OnlineIndexer with the default index build precondition, in which case it should not build the index at all and the index should just stay in readable. I've changed the name to isAlwaysReadable to make it more clear.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r378554695", "createdAt": "2020-02-12T22:40:02Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerBuildIndexTest.java", "diffHunk": "@@ -255,6 +257,18 @@ void singleRebuild(@Nonnull List<TestRecords1Proto.MySimpleRecord> records, @Nul\n             if (recordsWhileBuilding != null && recordsWhileBuilding.size() > 0) {\n                 additionalScans += (long)recordsWhileBuilding.size();\n             }\n+\n+            if (!wasReadableBeforeBuild) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NjgwNQ=="}, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQ4Mjk4OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1NTo1NlrOFoehTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjo0ODozN1rOFpBWcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NzQwNQ==", "bodyText": "I'm not sure what the last sentence here is trying to say. That the object allows one to compare the records scanned with the records in the record store? I'm not sure where the \"programmatically\" bit comes in.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r377987405", "createdAt": "2020-02-12T00:55:56Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -2119,6 +2137,19 @@ public Builder setProgressLogIntervalMillis(long millis) {\n             return this;\n         }\n \n+        /**\n+         * Set whether or not to track the index build progress by updating the number of records successfully scanned\n+         * and processed. The progress is persisted in {@link #indexBuildScannedRecordsSubspace(FDBRecordStore, Index)}\n+         * which can be accessed by {@link IndexBuildState#getIndexBuildStateAsync(FDBRecordStore, Index)}, comparing\n+         * to the records scanned information in progress log which cannot be accessed programmatically.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1ODA2Ng==", "bodyText": "Oh, I mean \"This setting does not affect the setting at {@link #setProgressLogIntervalMillis(long)}.\" Updated.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r378558066", "createdAt": "2020-02-12T22:48:37Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -2119,6 +2137,19 @@ public Builder setProgressLogIntervalMillis(long millis) {\n             return this;\n         }\n \n+        /**\n+         * Set whether or not to track the index build progress by updating the number of records successfully scanned\n+         * and processed. The progress is persisted in {@link #indexBuildScannedRecordsSubspace(FDBRecordStore, Index)}\n+         * which can be accessed by {@link IndexBuildState#getIndexBuildStateAsync(FDBRecordStore, Index)}, comparing\n+         * to the records scanned information in progress log which cannot be accessed programmatically.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NzQwNQ=="}, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjA4NTI5OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjo0NDo0OFrOFpBQjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTowNTowM1rOFqDnnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NjU1Ng==", "bodyText": "@alecgrieser What do you think about it? If track progress option is always on, we can make some other improvements to make it 100% tracking the total records someday, I think.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r378556556", "createdAt": "2020-02-12T22:44:48Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1597,6 +1613,8 @@ public Config build() {\n         protected int maxRetries = DEFAULT_MAX_RETRIES;\n         protected int recordsPerSecond = DEFAULT_RECORDS_PER_SECOND;\n         private long progressLogIntervalMillis = DEFAULT_PROGRESS_LOG_INTERVAL;\n+        // TODO: Maybe the performance impact of this is low enough to be always enabled?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1ODQ5MA==", "bodyText": "Hmm, my initial thought had been that it would make sense to have a lever to be able to disable it, but the performance impact of this is very minimal, and only affects the index build itself, and having it just always be on could simplify its usage and the API. I think I'd be okay with just having it always be on, but up to you.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r379458490", "createdAt": "2020-02-14T14:28:30Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1597,6 +1613,8 @@ public Config build() {\n         protected int maxRetries = DEFAULT_MAX_RETRIES;\n         protected int recordsPerSecond = DEFAULT_RECORDS_PER_SECOND;\n         private long progressLogIntervalMillis = DEFAULT_PROGRESS_LOG_INTERVAL;\n+        // TODO: Maybe the performance impact of this is low enough to be always enabled?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NjU1Ng=="}, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0MzgwNw==", "bodyText": "OK. I'll keep it as it.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r379643807", "createdAt": "2020-02-14T21:05:03Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1597,6 +1613,8 @@ public Config build() {\n         protected int maxRetries = DEFAULT_MAX_RETRIES;\n         protected int recordsPerSecond = DEFAULT_RECORDS_PER_SECOND;\n         private long progressLogIntervalMillis = DEFAULT_PROGRESS_LOG_INTERVAL;\n+        // TODO: Maybe the performance impact of this is low enough to be always enabled?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NjU1Ng=="}, "originalCommit": {"oid": "b875708a14bfca6d035c6007d0ab6027112cf3a7"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTg0MTUyOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/AggregateFunctionNotSupported.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoxNDo1MFrOFpldOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToyNToxNFrOFqBMzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0OTYyNQ==", "bodyText": "Maybe AggregateFunctionNotSuportedException?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r379149625", "createdAt": "2020-02-13T22:14:50Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/AggregateFunctionNotSupported.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * AggregateFunctionNotSupported.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Exception thrown when an aggregate function is not supported.\n+ */\n+@SuppressWarnings(\"serial\")\n+public class AggregateFunctionNotSupported extends RecordCoreException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e119643c629e795b4d44270e2c04d0836162ec4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMzkxNw==", "bodyText": "Done.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r379603917", "createdAt": "2020-02-14T19:24:39Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/AggregateFunctionNotSupported.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * AggregateFunctionNotSupported.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Exception thrown when an aggregate function is not supported.\n+ */\n+@SuppressWarnings(\"serial\")\n+public class AggregateFunctionNotSupported extends RecordCoreException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0OTYyNQ=="}, "originalCommit": {"oid": "7e119643c629e795b4d44270e2c04d0836162ec4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwNDE3NQ==", "bodyText": "Fixed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r379604175", "createdAt": "2020-02-14T19:25:14Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/AggregateFunctionNotSupported.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * AggregateFunctionNotSupported.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Exception thrown when an aggregate function is not supported.\n+ */\n+@SuppressWarnings(\"serial\")\n+public class AggregateFunctionNotSupported extends RecordCoreException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0OTYyNQ=="}, "originalCommit": {"oid": "7e119643c629e795b4d44270e2c04d0836162ec4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Nzc5NjQxOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDoxNzozOFrOFp39MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToyNToyNlrOFqBNJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1MjcyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n          \n          \n            \n             * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contain the number\n          \n      \n    \n    \n  \n\nSorry, I somehow missed this the first go round.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r379452720", "createdAt": "2020-02-14T14:17:38Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.AggregateFunctionNotSupported;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e119643c629e795b4d44270e2c04d0836162ec4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwNDI2Mw==", "bodyText": "Fixed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r379604263", "createdAt": "2020-02-14T19:25:26Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.AggregateFunctionNotSupported;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1MjcyMA=="}, "originalCommit": {"oid": "7e119643c629e795b4d44270e2c04d0836162ec4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzgwMzE0OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDoxOTo1NFrOFp4Bsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToyNjoyNFrOFqBOzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1Mzg3NA==", "bodyText": "Sorry to nit, but can these two async methods that reload from the database be renamed to loadX instead of getX? (Just to underscore to the caller that they will make a DB call.) Should have mentioned this the first time round, sorry.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r379453874", "createdAt": "2020-02-14T14:19:54Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.AggregateFunctionNotSupported;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves an informational purpose only as the number of\n+ * records scanned is not necessarily 100% of records in total when the index build completes for several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> If the {@link OnlineIndexer} has been configured to disable tracking progress (by setting\n+ *     {@link OnlineIndexer.Builder#setTrackProgress(boolean)} to {@code false}), then {@link #getRecordsScanned()} will\n+ *     not reflect the actual number of records scanned. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in\n+ *     records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records\n+ *     that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStoreBase, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    @Nonnull\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStoreBase<?> store, Index index) {\n+        IndexState indexState = store.getUntypedRecordStore().getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        CompletableFuture<Long> recordsInTotalFuture;\n+        try {\n+            recordsInTotalFuture = store.getSnapshotRecordCount();\n+        } catch (AggregateFunctionNotSupported ex) {\n+            // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+            // defined.\n+            recordsInTotalFuture = CompletableFuture.completedFuture(null);\n+        }\n+        return getRecordsScannedAsync(store, index).thenCombine(recordsInTotalFuture,\n+                (scannedRecords, recordsInTotal) -> new IndexBuildState(indexState, scannedRecords, recordsInTotal));\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * If the {@link OnlineIndexer} has been configured to disable tracking progress (by setting\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} to {@code false}), then the number returned will not\n+     * reflect the actual number of records scanned.\n+     * </p>\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the total records scanned\n+     */\n+    @Nonnull\n+    public static CompletableFuture<Long> getRecordsScannedAsync(FDBRecordStoreBase<?> store, Index index) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e119643c629e795b4d44270e2c04d0836162ec4"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwNDY4NA==", "bodyText": "Good idea. Done.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r379604684", "createdAt": "2020-02-14T19:26:24Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.AggregateFunctionNotSupported;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contains the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves an informational purpose only as the number of\n+ * records scanned is not necessarily 100% of records in total when the index build completes for several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> If the {@link OnlineIndexer} has been configured to disable tracking progress (by setting\n+ *     {@link OnlineIndexer.Builder#setTrackProgress(boolean)} to {@code false}), then {@link #getRecordsScanned()} will\n+ *     not reflect the actual number of records scanned. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in\n+ *     records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records\n+ *     that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #getIndexBuildStateAsync(FDBRecordStoreBase, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Get the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    @Nonnull\n+    public static CompletableFuture<IndexBuildState> getIndexBuildStateAsync(FDBRecordStoreBase<?> store, Index index) {\n+        IndexState indexState = store.getUntypedRecordStore().getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        CompletableFuture<Long> recordsInTotalFuture;\n+        try {\n+            recordsInTotalFuture = store.getSnapshotRecordCount();\n+        } catch (AggregateFunctionNotSupported ex) {\n+            // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+            // defined.\n+            recordsInTotalFuture = CompletableFuture.completedFuture(null);\n+        }\n+        return getRecordsScannedAsync(store, index).thenCombine(recordsInTotalFuture,\n+                (scannedRecords, recordsInTotal) -> new IndexBuildState(indexState, scannedRecords, recordsInTotal));\n+    }\n+\n+    /**\n+     * Get the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * If the {@link OnlineIndexer} has been configured to disable tracking progress (by setting\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} to {@code false}), then the number returned will not\n+     * reflect the actual number of records scanned.\n+     * </p>\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the total records scanned\n+     */\n+    @Nonnull\n+    public static CompletableFuture<Long> getRecordsScannedAsync(FDBRecordStoreBase<?> store, Index index) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1Mzg3NA=="}, "originalCommit": {"oid": "7e119643c629e795b4d44270e2c04d0836162ec4"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzgxODU5OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBRestrictedIndexQueryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDoyNDoyMlrOFp4LGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDo0MjoxM1rOFqDGWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1NjI4Mg==", "bodyText": "I think this can be AggregegateFunctionNotSupported e = assertThrows(AggregateFunctionNotSupported.class, callable). And then you can still make the assertions on e that are below, but don't need the explicit try, catch, or fail().", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r379456282", "createdAt": "2020-02-14T14:24:22Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBRestrictedIndexQueryTest.java", "diffHunk": "@@ -355,6 +347,16 @@ public void queryAggregateWithDisabled() throws Exception {\n         }\n     }\n \n+    public static void assertThrowsAggregateFunctionNotSupported(Callable<?> callable, String aggregateFunction) throws Exception {\n+        try {\n+            callable.call();\n+            fail(\"Was not stopped from reading unsupported index.\");\n+        } catch (AggregateFunctionNotSupported e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e119643c629e795b4d44270e2c04d0836162ec4"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNTI5MQ==", "bodyText": "Yeah. I was looking for something like assertThrowsAndGet but didn't realize that JUnit 5 returns the exception in assertThrows.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r379635291", "createdAt": "2020-02-14T20:42:13Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBRestrictedIndexQueryTest.java", "diffHunk": "@@ -355,6 +347,16 @@ public void queryAggregateWithDisabled() throws Exception {\n         }\n     }\n \n+    public static void assertThrowsAggregateFunctionNotSupported(Callable<?> callable, String aggregateFunction) throws Exception {\n+        try {\n+            callable.call();\n+            fail(\"Was not stopped from reading unsupported index.\");\n+        } catch (AggregateFunctionNotSupported e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1NjI4Mg=="}, "originalCommit": {"oid": "7e119643c629e795b4d44270e2c04d0836162ec4"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzM4NDI4OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/AggregateFunctionNotSupportedException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1MDozNVrOFqpDNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOToyNjo0OFrOFquElA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1NzA3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * AggregateFunctionNotSupported.java\n          \n          \n            \n             * AggregateFunctionNotSupportedException.java", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r380257078", "createdAt": "2020-02-17T15:50:35Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/AggregateFunctionNotSupportedException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * AggregateFunctionNotSupported.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c0f8076e2ff139b506526c6a419cf8c76187613"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMzOTM0OA==", "bodyText": "Good catch. I didn't know IntelliJ wasn't able to rename the header automatically.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r380339348", "createdAt": "2020-02-17T19:26:48Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/AggregateFunctionNotSupportedException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * AggregateFunctionNotSupported.java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1NzA3OA=="}, "originalCommit": {"oid": "9c0f8076e2ff139b506526c6a419cf8c76187613"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQxMzA4OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1OTowN1rOFqpUnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOToyODozNVrOFquGiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MTUzMg==", "bodyText": "subsapces -> subspaces, plus you should probably say, there are two lower level subspaces, the lock space and the scanned records subspace.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r380261532", "createdAt": "2020-02-17T15:59:07Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java", "diffHunk": "@@ -3477,6 +3491,12 @@ void clearIndexData(@Nonnull Index index) {\n         tr.clear(indexSecondarySubspace(index).range());\n         tr.clear(indexRangeSubspace(index).range());\n         tr.clear(indexUniquenessViolationsSubspace(index).range());\n+        // Under the index build subspace, there are two lower level subsapces.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c0f8076e2ff139b506526c6a419cf8c76187613"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMzOTg1MQ==", "bodyText": "Done.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r380339851", "createdAt": "2020-02-17T19:28:35Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java", "diffHunk": "@@ -3477,6 +3491,12 @@ void clearIndexData(@Nonnull Index index) {\n         tr.clear(indexSecondarySubspace(index).range());\n         tr.clear(indexRangeSubspace(index).range());\n         tr.clear(indexUniquenessViolationsSubspace(index).range());\n+        // Under the index build subspace, there are two lower level subsapces.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MTUzMg=="}, "originalCommit": {"oid": "9c0f8076e2ff139b506526c6a419cf8c76187613"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQxODI0OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBStoreTimer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMDo0MlrOFqpX5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOToyOToxNVrOFquHVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MjM3Mg==", "bodyText": "Super pedantic, feel free to ignore, but there is only one build state being waited on, so it should probably be WAIT_GET_INDEX_BUILD_STATE and wait for getting index build state.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r380262372", "createdAt": "2020-02-17T16:00:42Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBStoreTimer.java", "diffHunk": "@@ -387,6 +387,8 @@ public String logKey() {\n         WAIT_SCAN_RECORDS(\"wait for scan records\"),\n         /** Wait for a indexed record scan. */\n         WAIT_SCAN_INDEX_RECORDS(\"wait for scan index records\"),\n+        /** Wait for getting index build states. */\n+        WAIT_GET_INDEX_BUILD_STATES(\"wait for getting index build states\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c0f8076e2ff139b506526c6a419cf8c76187613"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0MDA1NQ==", "bodyText": "Fixed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r380340055", "createdAt": "2020-02-17T19:29:15Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBStoreTimer.java", "diffHunk": "@@ -387,6 +387,8 @@ public String logKey() {\n         WAIT_SCAN_RECORDS(\"wait for scan records\"),\n         /** Wait for a indexed record scan. */\n         WAIT_SCAN_INDEX_RECORDS(\"wait for scan index records\"),\n+        /** Wait for getting index build states. */\n+        WAIT_GET_INDEX_BUILD_STATES(\"wait for getting index build states\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MjM3Mg=="}, "originalCommit": {"oid": "9c0f8076e2ff139b506526c6a419cf8c76187613"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQ1NTI5OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoxMTozNVrOFqptig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDozMToxNFrOFqvHnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2NzkxNA==", "bodyText": "In this and getRecordsScanned, when the tracking feature is disabled, the phrase the number returned will not reflect that actual number of records scanned is a little ambiguous, particularly given that the Long returned can also be null.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r380267914", "createdAt": "2020-02-17T16:11:35Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.AggregateFunctionNotSupportedException;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contain the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves an informational purpose only as the number of\n+ * records scanned is not necessarily 100% of records in total when the index build completes for several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> If the {@link OnlineIndexer} has been configured to disable tracking progress (by setting\n+ *     {@link OnlineIndexer.Builder#setTrackProgress(boolean)} to {@code false}), then {@link #getRecordsScanned()} will\n+ *     not reflect the actual number of records scanned. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in\n+ *     records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records\n+ *     that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #loadIndexBuildStateAsync(FDBRecordStoreBase, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Load the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    @Nonnull\n+    public static CompletableFuture<IndexBuildState> loadIndexBuildStateAsync(FDBRecordStoreBase<?> store, Index index) {\n+        IndexState indexState = store.getUntypedRecordStore().getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        CompletableFuture<Long> recordsInTotalFuture;\n+        try {\n+            recordsInTotalFuture = store.getSnapshotRecordCount();\n+        } catch (AggregateFunctionNotSupportedException ex) {\n+            // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+            // defined.\n+            recordsInTotalFuture = CompletableFuture.completedFuture(null);\n+        }\n+        return loadRecordsScannedAsync(store, index).thenCombine(recordsInTotalFuture,\n+                (scannedRecords, recordsInTotal) -> new IndexBuildState(indexState, scannedRecords, recordsInTotal));\n+    }\n+\n+    /**\n+     * Load the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * If the {@link OnlineIndexer} has been configured to disable tracking progress (by setting\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} to {@code false}), then the number returned will not\n+     * reflect the actual number of records scanned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c0f8076e2ff139b506526c6a419cf8c76187613"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1NjUwOQ==", "bodyText": "Changed to \"then the number returned will not include the records scanned by that {@link OnlineIndexer}\"", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r380356509", "createdAt": "2020-02-17T20:31:14Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexBuildState.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * IndexBuildState.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.AggregateFunctionNotSupportedException;\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.metadata.Index;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class that contains the build progress of a given index in a given record store.\n+ * <p>\n+ * It first contains {@link IndexState}. If the state is {@link IndexState#WRITE_ONLY}, it will also contain the number\n+ * of records scanned and the estimated total number of records that need to be scanned.\n+ * </p>\n+ * <p>\n+ * Note that index build state (especially records scanned) serves an informational purpose only as the number of\n+ * records scanned is not necessarily 100% of records in total when the index build completes for several reasons:\n+ * </p>\n+ * <ul>\n+ *     <li> If the {@link OnlineIndexer} has been configured to disable tracking progress (by setting\n+ *     {@link OnlineIndexer.Builder#setTrackProgress(boolean)} to {@code false}), then {@link #getRecordsScanned()} will\n+ *     not reflect the actual number of records scanned. </li>\n+ *     <li> Records added or deleted during the index build progress are not included in records scanned but are in\n+ *     records in total. </li>\n+ *     <li> Records in total uses the number of all records in the store. In some cases, the real number of records\n+ *     that need to be scanned is less than this.</li>\n+ * </ul>\n+ * @see #loadIndexBuildStateAsync(FDBRecordStoreBase, Index)\n+ */\n+@API(API.Status.UNSTABLE)\n+public class IndexBuildState {\n+    @Nonnull\n+    private final IndexState indexState;\n+    @Nullable\n+    private final Long recordsScanned;\n+    @Nullable\n+    private final Long recordsInTotal;\n+\n+    /**\n+     * Load the build progress ({@link IndexBuildState}) of the given index in the given record store asynchronously.\n+     * @param store the record store containing the index\n+     * @param index the index needed to be checked\n+     * @return a future that completes to the index build state\n+     */\n+    @Nonnull\n+    public static CompletableFuture<IndexBuildState> loadIndexBuildStateAsync(FDBRecordStoreBase<?> store, Index index) {\n+        IndexState indexState = store.getUntypedRecordStore().getIndexState(index);\n+        if (indexState != IndexState.WRITE_ONLY) {\n+            return CompletableFuture.completedFuture(new IndexBuildState(indexState));\n+        }\n+        CompletableFuture<Long> recordsInTotalFuture;\n+        try {\n+            recordsInTotalFuture = store.getSnapshotRecordCount();\n+        } catch (AggregateFunctionNotSupportedException ex) {\n+            // getSnapshotRecordCount failed, very likely it is because there is no suitable COUNT type index\n+            // defined.\n+            recordsInTotalFuture = CompletableFuture.completedFuture(null);\n+        }\n+        return loadRecordsScannedAsync(store, index).thenCombine(recordsInTotalFuture,\n+                (scannedRecords, recordsInTotal) -> new IndexBuildState(indexState, scannedRecords, recordsInTotal));\n+    }\n+\n+    /**\n+     * Load the number of records successfully scanned and processed during the online index build process\n+     * asynchronously.\n+     * <p>\n+     * If the {@link OnlineIndexer} has been configured to disable tracking progress (by setting\n+     * {@link OnlineIndexer.Builder#setTrackProgress(boolean)} to {@code false}), then the number returned will not\n+     * reflect the actual number of records scanned.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2NzkxNA=="}, "originalCommit": {"oid": "9c0f8076e2ff139b506526c6a419cf8c76187613"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQ3OTg2OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoxOToxOVrOFqp8yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDozMzo1NlrOFqvKnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3MTgxOQ==", "bodyText": "@alecgrieser did not raise this as an issue, so I doubt it is one, but would there be any benefit to doing this mutation only once, just before the commit of the scanned range, rather than doing it on each record scanned?  For example, in the proposed RPC interface to FDB (https://github.com/apple/foundationdb/wiki/FoundationDB-RPC-Layer-Requirements) this operation would, presumably, add a round trip each time.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r380271819", "createdAt": "2020-02-17T16:19:19Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -560,6 +566,11 @@ private void increaseLimit() {\n             if (recordsScanned != null) {\n                 recordsScanned.incrementAndGet();\n             }\n+            if (trackProgress) {\n+                // Add one to the number of records successfully scanned and processed.\n+                store.context.ensureActive().mutate(\n+                        MutationType.ADD, scannedRecordsSubspace.getKey(), FDBRecordStore.LITTLE_ENDIAN_INT64_ONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c0f8076e2ff139b506526c6a419cf8c76187613"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0MDU2Mg==", "bodyText": "Hm. With the current client implementation, the only benefit to doing it all at once at the end would be that there would be approximately one fewer JNI hop and a little bit of CPU work on the client, but because the FDB client coalesces mutations, it wouldn't end up issuing one mutation per record here, it would just be one single mutation at the end (similar to if the coalescing were done at the Record Layer level).\nI think the plan (or hope) would be that an RPC layer would have some kind of client that also batched updates together in some way (so that, for example, multiple mutations wound up on the same packet to the RPC server), though the overhead would be a little bit higher than if there was just one mutation (for example, you would need to repeat the key multiple times). But that's also somewhat speculative, on my part, given that I think that's still a little up in the air.\nSo, in conclusion, probably would be a non-zero savings to only have mutation, but also probably not all that expensive the way it is.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r380340562", "createdAt": "2020-02-17T19:31:03Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -560,6 +566,11 @@ private void increaseLimit() {\n             if (recordsScanned != null) {\n                 recordsScanned.incrementAndGet();\n             }\n+            if (trackProgress) {\n+                // Add one to the number of records successfully scanned and processed.\n+                store.context.ensureActive().mutate(\n+                        MutationType.ADD, scannedRecordsSubspace.getKey(), FDBRecordStore.LITTLE_ENDIAN_INT64_ONE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3MTgxOQ=="}, "originalCommit": {"oid": "9c0f8076e2ff139b506526c6a419cf8c76187613"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1NzI3OQ==", "bodyText": "Collapsed the counts, considering it won't hurt anyways. (I didn't do it initially mainly because I didn't want to write things to encode a long)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/820#discussion_r380357279", "createdAt": "2020-02-17T20:33:56Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -560,6 +566,11 @@ private void increaseLimit() {\n             if (recordsScanned != null) {\n                 recordsScanned.incrementAndGet();\n             }\n+            if (trackProgress) {\n+                // Add one to the number of records successfully scanned and processed.\n+                store.context.ensureActive().mutate(\n+                        MutationType.ADD, scannedRecordsSubspace.getKey(), FDBRecordStore.LITTLE_ENDIAN_INT64_ONE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3MTgxOQ=="}, "originalCommit": {"oid": "9c0f8076e2ff139b506526c6a419cf8c76187613"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 68, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}