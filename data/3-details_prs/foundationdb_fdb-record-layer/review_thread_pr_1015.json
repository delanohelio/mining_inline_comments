{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjA1NTUx", "number": 1015, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMTowNDoxN1rOEYpudQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyODo0NVrOEbDHCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjg0OTE3OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerBuildSumIndexTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMTowNDoxN1rOHBGliw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMzoyOTowMlrOHBKUeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxODUzOQ==", "bodyText": "Hm, what is this line trying to accomplish?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r470918539", "createdAt": "2020-08-15T01:04:17Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerBuildSumIndexTest.java", "diffHunk": "@@ -103,6 +103,9 @@ public void run() {\n                 try (FDBRecordContext context = openContext()) {\n                     long sum = recordStore.evaluateAggregateFunction(Collections.singletonList(\"MySimpleRecord\"), aggregateFunction, TupleRange.ALL, IsolationLevel.SNAPSHOT).join().getLong(0);\n                     long expected = updatedRecords.stream().mapToInt(msg -> msg.hasNumValue2() ? msg.getNumValue2() : 0).sum();\n+                    for (int i = 0; sum != expected && i < 20; i ++) {\n+                        Thread.yield();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d093083a32ac1a54872e9a542240a3824f038041"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk3OTcwNQ==", "bodyText": "This meaningless code made the sum test pass, I do not understand why.\nAfter distinguishing between idempotent and accumulative indexes, the sum test passes without this ghost hunting.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r470979705", "createdAt": "2020-08-15T13:29:02Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerBuildSumIndexTest.java", "diffHunk": "@@ -103,6 +103,9 @@ public void run() {\n                 try (FDBRecordContext context = openContext()) {\n                     long sum = recordStore.evaluateAggregateFunction(Collections.singletonList(\"MySimpleRecord\"), aggregateFunction, TupleRange.ALL, IsolationLevel.SNAPSHOT).join().getLong(0);\n                     long expected = updatedRecords.stream().mapToInt(msg -> msg.hasNumValue2() ? msg.getNumValue2() : 0).sum();\n+                    for (int i = 0; sum != expected && i < 20; i ++) {\n+                        Thread.yield();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxODUzOQ=="}, "originalCommit": {"oid": "d093083a32ac1a54872e9a542240a3824f038041"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjg1MDk5OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMTowNjowNVrOHBGmbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMzozNDozN1rOHBKfpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxODc2Nw==", "bodyText": "Hm, perhaps this is a sign with our tests if it's not catching a bug here, but I think this needs to validate that the index is idempotent before it sets the isolation level to SNAPSHOT. Otherwise, there's not a guarantee that the concurrently written record will be indexed.\nWe should probably have a comment here explaining why SNAPSHOT is used, and then another explaining why we need to add the read conflict range at the place we do.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r470918767", "createdAt": "2020-08-15T01:06:05Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -539,7 +539,7 @@ private void increaseLimit() {\n         }\n         final IndexMaintainer maintainer = store.getIndexMaintainer(index);\n         final ExecuteProperties.Builder executeProperties = ExecuteProperties.newBuilder()\n-                .setIsolationLevel(IsolationLevel.SERIALIZABLE);\n+                .setIsolationLevel(IsolationLevel.SNAPSHOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d093083a32ac1a54872e9a542240a3824f038041"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk4MjU2Nw==", "bodyText": "The sum index test did fail, do not lose hope :)\nYou did mention before that the SNAPSHOT approach must be limited to idempotent indexes only, but I failed to assimilate (sorry). I'll fix it now.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r470982567", "createdAt": "2020-08-15T13:34:37Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -539,7 +539,7 @@ private void increaseLimit() {\n         }\n         final IndexMaintainer maintainer = store.getIndexMaintainer(index);\n         final ExecuteProperties.Builder executeProperties = ExecuteProperties.newBuilder()\n-                .setIsolationLevel(IsolationLevel.SERIALIZABLE);\n+                .setIsolationLevel(IsolationLevel.SNAPSHOT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxODc2Nw=="}, "originalCommit": {"oid": "d093083a32ac1a54872e9a542240a3824f038041"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODQ1ODg1OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDozNzo0NVrOHDYL-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDoxODoyNlrOHDiDww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMwNDA1Nw==", "bodyText": "Hmm. IIUC from offline conversations, this was needed to make future commits down the line not fail with a conflict, but this call seems suspicious to me. It essentially marks the index as already built, so the index build won't do much of anything, so it seems more likely to me that this is either masking some other problem, or there is some issue or is a sign that there is some other kind of misconfiguration going on with these tests.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473304057", "createdAt": "2020-08-19T20:37:45Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * OnlineIndexerConflictsTest.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.TestRecords1Proto;\n+import com.apple.foundationdb.record.metadata.Index;\n+import com.apple.foundationdb.record.metadata.IndexTypes;\n+import com.apple.test.Tags;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import static com.apple.foundationdb.record.metadata.Key.Expressions.field;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests for {@link OnlineIndexer}. Checking different db manipulations the indexing process.\n+ */\n+\n+@Tag(Tags.RequiresFDB)\n+public class OnlineIndexerConflictsTest extends OnlineIndexerTest {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(OnlineIndexerConflictsTest.class);\n+\n+    @Test\n+    public void testOnlineIndexerIdempotent() throws Exception {\n+\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                                                 ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            assertTrue(recordStore.uncheckedMarkIndexReadable(index.getName()).join());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acdd84b077ab54cfa4c32895dca8602cbd99e734"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxMzk5OQ==", "bodyText": "I agree. This line was copied from the tests in OnlineIndexerSimpleTest. Would you have any idea why the indexer commit was failing without this line?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473313999", "createdAt": "2020-08-19T20:56:53Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * OnlineIndexerConflictsTest.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.TestRecords1Proto;\n+import com.apple.foundationdb.record.metadata.Index;\n+import com.apple.foundationdb.record.metadata.IndexTypes;\n+import com.apple.test.Tags;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import static com.apple.foundationdb.record.metadata.Key.Expressions.field;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests for {@link OnlineIndexer}. Checking different db manipulations the indexing process.\n+ */\n+\n+@Tag(Tags.RequiresFDB)\n+public class OnlineIndexerConflictsTest extends OnlineIndexerTest {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(OnlineIndexerConflictsTest.class);\n+\n+    @Test\n+    public void testOnlineIndexerIdempotent() throws Exception {\n+\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                                                 ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            assertTrue(recordStore.uncheckedMarkIndexReadable(index.getName()).join());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMwNDA1Nw=="}, "originalCommit": {"oid": "acdd84b077ab54cfa4c32895dca8602cbd99e734"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxOTU2OQ==", "bodyText": "I believe all of the instances of that method being used in OnlineIndexerSimpleTest, it does so so that it can then scan the index without either (1) being told that the index isn't readable (which is what happens if you scan an unbuilt index normally) or (2) building the index and therefore disturbing it. It also looks like in all of the instances (that I could find) in OnlinIndexerSimpleTest, the transaction that calls uncheckedMarkIndexReadable isn't committed (and indeed, there are comments saying // do NOT commit instead of calls to commit()).\nI'm not sure why it's currently failing without that change, though. I had some theories, but most of the theories ended up being falsified by further experiments that you did. It's possible this needs more investigation, which might mean turning on detailed FDB client trace logging, or possibly investing in #1002 (or something temporary along those lines) to see what the conflict is.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473319569", "createdAt": "2020-08-19T21:06:13Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * OnlineIndexerConflictsTest.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.TestRecords1Proto;\n+import com.apple.foundationdb.record.metadata.Index;\n+import com.apple.foundationdb.record.metadata.IndexTypes;\n+import com.apple.test.Tags;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import static com.apple.foundationdb.record.metadata.Key.Expressions.field;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests for {@link OnlineIndexer}. Checking different db manipulations the indexing process.\n+ */\n+\n+@Tag(Tags.RequiresFDB)\n+public class OnlineIndexerConflictsTest extends OnlineIndexerTest {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(OnlineIndexerConflictsTest.class);\n+\n+    @Test\n+    public void testOnlineIndexerIdempotent() throws Exception {\n+\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                                                 ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            assertTrue(recordStore.uncheckedMarkIndexReadable(index.getName()).join());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMwNDA1Nw=="}, "originalCommit": {"oid": "acdd84b077ab54cfa4c32895dca8602cbd99e734"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2NTc5NQ==", "bodyText": "I've added the test you've suggested above. Here I could mark the index as write only.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473465795", "createdAt": "2020-08-20T00:18:26Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * OnlineIndexerConflictsTest.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.TestRecords1Proto;\n+import com.apple.foundationdb.record.metadata.Index;\n+import com.apple.foundationdb.record.metadata.IndexTypes;\n+import com.apple.test.Tags;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import static com.apple.foundationdb.record.metadata.Key.Expressions.field;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests for {@link OnlineIndexer}. Checking different db manipulations the indexing process.\n+ */\n+\n+@Tag(Tags.RequiresFDB)\n+public class OnlineIndexerConflictsTest extends OnlineIndexerTest {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(OnlineIndexerConflictsTest.class);\n+\n+    @Test\n+    public void testOnlineIndexerIdempotent() throws Exception {\n+\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                                                 ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            assertTrue(recordStore.uncheckedMarkIndexReadable(index.getName()).join());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMwNDA1Nw=="}, "originalCommit": {"oid": "acdd84b077ab54cfa4c32895dca8602cbd99e734"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTQ1OTY5OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDoyODoyOVrOHDidSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDoyODoyOVrOHDidSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3MjMzMQ==", "bodyText": "I don't think this comment applies to this test any more", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473472331", "createdAt": "2020-08-20T00:28:29Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTQ4MTgxOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDozNDozM1rOHDisSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMToxMzowNlrOHDkMHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NjE2OQ==", "bodyText": "I don't think this test needs quite as many records now. I think...three would suffice? The main tests have lots of records in order to make sure that during the random operations, we get lots of different combinations. That shouldn't be necessary with this test, though, as it's more about testing specific concurrent operations.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473476169", "createdAt": "2020-08-20T00:34:33Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5MDk0OQ==", "bodyText": "Sure. Shall I keep the other two (random) tests?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473490949", "createdAt": "2020-08-20T00:57:55Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NjE2OQ=="}, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5NTkwMw==", "bodyText": "I don't think so, really. I think the tests in OnlineIndexerBuildValueIndexTest and OnlineIndexerBuildSumIndexTest are essentially trying to test the same thing, and so I think we'd want to stick with those (or add more tests there if we think they are insufficient).\nI'd also think we'd want to track down the weird conflict if we kept them in.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473495903", "createdAt": "2020-08-20T01:05:33Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NjE2OQ=="}, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUwMDcwMw==", "bodyText": "Ok.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473500703", "createdAt": "2020-08-20T01:13:06Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NjE2OQ=="}, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTQ4NDQ2OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDozNToxOFrOHDiuSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo1OTozMlrOHDjqJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NjY4MA==", "bodyText": "Hm, it's weird that you need to mark the index as write only.... It should be marking the index as write only when the record store is opened, I think, unless I'm misunderstanding how this all works.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473476680", "createdAt": "2020-08-20T00:35:18Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5MjAwNw==", "bodyText": "Removing the writeOnly but keeping the commit works!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473492007", "createdAt": "2020-08-20T00:59:32Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NjY4MA=="}, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTQ4NzU5OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDozNjoxMVrOHDiwVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMTo0MTozN1rOHDlUjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NzIwNw==", "bodyText": "I don't think doing this in a loop really adds much. Probably sufficient to just have the one insert. As written, this also builds the full index repeatedly within the loop, which probably isn't quite what we want.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473477207", "createdAt": "2020-08-20T00:36:11Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();\n+            context.commit();\n+        }\n+\n+        int[] inserts = {99, 101, 133, 201, 350, 299, 301};\n+        for (int i = 0; i < inserts.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5MDEzNA==", "bodyText": "Actually that is intentional, I was trying to add a single record each time outside the range (from both sides), next the the first/last items, and in the middle of it. The result is repeatedly adding a record while repeatedly indexing.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473490134", "createdAt": "2020-08-20T00:56:43Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();\n+            context.commit();\n+        }\n+\n+        int[] inserts = {99, 101, 133, 201, 350, 299, 301};\n+        for (int i = 0; i < inserts.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NzIwNw=="}, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5NDgwMA==", "bodyText": "I believe that the way that OnlineIndexer.buildRange works, it'll build the whole range, so I think what this test is currently doing is:\n\nThe first iteration, building the index and inserting a record in separate transactions and asserting that they both succeed\nAll subsequent iterations, inserting a record and then validating that the index doesn't need to be built because it already has\n\nSo, I'm not quite sure it's testing what's desired, unless I'm misunderstanding the goal here.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473494800", "createdAt": "2020-08-20T01:03:51Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();\n+            context.commit();\n+        }\n+\n+        int[] inserts = {99, 101, 133, 201, 350, 299, 301};\n+        for (int i = 0; i < inserts.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NzIwNw=="}, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUwMTcyMA==", "bodyText": "Is there an easy way to delete the index?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473501720", "createdAt": "2020-08-20T01:14:49Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();\n+            context.commit();\n+        }\n+\n+        int[] inserts = {99, 101, 133, 201, 350, 299, 301};\n+        for (int i = 0; i < inserts.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NzIwNw=="}, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUwNTM4OA==", "bodyText": "If you create a new record store and call clearAndMarkIndexWriteOnly, that will delete all of the index's data, if that's what you want to do.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473505388", "createdAt": "2020-08-20T01:20:22Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();\n+            context.commit();\n+        }\n+\n+        int[] inserts = {99, 101, 133, 201, 350, 299, 301};\n+        for (int i = 0; i < inserts.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NzIwNw=="}, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUwNTYxOQ==", "bodyText": "Got it:\nFDBRecordStoreTestBase.RecordMetaDataHook hookDel = metaDataBuilder -> metaDataBuilder.removeIndex(index.getName());", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473505619", "createdAt": "2020-08-20T01:20:45Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();\n+            context.commit();\n+        }\n+\n+        int[] inserts = {99, 101, 133, 201, 350, 299, 301};\n+        for (int i = 0; i < inserts.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NzIwNw=="}, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUxNjEyMg==", "bodyText": "Sorry I didn't see your reply before submitting (my browser, as it seems, does not refresh frequently enough). Shall I change the removeIndex to clearAndMarkIndexWriteOnly?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473516122", "createdAt": "2020-08-20T01:36:57Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();\n+            context.commit();\n+        }\n+\n+        int[] inserts = {99, 101, 133, 201, 350, 299, 301};\n+        for (int i = 0; i < inserts.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NzIwNw=="}, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUxNzIxOA==", "bodyText": "It depends on what you are trying to accomplish. The removeIndex method will...remove the index from the meta-data (so it will require adding it back to then build the index, if that's the idea). Whereas the method I gave simply \"clears out\" the index. I think you just want to clear it out here, but I could be misunderstanding the desired effect.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473517218", "createdAt": "2020-08-20T01:38:29Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();\n+            context.commit();\n+        }\n+\n+        int[] inserts = {99, 101, 133, 201, 350, 299, 301};\n+        for (int i = 0; i < inserts.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NzIwNw=="}, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUxOTI0Ng==", "bodyText": "Either one will work for my desired effect (which is to add a record in different locations while indexing). Would you be willing to review it as is?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473519246", "createdAt": "2020-08-20T01:41:37Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();\n+            context.commit();\n+        }\n+\n+        int[] inserts = {99, 101, 133, 201, 350, 299, 301};\n+        for (int i = 0; i < inserts.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NzIwNw=="}, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTQ5MjM2OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDozNzoyOVrOHDizkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMTowMjowN1rOHDjxAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3ODAzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.info(\"newIndex thread run\");\n          \n      \n    \n    \n  \n\nNow that it's not its own thread", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473478035", "createdAt": "2020-08-20T00:37:29Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();\n+            context.commit();\n+        }\n+\n+        int[] inserts = {99, 101, 133, 201, 350, 299, 301};\n+        for (int i = 0; i < inserts.length; i++) {\n+            int record_i = inserts[i];\n+\n+            final FDBStoreTimer timer = new FDBStoreTimer();\n+            LOGGER.info(\"newIndex thread run\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5Mzc2Mg==", "bodyText": "", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473493762", "createdAt": "2020-08-20T01:02:07Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();\n+            context.commit();\n+        }\n+\n+        int[] inserts = {99, 101, 133, 201, 350, 299, 301};\n+        for (int i = 0; i < inserts.length; i++) {\n+            int record_i = inserts[i];\n+\n+            final FDBStoreTimer timer = new FDBStoreTimer();\n+            LOGGER.info(\"newIndex thread run\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3ODAzNQ=="}, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTQ5NDQzOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDozODowNFrOHDi1CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDozODowNFrOHDi1CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3ODQwOQ==", "bodyText": "But...a conflict shouldn't happen?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473478409", "createdAt": "2020-08-20T00:38:04Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTUwMzQzOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo0MDozMlrOHDi68g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo0MDozMlrOHDi68g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3OTkyMg==", "bodyText": "This assert isn't hurting anything, I suppose, but it's also already covered by the two contexts committing successfully above. It may be worth adding a comment on context1.commit() about how a record is being added in the range added by the indexer, but the transaction still commits because it's value isn't needed by the indexer.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473479922", "createdAt": "2020-08-20T00:40:32Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();\n+            context.commit();\n+        }\n+\n+        int[] inserts = {99, 101, 133, 201, 350, 299, 301};\n+        for (int i = 0; i < inserts.length; i++) {\n+            int record_i = inserts[i];\n+\n+            final FDBStoreTimer timer = new FDBStoreTimer();\n+            LOGGER.info(\"newIndex thread run\");\n+            try (FDBRecordContext context1 = openContext()) {\n+                try (OnlineIndexer indexer =\n+                             OnlineIndexer.newBuilder()\n+                                     .setRecordStore(recordStore)\n+                                     .setIndex(\"newIndex\")\n+                                     .setTimer(timer)\n+                                     .build()) {\n+                    indexer.buildRange(recordStore, null, null).join();\n+                    try (FDBRecordContext context2 = openContext()) {\n+                        recordStore.saveRecord(records.get(record_i));\n+                        context2.commit();\n+                    }\n+                    context1.commit();\n+                }\n+            }\n+\n+            assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTUxNzk3OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo0NDoyNFrOHDjEpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo0NDoyNFrOHDjEpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4MjQwNA==", "bodyText": "Hm, maybe something more like testAddRecordToRangeWhileIndexedIdempotent? Or something with those words?\nI don't think we want \"nested\" in the title. We typically use that to refer to nested key expressions (i.e., indexes defined on elements of nested messages), and having it here might cause confusion.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473482404", "createdAt": "2020-08-20T00:44:24Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzkzMzE2OnYy", "diffSide": "RIGHT", "path": "docs/ReleaseNotes.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0ODo1OVrOHEO0Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0ODo1OVrOHEO0Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5OTA2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * **Feature** Avoid repeating index endpoints conflicts #1015 [(Issue #1015)](https://github.com/FoundationDB/fdb-record-layer/issues/1015)\n          \n          \n            \n            * **Feature** Avoid repeating index endpoints conflicts [(Issue #1015)](https://github.com/FoundationDB/fdb-record-layer/issues/1015)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474199062", "createdAt": "2020-08-20T18:48:59Z", "author": {"login": "alecgrieser"}, "path": "docs/ReleaseNotes.md", "diffHunk": "@@ -30,7 +30,7 @@ Additionally, builds for the project now require JDK 11. The project is still ta\n * **Performance** Improvement 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Performance** Improvement 4 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Performance** Improvement 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n-* **Feature** Feature 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n+* **Feature** Avoid repeating index endpoints conflicts #1015 [(Issue #1015)](https://github.com/FoundationDB/fdb-record-layer/issues/1015)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5af7d8c00ecaff86f23af1ee1a6f16cb08862c19"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTMxMjc4OnYy", "diffSide": "RIGHT", "path": "docs/ReleaseNotes.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNTowNzoxNVrOHEbwJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNToyNToyNVrOHExlQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxMTA0Nw==", "bodyText": "This is supposed to be Issue number not PR number. You could create an Issue from https://github.com/FoundationDB/fdb-record-layer/issues/new/choose", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474411047", "createdAt": "2020-08-21T05:07:15Z", "author": {"login": "nblintao"}, "path": "docs/ReleaseNotes.md", "diffHunk": "@@ -30,7 +30,7 @@ Additionally, builds for the project now require JDK 11. The project is still ta\n * **Performance** Improvement 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Performance** Improvement 4 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Performance** Improvement 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n-* **Feature** Feature 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n+* **Feature** Avoid repeating index endpoints conflicts [(Issue #1015)](https://github.com/FoundationDB/fdb-record-layer/issues/1015)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "779aef648d481dbf55b3b1135a6b263ffb0f3897"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2ODcwNA==", "bodyText": "Oops. I've also squashed to eliminate the comments with the wrong #issue_num.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474768704", "createdAt": "2020-08-21T15:25:25Z", "author": {"login": "jjezra"}, "path": "docs/ReleaseNotes.md", "diffHunk": "@@ -30,7 +30,7 @@ Additionally, builds for the project now require JDK 11. The project is still ta\n * **Performance** Improvement 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Performance** Improvement 4 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Performance** Improvement 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n-* **Feature** Feature 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n+* **Feature** Avoid repeating index endpoints conflicts [(Issue #1015)](https://github.com/FoundationDB/fdb-record-layer/issues/1015)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxMTA0Nw=="}, "originalCommit": {"oid": "779aef648d481dbf55b3b1135a6b263ffb0f3897"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTMyMDM5OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNToxMjoxNFrOHEb0uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxMDo1MlrOHE05YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxMjIxNw==", "bodyText": "It's a good place to illustrate on \"range conflict protection\": allow records being added to the range (so they may be or may not be seen by indexer) while scanning.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474412217", "createdAt": "2020-08-21T05:12:14Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1015,11 +1022,19 @@ public void rebuildIndex(@Nonnull FDBRecordStore store) {\n     @Nonnull\n     private CompletableFuture<TupleRange> buildEndpoints(@Nonnull FDBRecordStore store, @Nonnull RangeSet rangeSet,\n                                                          @Nullable AtomicLong recordsScanned) {\n+        boolean isIdempotent = store.getIndexMaintainer(index).isIdempotent();\n+        final IsolationLevel isolationLevel =\n+                isIdempotent ?\n+                // if idempotent: since double indexing is harmless, we can skip the range conflict protection. At worse,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "779aef648d481dbf55b3b1135a6b263ffb0f3897"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcyNDA1OA==", "bodyText": "I'm not sure I understand this action item. Are you suggesting to add a test to do it?\n(Alec said that this scenario is already covered in other tests)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474724058", "createdAt": "2020-08-21T14:12:20Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1015,11 +1022,19 @@ public void rebuildIndex(@Nonnull FDBRecordStore store) {\n     @Nonnull\n     private CompletableFuture<TupleRange> buildEndpoints(@Nonnull FDBRecordStore store, @Nonnull RangeSet rangeSet,\n                                                          @Nullable AtomicLong recordsScanned) {\n+        boolean isIdempotent = store.getIndexMaintainer(index).isIdempotent();\n+        final IsolationLevel isolationLevel =\n+                isIdempotent ?\n+                // if idempotent: since double indexing is harmless, we can skip the range conflict protection. At worse,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxMjIxNw=="}, "originalCommit": {"oid": "779aef648d481dbf55b3b1135a6b263ffb0f3897"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMjMxOA==", "bodyText": "I meant it should help to explain \"range conflict protection\" in more detail in this comment.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474812318", "createdAt": "2020-08-21T16:48:55Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1015,11 +1022,19 @@ public void rebuildIndex(@Nonnull FDBRecordStore store) {\n     @Nonnull\n     private CompletableFuture<TupleRange> buildEndpoints(@Nonnull FDBRecordStore store, @Nonnull RangeSet rangeSet,\n                                                          @Nullable AtomicLong recordsScanned) {\n+        boolean isIdempotent = store.getIndexMaintainer(index).isIdempotent();\n+        final IsolationLevel isolationLevel =\n+                isIdempotent ?\n+                // if idempotent: since double indexing is harmless, we can skip the range conflict protection. At worse,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxMjIxNw=="}, "originalCommit": {"oid": "779aef648d481dbf55b3b1135a6b263ffb0f3897"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMzAwOQ==", "bodyText": "Sure. NP!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474823009", "createdAt": "2020-08-21T17:10:52Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1015,11 +1022,19 @@ public void rebuildIndex(@Nonnull FDBRecordStore store) {\n     @Nonnull\n     private CompletableFuture<TupleRange> buildEndpoints(@Nonnull FDBRecordStore store, @Nonnull RangeSet rangeSet,\n                                                          @Nullable AtomicLong recordsScanned) {\n+        boolean isIdempotent = store.getIndexMaintainer(index).isIdempotent();\n+        final IsolationLevel isolationLevel =\n+                isIdempotent ?\n+                // if idempotent: since double indexing is harmless, we can skip the range conflict protection. At worse,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxMjIxNw=="}, "originalCommit": {"oid": "779aef648d481dbf55b3b1135a6b263ffb0f3897"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTMzMDQ4OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNToxODowMlrOHEb6Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowMTo1NVrOHE0pCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxMzY2Ng==", "bodyText": "Even though only one record is scanned, I think that record should be added to read conflict.\nI wouldn't worry about reproducing it from tests though.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474413666", "createdAt": "2020-08-21T05:18:02Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1015,11 +1022,19 @@ public void rebuildIndex(@Nonnull FDBRecordStore store) {\n     @Nonnull\n     private CompletableFuture<TupleRange> buildEndpoints(@Nonnull FDBRecordStore store, @Nonnull RangeSet rangeSet,\n                                                          @Nullable AtomicLong recordsScanned) {\n+        boolean isIdempotent = store.getIndexMaintainer(index).isIdempotent();\n+        final IsolationLevel isolationLevel =\n+                isIdempotent ?\n+                // if idempotent: since double indexing is harmless, we can skip the range conflict protection. At worse,\n+                // some records will be re-indexed.\n+                IsolationLevel.SNAPSHOT :\n+                IsolationLevel.SERIALIZABLE;\n         final ExecuteProperties limit1 = ExecuteProperties.newBuilder()\n                 .setReturnedRowLimit(1)\n-                .setIsolationLevel(IsolationLevel.SERIALIZABLE)\n+                .setIsolationLevel(isolationLevel)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "779aef648d481dbf55b3b1135a6b263ffb0f3897"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcyODA1Ng==", "bodyText": "If I understand it correctly:\nWhen idempotent - the endpoints will always be added to the conflicts list during the full scan, because the data doesn't change in a SNAPSHOT mode. And if an endpoint is not being indexed (other type), why should we care if it changes?\nWhen accumulative - we use the range protection, which includes the endpoints.\nWhat am I missing?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474728056", "createdAt": "2020-08-21T14:19:07Z", "author": {"login": "jjezra"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1015,11 +1022,19 @@ public void rebuildIndex(@Nonnull FDBRecordStore store) {\n     @Nonnull\n     private CompletableFuture<TupleRange> buildEndpoints(@Nonnull FDBRecordStore store, @Nonnull RangeSet rangeSet,\n                                                          @Nullable AtomicLong recordsScanned) {\n+        boolean isIdempotent = store.getIndexMaintainer(index).isIdempotent();\n+        final IsolationLevel isolationLevel =\n+                isIdempotent ?\n+                // if idempotent: since double indexing is harmless, we can skip the range conflict protection. At worse,\n+                // some records will be re-indexed.\n+                IsolationLevel.SNAPSHOT :\n+                IsolationLevel.SERIALIZABLE;\n         final ExecuteProperties limit1 = ExecuteProperties.newBuilder()\n                 .setReturnedRowLimit(1)\n-                .setIsolationLevel(IsolationLevel.SERIALIZABLE)\n+                .setIsolationLevel(isolationLevel)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxMzY2Ng=="}, "originalCommit": {"oid": "779aef648d481dbf55b3b1135a6b263ffb0f3897"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxODgyNg==", "bodyText": "After taking close look, I think the implementation is correct. We don't need to add the endpoints to read conflict list because this method will call buildRange which will do it.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474818826", "createdAt": "2020-08-21T17:01:55Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1015,11 +1022,19 @@ public void rebuildIndex(@Nonnull FDBRecordStore store) {\n     @Nonnull\n     private CompletableFuture<TupleRange> buildEndpoints(@Nonnull FDBRecordStore store, @Nonnull RangeSet rangeSet,\n                                                          @Nullable AtomicLong recordsScanned) {\n+        boolean isIdempotent = store.getIndexMaintainer(index).isIdempotent();\n+        final IsolationLevel isolationLevel =\n+                isIdempotent ?\n+                // if idempotent: since double indexing is harmless, we can skip the range conflict protection. At worse,\n+                // some records will be re-indexed.\n+                IsolationLevel.SNAPSHOT :\n+                IsolationLevel.SERIALIZABLE;\n         final ExecuteProperties limit1 = ExecuteProperties.newBuilder()\n                 .setReturnedRowLimit(1)\n-                .setIsolationLevel(IsolationLevel.SERIALIZABLE)\n+                .setIsolationLevel(isolationLevel)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxMzY2Ng=="}, "originalCommit": {"oid": "779aef648d481dbf55b3b1135a6b263ffb0f3897"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzk3OTYxOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyODo0NVrOHE1bhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyODo0NVrOHE1bhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzMTc1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testAddRecordToRangeWhileIndexedIdempotentFailure() {\n          \n          \n            \n                public void testModifyRecordInRangeWhileIndexedIdempotentFailure() {\n          \n      \n    \n    \n  \n\nI think that's probably a more accurate description", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474831751", "createdAt": "2020-08-21T17:28:45Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * OnlineIndexerConflictsTest.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.record.TestRecords1Proto;\n+import com.apple.foundationdb.record.metadata.Index;\n+import com.apple.foundationdb.record.metadata.IndexTypes;\n+import com.apple.test.Tags;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import static com.apple.foundationdb.record.metadata.Key.Expressions.field;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+/**\n+ * Tests for {@link OnlineIndexer}. Checking different db manipulations during the indexing process.\n+ */\n+\n+@Tag(Tags.RequiresFDB)\n+public class OnlineIndexerConflictsTest extends OnlineIndexerTest {\n+\n+    @Test\n+    public void testAddRecordToRangeWhileIndexedIdempotent() {\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 20).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hookAdd = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 2; i <= 8; i++) {\n+                // even numbers from 4 to 16\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+        openSimpleMetaData(hookAdd);\n+        try (FDBRecordContext context = openContext()) {\n+            context.commit();\n+        }\n+\n+        int[] inserts = {2, 5, 11, 17, 15};\n+        for (int i = 0; i < inserts.length; i++) {\n+            int record_i = inserts[i];\n+\n+            try (FDBRecordContext context1 = openContext()) {\n+                try (OnlineIndexer indexer =\n+                             OnlineIndexer.newBuilder()\n+                                     .setRecordStore(recordStore)\n+                                     .setIndex(\"newIndex\")\n+                                     .build()) {\n+                    indexer.buildRange(recordStore, null, null).join();\n+                    try (FDBRecordContext context2 = openContext()) {\n+                        recordStore.saveRecord(records.get(record_i));\n+                        // This record might be added in the indexer's range, but the transaction still commits because it doesn't\n+                        // change any existing records.\n+                        context2.commit();\n+                    }\n+                    context1.commit();\n+                }\n+            }\n+\n+            try (FDBRecordContext context = openContext()) {\n+                recordStore.clearAndMarkIndexWriteOnly(index).join();\n+                context.commit();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testAddRecordToRangeWhileIndexedOtherType() {\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 7).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val * 2).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        List<TestRecords1Proto.MyOtherRecord> otherRecords =\n+                LongStream.range(0, 7).mapToObj(val -> TestRecords1Proto.MyOtherRecord.newBuilder().setRecNo(val * 2 + 1).setNumValue2((int) val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        List<TestRecords1Proto.MyOtherRecord> otherRecordsOverwrite =\n+                LongStream.range(0, 7).mapToObj(val -> TestRecords1Proto.MyOtherRecord.newBuilder().setRecNo(val * 2 + 1).setNumValue2((int) val + 101).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hookAdd = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            records.forEach(recordStore::saveRecord);\n+            otherRecords.forEach(recordStore::saveRecord);\n+            context.commit();\n+        }\n+        openSimpleMetaData(hookAdd);\n+        try (FDBRecordContext context = openContext()) {\n+            context.commit();\n+        }\n+\n+        otherRecordsOverwrite.forEach(rec -> {\n+\n+            try (FDBRecordContext context1 = openContext()) {\n+                try (OnlineIndexer indexer =\n+                             OnlineIndexer.newBuilder()\n+                                     .setRecordStore(recordStore)\n+                                     .setIndex(\"newIndex\")\n+                                     .build()) {\n+                    indexer.buildRange(recordStore, null, null).join();\n+                    try (FDBRecordContext context2 = openContext()) {\n+                        recordStore.saveRecord(rec);\n+                        // This record's type is different than the indexer's, so both commits should succeed\n+                        context2.commit();\n+                    }\n+                    context1.commit();\n+                }\n+            }\n+\n+            try (FDBRecordContext context = openContext()) {\n+                recordStore.clearAndMarkIndexWriteOnly(index).join();\n+                context.commit();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void testAddRecordToRangeWhileIndexedIdempotentFailure() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a857ec3666b81d75ce21ae79cd67f318ec77bf9"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 33, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}