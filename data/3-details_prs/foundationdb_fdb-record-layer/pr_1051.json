{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3OTkwMjI1", "number": 1051, "title": "Fixes #1050: IndexFunctionHelper.getGroupedKey / getGroupingKey can \u2026", "bodyText": "\u2026 get array bounds error", "createdAt": "2020-10-22T03:40:28Z", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1051", "merged": true, "mergeCommit": {"oid": "6149a0986a1caa42a0bd59e9c6ec8fc808549e23"}, "closed": true, "closedAt": "2020-10-22T20:50:54Z", "author": {"login": "MMcM"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdU5jvigH2gAyNTA3OTkwMjI1OjM2ZGYwZWM1ZWVkNTc1N2EzZmNkOTg2MDA2YTc5ZThjN2UzYzVkNzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVIBbrgFqTUxNTA5NTEyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "36df0ec5eed5757a3fcd986006a79e8c7e3c5d70", "author": {"user": {"login": "MMcM", "name": "Mike McMahon"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/36df0ec5eed5757a3fcd986006a79e8c7e3c5d70", "committedDate": "2020-10-22T03:39:21Z", "message": "Fixes #1050: IndexFunctionHelper.getGroupedKey / getGroupingKey can get array bounds error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDExNjI1", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1051#pullrequestreview-515011625", "createdAt": "2020-10-22T18:34:32Z", "commit": {"oid": "36df0ec5eed5757a3fcd986006a79e8c7e3c5d70"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODozNDozMlrOHmuzmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTowMjo0NVrOHmvyJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3NDgwOQ==", "bodyText": "Is this required for correctness, or just an optimization?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1051#discussion_r510374809", "createdAt": "2020-10-22T18:34:32Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexFunctionHelper.java", "diffHunk": "@@ -145,6 +147,9 @@ private IndexFunctionHelper() {\n      * @return {@code true} if the operand is compatible with the index\n      */\n     public static boolean isGroupPrefix(@Nonnull KeyExpression functionOperand, @Nonnull KeyExpression indexRoot) {\n+        if (functionOperand.equals(indexRoot)) {\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36df0ec5eed5757a3fcd986006a79e8c7e3c5d70"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4MjAwMQ==", "bodyText": "Was the prior behavior here (for nested) that it would just throw an error? I'm not seeing any handling of it at all in the old code.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1051#discussion_r510382001", "createdAt": "2020-10-22T18:47:25Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/IndexFunctionHelperTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * IndexFunctionHelperTest.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.record.metadata.Key;\n+import com.apple.foundationdb.record.metadata.expressions.GroupingKeyExpression;\n+import com.apple.foundationdb.record.metadata.expressions.KeyExpression;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * Tests for {@link IndexFunctionHelper}.\n+ */\n+public class IndexFunctionHelperTest {\n+\n+    @Test\n+    public void groupSubKeysBasic() {\n+        final KeyExpression ungrouped = Key.Expressions.field(\"value\").ungrouped();\n+        assertEquals(Key.Expressions.field(\"value\"), IndexFunctionHelper.getGroupedKey(ungrouped));\n+        assertEquals(Key.Expressions.empty(), IndexFunctionHelper.getGroupingKey(ungrouped));\n+\n+        final KeyExpression group = Key.Expressions.field(\"value\").groupBy(Key.Expressions.field(\"group\"));\n+        assertEquals(Key.Expressions.field(\"value\"), IndexFunctionHelper.getGroupedKey(group));\n+        assertEquals(Key.Expressions.field(\"group\"), IndexFunctionHelper.getGroupingKey(group));\n+    }\n+\n+    @Test\n+    public void groupSubKeysNested() {\n+        final KeyExpression nested = new GroupingKeyExpression(Key.Expressions.field(\"values\", KeyExpression.FanType.FanOut).nest(Key.Expressions.concatenateFields(\"one\", \"two\")), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36df0ec5eed5757a3fcd986006a79e8c7e3c5d70"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4NDc4NA==", "bodyText": "I think this is missing a test that takes a then with a nested and splits it \"within the nest\". Something like:\nconcat(nest(a, concat(b, c)), d, nest(e, concat(f, g))\nAnd then splitting it at various points", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1051#discussion_r510384784", "createdAt": "2020-10-22T18:52:28Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/IndexFunctionHelperTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * IndexFunctionHelperTest.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.record.metadata.Key;\n+import com.apple.foundationdb.record.metadata.expressions.GroupingKeyExpression;\n+import com.apple.foundationdb.record.metadata.expressions.KeyExpression;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * Tests for {@link IndexFunctionHelper}.\n+ */\n+public class IndexFunctionHelperTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36df0ec5eed5757a3fcd986006a79e8c7e3c5d70"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4NTkxNQ==", "bodyText": "Is there a concern that with this change, there will be a behavior change in some kind of incompatible way? E.g., if you had an index defined on concat(nest(a, concat(b, c)), d) with 1 grouping column, and you rely on this incorrectly grouping the expression into nest(a, concat(b, c)) and d? Or will a situation like that have always thrown an error before?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1051#discussion_r510385915", "createdAt": "2020-10-22T18:54:19Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexFunctionHelper.java", "diffHunk": "@@ -154,34 +159,72 @@ public static KeyExpression getGroupedKey(@Nonnull KeyExpression key) {\n             return key;\n         }\n         GroupingKeyExpression grouping = (GroupingKeyExpression) key;\n-        return getGroupingSubkey(grouping, grouping.getGroupingCount(), grouping.getColumnSize());\n+        return getSubKey(grouping.getWholeKey(), grouping.getGroupingCount(), grouping.getColumnSize());\n     }\n \n     public static KeyExpression getGroupingKey(@Nonnull KeyExpression key) {\n         if (!(key instanceof GroupingKeyExpression)) {\n             return EmptyKeyExpression.EMPTY;\n         }\n         GroupingKeyExpression grouping = (GroupingKeyExpression) key;\n-        return getGroupingSubkey(grouping, 0, grouping.getGroupingCount());\n+        return getSubKey(grouping.getWholeKey(), 0, grouping.getGroupingCount());\n     }\n \n-    protected static KeyExpression getGroupingSubkey(GroupingKeyExpression grouping, int start, int end) {\n+    protected static KeyExpression getSubKey(KeyExpression key, int start, int end) {\n         if (start == end) {\n             return EmptyKeyExpression.EMPTY;\n         }\n-        final KeyExpression key = grouping.getWholeKey();\n-        if (!(key instanceof ThenKeyExpression)) {\n-            if (start == 0 && end == 1) {\n-                return key;\n-            }\n-            throw new RecordCoreException(\"grouping breaks apart key other than Then\");\n+        if (start == 0 && end == key.getColumnSize()) {\n+            return key;\n+        }\n+        if (key instanceof ThenKeyExpression) {\n+            return getThenSubKey((ThenKeyExpression)key, start, end);\n+        }\n+        if (key instanceof NestingKeyExpression) {\n+            final NestingKeyExpression nesting = (NestingKeyExpression)key;\n+            return new NestingKeyExpression(nesting.getParent(), getSubKey(nesting.getChild(), start, end));\n         }\n-        ThenKeyExpression then = (ThenKeyExpression)key;\n-        List<KeyExpression> children = then.getChildren();\n-        if (end == start + 1) {\n-            return children.get(start);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36df0ec5eed5757a3fcd986006a79e8c7e3c5d70"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5MDgyMg==", "bodyText": "This looks right to me, but I think it could use more coverage on the various cases to validate that", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1051#discussion_r510390822", "createdAt": "2020-10-22T19:02:45Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexFunctionHelper.java", "diffHunk": "@@ -154,34 +159,72 @@ public static KeyExpression getGroupedKey(@Nonnull KeyExpression key) {\n             return key;\n         }\n         GroupingKeyExpression grouping = (GroupingKeyExpression) key;\n-        return getGroupingSubkey(grouping, grouping.getGroupingCount(), grouping.getColumnSize());\n+        return getSubKey(grouping.getWholeKey(), grouping.getGroupingCount(), grouping.getColumnSize());\n     }\n \n     public static KeyExpression getGroupingKey(@Nonnull KeyExpression key) {\n         if (!(key instanceof GroupingKeyExpression)) {\n             return EmptyKeyExpression.EMPTY;\n         }\n         GroupingKeyExpression grouping = (GroupingKeyExpression) key;\n-        return getGroupingSubkey(grouping, 0, grouping.getGroupingCount());\n+        return getSubKey(grouping.getWholeKey(), 0, grouping.getGroupingCount());\n     }\n \n-    protected static KeyExpression getGroupingSubkey(GroupingKeyExpression grouping, int start, int end) {\n+    protected static KeyExpression getSubKey(KeyExpression key, int start, int end) {\n         if (start == end) {\n             return EmptyKeyExpression.EMPTY;\n         }\n-        final KeyExpression key = grouping.getWholeKey();\n-        if (!(key instanceof ThenKeyExpression)) {\n-            if (start == 0 && end == 1) {\n-                return key;\n-            }\n-            throw new RecordCoreException(\"grouping breaks apart key other than Then\");\n+        if (start == 0 && end == key.getColumnSize()) {\n+            return key;\n+        }\n+        if (key instanceof ThenKeyExpression) {\n+            return getThenSubKey((ThenKeyExpression)key, start, end);\n+        }\n+        if (key instanceof NestingKeyExpression) {\n+            final NestingKeyExpression nesting = (NestingKeyExpression)key;\n+            return new NestingKeyExpression(nesting.getParent(), getSubKey(nesting.getChild(), start, end));\n         }\n-        ThenKeyExpression then = (ThenKeyExpression)key;\n-        List<KeyExpression> children = then.getChildren();\n-        if (end == start + 1) {\n-            return children.get(start);\n+        throw new RecordCoreException(\"grouping breaks apart key other than Then\");\n+    }\n+\n+    protected static KeyExpression getThenSubKey(ThenKeyExpression then, int columnStart, int columnEnd) {\n+        final List<KeyExpression> children = then.getChildren();\n+        int columnPosition = 0;\n+        int startChildPosition = -1;\n+        int startChildStart = -1;\n+        int startChildEnd = -1;\n+        for (int childPosition = 0; childPosition < children.size(); childPosition++) {\n+            final KeyExpression child = children.get(childPosition);\n+            final int childColumns = child.getColumnSize();\n+            if (startChildPosition < 0 && columnPosition + childColumns > columnStart) {\n+                startChildPosition = childPosition;\n+                startChildStart = columnStart - columnPosition;\n+                startChildEnd = childColumns;\n+            }\n+            if (columnPosition + childColumns >= columnEnd) {\n+                int endChildEnd = columnEnd - columnPosition;\n+                if (childPosition == startChildPosition) {\n+                    // Just one child spans column start, end.\n+                    if (startChildPosition == 0 && endChildEnd == childColumns) {\n+                        return child;\n+                    } else {\n+                        return getSubKey(child, startChildStart, endChildEnd);\n+                    }\n+                }\n+                if (startChildStart == 0 && endChildEnd == childColumns) {\n+                    return new ThenKeyExpression(children.subList(startChildPosition, childPosition + 1));\n+                }\n+                final List<KeyExpression> keys = new ArrayList<>(childPosition - startChildPosition + 1);\n+                keys.add(getSubKey(children.get(startChildPosition), startChildStart, startChildEnd));\n+                if (childPosition > startChildPosition + 1) {\n+                    keys.addAll(children.subList(startChildPosition + 1, childPosition));\n+                }\n+                keys.add(getSubKey(child, 0, endChildEnd));\n+                return new ThenKeyExpression(keys);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36df0ec5eed5757a3fcd986006a79e8c7e3c5d70"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b3d9fd60929ce54561fcd7cb95347779f019737", "author": {"user": {"login": "MMcM", "name": "Mike McMahon"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/2b3d9fd60929ce54561fcd7cb95347779f019737", "committedDate": "2020-10-22T20:03:12Z", "message": "Expand test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDk1MTIx", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1051#pullrequestreview-515095121", "createdAt": "2020-10-22T20:30:27Z", "commit": {"oid": "2b3d9fd60929ce54561fcd7cb95347779f019737"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2474, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}