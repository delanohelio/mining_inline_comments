{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNjI5OTc3", "number": 1040, "title": "Resolves #1039: partition residual filters into index fiters and true\u2026", "bodyText": "\u2026 residuals\nDuring planning in the heuristic planner we partition unsatisfiedFilters into unsatisfiedFilters aka residuals and indexFilters which can be applied on index records. We use that information to favor an index scan over a wider index if there are index filters that can be applied that would allow us to filter records before we fetch them.", "createdAt": "2020-10-12T14:52:58Z", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040", "merged": true, "mergeCommit": {"oid": "8a8458d82d0cae4f3e0f45b088fe88abc63136c9"}, "closed": true, "closedAt": "2020-10-14T22:08:42Z", "author": {"login": "normen662"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdR1WDKAFqTUwNjY5OTUxNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSkoN9gFqTUwODgwNDU2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2Njk5NTE3", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#pullrequestreview-506699517", "createdAt": "2020-10-12T15:03:00Z", "commit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTowMzowMFrOHgCexQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTowMzowMFrOHgCexQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM1NzEyNQ==", "bodyText": "Had to remove the dual planner annotation as the temp planner cannot plan this anymore.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#discussion_r503357125", "createdAt": "2020-10-12T15:03:00Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBReturnedRecordLimitQueryTest.java", "diffHunk": "@@ -65,7 +67,7 @@\n      * Verify that a returned record limit works properly against a query with a filter on one field and a sort on another,\n      * when the filter field is un-indexed and the sort is in reverse order.\n      */\n-    @DualPlannerTest\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NzAwNDQ0", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#pullrequestreview-506700444", "createdAt": "2020-10-12T15:04:09Z", "commit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTowNDoxMFrOHgCheg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTowNDoxMFrOHgCheg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM1NzgxOA==", "bodyText": "While the plan is better it seems that we discard more records. I am assuming that is because of prefetching but it would be nice to understand exactly why that is. (this is in conjunction with a limit on the query)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#discussion_r503357818", "createdAt": "2020-10-12T15:04:10Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBReturnedRecordLimitQueryTest.java", "diffHunk": "@@ -88,13 +90,13 @@ public void testComplexLimits2() throws Exception {\n                     FDBQueriedRecord<Message> rec = cursor.next();\n                     TestRecords1Proto.MySimpleRecord.Builder myrec = TestRecords1Proto.MySimpleRecord.newBuilder();\n                     myrec.mergeFrom(rec.getRecord());\n-                    assertEquals(\"odd\", myrec.getStrValueIndexed());\n                     assertEquals(0, myrec.getNumValue2());\n+                    assertEquals(\"odd\", myrec.getStrValueIndexed());\n                     i += 1;\n                 }\n             }\n             assertEquals(10, i);\n-            assertDiscardedAtMost(18, context);\n+            assertDiscardedAtMost(34, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NzAxNDA3", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#pullrequestreview-506701407", "createdAt": "2020-10-12T15:05:25Z", "commit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTowNToyNVrOHgCkbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTowNToyNVrOHgCkbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM1ODU3Mw==", "bodyText": "The chosen plan uses a different index that uses a second field (name) to impose a secondary order which is not specified in the test case.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#discussion_r503358573", "createdAt": "2020-10-12T15:05:25Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBRepeatedFieldQueryTest.java", "diffHunk": "@@ -336,17 +338,17 @@ public void sortRepeated() throws Exception {\n                     .setFilter(Query.field(\"name\").greaterThan(\"A\"));\n             RecordQuery query = builder.setRemoveDuplicates(false).build();\n             RecordQueryPlan plan = planner.plan(query);\n-            assertThat(plan, filter(query.getFilter(), indexScan(allOf(indexName(\"customers\"), unbounded()))));\n-            assertEquals(1833106833, plan.planHash());\n-            assertEquals(Arrays.asList(1000L, 1001L, 1000L, 1001L, 1000L, 1000L, 1001L), fetchResultValues(plan, TestRecords4Proto.RestaurantRecord.REST_NO_FIELD_NUMBER,\n+            assertThat(plan, fetch(filter(query.getFilter(), coveringIndexScan(indexScan(allOf(indexName(\"customers-name\"), unbounded()))))));\n+            assertEquals(-505715770, plan.planHash());\n+            assertEquals(Arrays.asList(1000L, 1001L, 1000L, 1001L, 1000L, 1001L, 1000L), fetchResultValues(plan, TestRecords4Proto.RestaurantRecord.REST_NO_FIELD_NUMBER,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NzA3MDAy", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#pullrequestreview-506707002", "createdAt": "2020-10-12T15:12:25Z", "commit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNToxMjoyNlrOHgC0-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNToxMjoyNlrOHgC0-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2MjgwOQ==", "bodyText": "This plan change is due to different costing. Previously SCAN() and INDEX_SCAN() where intrinsically considered equal and the PREFER_SCAN configuration parameter was the tie breaker. Now, the index is considered better as the filter on header/{id GREATER THAN 100} can be applied on the index key. Not sure if we want it like this.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#discussion_r503362809", "createdAt": "2020-10-12T15:12:26Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankIndexTest.java", "diffHunk": "@@ -1116,8 +1116,7 @@ public void headerRankAndIdQuery() throws Exception {\n                 .build();\n         planner.setIndexScanPreference(QueryPlanner.IndexScanPreference.PREFER_SCAN);\n         RecordQueryPlan plan = planner.plan(query);\n-        assertEquals(\"Scan(([buffaloes, 100],[buffaloes]]) | [HeaderRankedRecord]\" +\n-                        \" | score LESS_THAN $__rank_0 WHERE __rank_0 = score_by_nested_id.score_for_rank_else_skip(buffaloes, 2)\",\n+        assertEquals(\"Fetch(Covering(Index(score_by_nested_id ([buffaloes, null],[buffaloes, 2]) BY_RANK) -> [score: KEY[1], header: [group: KEY[0], id: KEY[2]]]) | header/{id GREATER_THAN 100})\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c", "author": {"user": {"login": "normen662", "name": null}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/13542980a4616d1bb7123cfbc5d41be2d2e3c01c", "committedDate": "2020-10-12T14:51:04Z", "message": "Resolves #1039: partition residual filters into index fiters and true residuals"}, "afterCommit": {"oid": "775eefa968b683aa26c03b833a2f05b6104b7215", "author": {"user": {"login": "normen662", "name": null}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/775eefa968b683aa26c03b833a2f05b6104b7215", "committedDate": "2020-10-12T15:57:51Z", "message": "Resolves #1039: partition residual filters into index fiters and true residuals"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "775eefa968b683aa26c03b833a2f05b6104b7215", "author": {"user": {"login": "normen662", "name": null}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/775eefa968b683aa26c03b833a2f05b6104b7215", "committedDate": "2020-10-12T15:57:51Z", "message": "Resolves #1039: partition residual filters into index fiters and true residuals"}, "afterCommit": {"oid": "7df62c83cdc433a108a3c01ccbb6763b23dc688d", "author": {"user": {"login": "normen662", "name": null}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/7df62c83cdc433a108a3c01ccbb6763b23dc688d", "committedDate": "2020-10-12T19:26:48Z", "message": "Resolves #1039: partition residual filters into index fiters and true residuals"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2OTcxNjYw", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#pullrequestreview-506971660", "createdAt": "2020-10-12T23:18:44Z", "commit": {"oid": "7df62c83cdc433a108a3c01ccbb6763b23dc688d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoxODo0NVrOHgQI3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoyNDoxOFrOHgQOrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MDg5Mg==", "bodyText": "SCAN gives us something that is capable of evaluating the predicate with no further database traffic. More data is fetched in the scan itself. Whether this matters depends on the selectivity: if most pass, then we end up doing a fetch of the record anyway, using a less-efficient (even in parallel) single point fetch.\nI kind of expected that all filters to a SCAN would be index filters and not residuals. With that change, the same tie would result, restoring the status quo, right?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#discussion_r503580892", "createdAt": "2020-10-12T23:18:45Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankIndexTest.java", "diffHunk": "@@ -1116,8 +1116,7 @@ public void headerRankAndIdQuery() throws Exception {\n                 .build();\n         planner.setIndexScanPreference(QueryPlanner.IndexScanPreference.PREFER_SCAN);\n         RecordQueryPlan plan = planner.plan(query);\n-        assertEquals(\"Scan(([buffaloes, 100],[buffaloes]]) | [HeaderRankedRecord]\" +\n-                        \" | score LESS_THAN $__rank_0 WHERE __rank_0 = score_by_nested_id.score_for_rank_else_skip(buffaloes, 2)\",\n+        assertEquals(\"Fetch(Covering(Index(score_by_nested_id ([buffaloes, null],[buffaloes, 2]) BY_RANK) -> [score: KEY[1], header: [group: KEY[0], id: KEY[2]]]) | header/{id GREATER_THAN 100})\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2MjgwOQ=="}, "originalCommit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MjM4Mw==", "bodyText": "A RecordQueryScanPlan could treat all filters as index filters and not residuals, I think.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#discussion_r503582383", "createdAt": "2020-10-12T23:24:18Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java", "diffHunk": "@@ -517,9 +566,38 @@ private ScoredPlan planIndex(@Nonnull PlanContext planContext, @Nonnull QueryCom\n                 }\n             }\n         }\n+\n         return p;\n     }\n \n+    private ScoredPlan computeIndexFilters(@Nonnull PlanContext planContext, @Nonnull final ScoredPlan plan) {\n+        if (plan.plan instanceof RecordQueryPlanWithIndex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df62c83cdc433a108a3c01ccbb6763b23dc688d"}, "originalPosition": 136}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7df62c83cdc433a108a3c01ccbb6763b23dc688d", "author": {"user": {"login": "normen662", "name": null}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/7df62c83cdc433a108a3c01ccbb6763b23dc688d", "committedDate": "2020-10-12T19:26:48Z", "message": "Resolves #1039: partition residual filters into index fiters and true residuals"}, "afterCommit": {"oid": "8289d20e9028339765a108db42798df7ac12ced1", "author": {"user": {"login": "normen662", "name": null}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/8289d20e9028339765a108db42798df7ac12ced1", "committedDate": "2020-10-13T15:56:44Z", "message": "Resolves #1039: partition residual filters into index fiters and true residuals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28b9b7848a852037a17e6348f27ef84f47fdb44c", "author": {"user": {"login": "normen662", "name": null}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/28b9b7848a852037a17e6348f27ef84f47fdb44c", "committedDate": "2020-10-14T19:23:38Z", "message": "Resolves #1039: partition residual filters into index fiters and true residuals"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8289d20e9028339765a108db42798df7ac12ced1", "author": {"user": {"login": "normen662", "name": null}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/8289d20e9028339765a108db42798df7ac12ced1", "committedDate": "2020-10-13T15:56:44Z", "message": "Resolves #1039: partition residual filters into index fiters and true residuals"}, "afterCommit": {"oid": "28b9b7848a852037a17e6348f27ef84f47fdb44c", "author": {"user": {"login": "normen662", "name": null}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/28b9b7848a852037a17e6348f27ef84f47fdb44c", "committedDate": "2020-10-14T19:23:38Z", "message": "Resolves #1039: partition residual filters into index fiters and true residuals"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODA0NTY3", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#pullrequestreview-508804567", "createdAt": "2020-10-14T22:08:23Z", "commit": {"oid": "28b9b7848a852037a17e6348f27ef84f47fdb44c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2741, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}