{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NTE3NDAw", "number": 1049, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODoxNzowNlrOExT9Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODoxNzowNlrOExT9Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTQyNjM1OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBPreloadRecordCache.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODoxNzowNlrOHnYj-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxMToyMjozOVrOHntrnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1ODkzOA==", "bodyText": "What is the purpose of having incomplete entries in the cache at all? They aren't returned to another load attempt or even shared by it?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1049#discussion_r511058938", "createdAt": "2020-10-23T18:17:06Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBPreloadRecordCache.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * FDBRecordCache.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.tuple.Tuple;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A cache used to track and handle the results of asynchronously preloaded records.\n+ */\n+@API(API.Status.INTERNAL)\n+class FDBPreloadRecordCache {\n+    @Nonnull\n+    private final Cache<Tuple, EntryImpl>  cache;\n+\n+    public FDBPreloadRecordCache(int maximumSize) {\n+        cache = CacheBuilder.newBuilder().maximumSize(maximumSize).build();\n+    }\n+\n+    /**\n+     * Called prior to performing a prefetch for a given {@code Tuple}, returning a future holder that must\n+     * be filled in with the record when it has completed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "177fd5b8efab0905c2616e47c9df3f4b0101458d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzNDAzNA==", "bodyText": "I should have commented on this.  The current strategy allows for a race condition I believe.\nThread 1                    Thread 2\n-----------------      ------------------\nbegin pre-fetch    \nread record\n                       replace record\n                       invalidate (non-existant) cache entry\nput record in cache\n\nwith the strategy I'm proposing, the holder for the record being pre-fetched is pre-allocated in the cache and completed when the read is finished.  An invalidate kicks the holder out of the cache, so that the results will never be seen.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1049#discussion_r511134034", "createdAt": "2020-10-23T20:13:11Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBPreloadRecordCache.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * FDBRecordCache.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.tuple.Tuple;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A cache used to track and handle the results of asynchronously preloaded records.\n+ */\n+@API(API.Status.INTERNAL)\n+class FDBPreloadRecordCache {\n+    @Nonnull\n+    private final Cache<Tuple, EntryImpl>  cache;\n+\n+    public FDBPreloadRecordCache(int maximumSize) {\n+        cache = CacheBuilder.newBuilder().maximumSize(maximumSize).build();\n+    }\n+\n+    /**\n+     * Called prior to performing a prefetch for a given {@code Tuple}, returning a future holder that must\n+     * be filled in with the record when it has completed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1ODkzOA=="}, "originalCommit": {"oid": "177fd5b8efab0905c2616e47c9df3f4b0101458d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzNDMzOQ==", "bodyText": "There may even be a path for the pre-fetch read to pick up a portion of the replaced record as well....", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1049#discussion_r511134339", "createdAt": "2020-10-23T20:13:57Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBPreloadRecordCache.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * FDBRecordCache.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.tuple.Tuple;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A cache used to track and handle the results of asynchronously preloaded records.\n+ */\n+@API(API.Status.INTERNAL)\n+class FDBPreloadRecordCache {\n+    @Nonnull\n+    private final Cache<Tuple, EntryImpl>  cache;\n+\n+    public FDBPreloadRecordCache(int maximumSize) {\n+        cache = CacheBuilder.newBuilder().maximumSize(maximumSize).build();\n+    }\n+\n+    /**\n+     * Called prior to performing a prefetch for a given {@code Tuple}, returning a future holder that must\n+     * be filled in with the record when it has completed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1ODkzOA=="}, "originalCommit": {"oid": "177fd5b8efab0905c2616e47c9df3f4b0101458d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MjI4OA==", "bodyText": "Okay. I guess there should be a short comment there for why it does that.\nSuch race conditions seem more fundamentally problematic. For instance,\nThread 1                    Thread 2\n-----------------      ------------------\nbegin pre-fetch    \nread record\n                       replace record\n                       invalidate (incomplete) cache entry\n(put record in orphan entry)\ntake action based on out-of-date record\n\nBut there's no reason not to try to avoid what can be relatively cheaply.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1049#discussion_r511152288", "createdAt": "2020-10-23T20:58:05Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBPreloadRecordCache.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * FDBRecordCache.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.tuple.Tuple;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A cache used to track and handle the results of asynchronously preloaded records.\n+ */\n+@API(API.Status.INTERNAL)\n+class FDBPreloadRecordCache {\n+    @Nonnull\n+    private final Cache<Tuple, EntryImpl>  cache;\n+\n+    public FDBPreloadRecordCache(int maximumSize) {\n+        cache = CacheBuilder.newBuilder().maximumSize(maximumSize).build();\n+    }\n+\n+    /**\n+     * Called prior to performing a prefetch for a given {@code Tuple}, returning a future holder that must\n+     * be filled in with the record when it has completed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1ODkzOA=="}, "originalCommit": {"oid": "177fd5b8efab0905c2616e47c9df3f4b0101458d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1NTMzNA==", "bodyText": "I think we are saying the same thing...unless I'm interpreting your example wrong.  Since the orphaned entry is ejected from the cache, its value (the record that thread #1 was reading), will never be visible to the outside world to act upon it.   But, yes, I'll add a comment to explain the reason for the design.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1049#discussion_r511155334", "createdAt": "2020-10-23T21:06:07Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBPreloadRecordCache.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * FDBRecordCache.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.tuple.Tuple;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A cache used to track and handle the results of asynchronously preloaded records.\n+ */\n+@API(API.Status.INTERNAL)\n+class FDBPreloadRecordCache {\n+    @Nonnull\n+    private final Cache<Tuple, EntryImpl>  cache;\n+\n+    public FDBPreloadRecordCache(int maximumSize) {\n+        cache = CacheBuilder.newBuilder().maximumSize(maximumSize).build();\n+    }\n+\n+    /**\n+     * Called prior to performing a prefetch for a given {@code Tuple}, returning a future holder that must\n+     * be filled in with the record when it has completed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1ODkzOA=="}, "originalCommit": {"oid": "177fd5b8efab0905c2616e47c9df3f4b0101458d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE2OTM0MQ==", "bodyText": "Yes, but thread 1 continues to make changes elsewhere dependent on stale information. I am not saying we need to try to fix this here. Or that we should give up on concurrency within the same context because of it. Just that it's hard to solve without synchronization outside of what we provide.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1049#discussion_r511169341", "createdAt": "2020-10-23T21:45:49Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBPreloadRecordCache.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * FDBRecordCache.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.tuple.Tuple;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A cache used to track and handle the results of asynchronously preloaded records.\n+ */\n+@API(API.Status.INTERNAL)\n+class FDBPreloadRecordCache {\n+    @Nonnull\n+    private final Cache<Tuple, EntryImpl>  cache;\n+\n+    public FDBPreloadRecordCache(int maximumSize) {\n+        cache = CacheBuilder.newBuilder().maximumSize(maximumSize).build();\n+    }\n+\n+    /**\n+     * Called prior to performing a prefetch for a given {@code Tuple}, returning a future holder that must\n+     * be filled in with the record when it has completed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1ODkzOA=="}, "originalCommit": {"oid": "177fd5b8efab0905c2616e47c9df3f4b0101458d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQwNDk1Ng==", "bodyText": "Got it.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1049#discussion_r511404956", "createdAt": "2020-10-24T11:22:39Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBPreloadRecordCache.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * FDBRecordCache.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.tuple.Tuple;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A cache used to track and handle the results of asynchronously preloaded records.\n+ */\n+@API(API.Status.INTERNAL)\n+class FDBPreloadRecordCache {\n+    @Nonnull\n+    private final Cache<Tuple, EntryImpl>  cache;\n+\n+    public FDBPreloadRecordCache(int maximumSize) {\n+        cache = CacheBuilder.newBuilder().maximumSize(maximumSize).build();\n+    }\n+\n+    /**\n+     * Called prior to performing a prefetch for a given {@code Tuple}, returning a future holder that must\n+     * be filled in with the record when it has completed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1ODkzOA=="}, "originalCommit": {"oid": "177fd5b8efab0905c2616e47c9df3f4b0101458d"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4760, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}