{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2OTQ2OTc3", "number": 849, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjoyMTo1MlrODnRg0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDoxNjowNVrODn9eog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTA3OTg0OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjoyMTo1MlrOF1LT0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjoyMTo1MlrOF1LT0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwNDE0Ng==", "bodyText": "This is alluding to that behavior change regarding the transaction ID that is mentioned in the PR's overview comment.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/849#discussion_r391304146", "createdAt": "2020-03-11T22:21:52Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabase.java", "diffHunk": "@@ -358,20 +358,19 @@ public FDBRecordContext openContext(@Nullable Map<String, String> mdcContext,\n                                         @Nullable FDBStoreTimer timer,\n                                         @Nullable WeakReadSemantics weakReadSemantics,\n                                         @Nonnull FDBTransactionPriority priority) {\n-        final String transactionId = mdcContext == null ? null : mdcContext.get(\"uuid\");\n-        return openContext(mdcContext, timer, weakReadSemantics, priority, transactionId);\n+        return openContext(mdcContext, timer, weakReadSemantics, priority, null);\n     }\n \n \n     /**\n      * Open a new record context with a new transaction begun on the underlying FDB database.\n      *\n      * <p>\n-     * Note that other variants of this method will inspect the MDC context for the transaction ID by looking\n-     * for an entry in the map with the key \"uuid\". This method will ignore whatever is in the MDC context\n-     * and use the ID provided as a parameter instead. The transaction ID should typically consist solely of\n-     * printable ASCII characters and should not exceed 100 bytes. The ID may be truncated or dropped if the ID will\n-     * not fit in 100 bytes. See {@link FDBRecordContext#getTransactionId()} for more details.\n+     * If the passed {@code transactionId} is {@code null}, then this method will set the transaction ID\n+     * of the given transaction to the value of the \"uuid\" key in the MDC context if present. The transaction ID\n+     * should typically consist solely of printable ASCII characters and should not exceed 100 bytes. The ID may\n+     * be truncated or dropped if the ID will not fit in 100 bytes. See {@link FDBRecordContext#getTransactionId()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6457a8c264955a887a2e7c7ca71cfa59dc9736ef"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTEwMDE3OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabaseRunner.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjozMTowMFrOF1LgqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDo1Njo1NlrOF2SlxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwNzQzMg==", "bodyText": "These are \"breaking changes\" for implementors of the interface, if we care about that use case. They are fine for those that are using the interface.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/849#discussion_r391307432", "createdAt": "2020-03-11T22:31:00Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabaseRunner.java", "diffHunk": "@@ -201,6 +201,32 @@\n      */\n     void setInitialDelayMillis(long initialDelayMillis);\n \n+    /**\n+     * Set the transaction timeout for all transactions started by this runner. If set to {@link FDBDatabaseFactory#DEFAULT_TR_TIMEOUT_MILLIS},\n+     * then this will use the value of set in the originating database's factory. If set to {@link FDBDatabaseFactory#UNLIMITED_TR_TIMEOUT_MILLIS},\n+     * then no timeout will be imposed on transactions used by this runner.\n+     *\n+     * <p>\n+     * Note that the error that the transaction hits, {@link FDBExceptions.FDBStoreTransactionTimeoutException},\n+     * is not retriable, so if the runner encounters such an error, it will terminate.\n+     * </p>\n+     *\n+     * @param transactionTimeoutMillis the transaction timeout time in milliseconds\n+     * @see FDBDatabaseFactory#setTransactionTimeoutMillis(long)\n+     */\n+    void setTransactionTimeoutMillis(long transactionTimeoutMillis);\n+\n+    /**\n+     * Get the transaction timeout for all transactions started by this runner. This will return the value configured\n+     * for this runner through {@link #setTransactionTimeoutMillis(long)}. Note, however, that if the transaction timeout\n+     * is set to {@link FDBDatabaseFactory#DEFAULT_TR_TIMEOUT_MILLIS}, then the actual timeout set for this transaction\n+     * will be set to the value in the originating factory.\n+     *\n+     * @return the configured transacation timeout time in milliseconds\n+     * @see #setTransactionTimeoutMillis(long)\n+     */\n+    long getTransactionTimeoutMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6457a8c264955a887a2e7c7ca71cfa59dc9736ef"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0ODIwNw==", "bodyText": "Maybe the release notes should call out this minor (unlikely) breaking change (I did something like this on 2.8.103.0:\n\nBreaking change ByteScanLimiter and RecordScanLimiter are now interfaces. Instances with various concrete behavior are constructed through factory classes. (PR #836)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/849#discussion_r392448207", "createdAt": "2020-03-13T20:20:15Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabaseRunner.java", "diffHunk": "@@ -201,6 +201,32 @@\n      */\n     void setInitialDelayMillis(long initialDelayMillis);\n \n+    /**\n+     * Set the transaction timeout for all transactions started by this runner. If set to {@link FDBDatabaseFactory#DEFAULT_TR_TIMEOUT_MILLIS},\n+     * then this will use the value of set in the originating database's factory. If set to {@link FDBDatabaseFactory#UNLIMITED_TR_TIMEOUT_MILLIS},\n+     * then no timeout will be imposed on transactions used by this runner.\n+     *\n+     * <p>\n+     * Note that the error that the transaction hits, {@link FDBExceptions.FDBStoreTransactionTimeoutException},\n+     * is not retriable, so if the runner encounters such an error, it will terminate.\n+     * </p>\n+     *\n+     * @param transactionTimeoutMillis the transaction timeout time in milliseconds\n+     * @see FDBDatabaseFactory#setTransactionTimeoutMillis(long)\n+     */\n+    void setTransactionTimeoutMillis(long transactionTimeoutMillis);\n+\n+    /**\n+     * Get the transaction timeout for all transactions started by this runner. This will return the value configured\n+     * for this runner through {@link #setTransactionTimeoutMillis(long)}. Note, however, that if the transaction timeout\n+     * is set to {@link FDBDatabaseFactory#DEFAULT_TR_TIMEOUT_MILLIS}, then the actual timeout set for this transaction\n+     * will be set to the value in the originating factory.\n+     *\n+     * @return the configured transacation timeout time in milliseconds\n+     * @see #setTransactionTimeoutMillis(long)\n+     */\n+    long getTransactionTimeoutMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwNzQzMg=="}, "originalCommit": {"oid": "6457a8c264955a887a2e7c7ca71cfa59dc9736ef"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ3MjAwNA==", "bodyText": "Okay, added release notes calling it out. For these two methods, I attached the issue (#848) as they seemed \"inherent\" to that Issue. I also call out the slight change in semantics regarding transaction IDs, but with this PR, as it seemed more \"incidental\".", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/849#discussion_r392472004", "createdAt": "2020-03-13T20:56:56Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabaseRunner.java", "diffHunk": "@@ -201,6 +201,32 @@\n      */\n     void setInitialDelayMillis(long initialDelayMillis);\n \n+    /**\n+     * Set the transaction timeout for all transactions started by this runner. If set to {@link FDBDatabaseFactory#DEFAULT_TR_TIMEOUT_MILLIS},\n+     * then this will use the value of set in the originating database's factory. If set to {@link FDBDatabaseFactory#UNLIMITED_TR_TIMEOUT_MILLIS},\n+     * then no timeout will be imposed on transactions used by this runner.\n+     *\n+     * <p>\n+     * Note that the error that the transaction hits, {@link FDBExceptions.FDBStoreTransactionTimeoutException},\n+     * is not retriable, so if the runner encounters such an error, it will terminate.\n+     * </p>\n+     *\n+     * @param transactionTimeoutMillis the transaction timeout time in milliseconds\n+     * @see FDBDatabaseFactory#setTransactionTimeoutMillis(long)\n+     */\n+    void setTransactionTimeoutMillis(long transactionTimeoutMillis);\n+\n+    /**\n+     * Get the transaction timeout for all transactions started by this runner. This will return the value configured\n+     * for this runner through {@link #setTransactionTimeoutMillis(long)}. Note, however, that if the transaction timeout\n+     * is set to {@link FDBDatabaseFactory#DEFAULT_TR_TIMEOUT_MILLIS}, then the actual timeout set for this transaction\n+     * will be set to the value in the originating factory.\n+     *\n+     * @return the configured transacation timeout time in milliseconds\n+     * @see #setTransactionTimeoutMillis(long)\n+     */\n+    long getTransactionTimeoutMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwNzQzMg=="}, "originalCommit": {"oid": "6457a8c264955a887a2e7c7ca71cfa59dc9736ef"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjI4MzIyOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordContextConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDoxNjowNVrOF2RBrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDo1Nzo0MFrOF2SnmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0NjM4Mw==", "bodyText": "(just a comment, nothing to do) I kind of have a preference for FDBRecordContext.Config, but given the size of this class I get why you did this.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/849#discussion_r392446383", "createdAt": "2020-03-13T20:16:05Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordContextConfig.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * FDBRecordContextConfig.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.Map;\n+\n+/**\n+ * A configuration struct that can be used to set various options on an {@link FDBRecordContext}. Instances\n+ * of this configuration object can be passed to {@link FDBDatabase#openContext(FDBRecordContextConfig)}\n+ * to create a new transaction with various parameters set according to the values specified here.\n+ */\n+public class FDBRecordContextConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9073ed7f9236e9db6ebffb73ee3b167705a32ba6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ3MjQ3Mw==", "bodyText": "Yeah, that was my logic, too. Plus, as this would have a builder, it seemed that that would mean we either needed a FDBRecordContext.Config.Builder or a FDBRecordContext.ConfigBuilder, neither of which I was particularly excited about.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/849#discussion_r392472473", "createdAt": "2020-03-13T20:57:40Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordContextConfig.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * FDBRecordContextConfig.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.Map;\n+\n+/**\n+ * A configuration struct that can be used to set various options on an {@link FDBRecordContext}. Instances\n+ * of this configuration object can be passed to {@link FDBDatabase#openContext(FDBRecordContextConfig)}\n+ * to create a new transaction with various parameters set according to the values specified here.\n+ */\n+public class FDBRecordContextConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0NjM4Mw=="}, "originalCommit": {"oid": "9073ed7f9236e9db6ebffb73ee3b167705a32ba6"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4834, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}