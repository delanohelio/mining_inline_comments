{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTQ3NjQ3", "number": 836, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjo0ODoxNVrODk2DaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1NToxM1rODlLpuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTYwOTM3OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ByteScanLimiter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjo0ODoxNlrOFxZddA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoxMzoxM1rOFxzxHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MTY4NA==", "bodyText": "Is there a reason (other than backwards compatibility) to have Untracked extend ByteScanLimiter, rather than making ByteScanLimiter an interface with two implementations? I guess it saves us a virtual dispatch?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387341684", "createdAt": "2020-03-03T22:48:16Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ByteScanLimiter.java", "diffHunk": "@@ -76,8 +91,54 @@ public long getLimit() {\n         return originalLimit;\n     }\n \n+    /**\n+     * Returns the number of bytes that have been scanned thus far.\n+     *\n+     * @return the number of bytes that have been scanned\n+     */\n+    public long getBytesScanned() {\n+        return originalLimit - bytesRemaining.get();\n+    }\n+\n     @Override\n     public String toString() {\n         return String.format(\"ByteScanLimiter(%d limit, %d left)\", originalLimit, bytesRemaining.get());\n     }\n+\n+    /**\n+     * A non-tracking, non-enforcing limiter.\n+     */\n+    protected static class Untracked extends ByteScanLimiter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "521abd354d421ea2a9dc9e39209494a6c75e19bf"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1MTI3Ng==", "bodyText": "There was.  it was mainly that the RecordScanLimiter was a public class that was marked as MAINTAINED so changing it to an interface is kind of a breaking change.  However, I have still gone ahead and done this change such that there are three distinct versions of the limiters (enforcing, tracking, and untracked) and that they are now produced from a factory.   I think this is safe because, despite having been marked as public and MAINTAINED, there was really no practical use for the RecordScanLimiter (that I could find) outside of the internals of record layer.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387751276", "createdAt": "2020-03-04T15:42:12Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ByteScanLimiter.java", "diffHunk": "@@ -76,8 +91,54 @@ public long getLimit() {\n         return originalLimit;\n     }\n \n+    /**\n+     * Returns the number of bytes that have been scanned thus far.\n+     *\n+     * @return the number of bytes that have been scanned\n+     */\n+    public long getBytesScanned() {\n+        return originalLimit - bytesRemaining.get();\n+    }\n+\n     @Override\n     public String toString() {\n         return String.format(\"ByteScanLimiter(%d limit, %d left)\", originalLimit, bytesRemaining.get());\n     }\n+\n+    /**\n+     * A non-tracking, non-enforcing limiter.\n+     */\n+    protected static class Untracked extends ByteScanLimiter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MTY4NA=="}, "originalCommit": {"oid": "521abd354d421ea2a9dc9e39209494a6c75e19bf"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3MjcwMA==", "bodyText": "Because I was curious, I did some digging: https://stackoverflow.com/questions/23948009/whats-the-size-cost-of-java-inheritance.  If the interweebs are to be believed, then there is little to no cost overhead for method dispatch through an inheritance tree.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387772700", "createdAt": "2020-03-04T16:13:13Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ByteScanLimiter.java", "diffHunk": "@@ -76,8 +91,54 @@ public long getLimit() {\n         return originalLimit;\n     }\n \n+    /**\n+     * Returns the number of bytes that have been scanned thus far.\n+     *\n+     * @return the number of bytes that have been scanned\n+     */\n+    public long getBytesScanned() {\n+        return originalLimit - bytesRemaining.get();\n+    }\n+\n     @Override\n     public String toString() {\n         return String.format(\"ByteScanLimiter(%d limit, %d left)\", originalLimit, bytesRemaining.get());\n     }\n+\n+    /**\n+     * A non-tracking, non-enforcing limiter.\n+     */\n+    protected static class Untracked extends ByteScanLimiter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MTY4NA=="}, "originalCommit": {"oid": "521abd354d421ea2a9dc9e39209494a6c75e19bf"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTYxMTg4OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ExecuteState.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjo0OToxM1rOFxZe-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTozMjoyMFrOFx6vxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjA3Mg==", "bodyText": "We should deprecate this method and create a new one with Nonnull arguments.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387342072", "createdAt": "2020-03-03T22:49:13Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ExecuteState.java", "diffHunk": "@@ -35,27 +35,35 @@\n  */\n @API(API.Status.MAINTAINED)\n public class ExecuteState {\n+\n     /**\n-     * An empty execute state with no record scan limit.\n-     * @deprecated in favor of NO_LIMITS when the byte scan limit was added\n+     * An execute state with no scan limits.\n      */\n-    @API(API.Status.DEPRECATED)\n-    @Deprecated\n-    public static final ExecuteState NO_SCANNED_RECORDS_LIMIT = new ExecuteState();\n+    public static final ExecuteState NO_LIMITS = new ExecuteState(RecordScanLimiter.Untracked.INSTANCE, ByteScanLimiter.Untracked.INSTANCE);\n \n     /**\n-     * An empty execute state with no record scan limit.\n+     * An empty execute state with no scan limits.\n+     * @deprecated in favor of NO_LIMITS when the byte scan limit was added\n      */\n-    public static final ExecuteState NO_LIMITS = new ExecuteState();\n+    @API(API.Status.DEPRECATED)\n+    @Deprecated\n+    public static final ExecuteState NO_SCANNED_RECORDS_LIMIT = NO_LIMITS;\n \n-    @Nullable\n+    @Nonnull\n     private final RecordScanLimiter recordScanLimiter;\n-    @Nullable\n+    @Nonnull\n     private final ByteScanLimiter byteScanLimiter;\n \n+    /**\n+     * Creates an execute state with a supplied set of resource limiters.\n+     * @param recordScanLimiter a record scan limiter or {@code null} to indicate an unlimited\n+     *     number of records may be scanned\n+     * @param byteScanLimiter a byte scan limiter or {@code null} to indicate an unlimited\n+     *     number of bytes may be scanned\n+     */\n     public ExecuteState(@Nullable RecordScanLimiter recordScanLimiter, @Nullable ByteScanLimiter byteScanLimiter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "521abd354d421ea2a9dc9e39209494a6c75e19bf"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1MzY4MQ==", "bodyText": "I can't really find an elegant want of doing this as the non-deprecated version would have the same signature :(", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387753681", "createdAt": "2020-03-04T15:45:37Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ExecuteState.java", "diffHunk": "@@ -35,27 +35,35 @@\n  */\n @API(API.Status.MAINTAINED)\n public class ExecuteState {\n+\n     /**\n-     * An empty execute state with no record scan limit.\n-     * @deprecated in favor of NO_LIMITS when the byte scan limit was added\n+     * An execute state with no scan limits.\n      */\n-    @API(API.Status.DEPRECATED)\n-    @Deprecated\n-    public static final ExecuteState NO_SCANNED_RECORDS_LIMIT = new ExecuteState();\n+    public static final ExecuteState NO_LIMITS = new ExecuteState(RecordScanLimiter.Untracked.INSTANCE, ByteScanLimiter.Untracked.INSTANCE);\n \n     /**\n-     * An empty execute state with no record scan limit.\n+     * An empty execute state with no scan limits.\n+     * @deprecated in favor of NO_LIMITS when the byte scan limit was added\n      */\n-    public static final ExecuteState NO_LIMITS = new ExecuteState();\n+    @API(API.Status.DEPRECATED)\n+    @Deprecated\n+    public static final ExecuteState NO_SCANNED_RECORDS_LIMIT = NO_LIMITS;\n \n-    @Nullable\n+    @Nonnull\n     private final RecordScanLimiter recordScanLimiter;\n-    @Nullable\n+    @Nonnull\n     private final ByteScanLimiter byteScanLimiter;\n \n+    /**\n+     * Creates an execute state with a supplied set of resource limiters.\n+     * @param recordScanLimiter a record scan limiter or {@code null} to indicate an unlimited\n+     *     number of records may be scanned\n+     * @param byteScanLimiter a byte scan limiter or {@code null} to indicate an unlimited\n+     *     number of bytes may be scanned\n+     */\n     public ExecuteState(@Nullable RecordScanLimiter recordScanLimiter, @Nullable ByteScanLimiter byteScanLimiter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjA3Mg=="}, "originalCommit": {"oid": "521abd354d421ea2a9dc9e39209494a6c75e19bf"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NzA0Ng==", "bodyText": "Oh no! Perhaps we should just change the API then? Or at least create an issue to do so in Record Layer 3?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387887046", "createdAt": "2020-03-04T19:32:20Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ExecuteState.java", "diffHunk": "@@ -35,27 +35,35 @@\n  */\n @API(API.Status.MAINTAINED)\n public class ExecuteState {\n+\n     /**\n-     * An empty execute state with no record scan limit.\n-     * @deprecated in favor of NO_LIMITS when the byte scan limit was added\n+     * An execute state with no scan limits.\n      */\n-    @API(API.Status.DEPRECATED)\n-    @Deprecated\n-    public static final ExecuteState NO_SCANNED_RECORDS_LIMIT = new ExecuteState();\n+    public static final ExecuteState NO_LIMITS = new ExecuteState(RecordScanLimiter.Untracked.INSTANCE, ByteScanLimiter.Untracked.INSTANCE);\n \n     /**\n-     * An empty execute state with no record scan limit.\n+     * An empty execute state with no scan limits.\n+     * @deprecated in favor of NO_LIMITS when the byte scan limit was added\n      */\n-    public static final ExecuteState NO_LIMITS = new ExecuteState();\n+    @API(API.Status.DEPRECATED)\n+    @Deprecated\n+    public static final ExecuteState NO_SCANNED_RECORDS_LIMIT = NO_LIMITS;\n \n-    @Nullable\n+    @Nonnull\n     private final RecordScanLimiter recordScanLimiter;\n-    @Nullable\n+    @Nonnull\n     private final ByteScanLimiter byteScanLimiter;\n \n+    /**\n+     * Creates an execute state with a supplied set of resource limiters.\n+     * @param recordScanLimiter a record scan limiter or {@code null} to indicate an unlimited\n+     *     number of records may be scanned\n+     * @param byteScanLimiter a byte scan limiter or {@code null} to indicate an unlimited\n+     *     number of bytes may be scanned\n+     */\n     public ExecuteState(@Nullable RecordScanLimiter recordScanLimiter, @Nullable ByteScanLimiter byteScanLimiter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjA3Mg=="}, "originalCommit": {"oid": "521abd354d421ea2a9dc9e39209494a6c75e19bf"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTYxMzI4OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/RecordScanLimiter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjo0OTo0OFrOFxZf0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTo0NTo1MFrOFxyndw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjI5MQ==", "bodyText": "Same comments apply here.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387342291", "createdAt": "2020-03-03T22:49:48Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/RecordScanLimiter.java", "diffHunk": "@@ -67,9 +85,45 @@ public int getLimit() {\n         return originalLimit;\n     }\n \n+    /**\n+     * Returns the number of records that have been scanned thus far.\n+     *\n+     * @return the number of records that have been scanned\n+     */\n+    public int getRecordsScanned() {\n+        return originalLimit - allowedRecordScansRemaining.get();\n+    }\n+\n     @Override\n     public String toString() {\n         return String.format(\"RecordScanLimiter(%d limit, %d left)\", originalLimit, allowedRecordScansRemaining.get());\n     }\n+\n+    /**\n+     * A non-tracking, non-enforcing limiter.\n+     */\n+    protected static class Untracked extends RecordScanLimiter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "521abd354d421ea2a9dc9e39209494a6c75e19bf"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1Mzg0Nw==", "bodyText": "Yep.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387753847", "createdAt": "2020-03-04T15:45:50Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/RecordScanLimiter.java", "diffHunk": "@@ -67,9 +85,45 @@ public int getLimit() {\n         return originalLimit;\n     }\n \n+    /**\n+     * Returns the number of records that have been scanned thus far.\n+     *\n+     * @return the number of records that have been scanned\n+     */\n+    public int getRecordsScanned() {\n+        return originalLimit - allowedRecordScansRemaining.get();\n+    }\n+\n     @Override\n     public String toString() {\n         return String.format(\"RecordScanLimiter(%d limit, %d left)\", originalLimit, allowedRecordScansRemaining.get());\n     }\n+\n+    /**\n+     * A non-tracking, non-enforcing limiter.\n+     */\n+    protected static class Untracked extends RecordScanLimiter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjI5MQ=="}, "originalCommit": {"oid": "521abd354d421ea2a9dc9e39209494a6c75e19bf"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTYxNTQwOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/ExecutePropertiesTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjo1MDozMlrOFxZhFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTo0NjozNVrOFxypeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjYxMw==", "bodyText": "Perhaps these tests can make assertions about the # of bytes/records scanned to test the Unlimited limiters?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387342613", "createdAt": "2020-03-03T22:50:32Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/ExecutePropertiesTest.java", "diffHunk": "@@ -82,9 +81,9 @@ public void testSetLimitsFrom() {\n     public void testGetNoLimits() {\n         assertEquals(ExecuteProperties.UNLIMITED_TIME, ExecuteProperties.SERIAL_EXECUTE.getTimeLimit());\n         assertEquals(Integer.MAX_VALUE, ExecuteProperties.SERIAL_EXECUTE.getScannedRecordsLimit());\n-        assertNull(ExecuteProperties.SERIAL_EXECUTE.getState().getRecordScanLimiter());\n+        assertTrue(ExecuteProperties.SERIAL_EXECUTE.getState().getRecordScanLimiter().isUnlimited());\n         assertEquals(Long.MAX_VALUE, ExecuteProperties.SERIAL_EXECUTE.getScannedBytesLimit());\n-        assertNull(ExecuteProperties.SERIAL_EXECUTE.getState().getByteScanLimiter());\n+        assertTrue(ExecuteProperties.SERIAL_EXECUTE.getState().getByteScanLimiter().isUnlimited());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "521abd354d421ea2a9dc9e39209494a6c75e19bf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NDM2MA==", "bodyText": "Excellent point. Added (and found a bug). Thanks!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387754360", "createdAt": "2020-03-04T15:46:35Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/ExecutePropertiesTest.java", "diffHunk": "@@ -82,9 +81,9 @@ public void testSetLimitsFrom() {\n     public void testGetNoLimits() {\n         assertEquals(ExecuteProperties.UNLIMITED_TIME, ExecuteProperties.SERIAL_EXECUTE.getTimeLimit());\n         assertEquals(Integer.MAX_VALUE, ExecuteProperties.SERIAL_EXECUTE.getScannedRecordsLimit());\n-        assertNull(ExecuteProperties.SERIAL_EXECUTE.getState().getRecordScanLimiter());\n+        assertTrue(ExecuteProperties.SERIAL_EXECUTE.getState().getRecordScanLimiter().isUnlimited());\n         assertEquals(Long.MAX_VALUE, ExecuteProperties.SERIAL_EXECUTE.getScannedBytesLimit());\n-        assertNull(ExecuteProperties.SERIAL_EXECUTE.getState().getByteScanLimiter());\n+        assertTrue(ExecuteProperties.SERIAL_EXECUTE.getState().getByteScanLimiter().isUnlimited());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjYxMw=="}, "originalCommit": {"oid": "521abd354d421ea2a9dc9e39209494a6c75e19bf"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzE0ODExOnYy", "diffSide": "RIGHT", "path": "docs/ReleaseNotes.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1NToxM1rOFx7g2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTowNzoyM1rOFx9p9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5OTYxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * **Breaking change** Change 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n          \n          \n            \n            * **Breaking change** `ByteScanLimiter` and `RecordScanLimiter` are now interfaces. Instances with various concrete behavior are constructed through factory classes. [(PR #836)](https://github.com/FoundationDB/fdb-record-layer/pull/836)\n          \n      \n    \n    \n  \n\nI think we should also call out the API changes for defining limiters (especially since one of them was accidentally MAINTAINED).", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387899610", "createdAt": "2020-03-04T19:55:13Z", "author": {"login": "nschiefer"}, "path": "docs/ReleaseNotes.md", "diffHunk": "@@ -52,7 +52,7 @@ The `FDBDatabase::getReadVersion()` method has been replaced with the `FDBRecord\n * **Performance** Improvement 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Feature** Feature 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Feature** Feature 2 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n-* **Feature** Feature 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n+* **Feature** Expose bytes/records scanned through `ExecuteState` [(Issue #835)](https://github.com/FoundationDB/fdb-record-layer/issues/835)\n * **Feature** Feature 4 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Feature** Feature 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Breaking change** Change 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c754f05a4493e01f311621509c35c1de54f035e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNDcwOQ==", "bodyText": "Good suggestion. Accepted.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387934709", "createdAt": "2020-03-04T21:07:23Z", "author": {"login": "scgray"}, "path": "docs/ReleaseNotes.md", "diffHunk": "@@ -52,7 +52,7 @@ The `FDBDatabase::getReadVersion()` method has been replaced with the `FDBRecord\n * **Performance** Improvement 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Feature** Feature 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Feature** Feature 2 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n-* **Feature** Feature 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n+* **Feature** Expose bytes/records scanned through `ExecuteState` [(Issue #835)](https://github.com/FoundationDB/fdb-record-layer/issues/835)\n * **Feature** Feature 4 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Feature** Feature 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Breaking change** Change 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5OTYxMA=="}, "originalCommit": {"oid": "9c754f05a4493e01f311621509c35c1de54f035e"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 83, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}