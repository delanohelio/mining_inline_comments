{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NDkwOTQ0", "number": 1069, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjo0MToyNFrOE35r9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMzoyODoyM1rOE36bzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDUyMjc2OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/bitmap/ComposedBitmapIndexAggregate.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjo0MToyNFrOHxg7YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjoxOTo1NVrOHyQ0kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4MTc2MA==", "bodyText": "I believe that an earlier review of this class suggested that this was a more appropriate signature. It didn't matter then, but it does now.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1069#discussion_r521681760", "createdAt": "2020-11-11T22:41:24Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/bitmap/ComposedBitmapIndexAggregate.java", "diffHunk": "@@ -82,9 +83,9 @@\n      * @return an {@code Optional} query plan or {@code Optional.empty} if planning is not possible\n      */\n     @Nonnull\n-    public static Optional<ComposedBitmapIndexQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,\n-                                                                 @Nonnull RecordQuery query,\n-                                                                 @Nonnull IndexAggregateFunction indexAggregateFunction) {\n+    public static Optional<RecordQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31edd502b56e18c8eda189ff111dd2a26cb91e5b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwMTE2MA==", "bodyText": "I guess this class doesn't have an API stability annotation. It kind of feels like it should have been marked experimental, but alas. Not sure how much of a stickler we want to be here. My inclination here is to just let the signature be changed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1069#discussion_r521701160", "createdAt": "2020-11-11T23:29:49Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/bitmap/ComposedBitmapIndexAggregate.java", "diffHunk": "@@ -82,9 +83,9 @@\n      * @return an {@code Optional} query plan or {@code Optional.empty} if planning is not possible\n      */\n     @Nonnull\n-    public static Optional<ComposedBitmapIndexQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,\n-                                                                 @Nonnull RecordQuery query,\n-                                                                 @Nonnull IndexAggregateFunction indexAggregateFunction) {\n+    public static Optional<RecordQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4MTc2MA=="}, "originalCommit": {"oid": "31edd502b56e18c8eda189ff111dd2a26cb91e5b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4NjEwNg==", "bodyText": "Somehow half the classes in this package are annotated and the other half is not. I made them all experimental, which I believe was the intention.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1069#discussion_r521786106", "createdAt": "2020-11-12T02:56:50Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/bitmap/ComposedBitmapIndexAggregate.java", "diffHunk": "@@ -82,9 +83,9 @@\n      * @return an {@code Optional} query plan or {@code Optional.empty} if planning is not possible\n      */\n     @Nonnull\n-    public static Optional<ComposedBitmapIndexQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,\n-                                                                 @Nonnull RecordQuery query,\n-                                                                 @Nonnull IndexAggregateFunction indexAggregateFunction) {\n+    public static Optional<RecordQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4MTc2MA=="}, "originalCommit": {"oid": "31edd502b56e18c8eda189ff111dd2a26cb91e5b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ2NjQ0OQ==", "bodyText": "Yeah, that sounds right", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1069#discussion_r522466449", "createdAt": "2020-11-12T22:19:55Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/bitmap/ComposedBitmapIndexAggregate.java", "diffHunk": "@@ -82,9 +83,9 @@\n      * @return an {@code Optional} query plan or {@code Optional.empty} if planning is not possible\n      */\n     @Nonnull\n-    public static Optional<ComposedBitmapIndexQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,\n-                                                                 @Nonnull RecordQuery query,\n-                                                                 @Nonnull IndexAggregateFunction indexAggregateFunction) {\n+    public static Optional<RecordQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4MTc2MA=="}, "originalCommit": {"oid": "31edd502b56e18c8eda189ff111dd2a26cb91e5b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDY0NTI0OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/bitmap/ComposedBitmapIndexAggregate.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMzoyODoyM1rOHxiFPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjoyMTozN1rOHyQ6cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwMDY3MQ==", "bodyText": "Is this correct if there's a NOT in the composer tree against a single index scan?\nAlso, separately, without this change, would it have returned a ComposedBitmapIndexQueryPlan with a single IndexNode in the tree (which I think is correct, but perhaps inefficient), or would it have returned something less good?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1069#discussion_r521700671", "createdAt": "2020-11-11T23:28:23Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/bitmap/ComposedBitmapIndexAggregate.java", "diffHunk": "@@ -99,12 +100,18 @@\n      * @return an {@code Optional} query plan or {@code Optional.empty} if planning is not possible\n      */\n     @Nonnull\n-    public Optional<ComposedBitmapIndexQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,\n-                                                          @Nonnull RecordQuery.Builder queryBuilder) {\n+    public Optional<RecordQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,\n+                                             @Nonnull RecordQuery.Builder queryBuilder) {\n         final List<RecordQueryCoveringIndexPlan> indexScans = new ArrayList<>();\n         final Map<IndexNode, ComposedBitmapIndexQueryPlan.IndexComposer> indexComposers = new IdentityHashMap<>();\n-        return Optional.ofNullable(plan(root, queryBuilder, planner, indexScans, indexComposers))\n-                .map(composer -> new ComposedBitmapIndexQueryPlan(indexScans, composer));\n+        final ComposedBitmapIndexQueryPlan.ComposerBase composer = plan(root, queryBuilder, planner, indexScans, indexComposers);\n+        if (composer == null || indexScans.isEmpty()) {\n+            return Optional.empty();\n+        }\n+        if (indexScans.size() == 1) {\n+            return Optional.ofNullable(indexScans.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31edd502b56e18c8eda189ff111dd2a26cb91e5b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4MDM4NA==", "bodyText": "It would have given an error, insisting that there be more than one child.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1069#discussion_r521780384", "createdAt": "2020-11-12T02:36:34Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/bitmap/ComposedBitmapIndexAggregate.java", "diffHunk": "@@ -99,12 +100,18 @@\n      * @return an {@code Optional} query plan or {@code Optional.empty} if planning is not possible\n      */\n     @Nonnull\n-    public Optional<ComposedBitmapIndexQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,\n-                                                          @Nonnull RecordQuery.Builder queryBuilder) {\n+    public Optional<RecordQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,\n+                                             @Nonnull RecordQuery.Builder queryBuilder) {\n         final List<RecordQueryCoveringIndexPlan> indexScans = new ArrayList<>();\n         final Map<IndexNode, ComposedBitmapIndexQueryPlan.IndexComposer> indexComposers = new IdentityHashMap<>();\n-        return Optional.ofNullable(plan(root, queryBuilder, planner, indexScans, indexComposers))\n-                .map(composer -> new ComposedBitmapIndexQueryPlan(indexScans, composer));\n+        final ComposedBitmapIndexQueryPlan.ComposerBase composer = plan(root, queryBuilder, planner, indexScans, indexComposers);\n+        if (composer == null || indexScans.isEmpty()) {\n+            return Optional.empty();\n+        }\n+        if (indexScans.size() == 1) {\n+            return Optional.ofNullable(indexScans.get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwMDY3MQ=="}, "originalCommit": {"oid": "31edd502b56e18c8eda189ff111dd2a26cb91e5b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4NjQwOA==", "bodyText": "I added a check to make sure the composer is trivial (pass through the index). It might be possible to get NOT to work in this case, but it doesn't look like it would today, even if the composer were given a chance.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1069#discussion_r521786408", "createdAt": "2020-11-12T02:58:06Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/bitmap/ComposedBitmapIndexAggregate.java", "diffHunk": "@@ -99,12 +100,18 @@\n      * @return an {@code Optional} query plan or {@code Optional.empty} if planning is not possible\n      */\n     @Nonnull\n-    public Optional<ComposedBitmapIndexQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,\n-                                                          @Nonnull RecordQuery.Builder queryBuilder) {\n+    public Optional<RecordQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,\n+                                             @Nonnull RecordQuery.Builder queryBuilder) {\n         final List<RecordQueryCoveringIndexPlan> indexScans = new ArrayList<>();\n         final Map<IndexNode, ComposedBitmapIndexQueryPlan.IndexComposer> indexComposers = new IdentityHashMap<>();\n-        return Optional.ofNullable(plan(root, queryBuilder, planner, indexScans, indexComposers))\n-                .map(composer -> new ComposedBitmapIndexQueryPlan(indexScans, composer));\n+        final ComposedBitmapIndexQueryPlan.ComposerBase composer = plan(root, queryBuilder, planner, indexScans, indexComposers);\n+        if (composer == null || indexScans.isEmpty()) {\n+            return Optional.empty();\n+        }\n+        if (indexScans.size() == 1) {\n+            return Optional.ofNullable(indexScans.get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwMDY3MQ=="}, "originalCommit": {"oid": "31edd502b56e18c8eda189ff111dd2a26cb91e5b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ2Nzk1Mw==", "bodyText": "Okay, sounds good. I suppose it would be nice if NOT planned correctly, but having it fail to plan is fine (but having it return the wrong plan would have seemed dangerous).", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1069#discussion_r522467953", "createdAt": "2020-11-12T22:21:37Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/bitmap/ComposedBitmapIndexAggregate.java", "diffHunk": "@@ -99,12 +100,18 @@\n      * @return an {@code Optional} query plan or {@code Optional.empty} if planning is not possible\n      */\n     @Nonnull\n-    public Optional<ComposedBitmapIndexQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,\n-                                                          @Nonnull RecordQuery.Builder queryBuilder) {\n+    public Optional<RecordQueryPlan> tryPlan(@Nonnull RecordQueryPlanner planner,\n+                                             @Nonnull RecordQuery.Builder queryBuilder) {\n         final List<RecordQueryCoveringIndexPlan> indexScans = new ArrayList<>();\n         final Map<IndexNode, ComposedBitmapIndexQueryPlan.IndexComposer> indexComposers = new IdentityHashMap<>();\n-        return Optional.ofNullable(plan(root, queryBuilder, planner, indexScans, indexComposers))\n-                .map(composer -> new ComposedBitmapIndexQueryPlan(indexScans, composer));\n+        final ComposedBitmapIndexQueryPlan.ComposerBase composer = plan(root, queryBuilder, planner, indexScans, indexComposers);\n+        if (composer == null || indexScans.isEmpty()) {\n+            return Optional.empty();\n+        }\n+        if (indexScans.size() == 1) {\n+            return Optional.ofNullable(indexScans.get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwMDY3MQ=="}, "originalCommit": {"oid": "31edd502b56e18c8eda189ff111dd2a26cb91e5b"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4785, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}