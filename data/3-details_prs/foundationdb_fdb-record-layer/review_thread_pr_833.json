{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDQ2MTI3", "number": 833, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjo0MToxNVrODiCKew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjo1NzowMlrODiCWNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDEzNjI3OnYy", "diffSide": "RIGHT", "path": "docs/ReleaseNotes.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjo0MToxNVrOFtGurQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNToxMDowNlrOFtJlVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MDQ5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * **Performance** Improvement Allow setting hash function used by `RankedSet` [(Issue #828)](https://github.com/FoundationDB/fdb-record-layer/issues/828)\n          \n          \n            \n            * **Performance** Allow setting hash function used by `RankedSet` [(Issue #828)](https://github.com/FoundationDB/fdb-record-layer/issues/828)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/833#discussion_r382840493", "createdAt": "2020-02-21T22:41:15Z", "author": {"login": "alecgrieser"}, "path": "docs/ReleaseNotes.md", "diffHunk": "@@ -45,7 +45,7 @@ The `FDBDatabase::getReadVersion()` method has been replaced with the `FDBRecord\n * **Bug fix** Fix 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Bug fix** Fix 4 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Bug fix** Fix 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n-* **Performance** Improvement 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n+* **Performance** Improvement Allow setting hash function used by `RankedSet` [(Issue #828)](https://github.com/FoundationDB/fdb-record-layer/issues/828)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8ddb960b33736a51df2c8647f39e58e76f1aa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MTE0OQ==", "bodyText": "I think the force push erased this change from the PR", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/833#discussion_r382871149", "createdAt": "2020-02-22T01:14:02Z", "author": {"login": "alecgrieser"}, "path": "docs/ReleaseNotes.md", "diffHunk": "@@ -45,7 +45,7 @@ The `FDBDatabase::getReadVersion()` method has been replaced with the `FDBRecord\n * **Bug fix** Fix 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Bug fix** Fix 4 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Bug fix** Fix 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n-* **Performance** Improvement 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n+* **Performance** Improvement Allow setting hash function used by `RankedSet` [(Issue #828)](https://github.com/FoundationDB/fdb-record-layer/issues/828)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MDQ5Mw=="}, "originalCommit": {"oid": "33d8ddb960b33736a51df2c8647f39e58e76f1aa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4NzI1Mw==", "bodyText": "Fixed", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/833#discussion_r382887253", "createdAt": "2020-02-22T05:10:06Z", "author": {"login": "MMcM"}, "path": "docs/ReleaseNotes.md", "diffHunk": "@@ -45,7 +45,7 @@ The `FDBDatabase::getReadVersion()` method has been replaced with the `FDBRecord\n * **Bug fix** Fix 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Bug fix** Fix 4 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Bug fix** Fix 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n-* **Performance** Improvement 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n+* **Performance** Improvement Allow setting hash function used by `RankedSet` [(Issue #828)](https://github.com/FoundationDB/fdb-record-layer/issues/828)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MDQ5Mw=="}, "originalCommit": {"oid": "33d8ddb960b33736a51df2c8647f39e58e76f1aa"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDE0MjIzOnYy", "diffSide": "LEFT", "path": "fdb-extensions/src/main/java/com/apple/foundationdb/async/RankedSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjo0NDowNVrOFtGyPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNToxMDoyM1rOFtJlYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MTQwNw==", "bodyText": "While the other lines in this comment are aren't needed any more, I think this first line is still valuable.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/833#discussion_r382841407", "createdAt": "2020-02-21T22:44:05Z", "author": {"login": "alecgrieser"}, "path": "fdb-extensions/src/main/java/com/apple/foundationdb/async/RankedSet.java", "diffHunk": "@@ -143,10 +190,7 @@ public RankedSet(Subspace subspace, Executor executor) {\n      */\n     public CompletableFuture<Boolean> add(TransactionContext tc, byte[] key) {\n         checkKey(key);\n-        // Use the hash of the key, instead a p value and randomLevel. The key is likely Tuple-encoded.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8ddb960b33736a51df2c8647f39e58e76f1aa"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4NzI2NQ==", "bodyText": "Hmm, okay. Restored.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/833#discussion_r382887265", "createdAt": "2020-02-22T05:10:23Z", "author": {"login": "MMcM"}, "path": "fdb-extensions/src/main/java/com/apple/foundationdb/async/RankedSet.java", "diffHunk": "@@ -143,10 +190,7 @@ public RankedSet(Subspace subspace, Executor executor) {\n      */\n     public CompletableFuture<Boolean> add(TransactionContext tc, byte[] key) {\n         checkKey(key);\n-        // Use the hash of the key, instead a p value and randomLevel. The key is likely Tuple-encoded.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MTQwNw=="}, "originalCommit": {"oid": "33d8ddb960b33736a51df2c8647f39e58e76f1aa"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDE0NzIzOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankIndexMaintainerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjo0NjozM1rOFtG1MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMzozODo1MVrOFtHnjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MjE2MA==", "bodyText": "Interesting. I suppose we could loosen this to allow for the rank hash function to change (given that it should be compatible). I'm not opposed to being stricter for now, though perhaps that should be an option at some point.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/833#discussion_r382842160", "createdAt": "2020-02-21T22:46:33Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankIndexMaintainerFactory.java", "diffHunk": "@@ -64,15 +65,25 @@ public void validate(@Nonnull MetaDataValidator metaDataValidator) {\n \n             @Override\n             public void validateChangedOptions(@Nonnull Index oldIndex, @Nonnull Set<String> changedOptions) {\n+                // Allow changing from unspecified to the default (or vice versa), but not otherwise.\n                 if (changedOptions.contains(IndexOptions.RANK_NLEVELS)) {\n-                    int oldLevels = RankIndexMaintainer.getNLevels(oldIndex);\n-                    int newLevels = RankIndexMaintainer.getNLevels(index);\n+                    int oldLevels = RankedSetIndexHelper.getNLevels(oldIndex);\n+                    int newLevels = RankedSetIndexHelper.getNLevels(index);\n                     if (oldLevels != newLevels) {\n                         throw new MetaDataException(\"rank levels changed\",\n                                 LogMessageKeys.INDEX_NAME, index.getName());\n                     }\n                     changedOptions.remove(IndexOptions.RANK_NLEVELS);\n                 }\n+                if (changedOptions.contains(IndexOptions.RANK_HASH_FUNCTION)) {\n+                    RankedSet.HashFunction oldFunction = RankedSetIndexHelper.getHashFunction(oldIndex);\n+                    RankedSet.HashFunction newFunction = RankedSetIndexHelper.getHashFunction(index);\n+                    if (!oldFunction.equals(newFunction)) {\n+                        throw new MetaDataException(\"rank hash function changed\",\n+                                LogMessageKeys.INDEX_NAME, index.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8ddb960b33736a51df2c8647f39e58e76f1aa"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1NTA1Mg==", "bodyText": "Yes. I thought being conservative during the transition was best.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/833#discussion_r382855052", "createdAt": "2020-02-21T23:38:51Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankIndexMaintainerFactory.java", "diffHunk": "@@ -64,15 +65,25 @@ public void validate(@Nonnull MetaDataValidator metaDataValidator) {\n \n             @Override\n             public void validateChangedOptions(@Nonnull Index oldIndex, @Nonnull Set<String> changedOptions) {\n+                // Allow changing from unspecified to the default (or vice versa), but not otherwise.\n                 if (changedOptions.contains(IndexOptions.RANK_NLEVELS)) {\n-                    int oldLevels = RankIndexMaintainer.getNLevels(oldIndex);\n-                    int newLevels = RankIndexMaintainer.getNLevels(index);\n+                    int oldLevels = RankedSetIndexHelper.getNLevels(oldIndex);\n+                    int newLevels = RankedSetIndexHelper.getNLevels(index);\n                     if (oldLevels != newLevels) {\n                         throw new MetaDataException(\"rank levels changed\",\n                                 LogMessageKeys.INDEX_NAME, index.getName());\n                     }\n                     changedOptions.remove(IndexOptions.RANK_NLEVELS);\n                 }\n+                if (changedOptions.contains(IndexOptions.RANK_HASH_FUNCTION)) {\n+                    RankedSet.HashFunction oldFunction = RankedSetIndexHelper.getHashFunction(oldIndex);\n+                    RankedSet.HashFunction newFunction = RankedSetIndexHelper.getHashFunction(index);\n+                    if (!oldFunction.equals(newFunction)) {\n+                        throw new MetaDataException(\"rank hash function changed\",\n+                                LogMessageKeys.INDEX_NAME, index.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MjE2MA=="}, "originalCommit": {"oid": "33d8ddb960b33736a51df2c8647f39e58e76f1aa"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDE1MzE0OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankedSetIndexHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjo0OTo1M1rOFtG4tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToxMjo0MlrOFtIlxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MzA2MA==", "bodyText": "I suppose using a registry rather than an enum is more idiomatic (e.g., FunctionKeyExpressions) and allows a user to provide their own implementation. I think that switching to a registry in the future is compatible with this current approach, though, so maybe it's fine as is for now. (Perhaps there should be an Issue about it.)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/833#discussion_r382843060", "createdAt": "2020-02-21T22:49:53Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankedSetIndexHelper.java", "diffHunk": "@@ -50,6 +54,54 @@\n public class RankedSetIndexHelper {\n     public static final Tuple COMPARISON_SKIPPED_SCORE = Tuple.from(Comparisons.COMPARISON_SKIPPED_BINDING);\n \n+    public static final RankedSet.HashFunction MURMUR3_HASH_FUNCTION = new GuavaHashFunction(Hashing.murmur3_32());\n+\n+    /**\n+     * Use {@code com.google.common.hash.HashFunction}s as {@code RankedSet.HashFunction}s.\n+     */\n+    public static class GuavaHashFunction implements RankedSet.HashFunction {\n+        @Nonnull\n+        private final HashFunction guava;\n+\n+        public GuavaHashFunction(HashFunction guava) {\n+            this.guava = guava;\n+        }\n+\n+        @Override\n+        public int hash(byte[] key) {\n+            return guava.hashBytes(key).asInt();\n+        }\n+    }\n+\n+    /**\n+     * Known hash functions available as index options.\n+     */\n+    public enum HashFunctionNames {\n+        JDK(RankedSet.JDK_ARRAY_HASH),\n+        CRC(RankedSet.CRC_HASH),\n+        MURMUR3(MURMUR3_HASH_FUNCTION);\n+\n+        private final RankedSet.HashFunction hashFunction;\n+\n+        HashFunctionNames(RankedSet.HashFunction hashFunction) {\n+            this.hashFunction = hashFunction;\n+        }\n+\n+        public RankedSet.HashFunction getHashFunction() {\n+            return hashFunction;\n+        }\n+    }\n+\n+    public static int getNLevels(@Nonnull Index index) {\n+        String nlevelsOption = index.getOption(IndexOptions.RANK_NLEVELS);\n+        return nlevelsOption == null ? RankedSet.DEFAULT_LEVELS : Integer.parseInt(nlevelsOption);\n+    }\n+\n+    public static RankedSet.HashFunction getHashFunction(@Nonnull Index index) {\n+        String hashFunctionOption = index.getOption(IndexOptions.RANK_HASH_FUNCTION);\n+        return hashFunctionOption == null ? RankedSet.DEFAULT_HASH_FUNCTION : HashFunctionNames.valueOf(hashFunctionOption).getHashFunction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8ddb960b33736a51df2c8647f39e58e76f1aa"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1NTMzMA==", "bodyText": "Yes. It's also possible that some additional options will require more state.\nFor example, if we wanted one that seeded Murmur3 from, say, the leaderboard time window id instead of always using 0.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/833#discussion_r382855330", "createdAt": "2020-02-21T23:40:11Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankedSetIndexHelper.java", "diffHunk": "@@ -50,6 +54,54 @@\n public class RankedSetIndexHelper {\n     public static final Tuple COMPARISON_SKIPPED_SCORE = Tuple.from(Comparisons.COMPARISON_SKIPPED_BINDING);\n \n+    public static final RankedSet.HashFunction MURMUR3_HASH_FUNCTION = new GuavaHashFunction(Hashing.murmur3_32());\n+\n+    /**\n+     * Use {@code com.google.common.hash.HashFunction}s as {@code RankedSet.HashFunction}s.\n+     */\n+    public static class GuavaHashFunction implements RankedSet.HashFunction {\n+        @Nonnull\n+        private final HashFunction guava;\n+\n+        public GuavaHashFunction(HashFunction guava) {\n+            this.guava = guava;\n+        }\n+\n+        @Override\n+        public int hash(byte[] key) {\n+            return guava.hashBytes(key).asInt();\n+        }\n+    }\n+\n+    /**\n+     * Known hash functions available as index options.\n+     */\n+    public enum HashFunctionNames {\n+        JDK(RankedSet.JDK_ARRAY_HASH),\n+        CRC(RankedSet.CRC_HASH),\n+        MURMUR3(MURMUR3_HASH_FUNCTION);\n+\n+        private final RankedSet.HashFunction hashFunction;\n+\n+        HashFunctionNames(RankedSet.HashFunction hashFunction) {\n+            this.hashFunction = hashFunction;\n+        }\n+\n+        public RankedSet.HashFunction getHashFunction() {\n+            return hashFunction;\n+        }\n+    }\n+\n+    public static int getNLevels(@Nonnull Index index) {\n+        String nlevelsOption = index.getOption(IndexOptions.RANK_NLEVELS);\n+        return nlevelsOption == null ? RankedSet.DEFAULT_LEVELS : Integer.parseInt(nlevelsOption);\n+    }\n+\n+    public static RankedSet.HashFunction getHashFunction(@Nonnull Index index) {\n+        String hashFunctionOption = index.getOption(IndexOptions.RANK_HASH_FUNCTION);\n+        return hashFunctionOption == null ? RankedSet.DEFAULT_HASH_FUNCTION : HashFunctionNames.valueOf(hashFunctionOption).getHashFunction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MzA2MA=="}, "originalCommit": {"oid": "33d8ddb960b33736a51df2c8647f39e58e76f1aa"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NzAzNA==", "bodyText": "I didn\u2019t make it extensible, but as a top level regular class it is now maybe a bit more registry like", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/833#discussion_r382867034", "createdAt": "2020-02-22T00:43:49Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankedSetIndexHelper.java", "diffHunk": "@@ -50,6 +54,54 @@\n public class RankedSetIndexHelper {\n     public static final Tuple COMPARISON_SKIPPED_SCORE = Tuple.from(Comparisons.COMPARISON_SKIPPED_BINDING);\n \n+    public static final RankedSet.HashFunction MURMUR3_HASH_FUNCTION = new GuavaHashFunction(Hashing.murmur3_32());\n+\n+    /**\n+     * Use {@code com.google.common.hash.HashFunction}s as {@code RankedSet.HashFunction}s.\n+     */\n+    public static class GuavaHashFunction implements RankedSet.HashFunction {\n+        @Nonnull\n+        private final HashFunction guava;\n+\n+        public GuavaHashFunction(HashFunction guava) {\n+            this.guava = guava;\n+        }\n+\n+        @Override\n+        public int hash(byte[] key) {\n+            return guava.hashBytes(key).asInt();\n+        }\n+    }\n+\n+    /**\n+     * Known hash functions available as index options.\n+     */\n+    public enum HashFunctionNames {\n+        JDK(RankedSet.JDK_ARRAY_HASH),\n+        CRC(RankedSet.CRC_HASH),\n+        MURMUR3(MURMUR3_HASH_FUNCTION);\n+\n+        private final RankedSet.HashFunction hashFunction;\n+\n+        HashFunctionNames(RankedSet.HashFunction hashFunction) {\n+            this.hashFunction = hashFunction;\n+        }\n+\n+        public RankedSet.HashFunction getHashFunction() {\n+            return hashFunction;\n+        }\n+    }\n+\n+    public static int getNLevels(@Nonnull Index index) {\n+        String nlevelsOption = index.getOption(IndexOptions.RANK_NLEVELS);\n+        return nlevelsOption == null ? RankedSet.DEFAULT_LEVELS : Integer.parseInt(nlevelsOption);\n+    }\n+\n+    public static RankedSet.HashFunction getHashFunction(@Nonnull Index index) {\n+        String hashFunctionOption = index.getOption(IndexOptions.RANK_HASH_FUNCTION);\n+        return hashFunctionOption == null ? RankedSet.DEFAULT_HASH_FUNCTION : HashFunctionNames.valueOf(hashFunctionOption).getHashFunction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MzA2MA=="}, "originalCommit": {"oid": "33d8ddb960b33736a51df2c8647f39e58e76f1aa"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MDk4MA==", "bodyText": "Yeah, and even though it's not extensible now, it looks like the kind of thing that could be made a registry if/when needed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/833#discussion_r382870980", "createdAt": "2020-02-22T01:12:42Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankedSetIndexHelper.java", "diffHunk": "@@ -50,6 +54,54 @@\n public class RankedSetIndexHelper {\n     public static final Tuple COMPARISON_SKIPPED_SCORE = Tuple.from(Comparisons.COMPARISON_SKIPPED_BINDING);\n \n+    public static final RankedSet.HashFunction MURMUR3_HASH_FUNCTION = new GuavaHashFunction(Hashing.murmur3_32());\n+\n+    /**\n+     * Use {@code com.google.common.hash.HashFunction}s as {@code RankedSet.HashFunction}s.\n+     */\n+    public static class GuavaHashFunction implements RankedSet.HashFunction {\n+        @Nonnull\n+        private final HashFunction guava;\n+\n+        public GuavaHashFunction(HashFunction guava) {\n+            this.guava = guava;\n+        }\n+\n+        @Override\n+        public int hash(byte[] key) {\n+            return guava.hashBytes(key).asInt();\n+        }\n+    }\n+\n+    /**\n+     * Known hash functions available as index options.\n+     */\n+    public enum HashFunctionNames {\n+        JDK(RankedSet.JDK_ARRAY_HASH),\n+        CRC(RankedSet.CRC_HASH),\n+        MURMUR3(MURMUR3_HASH_FUNCTION);\n+\n+        private final RankedSet.HashFunction hashFunction;\n+\n+        HashFunctionNames(RankedSet.HashFunction hashFunction) {\n+            this.hashFunction = hashFunction;\n+        }\n+\n+        public RankedSet.HashFunction getHashFunction() {\n+            return hashFunction;\n+        }\n+    }\n+\n+    public static int getNLevels(@Nonnull Index index) {\n+        String nlevelsOption = index.getOption(IndexOptions.RANK_NLEVELS);\n+        return nlevelsOption == null ? RankedSet.DEFAULT_LEVELS : Integer.parseInt(nlevelsOption);\n+    }\n+\n+    public static RankedSet.HashFunction getHashFunction(@Nonnull Index index) {\n+        String hashFunctionOption = index.getOption(IndexOptions.RANK_HASH_FUNCTION);\n+        return hashFunctionOption == null ? RankedSet.DEFAULT_HASH_FUNCTION : HashFunctionNames.valueOf(hashFunctionOption).getHashFunction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MzA2MA=="}, "originalCommit": {"oid": "33d8ddb960b33736a51df2c8647f39e58e76f1aa"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDE1NTMzOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankedSetIndexHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjo1MTowMFrOFtG6EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDo0MDoyOFrOFtIULQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MzQwOQ==", "bodyText": "This kind of feels like a private class, at least until the user can provide their own hash function implementation (instead of using the enum).", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/833#discussion_r382843409", "createdAt": "2020-02-21T22:51:00Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankedSetIndexHelper.java", "diffHunk": "@@ -50,6 +54,54 @@\n public class RankedSetIndexHelper {\n     public static final Tuple COMPARISON_SKIPPED_SCORE = Tuple.from(Comparisons.COMPARISON_SKIPPED_BINDING);\n \n+    public static final RankedSet.HashFunction MURMUR3_HASH_FUNCTION = new GuavaHashFunction(Hashing.murmur3_32());\n+\n+    /**\n+     * Use {@code com.google.common.hash.HashFunction}s as {@code RankedSet.HashFunction}s.\n+     */\n+    public static class GuavaHashFunction implements RankedSet.HashFunction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8ddb960b33736a51df2c8647f39e58e76f1aa"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjQ3Nw==", "bodyText": "I moved it out into the replacement for the enum and made it private", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/833#discussion_r382866477", "createdAt": "2020-02-22T00:40:28Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankedSetIndexHelper.java", "diffHunk": "@@ -50,6 +54,54 @@\n public class RankedSetIndexHelper {\n     public static final Tuple COMPARISON_SKIPPED_SCORE = Tuple.from(Comparisons.COMPARISON_SKIPPED_BINDING);\n \n+    public static final RankedSet.HashFunction MURMUR3_HASH_FUNCTION = new GuavaHashFunction(Hashing.murmur3_32());\n+\n+    /**\n+     * Use {@code com.google.common.hash.HashFunction}s as {@code RankedSet.HashFunction}s.\n+     */\n+    public static class GuavaHashFunction implements RankedSet.HashFunction {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0MzQwOQ=="}, "originalCommit": {"oid": "33d8ddb960b33736a51df2c8647f39e58e76f1aa"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDE2NjMwOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankedSetIndexHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjo1NzowMlrOFtHA5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDo0MjozM1rOFtIVaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0NTE1Ng==", "bodyText": "As this enum is in an INTERNAL class, it's technically \"unadvised\" for users to use this, but the alternative is they need their own constants in their code if they want to use the names here. I suppose we could leave it here if we're not \"entirely happy\" with this API (yet?), or move it out.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/833#discussion_r382845156", "createdAt": "2020-02-21T22:57:02Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankedSetIndexHelper.java", "diffHunk": "@@ -50,6 +54,54 @@\n public class RankedSetIndexHelper {\n     public static final Tuple COMPARISON_SKIPPED_SCORE = Tuple.from(Comparisons.COMPARISON_SKIPPED_BINDING);\n \n+    public static final RankedSet.HashFunction MURMUR3_HASH_FUNCTION = new GuavaHashFunction(Hashing.murmur3_32());\n+\n+    /**\n+     * Use {@code com.google.common.hash.HashFunction}s as {@code RankedSet.HashFunction}s.\n+     */\n+    public static class GuavaHashFunction implements RankedSet.HashFunction {\n+        @Nonnull\n+        private final HashFunction guava;\n+\n+        public GuavaHashFunction(HashFunction guava) {\n+            this.guava = guava;\n+        }\n+\n+        @Override\n+        public int hash(byte[] key) {\n+            return guava.hashBytes(key).asInt();\n+        }\n+    }\n+\n+    /**\n+     * Known hash functions available as index options.\n+     */\n+    public enum HashFunctionNames {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8ddb960b33736a51df2c8647f39e58e76f1aa"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2Njc5NQ==", "bodyText": "I made this top level. Since that meant it should own the other statics and enum init order is fixed, I needed to also make it a regular class.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/833#discussion_r382866795", "createdAt": "2020-02-22T00:42:33Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankedSetIndexHelper.java", "diffHunk": "@@ -50,6 +54,54 @@\n public class RankedSetIndexHelper {\n     public static final Tuple COMPARISON_SKIPPED_SCORE = Tuple.from(Comparisons.COMPARISON_SKIPPED_BINDING);\n \n+    public static final RankedSet.HashFunction MURMUR3_HASH_FUNCTION = new GuavaHashFunction(Hashing.murmur3_32());\n+\n+    /**\n+     * Use {@code com.google.common.hash.HashFunction}s as {@code RankedSet.HashFunction}s.\n+     */\n+    public static class GuavaHashFunction implements RankedSet.HashFunction {\n+        @Nonnull\n+        private final HashFunction guava;\n+\n+        public GuavaHashFunction(HashFunction guava) {\n+            this.guava = guava;\n+        }\n+\n+        @Override\n+        public int hash(byte[] key) {\n+            return guava.hashBytes(key).asInt();\n+        }\n+    }\n+\n+    /**\n+     * Known hash functions available as index options.\n+     */\n+    public enum HashFunctionNames {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0NTE1Ng=="}, "originalCommit": {"oid": "33d8ddb960b33736a51df2c8647f39e58e76f1aa"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 79, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}