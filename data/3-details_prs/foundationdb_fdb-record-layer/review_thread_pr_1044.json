{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNzc3NTgx", "number": 1044, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjowOTo1OFrOEuEdAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0Njo0MlrOEygHgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzQyOTEzOnYy", "diffSide": "RIGHT", "path": "fdb-extensions/src/main/java/com/apple/foundationdb/synchronizedsession/SynchronizedSession.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjowOTo1OFrOHiPbiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0Nzo1N1rOHpLqMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2NjQ0MQ==", "bodyText": "Bit of a nit, but something about \"any\" doesn't quite seem right here... Maybe checkActive?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1044#discussion_r505666441", "createdAt": "2020-10-15T16:09:58Z", "author": {"login": "alecgrieser"}, "path": "fdb-extensions/src/main/java/com/apple/foundationdb/synchronizedsession/SynchronizedSession.java", "diffHunk": "@@ -216,15 +224,48 @@ public static void endAnySession(@Nonnull Transaction tr, @Nonnull Subspace lock\n         tr.clear(lockSubspace.range());\n     }\n \n-    private CompletableFuture<UUID> getLockSessionId(@Nonnull Transaction tr) {\n-        return tr.get(lockSessionIdSubspaceKey)\n+\n+    /**\n+     * Check if there is any active session on the given lock subspace, so that a new session would not able to be initialized.\n+     * @param tr transaction to use\n+     * @param lockSubspace the lock whose active session needs to be checked\n+     * @return {@code true} if there is any active session, otherwise {@code false}\n+     */\n+    public static CompletableFuture<Boolean> checkAnySession(@Nonnull Transaction tr, @Nonnull Subspace lockSubspace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db3b96f1f12cfcbfdf421aac4a6a79716cc3b7d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzMDQwMA==", "bodyText": "Yeah, I called it checkAnySession because it's a \"parallel narrative\" of the endAnySession  methods above, but now I can see how this name can be misleading.\nHowever, checkActive also sound vague to me because it doesn't say it's about the current session or about all sessions of the lock. I would imagine SynchronizedSession could be refactored to two classes: SynchronizedSessionLock (defined by a lock subspace) and a SynchronizedSession (defined by a lock subspace and a session ID). After that, checkActive should be a good name on SynchronizedSessionLock.\nWhat about checkExistActiveSession?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1044#discussion_r512430400", "createdAt": "2020-10-27T05:47:03Z", "author": {"login": "nblintao"}, "path": "fdb-extensions/src/main/java/com/apple/foundationdb/synchronizedsession/SynchronizedSession.java", "diffHunk": "@@ -216,15 +224,48 @@ public static void endAnySession(@Nonnull Transaction tr, @Nonnull Subspace lock\n         tr.clear(lockSubspace.range());\n     }\n \n-    private CompletableFuture<UUID> getLockSessionId(@Nonnull Transaction tr) {\n-        return tr.get(lockSessionIdSubspaceKey)\n+\n+    /**\n+     * Check if there is any active session on the given lock subspace, so that a new session would not able to be initialized.\n+     * @param tr transaction to use\n+     * @param lockSubspace the lock whose active session needs to be checked\n+     * @return {@code true} if there is any active session, otherwise {@code false}\n+     */\n+    public static CompletableFuture<Boolean> checkAnySession(@Nonnull Transaction tr, @Nonnull Subspace lockSubspace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2NjQ0MQ=="}, "originalCommit": {"oid": "4db3b96f1f12cfcbfdf421aac4a6a79716cc3b7d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0NDY4OA==", "bodyText": "Okay, I think that name makes sense. Just a grammar change suggested in a follow up review comment", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1044#discussion_r512944688", "createdAt": "2020-10-27T18:47:57Z", "author": {"login": "alecgrieser"}, "path": "fdb-extensions/src/main/java/com/apple/foundationdb/synchronizedsession/SynchronizedSession.java", "diffHunk": "@@ -216,15 +224,48 @@ public static void endAnySession(@Nonnull Transaction tr, @Nonnull Subspace lock\n         tr.clear(lockSubspace.range());\n     }\n \n-    private CompletableFuture<UUID> getLockSessionId(@Nonnull Transaction tr) {\n-        return tr.get(lockSessionIdSubspaceKey)\n+\n+    /**\n+     * Check if there is any active session on the given lock subspace, so that a new session would not able to be initialized.\n+     * @param tr transaction to use\n+     * @param lockSubspace the lock whose active session needs to be checked\n+     * @return {@code true} if there is any active session, otherwise {@code false}\n+     */\n+    public static CompletableFuture<Boolean> checkAnySession(@Nonnull Transaction tr, @Nonnull Subspace lockSubspace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2NjQ0MQ=="}, "originalCommit": {"oid": "4db3b96f1f12cfcbfdf421aac4a6a79716cc3b7d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzQ0NTAxOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoxMzozOFrOHiPlUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToyNzoxOVrOHor7jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2ODk0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Check if the index is being built by any of the {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).\n          \n          \n            \n                 * Check if the index is being built by any other {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).\n          \n      \n    \n    \n  \n\nI think it also might make sense to break the parenthetical into its own sentence--something like \"This requires that the synchronized session feature is enabled on all indexers.\" (Probably with an @see or @link to the setUseSyncrhonizedSession method on the OnlineIndexer.Builder.)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1044#discussion_r505668946", "createdAt": "2020-10-15T16:13:38Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1119,15 +1119,31 @@ public static void stopOngoingOnlineIndexBuilds(@Nonnull FDBRecordStore recordSt\n         SynchronizedSession.endAnySession(recordStore.ensureContextActive(), indexBuildLockSubspace(recordStore, index));\n     }\n \n-    @VisibleForTesting\n-    CompletableFuture<Void> checkNoOngoingOnlineIndexBuildsAsync() {\n-        return runner\n-                .runAsync(context -> openRecordStore(context).thenApply(store -> indexBuildLockSubspace(store, index)))\n-                .thenCompose(lockSubspace ->\n-                        // It will throw {@link com.apple.foundationdb.synchronizedsession.SynchronizedSessionLockedException}\n-                        // if there are ongoing online index builds.\n-                        runner.startSynchronizedSessionAsync(lockSubspace, leaseLengthMills))\n-                .thenCompose(SynchronizedSessionRunner::endSessionAsync);\n+    /**\n+     * Synchronous/blocking version of {@link #checkAnyOngoingOnlineIndexBuildsAsync()}.\n+     * @return <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public boolean checkAnyOngoingOnlineIndexBuilds() {\n+        return runner.asyncToSync(FDBStoreTimer.Waits.WAIT_CHECK_ONGOING_ONLINE_INDEX_BUILD, checkAnyOngoingOnlineIndexBuildsAsync());\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of the {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db3b96f1f12cfcbfdf421aac4a6a79716cc3b7d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5NDkwNw==", "bodyText": "I think I do mean any OnlineIndexers instead any other OnlineIndexers. Note that these methods are independent of specific OnlineIndexer objects. It returns true to onlineIndexer. checkAnyOngoingOnlineIndexBuildsAsync even if the index is being built by onlineIndexer it self.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1044#discussion_r505694907", "createdAt": "2020-10-15T16:53:34Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1119,15 +1119,31 @@ public static void stopOngoingOnlineIndexBuilds(@Nonnull FDBRecordStore recordSt\n         SynchronizedSession.endAnySession(recordStore.ensureContextActive(), indexBuildLockSubspace(recordStore, index));\n     }\n \n-    @VisibleForTesting\n-    CompletableFuture<Void> checkNoOngoingOnlineIndexBuildsAsync() {\n-        return runner\n-                .runAsync(context -> openRecordStore(context).thenApply(store -> indexBuildLockSubspace(store, index)))\n-                .thenCompose(lockSubspace ->\n-                        // It will throw {@link com.apple.foundationdb.synchronizedsession.SynchronizedSessionLockedException}\n-                        // if there are ongoing online index builds.\n-                        runner.startSynchronizedSessionAsync(lockSubspace, leaseLengthMills))\n-                .thenCompose(SynchronizedSessionRunner::endSessionAsync);\n+    /**\n+     * Synchronous/blocking version of {@link #checkAnyOngoingOnlineIndexBuildsAsync()}.\n+     * @return <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public boolean checkAnyOngoingOnlineIndexBuilds() {\n+        return runner.asyncToSync(FDBStoreTimer.Waits.WAIT_CHECK_ONGOING_ONLINE_INDEX_BUILD, checkAnyOngoingOnlineIndexBuildsAsync());\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of the {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2ODk0Ng=="}, "originalCommit": {"oid": "4db3b96f1f12cfcbfdf421aac4a6a79716cc3b7d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5ODMxMA==", "bodyText": "Oh, interesting. I guess that's true. I guess it's just the \"the\" then that's extraneous, though it may be worth calling that out in the docs (that this \"self conflicts\")", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1044#discussion_r505698310", "createdAt": "2020-10-15T16:58:52Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1119,15 +1119,31 @@ public static void stopOngoingOnlineIndexBuilds(@Nonnull FDBRecordStore recordSt\n         SynchronizedSession.endAnySession(recordStore.ensureContextActive(), indexBuildLockSubspace(recordStore, index));\n     }\n \n-    @VisibleForTesting\n-    CompletableFuture<Void> checkNoOngoingOnlineIndexBuildsAsync() {\n-        return runner\n-                .runAsync(context -> openRecordStore(context).thenApply(store -> indexBuildLockSubspace(store, index)))\n-                .thenCompose(lockSubspace ->\n-                        // It will throw {@link com.apple.foundationdb.synchronizedsession.SynchronizedSessionLockedException}\n-                        // if there are ongoing online index builds.\n-                        runner.startSynchronizedSessionAsync(lockSubspace, leaseLengthMills))\n-                .thenCompose(SynchronizedSessionRunner::endSessionAsync);\n+    /**\n+     * Synchronous/blocking version of {@link #checkAnyOngoingOnlineIndexBuildsAsync()}.\n+     * @return <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public boolean checkAnyOngoingOnlineIndexBuilds() {\n+        return runner.asyncToSync(FDBStoreTimer.Waits.WAIT_CHECK_ONGOING_ONLINE_INDEX_BUILD, checkAnyOngoingOnlineIndexBuildsAsync());\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of the {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2ODk0Ng=="}, "originalCommit": {"oid": "4db3b96f1f12cfcbfdf421aac4a6a79716cc3b7d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyNDg0Ng==", "bodyText": "Done.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1044#discussion_r512424846", "createdAt": "2020-10-27T05:27:19Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1119,15 +1119,31 @@ public static void stopOngoingOnlineIndexBuilds(@Nonnull FDBRecordStore recordSt\n         SynchronizedSession.endAnySession(recordStore.ensureContextActive(), indexBuildLockSubspace(recordStore, index));\n     }\n \n-    @VisibleForTesting\n-    CompletableFuture<Void> checkNoOngoingOnlineIndexBuildsAsync() {\n-        return runner\n-                .runAsync(context -> openRecordStore(context).thenApply(store -> indexBuildLockSubspace(store, index)))\n-                .thenCompose(lockSubspace ->\n-                        // It will throw {@link com.apple.foundationdb.synchronizedsession.SynchronizedSessionLockedException}\n-                        // if there are ongoing online index builds.\n-                        runner.startSynchronizedSessionAsync(lockSubspace, leaseLengthMills))\n-                .thenCompose(SynchronizedSessionRunner::endSessionAsync);\n+    /**\n+     * Synchronous/blocking version of {@link #checkAnyOngoingOnlineIndexBuildsAsync()}.\n+     * @return <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public boolean checkAnyOngoingOnlineIndexBuilds() {\n+        return runner.asyncToSync(FDBStoreTimer.Waits.WAIT_CHECK_ONGOING_ONLINE_INDEX_BUILD, checkAnyOngoingOnlineIndexBuildsAsync());\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of the {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2ODk0Ng=="}, "originalCommit": {"oid": "4db3b96f1f12cfcbfdf421aac4a6a79716cc3b7d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzQ0NjM3OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoxMzo1NlrOHiPmJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNTozMDo0M1rOHor_Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2OTE1OQ==", "bodyText": "Same comments about the docs as on the other method", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1044#discussion_r505669159", "createdAt": "2020-10-15T16:13:56Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1119,15 +1119,31 @@ public static void stopOngoingOnlineIndexBuilds(@Nonnull FDBRecordStore recordSt\n         SynchronizedSession.endAnySession(recordStore.ensureContextActive(), indexBuildLockSubspace(recordStore, index));\n     }\n \n-    @VisibleForTesting\n-    CompletableFuture<Void> checkNoOngoingOnlineIndexBuildsAsync() {\n-        return runner\n-                .runAsync(context -> openRecordStore(context).thenApply(store -> indexBuildLockSubspace(store, index)))\n-                .thenCompose(lockSubspace ->\n-                        // It will throw {@link com.apple.foundationdb.synchronizedsession.SynchronizedSessionLockedException}\n-                        // if there are ongoing online index builds.\n-                        runner.startSynchronizedSessionAsync(lockSubspace, leaseLengthMills))\n-                .thenCompose(SynchronizedSessionRunner::endSessionAsync);\n+    /**\n+     * Synchronous/blocking version of {@link #checkAnyOngoingOnlineIndexBuildsAsync()}.\n+     * @return <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public boolean checkAnyOngoingOnlineIndexBuilds() {\n+        return runner.asyncToSync(FDBStoreTimer.Waits.WAIT_CHECK_ONGOING_ONLINE_INDEX_BUILD, checkAnyOngoingOnlineIndexBuildsAsync());\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of the {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).\n+     * @return a future that will complete to <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public CompletableFuture<Boolean> checkAnyOngoingOnlineIndexBuildsAsync() {\n+        return runner.runAsync(context -> openRecordStore(context).thenCompose(recordStore ->\n+                checkAnyOngoingOnlineIndexBuildsAsync(recordStore, index)));\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of the {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db3b96f1f12cfcbfdf421aac4a6a79716cc3b7d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyNTgxNQ==", "bodyText": "Removed the, but I don't I should call out \"self conflict\" here because this is a static method.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1044#discussion_r512425815", "createdAt": "2020-10-27T05:30:43Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1119,15 +1119,31 @@ public static void stopOngoingOnlineIndexBuilds(@Nonnull FDBRecordStore recordSt\n         SynchronizedSession.endAnySession(recordStore.ensureContextActive(), indexBuildLockSubspace(recordStore, index));\n     }\n \n-    @VisibleForTesting\n-    CompletableFuture<Void> checkNoOngoingOnlineIndexBuildsAsync() {\n-        return runner\n-                .runAsync(context -> openRecordStore(context).thenApply(store -> indexBuildLockSubspace(store, index)))\n-                .thenCompose(lockSubspace ->\n-                        // It will throw {@link com.apple.foundationdb.synchronizedsession.SynchronizedSessionLockedException}\n-                        // if there are ongoing online index builds.\n-                        runner.startSynchronizedSessionAsync(lockSubspace, leaseLengthMills))\n-                .thenCompose(SynchronizedSessionRunner::endSessionAsync);\n+    /**\n+     * Synchronous/blocking version of {@link #checkAnyOngoingOnlineIndexBuildsAsync()}.\n+     * @return <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public boolean checkAnyOngoingOnlineIndexBuilds() {\n+        return runner.asyncToSync(FDBStoreTimer.Waits.WAIT_CHECK_ONGOING_ONLINE_INDEX_BUILD, checkAnyOngoingOnlineIndexBuildsAsync());\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of the {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).\n+     * @return a future that will complete to <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public CompletableFuture<Boolean> checkAnyOngoingOnlineIndexBuildsAsync() {\n+        return runner.runAsync(context -> openRecordStore(context).thenCompose(recordStore ->\n+                checkAnyOngoingOnlineIndexBuildsAsync(recordStore, index)));\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of the {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2OTE1OQ=="}, "originalCommit": {"oid": "4db3b96f1f12cfcbfdf421aac4a6a79716cc3b7d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzQ0Nzg0OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoxNDoxOVrOHiPnFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToyODozMlrOHor8sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2OTM5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param index the index whose builds need to be stopped\n          \n          \n            \n                 * @param index the index to check for ongoing index builds", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1044#discussion_r505669398", "createdAt": "2020-10-15T16:14:19Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1119,15 +1119,31 @@ public static void stopOngoingOnlineIndexBuilds(@Nonnull FDBRecordStore recordSt\n         SynchronizedSession.endAnySession(recordStore.ensureContextActive(), indexBuildLockSubspace(recordStore, index));\n     }\n \n-    @VisibleForTesting\n-    CompletableFuture<Void> checkNoOngoingOnlineIndexBuildsAsync() {\n-        return runner\n-                .runAsync(context -> openRecordStore(context).thenApply(store -> indexBuildLockSubspace(store, index)))\n-                .thenCompose(lockSubspace ->\n-                        // It will throw {@link com.apple.foundationdb.synchronizedsession.SynchronizedSessionLockedException}\n-                        // if there are ongoing online index builds.\n-                        runner.startSynchronizedSessionAsync(lockSubspace, leaseLengthMills))\n-                .thenCompose(SynchronizedSessionRunner::endSessionAsync);\n+    /**\n+     * Synchronous/blocking version of {@link #checkAnyOngoingOnlineIndexBuildsAsync()}.\n+     * @return <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public boolean checkAnyOngoingOnlineIndexBuilds() {\n+        return runner.asyncToSync(FDBStoreTimer.Waits.WAIT_CHECK_ONGOING_ONLINE_INDEX_BUILD, checkAnyOngoingOnlineIndexBuildsAsync());\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of the {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).\n+     * @return a future that will complete to <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public CompletableFuture<Boolean> checkAnyOngoingOnlineIndexBuildsAsync() {\n+        return runner.runAsync(context -> openRecordStore(context).thenCompose(recordStore ->\n+                checkAnyOngoingOnlineIndexBuildsAsync(recordStore, index)));\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of the {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).\n+     * @param recordStore record store whose index builds need to be checked\n+     * @param index the index whose builds need to be stopped", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db3b96f1f12cfcbfdf421aac4a6a79716cc3b7d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyNTEzOA==", "bodyText": "Done.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1044#discussion_r512425138", "createdAt": "2020-10-27T05:28:32Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1119,15 +1119,31 @@ public static void stopOngoingOnlineIndexBuilds(@Nonnull FDBRecordStore recordSt\n         SynchronizedSession.endAnySession(recordStore.ensureContextActive(), indexBuildLockSubspace(recordStore, index));\n     }\n \n-    @VisibleForTesting\n-    CompletableFuture<Void> checkNoOngoingOnlineIndexBuildsAsync() {\n-        return runner\n-                .runAsync(context -> openRecordStore(context).thenApply(store -> indexBuildLockSubspace(store, index)))\n-                .thenCompose(lockSubspace ->\n-                        // It will throw {@link com.apple.foundationdb.synchronizedsession.SynchronizedSessionLockedException}\n-                        // if there are ongoing online index builds.\n-                        runner.startSynchronizedSessionAsync(lockSubspace, leaseLengthMills))\n-                .thenCompose(SynchronizedSessionRunner::endSessionAsync);\n+    /**\n+     * Synchronous/blocking version of {@link #checkAnyOngoingOnlineIndexBuildsAsync()}.\n+     * @return <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public boolean checkAnyOngoingOnlineIndexBuilds() {\n+        return runner.asyncToSync(FDBStoreTimer.Waits.WAIT_CHECK_ONGOING_ONLINE_INDEX_BUILD, checkAnyOngoingOnlineIndexBuildsAsync());\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of the {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).\n+     * @return a future that will complete to <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public CompletableFuture<Boolean> checkAnyOngoingOnlineIndexBuildsAsync() {\n+        return runner.runAsync(context -> openRecordStore(context).thenCompose(recordStore ->\n+                checkAnyOngoingOnlineIndexBuildsAsync(recordStore, index)));\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of the {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).\n+     * @param recordStore record store whose index builds need to be checked\n+     * @param index the index whose builds need to be stopped", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2OTM5OA=="}, "originalCommit": {"oid": "4db3b96f1f12cfcbfdf421aac4a6a79716cc3b7d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzkwNDEwOnYy", "diffSide": "RIGHT", "path": "fdb-extensions/src/main/java/com/apple/foundationdb/synchronizedsession/SynchronizedSession.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0NjozMVrOHpLmiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjozNzowMVrOHpTjNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0Mzc1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static CompletableFuture<Boolean> checkExistActiveSession(@Nonnull Transaction tr, @Nonnull Subspace lockSubspace) {\n          \n          \n            \n                public static CompletableFuture<Boolean> checkActiveSessionExists(@Nonnull Transaction tr, @Nonnull Subspace lockSubspace) {", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1044#discussion_r512943752", "createdAt": "2020-10-27T18:46:31Z", "author": {"login": "alecgrieser"}, "path": "fdb-extensions/src/main/java/com/apple/foundationdb/synchronizedsession/SynchronizedSession.java", "diffHunk": "@@ -216,15 +224,48 @@ public static void endAnySession(@Nonnull Transaction tr, @Nonnull Subspace lock\n         tr.clear(lockSubspace.range());\n     }\n \n-    private CompletableFuture<UUID> getLockSessionId(@Nonnull Transaction tr) {\n-        return tr.get(lockSessionIdSubspaceKey)\n+\n+    /**\n+     * Check if there is any active session on the given lock subspace, so that a new session would not able to be initialized.\n+     * @param tr transaction to use\n+     * @param lockSubspace the lock whose active session needs to be checked\n+     * @return {@code true} if there is any active session, otherwise {@code false}\n+     */\n+    public static CompletableFuture<Boolean> checkExistActiveSession(@Nonnull Transaction tr, @Nonnull Subspace lockSubspace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60899100c9830e70399fa45b3406a57578c0ce47"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3Mzk3NQ==", "bodyText": "Done.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1044#discussion_r513073975", "createdAt": "2020-10-27T22:37:01Z", "author": {"login": "nblintao"}, "path": "fdb-extensions/src/main/java/com/apple/foundationdb/synchronizedsession/SynchronizedSession.java", "diffHunk": "@@ -216,15 +224,48 @@ public static void endAnySession(@Nonnull Transaction tr, @Nonnull Subspace lock\n         tr.clear(lockSubspace.range());\n     }\n \n-    private CompletableFuture<UUID> getLockSessionId(@Nonnull Transaction tr) {\n-        return tr.get(lockSessionIdSubspaceKey)\n+\n+    /**\n+     * Check if there is any active session on the given lock subspace, so that a new session would not able to be initialized.\n+     * @param tr transaction to use\n+     * @param lockSubspace the lock whose active session needs to be checked\n+     * @return {@code true} if there is any active session, otherwise {@code false}\n+     */\n+    public static CompletableFuture<Boolean> checkExistActiveSession(@Nonnull Transaction tr, @Nonnull Subspace lockSubspace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0Mzc1Mg=="}, "originalCommit": {"oid": "60899100c9830e70399fa45b3406a57578c0ce47"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzkwNDY2OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0Njo0MlrOHpLm7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjozNzowN1rOHpTjUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0Mzg1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return SynchronizedSession.checkExistActiveSession(recordStore.ensureContextActive(), indexBuildLockSubspace(recordStore, index));\n          \n          \n            \n                    return SynchronizedSession.checkActiveSessionExists(recordStore.ensureContextActive(), indexBuildLockSubspace(recordStore, index));", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1044#discussion_r512943854", "createdAt": "2020-10-27T18:46:42Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1119,15 +1119,32 @@ public static void stopOngoingOnlineIndexBuilds(@Nonnull FDBRecordStore recordSt\n         SynchronizedSession.endAnySession(recordStore.ensureContextActive(), indexBuildLockSubspace(recordStore, index));\n     }\n \n-    @VisibleForTesting\n-    CompletableFuture<Void> checkNoOngoingOnlineIndexBuildsAsync() {\n-        return runner\n-                .runAsync(context -> openRecordStore(context).thenApply(store -> indexBuildLockSubspace(store, index)))\n-                .thenCompose(lockSubspace ->\n-                        // It will throw {@link com.apple.foundationdb.synchronizedsession.SynchronizedSessionLockedException}\n-                        // if there are ongoing online index builds.\n-                        runner.startSynchronizedSessionAsync(lockSubspace, leaseLengthMills))\n-                .thenCompose(SynchronizedSessionRunner::endSessionAsync);\n+    /**\n+     * Synchronous/blocking version of {@link #checkAnyOngoingOnlineIndexBuildsAsync()}.\n+     * @return <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public boolean checkAnyOngoingOnlineIndexBuilds() {\n+        return runner.asyncToSync(FDBStoreTimer.Waits.WAIT_CHECK_ONGOING_ONLINE_INDEX_BUILD, checkAnyOngoingOnlineIndexBuildsAsync());\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of the {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s),\n+     * including <i>this</i> {@link OnlineIndexer}.\n+     * @return a future that will complete to <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public CompletableFuture<Boolean> checkAnyOngoingOnlineIndexBuildsAsync() {\n+        return runner.runAsync(context -> openRecordStore(context).thenCompose(recordStore ->\n+                checkAnyOngoingOnlineIndexBuildsAsync(recordStore, index)));\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).\n+     * @param recordStore record store whose index builds need to be checked\n+     * @param index the index to check for ongoing index builds\n+     * @return a future that will complete to <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public static CompletableFuture<Boolean> checkAnyOngoingOnlineIndexBuildsAsync(@Nonnull FDBRecordStore recordStore, @Nonnull Index index) {\n+        return SynchronizedSession.checkExistActiveSession(recordStore.ensureContextActive(), indexBuildLockSubspace(recordStore, index));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60899100c9830e70399fa45b3406a57578c0ce47"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3NDAwMQ==", "bodyText": "Done.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1044#discussion_r513074001", "createdAt": "2020-10-27T22:37:07Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1119,15 +1119,32 @@ public static void stopOngoingOnlineIndexBuilds(@Nonnull FDBRecordStore recordSt\n         SynchronizedSession.endAnySession(recordStore.ensureContextActive(), indexBuildLockSubspace(recordStore, index));\n     }\n \n-    @VisibleForTesting\n-    CompletableFuture<Void> checkNoOngoingOnlineIndexBuildsAsync() {\n-        return runner\n-                .runAsync(context -> openRecordStore(context).thenApply(store -> indexBuildLockSubspace(store, index)))\n-                .thenCompose(lockSubspace ->\n-                        // It will throw {@link com.apple.foundationdb.synchronizedsession.SynchronizedSessionLockedException}\n-                        // if there are ongoing online index builds.\n-                        runner.startSynchronizedSessionAsync(lockSubspace, leaseLengthMills))\n-                .thenCompose(SynchronizedSessionRunner::endSessionAsync);\n+    /**\n+     * Synchronous/blocking version of {@link #checkAnyOngoingOnlineIndexBuildsAsync()}.\n+     * @return <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public boolean checkAnyOngoingOnlineIndexBuilds() {\n+        return runner.asyncToSync(FDBStoreTimer.Waits.WAIT_CHECK_ONGOING_ONLINE_INDEX_BUILD, checkAnyOngoingOnlineIndexBuildsAsync());\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of the {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s),\n+     * including <i>this</i> {@link OnlineIndexer}.\n+     * @return a future that will complete to <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public CompletableFuture<Boolean> checkAnyOngoingOnlineIndexBuildsAsync() {\n+        return runner.runAsync(context -> openRecordStore(context).thenCompose(recordStore ->\n+                checkAnyOngoingOnlineIndexBuildsAsync(recordStore, index)));\n+    }\n+\n+    /**\n+     * Check if the index is being built by any of {@link OnlineIndexer}s (only if they use {@link SynchronizedSession}s).\n+     * @param recordStore record store whose index builds need to be checked\n+     * @param index the index to check for ongoing index builds\n+     * @return a future that will complete to <code>true</code> if the index is being built and <code>false</code> otherwise\n+     */\n+    public static CompletableFuture<Boolean> checkAnyOngoingOnlineIndexBuildsAsync(@Nonnull FDBRecordStore recordStore, @Nonnull Index index) {\n+        return SynchronizedSession.checkExistActiveSession(recordStore.ensureContextActive(), indexBuildLockSubspace(recordStore, index));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0Mzg1NA=="}, "originalCommit": {"oid": "60899100c9830e70399fa45b3406a57578c0ce47"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 56, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}