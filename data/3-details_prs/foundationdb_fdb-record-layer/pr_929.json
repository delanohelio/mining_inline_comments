{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMzA0ODQ3", "number": 929, "title": "Resolves #928: support edge ordering in planner graphs", "bodyText": "This PR resolves #928 but also improves some of the earlier implementation that is needed for particularly for GML exports:\n\ngetAttributes() on a AbstractNode and AbstractEdge now returns a Map<String, Object> which allows to use nested collections. This is needed for GML substructures.\nPlannerGraph<N, E> now has two subclasses: ExplainPlannerGraph and InternalPlannerGraph which lock in the generic parameters of PlannerGraph<N, E>, so you can to write InternalPlannerGraph instead of PlannerGraph<InternalGraphProperty.Node, InternalGraphProperty.Edge>\nall the node and edge classes previously located as nested classes in respective ...Property classes were moved to these new subclasses: InternalPlannerGraph and ExplainPlannerGraph\nadded dependsOn() to all edges which allow for partial ordering between edges that are inbound to a node. This is necessary to maintain stable order among edges when exporting. Also some operators impose meaning on left and right.\ndot exports use dependsOn() by adding an invisible edge (not to the graph; just to the dot export) between children of a node. It also adds the visual constraint to layout children from left to right\ngml exports encode dependsOn() as a nested property on the node", "createdAt": "2020-05-05T04:53:07Z", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929", "merged": true, "mergeCommit": {"oid": "69c6d7e7d25318506b37f70677287f041baa25e0"}, "closed": true, "closedAt": "2020-05-13T15:59:20Z", "author": {"login": "normen662"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgVtp-AFqTQwNzgyODU1Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg7CwUAFqTQxMTA3MjM0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODI4NTU2", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#pullrequestreview-407828556", "createdAt": "2020-05-07T20:53:54Z", "commit": {"oid": "e8dda000ec7f1b50387df2a611fc45197e33504c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjowMTo1M1rOGTi3lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyNTo1OFrOGTsErw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE0NzQxNA==", "bodyText": "I think this needs some explanation for why a PlannerExpression might want to \"rewrite\" its graph. I think I understand why (namely, to be able to replace higher-order structures with simpler/more insightful representations), but it took me a long time to understand this.\nOne thing I'm still not sure about: why is this done by having the PlannerExpression do the rewriting, rather than having some \"rules\" that do the rewriting (in line with the design of the rule-based planner itself)? I think the answer is \"to avoid doing instanceof checking in some utility class\", but I wanted to double-check.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423147414", "createdAt": "2020-05-11T16:01:53Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/InternalPlannerGraphRewritable.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * InternalPlannerGraphRewritable.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+/**\n+ * Interface to allow {@link PlannerExpression}s to rewrite their own\n+ * internal graph representation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8dda000ec7f1b50387df2a611fc45197e33504c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4Nzg5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // If the current node had children that explicitly encode an order we do the following:\n          \n          \n            \n                        // We create a sub-block and set rank=same, rankDir=LR in order to have all children be rendered\n          \n          \n            \n                        // on the same level but left to right -- this is especially important for showing join-orders\n          \n          \n            \n                        // left-to-right.\n          \n          \n            \n                        // If the current node had children that explicitly encode an order we do the following:\n          \n          \n            \n                        // We create a sub-block and set rank=same, rankDir=LR in order to have all children be rendered\n          \n          \n            \n                        // on the same level but left to right.\n          \n          \n            \n                        // This is especially important for showing join-orders left-to-right.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423287896", "createdAt": "2020-05-11T20:06:13Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/DotExporter.java", "diffHunk": "@@ -138,22 +140,93 @@ protected void renderGraphAttributes(final PrintWriter out, final Map<String, St\n     }\n \n     @Override\n-    protected void renderNode(final PrintWriter out, final N node, final Map<String, String> attributes) {\n-        out.print(INDENT);\n-        out.print(getVertexID(node));\n+    protected void renderNodes(final ExporterContext context) {\n+        final ImmutableNetwork<N, E> network = context.getNetwork();\n+        final PrintWriter out = context.getPrintWriter();\n+\n+        super.renderNodes(context);\n \n-        renderAttributes(out, attributes);\n+        // Go through the vertex set a second time to render dependsOn information\n+        // vertex set\n+        for (final N n : network.nodes()) {\n+            // If the current node had children that explicitly encode an order we do the following:\n+            // We create a sub-block and set rank=same, rankDir=LR in order to have all children be rendered\n+            // on the same level but left to right -- this is especially important for showing join-orders\n+            // left-to-right.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8dda000ec7f1b50387df2a611fc45197e33504c"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4ODc4OQ==", "bodyText": "If we keep this general block of code, I think this is more in line with our style guide:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            for (; index < orderedChildrenEdges.size(); index ++) {\n          \n          \n            \n                                final E currentEdge = orderedChildrenEdges.get(index);\n          \n          \n            \n                                if (!dependsOn.contains(currentEdge)) {\n          \n          \n            \n                                    break;\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                            while (index < orderedChildrenEdges.size()) {\n          \n          \n            \n                                final E currentEdge = orderedChildrenEdges.get(index);\n          \n          \n            \n                                if (!dependsOn.contains(currentEdge)) {\n          \n          \n            \n                                    break;\n          \n          \n            \n                                }\n          \n          \n            \n                                index++;\n          \n          \n            \n                            }", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423288789", "createdAt": "2020-05-11T20:08:02Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/DotExporter.java", "diffHunk": "@@ -138,22 +140,93 @@ protected void renderGraphAttributes(final PrintWriter out, final Map<String, St\n     }\n \n     @Override\n-    protected void renderNode(final PrintWriter out, final N node, final Map<String, String> attributes) {\n-        out.print(INDENT);\n-        out.print(getVertexID(node));\n+    protected void renderNodes(final ExporterContext context) {\n+        final ImmutableNetwork<N, E> network = context.getNetwork();\n+        final PrintWriter out = context.getPrintWriter();\n+\n+        super.renderNodes(context);\n \n-        renderAttributes(out, attributes);\n+        // Go through the vertex set a second time to render dependsOn information\n+        // vertex set\n+        for (final N n : network.nodes()) {\n+            // If the current node had children that explicitly encode an order we do the following:\n+            // We create a sub-block and set rank=same, rankDir=LR in order to have all children be rendered\n+            // on the same level but left to right -- this is especially important for showing join-orders\n+            // left-to-right.\n+\n+            final Set<E> childrenEdges = network.inEdges(n);\n+\n+            // We sort the childrenEdges topologically insertion sort-style O(N^2).\n+            final List<E> orderedChildrenEdges = new ArrayList<>(childrenEdges.size());\n+\n+            boolean needsInvisibleEdges = false;\n+            for (final E toBeInsertedEdge : childrenEdges) {\n+                final Set<? extends PlannerGraph.AbstractEdge> dependsOn = toBeInsertedEdge.getDependsOn();\n+\n+                if (!dependsOn.isEmpty()) {\n+                    needsInvisibleEdges = true;\n+                }\n+\n+                int index = 0;\n+                for (; index < orderedChildrenEdges.size(); index ++) {\n+                    final E currentEdge = orderedChildrenEdges.get(index);\n+                    if (!dependsOn.contains(currentEdge)) {\n+                        break;\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8dda000ec7f1b50387df2a611fc45197e33504c"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTE4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Specific builder for explain planner graoh building.\n          \n          \n            \n                 * Specific builder for explain planner graph building.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423291189", "createdAt": "2020-05-11T20:12:40Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/ExplainPlannerGraph.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * ExplainPlannerGraph.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.escape.Escaper;\n+import com.google.common.graph.Network;\n+import com.google.common.html.HtmlEscapers;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Lightweight class to save some boilerplate.\n+ */\n+@SuppressWarnings(\"UnstableApiUsage\")\n+public class ExplainPlannerGraph extends PlannerGraph<ExplainPlannerGraph.Node, ExplainPlannerGraph.Edge> {\n+    /**\n+     * Specific builder for explain planner graoh building.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8dda000ec7f1b50387df2a611fc45197e33504c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MjE5Nw==", "bodyText": "Likewise, I think that this needs some more explanation.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423292197", "createdAt": "2020-05-11T20:14:39Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/ExplainPlannerGraphRewritable.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * InternalPlannerGraphRewritable.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+/**\n+ * Interface to allow {@link PlannerExpression}s to rewrite their own\n+ * explain graph representation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8dda000ec7f1b50387df2a611fc45197e33504c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5Mjc2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        i ++;\n          \n          \n            \n                        i++;", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423292768", "createdAt": "2020-05-11T20:15:41Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/GraphExporter.java", "diffHunk": "@@ -177,67 +208,120 @@ protected String getVertexID(final N node) {\n     /**\n      * Render the header. To be implemented by subclass.\n      *\n-     * @param out the writer\n+     * @param context the context\n      * @param graph the graph\n      */\n-    protected abstract void renderHeader(PrintWriter out, ImmutableNetwork<N, E> graph);\n+    protected abstract void renderHeader(ExporterContext context, ImmutableNetwork<N, E> graph);\n \n     /**\n      * Render the global graph attributes. To be implemented by subclass.\n      *\n-     * @param out the writer\n+     * @param context the context\n      * @param attributes the attributes of the graph\n      */\n-    protected abstract void renderGraphAttributes(PrintWriter out,\n-                                                  Map<String, String> attributes);\n+    protected abstract void renderGraphAttributes(ExporterContext context,\n+                                                  Map<String, Object> attributes);\n+\n+    /**\n+     * Render all nodes in the given network.\n+     *\n+     * @param context the context\n+     */\n+    protected void renderNodes(final ExporterContext context) {\n+        final ImmutableNetwork<N, E> network = context.getNetwork();\n+\n+        // vertex set\n+        for (final N n : network.nodes()) {\n+            renderNode(context,\n+                    n,\n+                    vertexAttributeProvider.apply(n));\n+        }\n+    }\n \n     /**\n      * Render a node. To be implemented by subclass.\n      *\n-     * @param out the writer\n+     * @param context the context\n      * @param node the node to be rendered\n      * @param attributes the attributes of the node\n      */\n-    protected abstract void renderNode(PrintWriter out,\n+    protected abstract void renderNode(ExporterContext context,\n                                        N node,\n-                                       Map<String, String> attributes);\n+                                       Map<String, Object> attributes);\n+\n+    /**\n+     * Render all edges in a given network.\n+     * @param context the context to use\n+     */\n+    protected void renderEdges(final ExporterContext context) {\n+        final ImmutableNetwork<N, E> network = context.getNetwork();\n+\n+        // edge set\n+        for (final E e : network.edges()) {\n+            final EndpointPair<N> endpointPair = network.incidentNodes(e);\n+            final N u = endpointPair.nodeU();\n+            final N v = endpointPair.nodeV();\n+            renderEdge(context,\n+                    network.isDirected(),\n+                    u,\n+                    v,\n+                    edgeAttributeProvider.apply(e));\n+        }\n+    }\n \n     /**\n      * Render an edge. To be implemented by subclass.\n      *\n-     * @param out the writer\n+     * @param context the context\n      * @param isDirected true iff edge is directed\n-     * @param edge the edge to be rendered\n      * @param source the source node of the edge\n      * @param target the target node of the edge\n      * @param attributes the attributes of the edge\n      */\n-    protected abstract void renderEdge(PrintWriter out,\n+    protected abstract void renderEdge(ExporterContext context,\n                                        boolean isDirected,\n-                                       E edge,\n                                        N source,\n                                        N target,\n-                                       Map<String, String> attributes);\n+                                       Map<String, Object> attributes);\n+    \n+    /**\n+     * Render all sub clusters in a given network.\n+     * @param context the context to use\n+     */\n+    protected void renderClusters(final ExporterContext context) {\n+        final ImmutableNetwork<N, E> network = context.getNetwork();\n+        // render clusters\n+        final Map<N, Set<N>> clusterMap = clusterProvider.apply(network);\n+        int i = 1;\n+        for (final Entry<N, Set<N>> cluster : clusterMap.entrySet()) {\n+            renderCluster(context,\n+                    String.valueOf(i),\n+                    cluster.getKey(),\n+                    cluster.getValue(),\n+                    clusterAttributeProvider.apply(cluster.getKey()));\n+            i ++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8dda000ec7f1b50387df2a611fc45197e33504c"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5NDc3NQ==", "bodyText": "I think that this needs a detailed Javadoc explaining what it does (and especially what childGraphs is). In particular, this is important because the interface shows up in so many RecordQueryPlan implementations.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423294775", "createdAt": "2020-05-11T20:19:25Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/InternalPlannerGraphRewritable.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * InternalPlannerGraphRewritable.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+/**\n+ * Interface to allow {@link PlannerExpression}s to rewrite their own\n+ * internal graph representation.\n+ */\n+public interface InternalPlannerGraphRewritable {\n+    @Nonnull\n+    InternalPlannerGraph rewriteInternalPlannerGraph(@Nonnull List<InternalPlannerGraph> childGraphs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8dda000ec7f1b50387df2a611fc45197e33504c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5NTkzNA==", "bodyText": "I think that these implementations are quite hard to read without a lot of derails about how the InternalPlannerGraph-related classes work. For each of them, perhaps a brief Javadoc can summarize the \"intent\" (e.g., \"Display an IN-join plan in the style of nested loop join...\")?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423295934", "createdAt": "2020-05-11T20:21:36Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryInParameterJoinPlan.java", "diffHunk": "@@ -105,4 +111,37 @@ public void logPlanStructure(StoreTimer timer) {\n         timer.increment(FDBStoreTimer.Counts.PLAN_IN_PARAMETER);\n         getInner().logPlanStructure(timer);\n     }\n+\n+    @Nonnull\n+    @Override\n+    public InternalPlannerGraph rewriteInternalPlannerGraph(@Nonnull List<InternalPlannerGraph> childGraphs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8dda000ec7f1b50387df2a611fc45197e33504c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5NjU5MQ==", "bodyText": "The amount of code duplication between rewriteInternalPlannerGraph() and rewriteExplainPlannerGraph() is quite unfortunate. I assume it's tricky to make this better because of the type system? Unless we can think of a fundamental reason to change it, we should open an issue about cleaning this up (but I won't block the merge on resolving this).\nThis close relationship seems to hold for (almost?) all of the implementations of these methods, which does suggest that something is awry with our abstractions.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423296591", "createdAt": "2020-05-11T20:22:55Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryInParameterJoinPlan.java", "diffHunk": "@@ -105,4 +111,37 @@ public void logPlanStructure(StoreTimer timer) {\n         timer.increment(FDBStoreTimer.Counts.PLAN_IN_PARAMETER);\n         getInner().logPlanStructure(timer);\n     }\n+\n+    @Nonnull\n+    @Override\n+    public InternalPlannerGraph rewriteInternalPlannerGraph(@Nonnull List<InternalPlannerGraph> childGraphs) {\n+        final InternalPlannerGraph.Node root =\n+                new InternalPlannerGraph.Node(this,\n+                        getClass().getSimpleName());\n+        final InternalPlannerGraph graphForInner = Iterables.getOnlyElement(childGraphs);\n+        final InternalPlannerGraph.SourceNode explodeNode = new InternalPlannerGraph.SourceNode(\"Explode\", externalBinding);\n+        final InternalPlannerGraph.Edge fromExplodeEdge = new InternalPlannerGraph.Edge();\n+        return InternalPlannerGraph.builder(root)\n+                .addGraph(graphForInner)\n+                .addNode(explodeNode)\n+                .addEdge(explodeNode, root, fromExplodeEdge)\n+                .addEdge(graphForInner.getRoot(), root, new InternalPlannerGraph.Edge(ImmutableSet.of(fromExplodeEdge)))\n+                .build();\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public ExplainPlannerGraph rewriteExplainPlannerGraph(@Nonnull List<ExplainPlannerGraph> childGraphs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8dda000ec7f1b50387df2a611fc45197e33504c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5Nzg4Mg==", "bodyText": "The rewrites with fancy string interpolation stuff are the ones that make me saddest about the code duplication.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423297882", "createdAt": "2020-05-11T20:25:18Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryTypeFilterPlan.java", "diffHunk": "@@ -165,4 +171,35 @@ public void logPlanStructure(StoreTimer timer) {\n     public int getComplexity() {\n         return 1 + getInner().getComplexity();\n     }\n+\n+    @Nonnull\n+    @Override\n+    public InternalPlannerGraph rewriteInternalPlannerGraph(@Nonnull List<InternalPlannerGraph> childGraphs) {\n+        final InternalPlannerGraph.Node root =\n+                new InternalPlannerGraph.Node(this,\n+                        getClass().getSimpleName(),\n+                        \"[\" + String.join(\" v \", recordTypes) + \"]\");\n+        final InternalPlannerGraph graphForInner =\n+                Iterables.getOnlyElement(childGraphs);\n+        return InternalPlannerGraph.builder(root)\n+                .addGraph(graphForInner)\n+                .addEdge(graphForInner.getRoot(), root, new InternalPlannerGraph.GroupExpressionRefEdge())\n+                .build();\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public ExplainPlannerGraph rewriteExplainPlannerGraph(@Nonnull List<ExplainPlannerGraph> childGraphs) {\n+        final ExplainPlannerGraph.Node root =\n+                new ExplainPlannerGraph.Node(this,\n+                        getClass().getSimpleName(),\n+                        \"[\" + String.join(\" v \", recordTypes) + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8dda000ec7f1b50387df2a611fc45197e33504c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5ODIyMw==", "bodyText": "I think that \"invisible edges\" are the ones that we add to enforce the ordering convention (e.g., for join order), but I think this is complicated enough that we'll struggle to maintain it without a comment here.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423298223", "createdAt": "2020-05-11T20:25:58Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/DotExporter.java", "diffHunk": "@@ -138,22 +140,93 @@ protected void renderGraphAttributes(final PrintWriter out, final Map<String, St\n     }\n \n     @Override\n-    protected void renderNode(final PrintWriter out, final N node, final Map<String, String> attributes) {\n-        out.print(INDENT);\n-        out.print(getVertexID(node));\n+    protected void renderNodes(final ExporterContext context) {\n+        final ImmutableNetwork<N, E> network = context.getNetwork();\n+        final PrintWriter out = context.getPrintWriter();\n+\n+        super.renderNodes(context);\n \n-        renderAttributes(out, attributes);\n+        // Go through the vertex set a second time to render dependsOn information\n+        // vertex set\n+        for (final N n : network.nodes()) {\n+            // If the current node had children that explicitly encode an order we do the following:\n+            // We create a sub-block and set rank=same, rankDir=LR in order to have all children be rendered\n+            // on the same level but left to right -- this is especially important for showing join-orders\n+            // left-to-right.\n+\n+            final Set<E> childrenEdges = network.inEdges(n);\n+\n+            // We sort the childrenEdges topologically insertion sort-style O(N^2).\n+            final List<E> orderedChildrenEdges = new ArrayList<>(childrenEdges.size());\n+\n+            boolean needsInvisibleEdges = false;\n+            for (final E toBeInsertedEdge : childrenEdges) {\n+                final Set<? extends PlannerGraph.AbstractEdge> dependsOn = toBeInsertedEdge.getDependsOn();\n+\n+                if (!dependsOn.isEmpty()) {\n+                    needsInvisibleEdges = true;\n+                }\n+\n+                int index = 0;\n+                for (; index < orderedChildrenEdges.size(); index ++) {\n+                    final E currentEdge = orderedChildrenEdges.get(index);\n+                    if (!dependsOn.contains(currentEdge)) {\n+                        break;\n+                    }\n+                }\n+                orderedChildrenEdges.add(index, toBeInsertedEdge);\n+            }\n \n+            if (needsInvisibleEdges) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8dda000ec7f1b50387df2a611fc45197e33504c"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NTA4ODIz", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#pullrequestreview-409508823", "createdAt": "2020-05-11T20:33:30Z", "commit": {"oid": "e8dda000ec7f1b50387df2a611fc45197e33504c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDozMzozMFrOGTsUww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDozMzozMFrOGTsUww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMjMzOQ==", "bodyText": "Probably worth including this explanation from the PR description:\n\ndot exports use dependsOn() by adding an invisible edge (not to the graph; just to the dot export) between children of a node. It also adds the visual constraint to layout children from left to right", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423302339", "createdAt": "2020-05-11T20:33:30Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/DotExporter.java", "diffHunk": "@@ -138,22 +140,93 @@ protected void renderGraphAttributes(final PrintWriter out, final Map<String, St\n     }\n \n     @Override\n-    protected void renderNode(final PrintWriter out, final N node, final Map<String, String> attributes) {\n-        out.print(INDENT);\n-        out.print(getVertexID(node));\n+    protected void renderNodes(final ExporterContext context) {\n+        final ImmutableNetwork<N, E> network = context.getNetwork();\n+        final PrintWriter out = context.getPrintWriter();\n+\n+        super.renderNodes(context);\n \n-        renderAttributes(out, attributes);\n+        // Go through the vertex set a second time to render dependsOn information\n+        // vertex set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8dda000ec7f1b50387df2a611fc45197e33504c"}, "originalPosition": 85}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8dda000ec7f1b50387df2a611fc45197e33504c", "author": {"user": {"login": "normen662", "name": null}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/e8dda000ec7f1b50387df2a611fc45197e33504c", "committedDate": "2020-05-05T04:49:33Z", "message": "Resolves #928: support edge ordering in planner graphs"}, "afterCommit": {"oid": "0da92a01028a896d068cff0b12d802a13b1c4f6a", "author": {"user": {"login": "normen662", "name": null}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/0da92a01028a896d068cff0b12d802a13b1c4f6a", "committedDate": "2020-05-12T16:38:55Z", "message": "Resolves #928: support edge ordering in planner graphs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMjk2NTY2", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#pullrequestreview-410296566", "createdAt": "2020-05-12T18:07:26Z", "commit": {"oid": "0da92a01028a896d068cff0b12d802a13b1c4f6a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODowNzoyNlrOGUS0WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODoyMDoxN1rOGUTSmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzMzAxNg==", "bodyText": "Adjusting to match Javadoc conventions:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param renderSingleGroups -- instruct the explain graph to not render group references with just one member\n          \n          \n            \n                 * @param renderSingleGroups whether to render group references with just one member", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423933016", "createdAt": "2020-05-12T18:07:26Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "diffHunk": "@@ -113,24 +113,12 @@\n      * This is needed for graph integration into IntelliJ as IntelliJ only ever evaluates selfish methods. Add this\n      * method as a custom renderer for the type {@link PlannerExpression}. During debugging you can then for instance\n      * click show() on an instance and enjoy the query graph it represents rendered in your standard browser.\n-     *\n+     * @param renderSingleGroups -- instruct the explain graph to not render group references with just one member", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da92a01028a896d068cff0b12d802a13b1c4f6a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNDg2NQ==", "bodyText": "While we're adding comments, let's say something about what an Attribute is. Perhaps along the lines of:\nA tag object that annotates a {@link AbstractPlannerGraph.AbstractNode} or an {@link \n\nAbstractPlannerGraph.AbstractEdge}, providing additional information to a {@link GraphExporter}.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423934865", "createdAt": "2020-05-12T18:10:39Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/explain/Attribute.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Attribute.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp.explain;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+/**\n+ * Basic class for all attributes of {@link AbstractPlannerGraph.AbstractNode}\n+ * as well as {@link AbstractPlannerGraph.AbstractEdge}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da92a01028a896d068cff0b12d802a13b1c4f6a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNTg3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns if this method is semantic of it contains visual cues of other non-semantic information.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @return indicator if attribute is semantic.\n          \n          \n            \n                 * Return whether this method is semantic or if it contains visual cues of other non-semantic information.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @return {@code true} if the attribute is semantic, {@code false} otherwise.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423935871", "createdAt": "2020-05-12T18:12:23Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/explain/Attribute.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Attribute.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp.explain;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+/**\n+ * Basic class for all attributes of {@link AbstractPlannerGraph.AbstractNode}\n+ * as well as {@link AbstractPlannerGraph.AbstractEdge}.\n+ */\n+public abstract class Attribute {\n+    @Nonnull\n+    private final Object reference;\n+\n+    protected Attribute(final Object reference) {\n+        this.reference = reference;\n+    }\n+\n+    /**\n+     * Returns if this method is semantic of it contains visual cues of other non-semantic information.\n+     *\n+     * @return indicator if attribute is semantic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da92a01028a896d068cff0b12d802a13b1c4f6a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNjIxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This method returns the underlying object this attribute refers to.\n          \n          \n            \n                 * Return the underlying object this attribute refers to.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423936219", "createdAt": "2020-05-12T18:12:57Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/explain/Attribute.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Attribute.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp.explain;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+/**\n+ * Basic class for all attributes of {@link AbstractPlannerGraph.AbstractNode}\n+ * as well as {@link AbstractPlannerGraph.AbstractEdge}.\n+ */\n+public abstract class Attribute {\n+    @Nonnull\n+    private final Object reference;\n+\n+    protected Attribute(final Object reference) {\n+        this.reference = reference;\n+    }\n+\n+    /**\n+     * Returns if this method is semantic of it contains visual cues of other non-semantic information.\n+     *\n+     * @return indicator if attribute is semantic.\n+     */\n+    public abstract boolean isSemanticAttribute();\n+\n+    /**\n+     * This method returns the underlying object this attribute refers to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da92a01028a896d068cff0b12d802a13b1c4f6a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNzQ0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * we compute the {@link PlannerGraphProperty} for explain purposes.\n          \n          \n            \n             * we compute the {@link PlannerGraphProperty} when explaining a plan to an end-user.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423937442", "createdAt": "2020-05-12T18:15:00Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/explain/ExplainPlannerGraphRewritable.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * ExplainPlannerGraphRewritable.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp.explain;\n+\n+import com.apple.foundationdb.record.query.plan.temp.PlannerExpression;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+/**\n+ * Interface to allow {@link PlannerExpression}s to rewrite their own\n+ * explain graph representation.\n+ *\n+ * This particular class allows {@link PlannerExpression}s to specify how a {@link PlannerGraph} is modified when\n+ * we compute the {@link PlannerGraphProperty} for explain purposes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da92a01028a896d068cff0b12d802a13b1c4f6a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzOTIwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Interface to allow {@link PlannerExpression}s to rewrite their own\n          \n          \n            \n             * internal graph representation. Please see {@link PlannerGraphRewritable} for a more comprehensive explanation.\n          \n          \n            \n             *\n          \n          \n            \n             * This particular class allows {@link PlannerExpression}s to specify how a {@link PlannerGraph} is modified when\n          \n          \n            \n             * we compute the {@link PlannerGraphProperty} for internal show.\n          \n          \n            \n             * Interface to allow {@link PlannerExpression}s to rewrite their own internal graph representation.\n          \n          \n            \n             *\n          \n          \n            \n             * This particular class allows {@link PlannerExpression}s to specify how a {@link PlannerGraph} is modified when\n          \n          \n            \n             * we compute the {@link PlannerGraphProperty} for developers working on the query planner.\n          \n          \n            \n             * @see PlannerGraphRewritable for a more comprehensive explanation of graph rewriting", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423939204", "createdAt": "2020-05-12T18:17:43Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/explain/InternalPlannerGraphRewritable.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * InternalPlannerGraphRewritable.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp.explain;\n+\n+import com.apple.foundationdb.record.query.plan.temp.PlannerExpression;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+/**\n+ * Interface to allow {@link PlannerExpression}s to rewrite their own\n+ * internal graph representation. Please see {@link PlannerGraphRewritable} for a more comprehensive explanation.\n+ *\n+ * This particular class allows {@link PlannerExpression}s to specify how a {@link PlannerGraph} is modified when\n+ * we compute the {@link PlannerGraphProperty} for internal show.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da92a01028a896d068cff0b12d802a13b1c4f6a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzOTcyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * highly operator-specific, therefore, the rewrite is no part of the visitor or some other common logic.\n          \n          \n            \n             * highly operator-specific, therefore, the rewrite is not part of the visitor or some other common logic.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423939724", "createdAt": "2020-05-12T18:18:33Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/explain/PlannerGraphRewritable.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * PlannerGraphRewritable.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp.explain;\n+\n+import com.apple.foundationdb.record.query.plan.temp.PlannerExpression;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+/**\n+ * Interface to allow {@link PlannerExpression}s to rewrite their own\n+ * graph representation.\n+ *\n+ * This interface allows a {@link PlannerExpression} to create/modify low level planner graph structures while\n+ * a planner graph is created through an expression walk in {@link PlannerGraphProperty}. Such a rewrite can be useful\n+ * if the standard representation is confusing, misleading or just too complicated. For instance,\n+ * {@link com.apple.foundationdb.record.query.plan.plans.RecordQueryPlanWithIndex} additionally creates a separate\n+ * node underneath the actual plan operator to show the index as a record producer. The nature of the rewrite is\n+ * highly operator-specific, therefore, the rewrite is no part of the visitor or some other common logic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da92a01028a896d068cff0b12d802a13b1c4f6a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzOTgzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * if the standard representation is confusing, misleading or just too complicated. For instance,\n          \n          \n            \n             * if the standard representation is confusing, misleading, or just too complicated. For instance,", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423939832", "createdAt": "2020-05-12T18:18:45Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/explain/PlannerGraphRewritable.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * PlannerGraphRewritable.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp.explain;\n+\n+import com.apple.foundationdb.record.query.plan.temp.PlannerExpression;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+/**\n+ * Interface to allow {@link PlannerExpression}s to rewrite their own\n+ * graph representation.\n+ *\n+ * This interface allows a {@link PlannerExpression} to create/modify low level planner graph structures while\n+ * a planner graph is created through an expression walk in {@link PlannerGraphProperty}. Such a rewrite can be useful\n+ * if the standard representation is confusing, misleading or just too complicated. For instance,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da92a01028a896d068cff0b12d802a13b1c4f6a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0MDAwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Implementors of this interface will be asked to rewrite the planner graph for both internal show as well as\n          \n          \n            \n             * Implementors of this interface should rewrite the planner graph for both internal show as well as", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423940000", "createdAt": "2020-05-12T18:19:03Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/explain/PlannerGraphRewritable.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * PlannerGraphRewritable.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp.explain;\n+\n+import com.apple.foundationdb.record.query.plan.temp.PlannerExpression;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+/**\n+ * Interface to allow {@link PlannerExpression}s to rewrite their own\n+ * graph representation.\n+ *\n+ * This interface allows a {@link PlannerExpression} to create/modify low level planner graph structures while\n+ * a planner graph is created through an expression walk in {@link PlannerGraphProperty}. Such a rewrite can be useful\n+ * if the standard representation is confusing, misleading or just too complicated. For instance,\n+ * {@link com.apple.foundationdb.record.query.plan.plans.RecordQueryPlanWithIndex} additionally creates a separate\n+ * node underneath the actual plan operator to show the index as a record producer. The nature of the rewrite is\n+ * highly operator-specific, therefore, the rewrite is no part of the visitor or some other common logic.\n+ * Expressions that decide to implement this interface must then implement {@link #rewritePlannerGraph} to do the\n+ * actual rewrite.\n+ *\n+ * Implementors of this interface will be asked to rewrite the planner graph for both internal show as well as", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da92a01028a896d068cff0b12d802a13b1c4f6a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0MDc2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This package implements visual explain.\n          \n          \n            \n             * This package implements a visualization of a {@link RelationalExpression} as a graph for both internal debugging purposes and for consumption by end-users.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r423940761", "createdAt": "2020-05-12T18:20:17Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/explain/package-info.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * package-info.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * This package implements visual explain.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da92a01028a896d068cff0b12d802a13b1c4f6a"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f10491b8db2d2f25c4013875c50e820cb184102", "author": {"user": {"login": "normen662", "name": null}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/0f10491b8db2d2f25c4013875c50e820cb184102", "committedDate": "2020-05-12T22:12:50Z", "message": "Resolves #928: support edge ordering in planner graphs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0da92a01028a896d068cff0b12d802a13b1c4f6a", "author": {"user": {"login": "normen662", "name": null}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/0da92a01028a896d068cff0b12d802a13b1c4f6a", "committedDate": "2020-05-12T16:38:55Z", "message": "Resolves #928: support edge ordering in planner graphs"}, "afterCommit": {"oid": "0f10491b8db2d2f25c4013875c50e820cb184102", "author": {"user": {"login": "normen662", "name": null}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/0f10491b8db2d2f25c4013875c50e820cb184102", "committedDate": "2020-05-12T22:12:50Z", "message": "Resolves #928: support edge ordering in planner graphs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDYyMzE2", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#pullrequestreview-410462316", "createdAt": "2020-05-12T22:17:25Z", "commit": {"oid": "0f10491b8db2d2f25c4013875c50e820cb184102"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoxNzoyNlrOGUa7dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoxNzoyNlrOGUa7dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NTkwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * **Feature** support edge ordering in planner graphs [(Issue #928)](https://github.com/FoundationDB/fdb-record-layer/issues/928)\n          \n          \n            \n            * **Feature** Support edge ordering in planner graphs [(Issue #928)](https://github.com/FoundationDB/fdb-record-layer/issues/928)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#discussion_r424065908", "createdAt": "2020-05-12T22:17:26Z", "author": {"login": "nschiefer"}, "path": "docs/ReleaseNotes.md", "diffHunk": "@@ -52,7 +52,7 @@ The `FDBDatabase::getReadVersion()` method has been replaced with the `FDBRecord\n * **Performance** Improvement 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Performance** Improvement 4 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Performance** Improvement 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n-* **Feature** Feature 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n+* **Feature** support edge ordering in planner graphs [(Issue #928)](https://github.com/FoundationDB/fdb-record-layer/issues/928)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f10491b8db2d2f25c4013875c50e820cb184102"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "815983b613db74b40322cbea3cca73779f607c43", "author": {"user": {"login": "nschiefer", "name": "Nicholas Schiefer"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/815983b613db74b40322cbea3cca73779f607c43", "committedDate": "2020-05-12T22:18:42Z", "message": "Fix a few typos."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDcyMzQ0", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/929#pullrequestreview-411072344", "createdAt": "2020-05-13T15:59:04Z", "commit": {"oid": "815983b613db74b40322cbea3cca73779f607c43"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2590, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}