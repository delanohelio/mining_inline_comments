{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNjI5OTc3", "number": 1040, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTowMzowMFrOEsq4CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoyNDoxOFrOEsz4TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mjc1MjczOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBReturnedRecordLimitQueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTowMzowMFrOHgCexQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTowMzowMFrOHgCexQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM1NzEyNQ==", "bodyText": "Had to remove the dual planner annotation as the temp planner cannot plan this anymore.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#discussion_r503357125", "createdAt": "2020-10-12T15:03:00Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBReturnedRecordLimitQueryTest.java", "diffHunk": "@@ -65,7 +67,7 @@\n      * Verify that a returned record limit works properly against a query with a filter on one field and a sort on another,\n      * when the filter field is un-indexed and the sort is in reverse order.\n      */\n-    @DualPlannerTest\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mjc1NzI4OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBReturnedRecordLimitQueryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTowNDoxMFrOHgCheg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoxMDozNlrOHgQAcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM1NzgxOA==", "bodyText": "While the plan is better it seems that we discard more records. I am assuming that is because of prefetching but it would be nice to understand exactly why that is. (this is in conjunction with a limit on the query)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#discussion_r503357818", "createdAt": "2020-10-12T15:04:10Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBReturnedRecordLimitQueryTest.java", "diffHunk": "@@ -88,13 +90,13 @@ public void testComplexLimits2() throws Exception {\n                     FDBQueriedRecord<Message> rec = cursor.next();\n                     TestRecords1Proto.MySimpleRecord.Builder myrec = TestRecords1Proto.MySimpleRecord.newBuilder();\n                     myrec.mergeFrom(rec.getRecord());\n-                    assertEquals(\"odd\", myrec.getStrValueIndexed());\n                     assertEquals(0, myrec.getNumValue2());\n+                    assertEquals(\"odd\", myrec.getStrValueIndexed());\n                     i += 1;\n                 }\n             }\n             assertEquals(10, i);\n-            assertDiscardedAtMost(18, context);\n+            assertDiscardedAtMost(34, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3ODczNg==", "bodyText": "Prefetching is not particularly relevant.\nWith the new plan, the entire index scan must be reversed to accomplish reverse sorting by the first field, which means that we do the odd-2's, then the odd-1's, then odd-0's. So we have to skip over those first two before getting to any matches and then we get 10 in a row. With the old single-field index plan, we go in reverse primary key order and every third matches, so we get the 10 we need faster.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#discussion_r503578736", "createdAt": "2020-10-12T23:10:36Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBReturnedRecordLimitQueryTest.java", "diffHunk": "@@ -88,13 +90,13 @@ public void testComplexLimits2() throws Exception {\n                     FDBQueriedRecord<Message> rec = cursor.next();\n                     TestRecords1Proto.MySimpleRecord.Builder myrec = TestRecords1Proto.MySimpleRecord.newBuilder();\n                     myrec.mergeFrom(rec.getRecord());\n-                    assertEquals(\"odd\", myrec.getStrValueIndexed());\n                     assertEquals(0, myrec.getNumValue2());\n+                    assertEquals(\"odd\", myrec.getStrValueIndexed());\n                     i += 1;\n                 }\n             }\n             assertEquals(10, i);\n-            assertDiscardedAtMost(18, context);\n+            assertDiscardedAtMost(34, context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM1NzgxOA=="}, "originalCommit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mjc2MjMyOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBRepeatedFieldQueryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTowNToyNVrOHgCkbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoxMzoxM1rOHgQDJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM1ODU3Mw==", "bodyText": "The chosen plan uses a different index that uses a second field (name) to impose a secondary order which is not specified in the test case.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#discussion_r503358573", "createdAt": "2020-10-12T15:05:25Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBRepeatedFieldQueryTest.java", "diffHunk": "@@ -336,17 +338,17 @@ public void sortRepeated() throws Exception {\n                     .setFilter(Query.field(\"name\").greaterThan(\"A\"));\n             RecordQuery query = builder.setRemoveDuplicates(false).build();\n             RecordQueryPlan plan = planner.plan(query);\n-            assertThat(plan, filter(query.getFilter(), indexScan(allOf(indexName(\"customers\"), unbounded()))));\n-            assertEquals(1833106833, plan.planHash());\n-            assertEquals(Arrays.asList(1000L, 1001L, 1000L, 1001L, 1000L, 1000L, 1001L), fetchResultValues(plan, TestRecords4Proto.RestaurantRecord.REST_NO_FIELD_NUMBER,\n+            assertThat(plan, fetch(filter(query.getFilter(), coveringIndexScan(indexScan(allOf(indexName(\"customers-name\"), unbounded()))))));\n+            assertEquals(-505715770, plan.planHash());\n+            assertEquals(Arrays.asList(1000L, 1001L, 1000L, 1001L, 1000L, 1001L, 1000L), fetchResultValues(plan, TestRecords4Proto.RestaurantRecord.REST_NO_FIELD_NUMBER,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3OTQzMA==", "bodyText": "That is, the better (because we can check the filter using the index key) plan incidentally imposes an order by that key rather than by something like the primary key.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#discussion_r503579430", "createdAt": "2020-10-12T23:13:13Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBRepeatedFieldQueryTest.java", "diffHunk": "@@ -336,17 +338,17 @@ public void sortRepeated() throws Exception {\n                     .setFilter(Query.field(\"name\").greaterThan(\"A\"));\n             RecordQuery query = builder.setRemoveDuplicates(false).build();\n             RecordQueryPlan plan = planner.plan(query);\n-            assertThat(plan, filter(query.getFilter(), indexScan(allOf(indexName(\"customers\"), unbounded()))));\n-            assertEquals(1833106833, plan.planHash());\n-            assertEquals(Arrays.asList(1000L, 1001L, 1000L, 1001L, 1000L, 1000L, 1001L), fetchResultValues(plan, TestRecords4Proto.RestaurantRecord.REST_NO_FIELD_NUMBER,\n+            assertThat(plan, fetch(filter(query.getFilter(), coveringIndexScan(indexScan(allOf(indexName(\"customers-name\"), unbounded()))))));\n+            assertEquals(-505715770, plan.planHash());\n+            assertEquals(Arrays.asList(1000L, 1001L, 1000L, 1001L, 1000L, 1001L, 1000L), fetchResultValues(plan, TestRecords4Proto.RestaurantRecord.REST_NO_FIELD_NUMBER,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM1ODU3Mw=="}, "originalCommit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mjc4ODk0OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankIndexTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNToxMjoyNlrOHgC0-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOToyNDo1M1rOHhhwQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2MjgwOQ==", "bodyText": "This plan change is due to different costing. Previously SCAN() and INDEX_SCAN() where intrinsically considered equal and the PREFER_SCAN configuration parameter was the tie breaker. Now, the index is considered better as the filter on header/{id GREATER THAN 100} can be applied on the index key. Not sure if we want it like this.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#discussion_r503362809", "createdAt": "2020-10-12T15:12:26Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankIndexTest.java", "diffHunk": "@@ -1116,8 +1116,7 @@ public void headerRankAndIdQuery() throws Exception {\n                 .build();\n         planner.setIndexScanPreference(QueryPlanner.IndexScanPreference.PREFER_SCAN);\n         RecordQueryPlan plan = planner.plan(query);\n-        assertEquals(\"Scan(([buffaloes, 100],[buffaloes]]) | [HeaderRankedRecord]\" +\n-                        \" | score LESS_THAN $__rank_0 WHERE __rank_0 = score_by_nested_id.score_for_rank_else_skip(buffaloes, 2)\",\n+        assertEquals(\"Fetch(Covering(Index(score_by_nested_id ([buffaloes, null],[buffaloes, 2]) BY_RANK) -> [score: KEY[1], header: [group: KEY[0], id: KEY[2]]]) | header/{id GREATER_THAN 100})\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MDg5Mg==", "bodyText": "SCAN gives us something that is capable of evaluating the predicate with no further database traffic. More data is fetched in the scan itself. Whether this matters depends on the selectivity: if most pass, then we end up doing a fetch of the record anyway, using a less-efficient (even in parallel) single point fetch.\nI kind of expected that all filters to a SCAN would be index filters and not residuals. With that change, the same tie would result, restoring the status quo, right?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#discussion_r503580892", "createdAt": "2020-10-12T23:18:45Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankIndexTest.java", "diffHunk": "@@ -1116,8 +1116,7 @@ public void headerRankAndIdQuery() throws Exception {\n                 .build();\n         planner.setIndexScanPreference(QueryPlanner.IndexScanPreference.PREFER_SCAN);\n         RecordQueryPlan plan = planner.plan(query);\n-        assertEquals(\"Scan(([buffaloes, 100],[buffaloes]]) | [HeaderRankedRecord]\" +\n-                        \" | score LESS_THAN $__rank_0 WHERE __rank_0 = score_by_nested_id.score_for_rank_else_skip(buffaloes, 2)\",\n+        assertEquals(\"Fetch(Covering(Index(score_by_nested_id ([buffaloes, null],[buffaloes, 2]) BY_RANK) -> [score: KEY[1], header: [group: KEY[0], id: KEY[2]]]) | header/{id GREATER_THAN 100})\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2MjgwOQ=="}, "originalCommit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxODA4MQ==", "bodyText": "It does! I have added that functionality.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#discussion_r504918081", "createdAt": "2020-10-14T19:24:53Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankIndexTest.java", "diffHunk": "@@ -1116,8 +1116,7 @@ public void headerRankAndIdQuery() throws Exception {\n                 .build();\n         planner.setIndexScanPreference(QueryPlanner.IndexScanPreference.PREFER_SCAN);\n         RecordQueryPlan plan = planner.plan(query);\n-        assertEquals(\"Scan(([buffaloes, 100],[buffaloes]]) | [HeaderRankedRecord]\" +\n-                        \" | score LESS_THAN $__rank_0 WHERE __rank_0 = score_by_nested_id.score_for_rank_else_skip(buffaloes, 2)\",\n+        assertEquals(\"Fetch(Covering(Index(score_by_nested_id ([buffaloes, null],[buffaloes, 2]) BY_RANK) -> [score: KEY[1], header: [group: KEY[0], id: KEY[2]]]) | header/{id GREATER_THAN 100})\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2MjgwOQ=="}, "originalCommit": {"oid": "13542980a4616d1bb7123cfbc5d41be2d2e3c01c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDIyNzk2OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoyNDoxOFrOHgQOrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoyNDoxOFrOHgQOrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MjM4Mw==", "bodyText": "A RecordQueryScanPlan could treat all filters as index filters and not residuals, I think.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1040#discussion_r503582383", "createdAt": "2020-10-12T23:24:18Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java", "diffHunk": "@@ -517,9 +566,38 @@ private ScoredPlan planIndex(@Nonnull PlanContext planContext, @Nonnull QueryCom\n                 }\n             }\n         }\n+\n         return p;\n     }\n \n+    private ScoredPlan computeIndexFilters(@Nonnull PlanContext planContext, @Nonnull final ScoredPlan plan) {\n+        if (plan.plan instanceof RecordQueryPlanWithIndex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df62c83cdc433a108a3c01ccbb6763b23dc688d"}, "originalPosition": 136}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 52, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}