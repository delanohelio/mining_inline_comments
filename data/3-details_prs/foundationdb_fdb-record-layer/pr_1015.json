{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjA1NTUx", "number": 1015, "title": "Resolves #1019: Avoid repeating index endpoints conflicts", "bodyText": "While setting endpoints for indexer, repeating conflicts with other transaction could prevent the job from running.\nresolution: Since the store is marked WRITE_ONLY while determining endpoints and reading the records,\nis seems safe to ignore conflicts caused by insertion of new records - as the inseration should already\nimply valid index entries.", "createdAt": "2020-08-14T22:17:26Z", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015", "merged": true, "mergeCommit": {"oid": "b9812679a247ef0380d3a712418ee9c2d7d2fefb"}, "closed": true, "closedAt": "2020-08-24T15:55:22Z", "author": {"login": "jjezra"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-8VhgABqjM2NTc4NzI4MDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCEs8uAFqTQ3MzYzNDA1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "869cd1de30d95ff9a883c525174b6163d9590def", "author": {"user": {"login": "jjezra", "name": "Josef Ezra"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/869cd1de30d95ff9a883c525174b6163d9590def", "committedDate": "2020-08-14T21:57:27Z", "message": "rdar://66495537 (Avoid consistanly \"Transaction not committed due to conflict with another transaction\" when trying to build index endpoints of hot database)\n\n   resolution: Since the store is marked WRITE_ONLY while determining endpoints and reading the records,\n   is seems safe to ignore conflicts caused by insertion of new records - as the inseration should already\n   imply valid index entries."}, "afterCommit": {"oid": "d093083a32ac1a54872e9a542240a3824f038041", "author": {"user": {"login": "jjezra", "name": "Josef Ezra"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/d093083a32ac1a54872e9a542240a3824f038041", "committedDate": "2020-08-14T22:26:25Z", "message": "While setting endpoints for indexer, repeating conflicts with other transaction could prevent the job from running\n\n   resolution: Since the store is marked WRITE_ONLY while determining endpoints and reading the records,\n   is seems safe to ignore conflicts caused by insertion of new records - as the inseration should already\n   imply valid index entries."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTM0NDg5", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#pullrequestreview-467934489", "createdAt": "2020-08-15T01:04:17Z", "commit": {"oid": "d093083a32ac1a54872e9a542240a3824f038041"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMTowNDoxN1rOHBGliw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMTowNjowNVrOHBGmbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxODUzOQ==", "bodyText": "Hm, what is this line trying to accomplish?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r470918539", "createdAt": "2020-08-15T01:04:17Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerBuildSumIndexTest.java", "diffHunk": "@@ -103,6 +103,9 @@ public void run() {\n                 try (FDBRecordContext context = openContext()) {\n                     long sum = recordStore.evaluateAggregateFunction(Collections.singletonList(\"MySimpleRecord\"), aggregateFunction, TupleRange.ALL, IsolationLevel.SNAPSHOT).join().getLong(0);\n                     long expected = updatedRecords.stream().mapToInt(msg -> msg.hasNumValue2() ? msg.getNumValue2() : 0).sum();\n+                    for (int i = 0; sum != expected && i < 20; i ++) {\n+                        Thread.yield();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d093083a32ac1a54872e9a542240a3824f038041"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxODc2Nw==", "bodyText": "Hm, perhaps this is a sign with our tests if it's not catching a bug here, but I think this needs to validate that the index is idempotent before it sets the isolation level to SNAPSHOT. Otherwise, there's not a guarantee that the concurrently written record will be indexed.\nWe should probably have a comment here explaining why SNAPSHOT is used, and then another explaining why we need to add the read conflict range at the place we do.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r470918767", "createdAt": "2020-08-15T01:06:05Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -539,7 +539,7 @@ private void increaseLimit() {\n         }\n         final IndexMaintainer maintainer = store.getIndexMaintainer(index);\n         final ExecuteProperties.Builder executeProperties = ExecuteProperties.newBuilder()\n-                .setIsolationLevel(IsolationLevel.SERIALIZABLE);\n+                .setIsolationLevel(IsolationLevel.SNAPSHOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d093083a32ac1a54872e9a542240a3824f038041"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d093083a32ac1a54872e9a542240a3824f038041", "author": {"user": {"login": "jjezra", "name": "Josef Ezra"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/d093083a32ac1a54872e9a542240a3824f038041", "committedDate": "2020-08-14T22:26:25Z", "message": "While setting endpoints for indexer, repeating conflicts with other transaction could prevent the job from running\n\n   resolution: Since the store is marked WRITE_ONLY while determining endpoints and reading the records,\n   is seems safe to ignore conflicts caused by insertion of new records - as the inseration should already\n   imply valid index entries."}, "afterCommit": {"oid": "cc5a22bf9cfe0674a4aae5ab0835bb9a4d5681df", "author": {"user": {"login": "jjezra", "name": "Josef Ezra"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/cc5a22bf9cfe0674a4aae5ab0835bb9a4d5681df", "committedDate": "2020-08-17T14:03:27Z", "message": "While setting endpoints for indexer, repeating conflicts with other transaction could prevent the job from running\n\n   resolution (for idempotent indexes only): Since the store is marked WRITE_ONLY while determining endpoints and\n   reading the records,is seems safe to ignore conflicts caused by insertion of new records - as the inseration\n   should already imply valid index entries.\n   TODO: add tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjYyMDcx", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#pullrequestreview-469662071", "createdAt": "2020-08-18T17:14:05Z", "commit": {"oid": "cc5a22bf9cfe0674a4aae5ab0835bb9a4d5681df"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5830d534fefe8e6c98e448fccd037aac6bb899b", "author": {"user": {"login": "jjezra", "name": "Josef Ezra"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/b5830d534fefe8e6c98e448fccd037aac6bb899b", "committedDate": "2020-08-19T13:27:51Z", "message": "Resolves #1019: Avoid range conflicts while indexing (if possible)\n\n     Add utests."}, "afterCommit": {"oid": "f707d2d05801980019b89bc63fe5ce27c3d49a65", "author": {"user": {"login": "jjezra", "name": "Josef Ezra"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/f707d2d05801980019b89bc63fe5ce27c3d49a65", "committedDate": "2020-08-19T13:30:57Z", "message": "Resolves #1015: Avoid repeating index endpoints conflicts\n\n     Add utests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwOTA2NTgw", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#pullrequestreview-470906580", "createdAt": "2020-08-19T20:37:45Z", "commit": {"oid": "acdd84b077ab54cfa4c32895dca8602cbd99e734"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDozNzo0NVrOHDYL-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDozNzo0NVrOHDYL-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMwNDA1Nw==", "bodyText": "Hmm. IIUC from offline conversations, this was needed to make future commits down the line not fail with a conflict, but this call seems suspicious to me. It essentially marks the index as already built, so the index build won't do much of anything, so it seems more likely to me that this is either masking some other problem, or there is some issue or is a sign that there is some other kind of misconfiguration going on with these tests.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473304057", "createdAt": "2020-08-19T20:37:45Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * OnlineIndexerConflictsTest.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.record.IndexState;\n+import com.apple.foundationdb.record.TestRecords1Proto;\n+import com.apple.foundationdb.record.metadata.Index;\n+import com.apple.foundationdb.record.metadata.IndexTypes;\n+import com.apple.test.Tags;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import static com.apple.foundationdb.record.metadata.Key.Expressions.field;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests for {@link OnlineIndexer}. Checking different db manipulations the indexing process.\n+ */\n+\n+@Tag(Tags.RequiresFDB)\n+public class OnlineIndexerConflictsTest extends OnlineIndexerTest {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(OnlineIndexerConflictsTest.class);\n+\n+    @Test\n+    public void testOnlineIndexerIdempotent() throws Exception {\n+\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                                                 ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            assertTrue(recordStore.uncheckedMarkIndexReadable(index.getName()).join());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acdd84b077ab54cfa4c32895dca8602cbd99e734"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDUwMjg3", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#pullrequestreview-471050287", "createdAt": "2020-08-20T00:28:29Z", "commit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDoyODoyOVrOHDidSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo0NDoyNFrOHDjEpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3MjMzMQ==", "bodyText": "I don't think this comment applies to this test any more", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473472331", "createdAt": "2020-08-20T00:28:29Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NjE2OQ==", "bodyText": "I don't think this test needs quite as many records now. I think...three would suffice? The main tests have lots of records in order to make sure that during the random operations, we get lots of different combinations. That shouldn't be necessary with this test, though, as it's more about testing specific concurrent operations.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473476169", "createdAt": "2020-08-20T00:34:33Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NjY4MA==", "bodyText": "Hm, it's weird that you need to mark the index as write only.... It should be marking the index as write only when the record store is opened, I think, unless I'm misunderstanding how this all works.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473476680", "createdAt": "2020-08-20T00:35:18Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NzIwNw==", "bodyText": "I don't think doing this in a loop really adds much. Probably sufficient to just have the one insert. As written, this also builds the full index repeatedly within the loop, which probably isn't quite what we want.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473477207", "createdAt": "2020-08-20T00:36:11Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();\n+            context.commit();\n+        }\n+\n+        int[] inserts = {99, 101, 133, 201, 350, 299, 301};\n+        for (int i = 0; i < inserts.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3ODAzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.info(\"newIndex thread run\");\n          \n      \n    \n    \n  \n\nNow that it's not its own thread", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473478035", "createdAt": "2020-08-20T00:37:29Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();\n+            context.commit();\n+        }\n+\n+        int[] inserts = {99, 101, 133, 201, 350, 299, 301};\n+        for (int i = 0; i < inserts.length; i++) {\n+            int record_i = inserts[i];\n+\n+            final FDBStoreTimer timer = new FDBStoreTimer();\n+            LOGGER.info(\"newIndex thread run\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3ODQwOQ==", "bodyText": "But...a conflict shouldn't happen?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473478409", "createdAt": "2020-08-20T00:38:04Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3OTkyMg==", "bodyText": "This assert isn't hurting anything, I suppose, but it's also already covered by the two contexts committing successfully above. It may be worth adding a comment on context1.commit() about how a record is being added in the range added by the indexer, but the transaction still commits because it's value isn't needed by the indexer.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473479922", "createdAt": "2020-08-20T00:40:32Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {\n+        // If a conflict happens, this test should succeed by retries\n+        Random rand = new Random();\n+        final long seed = rand.nextInt();\n+        LOGGER.info(\"Random seed is \" + seed);\n+        rand = new Random(seed); // make rand repeatable (note that multi threading behaviour is not fully repeatable in this test)\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 400).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hook = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 50; i <= 150; i++) {\n+                // even numbers 100-300 (that's 101 values)\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+\n+        openSimpleMetaData(hook);\n+        try (FDBRecordContext context = openContext()) {\n+            recordStore.markIndexWriteOnly(index.getName()).join();\n+            context.commit();\n+        }\n+\n+        int[] inserts = {99, 101, 133, 201, 350, 299, 301};\n+        for (int i = 0; i < inserts.length; i++) {\n+            int record_i = inserts[i];\n+\n+            final FDBStoreTimer timer = new FDBStoreTimer();\n+            LOGGER.info(\"newIndex thread run\");\n+            try (FDBRecordContext context1 = openContext()) {\n+                try (OnlineIndexer indexer =\n+                             OnlineIndexer.newBuilder()\n+                                     .setRecordStore(recordStore)\n+                                     .setIndex(\"newIndex\")\n+                                     .setTimer(timer)\n+                                     .build()) {\n+                    indexer.buildRange(recordStore, null, null).join();\n+                    try (FDBRecordContext context2 = openContext()) {\n+                        recordStore.saveRecord(records.get(record_i));\n+                        context2.commit();\n+                    }\n+                    context1.commit();\n+                }\n+            }\n+\n+            assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4MjQwNA==", "bodyText": "Hm, maybe something more like testAddRecordToRangeWhileIndexedIdempotent? Or something with those words?\nI don't think we want \"nested\" in the title. We typically use that to refer to nested key expressions (i.e., indexes defined on elements of nested messages), and having it here might cause confusion.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r473482404", "createdAt": "2020-08-20T00:44:24Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -201,5 +201,60 @@ public void run() {\n         assertSame(recordStore.getIndexState(index.getName()), IndexState.READABLE);\n         assertEquals(0, timer.getCount(FDBStoreTimer.Events.COMMIT_FAILURE));\n     }\n+\n+    @Test\n+    public void testOnlineIndexerIdempotentNested() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57772c69d76d3d8951d9bf34b0854b580021d12f"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxODkwOTM1", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#pullrequestreview-471890935", "createdAt": "2020-08-20T18:48:59Z", "commit": {"oid": "5af7d8c00ecaff86f23af1ee1a6f16cb08862c19"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0ODo1OVrOHEO0Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0ODo1OVrOHEO0Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5OTA2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * **Feature** Avoid repeating index endpoints conflicts #1015 [(Issue #1015)](https://github.com/FoundationDB/fdb-record-layer/issues/1015)\n          \n          \n            \n            * **Feature** Avoid repeating index endpoints conflicts [(Issue #1015)](https://github.com/FoundationDB/fdb-record-layer/issues/1015)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474199062", "createdAt": "2020-08-20T18:48:59Z", "author": {"login": "alecgrieser"}, "path": "docs/ReleaseNotes.md", "diffHunk": "@@ -30,7 +30,7 @@ Additionally, builds for the project now require JDK 11. The project is still ta\n * **Performance** Improvement 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Performance** Improvement 4 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Performance** Improvement 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n-* **Feature** Feature 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n+* **Feature** Avoid repeating index endpoints conflicts #1015 [(Issue #1015)](https://github.com/FoundationDB/fdb-record-layer/issues/1015)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5af7d8c00ecaff86f23af1ee1a6f16cb08862c19"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMTQ3MDg2", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#pullrequestreview-472147086", "createdAt": "2020-08-21T05:07:15Z", "commit": {"oid": "779aef648d481dbf55b3b1135a6b263ffb0f3897"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNTowNzoxNVrOHEbwJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNToxODowMlrOHEb6Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxMTA0Nw==", "bodyText": "This is supposed to be Issue number not PR number. You could create an Issue from https://github.com/FoundationDB/fdb-record-layer/issues/new/choose", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474411047", "createdAt": "2020-08-21T05:07:15Z", "author": {"login": "nblintao"}, "path": "docs/ReleaseNotes.md", "diffHunk": "@@ -30,7 +30,7 @@ Additionally, builds for the project now require JDK 11. The project is still ta\n * **Performance** Improvement 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Performance** Improvement 4 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Performance** Improvement 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n-* **Feature** Feature 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n+* **Feature** Avoid repeating index endpoints conflicts [(Issue #1015)](https://github.com/FoundationDB/fdb-record-layer/issues/1015)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "779aef648d481dbf55b3b1135a6b263ffb0f3897"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxMjIxNw==", "bodyText": "It's a good place to illustrate on \"range conflict protection\": allow records being added to the range (so they may be or may not be seen by indexer) while scanning.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474412217", "createdAt": "2020-08-21T05:12:14Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1015,11 +1022,19 @@ public void rebuildIndex(@Nonnull FDBRecordStore store) {\n     @Nonnull\n     private CompletableFuture<TupleRange> buildEndpoints(@Nonnull FDBRecordStore store, @Nonnull RangeSet rangeSet,\n                                                          @Nullable AtomicLong recordsScanned) {\n+        boolean isIdempotent = store.getIndexMaintainer(index).isIdempotent();\n+        final IsolationLevel isolationLevel =\n+                isIdempotent ?\n+                // if idempotent: since double indexing is harmless, we can skip the range conflict protection. At worse,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "779aef648d481dbf55b3b1135a6b263ffb0f3897"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxMzY2Ng==", "bodyText": "Even though only one record is scanned, I think that record should be added to read conflict.\nI wouldn't worry about reproducing it from tests though.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474413666", "createdAt": "2020-08-21T05:18:02Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexer.java", "diffHunk": "@@ -1015,11 +1022,19 @@ public void rebuildIndex(@Nonnull FDBRecordStore store) {\n     @Nonnull\n     private CompletableFuture<TupleRange> buildEndpoints(@Nonnull FDBRecordStore store, @Nonnull RangeSet rangeSet,\n                                                          @Nullable AtomicLong recordsScanned) {\n+        boolean isIdempotent = store.getIndexMaintainer(index).isIdempotent();\n+        final IsolationLevel isolationLevel =\n+                isIdempotent ?\n+                // if idempotent: since double indexing is harmless, we can skip the range conflict protection. At worse,\n+                // some records will be re-indexed.\n+                IsolationLevel.SNAPSHOT :\n+                IsolationLevel.SERIALIZABLE;\n         final ExecuteProperties limit1 = ExecuteProperties.newBuilder()\n                 .setReturnedRowLimit(1)\n-                .setIsolationLevel(IsolationLevel.SERIALIZABLE)\n+                .setIsolationLevel(isolationLevel)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "779aef648d481dbf55b3b1135a6b263ffb0f3897"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d54d963231c6b06b25169fd81607f50d05b9d45", "author": {"user": {"login": "jjezra", "name": "Josef Ezra"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/1d54d963231c6b06b25169fd81607f50d05b9d45", "committedDate": "2020-08-21T14:51:26Z", "message": "Resolves #1019: Avoid repeating index endpoints conflicts\n\n   While setting the indexer's range, repeating conflicts with other transaction could prevent the job from running\n\n   resolution (for idempotent indexes only): Set the endpoints and read the records in a non-conflicting SNAPSHOT isolation,\n   and add each indexed record to a conflict list. Having the index in WRITE_ONLY mode, new records within the range will be\n   indexed while inserted and shall not cause a rejection."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "779aef648d481dbf55b3b1135a6b263ffb0f3897", "author": {"user": {"login": "jjezra", "name": "Josef Ezra"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/779aef648d481dbf55b3b1135a6b263ffb0f3897", "committedDate": "2020-08-21T00:26:43Z", "message": "add 2 more utests"}, "afterCommit": {"oid": "1d54d963231c6b06b25169fd81607f50d05b9d45", "author": {"user": {"login": "jjezra", "name": "Josef Ezra"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/1d54d963231c6b06b25169fd81607f50d05b9d45", "committedDate": "2020-08-21T14:51:26Z", "message": "Resolves #1019: Avoid repeating index endpoints conflicts\n\n   While setting the indexer's range, repeating conflicts with other transaction could prevent the job from running\n\n   resolution (for idempotent indexes only): Set the endpoints and read the records in a non-conflicting SNAPSHOT isolation,\n   and add each indexed record to a conflict list. Having the index in WRITE_ONLY mode, new records within the range will be\n   indexed while inserted and shall not cause a rejection."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a857ec3666b81d75ce21ae79cd67f318ec77bf9", "author": {"user": {"login": "jjezra", "name": "Josef Ezra"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/9a857ec3666b81d75ce21ae79cd67f318ec77bf9", "committedDate": "2020-08-21T17:24:20Z", "message": "Implement Tao's change request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjY3MTk5", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#pullrequestreview-472667199", "createdAt": "2020-08-21T17:30:15Z", "commit": {"oid": "9a857ec3666b81d75ce21ae79cd67f318ec77bf9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjY2MjIx", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#pullrequestreview-472666221", "createdAt": "2020-08-21T17:28:45Z", "commit": {"oid": "9a857ec3666b81d75ce21ae79cd67f318ec77bf9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyODo0NVrOHE1bhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyODo0NVrOHE1bhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzMTc1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testAddRecordToRangeWhileIndexedIdempotentFailure() {\n          \n          \n            \n                public void testModifyRecordInRangeWhileIndexedIdempotentFailure() {\n          \n      \n    \n    \n  \n\nI think that's probably a more accurate description", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#discussion_r474831751", "createdAt": "2020-08-21T17:28:45Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/OnlineIndexerConflictsTest.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * OnlineIndexerConflictsTest.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.foundationdb;\n+\n+import com.apple.foundationdb.record.TestRecords1Proto;\n+import com.apple.foundationdb.record.metadata.Index;\n+import com.apple.foundationdb.record.metadata.IndexTypes;\n+import com.apple.test.Tags;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import static com.apple.foundationdb.record.metadata.Key.Expressions.field;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+/**\n+ * Tests for {@link OnlineIndexer}. Checking different db manipulations during the indexing process.\n+ */\n+\n+@Tag(Tags.RequiresFDB)\n+public class OnlineIndexerConflictsTest extends OnlineIndexerTest {\n+\n+    @Test\n+    public void testAddRecordToRangeWhileIndexedIdempotent() {\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 20).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hookAdd = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            for (int i = 2; i <= 8; i++) {\n+                // even numbers from 4 to 16\n+                recordStore.saveRecord(records.get(i * 2));\n+            }\n+            context.commit();\n+        }\n+        openSimpleMetaData(hookAdd);\n+        try (FDBRecordContext context = openContext()) {\n+            context.commit();\n+        }\n+\n+        int[] inserts = {2, 5, 11, 17, 15};\n+        for (int i = 0; i < inserts.length; i++) {\n+            int record_i = inserts[i];\n+\n+            try (FDBRecordContext context1 = openContext()) {\n+                try (OnlineIndexer indexer =\n+                             OnlineIndexer.newBuilder()\n+                                     .setRecordStore(recordStore)\n+                                     .setIndex(\"newIndex\")\n+                                     .build()) {\n+                    indexer.buildRange(recordStore, null, null).join();\n+                    try (FDBRecordContext context2 = openContext()) {\n+                        recordStore.saveRecord(records.get(record_i));\n+                        // This record might be added in the indexer's range, but the transaction still commits because it doesn't\n+                        // change any existing records.\n+                        context2.commit();\n+                    }\n+                    context1.commit();\n+                }\n+            }\n+\n+            try (FDBRecordContext context = openContext()) {\n+                recordStore.clearAndMarkIndexWriteOnly(index).join();\n+                context.commit();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testAddRecordToRangeWhileIndexedOtherType() {\n+\n+        List<TestRecords1Proto.MySimpleRecord> records =\n+                LongStream.range(0, 7).mapToObj(val -> TestRecords1Proto.MySimpleRecord.newBuilder().setRecNo(val * 2).setNumValue2((int)val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        List<TestRecords1Proto.MyOtherRecord> otherRecords =\n+                LongStream.range(0, 7).mapToObj(val -> TestRecords1Proto.MyOtherRecord.newBuilder().setRecNo(val * 2 + 1).setNumValue2((int) val + 1).build()\n+                ).collect(Collectors.toList());\n+\n+        List<TestRecords1Proto.MyOtherRecord> otherRecordsOverwrite =\n+                LongStream.range(0, 7).mapToObj(val -> TestRecords1Proto.MyOtherRecord.newBuilder().setRecNo(val * 2 + 1).setNumValue2((int) val + 101).build()\n+                ).collect(Collectors.toList());\n+\n+        Index index = new Index(\"newIndex\", field(\"num_value_2\"), IndexTypes.VALUE);\n+        FDBRecordStoreTestBase.RecordMetaDataHook hookAdd = metaDataBuilder -> metaDataBuilder.addIndex(\"MySimpleRecord\", index);\n+\n+        openSimpleMetaData();\n+        try (FDBRecordContext context = openContext()) {\n+            records.forEach(recordStore::saveRecord);\n+            otherRecords.forEach(recordStore::saveRecord);\n+            context.commit();\n+        }\n+        openSimpleMetaData(hookAdd);\n+        try (FDBRecordContext context = openContext()) {\n+            context.commit();\n+        }\n+\n+        otherRecordsOverwrite.forEach(rec -> {\n+\n+            try (FDBRecordContext context1 = openContext()) {\n+                try (OnlineIndexer indexer =\n+                             OnlineIndexer.newBuilder()\n+                                     .setRecordStore(recordStore)\n+                                     .setIndex(\"newIndex\")\n+                                     .build()) {\n+                    indexer.buildRange(recordStore, null, null).join();\n+                    try (FDBRecordContext context2 = openContext()) {\n+                        recordStore.saveRecord(rec);\n+                        // This record's type is different than the indexer's, so both commits should succeed\n+                        context2.commit();\n+                    }\n+                    context1.commit();\n+                }\n+            }\n+\n+            try (FDBRecordContext context = openContext()) {\n+                recordStore.clearAndMarkIndexWriteOnly(index).join();\n+                context.commit();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void testAddRecordToRangeWhileIndexedIdempotentFailure() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a857ec3666b81d75ce21ae79cd67f318ec77bf9"}, "originalPosition": 150}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12b07955f26082a418f529c0b44c2571b9718b16", "author": {"user": {"login": "jjezra", "name": "Josef Ezra"}}, "url": "https://github.com/FoundationDB/fdb-record-layer/commit/12b07955f26082a418f529c0b44c2571b9718b16", "committedDate": "2020-08-22T01:35:28Z", "message": "implement changes requested by Alec"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNjM0MDU1", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1015#pullrequestreview-473634055", "createdAt": "2020-08-24T15:53:49Z", "commit": {"oid": "12b07955f26082a418f529c0b44c2571b9718b16"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2718, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}