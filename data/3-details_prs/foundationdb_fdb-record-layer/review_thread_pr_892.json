{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NzUxOTI3", "number": 892, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzozNDoxMlrOD04Sxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo1Mzo1OFrOD188sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Nzc0ODU1OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzozNDoxMlrOGKCidA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozNzoyMFrOGLmZ6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4MDUzMg==", "bodyText": "I think our convention for this sort of ultra-noisy logging is to log at the trace level, rather than debug.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r413180532", "createdAt": "2020-04-22T17:34:12Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java", "diffHunk": "@@ -247,6 +253,11 @@ public RecordQueryPlan plan(@Nonnull RecordQuery query) {\n             throw new RecordQueryPlanComplexityException(plan);\n         }\n \n+        if (logger.isDebugEnabled()) {\n+            logger.debug(KeyValueLogMessage.of(\"explain of plan\",\n+                    \"explain\", plan.explain()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNjc0NQ==", "bodyText": "Okay!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414816745", "createdAt": "2020-04-24T19:37:20Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java", "diffHunk": "@@ -247,6 +253,11 @@ public RecordQueryPlan plan(@Nonnull RecordQuery query) {\n             throw new RecordQueryPlanComplexityException(plan);\n         }\n \n+        if (logger.isDebugEnabled()) {\n+            logger.debug(KeyValueLogMessage.of(\"explain of plan\",\n+                    \"explain\", plan.explain()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4MDUzMg=="}, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzYzMzE2OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryScanPlan.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozMjoyOVrOGK4sGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo0Nzo0OFrOGLoqaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2NzczOA==", "bodyText": "I don't think we should change the toString()  since we have downstream consumers of this format that expect a certain format.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414067738", "createdAt": "2020-04-23T19:32:29Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryScanPlan.java", "diffHunk": "@@ -118,13 +121,19 @@ public boolean hasLoadBykeys() {\n     @Nonnull\n     @Override\n     public String toString() {\n+        String range;\n+        range = getRange();\n+        return \"Scan(\" + range + \")\";\n+    }\n+\n+    private String getRange() {\n         String range;\n         try {\n             range = comparisons.toTupleRange().toString();\n         } catch (Comparisons.EvaluationContextRequiredException ex) {\n             range = comparisons.toString();\n         }\n-        return \"Scan(\" + range + \")\";\n+        return range;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxODI4OA==", "bodyText": "It's not changing it. It's just GitHub showing this in a weird way as it merges toString() with getRange()", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414818288", "createdAt": "2020-04-24T19:40:17Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryScanPlan.java", "diffHunk": "@@ -118,13 +121,19 @@ public boolean hasLoadBykeys() {\n     @Nonnull\n     @Override\n     public String toString() {\n+        String range;\n+        range = getRange();\n+        return \"Scan(\" + range + \")\";\n+    }\n+\n+    private String getRange() {\n         String range;\n         try {\n             range = comparisons.toTupleRange().toString();\n         } catch (Comparisons.EvaluationContextRequiredException ex) {\n             range = comparisons.toString();\n         }\n-        return \"Scan(\" + range + \")\";\n+        return range;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2NzczOA=="}, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1MzczNg==", "bodyText": "Oh, whoops. Carry on :)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414853736", "createdAt": "2020-04-24T20:47:48Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryScanPlan.java", "diffHunk": "@@ -118,13 +121,19 @@ public boolean hasLoadBykeys() {\n     @Nonnull\n     @Override\n     public String toString() {\n+        String range;\n+        range = getRange();\n+        return \"Scan(\" + range + \")\";\n+    }\n+\n+    private String getRange() {\n         String range;\n         try {\n             range = comparisons.toTupleRange().toString();\n         } catch (Comparisons.EvaluationContextRequiredException ex) {\n             range = comparisons.toString();\n         }\n-        return \"Scan(\" + range + \")\";\n+        return range;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2NzczOA=="}, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzYzNTc1OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/CascadesPlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozMzoxOFrOGK4tyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozMzoxOFrOGK4tyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2ODE3MA==", "bodyText": "I'm happy to leave this as debug-level since it's in the experimental code base.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414068170", "createdAt": "2020-04-23T19:33:18Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/CascadesPlanner.java", "diffHunk": "@@ -140,6 +140,11 @@ public RecordQueryPlan plan(@Nonnull RecordQuery query) {\n \n         final PlannerExpression singleRoot = currentRoot.getMembers().iterator().next();\n         if (singleRoot instanceof RecordQueryPlan) {\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(KeyValueLogMessage.of(\"explain of plan\",\n+                        \"explain\", singleRoot.explain()));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzYzODA5OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/DotExporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozMzo0OFrOGK4vNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0MToyOFrOGLmirg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2ODUzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Constructs a new DotExporter object with the given ID, label, attribute, and graph id\n          \n          \n            \n                 * Constructs a new DotExporter object with the given ID, label, attribute, and graph ID", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414068533", "createdAt": "2020-04-23T19:33:48Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/DotExporter.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * DotExporter.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.graph.ImmutableNetwork;\n+\n+import javax.annotation.Nonnull;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Exports a graph into a DOT file.\n+ *\n+ * @param <N> the network node type\n+ * @param <E> the network edge type\n+ *\n+ */\n+@SuppressWarnings(\"UnstableApiUsage\")\n+public class DotExporter<N, E> extends GraphExporter<N, E> {\n+    /** Edge operation for undirected graphs. */\n+    private static final String UNDIRECTED_GRAPH_EDGEOP = \"--\";\n+    /** Edge operation for directed graphs. */\n+    private static final String DIRECTED_GRAPH_EDGEOP = \"->\";\n+    /** Keyword for undirected graphs. */\n+    private static final String UNDIRECTED_GRAPH_KEYWORD = \"graph\";\n+    /** Keyword for directed graphs. */\n+    private static final String DIRECTED_GRAPH_KEYWORD = \"digraph\";\n+    /** Keyword for representing strict graphs. */\n+    private static final String DONT_ALLOW_MULTIPLE_EDGES_KEYWORD = \"strict\";\n+    // patterns for IDs\n+    private static final Pattern ALPHA_DIG = Pattern.compile(\"[a-zA-Z_][\\\\w]*\");\n+    private static final Pattern DOUBLE_QUOTE = Pattern.compile(\"\\\".*\\\"\");\n+    private static final Pattern DOT_NUMBER = Pattern.compile(\"[-]?([.][0-9]+|[0-9]+([.][0-9]*)?)\");\n+    private static final Pattern HTML = Pattern.compile(\"<.*>\");\n+\n+    /**\n+     * Default graph id used by the exporter.\n+     */\n+    public static final String DEFAULT_GRAPH_ID = \"G\";\n+\n+    private static final String INDENT = \"  \";\n+\n+    /**\n+     * Constructs a new DotExporter object with the given ID, label, attribute, and graph id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxODk5MA==", "bodyText": "Okay!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414818990", "createdAt": "2020-04-24T19:41:28Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/DotExporter.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * DotExporter.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.graph.ImmutableNetwork;\n+\n+import javax.annotation.Nonnull;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Exports a graph into a DOT file.\n+ *\n+ * @param <N> the network node type\n+ * @param <E> the network edge type\n+ *\n+ */\n+@SuppressWarnings(\"UnstableApiUsage\")\n+public class DotExporter<N, E> extends GraphExporter<N, E> {\n+    /** Edge operation for undirected graphs. */\n+    private static final String UNDIRECTED_GRAPH_EDGEOP = \"--\";\n+    /** Edge operation for directed graphs. */\n+    private static final String DIRECTED_GRAPH_EDGEOP = \"->\";\n+    /** Keyword for undirected graphs. */\n+    private static final String UNDIRECTED_GRAPH_KEYWORD = \"graph\";\n+    /** Keyword for directed graphs. */\n+    private static final String DIRECTED_GRAPH_KEYWORD = \"digraph\";\n+    /** Keyword for representing strict graphs. */\n+    private static final String DONT_ALLOW_MULTIPLE_EDGES_KEYWORD = \"strict\";\n+    // patterns for IDs\n+    private static final Pattern ALPHA_DIG = Pattern.compile(\"[a-zA-Z_][\\\\w]*\");\n+    private static final Pattern DOUBLE_QUOTE = Pattern.compile(\"\\\".*\\\"\");\n+    private static final Pattern DOT_NUMBER = Pattern.compile(\"[-]?([.][0-9]+|[0-9]+([.][0-9]*)?)\");\n+    private static final Pattern HTML = Pattern.compile(\"<.*>\");\n+\n+    /**\n+     * Default graph id used by the exporter.\n+     */\n+    public static final String DEFAULT_GRAPH_ID = \"G\";\n+\n+    private static final String INDENT = \"  \";\n+\n+    /**\n+     * Constructs a new DotExporter object with the given ID, label, attribute, and graph id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2ODUzMw=="}, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY0NjYxOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozNTo1OVrOGK40Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoxNDo0NlrOGLnnZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2OTg2Mw==", "bodyText": "We generally use explicit nullability annotations in the Record Layer (and yes, we should have a linter that checks for this :-)), so this method and its implementations should have one of @Nonnull or @Nullable annotations. Sorry \ud83d\ude43", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414069863", "createdAt": "2020-04-23T19:35:59Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "diffHunk": "@@ -107,5 +112,39 @@\n         }\n         return null;\n     }\n+\n+    default PlannerGraphBuilder<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> showYourself() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzNjU4Mw==", "bodyText": "Done!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414836583", "createdAt": "2020-04-24T20:14:46Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "diffHunk": "@@ -107,5 +112,39 @@\n         }\n         return null;\n     }\n+\n+    default PlannerGraphBuilder<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> showYourself() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2OTg2Mw=="}, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY1MjE0OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozNzoxMlrOGK43XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozNzoxMlrOGK43XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MDYyMQ==", "bodyText": "Same here.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414070621", "createdAt": "2020-04-23T19:37:12Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "diffHunk": "@@ -107,5 +112,39 @@\n         }\n         return null;\n     }\n+\n+    default PlannerGraphBuilder<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> showYourself() {\n+        final InternalPlannerGraphProperty.Node root = new InternalPlannerGraphProperty.Node(getClass().getSimpleName());\n+        return PlannerGraph.builder(root);\n+    }\n+\n+    default String show() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY1MzQ5OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozNzozMlrOGK44Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoxNDo1MlrOGLnnng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MDgyNg==", "bodyText": "And here.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414070826", "createdAt": "2020-04-23T19:37:32Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "diffHunk": "@@ -107,5 +112,39 @@\n         }\n         return null;\n     }\n+\n+    default PlannerGraphBuilder<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> showYourself() {\n+        final InternalPlannerGraphProperty.Node root = new InternalPlannerGraphProperty.Node(getClass().getSimpleName());\n+        return PlannerGraph.builder(root);\n+    }\n+\n+    default String show() {\n+        try {\n+            final PlannerGraph<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> plannerGraph =\n+                    Objects.requireNonNull(acceptPropertyVisitor(new InternalPlannerGraphProperty()));\n+            final URI uri = InternalPlannerGraphProperty.createHtmlLauncher(Objects.requireNonNull(plannerGraph));\n+            Desktop.getDesktop().browse(uri);\n+            return \"done\";\n+        } catch (final Exception ex) {\n+            Throwables.throwIfUnchecked(ex);\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    default PlannerGraphBuilder<ExplainPlannerGraphProperty.Node, ExplainPlannerGraphProperty.Edge> explainYourself() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzNjYzOA==", "bodyText": "Done!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414836638", "createdAt": "2020-04-24T20:14:52Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "diffHunk": "@@ -107,5 +112,39 @@\n         }\n         return null;\n     }\n+\n+    default PlannerGraphBuilder<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> showYourself() {\n+        final InternalPlannerGraphProperty.Node root = new InternalPlannerGraphProperty.Node(getClass().getSimpleName());\n+        return PlannerGraph.builder(root);\n+    }\n+\n+    default String show() {\n+        try {\n+            final PlannerGraph<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> plannerGraph =\n+                    Objects.requireNonNull(acceptPropertyVisitor(new InternalPlannerGraphProperty()));\n+            final URI uri = InternalPlannerGraphProperty.createHtmlLauncher(Objects.requireNonNull(plannerGraph));\n+            Desktop.getDesktop().browse(uri);\n+            return \"done\";\n+        } catch (final Exception ex) {\n+            Throwables.throwIfUnchecked(ex);\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    default PlannerGraphBuilder<ExplainPlannerGraphProperty.Node, ExplainPlannerGraphProperty.Edge> explainYourself() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MDgyNg=="}, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY1Mzc5OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozNzozNlrOGK44WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozNzozNlrOGK44WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MDg3Mg==", "bodyText": "And here.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414070872", "createdAt": "2020-04-23T19:37:36Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "diffHunk": "@@ -107,5 +112,39 @@\n         }\n         return null;\n     }\n+\n+    default PlannerGraphBuilder<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> showYourself() {\n+        final InternalPlannerGraphProperty.Node root = new InternalPlannerGraphProperty.Node(getClass().getSimpleName());\n+        return PlannerGraph.builder(root);\n+    }\n+\n+    default String show() {\n+        try {\n+            final PlannerGraph<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> plannerGraph =\n+                    Objects.requireNonNull(acceptPropertyVisitor(new InternalPlannerGraphProperty()));\n+            final URI uri = InternalPlannerGraphProperty.createHtmlLauncher(Objects.requireNonNull(plannerGraph));\n+            Desktop.getDesktop().browse(uri);\n+            return \"done\";\n+        } catch (final Exception ex) {\n+            Throwables.throwIfUnchecked(ex);\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    default PlannerGraphBuilder<ExplainPlannerGraphProperty.Node, ExplainPlannerGraphProperty.Edge> explainYourself() {\n+        final ExplainPlannerGraphProperty.Node root = new ExplainPlannerGraphProperty.Node(getClass().getSimpleName());\n+        return PlannerGraph.builder(root);\n+    }\n+\n+    default String explain() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY2NDgzOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo0MDozMlrOGK4_Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0NDoxNlrOGLmozg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MjYxOA==", "bodyText": "I think there's an interesting question here about whether explain() belongs on PlannerExpression or, like, QueryPlan and QueryComponent, since it's meant for external consumers and shouldn't need access to any of the internal planner data structures.\nFor example, LogicalIndexScanExpression and its ilk shouldn't need an explain().\nOn the other hand, I guess that's significantly more annoying to implement, so I can see it being not worth the tradeoff, at least for now.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414072618", "createdAt": "2020-04-23T19:40:32Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "diffHunk": "@@ -107,5 +112,39 @@\n         }\n         return null;\n     }\n+\n+    default PlannerGraphBuilder<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> showYourself() {\n+        final InternalPlannerGraphProperty.Node root = new InternalPlannerGraphProperty.Node(getClass().getSimpleName());\n+        return PlannerGraph.builder(root);\n+    }\n+\n+    default String show() {\n+        try {\n+            final PlannerGraph<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> plannerGraph =\n+                    Objects.requireNonNull(acceptPropertyVisitor(new InternalPlannerGraphProperty()));\n+            final URI uri = InternalPlannerGraphProperty.createHtmlLauncher(Objects.requireNonNull(plannerGraph));\n+            Desktop.getDesktop().browse(uri);\n+            return \"done\";\n+        } catch (final Exception ex) {\n+            Throwables.throwIfUnchecked(ex);\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    default PlannerGraphBuilder<ExplainPlannerGraphProperty.Node, ExplainPlannerGraphProperty.Edge> explainYourself() {\n+        final ExplainPlannerGraphProperty.Node root = new ExplainPlannerGraphProperty.Node(getClass().getSimpleName());\n+        return PlannerGraph.builder(root);\n+    }\n+\n+    default String explain() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMDU1OA==", "bodyText": "Yeah -- if there was something like a trait saying this is physical or logical then this could be tagged as such. Leaving it for now!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414820558", "createdAt": "2020-04-24T19:44:16Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "diffHunk": "@@ -107,5 +112,39 @@\n         }\n         return null;\n     }\n+\n+    default PlannerGraphBuilder<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> showYourself() {\n+        final InternalPlannerGraphProperty.Node root = new InternalPlannerGraphProperty.Node(getClass().getSimpleName());\n+        return PlannerGraph.builder(root);\n+    }\n+\n+    default String show() {\n+        try {\n+            final PlannerGraph<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> plannerGraph =\n+                    Objects.requireNonNull(acceptPropertyVisitor(new InternalPlannerGraphProperty()));\n+            final URI uri = InternalPlannerGraphProperty.createHtmlLauncher(Objects.requireNonNull(plannerGraph));\n+            Desktop.getDesktop().browse(uri);\n+            return \"done\";\n+        } catch (final Exception ex) {\n+            Throwables.throwIfUnchecked(ex);\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    default PlannerGraphBuilder<ExplainPlannerGraphProperty.Node, ExplainPlannerGraphProperty.Edge> explainYourself() {\n+        final ExplainPlannerGraphProperty.Node root = new ExplainPlannerGraphProperty.Node(getClass().getSimpleName());\n+        return PlannerGraph.builder(root);\n+    }\n+\n+    default String explain() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MjYxOA=="}, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY2Nzg2OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo0MToxMVrOGK5A8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0NTo0NFrOGLmrxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MzA3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * i.e. they get computed by walking a PlannerExpression DAG.\n          \n          \n            \n             * i.e., they get computed by walking a {@code PlannerExpression} DAG.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414073075", "createdAt": "2020-04-23T19:41:11Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * PlannerGraph.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.ImmutableNetwork;\n+import com.google.common.graph.MutableNetwork;\n+import com.google.common.graph.Network;\n+import com.google.common.graph.NetworkBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayDeque;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+\n+/**\n+ * The planner graph class. Objects of this class are computed by {@link InternalPlannerGraphProperty},\n+ * i.e. they get computed by walking a PlannerExpression DAG.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMTMxNw==", "bodyText": "Okay!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414821317", "createdAt": "2020-04-24T19:45:44Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * PlannerGraph.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.ImmutableNetwork;\n+import com.google.common.graph.MutableNetwork;\n+import com.google.common.graph.Network;\n+import com.google.common.graph.NetworkBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayDeque;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+\n+/**\n+ * The planner graph class. Objects of this class are computed by {@link InternalPlannerGraphProperty},\n+ * i.e. they get computed by walking a PlannerExpression DAG.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MzA3NQ=="}, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY3MDE2OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo0MTo0NVrOGK5CWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0NzoyOVrOGLmvZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MzQzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The property, once computed is immutable.\n          \n          \n            \n             * Once computed, the property is immutable.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414073433", "createdAt": "2020-04-23T19:41:45Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * PlannerGraph.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.ImmutableNetwork;\n+import com.google.common.graph.MutableNetwork;\n+import com.google.common.graph.Network;\n+import com.google.common.graph.NetworkBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayDeque;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+\n+/**\n+ * The planner graph class. Objects of this class are computed by {@link InternalPlannerGraphProperty},\n+ * i.e. they get computed by walking a PlannerExpression DAG.\n+ *\n+ * The property, once computed is immutable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMjI0NA==", "bodyText": "Okay!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414822244", "createdAt": "2020-04-24T19:47:29Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * PlannerGraph.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.ImmutableNetwork;\n+import com.google.common.graph.MutableNetwork;\n+import com.google.common.graph.Network;\n+import com.google.common.graph.NetworkBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayDeque;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+\n+/**\n+ * The planner graph class. Objects of this class are computed by {@link InternalPlannerGraphProperty},\n+ * i.e. they get computed by walking a PlannerExpression DAG.\n+ *\n+ * The property, once computed is immutable.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MzQzMw=="}, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY3Mjc4OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo0MjoyM1rOGK5D6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0ODozNlrOGLmxhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MzgzNA==", "bodyText": "What's the unstable API here? I'm guessing it's the Guava graph classes? I think it's worth adding a comment so that we know to remove this... some day.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414073834", "createdAt": "2020-04-23T19:42:23Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * PlannerGraph.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.ImmutableNetwork;\n+import com.google.common.graph.MutableNetwork;\n+import com.google.common.graph.Network;\n+import com.google.common.graph.NetworkBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayDeque;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+\n+/**\n+ * The planner graph class. Objects of this class are computed by {@link InternalPlannerGraphProperty},\n+ * i.e. they get computed by walking a PlannerExpression DAG.\n+ *\n+ * The property, once computed is immutable.\n+ *\n+ * @param <N> node type\n+ * @param <E> edge type\n+ */\n+@SuppressWarnings(\"UnstableApiUsage\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMjc5MA==", "bodyText": "Okay! Left a comment!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414822790", "createdAt": "2020-04-24T19:48:36Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * PlannerGraph.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.ImmutableNetwork;\n+import com.google.common.graph.MutableNetwork;\n+import com.google.common.graph.Network;\n+import com.google.common.graph.NetworkBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayDeque;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+\n+/**\n+ * The planner graph class. Objects of this class are computed by {@link InternalPlannerGraphProperty},\n+ * i.e. they get computed by walking a PlannerExpression DAG.\n+ *\n+ * The property, once computed is immutable.\n+ *\n+ * @param <N> node type\n+ * @param <E> edge type\n+ */\n+@SuppressWarnings(\"UnstableApiUsage\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MzgzNA=="}, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY3NzgzOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo0MzozM1rOGK5G5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0ODo0N1rOGLmx6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3NDU5OQ==", "bodyText": "I think that both root and network are @Nonnull, but in either case we should make this explicit.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414074599", "createdAt": "2020-04-23T19:43:33Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * PlannerGraph.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.ImmutableNetwork;\n+import com.google.common.graph.MutableNetwork;\n+import com.google.common.graph.Network;\n+import com.google.common.graph.NetworkBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayDeque;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+\n+/**\n+ * The planner graph class. Objects of this class are computed by {@link InternalPlannerGraphProperty},\n+ * i.e. they get computed by walking a PlannerExpression DAG.\n+ *\n+ * The property, once computed is immutable.\n+ *\n+ * @param <N> node type\n+ * @param <E> edge type\n+ */\n+@SuppressWarnings(\"UnstableApiUsage\")\n+public class PlannerGraph<N extends PlannerGraph.AbstractNode, E extends PlannerGraph.AbstractEdge> {\n+\n+    /**\n+     * The root of this graph.\n+     */\n+    private final N root;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMjg4OA==", "bodyText": "Okay!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414822888", "createdAt": "2020-04-24T19:48:47Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * PlannerGraph.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.ImmutableNetwork;\n+import com.google.common.graph.MutableNetwork;\n+import com.google.common.graph.Network;\n+import com.google.common.graph.NetworkBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayDeque;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+\n+/**\n+ * The planner graph class. Objects of this class are computed by {@link InternalPlannerGraphProperty},\n+ * i.e. they get computed by walking a PlannerExpression DAG.\n+ *\n+ * The property, once computed is immutable.\n+ *\n+ * @param <N> node type\n+ * @param <E> edge type\n+ */\n+@SuppressWarnings(\"UnstableApiUsage\")\n+public class PlannerGraph<N extends PlannerGraph.AbstractNode, E extends PlannerGraph.AbstractEdge> {\n+\n+    /**\n+     * The root of this graph.\n+     */\n+    private final N root;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3NDU5OQ=="}, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY5OTM2OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo0ODozOVrOGK5TTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo1MDowN1rOGLm0dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3Nzc3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // start form the root node -- stop at any edge tha leads to a node that is already in this network\n          \n          \n            \n                        // classic bfs\n          \n          \n            \n                        // Starting from the root node, stop at any edge that leads to a node that is already in this network using\n          \n          \n            \n                        // classic breadth-first search.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414077775", "createdAt": "2020-04-23T19:48:39Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * PlannerGraph.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.ImmutableNetwork;\n+import com.google.common.graph.MutableNetwork;\n+import com.google.common.graph.Network;\n+import com.google.common.graph.NetworkBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayDeque;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+\n+/**\n+ * The planner graph class. Objects of this class are computed by {@link InternalPlannerGraphProperty},\n+ * i.e. they get computed by walking a PlannerExpression DAG.\n+ *\n+ * The property, once computed is immutable.\n+ *\n+ * @param <N> node type\n+ * @param <E> edge type\n+ */\n+@SuppressWarnings(\"UnstableApiUsage\")\n+public class PlannerGraph<N extends PlannerGraph.AbstractNode, E extends PlannerGraph.AbstractEdge> {\n+\n+    /**\n+     * The root of this graph.\n+     */\n+    private final N root;\n+\n+    /**\n+     * The underlying network graph representation.\n+     */\n+    private final ImmutableNetwork<N, E> network;\n+\n+    /**\n+     * Builder class for planner graph. Used during computation of the planner expression property.\n+     * Note that each PlannerGraph will have a root which is mandatory.\n+     * @param <N> node type\n+     * @param <E> edge type\n+     */\n+    public static class PlannerGraphBuilder<N extends AbstractNode, E extends AbstractEdge> {\n+        final N root;\n+        final MutableNetwork<N, E> network;\n+\n+        private PlannerGraphBuilder(final N root) {\n+            this.root = root;\n+            this.network =\n+                    NetworkBuilder.directed()\n+                            .allowsParallelEdges(true)\n+                            .allowsSelfLoops(true)\n+                            .build();\n+            addNode(root);\n+        }\n+\n+        public N getRoot() {\n+            return root;\n+        }\n+\n+        public PlannerGraphBuilder<N, E> addNode(final N node) {\n+            network.addNode(node);\n+            return this;\n+        }\n+\n+        public PlannerGraphBuilder<N, E> addEdge(final N source, final N target, final E edge) {\n+            network.addEdge(source, target, edge);\n+            return this;\n+        }\n+\n+        public PlannerGraphBuilder<N, E> addGraph(final PlannerGraph<N, E> other) {\n+            final ImmutableNetwork<N, E> otherNetwork = other.network;\n+\n+            // start form the root node -- stop at any edge tha leads to a node that is already in this network\n+            // classic bfs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMzU0Mg==", "bodyText": "Okay!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414823542", "createdAt": "2020-04-24T19:50:07Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * PlannerGraph.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.ImmutableNetwork;\n+import com.google.common.graph.MutableNetwork;\n+import com.google.common.graph.Network;\n+import com.google.common.graph.NetworkBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayDeque;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+\n+/**\n+ * The planner graph class. Objects of this class are computed by {@link InternalPlannerGraphProperty},\n+ * i.e. they get computed by walking a PlannerExpression DAG.\n+ *\n+ * The property, once computed is immutable.\n+ *\n+ * @param <N> node type\n+ * @param <E> edge type\n+ */\n+@SuppressWarnings(\"UnstableApiUsage\")\n+public class PlannerGraph<N extends PlannerGraph.AbstractNode, E extends PlannerGraph.AbstractEdge> {\n+\n+    /**\n+     * The root of this graph.\n+     */\n+    private final N root;\n+\n+    /**\n+     * The underlying network graph representation.\n+     */\n+    private final ImmutableNetwork<N, E> network;\n+\n+    /**\n+     * Builder class for planner graph. Used during computation of the planner expression property.\n+     * Note that each PlannerGraph will have a root which is mandatory.\n+     * @param <N> node type\n+     * @param <E> edge type\n+     */\n+    public static class PlannerGraphBuilder<N extends AbstractNode, E extends AbstractEdge> {\n+        final N root;\n+        final MutableNetwork<N, E> network;\n+\n+        private PlannerGraphBuilder(final N root) {\n+            this.root = root;\n+            this.network =\n+                    NetworkBuilder.directed()\n+                            .allowsParallelEdges(true)\n+                            .allowsSelfLoops(true)\n+                            .build();\n+            addNode(root);\n+        }\n+\n+        public N getRoot() {\n+            return root;\n+        }\n+\n+        public PlannerGraphBuilder<N, E> addNode(final N node) {\n+            network.addNode(node);\n+            return this;\n+        }\n+\n+        public PlannerGraphBuilder<N, E> addEdge(final N source, final N target, final E edge) {\n+            network.addEdge(source, target, edge);\n+            return this;\n+        }\n+\n+        public PlannerGraphBuilder<N, E> addGraph(final PlannerGraph<N, E> other) {\n+            final ImmutableNetwork<N, E> otherNetwork = other.network;\n+\n+            // start form the root node -- stop at any edge tha leads to a node that is already in this network\n+            // classic bfs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3Nzc3NQ=="}, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDAyMzk1OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMToxMTo0NVrOGK8UHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo1MzoxNFrOGLo0tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEyNzEzMw==", "bodyText": "This also needs nullability annotations. I opened #919 to get this checked properly in CI.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414127133", "createdAt": "2020-04-23T21:11:45Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * PlannerGraph.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.ImmutableNetwork;\n+import com.google.common.graph.MutableNetwork;\n+import com.google.common.graph.Network;\n+import com.google.common.graph.NetworkBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayDeque;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+\n+/**\n+ * The planner graph class. Objects of this class are computed by {@link InternalPlannerGraphProperty},\n+ * i.e. they get computed by walking a PlannerExpression DAG.\n+ *\n+ * The property, once computed is immutable.\n+ *\n+ * @param <N> node type\n+ * @param <E> edge type\n+ */\n+@SuppressWarnings(\"UnstableApiUsage\")\n+public class PlannerGraph<N extends PlannerGraph.AbstractNode, E extends PlannerGraph.AbstractEdge> {\n+\n+    /**\n+     * The root of this graph.\n+     */\n+    private final N root;\n+\n+    /**\n+     * The underlying network graph representation.\n+     */\n+    private final ImmutableNetwork<N, E> network;\n+\n+    /**\n+     * Builder class for planner graph. Used during computation of the planner expression property.\n+     * Note that each PlannerGraph will have a root which is mandatory.\n+     * @param <N> node type\n+     * @param <E> edge type\n+     */\n+    public static class PlannerGraphBuilder<N extends AbstractNode, E extends AbstractEdge> {\n+        final N root;\n+        final MutableNetwork<N, E> network;\n+\n+        private PlannerGraphBuilder(final N root) {\n+            this.root = root;\n+            this.network =\n+                    NetworkBuilder.directed()\n+                            .allowsParallelEdges(true)\n+                            .allowsSelfLoops(true)\n+                            .build();\n+            addNode(root);\n+        }\n+\n+        public N getRoot() {\n+            return root;\n+        }\n+\n+        public PlannerGraphBuilder<N, E> addNode(final N node) {\n+            network.addNode(node);\n+            return this;\n+        }\n+\n+        public PlannerGraphBuilder<N, E> addEdge(final N source, final N target, final E edge) {\n+            network.addEdge(source, target, edge);\n+            return this;\n+        }\n+\n+        public PlannerGraphBuilder<N, E> addGraph(final PlannerGraph<N, E> other) {\n+            final ImmutableNetwork<N, E> otherNetwork = other.network;\n+\n+            // start form the root node -- stop at any edge tha leads to a node that is already in this network\n+            // classic bfs\n+            final Queue<N> queue = new ArrayDeque<>();\n+\n+            if (!network.nodes().contains(other.root)) {\n+                addNode(other.root);\n+                queue.add(other.root);\n+            }\n+\n+            while (!queue.isEmpty()) {\n+                final N currentNode = queue.remove();\n+                for (final E edge : otherNetwork.inEdges(currentNode)) {\n+                    final EndpointPair<N> endpointPair = otherNetwork.incidentNodes(edge);\n+                    final N nodeU = endpointPair.nodeU();\n+                    if (!network.nodes().contains(nodeU)) {\n+                        addNode(nodeU);\n+                        queue.add(nodeU);\n+                    }\n+                    addEdge(nodeU, endpointPair.nodeV(), edge);\n+                }\n+            }\n+            return this;\n+        }\n+\n+        public PlannerGraph<N, E> build() {\n+            return new PlannerGraph<>(root, network);\n+        }\n+    }\n+\n+    /**\n+     * Node class functioning as parent for any nodes in the network.\n+     */\n+    public abstract static class AbstractNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyNDE4Nw==", "bodyText": "Okay!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414824187", "createdAt": "2020-04-24T19:51:23Z", "author": {"login": "normen662"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * PlannerGraph.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.ImmutableNetwork;\n+import com.google.common.graph.MutableNetwork;\n+import com.google.common.graph.Network;\n+import com.google.common.graph.NetworkBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayDeque;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+\n+/**\n+ * The planner graph class. Objects of this class are computed by {@link InternalPlannerGraphProperty},\n+ * i.e. they get computed by walking a PlannerExpression DAG.\n+ *\n+ * The property, once computed is immutable.\n+ *\n+ * @param <N> node type\n+ * @param <E> edge type\n+ */\n+@SuppressWarnings(\"UnstableApiUsage\")\n+public class PlannerGraph<N extends PlannerGraph.AbstractNode, E extends PlannerGraph.AbstractEdge> {\n+\n+    /**\n+     * The root of this graph.\n+     */\n+    private final N root;\n+\n+    /**\n+     * The underlying network graph representation.\n+     */\n+    private final ImmutableNetwork<N, E> network;\n+\n+    /**\n+     * Builder class for planner graph. Used during computation of the planner expression property.\n+     * Note that each PlannerGraph will have a root which is mandatory.\n+     * @param <N> node type\n+     * @param <E> edge type\n+     */\n+    public static class PlannerGraphBuilder<N extends AbstractNode, E extends AbstractEdge> {\n+        final N root;\n+        final MutableNetwork<N, E> network;\n+\n+        private PlannerGraphBuilder(final N root) {\n+            this.root = root;\n+            this.network =\n+                    NetworkBuilder.directed()\n+                            .allowsParallelEdges(true)\n+                            .allowsSelfLoops(true)\n+                            .build();\n+            addNode(root);\n+        }\n+\n+        public N getRoot() {\n+            return root;\n+        }\n+\n+        public PlannerGraphBuilder<N, E> addNode(final N node) {\n+            network.addNode(node);\n+            return this;\n+        }\n+\n+        public PlannerGraphBuilder<N, E> addEdge(final N source, final N target, final E edge) {\n+            network.addEdge(source, target, edge);\n+            return this;\n+        }\n+\n+        public PlannerGraphBuilder<N, E> addGraph(final PlannerGraph<N, E> other) {\n+            final ImmutableNetwork<N, E> otherNetwork = other.network;\n+\n+            // start form the root node -- stop at any edge tha leads to a node that is already in this network\n+            // classic bfs\n+            final Queue<N> queue = new ArrayDeque<>();\n+\n+            if (!network.nodes().contains(other.root)) {\n+                addNode(other.root);\n+                queue.add(other.root);\n+            }\n+\n+            while (!queue.isEmpty()) {\n+                final N currentNode = queue.remove();\n+                for (final E edge : otherNetwork.inEdges(currentNode)) {\n+                    final EndpointPair<N> endpointPair = otherNetwork.incidentNodes(edge);\n+                    final N nodeU = endpointPair.nodeU();\n+                    if (!network.nodes().contains(nodeU)) {\n+                        addNode(nodeU);\n+                        queue.add(nodeU);\n+                    }\n+                    addEdge(nodeU, endpointPair.nodeV(), edge);\n+                }\n+            }\n+            return this;\n+        }\n+\n+        public PlannerGraph<N, E> build() {\n+            return new PlannerGraph<>(root, network);\n+        }\n+    }\n+\n+    /**\n+     * Node class functioning as parent for any nodes in the network.\n+     */\n+    public abstract static class AbstractNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEyNzEzMw=="}, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1NjM3NQ==", "bodyText": "Unfortunately, this PR adds lots of methods that need annotations.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414856375", "createdAt": "2020-04-24T20:53:14Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * PlannerGraph.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.ImmutableNetwork;\n+import com.google.common.graph.MutableNetwork;\n+import com.google.common.graph.Network;\n+import com.google.common.graph.NetworkBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayDeque;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+\n+/**\n+ * The planner graph class. Objects of this class are computed by {@link InternalPlannerGraphProperty},\n+ * i.e. they get computed by walking a PlannerExpression DAG.\n+ *\n+ * The property, once computed is immutable.\n+ *\n+ * @param <N> node type\n+ * @param <E> edge type\n+ */\n+@SuppressWarnings(\"UnstableApiUsage\")\n+public class PlannerGraph<N extends PlannerGraph.AbstractNode, E extends PlannerGraph.AbstractEdge> {\n+\n+    /**\n+     * The root of this graph.\n+     */\n+    private final N root;\n+\n+    /**\n+     * The underlying network graph representation.\n+     */\n+    private final ImmutableNetwork<N, E> network;\n+\n+    /**\n+     * Builder class for planner graph. Used during computation of the planner expression property.\n+     * Note that each PlannerGraph will have a root which is mandatory.\n+     * @param <N> node type\n+     * @param <E> edge type\n+     */\n+    public static class PlannerGraphBuilder<N extends AbstractNode, E extends AbstractEdge> {\n+        final N root;\n+        final MutableNetwork<N, E> network;\n+\n+        private PlannerGraphBuilder(final N root) {\n+            this.root = root;\n+            this.network =\n+                    NetworkBuilder.directed()\n+                            .allowsParallelEdges(true)\n+                            .allowsSelfLoops(true)\n+                            .build();\n+            addNode(root);\n+        }\n+\n+        public N getRoot() {\n+            return root;\n+        }\n+\n+        public PlannerGraphBuilder<N, E> addNode(final N node) {\n+            network.addNode(node);\n+            return this;\n+        }\n+\n+        public PlannerGraphBuilder<N, E> addEdge(final N source, final N target, final E edge) {\n+            network.addEdge(source, target, edge);\n+            return this;\n+        }\n+\n+        public PlannerGraphBuilder<N, E> addGraph(final PlannerGraph<N, E> other) {\n+            final ImmutableNetwork<N, E> otherNetwork = other.network;\n+\n+            // start form the root node -- stop at any edge tha leads to a node that is already in this network\n+            // classic bfs\n+            final Queue<N> queue = new ArrayDeque<>();\n+\n+            if (!network.nodes().contains(other.root)) {\n+                addNode(other.root);\n+                queue.add(other.root);\n+            }\n+\n+            while (!queue.isEmpty()) {\n+                final N currentNode = queue.remove();\n+                for (final E edge : otherNetwork.inEdges(currentNode)) {\n+                    final EndpointPair<N> endpointPair = otherNetwork.incidentNodes(edge);\n+                    final N nodeU = endpointPair.nodeU();\n+                    if (!network.nodes().contains(nodeU)) {\n+                        addNode(nodeU);\n+                        queue.add(nodeU);\n+                    }\n+                    addEdge(nodeU, endpointPair.nodeV(), edge);\n+                }\n+            }\n+            return this;\n+        }\n+\n+        public PlannerGraph<N, E> build() {\n+            return new PlannerGraph<>(root, network);\n+        }\n+    }\n+\n+    /**\n+     * Node class functioning as parent for any nodes in the network.\n+     */\n+    public abstract static class AbstractNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEyNzEzMw=="}, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODQxMDE0OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoxNDoxMVrOGLjkTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoxNDoxMVrOGLjkTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3MDI1NQ==", "bodyText": "It would be really nice if we didn't need to \"pollute\" a data structure interface like PlannerExpression with this URI and Desktop stuff. Is it possible to keep the nice IntelliJ integration while moving this logic into some kind of \"visualizer\" or other auxiliary class?\nAt a bare minimum, I think we could probably have this call a VisualizerRegistry or something like that.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414770255", "createdAt": "2020-04-24T18:14:11Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "diffHunk": "@@ -107,5 +112,39 @@\n         }\n         return null;\n     }\n+\n+    default PlannerGraphBuilder<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> showYourself() {\n+        final InternalPlannerGraphProperty.Node root = new InternalPlannerGraphProperty.Node(getClass().getSimpleName());\n+        return PlannerGraph.builder(root);\n+    }\n+\n+    default String show() {\n+        try {\n+            final PlannerGraph<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> plannerGraph =\n+                    Objects.requireNonNull(acceptPropertyVisitor(new InternalPlannerGraphProperty()));\n+            final URI uri = InternalPlannerGraphProperty.createHtmlLauncher(Objects.requireNonNull(plannerGraph));\n+            Desktop.getDesktop().browse(uri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0fb3717fc99f5f0877784e470167c583746480"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODk3OTYyOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryIndexPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo0ODo1OVrOGLosYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo0ODo1OVrOGLosYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1NDI0Mw==", "bodyText": "Still need a few more of these nullability annotations.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414854243", "createdAt": "2020-04-24T20:48:59Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryIndexPlan.java", "diffHunk": "@@ -191,8 +190,29 @@ protected void appendScanDetails(StringBuilder str) {\n         }\n     }\n \n+    private String getRange() {\n+        String range;\n+        try {\n+            range = comparisons.toTupleRange().toString();\n+        } catch (Comparisons.EvaluationContextRequiredException ex) {\n+            range = comparisons.toString();\n+        }\n+        return range;\n+    }\n+\n     @Override\n     public int getComplexity() {\n         return 1;\n     }\n+\n+    @Override\n+    public PlannerGraphBuilder<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> showYourself() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59cdee0e9af7776e33a42233f27cd24835286547"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODk4MDEyOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryPlanWithIndex.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo0OTowNlrOGLossA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo0OTowNlrOGLossA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1NDMyMA==", "bodyText": "Here, too.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414854320", "createdAt": "2020-04-24T20:49:06Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryPlanWithIndex.java", "diffHunk": "@@ -70,4 +73,13 @@\n         return store.fetchIndexRecords(entryRecordCursor, IndexOrphanBehavior.ERROR, executeProperties.getState())\n                 .map(store::queriedRecord);\n     }\n+\n+    @Override\n+    default PlannerGraphBuilder<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> showYourself() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59cdee0e9af7776e33a42233f27cd24835286547"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODk4MTAzOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryScanPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo0OToxOFrOGLotLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo0OToxOFrOGLotLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1NDQ0Nw==", "bodyText": "Here, too.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414854447", "createdAt": "2020-04-24T20:49:18Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryScanPlan.java", "diffHunk": "@@ -165,4 +174,13 @@ public void logPlanStructure(StoreTimer timer) {\n     public int getComplexity() {\n         return 1;\n     }\n+\n+    @Override\n+    public PlannerGraphBuilder<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge> showYourself() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59cdee0e9af7776e33a42233f27cd24835286547"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODk4NTk1OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/InternalPlannerGraphProperty.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo1MDo1MFrOGLowDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo1MDo1MFrOGLowDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1NTE4Mw==", "bodyText": "Here, too.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414855183", "createdAt": "2020-04-24T20:50:50Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/InternalPlannerGraphProperty.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*\n+ * InternalPlannerGraphProperty.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.apple.foundationdb.record.query.plan.temp.GraphExporter.ClusterProvider;\n+import com.apple.foundationdb.record.query.plan.temp.GraphExporter.ComponentAttributeProvider;\n+import com.apple.foundationdb.record.query.plan.temp.GraphExporter.ComponentNameProvider;\n+import com.apple.foundationdb.record.query.plan.temp.PlannerGraph.PlannerGraphBuilder;\n+import com.google.common.base.Throwables;\n+import com.google.common.base.Verify;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.escape.Escaper;\n+import com.google.common.html.HtmlEscapers;\n+import com.google.common.io.CharStreams;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.awt.Desktop;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class to hold a graph for explain, optimization, and rewrite purposes.\n+ */\n+@SuppressWarnings({\"UnstableApiUsage\"})\n+public class InternalPlannerGraphProperty implements PlannerProperty<PlannerGraph<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge>> {\n+    /**\n+     * Node class functioning as parent for any nodes in the network.\n+     */\n+    public static class Node extends PlannerGraph.AbstractNode {\n+        public Node(final String name) {\n+            this(name, null);\n+        }\n+\n+        public Node(final String name, @Nullable final String expression) {\n+            super(name, expression);\n+        }\n+\n+        @Override\n+        public Map<String, String> getAttributes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59cdee0e9af7776e33a42233f27cd24835286547"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODk4NjUyOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/InternalPlannerGraphProperty.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo1MTowMFrOGLowXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo1MTowMFrOGLowXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1NTI2Mw==", "bodyText": "I think a bunch of methods in this file still need nullability annotations.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414855263", "createdAt": "2020-04-24T20:51:00Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/InternalPlannerGraphProperty.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*\n+ * InternalPlannerGraphProperty.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.apple.foundationdb.record.query.plan.temp.GraphExporter.ClusterProvider;\n+import com.apple.foundationdb.record.query.plan.temp.GraphExporter.ComponentAttributeProvider;\n+import com.apple.foundationdb.record.query.plan.temp.GraphExporter.ComponentNameProvider;\n+import com.apple.foundationdb.record.query.plan.temp.PlannerGraph.PlannerGraphBuilder;\n+import com.google.common.base.Throwables;\n+import com.google.common.base.Verify;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.escape.Escaper;\n+import com.google.common.html.HtmlEscapers;\n+import com.google.common.io.CharStreams;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.awt.Desktop;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class to hold a graph for explain, optimization, and rewrite purposes.\n+ */\n+@SuppressWarnings({\"UnstableApiUsage\"})\n+public class InternalPlannerGraphProperty implements PlannerProperty<PlannerGraph<InternalPlannerGraphProperty.Node, InternalPlannerGraphProperty.Edge>> {\n+    /**\n+     * Node class functioning as parent for any nodes in the network.\n+     */\n+    public static class Node extends PlannerGraph.AbstractNode {\n+        public Node(final String name) {\n+            this(name, null);\n+        }\n+\n+        public Node(final String name, @Nullable final String expression) {\n+            super(name, expression);\n+        }\n+\n+        @Override\n+        public Map<String, String> getAttributes() {\n+            final Map<String, String> superAttributes = super.getAttributes();\n+            return ImmutableMap\n+                    .<String, String>builder()\n+                    .putAll(superAttributes)\n+                    .put(\"color\", getColor())\n+                    .put(\"shape\", getShape())\n+                    .put(\"style\", getStyle())\n+                    .put(\"fillcolor\", getFillColor())\n+                    .put(\"fontname\", \"courier\")\n+                    .build();\n+        }\n+\n+        @Override\n+        public String getLabel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59cdee0e9af7776e33a42233f27cd24835286547"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODk5MTk1OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo1MjozNVrOGLozeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo1MjozNVrOGLozeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1NjA1OA==", "bodyText": "These inner classes, too.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414856058", "createdAt": "2020-04-24T20:52:35Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerGraph.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * PlannerGraph.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan.temp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.EndpointPair;\n+import com.google.common.graph.ImmutableNetwork;\n+import com.google.common.graph.MutableNetwork;\n+import com.google.common.graph.Network;\n+import com.google.common.graph.NetworkBuilder;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.ArrayDeque;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+\n+/**\n+ * The planner graph class. Objects of this class are computed by {@link InternalPlannerGraphProperty},\n+ * i.e., they get computed by walking a {@link PlannerExpression} DAG.\n+ *\n+ * Once computed, the property is immutable.\n+ *\n+ * @param <N> node type\n+ * @param <E> edge type\n+ */\n+@SuppressWarnings(\"UnstableApiUsage\") // Guava Graph API\n+public class PlannerGraph<N extends PlannerGraph.AbstractNode, E extends PlannerGraph.AbstractEdge> {\n+\n+    /**\n+     * The root of this graph.\n+     */\n+    @Nonnull\n+    private final N root;\n+\n+    /**\n+     * The underlying network graph representation.\n+     */\n+    @Nonnull\n+    private final ImmutableNetwork<N, E> network;\n+\n+    /**\n+     * Builder class for planner graph. Used during computation of the planner expression property.\n+     * Note that each PlannerGraph will have a root which is mandatory.\n+     * @param <N> node type\n+     * @param <E> edge type\n+     */\n+    public static class PlannerGraphBuilder<N extends AbstractNode, E extends AbstractEdge> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59cdee0e9af7776e33a42233f27cd24835286547"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODk5Njk3OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo1Mzo1OFrOGLo2SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo1Mzo1OFrOGLo2SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1Njc3Nw==", "bodyText": "This looks great!", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/892#discussion_r414856777", "createdAt": "2020-04-24T20:53:58Z", "author": {"login": "nschiefer"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/PlannerExpression.java", "diffHunk": "@@ -107,5 +108,29 @@\n         }\n         return null;\n     }\n+\n+    /**\n+     * This is needed for graph integration into IntelliJ as IntelliJ only ever evaluates selfish methods. Add this\n+     * method as a custom renderer for the type {@link PlannerExpression}. During debugging you can then for instance\n+     * click show() on an instance and enjoy the query graph it represents rendered in you standard browser.\n+     *\n+     * @return the String \"Done.\"\n+     */\n+    @Nonnull\n+    default String show() {\n+        return InternalPlannerGraphProperty.show(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59cdee0e9af7776e33a42233f27cd24835286547"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4862, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}