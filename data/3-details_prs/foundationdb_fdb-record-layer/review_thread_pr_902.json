{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyOTU5ODE1", "number": 902, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNDo0MzozOVrODxemRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjo1NzozN1rOD-a0_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjA4MTM1OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexMaintainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNDo0MzozOVrOGE-BtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMzowNTozNVrOGHfdDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg2MzczMg==", "bodyText": "Maybe I can just change the signature of updateUniquenessViolations rather than adding a new one.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r407863732", "createdAt": "2020-04-14T04:43:39Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexMaintainer.java", "diffHunk": "@@ -114,11 +114,28 @@ public Subspace getSecondarySubspace() {\n      * @param valueKey the indexed key that is (apparently) not unique\n      * @param primaryKey the primary key of one record that is causing a violation\n      * @param existingKey the primary key of another record that is causing a violation (or <code>null</code> if none specified)\n-     * @param remove <code>true</code> if removing the violation and <code>false</code> if adding it\n+     * @param remove <code>true</code> if removing the violation and <code>false</code> if adding it. When\n+     * <code>true</code>, it is favored use {@link #removeUniquenessViolationsAsync(Tuple, Tuple)} instead.\n      */\n     @Nonnull\n     public abstract void updateUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey, boolean remove);\n \n+    /**\n+     * Remove a uniqueness violation within the database. This is used to keep track of\n+     * uniqueness violations that occur when an index is in write-only mode, both during\n+     * the built itself and by other writes. This means that the writes will succeed, but\n+     * it will cause a later attempt to make the index readable to fail.\n+     *\n+     * This will remove the last uniqueness violation entry when removing the second last one under the same\n+     * <code>valueKey</code>, in contrast to {@link #updateUniquenessViolations(Tuple, Tuple, Tuple, boolean)} which\n+     * may not.\n+     * @param valueKey the indexed key that is (apparently) not unique\n+     * @param primaryKey the primary key of one record that is causing a violation\n+     * @return a future that is complete when the uniqueness violation is removed\n+     */\n+    @Nonnull\n+    public abstract CompletableFuture<Void> removeUniquenessViolationsAsync(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edfad1aae47d67c4f91f9042283550d8815e82cb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwODU1OQ==", "bodyText": "Yeah, it does seem a little weird that updateUniquenessViolations(valueKey, primaryKey, existingKey, false) doesn't call this, other than the fact that it would require async-ness.\nI think it's probably better, in the long run, to have the Async version of updateUniquenessViolations be the thing. So, either we do something like just break the API by making it async (maybe on 2.9?) or do something like add an Async version, and by default, the async version calls the synchronous version and then returns AsyncUtil.DONE, but then we reverse that in the StandardIndexMaintainer.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r410508559", "createdAt": "2020-04-17T23:05:35Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexMaintainer.java", "diffHunk": "@@ -114,11 +114,28 @@ public Subspace getSecondarySubspace() {\n      * @param valueKey the indexed key that is (apparently) not unique\n      * @param primaryKey the primary key of one record that is causing a violation\n      * @param existingKey the primary key of another record that is causing a violation (or <code>null</code> if none specified)\n-     * @param remove <code>true</code> if removing the violation and <code>false</code> if adding it\n+     * @param remove <code>true</code> if removing the violation and <code>false</code> if adding it. When\n+     * <code>true</code>, it is favored use {@link #removeUniquenessViolationsAsync(Tuple, Tuple)} instead.\n      */\n     @Nonnull\n     public abstract void updateUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey, boolean remove);\n \n+    /**\n+     * Remove a uniqueness violation within the database. This is used to keep track of\n+     * uniqueness violations that occur when an index is in write-only mode, both during\n+     * the built itself and by other writes. This means that the writes will succeed, but\n+     * it will cause a later attempt to make the index readable to fail.\n+     *\n+     * This will remove the last uniqueness violation entry when removing the second last one under the same\n+     * <code>valueKey</code>, in contrast to {@link #updateUniquenessViolations(Tuple, Tuple, Tuple, boolean)} which\n+     * may not.\n+     * @param valueKey the indexed key that is (apparently) not unique\n+     * @param primaryKey the primary key of one record that is causing a violation\n+     * @return a future that is complete when the uniqueness violation is removed\n+     */\n+    @Nonnull\n+    public abstract CompletableFuture<Void> removeUniquenessViolationsAsync(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg2MzczMg=="}, "originalCommit": {"oid": "edfad1aae47d67c4f91f9042283550d8815e82cb"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODc2Njc5OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/StandardIndexMaintainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMzowOTo1MlrOGHfgsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMDoxMzoyNlrOGJdtkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwOTQ5MA==", "bodyText": "I think we probably also want to set the streaming mode on this scan properties to CursorStreamingMode.WANT_ALL", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r410509490", "createdAt": "2020-04-17T23:09:52Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/StandardIndexMaintainer.java", "diffHunk": "@@ -359,6 +363,26 @@ public void updateUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple p\n         }\n     }\n \n+    @Nonnull\n+    @Override\n+    public CompletableFuture<Void> removeUniquenessViolationsAsync(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey) {\n+        Subspace uniqueValueSubspace = state.store.indexUniquenessViolationsSubspace(state.index).subspace(valueKey);\n+        state.transaction.clear(uniqueValueSubspace.pack(primaryKey));\n+        // Remove the last entry if it was the second last entry in the unique value subspace.\n+        RecordCursor<KeyValue> uniquenessViolationEntries = KeyValueCursor.Builder.withSubspace(uniqueValueSubspace)\n+                .setContext(state.context)\n+                .setScanProperties(new ScanProperties(ExecuteProperties.newBuilder()\n+                        .setReturnedRowLimit(2)\n+                        .setIsolationLevel(IsolationLevel.SERIALIZABLE)\n+                        .build()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edfad1aae47d67c4f91f9042283550d8815e82cb"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3NzE3MQ==", "bodyText": "Fancy! Done.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r412577171", "createdAt": "2020-04-22T00:13:26Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/StandardIndexMaintainer.java", "diffHunk": "@@ -359,6 +363,26 @@ public void updateUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple p\n         }\n     }\n \n+    @Nonnull\n+    @Override\n+    public CompletableFuture<Void> removeUniquenessViolationsAsync(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey) {\n+        Subspace uniqueValueSubspace = state.store.indexUniquenessViolationsSubspace(state.index).subspace(valueKey);\n+        state.transaction.clear(uniqueValueSubspace.pack(primaryKey));\n+        // Remove the last entry if it was the second last entry in the unique value subspace.\n+        RecordCursor<KeyValue> uniquenessViolationEntries = KeyValueCursor.Builder.withSubspace(uniqueValueSubspace)\n+                .setContext(state.context)\n+                .setScanProperties(new ScanProperties(ExecuteProperties.newBuilder()\n+                        .setReturnedRowLimit(2)\n+                        .setIsolationLevel(IsolationLevel.SERIALIZABLE)\n+                        .build()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwOTQ5MA=="}, "originalCommit": {"oid": "edfad1aae47d67c4f91f9042283550d8815e82cb"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODc3MTIwOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankIndexMaintainer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMzoxMjo0OVrOGHfjPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjo1MDowNFrOGO8_aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUxMDE0Mg==", "bodyText": "Is there a reason to not do something like:\nif (!MoreAsyncUtil.isCompletedNormally(updateOrdinaryIndex)) {\n    futures.add(updateOridnaryIndex);\n}\nThen I think it would look for uniqueness violations in parallel with updating the ranked set. (And the check for if it's completed normally is just to avoid waiting on done futures, but it should be optional.)\nI didn't leave a comment about it, but I think the same thing applies to the TimeWindowLeaderboardIndexMaintainer.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r410510142", "createdAt": "2020-04-17T23:12:49Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankIndexMaintainer.java", "diffHunk": "@@ -116,7 +116,7 @@ public RankIndexMaintainer(IndexMaintainerState state) {\n         final List<CompletableFuture<Void>> futures = new ArrayList<>();\n         for (IndexEntry indexEntry : indexEntries) {\n             // First maintain an ordinary B-tree index by score.\n-            updateOneKey(savedRecord, remove, indexEntry);\n+            CompletableFuture<Void> updateOrdinaryIndex = updateOneKeyAsync(savedRecord, remove, indexEntry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edfad1aae47d67c4f91f9042283550d8815e82cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0ODQwNA==", "bodyText": "Oh, I didn't know the rank set was not dependent on the original index. Fixed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r412548404", "createdAt": "2020-04-21T22:59:01Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankIndexMaintainer.java", "diffHunk": "@@ -116,7 +116,7 @@ public RankIndexMaintainer(IndexMaintainerState state) {\n         final List<CompletableFuture<Void>> futures = new ArrayList<>();\n         for (IndexEntry indexEntry : indexEntries) {\n             // First maintain an ordinary B-tree index by score.\n-            updateOneKey(savedRecord, remove, indexEntry);\n+            CompletableFuture<Void> updateOrdinaryIndex = updateOneKeyAsync(savedRecord, remove, indexEntry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUxMDE0Mg=="}, "originalCommit": {"oid": "edfad1aae47d67c4f91f9042283550d8815e82cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzMjUyMA==", "bodyText": "The actual keys aren't dependent, for sure. In theory, we \"shouldn't\" update the keys in the ranked set unless the regular Index update succeeds, which is what the precommit check is for.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r418332520", "createdAt": "2020-04-30T22:50:04Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankIndexMaintainer.java", "diffHunk": "@@ -116,7 +116,7 @@ public RankIndexMaintainer(IndexMaintainerState state) {\n         final List<CompletableFuture<Void>> futures = new ArrayList<>();\n         for (IndexEntry indexEntry : indexEntries) {\n             // First maintain an ordinary B-tree index by score.\n-            updateOneKey(savedRecord, remove, indexEntry);\n+            CompletableFuture<Void> updateOrdinaryIndex = updateOneKeyAsync(savedRecord, remove, indexEntry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUxMDE0Mg=="}, "originalCommit": {"oid": "edfad1aae47d67c4f91f9042283550d8815e82cb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTY3OTE4OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/StandardIndexMaintainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzozMTo1NlrOGIUl8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzozMTo1NlrOGIUl8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3OTE4Nw==", "bodyText": "I think I'm ok with this change, but I do know of at least one down-stream project that overrides updateOneKey.  If we were really concerned about compatibility, this could be changed to something like:\nprotected <M extends Message> CompletableFuture<Void> updateOneKeyAsync(@Nonnull final FDBIndexableRecord<M> savedRecord,\n                                                                        final boolean remove,\n                                                                        @Nonnull final IndexEntry indexEntry) {\n    updateOneKey(savedRecord, remove, indexEntry);\n    return postUpdateOneKeyAsync(savedRecord, remove, indexEntry).\n}\n\nThis is kind of convoluted and gross though, so I'm not strongly advocating for it....just that it is a consideration.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r411379187", "createdAt": "2020-04-20T13:31:56Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/StandardIndexMaintainer.java", "diffHunk": "@@ -304,10 +304,11 @@ public boolean skipUpdateForUnchangedKeys() {\n      * @param savedRecord the record being indexed\n      * @param remove <code>true</code> if removing from index\n      * @param indexEntry the entry for the index to be updated\n+     * @return a future completed when the key is updated\n      */\n-    protected <M extends Message> void updateOneKey(@Nonnull final FDBIndexableRecord<M> savedRecord,\n-                                                    final boolean remove,\n-                                                    @Nonnull final IndexEntry indexEntry) {\n+    protected <M extends Message> CompletableFuture<Void> updateOneKeyAsync(@Nonnull final FDBIndexableRecord<M> savedRecord,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edfad1aae47d67c4f91f9042283550d8815e82cb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTY5ODkyOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/StandardIndexMaintainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzozNjowN1rOGIUxnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzozNjowN1rOGIUxnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM4MjE3NQ==", "bodyText": "Not for this PR, but I think it would make some sense to cache subspace computations that happen at high frequently (e.g. on every record that is accessed or changed), so we don't compute state.store.indexUniquenessViolationsSubspace(state.index) on every key.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r411382175", "createdAt": "2020-04-20T13:36:07Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/StandardIndexMaintainer.java", "diffHunk": "@@ -359,6 +363,26 @@ public void updateUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple p\n         }\n     }\n \n+    @Nonnull\n+    @Override\n+    public CompletableFuture<Void> removeUniquenessViolationsAsync(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey) {\n+        Subspace uniqueValueSubspace = state.store.indexUniquenessViolationsSubspace(state.index).subspace(valueKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edfad1aae47d67c4f91f9042283550d8815e82cb"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTcwNjYyOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexMaintainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzozNzozN1rOGIU2KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjowMzowM1rOGJf-ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM4MzMzNw==", "bodyText": "<p>This will", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r411383337", "createdAt": "2020-04-20T13:37:37Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexMaintainer.java", "diffHunk": "@@ -114,11 +114,28 @@ public Subspace getSecondarySubspace() {\n      * @param valueKey the indexed key that is (apparently) not unique\n      * @param primaryKey the primary key of one record that is causing a violation\n      * @param existingKey the primary key of another record that is causing a violation (or <code>null</code> if none specified)\n-     * @param remove <code>true</code> if removing the violation and <code>false</code> if adding it\n+     * @param remove <code>true</code> if removing the violation and <code>false</code> if adding it. When\n+     * <code>true</code>, it is favored use {@link #removeUniquenessViolationsAsync(Tuple, Tuple)} instead.\n      */\n     @Nonnull\n     public abstract void updateUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey, boolean remove);\n \n+    /**\n+     * Remove a uniqueness violation within the database. This is used to keep track of\n+     * uniqueness violations that occur when an index is in write-only mode, both during\n+     * the built itself and by other writes. This means that the writes will succeed, but\n+     * it will cause a later attempt to make the index readable to fail.\n+     *\n+     * This will remove the last uniqueness violation entry when removing the second last one under the same", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edfad1aae47d67c4f91f9042283550d8815e82cb"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxNDMwMg==", "bodyText": "Done.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r412614302", "createdAt": "2020-04-22T02:03:03Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexMaintainer.java", "diffHunk": "@@ -114,11 +114,28 @@ public Subspace getSecondarySubspace() {\n      * @param valueKey the indexed key that is (apparently) not unique\n      * @param primaryKey the primary key of one record that is causing a violation\n      * @param existingKey the primary key of another record that is causing a violation (or <code>null</code> if none specified)\n-     * @param remove <code>true</code> if removing the violation and <code>false</code> if adding it\n+     * @param remove <code>true</code> if removing the violation and <code>false</code> if adding it. When\n+     * <code>true</code>, it is favored use {@link #removeUniquenessViolationsAsync(Tuple, Tuple)} instead.\n      */\n     @Nonnull\n     public abstract void updateUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey, boolean remove);\n \n+    /**\n+     * Remove a uniqueness violation within the database. This is used to keep track of\n+     * uniqueness violations that occur when an index is in write-only mode, both during\n+     * the built itself and by other writes. This means that the writes will succeed, but\n+     * it will cause a later attempt to make the index readable to fail.\n+     *\n+     * This will remove the last uniqueness violation entry when removing the second last one under the same", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM4MzMzNw=="}, "originalCommit": {"oid": "edfad1aae47d67c4f91f9042283550d8815e82cb"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTcxMjIzOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexMaintainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzozODo0MVrOGIU5UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzozODo0MVrOGIU5UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM4NDE0NQ==", "bodyText": "It would be really useful too have a description of why this has to be done (TBH, I'm not clear on it myself)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r411384145", "createdAt": "2020-04-20T13:38:41Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexMaintainer.java", "diffHunk": "@@ -114,11 +114,28 @@ public Subspace getSecondarySubspace() {\n      * @param valueKey the indexed key that is (apparently) not unique\n      * @param primaryKey the primary key of one record that is causing a violation\n      * @param existingKey the primary key of another record that is causing a violation (or <code>null</code> if none specified)\n-     * @param remove <code>true</code> if removing the violation and <code>false</code> if adding it\n+     * @param remove <code>true</code> if removing the violation and <code>false</code> if adding it. When\n+     * <code>true</code>, it is favored use {@link #removeUniquenessViolationsAsync(Tuple, Tuple)} instead.\n      */\n     @Nonnull\n     public abstract void updateUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey, boolean remove);\n \n+    /**\n+     * Remove a uniqueness violation within the database. This is used to keep track of\n+     * uniqueness violations that occur when an index is in write-only mode, both during\n+     * the built itself and by other writes. This means that the writes will succeed, but\n+     * it will cause a later attempt to make the index readable to fail.\n+     *\n+     * This will remove the last uniqueness violation entry when removing the second last one under the same\n+     * <code>valueKey</code>, in contrast to {@link #updateUniquenessViolations(Tuple, Tuple, Tuple, boolean)} which\n+     * may not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edfad1aae47d67c4f91f9042283550d8815e82cb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjYwMzE2OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/StandardIndexMaintainer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1NjoxMFrOGO6BEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoxOTo1NlrOGQKL3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4Mzc5Mg==", "bodyText": "Could we just return the future considering updateOneKey is now async?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r418283792", "createdAt": "2020-04-30T20:56:10Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/StandardIndexMaintainer.java", "diffHunk": "@@ -345,18 +350,74 @@ public boolean skipUpdateForUnchangedKeys() {\n                 state.store.countKeyValue(FDBStoreTimer.Counts.SAVE_INDEX_KEY, FDBStoreTimer.Counts.SAVE_INDEX_KEY_BYTES, FDBStoreTimer.Counts.SAVE_INDEX_VALUE_BYTES,\n                         keyBytes, valueBytes);\n             }\n+            return AsyncUtil.DONE;\n         }\n     }\n \n-    @Override\n-    @Nonnull\n-    public void updateUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey, boolean remove) {\n+    protected <M extends Message> void checkUniqueness(@Nonnull FDBIndexableRecord<M> savedRecord, @Nonnull IndexEntry indexEntry) {\n+        Tuple valueKey = indexEntry.getKey();\n+        AsyncIterable<KeyValue> kvs = state.transaction.getRange(state.indexSubspace.range(valueKey));\n+        Tuple primaryKey = savedRecord.getPrimaryKey();\n+        final CompletableFuture<Void> checker = state.store.getContext().instrument(FDBStoreTimer.Events.CHECK_INDEX_UNIQUENESS,\n+                AsyncUtil.forEach(kvs, kv -> {\n+                    Tuple existingEntry = unpackKey(getIndexSubspace(), kv);\n+                    Tuple existingKey = state.index.getEntryPrimaryKey(existingEntry);\n+                    if (!TupleHelpers.equals(primaryKey, existingKey)) {\n+                        if (state.store.isIndexWriteOnly(state.index)) {\n+                            addUniquenessViolations(valueKey, primaryKey, existingKey);\n+                            addUniquenessViolations(valueKey, existingKey, primaryKey);\n+                        } else {\n+                            throw new RecordIndexUniquenessViolation(state.index, indexEntry, primaryKey, existingKey);\n+                        }\n+                    }\n+                }, getExecutor()));\n+        state.store.getRecordContext().addCommitCheck(checker);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741e609983655554be41ed5a77f9f11ce5411ae7"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NTA2NQ==", "bodyText": "I believe the purpose of making it a pre-commit check is that it means that if someone violates a uniqueness constraint, then we don't accidentally commit the transaction.\nI could see an argument being made, though, that we'd want to fail fast...if we can. I think we definitely want preserve the behavior where committing is not allowed if there's a uniqueness constraint violation caused by a record insert, though.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r418345065", "createdAt": "2020-04-30T23:28:46Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/StandardIndexMaintainer.java", "diffHunk": "@@ -345,18 +350,74 @@ public boolean skipUpdateForUnchangedKeys() {\n                 state.store.countKeyValue(FDBStoreTimer.Counts.SAVE_INDEX_KEY, FDBStoreTimer.Counts.SAVE_INDEX_KEY_BYTES, FDBStoreTimer.Counts.SAVE_INDEX_VALUE_BYTES,\n                         keyBytes, valueBytes);\n             }\n+            return AsyncUtil.DONE;\n         }\n     }\n \n-    @Override\n-    @Nonnull\n-    public void updateUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey, boolean remove) {\n+    protected <M extends Message> void checkUniqueness(@Nonnull FDBIndexableRecord<M> savedRecord, @Nonnull IndexEntry indexEntry) {\n+        Tuple valueKey = indexEntry.getKey();\n+        AsyncIterable<KeyValue> kvs = state.transaction.getRange(state.indexSubspace.range(valueKey));\n+        Tuple primaryKey = savedRecord.getPrimaryKey();\n+        final CompletableFuture<Void> checker = state.store.getContext().instrument(FDBStoreTimer.Events.CHECK_INDEX_UNIQUENESS,\n+                AsyncUtil.forEach(kvs, kv -> {\n+                    Tuple existingEntry = unpackKey(getIndexSubspace(), kv);\n+                    Tuple existingKey = state.index.getEntryPrimaryKey(existingEntry);\n+                    if (!TupleHelpers.equals(primaryKey, existingKey)) {\n+                        if (state.store.isIndexWriteOnly(state.index)) {\n+                            addUniquenessViolations(valueKey, primaryKey, existingKey);\n+                            addUniquenessViolations(valueKey, existingKey, primaryKey);\n+                        } else {\n+                            throw new RecordIndexUniquenessViolation(state.index, indexEntry, primaryKey, existingKey);\n+                        }\n+                    }\n+                }, getExecutor()));\n+        state.store.getRecordContext().addCommitCheck(checker);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4Mzc5Mg=="}, "originalCommit": {"oid": "741e609983655554be41ed5a77f9f11ce5411ae7"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NTM3MA==", "bodyText": "(It's possibly worth memorializing this with a comment--something like, \"add a pre-commit check to prevent accidentally committing and getting into an invalid state\" or something.)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r418345370", "createdAt": "2020-04-30T23:29:37Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/StandardIndexMaintainer.java", "diffHunk": "@@ -345,18 +350,74 @@ public boolean skipUpdateForUnchangedKeys() {\n                 state.store.countKeyValue(FDBStoreTimer.Counts.SAVE_INDEX_KEY, FDBStoreTimer.Counts.SAVE_INDEX_KEY_BYTES, FDBStoreTimer.Counts.SAVE_INDEX_VALUE_BYTES,\n                         keyBytes, valueBytes);\n             }\n+            return AsyncUtil.DONE;\n         }\n     }\n \n-    @Override\n-    @Nonnull\n-    public void updateUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey, boolean remove) {\n+    protected <M extends Message> void checkUniqueness(@Nonnull FDBIndexableRecord<M> savedRecord, @Nonnull IndexEntry indexEntry) {\n+        Tuple valueKey = indexEntry.getKey();\n+        AsyncIterable<KeyValue> kvs = state.transaction.getRange(state.indexSubspace.range(valueKey));\n+        Tuple primaryKey = savedRecord.getPrimaryKey();\n+        final CompletableFuture<Void> checker = state.store.getContext().instrument(FDBStoreTimer.Events.CHECK_INDEX_UNIQUENESS,\n+                AsyncUtil.forEach(kvs, kv -> {\n+                    Tuple existingEntry = unpackKey(getIndexSubspace(), kv);\n+                    Tuple existingKey = state.index.getEntryPrimaryKey(existingEntry);\n+                    if (!TupleHelpers.equals(primaryKey, existingKey)) {\n+                        if (state.store.isIndexWriteOnly(state.index)) {\n+                            addUniquenessViolations(valueKey, primaryKey, existingKey);\n+                            addUniquenessViolations(valueKey, existingKey, primaryKey);\n+                        } else {\n+                            throw new RecordIndexUniquenessViolation(state.index, indexEntry, primaryKey, existingKey);\n+                        }\n+                    }\n+                }, getExecutor()));\n+        state.store.getRecordContext().addCommitCheck(checker);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4Mzc5Mg=="}, "originalCommit": {"oid": "741e609983655554be41ed5a77f9f11ce5411ae7"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5NzI3Nw==", "bodyText": "Added the comment.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r419597277", "createdAt": "2020-05-04T17:19:56Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/StandardIndexMaintainer.java", "diffHunk": "@@ -345,18 +350,74 @@ public boolean skipUpdateForUnchangedKeys() {\n                 state.store.countKeyValue(FDBStoreTimer.Counts.SAVE_INDEX_KEY, FDBStoreTimer.Counts.SAVE_INDEX_KEY_BYTES, FDBStoreTimer.Counts.SAVE_INDEX_VALUE_BYTES,\n                         keyBytes, valueBytes);\n             }\n+            return AsyncUtil.DONE;\n         }\n     }\n \n-    @Override\n-    @Nonnull\n-    public void updateUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey, boolean remove) {\n+    protected <M extends Message> void checkUniqueness(@Nonnull FDBIndexableRecord<M> savedRecord, @Nonnull IndexEntry indexEntry) {\n+        Tuple valueKey = indexEntry.getKey();\n+        AsyncIterable<KeyValue> kvs = state.transaction.getRange(state.indexSubspace.range(valueKey));\n+        Tuple primaryKey = savedRecord.getPrimaryKey();\n+        final CompletableFuture<Void> checker = state.store.getContext().instrument(FDBStoreTimer.Events.CHECK_INDEX_UNIQUENESS,\n+                AsyncUtil.forEach(kvs, kv -> {\n+                    Tuple existingEntry = unpackKey(getIndexSubspace(), kv);\n+                    Tuple existingKey = state.index.getEntryPrimaryKey(existingEntry);\n+                    if (!TupleHelpers.equals(primaryKey, existingKey)) {\n+                        if (state.store.isIndexWriteOnly(state.index)) {\n+                            addUniquenessViolations(valueKey, primaryKey, existingKey);\n+                            addUniquenessViolations(valueKey, existingKey, primaryKey);\n+                        } else {\n+                            throw new RecordIndexUniquenessViolation(state.index, indexEntry, primaryKey, existingKey);\n+                        }\n+                    }\n+                }, getExecutor()));\n+        state.store.getRecordContext().addCommitCheck(checker);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4Mzc5Mg=="}, "originalCommit": {"oid": "741e609983655554be41ed5a77f9f11ce5411ae7"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjk1MTY3OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/StandardIndexMaintainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzowNTo1MFrOGO9T0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoyMDoyN1rOGQKNDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzNzc0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void addUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey) {\n          \n          \n            \n                protected void addUniquenessViolation(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey) {", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r418337746", "createdAt": "2020-04-30T23:05:50Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/StandardIndexMaintainer.java", "diffHunk": "@@ -352,20 +354,54 @@ public boolean skipUpdateForUnchangedKeys() {\n         }\n     }\n \n-    @Override\n-    @Nonnull\n-    public void updateUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey, boolean remove) {\n+    protected <M extends Message> void checkUniqueness(@Nonnull FDBIndexableRecord<M> savedRecord, @Nonnull IndexEntry indexEntry) {\n+        Tuple valueKey = indexEntry.getKey();\n+        AsyncIterable<KeyValue> kvs = state.transaction.getRange(state.indexSubspace.range(valueKey));\n+        Tuple primaryKey = savedRecord.getPrimaryKey();\n+        final CompletableFuture<Void> checker = state.store.getContext().instrument(FDBStoreTimer.Events.CHECK_INDEX_UNIQUENESS,\n+                AsyncUtil.forEach(kvs, kv -> {\n+                    Tuple existingEntry = unpackKey(getIndexSubspace(), kv);\n+                    Tuple existingKey = state.index.getEntryPrimaryKey(existingEntry);\n+                    if (!TupleHelpers.equals(primaryKey, existingKey)) {\n+                        if (state.store.isIndexWriteOnly(state.index)) {\n+                            addUniquenessViolations(valueKey, primaryKey, existingKey);\n+                            addUniquenessViolations(valueKey, existingKey, primaryKey);\n+                        } else {\n+                            throw new RecordIndexUniquenessViolation(state.index, indexEntry, primaryKey, existingKey);\n+                        }\n+                    }\n+                }, getExecutor()));\n+        state.store.getRecordContext().addCommitCheck(checker);\n+    }\n+\n+    /**\n+     * Add a uniqueness violation within the database. This is used to keep track of\n+     * uniqueness violations that occur when an index is in write-only mode, both during\n+     * the built itself and by other writes. This means that the writes will succeed, but\n+     * it will cause a later attempt to make the index readable to fail.\n+     * @param valueKey the indexed key that is (apparently) not unique\n+     * @param primaryKey the primary key of one record that is causing a violation\n+     * @param existingKey the primary key of another record that is causing a violation (or <code>null</code> if none specified)\n+     */\n+    protected void addUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741e609983655554be41ed5a77f9f11ce5411ae7"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5NzU4Mw==", "bodyText": "Fixed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r419597583", "createdAt": "2020-05-04T17:20:27Z", "author": {"login": "nblintao"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/StandardIndexMaintainer.java", "diffHunk": "@@ -352,20 +354,54 @@ public boolean skipUpdateForUnchangedKeys() {\n         }\n     }\n \n-    @Override\n-    @Nonnull\n-    public void updateUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey, boolean remove) {\n+    protected <M extends Message> void checkUniqueness(@Nonnull FDBIndexableRecord<M> savedRecord, @Nonnull IndexEntry indexEntry) {\n+        Tuple valueKey = indexEntry.getKey();\n+        AsyncIterable<KeyValue> kvs = state.transaction.getRange(state.indexSubspace.range(valueKey));\n+        Tuple primaryKey = savedRecord.getPrimaryKey();\n+        final CompletableFuture<Void> checker = state.store.getContext().instrument(FDBStoreTimer.Events.CHECK_INDEX_UNIQUENESS,\n+                AsyncUtil.forEach(kvs, kv -> {\n+                    Tuple existingEntry = unpackKey(getIndexSubspace(), kv);\n+                    Tuple existingKey = state.index.getEntryPrimaryKey(existingEntry);\n+                    if (!TupleHelpers.equals(primaryKey, existingKey)) {\n+                        if (state.store.isIndexWriteOnly(state.index)) {\n+                            addUniquenessViolations(valueKey, primaryKey, existingKey);\n+                            addUniquenessViolations(valueKey, existingKey, primaryKey);\n+                        } else {\n+                            throw new RecordIndexUniquenessViolation(state.index, indexEntry, primaryKey, existingKey);\n+                        }\n+                    }\n+                }, getExecutor()));\n+        state.store.getRecordContext().addCommitCheck(checker);\n+    }\n+\n+    /**\n+     * Add a uniqueness violation within the database. This is used to keep track of\n+     * uniqueness violations that occur when an index is in write-only mode, both during\n+     * the built itself and by other writes. This means that the writes will succeed, but\n+     * it will cause a later attempt to make the index readable to fail.\n+     * @param valueKey the indexed key that is (apparently) not unique\n+     * @param primaryKey the primary key of one record that is causing a violation\n+     * @param existingKey the primary key of another record that is causing a violation (or <code>null</code> if none specified)\n+     */\n+    protected void addUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzNzc0Ng=="}, "originalCommit": {"oid": "741e609983655554be41ed5a77f9f11ce5411ae7"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjk4Nzc2OnYy", "diffSide": "LEFT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexMaintainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzoyMjo0NVrOGO9ozw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzoyMjo0NVrOGO9ozw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MzExOQ==", "bodyText": "I suppose it's reasonable that IndexMaintainer wouldn't have a method for updating uniqueness violations and that that would be something that only lives within the implementations, though it wasn't entirely obvious to me that that's right.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r418343119", "createdAt": "2020-04-30T23:22:45Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexMaintainer.java", "diffHunk": "@@ -106,35 +106,6 @@ public Subspace getSecondarySubspace() {\n     public abstract <M extends Message> CompletableFuture<Void> update(@Nullable FDBIndexableRecord<M> oldRecord,\n                                                                        @Nullable FDBIndexableRecord<M> newRecord);\n \n-    /**\n-     * Remove or add a uniqueness violation within the database. This is used to keep track of\n-     * uniqueness violations that occur when an index is in write-only mode, both during\n-     * the built itself and by other writes. This means that the writes will succeed, but\n-     * it will cause a later attempt to make the index readable to fail.\n-     * @param valueKey the indexed key that is (apparently) not unique\n-     * @param primaryKey the primary key of one record that is causing a violation\n-     * @param existingKey the primary key of another record that is causing a violation (or <code>null</code> if none specified)\n-     * @param remove <code>true</code> if removing the violation and <code>false</code> if adding it. When\n-     * <code>true</code>, it is favored use {@link #removeUniquenessViolationsAsync(Tuple, Tuple)} instead.\n-     */\n-    @Nonnull\n-    public abstract void updateUniquenessViolations(@Nonnull Tuple valueKey, @Nonnull Tuple primaryKey, @Nullable Tuple existingKey, boolean remove);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741e609983655554be41ed5a77f9f11ce5411ae7"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Nzc3NjMxOnYy", "diffSide": "RIGHT", "path": "docs/ReleaseNotes.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjo1NjozMlrOGYgoLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjo1NjozMlrOGYgoLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM1MzU4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `FDBRecordStore` does not have `addUniquenessCheck` anymore, which is replaced by `checkUniqueness` in `StandardIndexMaintainer` now; `IndexMaintainer` does not have `updateUniquenessViolations` anymore, which is replaced by `addUniquenessViolation` and `removeUniquenessViolationsAsync` in `StandardIndexMaintainer` now; `StandardIndexMaintainer` now has `updateOneKeyAsync` in replace of `updateOneKey` .\n          \n          \n            \n            `FDBRecordStore` does not have `addUniquenessCheck` anymore, which is replaced by `checkUniqueness` in `StandardIndexMaintainer` now; `IndexMaintainer` does not have `updateUniquenessViolations` anymore, which is replaced by `addUniquenessViolation` and `removeUniquenessViolationsAsync` in `StandardIndexMaintainer` now; `StandardIndexMaintainer` now has `updateOneKeyAsync` in place of `updateOneKey` .", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r428353582", "createdAt": "2020-05-20T22:56:32Z", "author": {"login": "alecgrieser"}, "path": "docs/ReleaseNotes.md", "diffHunk": "@@ -12,11 +12,13 @@ This version of the Record Layer requires a FoundationDB server version of at le\n \n Additionally, builds for the project now require JDK 11. The project is still targetting JDK 1.8 for both source and binary compatibility, so projects importing the library that have not yet upgraded to the newer JDK should still be able to import the project as before, but developers may need to update their local development environment if they have not already done so. \n \n+`FDBRecordStore` does not have `addUniquenessCheck` anymore, which is replaced by `checkUniqueness` in `StandardIndexMaintainer` now; `IndexMaintainer` does not have `updateUniquenessViolations` anymore, which is replaced by `addUniquenessViolation` and `removeUniquenessViolationsAsync` in `StandardIndexMaintainer` now; `StandardIndexMaintainer` now has `updateOneKeyAsync` in replace of `updateOneKey` .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436c16c0b52a6bfb5a03b23c970f4ed44d80ca33"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Nzc3NzkyOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjo1NzoyMFrOGYgpMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjo1NzoyMFrOGYgpMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM1Mzg0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // The uniqueness violation entry of the remained primary key will de removed as part of\n          \n          \n            \n                            // The uniqueness violation entry of the remained primary key will be removed as part of", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r428353840", "createdAt": "2020-05-20T22:57:20Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java", "diffHunk": "@@ -1228,12 +1206,13 @@ public void addRecordWriteConflict(@Nonnull Tuple primaryKey) {\n \n     @Override\n     @Nonnull\n-    public CompletableFuture<Void> resolveUniquenessViolation(@Nonnull Index index, @Nonnull Tuple valueKey, @Nullable Tuple primaryKey) {\n+    public CompletableFuture<Void> resolveUniquenessViolation(@Nonnull Index index, @Nonnull Tuple valueKey, @Nullable Tuple remainPrimaryKey) {\n         return scanUniquenessViolations(index, valueKey).forEachAsync(uniquenessViolation -> {\n-            if (primaryKey == null || !primaryKey.equals(uniquenessViolation.getPrimaryKey())) {\n+            if (remainPrimaryKey == null || !remainPrimaryKey.equals(uniquenessViolation.getPrimaryKey())) {\n                 return deleteRecordAsync(uniquenessViolation.getPrimaryKey()).thenApply(ignore -> null);\n             } else {\n-                getIndexMaintainer(index).updateUniquenessViolations(valueKey, primaryKey, null, true);\n+                // The uniqueness violation entry of the remained primary key will de removed as part of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436c16c0b52a6bfb5a03b23c970f4ed44d80ca33"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Nzc3ODU1OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjo1NzozN1rOGYgpig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjo1NzozN1rOGYgpig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM1MzkzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // removeUniquenessViolationsAsync when deleting the second last record that contains the value key.\n          \n          \n            \n                            // removeUniquenessViolationsAsync when deleting the second to last record that contains the value key.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/902#discussion_r428353930", "createdAt": "2020-05-20T22:57:37Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java", "diffHunk": "@@ -1228,12 +1206,13 @@ public void addRecordWriteConflict(@Nonnull Tuple primaryKey) {\n \n     @Override\n     @Nonnull\n-    public CompletableFuture<Void> resolveUniquenessViolation(@Nonnull Index index, @Nonnull Tuple valueKey, @Nullable Tuple primaryKey) {\n+    public CompletableFuture<Void> resolveUniquenessViolation(@Nonnull Index index, @Nonnull Tuple valueKey, @Nullable Tuple remainPrimaryKey) {\n         return scanUniquenessViolations(index, valueKey).forEachAsync(uniquenessViolation -> {\n-            if (primaryKey == null || !primaryKey.equals(uniquenessViolation.getPrimaryKey())) {\n+            if (remainPrimaryKey == null || !remainPrimaryKey.equals(uniquenessViolation.getPrimaryKey())) {\n                 return deleteRecordAsync(uniquenessViolation.getPrimaryKey()).thenApply(ignore -> null);\n             } else {\n-                getIndexMaintainer(index).updateUniquenessViolations(valueKey, primaryKey, null, true);\n+                // The uniqueness violation entry of the remained primary key will de removed as part of\n+                // removeUniquenessViolationsAsync when deleting the second last record that contains the value key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436c16c0b52a6bfb5a03b23c970f4ed44d80ca33"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4869, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}