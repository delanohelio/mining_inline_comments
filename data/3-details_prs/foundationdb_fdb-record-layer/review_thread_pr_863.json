{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMzEwNDQ4", "number": 863, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMTozNjowMlrODpupCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMTo0Mjo0NFrODpusHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDgyMzc2OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/clientlog/KeySpaceCountTree.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMTozNjowMlrOF5FloA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMTo0NTo1OFrOF5FszA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNDcwNA==", "bodyText": "I'm not opposed to trying, but as #854 points out, this might be more clear as something the new planner develops.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/863#discussion_r395404704", "createdAt": "2020-03-20T01:36:02Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/clientlog/KeySpaceCountTree.java", "diffHunk": "@@ -503,23 +509,42 @@ protected TupleKeyCountTree newPrefixChild(@Nonnull Object prefix) {\n             }\n         }\n         if (recordTypeKeyspace != null) {\n-            KeyExpression primaryKey = recordTypeKeyspace.getRecordType().getPrimaryKey();\n-            if (distance + 1 < primaryKey.getColumnSize()) {\n-                return resolvePrimaryKeyField(context, resolvedParent, object, primaryKey, distance + 1);\n+            List<KeyExpression> storedPrimaryKeys = recordTypeKeyspace.getRecordType().getPrimaryKey().normalizeKeyForPositions();\n+            if (distance + 1 < storedPrimaryKeys.size()) {\n+                return resolvePrimaryKeyField(context, resolvedParent, object, storedPrimaryKeys.get(distance + 1), distance + 1);\n             }\n         }\n         if (indexKeyspace != null &&\n                 indexKeyspace.getParent() instanceof ResolvedRecordStoreKeyspace &&\n                 ((ResolvedRecordStoreKeyspace)indexKeyspace.getParent()).getRecordStoreKeyspace() == FDBRecordStoreKeyspace.INDEX) {\n             Index index = indexKeyspace.getIndex();\n-            KeyExpression indexExpression = index.getRootExpression();\n-            if (distance < indexExpression.getColumnSize()) {\n-                return resolveIndexField(context, resolvedParent, object, index, indexExpression, distance);\n+            List<KeyExpression> storedKeys = indexStoredKeys(index);\n+            if (distance < storedKeys.size()) {\n+                return resolveIndexField(context, resolvedParent, object, index, storedKeys.get(distance), distance);\n             }\n         }\n         return UNRESOLVED;\n     }\n \n+    // TODO: Get this from the IndexMaintainerFactory via some new interface (the IndexMaintainer needs a RecordStore).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "320f1ae4e411369d69e8099d1650ca1e6475900c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNTcyOQ==", "bodyText": "I actually think we don't want to add this to the index maintainer yet, given (a) the new planner might change things/make things better and (b) this API is still experimental, so adding to the index maintainer factories now seems maybe a little premature.\nI could see an argument, though, this method should be protected in case someone wants to provide an implementation for a custom index of their own devising by overriding this method.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/863#discussion_r395405729", "createdAt": "2020-03-20T01:41:39Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/clientlog/KeySpaceCountTree.java", "diffHunk": "@@ -503,23 +509,42 @@ protected TupleKeyCountTree newPrefixChild(@Nonnull Object prefix) {\n             }\n         }\n         if (recordTypeKeyspace != null) {\n-            KeyExpression primaryKey = recordTypeKeyspace.getRecordType().getPrimaryKey();\n-            if (distance + 1 < primaryKey.getColumnSize()) {\n-                return resolvePrimaryKeyField(context, resolvedParent, object, primaryKey, distance + 1);\n+            List<KeyExpression> storedPrimaryKeys = recordTypeKeyspace.getRecordType().getPrimaryKey().normalizeKeyForPositions();\n+            if (distance + 1 < storedPrimaryKeys.size()) {\n+                return resolvePrimaryKeyField(context, resolvedParent, object, storedPrimaryKeys.get(distance + 1), distance + 1);\n             }\n         }\n         if (indexKeyspace != null &&\n                 indexKeyspace.getParent() instanceof ResolvedRecordStoreKeyspace &&\n                 ((ResolvedRecordStoreKeyspace)indexKeyspace.getParent()).getRecordStoreKeyspace() == FDBRecordStoreKeyspace.INDEX) {\n             Index index = indexKeyspace.getIndex();\n-            KeyExpression indexExpression = index.getRootExpression();\n-            if (distance < indexExpression.getColumnSize()) {\n-                return resolveIndexField(context, resolvedParent, object, index, indexExpression, distance);\n+            List<KeyExpression> storedKeys = indexStoredKeys(index);\n+            if (distance < storedKeys.size()) {\n+                return resolveIndexField(context, resolvedParent, object, index, storedKeys.get(distance), distance);\n             }\n         }\n         return UNRESOLVED;\n     }\n \n+    // TODO: Get this from the IndexMaintainerFactory via some new interface (the IndexMaintainer needs a RecordStore).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNDcwNA=="}, "originalCommit": {"oid": "320f1ae4e411369d69e8099d1650ca1e6475900c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNjU0MA==", "bodyText": "Yeah, that seems like a reasonable compromise. Changed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/863#discussion_r395406540", "createdAt": "2020-03-20T01:45:58Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/clientlog/KeySpaceCountTree.java", "diffHunk": "@@ -503,23 +509,42 @@ protected TupleKeyCountTree newPrefixChild(@Nonnull Object prefix) {\n             }\n         }\n         if (recordTypeKeyspace != null) {\n-            KeyExpression primaryKey = recordTypeKeyspace.getRecordType().getPrimaryKey();\n-            if (distance + 1 < primaryKey.getColumnSize()) {\n-                return resolvePrimaryKeyField(context, resolvedParent, object, primaryKey, distance + 1);\n+            List<KeyExpression> storedPrimaryKeys = recordTypeKeyspace.getRecordType().getPrimaryKey().normalizeKeyForPositions();\n+            if (distance + 1 < storedPrimaryKeys.size()) {\n+                return resolvePrimaryKeyField(context, resolvedParent, object, storedPrimaryKeys.get(distance + 1), distance + 1);\n             }\n         }\n         if (indexKeyspace != null &&\n                 indexKeyspace.getParent() instanceof ResolvedRecordStoreKeyspace &&\n                 ((ResolvedRecordStoreKeyspace)indexKeyspace.getParent()).getRecordStoreKeyspace() == FDBRecordStoreKeyspace.INDEX) {\n             Index index = indexKeyspace.getIndex();\n-            KeyExpression indexExpression = index.getRootExpression();\n-            if (distance < indexExpression.getColumnSize()) {\n-                return resolveIndexField(context, resolvedParent, object, index, indexExpression, distance);\n+            List<KeyExpression> storedKeys = indexStoredKeys(index);\n+            if (distance < storedKeys.size()) {\n+                return resolveIndexField(context, resolvedParent, object, index, storedKeys.get(distance), distance);\n             }\n         }\n         return UNRESOLVED;\n     }\n \n+    // TODO: Get this from the IndexMaintainerFactory via some new interface (the IndexMaintainer needs a RecordStore).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNDcwNA=="}, "originalCommit": {"oid": "320f1ae4e411369d69e8099d1650ca1e6475900c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDgzMTY1OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/clientlog/KeySpaceCountTree.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMTo0Mjo0NFrOF5FqZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMTo1NjoyNlrOF5F04Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNTkyNg==", "bodyText": "It looks like fieldIndex can be removed as a parameter from both this and resolveIndexField.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/863#discussion_r395405926", "createdAt": "2020-03-20T01:42:44Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/clientlog/KeySpaceCountTree.java", "diffHunk": "@@ -548,24 +573,23 @@ protected boolean isRecordStoreLeaf(@Nonnull FDBRecordContext context, @Nonnull\n     }\n \n     protected CompletableFuture<Resolved> resolvePrimaryKeyField(@Nonnull FDBRecordContext context, @Nonnull Resolved resolvedParent, @Nullable Object object,\n-                                                                 @Nonnull KeyExpression primaryKey, int index) {\n-        List<KeyExpression> keys = primaryKey.normalizeKeyForPositions();\n-        if (index < keys.size()) {\n-            KeyExpression key = keys.get(index);\n-            while (key instanceof NestingKeyExpression) {\n-                key = ((NestingKeyExpression)key).getChild();\n-            }\n-            if (key instanceof FieldKeyExpression) {\n-                return CompletableFuture.completedFuture(new ResolvedPrimaryKeyField(resolvedParent, ((FieldKeyExpression)key).getFieldName(), object, object));\n-            }\n-        }\n-        return UNRESOLVED;\n+                                                                 @Nonnull KeyExpression fieldKey, int fieldIndex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "320f1ae4e411369d69e8099d1650ca1e6475900c"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNjc5NQ==", "bodyText": "I was thinking an overriding method might understand that the zeroth field of the primary key is special, for example. But there are probably other ways it could accomplish such a check.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/863#discussion_r395406795", "createdAt": "2020-03-20T01:47:12Z", "author": {"login": "MMcM"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/clientlog/KeySpaceCountTree.java", "diffHunk": "@@ -548,24 +573,23 @@ protected boolean isRecordStoreLeaf(@Nonnull FDBRecordContext context, @Nonnull\n     }\n \n     protected CompletableFuture<Resolved> resolvePrimaryKeyField(@Nonnull FDBRecordContext context, @Nonnull Resolved resolvedParent, @Nullable Object object,\n-                                                                 @Nonnull KeyExpression primaryKey, int index) {\n-        List<KeyExpression> keys = primaryKey.normalizeKeyForPositions();\n-        if (index < keys.size()) {\n-            KeyExpression key = keys.get(index);\n-            while (key instanceof NestingKeyExpression) {\n-                key = ((NestingKeyExpression)key).getChild();\n-            }\n-            if (key instanceof FieldKeyExpression) {\n-                return CompletableFuture.completedFuture(new ResolvedPrimaryKeyField(resolvedParent, ((FieldKeyExpression)key).getFieldName(), object, object));\n-            }\n-        }\n-        return UNRESOLVED;\n+                                                                 @Nonnull KeyExpression fieldKey, int fieldIndex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNTkyNg=="}, "originalCommit": {"oid": "320f1ae4e411369d69e8099d1650ca1e6475900c"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwODYwOQ==", "bodyText": "Okay, I see. Well, it probably doesn't hurt to leave it like that. I'll approve, and if you want to leave it as is, then I guess feel free to merge.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/863#discussion_r395408609", "createdAt": "2020-03-20T01:56:26Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/clientlog/KeySpaceCountTree.java", "diffHunk": "@@ -548,24 +573,23 @@ protected boolean isRecordStoreLeaf(@Nonnull FDBRecordContext context, @Nonnull\n     }\n \n     protected CompletableFuture<Resolved> resolvePrimaryKeyField(@Nonnull FDBRecordContext context, @Nonnull Resolved resolvedParent, @Nullable Object object,\n-                                                                 @Nonnull KeyExpression primaryKey, int index) {\n-        List<KeyExpression> keys = primaryKey.normalizeKeyForPositions();\n-        if (index < keys.size()) {\n-            KeyExpression key = keys.get(index);\n-            while (key instanceof NestingKeyExpression) {\n-                key = ((NestingKeyExpression)key).getChild();\n-            }\n-            if (key instanceof FieldKeyExpression) {\n-                return CompletableFuture.completedFuture(new ResolvedPrimaryKeyField(resolvedParent, ((FieldKeyExpression)key).getFieldName(), object, object));\n-            }\n-        }\n-        return UNRESOLVED;\n+                                                                 @Nonnull KeyExpression fieldKey, int fieldIndex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNTkyNg=="}, "originalCommit": {"oid": "320f1ae4e411369d69e8099d1650ca1e6475900c"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4848, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}