{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwODgwNTkw", "number": 926, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzozNToxOVrOD4PiQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo1MTowN1rOD4Z3vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzAxMzc2OnYy", "diffSide": "RIGHT", "path": "docs/ReleaseNotes.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzozNToxOVrOGO94Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowNzo0OFrOGPKpjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NzA1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * **Feature** Feature Add assertions into record layer [(Issue #925)](https://github.com/FoundationDB/fdb-record-layer/issues/925)\n          \n          \n            \n            * **Feature** Add assertions into record layer [(Issue #925)](https://github.com/FoundationDB/fdb-record-layer/issues/925)\n          \n      \n    \n    \n  \n\nHmm, this also feels like it should be more descriptive. Like, \"added assertions about key and value size\" or something. I think keeping it more general (\"assertions\") is probably fine in the code, though, to future proof it for more kinds of assertions.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/926#discussion_r418347050", "createdAt": "2020-04-30T23:35:19Z", "author": {"login": "alecgrieser"}, "path": "docs/ReleaseNotes.md", "diffHunk": "@@ -54,7 +54,7 @@ The `FDBDatabase::getReadVersion()` method has been replaced with the `FDBRecord\n * **Performance** Improvement 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Feature** Feature 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Feature** Feature 2 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n-* **Feature** Feature 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n+* **Feature** Feature Add assertions into record layer [(Issue #925)](https://github.com/FoundationDB/fdb-record-layer/issues/925)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d0a370b042d78f892aa8898d8dc7fa3f1b1e90"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NjMwMw==", "bodyText": "Fixed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/926#discussion_r418556303", "createdAt": "2020-05-01T14:07:48Z", "author": {"login": "scgray"}, "path": "docs/ReleaseNotes.md", "diffHunk": "@@ -54,7 +54,7 @@ The `FDBDatabase::getReadVersion()` method has been replaced with the `FDBRecord\n * **Performance** Improvement 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Feature** Feature 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Feature** Feature 2 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n-* **Feature** Feature 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n+* **Feature** Feature Add assertions into record layer [(Issue #925)](https://github.com/FoundationDB/fdb-record-layer/issues/925)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NzA1MA=="}, "originalCommit": {"oid": "86d0a370b042d78f892aa8898d8dc7fa3f1b1e90"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzAyMDk1OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabaseFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzozOTowN1rOGO98kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxMDowMFrOGPKtMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0ODE3Ng==", "bodyText": "Hmm, I'm not sure this is necessarily the best way to determine whether or not to enable assertions or not. In particular, it wouldn't let you do something like set it for a single transaction (if, for example, if one wanted to turn on \"debugging\" for a single transaction that both, like, traced it and enabled assertions). Like, the other mechanism I can think of would be to add a new field to the FDBRecordContextConfig (and, in theory, one could want that for tracing). I suppose it's possible that we could go with this \"for now\", see how it goes, and add a new mechanism, if we don't like the way that that works in practice.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/926#discussion_r418348176", "createdAt": "2020-04-30T23:39:07Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabaseFactory.java", "diffHunk": "@@ -121,6 +122,13 @@\n      */\n     @Nonnull\n     private Supplier<Boolean> transactionIsTracedSupplier = LOGGER::isTraceEnabled;\n+    /**\n+     * A supplier that, when it returns true, enables assertions/sanity checks on certain operations. This supplier is\n+     * polled upon the creation of a new {@code FDBRecordContext} and all subsequent operations on that context will\n+     * (or will not) enforce assertions based upon the return value.\n+     */\n+    @Nonnull\n+    private Supplier<Boolean> enableAssertionsSupplier = DEFAULT_ENABLE_ASSERTIONS_SUPPLIER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d0a370b042d78f892aa8898d8dc7fa3f1b1e90"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NzIzMw==", "bodyText": "Yeah, you are absolutely right. I had forgotten about that object. I have moved the configuration there.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/926#discussion_r418557233", "createdAt": "2020-05-01T14:10:00Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabaseFactory.java", "diffHunk": "@@ -121,6 +122,13 @@\n      */\n     @Nonnull\n     private Supplier<Boolean> transactionIsTracedSupplier = LOGGER::isTraceEnabled;\n+    /**\n+     * A supplier that, when it returns true, enables assertions/sanity checks on certain operations. This supplier is\n+     * polled upon the creation of a new {@code FDBRecordContext} and all subsequent operations on that context will\n+     * (or will not) enforce assertions based upon the return value.\n+     */\n+    @Nonnull\n+    private Supplier<Boolean> enableAssertionsSupplier = DEFAULT_ENABLE_ASSERTIONS_SUPPLIER;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0ODE3Ng=="}, "originalCommit": {"oid": "86d0a370b042d78f892aa8898d8dc7fa3f1b1e90"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzAyNDI3OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0MDo1N1rOGO9-lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowOTozM1rOGPKsaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0ODY5NA==", "bodyText": "A new FDBStoreTimer is a little bit of a weird choice if StoreTimer is null, rather than sending null down to the InstrumentedTransaction (and, um, I guess not instrumenting it). Maybe it's preferable to introducing possible NPEs from that class, though? Not sure.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/926#discussion_r418348694", "createdAt": "2020-04-30T23:40:57Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabase.java", "diffHunk": "@@ -748,10 +748,13 @@ public Transaction createTransaction(Executor executor, @Nullable Map<String, St\n      * @return newly created transaction\n      */\n     private Transaction createTransaction(Executor executor, @Nullable StoreTimer storeTimer, @Nullable Map<String, String> mdcContext, boolean transactionIsTraced) {\n+        final boolean enableAssertions = factory.areAssertionsEnabled();\n         Transaction transaction = database.createTransaction(executor);\n \n         if (storeTimer != null) {\n-            transaction = new InstrumentedTransaction(storeTimer, transaction);\n+            transaction = new InstrumentedTransaction(storeTimer, transaction, enableAssertions);\n+        } else if (enableAssertions) {\n+            transaction = new InstrumentedTransaction(new FDBStoreTimer(), transaction, enableAssertions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d0a370b042d78f892aa8898d8dc7fa3f1b1e90"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NzAzMw==", "bodyText": "Yeah, it just bothers me that we have this log everywhere of if (storeTimer != null).  I took at stab at creating a NullStoreTimer implementation so we can enforce that it is never nullable, but it gets into problems because it doesn't really extend into NullFDBStoreTimer. Anyway, I updated this to allow for null :(", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/926#discussion_r418557033", "createdAt": "2020-05-01T14:09:33Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabase.java", "diffHunk": "@@ -748,10 +748,13 @@ public Transaction createTransaction(Executor executor, @Nullable Map<String, St\n      * @return newly created transaction\n      */\n     private Transaction createTransaction(Executor executor, @Nullable StoreTimer storeTimer, @Nullable Map<String, String> mdcContext, boolean transactionIsTraced) {\n+        final boolean enableAssertions = factory.areAssertionsEnabled();\n         Transaction transaction = database.createTransaction(executor);\n \n         if (storeTimer != null) {\n-            transaction = new InstrumentedTransaction(storeTimer, transaction);\n+            transaction = new InstrumentedTransaction(storeTimer, transaction, enableAssertions);\n+        } else if (enableAssertions) {\n+            transaction = new InstrumentedTransaction(new FDBStoreTimer(), transaction, enableAssertions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0ODY5NA=="}, "originalCommit": {"oid": "86d0a370b042d78f892aa8898d8dc7fa3f1b1e90"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzAzNzMzOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/InstrumentedTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0ODowOFrOGO-GnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0OTowN1rOGO-HxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MDc0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    underlying.mutate(opType, checkKey(key), param);\n          \n          \n            \n                    underlying.mutate(opType, checkKey(key), checkValue(param));", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/926#discussion_r418350749", "createdAt": "2020-04-30T23:48:08Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/InstrumentedTransaction.java", "diffHunk": "@@ -38,70 +39,74 @@\n  * Wrapper around {@link Transaction} that instruments certain calls to expose their behavior with\n  * {@link FDBStoreTimer} metrics.\n  */\n+@API(API.Status.INTERNAL)\n public class InstrumentedTransaction extends InstrumentedReadTransaction<Transaction> implements Transaction {\n \n     @Nullable\n     protected ReadTransaction snapshot; // lazily cached snapshot wrapper\n \n-    public InstrumentedTransaction(@Nonnull StoreTimer timer, @Nonnull Transaction underlying) {\n-        super(timer, underlying);\n+    public InstrumentedTransaction(@Nonnull StoreTimer timer, @Nonnull Transaction underlying, boolean enableAssertions) {\n+        super(timer, underlying, enableAssertions);\n     }\n \n     @Override\n     public void addReadConflictRange(byte[] keyBegin, byte[] keyEnd) {\n-        underlying.addReadConflictRange(keyBegin, keyEnd);\n+        underlying.addReadConflictRange(checkKey(keyBegin), checkKey(keyEnd));\n     }\n \n     @Override\n     public void addReadConflictKey(byte[] key) {\n-        underlying.addReadConflictKey(key);\n+        underlying.addReadConflictKey(checkKey(key));\n     }\n \n     @Override\n     public void addWriteConflictRange(byte[] keyBegin, byte[] keyEnd) {\n-        underlying.addWriteConflictRange(keyBegin, keyEnd);\n+        underlying.addWriteConflictRange(checkKey(keyBegin), checkKey(keyEnd));\n     }\n \n     @Override\n     public void addWriteConflictKey(byte[] key) {\n-        underlying.addWriteConflictKey(key);\n+        underlying.addWriteConflictKey(checkKey(key));\n     }\n \n     @Override\n     public void set(byte[] key, byte[] value) {\n-        underlying.set(key, value);\n+        underlying.set(checkKey(key), checkValue(value));\n         timer.increment(FDBStoreTimer.Counts.WRITES);\n         timer.increment(FDBStoreTimer.Counts.BYTES_WRITTEN, key.length + value.length);\n     }\n \n     @Override\n     public void clear(byte[] key) {\n-        underlying.clear(key);\n+        underlying.clear(checkKey(key));\n         timer.increment(FDBStoreTimer.Counts.DELETES);\n     }\n \n     @Override\n     public void clear(byte[] keyBegin, byte[] keyEnd) {\n-        underlying.clear(keyBegin, keyEnd);\n+        underlying.clear(checkKey(keyBegin), checkKey(keyEnd));\n         timer.increment(FDBStoreTimer.Counts.DELETES);\n     }\n \n     @Override\n     public void clear(Range range) {\n+        checkKey(range.begin);\n+        checkKey(range.end);\n+\n         underlying.clear(range);\n         timer.increment(FDBStoreTimer.Counts.DELETES);\n     }\n \n     @Override\n     @Deprecated\n     public void clearRangeStartsWith(byte[] prefix) {\n-        underlying.clearRangeStartsWith(prefix);\n+        underlying.clearRangeStartsWith(checkKey(prefix));\n         timer.increment(FDBStoreTimer.Counts.DELETES);\n     }\n \n     @Override\n     public void mutate(MutationType opType, byte[] key, byte[] param) {\n-        underlying.mutate(opType, key, param);\n+        underlying.mutate(opType, checkKey(key), param);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d0a370b042d78f892aa8898d8dc7fa3f1b1e90"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MTA0NQ==", "bodyText": "Technically, the versionstamp operations can shrink the key and value sizes, and...I'm not actually sure whether a 100,004 byte value where the last four bytes are a versionstamp offset as part of a SET_VERSIONSTAMPED_VALUE operation are actually allowed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/926#discussion_r418351045", "createdAt": "2020-04-30T23:49:07Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/InstrumentedTransaction.java", "diffHunk": "@@ -38,70 +39,74 @@\n  * Wrapper around {@link Transaction} that instruments certain calls to expose their behavior with\n  * {@link FDBStoreTimer} metrics.\n  */\n+@API(API.Status.INTERNAL)\n public class InstrumentedTransaction extends InstrumentedReadTransaction<Transaction> implements Transaction {\n \n     @Nullable\n     protected ReadTransaction snapshot; // lazily cached snapshot wrapper\n \n-    public InstrumentedTransaction(@Nonnull StoreTimer timer, @Nonnull Transaction underlying) {\n-        super(timer, underlying);\n+    public InstrumentedTransaction(@Nonnull StoreTimer timer, @Nonnull Transaction underlying, boolean enableAssertions) {\n+        super(timer, underlying, enableAssertions);\n     }\n \n     @Override\n     public void addReadConflictRange(byte[] keyBegin, byte[] keyEnd) {\n-        underlying.addReadConflictRange(keyBegin, keyEnd);\n+        underlying.addReadConflictRange(checkKey(keyBegin), checkKey(keyEnd));\n     }\n \n     @Override\n     public void addReadConflictKey(byte[] key) {\n-        underlying.addReadConflictKey(key);\n+        underlying.addReadConflictKey(checkKey(key));\n     }\n \n     @Override\n     public void addWriteConflictRange(byte[] keyBegin, byte[] keyEnd) {\n-        underlying.addWriteConflictRange(keyBegin, keyEnd);\n+        underlying.addWriteConflictRange(checkKey(keyBegin), checkKey(keyEnd));\n     }\n \n     @Override\n     public void addWriteConflictKey(byte[] key) {\n-        underlying.addWriteConflictKey(key);\n+        underlying.addWriteConflictKey(checkKey(key));\n     }\n \n     @Override\n     public void set(byte[] key, byte[] value) {\n-        underlying.set(key, value);\n+        underlying.set(checkKey(key), checkValue(value));\n         timer.increment(FDBStoreTimer.Counts.WRITES);\n         timer.increment(FDBStoreTimer.Counts.BYTES_WRITTEN, key.length + value.length);\n     }\n \n     @Override\n     public void clear(byte[] key) {\n-        underlying.clear(key);\n+        underlying.clear(checkKey(key));\n         timer.increment(FDBStoreTimer.Counts.DELETES);\n     }\n \n     @Override\n     public void clear(byte[] keyBegin, byte[] keyEnd) {\n-        underlying.clear(keyBegin, keyEnd);\n+        underlying.clear(checkKey(keyBegin), checkKey(keyEnd));\n         timer.increment(FDBStoreTimer.Counts.DELETES);\n     }\n \n     @Override\n     public void clear(Range range) {\n+        checkKey(range.begin);\n+        checkKey(range.end);\n+\n         underlying.clear(range);\n         timer.increment(FDBStoreTimer.Counts.DELETES);\n     }\n \n     @Override\n     @Deprecated\n     public void clearRangeStartsWith(byte[] prefix) {\n-        underlying.clearRangeStartsWith(prefix);\n+        underlying.clearRangeStartsWith(checkKey(prefix));\n         timer.increment(FDBStoreTimer.Counts.DELETES);\n     }\n \n     @Override\n     public void mutate(MutationType opType, byte[] key, byte[] param) {\n-        underlying.mutate(opType, key, param);\n+        underlying.mutate(opType, checkKey(key), param);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MDc0OQ=="}, "originalCommit": {"oid": "86d0a370b042d78f892aa8898d8dc7fa3f1b1e90"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzA0MDc3OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/InstrumentedTransaction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0OTo1MVrOGO-IrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo0OTo0NFrOGPNcKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MTI3Nw==", "bodyText": "AFAICT, key and value size limits are only imposed on set operations (and mutate). I think clear, clear range, the conflict range operations, and the read operations actually allow larger keys. I've validated this by playing around with the Python API in its shell, but maybe it's worth getting better validation.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/926#discussion_r418351277", "createdAt": "2020-04-30T23:49:51Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/InstrumentedTransaction.java", "diffHunk": "@@ -38,70 +39,74 @@\n  * Wrapper around {@link Transaction} that instruments certain calls to expose their behavior with\n  * {@link FDBStoreTimer} metrics.\n  */\n+@API(API.Status.INTERNAL)\n public class InstrumentedTransaction extends InstrumentedReadTransaction<Transaction> implements Transaction {\n \n     @Nullable\n     protected ReadTransaction snapshot; // lazily cached snapshot wrapper\n \n-    public InstrumentedTransaction(@Nonnull StoreTimer timer, @Nonnull Transaction underlying) {\n-        super(timer, underlying);\n+    public InstrumentedTransaction(@Nonnull StoreTimer timer, @Nonnull Transaction underlying, boolean enableAssertions) {\n+        super(timer, underlying, enableAssertions);\n     }\n \n     @Override\n     public void addReadConflictRange(byte[] keyBegin, byte[] keyEnd) {\n-        underlying.addReadConflictRange(keyBegin, keyEnd);\n+        underlying.addReadConflictRange(checkKey(keyBegin), checkKey(keyEnd));\n     }\n \n     @Override\n     public void addReadConflictKey(byte[] key) {\n-        underlying.addReadConflictKey(key);\n+        underlying.addReadConflictKey(checkKey(key));\n     }\n \n     @Override\n     public void addWriteConflictRange(byte[] keyBegin, byte[] keyEnd) {\n-        underlying.addWriteConflictRange(keyBegin, keyEnd);\n+        underlying.addWriteConflictRange(checkKey(keyBegin), checkKey(keyEnd));\n     }\n \n     @Override\n     public void addWriteConflictKey(byte[] key) {\n-        underlying.addWriteConflictKey(key);\n+        underlying.addWriteConflictKey(checkKey(key));\n     }\n \n     @Override\n     public void set(byte[] key, byte[] value) {\n-        underlying.set(key, value);\n+        underlying.set(checkKey(key), checkValue(value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d0a370b042d78f892aa8898d8dc7fa3f1b1e90"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NzUxOQ==", "bodyText": "But, just because you can, should you?  Is there a case where this is legitimate and the server can make sense of the trailing bytes?", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/926#discussion_r418557519", "createdAt": "2020-05-01T14:10:42Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/InstrumentedTransaction.java", "diffHunk": "@@ -38,70 +39,74 @@\n  * Wrapper around {@link Transaction} that instruments certain calls to expose their behavior with\n  * {@link FDBStoreTimer} metrics.\n  */\n+@API(API.Status.INTERNAL)\n public class InstrumentedTransaction extends InstrumentedReadTransaction<Transaction> implements Transaction {\n \n     @Nullable\n     protected ReadTransaction snapshot; // lazily cached snapshot wrapper\n \n-    public InstrumentedTransaction(@Nonnull StoreTimer timer, @Nonnull Transaction underlying) {\n-        super(timer, underlying);\n+    public InstrumentedTransaction(@Nonnull StoreTimer timer, @Nonnull Transaction underlying, boolean enableAssertions) {\n+        super(timer, underlying, enableAssertions);\n     }\n \n     @Override\n     public void addReadConflictRange(byte[] keyBegin, byte[] keyEnd) {\n-        underlying.addReadConflictRange(keyBegin, keyEnd);\n+        underlying.addReadConflictRange(checkKey(keyBegin), checkKey(keyEnd));\n     }\n \n     @Override\n     public void addReadConflictKey(byte[] key) {\n-        underlying.addReadConflictKey(key);\n+        underlying.addReadConflictKey(checkKey(key));\n     }\n \n     @Override\n     public void addWriteConflictRange(byte[] keyBegin, byte[] keyEnd) {\n-        underlying.addWriteConflictRange(keyBegin, keyEnd);\n+        underlying.addWriteConflictRange(checkKey(keyBegin), checkKey(keyEnd));\n     }\n \n     @Override\n     public void addWriteConflictKey(byte[] key) {\n-        underlying.addWriteConflictKey(key);\n+        underlying.addWriteConflictKey(checkKey(key));\n     }\n \n     @Override\n     public void set(byte[] key, byte[] value) {\n-        underlying.set(key, value);\n+        underlying.set(checkKey(key), checkValue(value));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MTI3Nw=="}, "originalCommit": {"oid": "86d0a370b042d78f892aa8898d8dc7fa3f1b1e90"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwMjAyNA==", "bodyText": "There's one only mediumly contrived example that I can think of right now: if you have a key of exactly 10k bytes, and you want to get the next key in the database, you might perform a scan from key + \\x00, which would have length 10,001. In theory, if you had the right logic, you can notice that it's hit the limit and only scan from key[:9999] + str(key[9999] + 1) (or something like that)", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/926#discussion_r418602024", "createdAt": "2020-05-01T15:49:44Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/InstrumentedTransaction.java", "diffHunk": "@@ -38,70 +39,74 @@\n  * Wrapper around {@link Transaction} that instruments certain calls to expose their behavior with\n  * {@link FDBStoreTimer} metrics.\n  */\n+@API(API.Status.INTERNAL)\n public class InstrumentedTransaction extends InstrumentedReadTransaction<Transaction> implements Transaction {\n \n     @Nullable\n     protected ReadTransaction snapshot; // lazily cached snapshot wrapper\n \n-    public InstrumentedTransaction(@Nonnull StoreTimer timer, @Nonnull Transaction underlying) {\n-        super(timer, underlying);\n+    public InstrumentedTransaction(@Nonnull StoreTimer timer, @Nonnull Transaction underlying, boolean enableAssertions) {\n+        super(timer, underlying, enableAssertions);\n     }\n \n     @Override\n     public void addReadConflictRange(byte[] keyBegin, byte[] keyEnd) {\n-        underlying.addReadConflictRange(keyBegin, keyEnd);\n+        underlying.addReadConflictRange(checkKey(keyBegin), checkKey(keyEnd));\n     }\n \n     @Override\n     public void addReadConflictKey(byte[] key) {\n-        underlying.addReadConflictKey(key);\n+        underlying.addReadConflictKey(checkKey(key));\n     }\n \n     @Override\n     public void addWriteConflictRange(byte[] keyBegin, byte[] keyEnd) {\n-        underlying.addWriteConflictRange(keyBegin, keyEnd);\n+        underlying.addWriteConflictRange(checkKey(keyBegin), checkKey(keyEnd));\n     }\n \n     @Override\n     public void addWriteConflictKey(byte[] key) {\n-        underlying.addWriteConflictKey(key);\n+        underlying.addWriteConflictKey(checkKey(key));\n     }\n \n     @Override\n     public void set(byte[] key, byte[] value) {\n-        underlying.set(key, value);\n+        underlying.set(checkKey(key), checkValue(value));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MTI3Nw=="}, "originalCommit": {"oid": "86d0a370b042d78f892aa8898d8dc7fa3f1b1e90"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzA0NDE5OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabaseTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo1MTozN1rOGO-KsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxMToyNFrOGPKvaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MTc5Mg==", "bodyText": "Seems like this should set it to the original asserterions supplier instead of () -> false. At the moment, those are the same same thing, but if we ever started running our tests with assertions on for everything (for example), I don't think we'd want this test to mess with that.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/926#discussion_r418351792", "createdAt": "2020-04-30T23:51:37Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabaseTest.java", "diffHunk": "@@ -489,4 +489,42 @@ public void performNoOpAgainstFakeCluster() throws IOException {\n             LOGGER.info(logMessage.toString());\n         }\n     }\n+\n+    @Test\n+    public void testAssertionsOnKeySize() {\n+        testSizeAssertion(context ->\n+                        context.ensureActive().set(Tuple.from(1, new byte[InstrumentedTransaction.MAX_KEY_LENGTH]).pack(), Tuple.from(1).pack()),\n+                FDBExceptions.FDBStoreKeySizeException.class);\n+    }\n+\n+    @Test\n+    public void testAssertionsOnValueSize() {\n+        testSizeAssertion(context ->\n+                        context.ensureActive().set(Tuple.from(1).pack(), Tuple.from(2, new byte[InstrumentedTransaction.MAX_VALUE_LENGTH]).pack()),\n+                FDBExceptions.FDBStoreValueSizeException.class);\n+    }\n+\n+    private void testSizeAssertion(Consumer<FDBRecordContext> consumer, Class<? extends Exception> exception) {\n+        FDBDatabaseFactory factory = FDBDatabaseFactory.instance();\n+        FDBDatabase database = factory.getDatabase();\n+\n+        // By default key size validation happens in the FDB driver at commit time\n+        try (FDBRecordContext context = database.openContext()) {\n+            consumer.accept(context);\n+            assertThrows(exception, () -> context.commit());\n+        }\n+\n+        try {\n+            factory.clear();\n+\n+            // enabling assertions causes checks to happen in record layer code\n+            factory.setEnableAssertionsSupplier(() -> true);\n+            try (FDBRecordContext context = database.openContext()) {\n+                assertThrows(exception, () -> consumer.accept(context));\n+            }\n+        } finally {\n+            factory.setEnableAssertionsSupplier(() -> false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d0a370b042d78f892aa8898d8dc7fa3f1b1e90"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NzgwMw==", "bodyText": "Good point, but I removed this manner of configuration anyway.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/926#discussion_r418557803", "createdAt": "2020-05-01T14:11:24Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabaseTest.java", "diffHunk": "@@ -489,4 +489,42 @@ public void performNoOpAgainstFakeCluster() throws IOException {\n             LOGGER.info(logMessage.toString());\n         }\n     }\n+\n+    @Test\n+    public void testAssertionsOnKeySize() {\n+        testSizeAssertion(context ->\n+                        context.ensureActive().set(Tuple.from(1, new byte[InstrumentedTransaction.MAX_KEY_LENGTH]).pack(), Tuple.from(1).pack()),\n+                FDBExceptions.FDBStoreKeySizeException.class);\n+    }\n+\n+    @Test\n+    public void testAssertionsOnValueSize() {\n+        testSizeAssertion(context ->\n+                        context.ensureActive().set(Tuple.from(1).pack(), Tuple.from(2, new byte[InstrumentedTransaction.MAX_VALUE_LENGTH]).pack()),\n+                FDBExceptions.FDBStoreValueSizeException.class);\n+    }\n+\n+    private void testSizeAssertion(Consumer<FDBRecordContext> consumer, Class<? extends Exception> exception) {\n+        FDBDatabaseFactory factory = FDBDatabaseFactory.instance();\n+        FDBDatabase database = factory.getDatabase();\n+\n+        // By default key size validation happens in the FDB driver at commit time\n+        try (FDBRecordContext context = database.openContext()) {\n+            consumer.accept(context);\n+            assertThrows(exception, () -> context.commit());\n+        }\n+\n+        try {\n+            factory.clear();\n+\n+            // enabling assertions causes checks to happen in record layer code\n+            factory.setEnableAssertionsSupplier(() -> true);\n+            try (FDBRecordContext context = database.openContext()) {\n+                assertThrows(exception, () -> consumer.accept(context));\n+            }\n+        } finally {\n+            factory.setEnableAssertionsSupplier(() -> false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MTc5Mg=="}, "originalCommit": {"oid": "86d0a370b042d78f892aa8898d8dc7fa3f1b1e90"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDcwNzE5OnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabaseFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo1MTowN1rOGPNegA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTozNjo1M1rOGQvTNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwMjYyNA==", "bodyText": "I think this can be removed, too.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/926#discussion_r418602624", "createdAt": "2020-05-01T15:51:07Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabaseFactory.java", "diffHunk": "@@ -50,6 +50,7 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(FDBDatabaseFactory.class);\n \n     protected static final Function<FDBLatencySource, Long> DEFAULT_LATENCY_INJECTOR = api -> 0L;\n+    protected static final Supplier<Boolean> DEFAULT_ENABLE_ASSERTIONS_SUPPLIER = () -> false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e290b690a9de94598d9aa1f022dde92b6ef88a0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIwNTM2Nw==", "bodyText": "Oopsy.  Thanks for catching that.  Removed.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/926#discussion_r420205367", "createdAt": "2020-05-05T15:36:53Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBDatabaseFactory.java", "diffHunk": "@@ -50,6 +50,7 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(FDBDatabaseFactory.class);\n \n     protected static final Function<FDBLatencySource, Long> DEFAULT_LATENCY_INJECTOR = api -> 0L;\n+    protected static final Supplier<Boolean> DEFAULT_ENABLE_ASSERTIONS_SUPPLIER = () -> false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwMjYyNA=="}, "originalCommit": {"oid": "1e290b690a9de94598d9aa1f022dde92b6ef88a0"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4878, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}