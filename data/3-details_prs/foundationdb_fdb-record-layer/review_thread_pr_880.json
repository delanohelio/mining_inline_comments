{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2Njk3ODg2", "number": 880, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0NDozMlrODto4OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozNjowNVrODt7rLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTgyMjY1OnYy", "diffSide": "RIGHT", "path": "fdb-extensions/src/main/java/com/apple/foundationdb/map/BunchedMap.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0NDozMlrOF_Lsow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMDozODozNVrOF_XeIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NjI1OQ==", "bodyText": "This should probably return a CompletableFuture<List<KeyValue>> as timer.instrument returns a future.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/880#discussion_r401796259", "createdAt": "2020-04-01T17:44:32Z", "author": {"login": "scgray"}, "path": "fdb-extensions/src/main/java/com/apple/foundationdb/map/BunchedMap.java", "diffHunk": "@@ -140,6 +152,44 @@ public BunchedMap(@Nonnull BunchedSerializer<K,V> serializer, @Nonnull Comparato\n         }\n     }\n \n+    /**\n+     * Instrument a range read. The base implementation does nothing, but extenders are encouraged to\n+     * override this method with their own implementations that, for example, records the total numbers\n+     * of keys read and their sizes.\n+     *\n+     * @param readFuture a future that will complete to a list of keys and values\n+     */\n+    protected void instrumentRangeRead(@Nonnull CompletableFuture<List<KeyValue>> readFuture) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72a041af16bd751a0a1ec58a85927a793ae4ec9a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4OTE1NA==", "bodyText": "Done", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/880#discussion_r401989154", "createdAt": "2020-04-02T00:38:35Z", "author": {"login": "alecgrieser"}, "path": "fdb-extensions/src/main/java/com/apple/foundationdb/map/BunchedMap.java", "diffHunk": "@@ -140,6 +152,44 @@ public BunchedMap(@Nonnull BunchedSerializer<K,V> serializer, @Nonnull Comparato\n         }\n     }\n \n+    /**\n+     * Instrument a range read. The base implementation does nothing, but extenders are encouraged to\n+     * override this method with their own implementations that, for example, records the total numbers\n+     * of keys read and their sizes.\n+     *\n+     * @param readFuture a future that will complete to a list of keys and values\n+     */\n+    protected void instrumentRangeRead(@Nonnull CompletableFuture<List<KeyValue>> readFuture) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NjI1OQ=="}, "originalCommit": {"oid": "72a041af16bd751a0a1ec58a85927a793ae4ec9a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTgyNzkxOnYy", "diffSide": "RIGHT", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/TextIndexMaintainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0NjowMVrOF_Lv7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMDozODo0M1rOF_XeQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NzEwMA==", "bodyText": "timer.instrument returns the instrumented future, so I think it probably needs to be returned here.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/880#discussion_r401797100", "createdAt": "2020-04-01T17:46:01Z", "author": {"login": "scgray"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/TextIndexMaintainer.java", "diffHunk": "@@ -552,4 +559,54 @@ public boolean canDeleteWhere(@Nonnull QueryToKeyMatcher matcher, @Nonnull Key.E\n         }\n         return cursor;\n     }\n+\n+    private static class InstrumentedBunchedMap<K, V> extends BunchedMap<K, V> {\n+        @Nonnull\n+        private final FDBStoreTimer timer;\n+        @Nonnull\n+        private final Executor executor;\n+\n+        public InstrumentedBunchedMap(@Nonnull BunchedMap<K, V> model, @Nonnull FDBStoreTimer timer, @Nonnull Executor executor) {\n+            super(model);\n+            this.timer = timer;\n+            this.executor = executor;\n+        }\n+\n+        @Override\n+        protected void instrumentDelete(@Nonnull byte[] key, @Nullable byte[] oldValue) {\n+            timer.increment(FDBStoreTimer.Counts.DELETE_INDEX_KEY);\n+            timer.increment(FDBStoreTimer.Counts.DELETE_INDEX_KEY_BYTES, key.length);\n+            if (oldValue != null) {\n+                timer.increment(FDBStoreTimer.Counts.DELETE_INDEX_VALUE_BYTES, oldValue.length);\n+            }\n+        }\n+\n+        @Override\n+        protected void instrumentWrite(@Nonnull byte[] key, @Nonnull byte[] value, @Nullable byte[] oldValue) {\n+            timer.increment(FDBStoreTimer.Counts.SAVE_INDEX_KEY);\n+            timer.increment(FDBStoreTimer.Counts.SAVE_INDEX_KEY_BYTES, key.length);\n+            timer.increment(FDBStoreTimer.Counts.SAVE_INDEX_VALUE_BYTES, value.length);\n+            if (oldValue != null) {\n+                // Or should this ignore the value altogether?\n+                timer.increment(FDBStoreTimer.Counts.DELETE_INDEX_VALUE_BYTES, oldValue.length);\n+            }\n+        }\n+\n+        @Override\n+        protected void instrumentRangeRead(@Nonnull CompletableFuture<List<KeyValue>> readFuture) {\n+            timer.instrument(FDBStoreTimer.Events.SCAN_INDEX_KEYS, readFuture, executor).whenComplete((list, err) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72a041af16bd751a0a1ec58a85927a793ae4ec9a"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4OTE4Ng==", "bodyText": "Sure.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/880#discussion_r401989186", "createdAt": "2020-04-02T00:38:43Z", "author": {"login": "alecgrieser"}, "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/TextIndexMaintainer.java", "diffHunk": "@@ -552,4 +559,54 @@ public boolean canDeleteWhere(@Nonnull QueryToKeyMatcher matcher, @Nonnull Key.E\n         }\n         return cursor;\n     }\n+\n+    private static class InstrumentedBunchedMap<K, V> extends BunchedMap<K, V> {\n+        @Nonnull\n+        private final FDBStoreTimer timer;\n+        @Nonnull\n+        private final Executor executor;\n+\n+        public InstrumentedBunchedMap(@Nonnull BunchedMap<K, V> model, @Nonnull FDBStoreTimer timer, @Nonnull Executor executor) {\n+            super(model);\n+            this.timer = timer;\n+            this.executor = executor;\n+        }\n+\n+        @Override\n+        protected void instrumentDelete(@Nonnull byte[] key, @Nullable byte[] oldValue) {\n+            timer.increment(FDBStoreTimer.Counts.DELETE_INDEX_KEY);\n+            timer.increment(FDBStoreTimer.Counts.DELETE_INDEX_KEY_BYTES, key.length);\n+            if (oldValue != null) {\n+                timer.increment(FDBStoreTimer.Counts.DELETE_INDEX_VALUE_BYTES, oldValue.length);\n+            }\n+        }\n+\n+        @Override\n+        protected void instrumentWrite(@Nonnull byte[] key, @Nonnull byte[] value, @Nullable byte[] oldValue) {\n+            timer.increment(FDBStoreTimer.Counts.SAVE_INDEX_KEY);\n+            timer.increment(FDBStoreTimer.Counts.SAVE_INDEX_KEY_BYTES, key.length);\n+            timer.increment(FDBStoreTimer.Counts.SAVE_INDEX_VALUE_BYTES, value.length);\n+            if (oldValue != null) {\n+                // Or should this ignore the value altogether?\n+                timer.increment(FDBStoreTimer.Counts.DELETE_INDEX_VALUE_BYTES, oldValue.length);\n+            }\n+        }\n+\n+        @Override\n+        protected void instrumentRangeRead(@Nonnull CompletableFuture<List<KeyValue>> readFuture) {\n+            timer.instrument(FDBStoreTimer.Events.SCAN_INDEX_KEYS, readFuture, executor).whenComplete((list, err) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NzEwMA=="}, "originalCommit": {"oid": "72a041af16bd751a0a1ec58a85927a793ae4ec9a"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDkwMjIwOnYy", "diffSide": "RIGHT", "path": "docs/ReleaseNotes.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozNjowNVrOF_pIhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozNjowNVrOF_pIhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3ODUzMw==", "bodyText": "Nice catch.", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/880#discussion_r402278533", "createdAt": "2020-04-02T12:36:05Z", "author": {"login": "scgray"}, "path": "docs/ReleaseNotes.md", "diffHunk": "@@ -50,7 +50,7 @@ The `FDBDatabase::getReadVersion()` method has been replaced with the `FDBRecord\n * **Performance** The `LocatableResolver::resolve` methods have overloads that allow ancillary transactions started for key space path resolution to avoid starting another read version request [(Issue #864)](https://github.com/FoundationDB/fdb-record-layer/issues/864)\n * **Performance** Improvement 2 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Performance** Improvement 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n-* **Performance** Improvement 4 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n+* **Performance** The metrics for text indexes now contain more accurate numbers for reads and writes [(Issue #876)](https://github.com/FoundationDB/fdb-record-layer/issues/876)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b876dc4c9693ae0d882933a927a638099ea47b"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4856, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}