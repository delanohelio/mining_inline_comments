{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMTIzNTcy", "number": 346, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo1ODoxNFrODWVqSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo1ODoxNFrODWVqSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzUwMTUzOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/nss/SSL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo1ODoxNFrOFbCppA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo1ODoxNFrOFbCppA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5OTMwMA==", "bodyText": "@edewata Is there a better option here?\nI want a data structure that let's me:\n\nTrack my position in the list\nPush new elements\nKnow when a new one has been seen\nBut also lets me access previous elements if I need to.\n\nUp until the last requirement, that's kinda looking like a stock queue (and calling .pop() and .push(...)) but...", "url": "https://github.com/dogtagpki/jss/pull/346#discussion_r363899300", "createdAt": "2020-01-07T18:58:14Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/nss/SSL.java", "diffHunk": "@@ -188,6 +191,24 @@ public static native int ConfigServerSessionIDCache(int maxCacheEntries,\n      */\n     public static native int AttachClientCertCallback(SSLFDProxy fd) throws Exception;\n \n+    /**\n+     * Enable recording of alerts in the SSLFDProxy object.\n+     *\n+     * See also: SSL_AlertReceivedCallback in /usr/include/nss3/ssl.h,\n+     *           SSL_AlertSentCallback in /usr/include/nss3/ssl.h\n+     */\n+    public static int EnableAlertLogging(SSLFDProxy fd) {\n+        fd.inboundAlerts = new ArrayList<SSLAlertEvent>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9bb450a623fbce14cc0ab6a6fcfde0bb5344230"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2713, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}