{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzUxOTgz", "number": 445, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTowMjo0MFrODrW11Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToxOTo1MlrODsMtQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Nzg5NTg5OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/JSSProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTowMjo0MFrOF7qE4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNDo1MjoxOFrOF8jJLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5OTY4MQ==", "bodyText": "I'm fine with these names for clarity and specifying which hash algorithm to use, but please add the supported name too, and allow for detection of the signature parameters:\n(from SunRsaSignEntries.java in JDK11)\n        map.put(\"Signature.RSASSA-PSS\",\n                \"sun.security.rsa.RSAPSSSignature\");\nAnd also the other aliases they expect:\nsrc/java.base/share/classes/sun/security/rsa/SunRsaSignEntries.java:71:        map.put(\"Signature.RSASSA-PSS\",\nsrc/java.base/share/classes/sun/security/rsa/SunRsaSignEntries.java:129:        map.put(\"Alg.Alias.Signature.1.2.840.113549.1.1.10\",     \"RSASSA-PSS\");\nsrc/java.base/share/classes/sun/security/rsa/SunRsaSignEntries.java:130:        map.put(\"Alg.Alias.Signature.OID.1.2.840.113549.1.1.10\", \"RSASSA-PSS\");", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r398099681", "createdAt": "2020-03-25T19:02:40Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/JSSProvider.java", "diffHunk": "@@ -59,6 +59,21 @@ public JSSProvider() {\n         put(\"Alg.Alias.Signature.SHA256/RSA\", \"SHA-256/RSA\");\n         put(\"Alg.Alias.Signature.SHA256withRSA\", \"SHA-256/RSA\");\n \n+        put(\"Signature.SHA-256/RSA/PSS\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33beff9d660b894410da2534695e377fbfa42285"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAzNDY3MQ==", "bodyText": "Done.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399034671", "createdAt": "2020-03-27T04:52:18Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/JSSProvider.java", "diffHunk": "@@ -59,6 +59,21 @@ public JSSProvider() {\n         put(\"Alg.Alias.Signature.SHA256/RSA\", \"SHA-256/RSA\");\n         put(\"Alg.Alias.Signature.SHA256withRSA\", \"SHA-256/RSA\");\n \n+        put(\"Signature.SHA-256/RSA/PSS\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5OTY4MQ=="}, "originalCommit": {"oid": "33beff9d660b894410da2534695e377fbfa42285"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzkwMDMwOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTowMzo0OVrOF7qHoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNDo1MjoyOVrOF8jJUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwMDM4NQ==", "bodyText": "I'd keep a newline I think.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r398100385", "createdAt": "2020-03-25T19:03:49Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -22,7 +22,10 @@\n import java.io.Serializable;\n import java.security.AlgorithmParameters;\n import java.security.NoSuchAlgorithmException;\n-\n+import java.security.NoSuchProviderException;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.security.spec.PSSParameterSpec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33beff9d660b894410da2534695e377fbfa42285"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAzNDcwNA==", "bodyText": "Done, I think :)", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399034704", "createdAt": "2020-03-27T04:52:29Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -22,7 +22,10 @@\n import java.io.Serializable;\n import java.security.AlgorithmParameters;\n import java.security.NoSuchAlgorithmException;\n-\n+import java.security.NoSuchProviderException;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.security.spec.PSSParameterSpec;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwMDM4NQ=="}, "originalCommit": {"oid": "33beff9d660b894410da2534695e377fbfa42285"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzkxMTQ0OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTowNjo1NlrOF7qOfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNDo1MjozN1rOF8jJcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwMjE0Mg==", "bodyText": "I'd remove this for review ;-)", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r398102142", "createdAt": "2020-03-25T19:06:56Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -204,8 +291,19 @@ public AlgorithmId() {\n \n     protected void decodeParams() throws IOException {\n         try {\n-            this.algParams = AlgorithmParameters.getInstance\n-                    (this.algid.toString());\n+\n+            if (algid.equals(AlgorithmId.rsaPSS_oid)) {\n+                try {\n+                    //dumpBytes(this.params.toByteArray());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33beff9d660b894410da2534695e377fbfa42285"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAzNDczOA==", "bodyText": "Done.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399034738", "createdAt": "2020-03-27T04:52:37Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -204,8 +291,19 @@ public AlgorithmId() {\n \n     protected void decodeParams() throws IOException {\n         try {\n-            this.algParams = AlgorithmParameters.getInstance\n-                    (this.algid.toString());\n+\n+            if (algid.equals(AlgorithmId.rsaPSS_oid)) {\n+                try {\n+                    //dumpBytes(this.params.toByteArray());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwMjE0Mg=="}, "originalCommit": {"oid": "33beff9d660b894410da2534695e377fbfa42285"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzkxODI3OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTowODozNlrOF7qSkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNDo1Mjo1MFrOF8jJtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwMzE4NQ==", "bodyText": "This'd be simpler if we wrote:\nif (!algName.contains(\"PSS\")) { throw Exception(...) } and then we wouldn't need the body indented.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r398103185", "createdAt": "2020-03-25T19:08:36Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -552,7 +714,64 @@ public final boolean equals(ObjectIdentifier id) {\n         return algid.equals(id);\n     }\n \n+    public static AlgorithmParameters createPSSAlgorithmParametersFromData(byte[] der) throws Exception {\n+        if (der == null) {\n+            throw new Exception(\"Invalid input data.\");\n+        }\n+        AlgorithmParameters pssParams = null;\n+        try {\n+            pssParams = AlgorithmParameters.getInstance(\"RSAPSSAlgorithmParameters\", \"Mozilla-JSS\");\n+        } catch (NoSuchProviderException e) {\n+            throw new Exception(e);\n+        }\n \n+        try {\n+            pssParams.init(der);\n+        } catch (IOException e) {\n+            throw new Exception(\"Error intializing RSAPSS parameters: \" + e);\n+        }\n+        return pssParams;\n+    }\n+    /* Used to create the PSS algorithm params needed for RSA PSS signatures\n+     * for now only support the RSAPSS algoritm with the SHA256 digest\n+     * this can be extended to support SHA384 and 512 PSS digests.\n+    */\n+    public static AlgorithmParameters createPSSAlgorithmParameters(String algName) throws Exception {\n+        if (algName == null) {\n+            throw new Exception(\"Invalid Algorithm name input.\");\n+        }\n+        AlgorithmParameters pssParams = null;\n+        PSSParameterSpec pssSpec = null;\n+        // Make sure we are in the RSA PSS family\n+        if (algName.contains(\"PSS\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33beff9d660b894410da2534695e377fbfa42285"}, "originalPosition": 301}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAzNDgwNg==", "bodyText": "Done.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399034806", "createdAt": "2020-03-27T04:52:50Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -552,7 +714,64 @@ public final boolean equals(ObjectIdentifier id) {\n         return algid.equals(id);\n     }\n \n+    public static AlgorithmParameters createPSSAlgorithmParametersFromData(byte[] der) throws Exception {\n+        if (der == null) {\n+            throw new Exception(\"Invalid input data.\");\n+        }\n+        AlgorithmParameters pssParams = null;\n+        try {\n+            pssParams = AlgorithmParameters.getInstance(\"RSAPSSAlgorithmParameters\", \"Mozilla-JSS\");\n+        } catch (NoSuchProviderException e) {\n+            throw new Exception(e);\n+        }\n \n+        try {\n+            pssParams.init(der);\n+        } catch (IOException e) {\n+            throw new Exception(\"Error intializing RSAPSS parameters: \" + e);\n+        }\n+        return pssParams;\n+    }\n+    /* Used to create the PSS algorithm params needed for RSA PSS signatures\n+     * for now only support the RSAPSS algoritm with the SHA256 digest\n+     * this can be extended to support SHA384 and 512 PSS digests.\n+    */\n+    public static AlgorithmParameters createPSSAlgorithmParameters(String algName) throws Exception {\n+        if (algName == null) {\n+            throw new Exception(\"Invalid Algorithm name input.\");\n+        }\n+        AlgorithmParameters pssParams = null;\n+        PSSParameterSpec pssSpec = null;\n+        // Make sure we are in the RSA PSS family\n+        if (algName.contains(\"PSS\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwMzE4NQ=="}, "originalCommit": {"oid": "33beff9d660b894410da2534695e377fbfa42285"}, "originalPosition": 301}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjQ2ODgzOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTowNjoxNlrOF8WPgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNDo1MzoyMlrOF8jKOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyMzI5OQ==", "bodyText": "nit: I'd prefer env, this, arena, privk rather than arena, env, this, privk -- env, this pattern is typically used from the native stubs JNI produces and is always first. I think grouping Java and then NSS arguments makes the most sense to me.\nAnd one other thing to consider: what do the failure cases in getRSAPSSParamsAndSigningAlg look like? Would\nstatic SECStatus getRSAPSSParamsAndSigningAlg(JNIEnv *env, jobject this, PRArenaPool *arena, SECAlgorithmId *alg, SECKEYPrivateKey privk);\nbe a better signature? Then you can do (below):\nSECAlgorithmId signAlg;\nif (getRSAPSSParamsAndSigningAlg(env, this, arena, &signAlg, privk) != PR_SUCCESS) {\n    goto finish;\n}\n\nctx = SGN_NewContextWithAlgorithmID(&signAlg, privk);\nand the intent is more clear IMO.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r398823299", "createdAt": "2020-03-26T19:06:16Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -31,12 +32,18 @@ getSomeKey(JNIEnv *env, jobject sig, void **key, short type);\n static SECOidTag\n getAlgorithm(JNIEnv *env, jobject sig);\n \n+static SECOidTag\n+getDigestAlgorithm(JNIEnv *env, jobject sig);\n+\n+\n static void\n setSigContext(JNIEnv *env, jobject sig, jobject context);\n \n static PRStatus\n getSigContext(JNIEnv *env, jobject sig, void**pContext, SigContextType* pType);\n \n+static SECAlgorithmID *getRSAPSSParamsAndSigningAlg(PRArenaPool *arena,JNIEnv *env, jobject this,SECKEYPrivateKey *privk); ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff5ca3c36780022fc61b4876c7d8aa33421ea35"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAzNDkzNg==", "bodyText": "I took your advice mostly.. Done. Thx.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399034936", "createdAt": "2020-03-27T04:53:22Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -31,12 +32,18 @@ getSomeKey(JNIEnv *env, jobject sig, void **key, short type);\n static SECOidTag\n getAlgorithm(JNIEnv *env, jobject sig);\n \n+static SECOidTag\n+getDigestAlgorithm(JNIEnv *env, jobject sig);\n+\n+\n static void\n setSigContext(JNIEnv *env, jobject sig, jobject context);\n \n static PRStatus\n getSigContext(JNIEnv *env, jobject sig, void**pContext, SigContextType* pType);\n \n+static SECAlgorithmID *getRSAPSSParamsAndSigningAlg(PRArenaPool *arena,JNIEnv *env, jobject this,SECKEYPrivateKey *privk); ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyMzI5OQ=="}, "originalCommit": {"oid": "1ff5ca3c36780022fc61b4876c7d8aa33421ea35"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjQ4MDk3OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTowOTozMlrOF8WW9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNDo1MzozN1rOF8jKdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNTIwNQ==", "bodyText": "FWIW, I think you leak signAlg here. If you accept my other suggestion, you wouldn't.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r398825205", "createdAt": "2020-03-26T19:09:32Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -48,39 +55,79 @@ Java_org_mozilla_jss_pkcs11_PK11Signature_initSigContext\n     SGNContext *ctxt=NULL;\n     jobject contextProxy=NULL;\n     SECKEYPrivateKey *privk;\n+    SECAlgorithmID *signAlg=NULL;\n+    SECStatus rv;\n+    int keyTypeOKForPSS = 0;\n \n     /* Extract the private key from the PK11Signature */\n     if( getPrivateKey(env, this, &privk) != PR_SUCCESS) {\n         PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+    \n+    // See if the key is a candidate for PSS signature \n+    if (privk->keyType == rsaKey || privk->keyType == rsaPssKey) {\n+        keyTypeOKForPSS = 1;\n+    }\n+    \n+    PRArenaPool *arena = NULL;\n+    SECOidTag signingAlg = SEC_OID_UNKNOWN;\n \n-    /* Start the signing operation */\n-    ctxt = SGN_NewContext(getAlgorithm(env, this), privk);\n-\tif(ctxt == NULL) {\n-\t\tJSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n-\t\tgoto finish;\n-\t}\n+    signingAlg = getAlgorithm(env,this);\n+\n+    if(signingAlg == SEC_OID_PKCS1_RSA_PSS_SIGNATURE && keyTypeOKForPSS) {\n+        arena = PORT_NewArena(DER_DEFAULT_CHUNKSIZE);\n+        if (!arena) {\n+           JSS_throw(env, OUT_OF_MEMORY_ERROR);\n+           goto finish;\n+        }\n+\n+        signAlg = getRSAPSSParamsAndSigningAlg(arena,env, this,privk);\n+\n+        if (signAlg == NULL) {\n+            goto finish;\n+        }\n+\n+        /* Start the signing operation */\n+        ctxt = SGN_NewContextWithAlgorithmID(signAlg, privk);\n+\n+    } else {\n+        ctxt = SGN_NewContext(signingAlg, privk);\n+    }\n+\n+    if(ctxt == NULL) {\n+        if(arena != NULL) {\n+            PORT_FreeArena(arena, PR_FALSE);\n+        }\n+\n+        JSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n+\tgoto finish;\n+    }\n     if( SGN_Begin(ctxt) != SECSuccess ) {\n         JSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to begin signing context\");\n         goto finish;\n     }\n \n     /* Create a contextProxy and stick it in the PK11Signature object */\n     contextProxy = JSS_PK11_wrapSigContextProxy(env,\n-\t\t\t\t\t\t\t\t\t\t\t\t(void**)&ctxt,\n-\t\t\t\t\t\t\t\t\t\t\t\tSGN_CONTEXT);\n+        (void**)&ctxt,\n+        SGN_CONTEXT,arena);\n+\n     if(contextProxy == NULL) {\n         PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+\n     setSigContext(env, this, contextProxy);\n \n finish:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff5ca3c36780022fc61b4876c7d8aa33421ea35"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNjc4Mw==", "bodyText": "Ah I see. You're doing an arena-based allocation for the signAlg too. That definitely warrants a comment because it isn't obvious in this function.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r398826783", "createdAt": "2020-03-26T19:12:10Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -48,39 +55,79 @@ Java_org_mozilla_jss_pkcs11_PK11Signature_initSigContext\n     SGNContext *ctxt=NULL;\n     jobject contextProxy=NULL;\n     SECKEYPrivateKey *privk;\n+    SECAlgorithmID *signAlg=NULL;\n+    SECStatus rv;\n+    int keyTypeOKForPSS = 0;\n \n     /* Extract the private key from the PK11Signature */\n     if( getPrivateKey(env, this, &privk) != PR_SUCCESS) {\n         PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+    \n+    // See if the key is a candidate for PSS signature \n+    if (privk->keyType == rsaKey || privk->keyType == rsaPssKey) {\n+        keyTypeOKForPSS = 1;\n+    }\n+    \n+    PRArenaPool *arena = NULL;\n+    SECOidTag signingAlg = SEC_OID_UNKNOWN;\n \n-    /* Start the signing operation */\n-    ctxt = SGN_NewContext(getAlgorithm(env, this), privk);\n-\tif(ctxt == NULL) {\n-\t\tJSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n-\t\tgoto finish;\n-\t}\n+    signingAlg = getAlgorithm(env,this);\n+\n+    if(signingAlg == SEC_OID_PKCS1_RSA_PSS_SIGNATURE && keyTypeOKForPSS) {\n+        arena = PORT_NewArena(DER_DEFAULT_CHUNKSIZE);\n+        if (!arena) {\n+           JSS_throw(env, OUT_OF_MEMORY_ERROR);\n+           goto finish;\n+        }\n+\n+        signAlg = getRSAPSSParamsAndSigningAlg(arena,env, this,privk);\n+\n+        if (signAlg == NULL) {\n+            goto finish;\n+        }\n+\n+        /* Start the signing operation */\n+        ctxt = SGN_NewContextWithAlgorithmID(signAlg, privk);\n+\n+    } else {\n+        ctxt = SGN_NewContext(signingAlg, privk);\n+    }\n+\n+    if(ctxt == NULL) {\n+        if(arena != NULL) {\n+            PORT_FreeArena(arena, PR_FALSE);\n+        }\n+\n+        JSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n+\tgoto finish;\n+    }\n     if( SGN_Begin(ctxt) != SECSuccess ) {\n         JSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to begin signing context\");\n         goto finish;\n     }\n \n     /* Create a contextProxy and stick it in the PK11Signature object */\n     contextProxy = JSS_PK11_wrapSigContextProxy(env,\n-\t\t\t\t\t\t\t\t\t\t\t\t(void**)&ctxt,\n-\t\t\t\t\t\t\t\t\t\t\t\tSGN_CONTEXT);\n+        (void**)&ctxt,\n+        SGN_CONTEXT,arena);\n+\n     if(contextProxy == NULL) {\n         PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+\n     setSigContext(env, this, contextProxy);\n \n finish:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNTIwNQ=="}, "originalCommit": {"oid": "1ff5ca3c36780022fc61b4876c7d8aa33421ea35"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxODg1NA==", "bodyText": "I will look at it, I did do a valgrind run at one point and it looked ok, thx...", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r398918854", "createdAt": "2020-03-26T22:00:51Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -48,39 +55,79 @@ Java_org_mozilla_jss_pkcs11_PK11Signature_initSigContext\n     SGNContext *ctxt=NULL;\n     jobject contextProxy=NULL;\n     SECKEYPrivateKey *privk;\n+    SECAlgorithmID *signAlg=NULL;\n+    SECStatus rv;\n+    int keyTypeOKForPSS = 0;\n \n     /* Extract the private key from the PK11Signature */\n     if( getPrivateKey(env, this, &privk) != PR_SUCCESS) {\n         PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+    \n+    // See if the key is a candidate for PSS signature \n+    if (privk->keyType == rsaKey || privk->keyType == rsaPssKey) {\n+        keyTypeOKForPSS = 1;\n+    }\n+    \n+    PRArenaPool *arena = NULL;\n+    SECOidTag signingAlg = SEC_OID_UNKNOWN;\n \n-    /* Start the signing operation */\n-    ctxt = SGN_NewContext(getAlgorithm(env, this), privk);\n-\tif(ctxt == NULL) {\n-\t\tJSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n-\t\tgoto finish;\n-\t}\n+    signingAlg = getAlgorithm(env,this);\n+\n+    if(signingAlg == SEC_OID_PKCS1_RSA_PSS_SIGNATURE && keyTypeOKForPSS) {\n+        arena = PORT_NewArena(DER_DEFAULT_CHUNKSIZE);\n+        if (!arena) {\n+           JSS_throw(env, OUT_OF_MEMORY_ERROR);\n+           goto finish;\n+        }\n+\n+        signAlg = getRSAPSSParamsAndSigningAlg(arena,env, this,privk);\n+\n+        if (signAlg == NULL) {\n+            goto finish;\n+        }\n+\n+        /* Start the signing operation */\n+        ctxt = SGN_NewContextWithAlgorithmID(signAlg, privk);\n+\n+    } else {\n+        ctxt = SGN_NewContext(signingAlg, privk);\n+    }\n+\n+    if(ctxt == NULL) {\n+        if(arena != NULL) {\n+            PORT_FreeArena(arena, PR_FALSE);\n+        }\n+\n+        JSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n+\tgoto finish;\n+    }\n     if( SGN_Begin(ctxt) != SECSuccess ) {\n         JSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to begin signing context\");\n         goto finish;\n     }\n \n     /* Create a contextProxy and stick it in the PK11Signature object */\n     contextProxy = JSS_PK11_wrapSigContextProxy(env,\n-\t\t\t\t\t\t\t\t\t\t\t\t(void**)&ctxt,\n-\t\t\t\t\t\t\t\t\t\t\t\tSGN_CONTEXT);\n+        (void**)&ctxt,\n+        SGN_CONTEXT,arena);\n+\n     if(contextProxy == NULL) {\n         PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+\n     setSigContext(env, this, contextProxy);\n \n finish:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNTIwNQ=="}, "originalCommit": {"oid": "1ff5ca3c36780022fc61b4876c7d8aa33421ea35"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAzNDk5Nw==", "bodyText": "Added comment somewhere :)", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399034997", "createdAt": "2020-03-27T04:53:37Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -48,39 +55,79 @@ Java_org_mozilla_jss_pkcs11_PK11Signature_initSigContext\n     SGNContext *ctxt=NULL;\n     jobject contextProxy=NULL;\n     SECKEYPrivateKey *privk;\n+    SECAlgorithmID *signAlg=NULL;\n+    SECStatus rv;\n+    int keyTypeOKForPSS = 0;\n \n     /* Extract the private key from the PK11Signature */\n     if( getPrivateKey(env, this, &privk) != PR_SUCCESS) {\n         PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+    \n+    // See if the key is a candidate for PSS signature \n+    if (privk->keyType == rsaKey || privk->keyType == rsaPssKey) {\n+        keyTypeOKForPSS = 1;\n+    }\n+    \n+    PRArenaPool *arena = NULL;\n+    SECOidTag signingAlg = SEC_OID_UNKNOWN;\n \n-    /* Start the signing operation */\n-    ctxt = SGN_NewContext(getAlgorithm(env, this), privk);\n-\tif(ctxt == NULL) {\n-\t\tJSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n-\t\tgoto finish;\n-\t}\n+    signingAlg = getAlgorithm(env,this);\n+\n+    if(signingAlg == SEC_OID_PKCS1_RSA_PSS_SIGNATURE && keyTypeOKForPSS) {\n+        arena = PORT_NewArena(DER_DEFAULT_CHUNKSIZE);\n+        if (!arena) {\n+           JSS_throw(env, OUT_OF_MEMORY_ERROR);\n+           goto finish;\n+        }\n+\n+        signAlg = getRSAPSSParamsAndSigningAlg(arena,env, this,privk);\n+\n+        if (signAlg == NULL) {\n+            goto finish;\n+        }\n+\n+        /* Start the signing operation */\n+        ctxt = SGN_NewContextWithAlgorithmID(signAlg, privk);\n+\n+    } else {\n+        ctxt = SGN_NewContext(signingAlg, privk);\n+    }\n+\n+    if(ctxt == NULL) {\n+        if(arena != NULL) {\n+            PORT_FreeArena(arena, PR_FALSE);\n+        }\n+\n+        JSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n+\tgoto finish;\n+    }\n     if( SGN_Begin(ctxt) != SECSuccess ) {\n         JSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to begin signing context\");\n         goto finish;\n     }\n \n     /* Create a contextProxy and stick it in the PK11Signature object */\n     contextProxy = JSS_PK11_wrapSigContextProxy(env,\n-\t\t\t\t\t\t\t\t\t\t\t\t(void**)&ctxt,\n-\t\t\t\t\t\t\t\t\t\t\t\tSGN_CONTEXT);\n+        (void**)&ctxt,\n+        SGN_CONTEXT,arena);\n+\n     if(contextProxy == NULL) {\n         PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+\n     setSigContext(env, this, contextProxy);\n \n finish:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNTIwNQ=="}, "originalCommit": {"oid": "1ff5ca3c36780022fc61b4876c7d8aa33421ea35"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjUwODU5OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToxNjo1NFrOF8Wn3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNDo1NDoyMFrOF8jLSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyOTUzNQ==", "bodyText": "Why not pull this into a macro instead of a variable? Seems weird, since you only use the variable once but reuse the check a couple of places.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r398829535", "createdAt": "2020-03-26T19:16:54Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -48,39 +55,79 @@ Java_org_mozilla_jss_pkcs11_PK11Signature_initSigContext\n     SGNContext *ctxt=NULL;\n     jobject contextProxy=NULL;\n     SECKEYPrivateKey *privk;\n+    SECAlgorithmID *signAlg=NULL;\n+    SECStatus rv;\n+    int keyTypeOKForPSS = 0;\n \n     /* Extract the private key from the PK11Signature */\n     if( getPrivateKey(env, this, &privk) != PR_SUCCESS) {\n         PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+    \n+    // See if the key is a candidate for PSS signature \n+    if (privk->keyType == rsaKey || privk->keyType == rsaPssKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff5ca3c36780022fc61b4876c7d8aa33421ea35"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAzNTIxMQ==", "bodyText": "Got rid of the variable. Upon further review this is a redundant check, we only care if the alg is correct.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399035211", "createdAt": "2020-03-27T04:54:20Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -48,39 +55,79 @@ Java_org_mozilla_jss_pkcs11_PK11Signature_initSigContext\n     SGNContext *ctxt=NULL;\n     jobject contextProxy=NULL;\n     SECKEYPrivateKey *privk;\n+    SECAlgorithmID *signAlg=NULL;\n+    SECStatus rv;\n+    int keyTypeOKForPSS = 0;\n \n     /* Extract the private key from the PK11Signature */\n     if( getPrivateKey(env, this, &privk) != PR_SUCCESS) {\n         PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+    \n+    // See if the key is a candidate for PSS signature \n+    if (privk->keyType == rsaKey || privk->keyType == rsaPssKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyOTUzNQ=="}, "originalCommit": {"oid": "1ff5ca3c36780022fc61b4876c7d8aa33421ea35"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjUxMjg5OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToxNzo1OVrOF8WqhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoyMjoxMVrOF864FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMDIxMw==", "bodyText": "What I'm missing is why are we continuing if the key isn't OK for PSS?\nIn particular, when signingAlg == SEC_OID_PKCS1_RSA_PSS_SIGNATURE and !keyTypeOKForPSS, shouldn't we fail?\nedit: Continuing as in, why does the else branch work? Wouldn't it fail because its short parameters or something? It isn't obvious to me why. Probably at least needs a comment in the else branch.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r398830213", "createdAt": "2020-03-26T19:17:59Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -48,39 +55,79 @@ Java_org_mozilla_jss_pkcs11_PK11Signature_initSigContext\n     SGNContext *ctxt=NULL;\n     jobject contextProxy=NULL;\n     SECKEYPrivateKey *privk;\n+    SECAlgorithmID *signAlg=NULL;\n+    SECStatus rv;\n+    int keyTypeOKForPSS = 0;\n \n     /* Extract the private key from the PK11Signature */\n     if( getPrivateKey(env, this, &privk) != PR_SUCCESS) {\n         PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+    \n+    // See if the key is a candidate for PSS signature \n+    if (privk->keyType == rsaKey || privk->keyType == rsaPssKey) {\n+        keyTypeOKForPSS = 1;\n+    }\n+    \n+    PRArenaPool *arena = NULL;\n+    SECOidTag signingAlg = SEC_OID_UNKNOWN;\n \n-    /* Start the signing operation */\n-    ctxt = SGN_NewContext(getAlgorithm(env, this), privk);\n-\tif(ctxt == NULL) {\n-\t\tJSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n-\t\tgoto finish;\n-\t}\n+    signingAlg = getAlgorithm(env,this);\n+\n+    if(signingAlg == SEC_OID_PKCS1_RSA_PSS_SIGNATURE && keyTypeOKForPSS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff5ca3c36780022fc61b4876c7d8aa33421ea35"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAzNTQwNg==", "bodyText": "The else branch is just for everything else not PSS. Note that the context is created differently in those two cases.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399035406", "createdAt": "2020-03-27T04:55:12Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -48,39 +55,79 @@ Java_org_mozilla_jss_pkcs11_PK11Signature_initSigContext\n     SGNContext *ctxt=NULL;\n     jobject contextProxy=NULL;\n     SECKEYPrivateKey *privk;\n+    SECAlgorithmID *signAlg=NULL;\n+    SECStatus rv;\n+    int keyTypeOKForPSS = 0;\n \n     /* Extract the private key from the PK11Signature */\n     if( getPrivateKey(env, this, &privk) != PR_SUCCESS) {\n         PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+    \n+    // See if the key is a candidate for PSS signature \n+    if (privk->keyType == rsaKey || privk->keyType == rsaPssKey) {\n+        keyTypeOKForPSS = 1;\n+    }\n+    \n+    PRArenaPool *arena = NULL;\n+    SECOidTag signingAlg = SEC_OID_UNKNOWN;\n \n-    /* Start the signing operation */\n-    ctxt = SGN_NewContext(getAlgorithm(env, this), privk);\n-\tif(ctxt == NULL) {\n-\t\tJSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n-\t\tgoto finish;\n-\t}\n+    signingAlg = getAlgorithm(env,this);\n+\n+    if(signingAlg == SEC_OID_PKCS1_RSA_PSS_SIGNATURE && keyTypeOKForPSS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMDIxMw=="}, "originalCommit": {"oid": "1ff5ca3c36780022fc61b4876c7d8aa33421ea35"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyMzUwOQ==", "bodyText": "Right, I'm happier with the new check.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399423509", "createdAt": "2020-03-27T17:22:11Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -48,39 +55,79 @@ Java_org_mozilla_jss_pkcs11_PK11Signature_initSigContext\n     SGNContext *ctxt=NULL;\n     jobject contextProxy=NULL;\n     SECKEYPrivateKey *privk;\n+    SECAlgorithmID *signAlg=NULL;\n+    SECStatus rv;\n+    int keyTypeOKForPSS = 0;\n \n     /* Extract the private key from the PK11Signature */\n     if( getPrivateKey(env, this, &privk) != PR_SUCCESS) {\n         PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+    \n+    // See if the key is a candidate for PSS signature \n+    if (privk->keyType == rsaKey || privk->keyType == rsaPssKey) {\n+        keyTypeOKForPSS = 1;\n+    }\n+    \n+    PRArenaPool *arena = NULL;\n+    SECOidTag signingAlg = SEC_OID_UNKNOWN;\n \n-    /* Start the signing operation */\n-    ctxt = SGN_NewContext(getAlgorithm(env, this), privk);\n-\tif(ctxt == NULL) {\n-\t\tJSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n-\t\tgoto finish;\n-\t}\n+    signingAlg = getAlgorithm(env,this);\n+\n+    if(signingAlg == SEC_OID_PKCS1_RSA_PSS_SIGNATURE && keyTypeOKForPSS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMDIxMw=="}, "originalCommit": {"oid": "1ff5ca3c36780022fc61b4876c7d8aa33421ea35"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjMzNDUzOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoyODoxN1rOF87GSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozNjo1MVrOF9EpXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNzE0Nw==", "bodyText": "We should probably keep the same indentation as the rest of the file. Er, method.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399427147", "createdAt": "2020-03-27T17:28:17Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -90,20 +133,67 @@ Java_org_mozilla_jss_pkcs11_PK11Signature_initVfyContext\n {\n \tVFYContext *ctxt=NULL;\n \tjobject contextProxy=NULL;\n-\tSECKEYPublicKey *pubk;\n+        SECKEYPublicKey *pubk;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NjE4NQ==", "bodyText": "I don't understand this one. If you look at the file, it's all aligned..", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399486185", "createdAt": "2020-03-27T19:14:18Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -90,20 +133,67 @@ Java_org_mozilla_jss_pkcs11_PK11Signature_initVfyContext\n {\n \tVFYContext *ctxt=NULL;\n \tjobject contextProxy=NULL;\n-\tSECKEYPublicKey *pubk;\n+        SECKEYPublicKey *pubk;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNzE0Nw=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4OTc5OA==", "bodyText": "The issue is tabs versus spaces. The rest of this function uses tabs I think, but you've inserted spaces.\nTry :set list in vim to show tabs/spaces. Not sure about other editors. :)", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399489798", "createdAt": "2020-03-27T19:21:07Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -90,20 +133,67 @@ Java_org_mozilla_jss_pkcs11_PK11Signature_initVfyContext\n {\n \tVFYContext *ctxt=NULL;\n \tjobject contextProxy=NULL;\n-\tSECKEYPublicKey *pubk;\n+        SECKEYPublicKey *pubk;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNzE0Nw=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzU4MA==", "bodyText": "I missed this one. Soon I will have to move on to pki :)", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583580", "createdAt": "2020-03-27T23:36:51Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -90,20 +133,67 @@ Java_org_mozilla_jss_pkcs11_PK11Signature_initVfyContext\n {\n \tVFYContext *ctxt=NULL;\n \tjobject contextProxy=NULL;\n-\tSECKEYPublicKey *pubk;\n+        SECKEYPublicKey *pubk;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNzE0Nw=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjM0MDYzOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoyOTo0OFrOF87KLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozMjoxOFrOF9ElWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyODE0Mg==", "bodyText": "Spare newline.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399428142", "createdAt": "2020-03-27T17:29:48Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -355,6 +454,81 @@ getAlgorithm(JNIEnv *env, jobject sig)\n     return retval;\n }\n \n+static SECOidTag\n+getDigestAlgorithm(JNIEnv *env, jobject sig)\n+{\n+    jclass sigClass;\n+    jfieldID algField;\n+    jobject alg;\n+    SECOidTag retval=SEC_OID_UNKNOWN;\n+\n+    PR_ASSERT(env!=NULL && sig!=NULL);\n+\n+    sigClass = (*env)->GetObjectClass(env, sig);\n+    PR_ASSERT(sigClass != NULL);\n+\n+    algField = (*env)->GetFieldID(  env,\n+                                    sigClass,\n+                                    SIG_DIGEST_ALGORITHM_FIELD,\n+                                    SIG_ALGORITHM_SIG);\n+    if(algField == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    alg = (*env)->GetObjectField(env, sig, algField);\n+    if(alg == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    retval = JSS_getOidTagFromAlg(env, alg);\n+\n+finish:\n+    return retval;\n+}\n+\n+static\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MjU1NQ==", "bodyText": "Done. I think. If I missed any of these, it was an over sight... :)", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399582555", "createdAt": "2020-03-27T23:32:18Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -355,6 +454,81 @@ getAlgorithm(JNIEnv *env, jobject sig)\n     return retval;\n }\n \n+static SECOidTag\n+getDigestAlgorithm(JNIEnv *env, jobject sig)\n+{\n+    jclass sigClass;\n+    jfieldID algField;\n+    jobject alg;\n+    SECOidTag retval=SEC_OID_UNKNOWN;\n+\n+    PR_ASSERT(env!=NULL && sig!=NULL);\n+\n+    sigClass = (*env)->GetObjectClass(env, sig);\n+    PR_ASSERT(sigClass != NULL);\n+\n+    algField = (*env)->GetFieldID(  env,\n+                                    sigClass,\n+                                    SIG_DIGEST_ALGORITHM_FIELD,\n+                                    SIG_ALGORITHM_SIG);\n+    if(algField == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    alg = (*env)->GetObjectField(env, sig, algField);\n+    if(alg == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    retval = JSS_getOidTagFromAlg(env, alg);\n+\n+finish:\n+    return retval;\n+}\n+\n+static\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyODE0Mg=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjM0MjU4OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzozMDoxNVrOF87LXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozMjoyNlrOF9Eleg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyODQ0NA==", "bodyText": "Space please? :-)\nif (alg == NULL) {", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399428444", "createdAt": "2020-03-27T17:30:15Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -355,6 +454,81 @@ getAlgorithm(JNIEnv *env, jobject sig)\n     return retval;\n }\n \n+static SECOidTag\n+getDigestAlgorithm(JNIEnv *env, jobject sig)\n+{\n+    jclass sigClass;\n+    jfieldID algField;\n+    jobject alg;\n+    SECOidTag retval=SEC_OID_UNKNOWN;\n+\n+    PR_ASSERT(env!=NULL && sig!=NULL);\n+\n+    sigClass = (*env)->GetObjectClass(env, sig);\n+    PR_ASSERT(sigClass != NULL);\n+\n+    algField = (*env)->GetFieldID(  env,\n+                                    sigClass,\n+                                    SIG_DIGEST_ALGORITHM_FIELD,\n+                                    SIG_ALGORITHM_SIG);\n+    if(algField == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    alg = (*env)->GetObjectField(env, sig, algField);\n+    if(alg == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    retval = JSS_getOidTagFromAlg(env, alg);\n+\n+finish:\n+    return retval;\n+}\n+\n+static\n+\n+SECStatus getRSAPSSParamsAndSigningAlg(JNIEnv *env, jobject this, PRArenaPool *arena, SECAlgorithmID **alg, SECKEYPrivateKey *privk)\n+{\n+    SECItem *sigAlgParams;\n+    SECAlgorithmID *signAlg=NULL;\n+    SECOidTag digestAlg = SEC_OID_UNKNOWN;\n+    SECStatus rv = SECSuccess ;\n+\n+    if(alg == NULL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MjU4Ng==", "bodyText": "Done.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399582586", "createdAt": "2020-03-27T23:32:26Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -355,6 +454,81 @@ getAlgorithm(JNIEnv *env, jobject sig)\n     return retval;\n }\n \n+static SECOidTag\n+getDigestAlgorithm(JNIEnv *env, jobject sig)\n+{\n+    jclass sigClass;\n+    jfieldID algField;\n+    jobject alg;\n+    SECOidTag retval=SEC_OID_UNKNOWN;\n+\n+    PR_ASSERT(env!=NULL && sig!=NULL);\n+\n+    sigClass = (*env)->GetObjectClass(env, sig);\n+    PR_ASSERT(sigClass != NULL);\n+\n+    algField = (*env)->GetFieldID(  env,\n+                                    sigClass,\n+                                    SIG_DIGEST_ALGORITHM_FIELD,\n+                                    SIG_ALGORITHM_SIG);\n+    if(algField == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    alg = (*env)->GetObjectField(env, sig, algField);\n+    if(alg == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    retval = JSS_getOidTagFromAlg(env, alg);\n+\n+finish:\n+    return retval;\n+}\n+\n+static\n+\n+SECStatus getRSAPSSParamsAndSigningAlg(JNIEnv *env, jobject this, PRArenaPool *arena, SECAlgorithmID **alg, SECKEYPrivateKey *privk)\n+{\n+    SECItem *sigAlgParams;\n+    SECAlgorithmID *signAlg=NULL;\n+    SECOidTag digestAlg = SEC_OID_UNKNOWN;\n+    SECStatus rv = SECSuccess ;\n+\n+    if(alg == NULL) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyODQ0NA=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjM2Nzc1OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzozNzowN1rOF87bhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozMjo0OFrOF9El4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMjU4Mg==", "bodyText": "Oh here's where that space went. ;-) I'd remove this one.\nSECStatus rv = SECSuccess;\nAlso, do we want this to be SECFailure?\nI'm confused:\nif (alg == NULL) {\n    return SECSuccess;\n}\nWhy would we want a success exit code here?\n    if (signAlg == NULL) {\n        return SECSuccess;\n    }\nAlso seems like the wrong return if PORT_AreanZAlloc fails.\n    if (!sigAlgParams) {\n        rv = SECFailure;\n        goto finish;\n    }\nThat seems right. :-) But we can just initialize rv to SECSuccess and remove the set here. :)", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399432582", "createdAt": "2020-03-27T17:37:07Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -355,6 +454,81 @@ getAlgorithm(JNIEnv *env, jobject sig)\n     return retval;\n }\n \n+static SECOidTag\n+getDigestAlgorithm(JNIEnv *env, jobject sig)\n+{\n+    jclass sigClass;\n+    jfieldID algField;\n+    jobject alg;\n+    SECOidTag retval=SEC_OID_UNKNOWN;\n+\n+    PR_ASSERT(env!=NULL && sig!=NULL);\n+\n+    sigClass = (*env)->GetObjectClass(env, sig);\n+    PR_ASSERT(sigClass != NULL);\n+\n+    algField = (*env)->GetFieldID(  env,\n+                                    sigClass,\n+                                    SIG_DIGEST_ALGORITHM_FIELD,\n+                                    SIG_ALGORITHM_SIG);\n+    if(algField == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    alg = (*env)->GetObjectField(env, sig, algField);\n+    if(alg == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    retval = JSS_getOidTagFromAlg(env, alg);\n+\n+finish:\n+    return retval;\n+}\n+\n+static\n+\n+SECStatus getRSAPSSParamsAndSigningAlg(JNIEnv *env, jobject this, PRArenaPool *arena, SECAlgorithmID **alg, SECKEYPrivateKey *privk)\n+{\n+    SECItem *sigAlgParams;\n+    SECAlgorithmID *signAlg=NULL;\n+    SECOidTag digestAlg = SEC_OID_UNKNOWN;\n+    SECStatus rv = SECSuccess ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNjg3OA==", "bodyText": "Actually, going a step further, I don't think the finish label is really required. The arena handles freeing the memory. So we can replace goto finish with return rv directly.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399436878", "createdAt": "2020-03-27T17:44:08Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -355,6 +454,81 @@ getAlgorithm(JNIEnv *env, jobject sig)\n     return retval;\n }\n \n+static SECOidTag\n+getDigestAlgorithm(JNIEnv *env, jobject sig)\n+{\n+    jclass sigClass;\n+    jfieldID algField;\n+    jobject alg;\n+    SECOidTag retval=SEC_OID_UNKNOWN;\n+\n+    PR_ASSERT(env!=NULL && sig!=NULL);\n+\n+    sigClass = (*env)->GetObjectClass(env, sig);\n+    PR_ASSERT(sigClass != NULL);\n+\n+    algField = (*env)->GetFieldID(  env,\n+                                    sigClass,\n+                                    SIG_DIGEST_ALGORITHM_FIELD,\n+                                    SIG_ALGORITHM_SIG);\n+    if(algField == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    alg = (*env)->GetObjectField(env, sig, algField);\n+    if(alg == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    retval = JSS_getOidTagFromAlg(env, alg);\n+\n+finish:\n+    return retval;\n+}\n+\n+static\n+\n+SECStatus getRSAPSSParamsAndSigningAlg(JNIEnv *env, jobject this, PRArenaPool *arena, SECAlgorithmID **alg, SECKEYPrivateKey *privk)\n+{\n+    SECItem *sigAlgParams;\n+    SECAlgorithmID *signAlg=NULL;\n+    SECOidTag digestAlg = SEC_OID_UNKNOWN;\n+    SECStatus rv = SECSuccess ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMjU4Mg=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4MTg4MQ==", "bodyText": "Apologies, was still working on this latish last night :)", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399481881", "createdAt": "2020-03-27T19:06:06Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -355,6 +454,81 @@ getAlgorithm(JNIEnv *env, jobject sig)\n     return retval;\n }\n \n+static SECOidTag\n+getDigestAlgorithm(JNIEnv *env, jobject sig)\n+{\n+    jclass sigClass;\n+    jfieldID algField;\n+    jobject alg;\n+    SECOidTag retval=SEC_OID_UNKNOWN;\n+\n+    PR_ASSERT(env!=NULL && sig!=NULL);\n+\n+    sigClass = (*env)->GetObjectClass(env, sig);\n+    PR_ASSERT(sigClass != NULL);\n+\n+    algField = (*env)->GetFieldID(  env,\n+                                    sigClass,\n+                                    SIG_DIGEST_ALGORITHM_FIELD,\n+                                    SIG_ALGORITHM_SIG);\n+    if(algField == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    alg = (*env)->GetObjectField(env, sig, algField);\n+    if(alg == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    retval = JSS_getOidTagFromAlg(env, alg);\n+\n+finish:\n+    return retval;\n+}\n+\n+static\n+\n+SECStatus getRSAPSSParamsAndSigningAlg(JNIEnv *env, jobject this, PRArenaPool *arena, SECAlgorithmID **alg, SECKEYPrivateKey *privk)\n+{\n+    SECItem *sigAlgParams;\n+    SECAlgorithmID *signAlg=NULL;\n+    SECOidTag digestAlg = SEC_OID_UNKNOWN;\n+    SECStatus rv = SECSuccess ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMjU4Mg=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MjY4OA==", "bodyText": "Fixed this to the spirit of what you were suggesting...", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399582688", "createdAt": "2020-03-27T23:32:48Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -355,6 +454,81 @@ getAlgorithm(JNIEnv *env, jobject sig)\n     return retval;\n }\n \n+static SECOidTag\n+getDigestAlgorithm(JNIEnv *env, jobject sig)\n+{\n+    jclass sigClass;\n+    jfieldID algField;\n+    jobject alg;\n+    SECOidTag retval=SEC_OID_UNKNOWN;\n+\n+    PR_ASSERT(env!=NULL && sig!=NULL);\n+\n+    sigClass = (*env)->GetObjectClass(env, sig);\n+    PR_ASSERT(sigClass != NULL);\n+\n+    algField = (*env)->GetFieldID(  env,\n+                                    sigClass,\n+                                    SIG_DIGEST_ALGORITHM_FIELD,\n+                                    SIG_ALGORITHM_SIG);\n+    if(algField == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    alg = (*env)->GetObjectField(env, sig, algField);\n+    if(alg == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;\n+    }\n+\n+    retval = JSS_getOidTagFromAlg(env, alg);\n+\n+finish:\n+    return retval;\n+}\n+\n+static\n+\n+SECStatus getRSAPSSParamsAndSigningAlg(JNIEnv *env, jobject this, PRArenaPool *arena, SECAlgorithmID **alg, SECKEYPrivateKey *privk)\n+{\n+    SECItem *sigAlgParams;\n+    SECAlgorithmID *signAlg=NULL;\n+    SECOidTag digestAlg = SEC_OID_UNKNOWN;\n+    SECStatus rv = SECSuccess ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMjU4Mg=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 265}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjQyNTMwOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzo1Mjo1MVrOF88AVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozMzowM1rOF9EmFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0MjAwNw==", "bodyText": "Why did this get collapsed?", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399442007", "createdAt": "2020-03-27T17:52:51Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -644,11 +823,17 @@ Java_org_mozilla_jss_pkcs11_SigContextProxy_releaseNativeResources\n \n     /* Free the context and the proxy */\n     if(proxy->type == SGN_CONTEXT) {\n-        SGN_DestroyContext( (SGNContext*)proxy->ctxt, PR_TRUE /*freeit*/);\n-    } else {\n+        SGN_DestroyContext( (SGNContext*)proxy->ctxt, PR_TRUE /*freeit*/); } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 336}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4Mjc0MA==", "bodyText": "I do no know how that happened, but I fixed it.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399582740", "createdAt": "2020-03-27T23:33:03Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -644,11 +823,17 @@ Java_org_mozilla_jss_pkcs11_SigContextProxy_releaseNativeResources\n \n     /* Free the context and the proxy */\n     if(proxy->type == SGN_CONTEXT) {\n-        SGN_DestroyContext( (SGNContext*)proxy->ctxt, PR_TRUE /*freeit*/);\n-    } else {\n+        SGN_DestroyContext( (SGNContext*)proxy->ctxt, PR_TRUE /*freeit*/); } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0MjAwNw=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 336}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjQzNDczOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzo1NTozMFrOF88GZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozMzoxOVrOF9EmQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0MzU1OQ==", "bodyText": "Debug statement should probably be removed.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399443559", "createdAt": "2020-03-27T17:55:30Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -644,11 +823,17 @@ Java_org_mozilla_jss_pkcs11_SigContextProxy_releaseNativeResources\n \n     /* Free the context and the proxy */\n     if(proxy->type == SGN_CONTEXT) {\n-        SGN_DestroyContext( (SGNContext*)proxy->ctxt, PR_TRUE /*freeit*/);\n-    } else {\n+        SGN_DestroyContext( (SGNContext*)proxy->ctxt, PR_TRUE /*freeit*/); } else {\n         PR_ASSERT(proxy->type == VFY_CONTEXT);\n         VFY_DestroyContext( (VFYContext*)proxy->ctxt, PR_TRUE /*freeit*/);\n     }\n+\n+    if(proxy->arena != NULL) {\n+        PR_fprintf(PR_STDERR,\"About to remove arena!\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 342}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0NTA5NQ==", "bodyText": "And space on the line above too :-)", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399445095", "createdAt": "2020-03-27T17:58:02Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -644,11 +823,17 @@ Java_org_mozilla_jss_pkcs11_SigContextProxy_releaseNativeResources\n \n     /* Free the context and the proxy */\n     if(proxy->type == SGN_CONTEXT) {\n-        SGN_DestroyContext( (SGNContext*)proxy->ctxt, PR_TRUE /*freeit*/);\n-    } else {\n+        SGN_DestroyContext( (SGNContext*)proxy->ctxt, PR_TRUE /*freeit*/); } else {\n         PR_ASSERT(proxy->type == VFY_CONTEXT);\n         VFY_DestroyContext( (VFYContext*)proxy->ctxt, PR_TRUE /*freeit*/);\n     }\n+\n+    if(proxy->arena != NULL) {\n+        PR_fprintf(PR_STDERR,\"About to remove arena!\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0MzU1OQ=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 342}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4Mjc4NQ==", "bodyText": "Done.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399582785", "createdAt": "2020-03-27T23:33:19Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -644,11 +823,17 @@ Java_org_mozilla_jss_pkcs11_SigContextProxy_releaseNativeResources\n \n     /* Free the context and the proxy */\n     if(proxy->type == SGN_CONTEXT) {\n-        SGN_DestroyContext( (SGNContext*)proxy->ctxt, PR_TRUE /*freeit*/);\n-    } else {\n+        SGN_DestroyContext( (SGNContext*)proxy->ctxt, PR_TRUE /*freeit*/); } else {\n         PR_ASSERT(proxy->type == VFY_CONTEXT);\n         VFY_DestroyContext( (VFYContext*)proxy->ctxt, PR_TRUE /*freeit*/);\n     }\n+\n+    if(proxy->arena != NULL) {\n+        PR_fprintf(PR_STDERR,\"About to remove arena!\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0MzU1OQ=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 342}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjQ4Mzc4OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/pkcs11/PK11Signature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODowOToyN1rOF88l6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozMzo1MFrOF9Emwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MTYyNw==", "bodyText": "Not sure I understand this one. Shouldn't we fail here if no algorithm was specified?", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399451627", "createdAt": "2020-03-27T18:09:27Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.java", "diffHunk": "@@ -317,12 +334,47 @@ native protected boolean engineVerifyNative(byte[] sigBytes)\n     public void engineSetParameter(AlgorithmParameterSpec params)\n         throws InvalidAlgorithmParameterException, TokenException\n     {\n-        Assert.notYetImplemented(\"PK11Signature.engineSetParameter\");\n+        //For now we only care about RSAPSS\n+        if( isRSAPSSAlgorithm((SignatureAlgorithm) algorithm) ) {\n+            digestAlgorithm = getRSAPSSDigestAlgFromSpec((PSSParameterSpec) params);\n+        }\n+    }\n+\n+    private Algorithm getRSAPSSDigestAlgFromSpec(PSSParameterSpec params) {\n+         String hashAlgName = params.getDigestAlgorithm();\n+         Algorithm hashAlg = null;\n+        if(hashAlgName.equals(\"SHA-256\")) {\n+            hashAlg =  DigestAlgorithm.SHA256;\n+        }  else if(hashAlgName.equals(\"SHA-512\")) {\n+            hashAlg =  DigestAlgorithm.SHA512;\n+        }  else if(hashAlgName.equals(\"SHA-384\")) {\n+            hashAlg =  DigestAlgorithm.SHA384;\n+        } else {\n+            hashAlg =  DigestAlgorithm.SHA256;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MjkxNA==", "bodyText": "Done, throws exception.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399582914", "createdAt": "2020-03-27T23:33:50Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.java", "diffHunk": "@@ -317,12 +334,47 @@ native protected boolean engineVerifyNative(byte[] sigBytes)\n     public void engineSetParameter(AlgorithmParameterSpec params)\n         throws InvalidAlgorithmParameterException, TokenException\n     {\n-        Assert.notYetImplemented(\"PK11Signature.engineSetParameter\");\n+        //For now we only care about RSAPSS\n+        if( isRSAPSSAlgorithm((SignatureAlgorithm) algorithm) ) {\n+            digestAlgorithm = getRSAPSSDigestAlgFromSpec((PSSParameterSpec) params);\n+        }\n+    }\n+\n+    private Algorithm getRSAPSSDigestAlgFromSpec(PSSParameterSpec params) {\n+         String hashAlgName = params.getDigestAlgorithm();\n+         Algorithm hashAlg = null;\n+        if(hashAlgName.equals(\"SHA-256\")) {\n+            hashAlg =  DigestAlgorithm.SHA256;\n+        }  else if(hashAlgName.equals(\"SHA-512\")) {\n+            hashAlg =  DigestAlgorithm.SHA512;\n+        }  else if(hashAlgName.equals(\"SHA-384\")) {\n+            hashAlg =  DigestAlgorithm.SHA384;\n+        } else {\n+            hashAlg =  DigestAlgorithm.SHA256;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MTYyNw=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjQ4NjIzOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/pkcs11/PK11Signature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoxMDowM1rOF88naA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozNDowMlrOF9Em_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MjAwOA==", "bodyText": "Do we want to leave an else block and say it isn't implemented / supported to pass parameters to other signature schemes?", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399452008", "createdAt": "2020-03-27T18:10:03Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.java", "diffHunk": "@@ -317,12 +334,47 @@ native protected boolean engineVerifyNative(byte[] sigBytes)\n     public void engineSetParameter(AlgorithmParameterSpec params)\n         throws InvalidAlgorithmParameterException, TokenException\n     {\n-        Assert.notYetImplemented(\"PK11Signature.engineSetParameter\");\n+        //For now we only care about RSAPSS\n+        if( isRSAPSSAlgorithm((SignatureAlgorithm) algorithm) ) {\n+            digestAlgorithm = getRSAPSSDigestAlgFromSpec((PSSParameterSpec) params);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4Mjk3Mg==", "bodyText": "Done, throw exception.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399582972", "createdAt": "2020-03-27T23:34:02Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.java", "diffHunk": "@@ -317,12 +334,47 @@ native protected boolean engineVerifyNative(byte[] sigBytes)\n     public void engineSetParameter(AlgorithmParameterSpec params)\n         throws InvalidAlgorithmParameterException, TokenException\n     {\n-        Assert.notYetImplemented(\"PK11Signature.engineSetParameter\");\n+        //For now we only care about RSAPSS\n+        if( isRSAPSSAlgorithm((SignatureAlgorithm) algorithm) ) {\n+            digestAlgorithm = getRSAPSSDigestAlgFromSpec((PSSParameterSpec) params);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MjAwOA=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjQ4OTIxOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/pkcs11/PK11Signature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoxMDo1M1rOF88pTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozNDozMFrOF9EnYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MjQ5NQ==", "bodyText": "Could we keep the indentation the same? Thanks!", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399452495", "createdAt": "2020-03-27T18:10:53Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.java", "diffHunk": "@@ -317,12 +334,47 @@ native protected boolean engineVerifyNative(byte[] sigBytes)\n     public void engineSetParameter(AlgorithmParameterSpec params)\n         throws InvalidAlgorithmParameterException, TokenException\n     {\n-        Assert.notYetImplemented(\"PK11Signature.engineSetParameter\");\n+        //For now we only care about RSAPSS\n+        if( isRSAPSSAlgorithm((SignatureAlgorithm) algorithm) ) {\n+            digestAlgorithm = getRSAPSSDigestAlgFromSpec((PSSParameterSpec) params);\n+        }\n+    }\n+\n+    private Algorithm getRSAPSSDigestAlgFromSpec(PSSParameterSpec params) {\n+         String hashAlgName = params.getDigestAlgorithm();\n+         Algorithm hashAlg = null;\n+        if(hashAlgName.equals(\"SHA-256\")) {\n+            hashAlg =  DigestAlgorithm.SHA256;\n+        }  else if(hashAlgName.equals(\"SHA-512\")) {\n+            hashAlg =  DigestAlgorithm.SHA512;\n+        }  else if(hashAlgName.equals(\"SHA-384\")) {\n+            hashAlg =  DigestAlgorithm.SHA384;\n+        } else {\n+            hashAlg =  DigestAlgorithm.SHA256;\n+        }\n+\n+        return hashAlg;\n+    }\n+\n+    private boolean isRSAPSSAlgorithm(SignatureAlgorithm algorithm) {\n+\n+        if(algorithm == null) {\n+            return false;\n+        }\n+        if( algorithm == SignatureAlgorithm.RSAPSSSignatureWithSHA256Digest\n+            || algorithm == SignatureAlgorithm.RSAPSSSignatureWithSHA384Digest \n+            || algorithm == SignatureAlgorithm.RSAPSSSignatureWithSHA512Digest\n+            || algorithm == SignatureAlgorithm.RSAPSSSignature) {\n+\n+            return true;\n+        }\n+        return false;\n     }\n \n \tprotected PK11Token token;\n \tprotected TokenProxy tokenProxy;\n \tprotected Algorithm algorithm;\n+        protected Algorithm digestAlgorithm;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzA3NQ==", "bodyText": "There was a mixup of this and existing code. I just fixed them all in that section.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583075", "createdAt": "2020-03-27T23:34:30Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/pkcs11/PK11Signature.java", "diffHunk": "@@ -317,12 +334,47 @@ native protected boolean engineVerifyNative(byte[] sigBytes)\n     public void engineSetParameter(AlgorithmParameterSpec params)\n         throws InvalidAlgorithmParameterException, TokenException\n     {\n-        Assert.notYetImplemented(\"PK11Signature.engineSetParameter\");\n+        //For now we only care about RSAPSS\n+        if( isRSAPSSAlgorithm((SignatureAlgorithm) algorithm) ) {\n+            digestAlgorithm = getRSAPSSDigestAlgFromSpec((PSSParameterSpec) params);\n+        }\n+    }\n+\n+    private Algorithm getRSAPSSDigestAlgFromSpec(PSSParameterSpec params) {\n+         String hashAlgName = params.getDigestAlgorithm();\n+         Algorithm hashAlg = null;\n+        if(hashAlgName.equals(\"SHA-256\")) {\n+            hashAlg =  DigestAlgorithm.SHA256;\n+        }  else if(hashAlgName.equals(\"SHA-512\")) {\n+            hashAlg =  DigestAlgorithm.SHA512;\n+        }  else if(hashAlgName.equals(\"SHA-384\")) {\n+            hashAlg =  DigestAlgorithm.SHA384;\n+        } else {\n+            hashAlg =  DigestAlgorithm.SHA256;\n+        }\n+\n+        return hashAlg;\n+    }\n+\n+    private boolean isRSAPSSAlgorithm(SignatureAlgorithm algorithm) {\n+\n+        if(algorithm == null) {\n+            return false;\n+        }\n+        if( algorithm == SignatureAlgorithm.RSAPSSSignatureWithSHA256Digest\n+            || algorithm == SignatureAlgorithm.RSAPSSSignatureWithSHA384Digest \n+            || algorithm == SignatureAlgorithm.RSAPSSSignatureWithSHA512Digest\n+            || algorithm == SignatureAlgorithm.RSAPSSSignature) {\n+\n+            return true;\n+        }\n+        return false;\n     }\n \n \tprotected PK11Token token;\n \tprotected TokenProxy tokenProxy;\n \tprotected Algorithm algorithm;\n+        protected Algorithm digestAlgorithm;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MjQ5NQ=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjUwNTAzOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/provider/java/security/JSSSignatureSpi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoxNTozNlrOF88zaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozNDozOVrOF9EnjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1NTA4MQ==", "bodyText": "At least a separate line? :-)", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399455081", "createdAt": "2020-03-27T18:15:36Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/provider/java/security/JSSSignatureSpi.java", "diffHunk": "@@ -35,12 +36,16 @@ public void engineInitSign(java.security.PrivateKey privateKey)\n     {\n         try {\n             sig = getSigContext(privateKey);\n+            if(paramSpec != null) sig.setParameter(paramSpec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzExNg==", "bodyText": "Done.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583116", "createdAt": "2020-03-27T23:34:39Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/provider/java/security/JSSSignatureSpi.java", "diffHunk": "@@ -35,12 +36,16 @@ public void engineInitSign(java.security.PrivateKey privateKey)\n     {\n         try {\n             sig = getSigContext(privateKey);\n+            if(paramSpec != null) sig.setParameter(paramSpec);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1NTA4MQ=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjU0MDQyOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/provider/java/security/RSAPSSAlgorithmParameters.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoyNTo1MlrOF89Jjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozNDo0N1rOF9EnrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2MDc1MA==", "bodyText": "Could we remove this too? And the comments above?", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399460750", "createdAt": "2020-03-27T18:25:52Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/provider/java/security/RSAPSSAlgorithmParameters.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\n+/*  RSASSA-PSS-params ::= SEQUENCE {\n+   hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,\n+   maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,\n+   saltLength         [2] INTEGER  DEFAULT 20,\n+   trailerField       [3] INTEGER  DEFAULT 1\n+ }\n+\n+where\n+\n+ OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+   { OID id-sha1 PARAMETERS NULL   }|\n+   { OID id-sha224 PARAMETERS NULL   }|\n+   { OID id-sha256 PARAMETERS NULL }|\n+   { OID id-sha384 PARAMETERS NULL }|\n+   { OID id-sha512 PARAMETERS NULL },\n+   ...  -- Allows for future expansion --\n+ }\n+\n+ PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+   { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },\n+   ...  -- Allows for future expansion --\n+ }\n+*/\n+\n+package org.mozilla.jss.provider.java.security;\n+\n+import java.security.*;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.security.spec.PSSParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.io.IOException;\n+import org.mozilla.jss.util.Assert;\n+import org.mozilla.jss.netscape.security.util.BigInt;\n+import org.mozilla.jss.netscape.security.x509.AlgorithmId;\n+import org.mozilla.jss.netscape.security.util.DerOutputStream;\n+import org.mozilla.jss.netscape.security.util.DerInputStream;\n+import org.mozilla.jss.netscape.security.util.DerValue;\n+import org.mozilla.jss.netscape.security.util.ObjectIdentifier;\n+import org.mozilla.jss.asn1.ASN1Template;\n+import org.mozilla.jss.asn1.ASN1Value;\n+import org.mozilla.jss.asn1.INTEGER;\n+import org.mozilla.jss.asn1.InvalidBERException;\n+import org.mozilla.jss.asn1.OBJECT_IDENTIFIER;\n+import org.mozilla.jss.asn1.OCTET_STRING;\n+import org.mozilla.jss.asn1.SEQUENCE;\n+import org.mozilla.jss.asn1.Tag;\n+\n+public class RSAPSSAlgorithmParameters extends AlgorithmParametersSpi {\n+\n+    public final static AlgorithmId defaultHashAlg = new AlgorithmId(AlgorithmId.SHA_oid);\n+    public final static AlgorithmId defaultMaskGenFunc  = new AlgorithmId(AlgorithmId.MGF1_oid);\n+    public final static BigInt          defaultSaltLen = new BigInt(20);\n+    public final static BigInt          defaultTrailerField = new BigInt(1);\n+\n+    private PSSParameterSpec spec = PSSParameterSpec.DEFAULT;\n+    private AlgorithmId hashAlg = defaultHashAlg;\n+    private AlgorithmId maskGenFunc = defaultMaskGenFunc;\n+    private BigInt saltLen = defaultSaltLen;\n+    private BigInt trailerField = defaultTrailerField;\n+\n+    public RSAPSSAlgorithmParameters() {\n+    }\n+\n+    @Override\n+    protected void engineInit(AlgorithmParameterSpec paramSpec)\n+            throws InvalidParameterSpecException {\n+        spec = (PSSParameterSpec) paramSpec;\n+        populateFromSpec();\n+    }\n+    \n+    @Override\n+    protected  AlgorithmParameterSpec engineGetParameterSpec(Class paramSpec) \n+            throws InvalidParameterSpecException  {\n+        if (paramSpec == PSSParameterSpec.class || paramSpec == AlgorithmParameterSpec.class) {\n+            return spec;\n+        }\n+\n+        throw new InvalidParameterSpecException(\"unknown parameter spec passed to PSS parameters object.\");\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params) throws IOException {\n+        decode(new DerInputStream(params), params);\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params, String format) throws IOException {\n+        //Assume Der for now.\n+        Assert.notReached(\"engineInit(byte[],String) not supported\");\n+        throw new IOException(\"engineInit(byte[],String) not supported\");\n+    }\n+ \n+    @Override\n+    protected byte[] engineGetEncoded() throws IOException {\n+        DerOutputStream out = new DerOutputStream();\n+        encode(out);\n+        return out.toByteArray();\n+\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded(String format) throws IOException {\n+        //Assume Der for now.\n+        Assert.notReached(\"engineGetEncoded(String format)) not supported\");\n+        throw new IOException(\"engineGetEncoded(String format)) not supported\");\n+    }\n+\n+    @Override\n+    protected String engineToString() {\n+        String str = new String(\"Mozilla-JSS PSSAlgorithmParameters \" +  getClass().getName() + \" HashAlg: \" + spec.getDigestAlgorithm() + \" MaskGenAlg: \" + spec.getMGFAlgorithm() );\n+        //System.out.println(\"engineToString: \" + str);\n+        return str;\n+    }\n+\n+    private void decode(DerInputStream in , byte[] encoded) throws IOException {\n+        if(in == null) {\n+           throw new IOException(\"Invalid input.\");\n+        }\n+\n+        //System.out.println(\"Entering decode \");\n+\n+        // Sequence has 3 members, trailer field ignored\n+        DerValue seq[] = in.getSequence(3);\n+\n+        if(seq.length != 3) {\n+            throw new IOException(\"Invalid data!\");\n+        }\n+        //System.out.println(\"seq[0] \" + seq[0].toString());\n+        //System.out.println(\"seq[1] \" + seq[1].toString());\n+        //System.out.println(\"seq[2] \" + seq[2].toString());\n+\n+        if(seq[0].isContextSpecific((byte)0)) {\n+             seq[0]  = seq[0].data.getDerValue();\n+        } else\n+             throw new IOException(\"Invalid encoded data.\");\n+\n+        AlgorithmId algid = AlgorithmId.parse(seq[0]);\n+        //System.out.println(\"AlgName: \" + algid.getName());\n+\n+        String specAlgName = getSpecAlgName(algid.getName());\n+\n+        String specMGF1Name = \"\";\n+        // Now the MFG1 parameter hash fun is the same as the main hash func.\n+        MGF1ParameterSpec specMFG1ParamSpec = new MGF1ParameterSpec(specAlgName);\n+\n+        if(seq[1].isContextSpecific((byte)1)) {\n+            seq[1]  = seq[1].data.getDerValue();\n+        } else\n+            throw new IOException(\"Invalid encoded data.\");\n+\n+        DerInputStream mgf1Str = new DerInputStream(seq[1].toByteArray());\n+        DerValue[] seqMgf1 = mgf1Str.getSequence(2);\n+\n+        //dumpBytes(seqMgf1[0].toByteArray());\n+        //dumpBytes(seqMgf1[1].toByteArray());\n+\n+        ObjectIdentifier mgf1OID = seqMgf1[0].getOID();\n+\n+        //System.out.println(\"mfg1OID: \" + mgf1OID.toString());\n+\n+        if(!mgf1OID.equals(AlgorithmId.MGF1_oid)) \n+           throw new IOException(\"Invalid encoded data.\");\n+        else\n+           specMGF1Name = \"MGF1\";\n+               \n+        //dumpBytes(seq[1].toByteArray());\n+\n+        if(seq[2].isContextSpecific((byte)2))\n+            seq[2]  = seq[2].data.getDerValue();\n+        else\n+            throw new IOException(\"Invalid encoded data.\");\n+\n+        //dumpBytes(seq[2].toByteArray()); \n+\n+        BigInt sLength = seq[2].getInteger();\n+\n+        //System.out.println(\"saltLen: \" + sLength.toString());\n+        this.spec = new PSSParameterSpec(specAlgName, specMGF1Name, specMFG1ParamSpec, sLength.toInt(), 1 /*always defaut trailer */);\n+              \n+        populateFromSpec(); \n+    }\n+ \n+    private void encode(DerOutputStream out) throws IOException {\n+\n+        try(  \n+            DerOutputStream tmp = new DerOutputStream();\n+            DerOutputStream mgf = new DerOutputStream();\n+            DerOutputStream seq1 = new DerOutputStream();\n+            DerOutputStream intStream = new DerOutputStream();\n+        ) {\n+            // Hash algorithm\n+\n+            //System.out.println(\"Entering encode \");\n+            hashAlg.derEncodeWithContext(tmp,0);\n+\n+            // Mask Gen Function Sequence\n+            mgf.putOID(maskGenFunc.getOID());\n+\n+            // MGF hash alg is the same as the hash Alg at this point.\n+\n+            hashAlg.encode(mgf);\n+            seq1.write(DerValue.tag_Sequence,mgf);\n+            tmp.write(DerValue.createTag(DerValue.TAG_CONTEXT,\n+                                             true, (byte) 1), seq1);\n+\n+            // Salt Length\n+            intStream.putInteger(saltLen);\n+\n+            tmp.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte) 2),\n+                    intStream);\n+\n+            //Ignore trailer field, it never changes\n+\n+            // over all sequence tag\n+            out.write(DerValue.tag_Sequence, tmp);\n+\n+            byte[] data = out.toByteArray();\n+            //dumpBytes(data);\n+        }\n+    }\n+\n+    private void populateFromSpec() {\n+        if(spec == null || hashAlg == null) {\n+            return;\n+        }\n+\n+        String hashAlgName = spec.getDigestAlgorithm();\n+        String maskGenName = spec.getMGFAlgorithm();\n+\n+        int saltLen = spec.getSaltLength();\n+        this.saltLen = new BigInt(saltLen);\n+        int trailer = spec.getTrailerField();\n+\n+        // Create the hash alg and mask gen func objects\n+\n+        if(hashAlgName.equals(\"SHA-256\")) {\n+           hashAlg =  new AlgorithmId(AlgorithmId.SHA256_oid);\n+        }  else if(hashAlgName.equals(\"SHA-512\")) {\n+           hashAlg =  new AlgorithmId(AlgorithmId.SHA512_oid);\n+        }  else if(hashAlgName.equals(\"SHA-224\")) {\n+           hashAlg =  new AlgorithmId(AlgorithmId.SHA224_oid);\n+        }  else if(hashAlgName.equals(\"SHA-384\")) {\n+           hashAlg =  new AlgorithmId(AlgorithmId.SHA384_oid);\n+        } else {\n+           hashAlg =  new AlgorithmId(AlgorithmId.SHA_oid);\n+        }\n+    }\n+\n+    private String getSpecAlgName(String algName) {\n+    \n+        if(\"SHA256\".equals(algName)) \n+            return \"SHA-256\"; \n+        else if(\"SHA384\".equals(algName))\n+            return \"SHA-384\";\n+        else if(\"SHA512\".equals(algName))\n+            return \"SHA-512\";\n+        else //default\n+            return \"SHA-1\";\n+\n+    }\n+    private static void dumpBytes(byte[] data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzE0OA==", "bodyText": "Done.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583148", "createdAt": "2020-03-27T23:34:47Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/provider/java/security/RSAPSSAlgorithmParameters.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\n+/*  RSASSA-PSS-params ::= SEQUENCE {\n+   hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,\n+   maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,\n+   saltLength         [2] INTEGER  DEFAULT 20,\n+   trailerField       [3] INTEGER  DEFAULT 1\n+ }\n+\n+where\n+\n+ OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+   { OID id-sha1 PARAMETERS NULL   }|\n+   { OID id-sha224 PARAMETERS NULL   }|\n+   { OID id-sha256 PARAMETERS NULL }|\n+   { OID id-sha384 PARAMETERS NULL }|\n+   { OID id-sha512 PARAMETERS NULL },\n+   ...  -- Allows for future expansion --\n+ }\n+\n+ PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+   { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },\n+   ...  -- Allows for future expansion --\n+ }\n+*/\n+\n+package org.mozilla.jss.provider.java.security;\n+\n+import java.security.*;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.security.spec.PSSParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.io.IOException;\n+import org.mozilla.jss.util.Assert;\n+import org.mozilla.jss.netscape.security.util.BigInt;\n+import org.mozilla.jss.netscape.security.x509.AlgorithmId;\n+import org.mozilla.jss.netscape.security.util.DerOutputStream;\n+import org.mozilla.jss.netscape.security.util.DerInputStream;\n+import org.mozilla.jss.netscape.security.util.DerValue;\n+import org.mozilla.jss.netscape.security.util.ObjectIdentifier;\n+import org.mozilla.jss.asn1.ASN1Template;\n+import org.mozilla.jss.asn1.ASN1Value;\n+import org.mozilla.jss.asn1.INTEGER;\n+import org.mozilla.jss.asn1.InvalidBERException;\n+import org.mozilla.jss.asn1.OBJECT_IDENTIFIER;\n+import org.mozilla.jss.asn1.OCTET_STRING;\n+import org.mozilla.jss.asn1.SEQUENCE;\n+import org.mozilla.jss.asn1.Tag;\n+\n+public class RSAPSSAlgorithmParameters extends AlgorithmParametersSpi {\n+\n+    public final static AlgorithmId defaultHashAlg = new AlgorithmId(AlgorithmId.SHA_oid);\n+    public final static AlgorithmId defaultMaskGenFunc  = new AlgorithmId(AlgorithmId.MGF1_oid);\n+    public final static BigInt          defaultSaltLen = new BigInt(20);\n+    public final static BigInt          defaultTrailerField = new BigInt(1);\n+\n+    private PSSParameterSpec spec = PSSParameterSpec.DEFAULT;\n+    private AlgorithmId hashAlg = defaultHashAlg;\n+    private AlgorithmId maskGenFunc = defaultMaskGenFunc;\n+    private BigInt saltLen = defaultSaltLen;\n+    private BigInt trailerField = defaultTrailerField;\n+\n+    public RSAPSSAlgorithmParameters() {\n+    }\n+\n+    @Override\n+    protected void engineInit(AlgorithmParameterSpec paramSpec)\n+            throws InvalidParameterSpecException {\n+        spec = (PSSParameterSpec) paramSpec;\n+        populateFromSpec();\n+    }\n+    \n+    @Override\n+    protected  AlgorithmParameterSpec engineGetParameterSpec(Class paramSpec) \n+            throws InvalidParameterSpecException  {\n+        if (paramSpec == PSSParameterSpec.class || paramSpec == AlgorithmParameterSpec.class) {\n+            return spec;\n+        }\n+\n+        throw new InvalidParameterSpecException(\"unknown parameter spec passed to PSS parameters object.\");\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params) throws IOException {\n+        decode(new DerInputStream(params), params);\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params, String format) throws IOException {\n+        //Assume Der for now.\n+        Assert.notReached(\"engineInit(byte[],String) not supported\");\n+        throw new IOException(\"engineInit(byte[],String) not supported\");\n+    }\n+ \n+    @Override\n+    protected byte[] engineGetEncoded() throws IOException {\n+        DerOutputStream out = new DerOutputStream();\n+        encode(out);\n+        return out.toByteArray();\n+\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded(String format) throws IOException {\n+        //Assume Der for now.\n+        Assert.notReached(\"engineGetEncoded(String format)) not supported\");\n+        throw new IOException(\"engineGetEncoded(String format)) not supported\");\n+    }\n+\n+    @Override\n+    protected String engineToString() {\n+        String str = new String(\"Mozilla-JSS PSSAlgorithmParameters \" +  getClass().getName() + \" HashAlg: \" + spec.getDigestAlgorithm() + \" MaskGenAlg: \" + spec.getMGFAlgorithm() );\n+        //System.out.println(\"engineToString: \" + str);\n+        return str;\n+    }\n+\n+    private void decode(DerInputStream in , byte[] encoded) throws IOException {\n+        if(in == null) {\n+           throw new IOException(\"Invalid input.\");\n+        }\n+\n+        //System.out.println(\"Entering decode \");\n+\n+        // Sequence has 3 members, trailer field ignored\n+        DerValue seq[] = in.getSequence(3);\n+\n+        if(seq.length != 3) {\n+            throw new IOException(\"Invalid data!\");\n+        }\n+        //System.out.println(\"seq[0] \" + seq[0].toString());\n+        //System.out.println(\"seq[1] \" + seq[1].toString());\n+        //System.out.println(\"seq[2] \" + seq[2].toString());\n+\n+        if(seq[0].isContextSpecific((byte)0)) {\n+             seq[0]  = seq[0].data.getDerValue();\n+        } else\n+             throw new IOException(\"Invalid encoded data.\");\n+\n+        AlgorithmId algid = AlgorithmId.parse(seq[0]);\n+        //System.out.println(\"AlgName: \" + algid.getName());\n+\n+        String specAlgName = getSpecAlgName(algid.getName());\n+\n+        String specMGF1Name = \"\";\n+        // Now the MFG1 parameter hash fun is the same as the main hash func.\n+        MGF1ParameterSpec specMFG1ParamSpec = new MGF1ParameterSpec(specAlgName);\n+\n+        if(seq[1].isContextSpecific((byte)1)) {\n+            seq[1]  = seq[1].data.getDerValue();\n+        } else\n+            throw new IOException(\"Invalid encoded data.\");\n+\n+        DerInputStream mgf1Str = new DerInputStream(seq[1].toByteArray());\n+        DerValue[] seqMgf1 = mgf1Str.getSequence(2);\n+\n+        //dumpBytes(seqMgf1[0].toByteArray());\n+        //dumpBytes(seqMgf1[1].toByteArray());\n+\n+        ObjectIdentifier mgf1OID = seqMgf1[0].getOID();\n+\n+        //System.out.println(\"mfg1OID: \" + mgf1OID.toString());\n+\n+        if(!mgf1OID.equals(AlgorithmId.MGF1_oid)) \n+           throw new IOException(\"Invalid encoded data.\");\n+        else\n+           specMGF1Name = \"MGF1\";\n+               \n+        //dumpBytes(seq[1].toByteArray());\n+\n+        if(seq[2].isContextSpecific((byte)2))\n+            seq[2]  = seq[2].data.getDerValue();\n+        else\n+            throw new IOException(\"Invalid encoded data.\");\n+\n+        //dumpBytes(seq[2].toByteArray()); \n+\n+        BigInt sLength = seq[2].getInteger();\n+\n+        //System.out.println(\"saltLen: \" + sLength.toString());\n+        this.spec = new PSSParameterSpec(specAlgName, specMGF1Name, specMFG1ParamSpec, sLength.toInt(), 1 /*always defaut trailer */);\n+              \n+        populateFromSpec(); \n+    }\n+ \n+    private void encode(DerOutputStream out) throws IOException {\n+\n+        try(  \n+            DerOutputStream tmp = new DerOutputStream();\n+            DerOutputStream mgf = new DerOutputStream();\n+            DerOutputStream seq1 = new DerOutputStream();\n+            DerOutputStream intStream = new DerOutputStream();\n+        ) {\n+            // Hash algorithm\n+\n+            //System.out.println(\"Entering encode \");\n+            hashAlg.derEncodeWithContext(tmp,0);\n+\n+            // Mask Gen Function Sequence\n+            mgf.putOID(maskGenFunc.getOID());\n+\n+            // MGF hash alg is the same as the hash Alg at this point.\n+\n+            hashAlg.encode(mgf);\n+            seq1.write(DerValue.tag_Sequence,mgf);\n+            tmp.write(DerValue.createTag(DerValue.TAG_CONTEXT,\n+                                             true, (byte) 1), seq1);\n+\n+            // Salt Length\n+            intStream.putInteger(saltLen);\n+\n+            tmp.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte) 2),\n+                    intStream);\n+\n+            //Ignore trailer field, it never changes\n+\n+            // over all sequence tag\n+            out.write(DerValue.tag_Sequence, tmp);\n+\n+            byte[] data = out.toByteArray();\n+            //dumpBytes(data);\n+        }\n+    }\n+\n+    private void populateFromSpec() {\n+        if(spec == null || hashAlg == null) {\n+            return;\n+        }\n+\n+        String hashAlgName = spec.getDigestAlgorithm();\n+        String maskGenName = spec.getMGFAlgorithm();\n+\n+        int saltLen = spec.getSaltLength();\n+        this.saltLen = new BigInt(saltLen);\n+        int trailer = spec.getTrailerField();\n+\n+        // Create the hash alg and mask gen func objects\n+\n+        if(hashAlgName.equals(\"SHA-256\")) {\n+           hashAlg =  new AlgorithmId(AlgorithmId.SHA256_oid);\n+        }  else if(hashAlgName.equals(\"SHA-512\")) {\n+           hashAlg =  new AlgorithmId(AlgorithmId.SHA512_oid);\n+        }  else if(hashAlgName.equals(\"SHA-224\")) {\n+           hashAlg =  new AlgorithmId(AlgorithmId.SHA224_oid);\n+        }  else if(hashAlgName.equals(\"SHA-384\")) {\n+           hashAlg =  new AlgorithmId(AlgorithmId.SHA384_oid);\n+        } else {\n+           hashAlg =  new AlgorithmId(AlgorithmId.SHA_oid);\n+        }\n+    }\n+\n+    private String getSpecAlgName(String algName) {\n+    \n+        if(\"SHA256\".equals(algName)) \n+            return \"SHA-256\"; \n+        else if(\"SHA384\".equals(algName))\n+            return \"SHA-384\";\n+        else if(\"SHA512\".equals(algName))\n+            return \"SHA-512\";\n+        else //default\n+            return \"SHA-1\";\n+\n+    }\n+    private static void dumpBytes(byte[] data) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2MDc1MA=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 266}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjY4Nzk1OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTowOTo1OFrOF8-kIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozNDo1NlrOF9EnzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4MzkzOQ==", "bodyText": "I think if you remove the space here, it'll make javadocs happy.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399483939", "createdAt": "2020-03-27T19:09:58Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -177,12 +189,88 @@ public static AlgorithmId parse(byte[] val)\n     }\n \n     /**\n-     * Constructs a parameterless algorithm ID.\n+     * Constructs an algorithm ID with a fully encoded params object\n+     *\n+     * @ param oid the identifier for the algorithm", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzE4MQ==", "bodyText": "Done.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583181", "createdAt": "2020-03-27T23:34:56Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -177,12 +189,88 @@ public static AlgorithmId parse(byte[] val)\n     }\n \n     /**\n-     * Constructs a parameterless algorithm ID.\n+     * Constructs an algorithm ID with a fully encoded params object\n+     *\n+     * @ param oid the identifier for the algorithm", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4MzkzOQ=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjcwMjcwOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToxNDozNVrOF8-tcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozNTowNFrOF9En5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NjMyMA==", "bodyText": "Remove space above, and should this also throw NSAE?", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399486320", "createdAt": "2020-03-27T19:14:35Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -177,12 +189,88 @@ public static AlgorithmId parse(byte[] val)\n     }\n \n     /**\n-     * Constructs a parameterless algorithm ID.\n+     * Constructs an algorithm ID with a fully encoded params object\n+     *\n+     * @ param oid the identifier for the algorithm\n+     * @ param params the fully encoded AlgorithmIdentifier Object\n+     */\n+\n+    public AlgorithmId(ObjectIdentifier oid, AlgorithmParameters params)\n+        throws IOException {\n+       algid = oid;\n+       algParams = params;\n+\n+       if(algParams != null ) {\n+           this.params = new DerValue(algParams.getEncoded());\n+       }\n+    }\n+\n+    /**\n+     * Constructor that takes the oid and name, so the name can be cachedf or laster use.\n+     * @throws NoSuchAlgorithmException\n+     * @throws IOException\n+     *\n+     */\n+\n+    public AlgorithmId(ObjectIdentifier oid, String algName) throws  IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzIwNw==", "bodyText": "Done.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583207", "createdAt": "2020-03-27T23:35:04Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -177,12 +189,88 @@ public static AlgorithmId parse(byte[] val)\n     }\n \n     /**\n-     * Constructs a parameterless algorithm ID.\n+     * Constructs an algorithm ID with a fully encoded params object\n+     *\n+     * @ param oid the identifier for the algorithm\n+     * @ param params the fully encoded AlgorithmIdentifier Object\n+     */\n+\n+    public AlgorithmId(ObjectIdentifier oid, AlgorithmParameters params)\n+        throws IOException {\n+       algid = oid;\n+       algParams = params;\n+\n+       if(algParams != null ) {\n+           this.params = new DerValue(algParams.getEncoded());\n+       }\n+    }\n+\n+    /**\n+     * Constructor that takes the oid and name, so the name can be cachedf or laster use.\n+     * @throws NoSuchAlgorithmException\n+     * @throws IOException\n+     *\n+     */\n+\n+    public AlgorithmId(ObjectIdentifier oid, String algName) throws  IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NjMyMA=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjcwMzc1OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToxNDo1M1rOF8-uEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozODowOFrOF9EqQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NjQ4Mg==", "bodyText": "Same as above, seems like this should throw the new exceptions if at all possible.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399486482", "createdAt": "2020-03-27T19:14:53Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -177,12 +189,88 @@ public static AlgorithmId parse(byte[] val)\n     }\n \n     /**\n-     * Constructs a parameterless algorithm ID.\n+     * Constructs an algorithm ID with a fully encoded params object\n+     *\n+     * @ param oid the identifier for the algorithm\n+     * @ param params the fully encoded AlgorithmIdentifier Object\n+     */\n+\n+    public AlgorithmId(ObjectIdentifier oid, AlgorithmParameters params)\n+        throws IOException {\n+       algid = oid;\n+       algParams = params;\n+\n+       if(algParams != null ) {\n+           this.params = new DerValue(algParams.getEncoded());\n+       }\n+    }\n+\n+    /**\n+     * Constructor that takes the oid and name, so the name can be cachedf or laster use.\n+     * @throws NoSuchAlgorithmException\n+     * @throws IOException\n+     *\n+     */\n+\n+    public AlgorithmId(ObjectIdentifier oid, String algName) throws  IOException {\n+        algid = oid;\n+        cachedAlgName = algName;\n+        /* Create the params if our algorithm is RSA PSS related */\n+        if (algName != null && algName.contains(\"PSS\")) {\n+            try {\n+                this.algParams = getPSSParams(algName);\n+                this.params = new DerValue(this.algParams.getEncoded());\n+            } catch (Exception e) {\n+                throw new IOException(e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Constructs an  algorithm ID with possible RSAPSS params.\n      *\n      * @param oid the identifier for the algorithm\n+     * @throws NoSuchAlgorithmException\n+     * @throws IOException\n      */\n     public AlgorithmId(ObjectIdentifier oid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzI0NQ==", "bodyText": "Done, I think :)", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583245", "createdAt": "2020-03-27T23:35:18Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -177,12 +189,88 @@ public static AlgorithmId parse(byte[] val)\n     }\n \n     /**\n-     * Constructs a parameterless algorithm ID.\n+     * Constructs an algorithm ID with a fully encoded params object\n+     *\n+     * @ param oid the identifier for the algorithm\n+     * @ param params the fully encoded AlgorithmIdentifier Object\n+     */\n+\n+    public AlgorithmId(ObjectIdentifier oid, AlgorithmParameters params)\n+        throws IOException {\n+       algid = oid;\n+       algParams = params;\n+\n+       if(algParams != null ) {\n+           this.params = new DerValue(algParams.getEncoded());\n+       }\n+    }\n+\n+    /**\n+     * Constructor that takes the oid and name, so the name can be cachedf or laster use.\n+     * @throws NoSuchAlgorithmException\n+     * @throws IOException\n+     *\n+     */\n+\n+    public AlgorithmId(ObjectIdentifier oid, String algName) throws  IOException {\n+        algid = oid;\n+        cachedAlgName = algName;\n+        /* Create the params if our algorithm is RSA PSS related */\n+        if (algName != null && algName.contains(\"PSS\")) {\n+            try {\n+                this.algParams = getPSSParams(algName);\n+                this.params = new DerValue(this.algParams.getEncoded());\n+            } catch (Exception e) {\n+                throw new IOException(e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Constructs an  algorithm ID with possible RSAPSS params.\n      *\n      * @param oid the identifier for the algorithm\n+     * @throws NoSuchAlgorithmException\n+     * @throws IOException\n      */\n     public AlgorithmId(ObjectIdentifier oid) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NjQ4Mg=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzgwOQ==", "bodyText": "OH , now I remember, I wanted to keep this the same signature, since it is heavily used, could be breaking code all over the place.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583809", "createdAt": "2020-03-27T23:38:08Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -177,12 +189,88 @@ public static AlgorithmId parse(byte[] val)\n     }\n \n     /**\n-     * Constructs a parameterless algorithm ID.\n+     * Constructs an algorithm ID with a fully encoded params object\n+     *\n+     * @ param oid the identifier for the algorithm\n+     * @ param params the fully encoded AlgorithmIdentifier Object\n+     */\n+\n+    public AlgorithmId(ObjectIdentifier oid, AlgorithmParameters params)\n+        throws IOException {\n+       algid = oid;\n+       algParams = params;\n+\n+       if(algParams != null ) {\n+           this.params = new DerValue(algParams.getEncoded());\n+       }\n+    }\n+\n+    /**\n+     * Constructor that takes the oid and name, so the name can be cachedf or laster use.\n+     * @throws NoSuchAlgorithmException\n+     * @throws IOException\n+     *\n+     */\n+\n+    public AlgorithmId(ObjectIdentifier oid, String algName) throws  IOException {\n+        algid = oid;\n+        cachedAlgName = algName;\n+        /* Create the params if our algorithm is RSA PSS related */\n+        if (algName != null && algName.contains(\"PSS\")) {\n+            try {\n+                this.algParams = getPSSParams(algName);\n+                this.params = new DerValue(this.algParams.getEncoded());\n+            } catch (Exception e) {\n+                throw new IOException(e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Constructs an  algorithm ID with possible RSAPSS params.\n      *\n      * @param oid the identifier for the algorithm\n+     * @throws NoSuchAlgorithmException\n+     * @throws IOException\n      */\n     public AlgorithmId(ObjectIdentifier oid) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NjQ4Mg=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjcwOTE4OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToxNjozMFrOF8-xcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToxNjozMFrOF8-xcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NzM0NA==", "bodyText": "Same as below; NSAE and IO Exception should be in the constructor and remove space.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399487344", "createdAt": "2020-03-27T19:16:30Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -177,12 +189,88 @@ public static AlgorithmId parse(byte[] val)\n     }\n \n     /**\n-     * Constructs a parameterless algorithm ID.\n+     * Constructs an algorithm ID with a fully encoded params object\n+     *\n+     * @ param oid the identifier for the algorithm\n+     * @ param params the fully encoded AlgorithmIdentifier Object\n+     */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjcxMDQ5OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToxNjo1N1rOF8-yPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozNTozNVrOF9EoSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NzU1MA==", "bodyText": "Spare newline. :-)", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399487550", "createdAt": "2020-03-27T19:16:57Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -256,6 +353,47 @@ public void derEncode(OutputStream out) throws IOException {\n         }\n     }\n \n+    /**\n+     * DER encode this object onto an output stream.\n+     * Implements the <code>DerEncoder</code> interface.\n+     *\n+     * @param out", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzMwNw==", "bodyText": "Done.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583307", "createdAt": "2020-03-27T23:35:35Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -256,6 +353,47 @@ public void derEncode(OutputStream out) throws IOException {\n         }\n     }\n \n+    /**\n+     * DER encode this object onto an output stream.\n+     * Implements the <code>DerEncoder</code> interface.\n+     *\n+     * @param out", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NzU1MA=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjcyMTI4OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToxOTo1MlrOF8-4lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzozNTo0NVrOF9EoZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4OTE3Mw==", "bodyText": "Just askin', but why was SHA224 added here? We don't really support SHA224 anywhere else in JSS.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399489173", "createdAt": "2020-03-27T19:19:52Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -566,7 +784,8 @@ public final boolean equals(ObjectIdentifier id) {\n     private static final int SHA256_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 1 };\n     private static final int SHA384_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 2 };\n     private static final int SHA512_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 3 };\n-\n+    private static final int SHA224_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 4 };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NTMxMw==", "bodyText": "I was doing this way back when for completeness. I think I will just get rid of it.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399565313", "createdAt": "2020-03-27T22:24:46Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -566,7 +784,8 @@ public final boolean equals(ObjectIdentifier id) {\n     private static final int SHA256_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 1 };\n     private static final int SHA384_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 2 };\n     private static final int SHA512_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 3 };\n-\n+    private static final int SHA224_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 4 };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4OTE3Mw=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzMzNQ==", "bodyText": "Got rid of it.", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583335", "createdAt": "2020-03-27T23:35:45Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -566,7 +784,8 @@ public final boolean equals(ObjectIdentifier id) {\n     private static final int SHA256_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 1 };\n     private static final int SHA384_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 2 };\n     private static final int SHA512_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 3 };\n-\n+    private static final int SHA224_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 4 };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4OTE3Mw=="}, "originalCommit": {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35"}, "originalPosition": 335}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2688, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}