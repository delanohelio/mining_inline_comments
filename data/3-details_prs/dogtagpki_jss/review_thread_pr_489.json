{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMjU2MDM1", "number": 489, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozNjoyNFrODxwGKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMToxNToxOFrOD2-DDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk0ODI3OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/ssl/javax/JSSEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozNjoyNFrOGFZnIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozNjoyNFrOGFZnIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNTY4MA==", "bodyText": "Need to add the SSL option here.", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r408315680", "createdAt": "2020-04-14T17:36:24Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/ssl/javax/JSSEngine.java", "diffHunk": "@@ -804,6 +825,31 @@ public boolean isOutboundDone() {\n      */\n     public abstract SecurityStatusResult getStatus();\n \n+    /**\n+     * Gets the default configuration.\n+     */\n+    public HashMap<Integer, Integer> getDefaultConfiguration() {\n+        HashMap<Integer, Integer> result = new HashMap<Integer, Integer>();\n+        result.put(SSL.ENABLE_RENEGOTIATION, SSL.RENEGOTIATE_REQUIRES_XTN);\n+        result.put(SSL.REQUIRE_SAFE_NEGOTIATION, 1);\n+        result.put(28, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9330d153aace36f808d08b6a67bbe5b696efded9"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk1MjA2OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/ssl/javax/JSSEngineReferenceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozNzozMVrOGFZplw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozNzozMVrOGFZplw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNjMxMQ==", "bodyText": "Need to include these values as well in nss.SSL.", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r408316311", "createdAt": "2020-04-14T17:37:31Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/ssl/javax/JSSEngineReferenceImpl.java", "diffHunk": "@@ -267,11 +276,17 @@ private void initServer() {\n             throw new RuntimeException(\"Unable to configure SSL_REQUEST_CERTIFICATE option: \" + errorText(PR.GetError()));\n         }\n \n-        if (SSL.OptionSet(ssl_fd, SSL.REQUIRE_CERTIFICATE, need_client_auth ? 1 : 0) == SSL.SECFailure) {\n+        if (SSL.OptionSet(ssl_fd, SSL.REQUIRE_CERTIFICATE, need_client_auth ? 3 : 0) == SSL.SECFailure) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9330d153aace36f808d08b6a67bbe5b696efded9"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk1OTQxOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/ssl/javax/JSSEngineReferenceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozOToyMFrOGFZuEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozOToyMFrOGFZuEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNzQ1OQ==", "bodyText": "Needs a comment about what we're doing here.", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r408317459", "createdAt": "2020-04-14T17:39:20Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/ssl/javax/JSSEngineReferenceImpl.java", "diffHunk": "@@ -395,15 +422,48 @@ public void beginHandshake() {\n         // beginHandshake(...) if ssl_fd == null.\n \n         // ssl_fd == null <-> we've not initialized anything yet.\n+\n+        boolean unwrap = as_server;\n         if (ssl_fd == null) {\n             init();\n+\n+            // Reset the handshake status, using the new socket and\n+            // configuration which was just created.\n+            if (SSL.ResetHandshake(ssl_fd, as_server) == SSL.SECFailure) {\n+                throw new RuntimeException(\"Unable to begin handshake: \" + errorText(PR.GetError()));\n+            }\n+        } else {\n+            unwrap = !unwrap;\n+\n+            if (session.getSSLVersion() == SSLVersion.TLS_1_3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9330d153aace36f808d08b6a67bbe5b696efded9"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk2MDM0OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/ssl/javax/JSSEngineReferenceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozOTozMlrOGFZulw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozOTozMlrOGFZulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNzU5MQ==", "bodyText": "These comments need to be updated.", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r408317591", "createdAt": "2020-04-14T17:39:32Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/ssl/javax/JSSEngineReferenceImpl.java", "diffHunk": "@@ -395,15 +422,48 @@ public void beginHandshake() {\n         // beginHandshake(...) if ssl_fd == null.\n \n         // ssl_fd == null <-> we've not initialized anything yet.\n+\n+        boolean unwrap = as_server;\n         if (ssl_fd == null) {\n             init();\n+\n+            // Reset the handshake status, using the new socket and\n+            // configuration which was just created.\n+            if (SSL.ResetHandshake(ssl_fd, as_server) == SSL.SECFailure) {\n+                throw new RuntimeException(\"Unable to begin handshake: \" + errorText(PR.GetError()));\n+            }\n+        } else {\n+            unwrap = !unwrap;\n+\n+            if (session.getSSLVersion() == SSLVersion.TLS_1_3) {\n+                if (as_server) {\n+                    if (SSL.SendCertificateRequest(ssl_fd) == SSL.SECFailure) {\n+                        throw new RuntimeException(\"Unable to rehandshake on TLSv1.3: \" + errorText(PR.GetError()));\n+                    }\n+                }\n+            } else {\n+                if (SSL.ReHandshake(ssl_fd, true) == SSL.SECFailure) {\n+                    throw new RuntimeException(\"Unable to rehandshake: \" + errorText(PR.GetError()));\n+                }\n+            }\n+\n+            SSL.ForceHandshake(ssl_fd);\n         }\n \n-        // Always, reset the handshake status, using the existing\n-        // socket and configuration (which might've been just created).\n-        if (SSL.ResetHandshake(ssl_fd, as_server) == SSL.SECFailure) {\n-            throw new RuntimeException(\"Unable to begin handshake: \" + errorText(PR.GetError()));\n+        if (unwrap) {\n+            // Update handshake status; client initiates connection, so wait", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9330d153aace36f808d08b6a67bbe5b696efded9"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk2MzM3OnYy", "diffSide": "LEFT", "path": "org/mozilla/jss/ssl/javax/JSSEngineReferenceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MDoxOFrOGFZwXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MDoxOFrOGFZwXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxODA0NA==", "bodyText": "Could probably drop these calls.", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r408318044", "createdAt": "2020-04-14T17:40:18Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/ssl/javax/JSSEngineReferenceImpl.java", "diffHunk": "@@ -619,8 +679,7 @@ private void updateHandshakeState() {\n         // currently on, update our handshake status. This happens even if\n         // we later exit before calling SSL.ForceHandshake() so that we can\n         // see what the session data contains.\n-        SecurityStatusResult preHandshakeStatus = getStatus();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9330d153aace36f808d08b6a67bbe5b696efded9"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk2NDU1OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/ssl/javax/JSSSession.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MDozN1rOGFZxGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MDozN1rOGFZxGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxODIzMw==", "bodyText": "Needs null check as well.", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r408318233", "createdAt": "2020-04-14T17:40:37Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/ssl/javax/JSSSession.java", "diffHunk": "@@ -50,8 +51,9 @@ public JSSEngine getEngine() {\n     }\n \n     public SSLChannelInfo getChannelInfo() {\n-        if (parent.getSSLFDProxy() != null) {\n-            return SSL.GetChannelInfo(parent.getSSLFDProxy());\n+        SSLFDProxy ssl_fd = parent.getSSLFDProxy();\n+        if (ssl_fd.handshakeComplete) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9330d153aace36f808d08b6a67bbe5b696efded9"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk2NjUxOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/ssl/javax/JSSSession.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MTowOVrOGFZyWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MTowOVrOGFZyWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxODU1Mg==", "bodyText": "Remove this since they're unused currently.", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r408318552", "createdAt": "2020-04-14T17:41:09Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/ssl/javax/JSSSession.java", "diffHunk": "@@ -184,6 +193,8 @@ protected void setPeerCertificates(Certificate[] new_certs) {\n     }\n \n     public X509Certificate[] getPeerCertificateChain() throws SSLPeerUnverifiedException {\n+        refreshData();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9330d153aace36f808d08b6a67bbe5b696efded9"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTM4NDg3OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/nss/SSL.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTozNTozN1rOGFd5jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTozNTozN1rOGFd5jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4NTkzNQ==", "bodyText": "Spare space.", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r408385935", "createdAt": "2020-04-14T19:35:37Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/nss/SSL.c", "diffHunk": "@@ -598,6 +599,23 @@ Java_org_mozilla_jss_nss_SSL_ResetHandshake(JNIEnv *env, jclass clazz,\n     return SSL_ResetHandshake(real_fd, asServer);\n }\n \n+JNIEXPORT int JNICALL\n+Java_org_mozilla_jss_nss_SSL_ReHandshake(JNIEnv *env, jclass clazz,\n+    jobject fd, jboolean flushCache)\n+{\n+    PRFileDesc *real_fd = NULL;\n+\n+    PR_ASSERT(env != NULL && fd != NULL);\n+    PR_SetError(0, 0);\n+\n+    if (JSS_PR_getPRFileDesc(env, fd, &real_fd) != PR_SUCCESS) {\n+        return SECFailure;\n+    }\n+\n+    return SSL_ReHandshake(real_fd, flushCache);\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222774254861785341b990ca4621df585000d70e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTM4Njg3OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/nss/SSL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTozNjoxNFrOGFd62A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTozNjoxNFrOGFd62A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4NjI2NA==", "bodyText": "getSSLRequireNoError()", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r408386264", "createdAt": "2020-04-14T19:36:14Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/nss/SSL.java", "diffHunk": "@@ -52,6 +52,107 @@\n      */\n     public static final int SECWouldBlock = getSSLSECWouldBlock();\n \n+    /**\n+     * Enable post-handshake authentication extension. Value for use with\n+     * OptionGet.\n+     *\n+     * See also: SSL_ENABLE_POST_HANDSHAKE_AUTH in /usr/include/nss3/ssl.h\n+     */\n+    public static final int ENABLE_POST_HANDSHAKE_AUTH = getSSLEnablePostHandshakeAuth();\n+\n+    /**\n+     * Option for configuring renegotiation after initial handshake. Value for\n+     * use with OptionGet and OptionSet.\n+     *\n+     * See also: SSL_ENABLE_RENEGOTIATION in /usr/include/nss3/ssl.h\n+     */\n+    public static final int ENABLE_RENEGOTIATION = getSSLEnableRenegotiation();\n+\n+    /**\n+     * Option for requiring safe negotiation. Value for use with OptionGet and\n+     * OptionSet.\n+     *\n+     * See also: SSL_REQUIRE_SAFE_NEGOTIATION in /usr/include/nss3/ssl.h\n+     */\n+    public static final int REQUIRE_SAFE_NEGOTIATION = getSSLRequireSafeNegotiation();\n+\n+    /**\n+     * Value for never allowing renegotiation after initial handshake. Value\n+     * for use with ENABLE_RENEGOTIATION with OptionGet and OptionSet.\n+     *\n+     * See also: SSL_RENEGOTIATE_NEVER in /usr/include/nss3/ssl.h\n+     */\n+    public static final int RENEGOTIATE_NEVER = getSSLRenegotiateNever();\n+\n+    /**\n+     * Value for always allowing renegotiation after initial handshake,\n+     * regardless of whether or not the peer's client hellow bears the\n+     * renegotiation info extension; unsafe. Value for use with\n+     * ENABLE_RENEGOTIATION with OptionGet and OptionSet.\n+     *\n+     * See also: SSL_RENEGOTIATE_UNRESTRICTED in /usr/include/nss3/ssl.h\n+     */\n+    public static final int RENEGOTIATE_UNRESTRICTED = getSSLRenegotiateUnrestricted();\n+\n+    /**\n+     * Value for allowing renegotiation after initial handshake with the TLS\n+     * renegotiation_info extension; safe. Value for use with\n+     * ENABLE_RENEGOTIATION with OptionGet and OptionSet.\n+     *\n+     * See also: SSL_RENEGOTIATE_REQUIRES_XTN in /usr/include/nss3/ssl.h\n+     */\n+    public static final int RENEGOTIATE_REQUIRES_XTN = getSSLRenegotiateRequiresXtn();\n+\n+    /**\n+     * Value for disallowing unsafe renegotiation in server sockets only, but\n+     * allows clients to continue to renegotiate with vulnerable servers.\n+     * Value for use with ENABLE_RENEGOTIATION with OptionGet and OptionSet.\n+     *\n+     * See also: SSL_RENEGOTIATE_TRANSITIONAL in /usr/include/nss3/ssl.h\n+     */\n+    public static final int RENEGOTIATE_TRANSITIONAL = getSSLRenegotiateTransitional();\n+\n+    /**\n+     * Option for sending SCSV in handshakes. Value for use with OptionGet and\n+     * OptionSet.\n+     *\n+     * See also: SSL_ENABLE_FALLBACK_SCSV in /usr/include/nss3/ssl.h\n+     */\n+    public static final int ENABLE_FALLBACK_SCSV = getSSLEnableFallbackSCSV();\n+\n+    /**\n+     * Value for never requiring a certificate. Value for use with\n+     * SSL_REQUIRE_CERTIFICATE with OptionGet and OptionSet.\n+     *\n+     * See also: SSL_REQUIRE_NEVER in /usr/include/nss3/ssl.h\n+     */\n+    public static final int REQUIRE_NEVER = getSSLRequireNever();\n+\n+    /**\n+     * Value for always requiring a certificate. Value for use with\n+     * SSL_REQUIRE_CERTIFICATE with OptionGet and OptionSet.\n+     *\n+     * See also: SSL_REQUIRE_ALWAYS in /usr/include/nss3/ssl.h\n+     */\n+    public static final int REQUIRE_ALWAYS = getSSLRequireAlways();\n+\n+    /**\n+     * Value for requiring a certificate only on the first handshake. Value\n+     * for use with SSL_REQUIRE_CERTIFICATE with OptionGet and OptionSet.\n+     *\n+     * See also: SSL_REQUIRE_FIRST_HANDSHAKE in /usr/include/nss3/ssl.h\n+     */\n+    public static final int REQUIRE_FIRST_HANDSHAKE = getSSLRequireFirstHandshake();\n+\n+    /**\n+     * Value for requiring a certificate but not erring if the peer doesn't\n+     * provide one. Value for use with SSL_REQUIRE_CERTIFICATE with OptionGet\n+     * and OptionSet.\n+     *\n+     * See also: SSL_REQUIRE_NO_ERROR in /usr/include/nss3/ssl.h\n+     */\n+    public static final int REQUIRE_NO_ERROR = getSSLRequireNever();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222774254861785341b990ca4621df585000d70e"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODAzODc5OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/ssl/javax/JSSEngine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjozODo0NVrOGIqiLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoxNjo0M1rOGIrfaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczODY2OA==", "bodyText": "Should we call it setConfiguration() instead?", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r411738668", "createdAt": "2020-04-20T22:38:45Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/ssl/javax/JSSEngine.java", "diffHunk": "@@ -804,6 +825,31 @@ public boolean isOutboundDone() {\n      */\n     public abstract SecurityStatusResult getStatus();\n \n+    /**\n+     * Gets the default configuration.\n+     */\n+    public HashMap<Integer, Integer> getDefaultConfiguration() {\n+        HashMap<Integer, Integer> result = new HashMap<Integer, Integer>();\n+        result.put(SSL.ENABLE_RENEGOTIATION, SSL.RENEGOTIATE_REQUIRES_XTN);\n+        result.put(SSL.REQUIRE_SAFE_NEGOTIATION, 1);\n+        result.put(SSL.ENABLE_FALLBACK_SCSV, 1);\n+        return result;\n+    }\n+\n+    /**\n+     * Updates the configuration with the given value.\n+     */\n+    public void addConfiguration(int key, int value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eda99b27a5d11e23adb16fa125fbfe0ed9d18502"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1NDM0Nw==", "bodyText": "Ah I was going to add a setConfiguration(HashMap<...> config) function, thanks!", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r411754347", "createdAt": "2020-04-20T23:16:43Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/ssl/javax/JSSEngine.java", "diffHunk": "@@ -804,6 +825,31 @@ public boolean isOutboundDone() {\n      */\n     public abstract SecurityStatusResult getStatus();\n \n+    /**\n+     * Gets the default configuration.\n+     */\n+    public HashMap<Integer, Integer> getDefaultConfiguration() {\n+        HashMap<Integer, Integer> result = new HashMap<Integer, Integer>();\n+        result.put(SSL.ENABLE_RENEGOTIATION, SSL.RENEGOTIATE_REQUIRES_XTN);\n+        result.put(SSL.REQUIRE_SAFE_NEGOTIATION, 1);\n+        result.put(SSL.ENABLE_FALLBACK_SCSV, 1);\n+        return result;\n+    }\n+\n+    /**\n+     * Updates the configuration with the given value.\n+     */\n+    public void addConfiguration(int key, int value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczODY2OA=="}, "originalCommit": {"oid": "eda99b27a5d11e23adb16fa125fbfe0ed9d18502"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTY0NjM4OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/nss/SSL.c", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMTowODowN1rOGM-Jaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDozNzowMFrOGNNvKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1NDMxNQ==", "bodyText": "Question, since this block of code seems to happen in a bunch of methods, would having a convenience method be of use?", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r416254315", "createdAt": "2020-04-28T01:08:07Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/nss/SSL.c", "diffHunk": "@@ -842,6 +891,27 @@ Java_org_mozilla_jss_nss_SSL_RemoveCallbacks(JNIEnv *env, jclass clazz,\n     SSL_AuthCertificateHook(real_fd, NULL, NULL);\n }\n \n+JNIEXPORT jint JNICALL\n+Java_org_mozilla_jss_nss_SSL_EnableHandshakeCallback(JNIEnv *env, jclass clazz,\n+    jobject fd)\n+{\n+    PRFileDesc *real_fd = NULL;\n+    jobject fd_ref = NULL;\n+\n+    PR_ASSERT(env != NULL && fd != NULL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e812ca1df8a95f70200dd51f1837642bcf0bdb74"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NTEyOQ==", "bodyText": "A lot of code uses this pattern. I don't think you can use a convenience method because in debug mode, it aborts. It'd be a candidate for a macro in the future (because we need to return from this method), but a lot of existing code also needs to be replaced. I think we need to replace it with a macro that checks these for NULL and returns NullPointerException.", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r416295129", "createdAt": "2020-04-28T03:14:23Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/nss/SSL.c", "diffHunk": "@@ -842,6 +891,27 @@ Java_org_mozilla_jss_nss_SSL_RemoveCallbacks(JNIEnv *env, jclass clazz,\n     SSL_AuthCertificateHook(real_fd, NULL, NULL);\n }\n \n+JNIEXPORT jint JNICALL\n+Java_org_mozilla_jss_nss_SSL_EnableHandshakeCallback(JNIEnv *env, jclass clazz,\n+    jobject fd)\n+{\n+    PRFileDesc *real_fd = NULL;\n+    jobject fd_ref = NULL;\n+\n+    PR_ASSERT(env != NULL && fd != NULL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1NDMxNQ=="}, "originalCommit": {"oid": "e812ca1df8a95f70200dd51f1837642bcf0bdb74"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUwOTczNw==", "bodyText": "They could also be removed, as the JNI contract should guarantee env should be non-NULL. If env is NULL, we have no safe way of handling it other than aborting. So env != NULL should probably be removed from all functions and we can accept the segfault that occurs in the unlikely scenario that env is ever NULL. We're essentially doing that now as PR_ASSERT only executes in debug mode.\nThat leaves fd != NULL. This (and a bunch of other cases where it is used) should be replaced by a macro that fails with NPE if/when this is NULL. It is up to the caller to ensure non-NULL of fd in this scenario.", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r416509737", "createdAt": "2020-04-28T10:37:00Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/nss/SSL.c", "diffHunk": "@@ -842,6 +891,27 @@ Java_org_mozilla_jss_nss_SSL_RemoveCallbacks(JNIEnv *env, jclass clazz,\n     SSL_AuthCertificateHook(real_fd, NULL, NULL);\n }\n \n+JNIEXPORT jint JNICALL\n+Java_org_mozilla_jss_nss_SSL_EnableHandshakeCallback(JNIEnv *env, jclass clazz,\n+    jobject fd)\n+{\n+    PRFileDesc *real_fd = NULL;\n+    jobject fd_ref = NULL;\n+\n+    PR_ASSERT(env != NULL && fd != NULL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1NDMxNQ=="}, "originalCommit": {"oid": "e812ca1df8a95f70200dd51f1837642bcf0bdb74"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTY2Mjg1OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/nss/SSLFDProxy.c", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMToxNToxOFrOGM-SVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTo1NDo0N1rOGNQVfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1NjU5Ng==", "bodyText": "Just a question here. I see this callback just sets some boolean when the handshake it complete. Would there be any case to have a java method receive this callback as well?", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r416256596", "createdAt": "2020-04-28T01:15:18Z", "author": {"login": "jmagne"}, "path": "org/mozilla/jss/nss/SSLFDProxy.c", "diffHunk": "@@ -240,3 +240,33 @@ JSSL_SSLFDCertSelectionCallback(void *arg,\n     *pRetKey = privkey;\n     return SECSuccess;\n }\n+\n+void\n+JSSL_SSLFDHandshakeComplete(PRFileDesc *fd, void *client_data)\n+{\n+    JNIEnv *env = NULL;\n+    jobject sslfd_proxy = (jobject)client_data;\n+    jclass sslfdProxyClass;\n+    jfieldID handshakeCompleteField;\n+\n+    if (fd == NULL || client_data == NULL || JSS_javaVM == NULL) {\n+        return;\n+    }\n+\n+    if ((*JSS_javaVM)->AttachCurrentThread(JSS_javaVM, (void**)&env, NULL) != JNI_OK || env == NULL) {\n+        return;\n+    }\n+\n+    sslfdProxyClass = (*env)->GetObjectClass(env, sslfd_proxy);\n+    if (sslfdProxyClass == NULL) {\n+        return;\n+    }\n+\n+    handshakeCompleteField = (*env)->GetFieldID(env, sslfdProxyClass,\n+                                                \"handshakeComplete\", \"Z\");\n+    if (handshakeCompleteField == NULL) {\n+        return;\n+    }\n+\n+    (*env)->SetBooleanField(env, sslfd_proxy, handshakeCompleteField, JNI_TRUE);\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e812ca1df8a95f70200dd51f1837642bcf0bdb74"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTU2NA==", "bodyText": "For one, there's no callback in the SSLEngine specification, so adding it would be surprising. I don't think there's value in adding it because...\nSSLEngine is non-blocking. At each step of the initial handshake, there's a handshake status. It flips back and forth between Wrap and Unwrap as necessary. When the handshake is finished (i.e., this callback fires), it returns Finished. After that, it returns Not Handshaking. So the caller who would be expecting a handshake complete callback execution could alternatively wait for Finished and execute it then. That's the beauty of non-blocking SSLEngine over a SSLengine: it needs fewer callbacks. :-)", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r416291564", "createdAt": "2020-04-28T03:03:24Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/nss/SSLFDProxy.c", "diffHunk": "@@ -240,3 +240,33 @@ JSSL_SSLFDCertSelectionCallback(void *arg,\n     *pRetKey = privkey;\n     return SECSuccess;\n }\n+\n+void\n+JSSL_SSLFDHandshakeComplete(PRFileDesc *fd, void *client_data)\n+{\n+    JNIEnv *env = NULL;\n+    jobject sslfd_proxy = (jobject)client_data;\n+    jclass sslfdProxyClass;\n+    jfieldID handshakeCompleteField;\n+\n+    if (fd == NULL || client_data == NULL || JSS_javaVM == NULL) {\n+        return;\n+    }\n+\n+    if ((*JSS_javaVM)->AttachCurrentThread(JSS_javaVM, (void**)&env, NULL) != JNI_OK || env == NULL) {\n+        return;\n+    }\n+\n+    sslfdProxyClass = (*env)->GetObjectClass(env, sslfd_proxy);\n+    if (sslfdProxyClass == NULL) {\n+        return;\n+    }\n+\n+    handshakeCompleteField = (*env)->GetFieldID(env, sslfdProxyClass,\n+                                                \"handshakeComplete\", \"Z\");\n+    if (handshakeCompleteField == NULL) {\n+        return;\n+    }\n+\n+    (*env)->SetBooleanField(env, sslfd_proxy, handshakeCompleteField, JNI_TRUE);\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1NjU5Ng=="}, "originalCommit": {"oid": "e812ca1df8a95f70200dd51f1837642bcf0bdb74"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU1MjMxNw==", "bodyText": "And, SSL_SecurityStatus() reports on > 0 even when the handshake itself hasn't completed. This is most commonly when the FINISHED message hasn't yet been sent but the server has approved a particular protocol version / cipher suite pair. I believe the HandshakeCallback delays firing until the FINISHED message is on the wire, making it better than SecurityStatus.on > 0 (which is what we've replaced in this PR) for our purposes of knowing when to report the handshake as FINISHED.\nSince our call graph looks like:\n\nSSLEngine.wrap or SSLEngine.unwrap\n\nJSSEngine.updateHandshakeState()\n\nSSL_ForceHandshake()\n\n... NSS stuff ...\n\nThis handshake complete handler\n\n\n\n\n\n\n\n\n\nWe'd prefer to set a boolean and unwind back to JSSEngine.UpdateHandshakeState rather than nesting further; the next thing we need to do is in UpdateHandshakeState once SSL_ForceHandshake returns.\n\nAnd, with a user-specified callback, it'd look like:\n\n... user code ...\n\nSSLEngine.wrap or SSLEngine.unwrap\n\nJSSEngine.updateHandshakeState()\n\nSSL_ForceHandshake()\n\n... NSS stuff ...\n\nThis handshake complete handler\n\n... user callback ...\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen we can let this operation finish and unwind back to user code and they can execute their callback directly.", "url": "https://github.com/dogtagpki/jss/pull/489#discussion_r416552317", "createdAt": "2020-04-28T11:54:47Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/nss/SSLFDProxy.c", "diffHunk": "@@ -240,3 +240,33 @@ JSSL_SSLFDCertSelectionCallback(void *arg,\n     *pRetKey = privkey;\n     return SECSuccess;\n }\n+\n+void\n+JSSL_SSLFDHandshakeComplete(PRFileDesc *fd, void *client_data)\n+{\n+    JNIEnv *env = NULL;\n+    jobject sslfd_proxy = (jobject)client_data;\n+    jclass sslfdProxyClass;\n+    jfieldID handshakeCompleteField;\n+\n+    if (fd == NULL || client_data == NULL || JSS_javaVM == NULL) {\n+        return;\n+    }\n+\n+    if ((*JSS_javaVM)->AttachCurrentThread(JSS_javaVM, (void**)&env, NULL) != JNI_OK || env == NULL) {\n+        return;\n+    }\n+\n+    sslfdProxyClass = (*env)->GetObjectClass(env, sslfd_proxy);\n+    if (sslfdProxyClass == NULL) {\n+        return;\n+    }\n+\n+    handshakeCompleteField = (*env)->GetFieldID(env, sslfdProxyClass,\n+                                                \"handshakeComplete\", \"Z\");\n+    if (handshakeCompleteField == NULL) {\n+        return;\n+    }\n+\n+    (*env)->SetBooleanField(env, sslfd_proxy, handshakeCompleteField, JNI_TRUE);\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1NjU5Ng=="}, "originalCommit": {"oid": "e812ca1df8a95f70200dd51f1837642bcf0bdb74"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2710, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}