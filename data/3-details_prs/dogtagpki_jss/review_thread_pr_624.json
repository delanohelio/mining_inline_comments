{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMDUxNjg4", "number": 624, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToxOToyNFrOE20HVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTo0NzoxOFrOE7NxxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTEyNDA3OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/pkcs11/PK11KeyWrapper.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToxOToyNFrOHvzrzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToxOToyNFrOHvzrzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg5MTkxOA==", "bodyText": "@jmagne -- sorry, I forgot one line, that's why it was failing. :-)\njssconfig.h defines HAVE_NSS_OAEP from the build system. Now it works again.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r519891918", "createdAt": "2020-11-09T15:19:24Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11KeyWrapper.c", "diffHunk": "@@ -17,6 +17,8 @@\n #include <jssutil.h>\n #include <pk11util.h>\n #include <Algorithm.h>\n+#include \"StaticVoidPointer.h\"\n+#include \"jssconfig.h\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13a22a1cdb3b8341c6a4feee5963e9cb657ad348"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTExMjM0OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowNjowNVrOH2tcCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowNjowNVrOH2tcCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEyOTYwOQ==", "bodyText": "I think we can return immediately here, but no big deal.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527129609", "createdAt": "2020-11-19T19:06:05Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.c", "diffHunk": "@@ -0,0 +1,151 @@\n+#include <nss.h>\n+#include <pk11pub.h>\n+#include <pkcs11n.h>\n+#include <pkcs11t.h>\n+#include <jni.h>\n+\n+#include \"_jni/org_mozilla_jss_crypto_JSSOAEPParameterSpec.h\"\n+\n+#include \"jssutil.h\"\n+#include \"java_ids.h\"\n+#include \"jss_exceptions.h\"\n+#include \"pk11util.h\"\n+\n+#include \"NativeEnclosure.h\"\n+#include \"StaticVoidPointer.h\"\n+\n+PRStatus\n+oaep_GetHashAlg(JNIEnv *env, jobject this, jclass this_class, CK_MECHANISM_TYPE *ret)\n+{\n+    jfieldID field_id = NULL;\n+\n+    field_id = (*env)->GetFieldID(env, this_class, \"hashAlg\", \"J\");\n+    if (field_id == NULL) {\n+        return PR_FAILURE;\n+    }\n+\n+    *ret = (*env)->GetLongField(env, this, field_id);\n+    return PR_SUCCESS;\n+}\n+\n+PRStatus\n+oaep_GetMGFType(JNIEnv *env, jobject this, jclass this_class, CK_RSA_PKCS_MGF_TYPE *ret)\n+{\n+    jfieldID field_id = NULL;\n+\n+    field_id = (*env)->GetFieldID(env, this_class, \"mgf\", \"J\");\n+    if (field_id == NULL) {\n+        return PR_FAILURE;\n+    }\n+\n+    *ret = (*env)->GetLongField(env, this, field_id);\n+    return PR_SUCCESS;\n+}\n+\n+PRStatus\n+oaep_GetSpecifiedSourceData(JNIEnv *env, jobject this, jclass this_class, CK_VOID_PTR *ret, CK_ULONG *ret_len)\n+{\n+    jfieldID field_id = NULL;\n+    jbyteArray data = NULL;\n+\n+    field_id = (*env)->GetFieldID(env, this_class, \"sourceData\", \"[B\");\n+    if (field_id == NULL) {\n+        return PR_FAILURE;\n+    }\n+\n+    data = (*env)->GetObjectField(env, this, field_id);\n+    if (data == NULL) {\n+        *ret = NULL;\n+        *ret_len = 0;\n+        return PR_SUCCESS;\n+    }\n+\n+    if (!JSS_FromByteArray(env, data, (uint8_t **)ret, ret_len)) {\n+        return PR_FAILURE;\n+    }\n+\n+    return PR_SUCCESS;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_org_mozilla_jss_crypto_JSSOAEPParameterSpec_acquireNativeResources(JNIEnv *env, jobject this)\n+{\n+    jclass this_class = NULL;\n+\n+    CK_MECHANISM_TYPE hashAlg;\n+    CK_RSA_PKCS_MGF_TYPE mgf;\n+    CK_RSA_PKCS_OAEP_SOURCE_TYPE source = CKZ_DATA_SPECIFIED;\n+    CK_VOID_PTR pSourceData = NULL;\n+    CK_ULONG ulSourceDataLen = 0;\n+    CK_RSA_PKCS_OAEP_PARAMS_PTR oaep_params = NULL;\n+\n+    jobject params_obj;\n+\n+    this_class = (*env)->GetObjectClass(env, this);\n+    if (this_class == NULL) {\n+        return;\n+    }\n+\n+    if (oaep_GetHashAlg(env, this, this_class, &hashAlg) != PR_SUCCESS) {\n+        goto failure;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTExMzA2OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowNjoxNlrOH2tceg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDoxMDoyNFrOH2vvBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEyOTcyMg==", "bodyText": "Same thing here.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527129722", "createdAt": "2020-11-19T19:06:16Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.c", "diffHunk": "@@ -0,0 +1,151 @@\n+#include <nss.h>\n+#include <pk11pub.h>\n+#include <pkcs11n.h>\n+#include <pkcs11t.h>\n+#include <jni.h>\n+\n+#include \"_jni/org_mozilla_jss_crypto_JSSOAEPParameterSpec.h\"\n+\n+#include \"jssutil.h\"\n+#include \"java_ids.h\"\n+#include \"jss_exceptions.h\"\n+#include \"pk11util.h\"\n+\n+#include \"NativeEnclosure.h\"\n+#include \"StaticVoidPointer.h\"\n+\n+PRStatus\n+oaep_GetHashAlg(JNIEnv *env, jobject this, jclass this_class, CK_MECHANISM_TYPE *ret)\n+{\n+    jfieldID field_id = NULL;\n+\n+    field_id = (*env)->GetFieldID(env, this_class, \"hashAlg\", \"J\");\n+    if (field_id == NULL) {\n+        return PR_FAILURE;\n+    }\n+\n+    *ret = (*env)->GetLongField(env, this, field_id);\n+    return PR_SUCCESS;\n+}\n+\n+PRStatus\n+oaep_GetMGFType(JNIEnv *env, jobject this, jclass this_class, CK_RSA_PKCS_MGF_TYPE *ret)\n+{\n+    jfieldID field_id = NULL;\n+\n+    field_id = (*env)->GetFieldID(env, this_class, \"mgf\", \"J\");\n+    if (field_id == NULL) {\n+        return PR_FAILURE;\n+    }\n+\n+    *ret = (*env)->GetLongField(env, this, field_id);\n+    return PR_SUCCESS;\n+}\n+\n+PRStatus\n+oaep_GetSpecifiedSourceData(JNIEnv *env, jobject this, jclass this_class, CK_VOID_PTR *ret, CK_ULONG *ret_len)\n+{\n+    jfieldID field_id = NULL;\n+    jbyteArray data = NULL;\n+\n+    field_id = (*env)->GetFieldID(env, this_class, \"sourceData\", \"[B\");\n+    if (field_id == NULL) {\n+        return PR_FAILURE;\n+    }\n+\n+    data = (*env)->GetObjectField(env, this, field_id);\n+    if (data == NULL) {\n+        *ret = NULL;\n+        *ret_len = 0;\n+        return PR_SUCCESS;\n+    }\n+\n+    if (!JSS_FromByteArray(env, data, (uint8_t **)ret, ret_len)) {\n+        return PR_FAILURE;\n+    }\n+\n+    return PR_SUCCESS;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_org_mozilla_jss_crypto_JSSOAEPParameterSpec_acquireNativeResources(JNIEnv *env, jobject this)\n+{\n+    jclass this_class = NULL;\n+\n+    CK_MECHANISM_TYPE hashAlg;\n+    CK_RSA_PKCS_MGF_TYPE mgf;\n+    CK_RSA_PKCS_OAEP_SOURCE_TYPE source = CKZ_DATA_SPECIFIED;\n+    CK_VOID_PTR pSourceData = NULL;\n+    CK_ULONG ulSourceDataLen = 0;\n+    CK_RSA_PKCS_OAEP_PARAMS_PTR oaep_params = NULL;\n+\n+    jobject params_obj;\n+\n+    this_class = (*env)->GetObjectClass(env, this);\n+    if (this_class == NULL) {\n+        return;\n+    }\n+\n+    if (oaep_GetHashAlg(env, this, this_class, &hashAlg) != PR_SUCCESS) {\n+        goto failure;\n+    }\n+\n+    if (oaep_GetMGFType(env, this, this_class, &mgf) != PR_SUCCESS) {\n+        goto failure;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2NzIzNw==", "bodyText": "ACK, I've added a comment after this one mentioning allocated data.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527167237", "createdAt": "2020-11-19T20:10:24Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.c", "diffHunk": "@@ -0,0 +1,151 @@\n+#include <nss.h>\n+#include <pk11pub.h>\n+#include <pkcs11n.h>\n+#include <pkcs11t.h>\n+#include <jni.h>\n+\n+#include \"_jni/org_mozilla_jss_crypto_JSSOAEPParameterSpec.h\"\n+\n+#include \"jssutil.h\"\n+#include \"java_ids.h\"\n+#include \"jss_exceptions.h\"\n+#include \"pk11util.h\"\n+\n+#include \"NativeEnclosure.h\"\n+#include \"StaticVoidPointer.h\"\n+\n+PRStatus\n+oaep_GetHashAlg(JNIEnv *env, jobject this, jclass this_class, CK_MECHANISM_TYPE *ret)\n+{\n+    jfieldID field_id = NULL;\n+\n+    field_id = (*env)->GetFieldID(env, this_class, \"hashAlg\", \"J\");\n+    if (field_id == NULL) {\n+        return PR_FAILURE;\n+    }\n+\n+    *ret = (*env)->GetLongField(env, this, field_id);\n+    return PR_SUCCESS;\n+}\n+\n+PRStatus\n+oaep_GetMGFType(JNIEnv *env, jobject this, jclass this_class, CK_RSA_PKCS_MGF_TYPE *ret)\n+{\n+    jfieldID field_id = NULL;\n+\n+    field_id = (*env)->GetFieldID(env, this_class, \"mgf\", \"J\");\n+    if (field_id == NULL) {\n+        return PR_FAILURE;\n+    }\n+\n+    *ret = (*env)->GetLongField(env, this, field_id);\n+    return PR_SUCCESS;\n+}\n+\n+PRStatus\n+oaep_GetSpecifiedSourceData(JNIEnv *env, jobject this, jclass this_class, CK_VOID_PTR *ret, CK_ULONG *ret_len)\n+{\n+    jfieldID field_id = NULL;\n+    jbyteArray data = NULL;\n+\n+    field_id = (*env)->GetFieldID(env, this_class, \"sourceData\", \"[B\");\n+    if (field_id == NULL) {\n+        return PR_FAILURE;\n+    }\n+\n+    data = (*env)->GetObjectField(env, this, field_id);\n+    if (data == NULL) {\n+        *ret = NULL;\n+        *ret_len = 0;\n+        return PR_SUCCESS;\n+    }\n+\n+    if (!JSS_FromByteArray(env, data, (uint8_t **)ret, ret_len)) {\n+        return PR_FAILURE;\n+    }\n+\n+    return PR_SUCCESS;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_org_mozilla_jss_crypto_JSSOAEPParameterSpec_acquireNativeResources(JNIEnv *env, jobject this)\n+{\n+    jclass this_class = NULL;\n+\n+    CK_MECHANISM_TYPE hashAlg;\n+    CK_RSA_PKCS_MGF_TYPE mgf;\n+    CK_RSA_PKCS_OAEP_SOURCE_TYPE source = CKZ_DATA_SPECIFIED;\n+    CK_VOID_PTR pSourceData = NULL;\n+    CK_ULONG ulSourceDataLen = 0;\n+    CK_RSA_PKCS_OAEP_PARAMS_PTR oaep_params = NULL;\n+\n+    jobject params_obj;\n+\n+    this_class = (*env)->GetObjectClass(env, this);\n+    if (this_class == NULL) {\n+        return;\n+    }\n+\n+    if (oaep_GetHashAlg(env, this, this_class, &hashAlg) != PR_SUCCESS) {\n+        goto failure;\n+    }\n+\n+    if (oaep_GetMGFType(env, this, this_class, &mgf) != PR_SUCCESS) {\n+        goto failure;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEyOTcyMg=="}, "originalCommit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTEzNzcxOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOToxMzoxMVrOH2tr5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOToxMzoxMVrOH2tr5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMzY3MQ==", "bodyText": "The super() is redundant. It's called implicitly. No big deal though.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527133671", "createdAt": "2020-11-19T19:13:11Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.mozilla.jss.crypto;\n+\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n+\n+import org.mozilla.jss.pkcs11.PKCS11Constants;\n+import org.mozilla.jss.util.NativeEnclosure;\n+\n+/**\n+ * This class is utilized by JSS to implement OAEP support.\n+ *\n+ * Unlike the existing OAEPParameterSpec in the JCA, this class supports\n+ * NativeEnclosure, allowing it to be used within low-level JNI calls. We\n+ * support copying from an existing OAEPParameterSpec instance (so use is\n+ * interchangeable within JSS) and support setting members from JSS-specific\n+ * types.\n+ *\n+ * Note that this class cannot be used with other JCA providers natively.\n+ */\n+public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmParameterSpec {\n+    public long hashAlg;\n+    public long mgf;\n+    public byte[] sourceData;\n+\n+    public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n+        super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTEzODY2OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOToxMzoyN1rOH2tsfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOToxMzoyN1rOH2tsfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMzgyMA==", "bodyText": "Same thing here.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527133820", "createdAt": "2020-11-19T19:13:27Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.mozilla.jss.crypto;\n+\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n+\n+import org.mozilla.jss.pkcs11.PKCS11Constants;\n+import org.mozilla.jss.util.NativeEnclosure;\n+\n+/**\n+ * This class is utilized by JSS to implement OAEP support.\n+ *\n+ * Unlike the existing OAEPParameterSpec in the JCA, this class supports\n+ * NativeEnclosure, allowing it to be used within low-level JNI calls. We\n+ * support copying from an existing OAEPParameterSpec instance (so use is\n+ * interchangeable within JSS) and support setting members from JSS-specific\n+ * types.\n+ *\n+ * Note that this class cannot be used with other JCA providers natively.\n+ */\n+public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmParameterSpec {\n+    public long hashAlg;\n+    public long mgf;\n+    public byte[] sourceData;\n+\n+    public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n+        super();\n+\n+        setDigestAlgorithm(mdName);\n+        setMaskGenAlgorithm(mgfName);\n+        setMaskGenAlgorithmType(mgfSpec);\n+        setPSource(pSrc);\n+    }\n+\n+    public JSSOAEPParameterSpec(OAEPParameterSpec copy) {\n+        super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTE2OTA4OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOToyMToxMlrOH2t_Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDozMTo0MFrOH2wc5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzODU4Ng==", "bodyText": "Is this necessary? Java will throw ClassCastException automatically in the following code.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527138586", "createdAt": "2020-11-19T19:21:12Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.mozilla.jss.crypto;\n+\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n+\n+import org.mozilla.jss.pkcs11.PKCS11Constants;\n+import org.mozilla.jss.util.NativeEnclosure;\n+\n+/**\n+ * This class is utilized by JSS to implement OAEP support.\n+ *\n+ * Unlike the existing OAEPParameterSpec in the JCA, this class supports\n+ * NativeEnclosure, allowing it to be used within low-level JNI calls. We\n+ * support copying from an existing OAEPParameterSpec instance (so use is\n+ * interchangeable within JSS) and support setting members from JSS-specific\n+ * types.\n+ *\n+ * Note that this class cannot be used with other JCA providers natively.\n+ */\n+public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmParameterSpec {\n+    public long hashAlg;\n+    public long mgf;\n+    public byte[] sourceData;\n+\n+    public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n+        super();\n+\n+        setDigestAlgorithm(mdName);\n+        setMaskGenAlgorithm(mgfName);\n+        setMaskGenAlgorithmType(mgfSpec);\n+        setPSource(pSrc);\n+    }\n+\n+    public JSSOAEPParameterSpec(OAEPParameterSpec copy) {\n+        super();\n+\n+        setDigestAlgorithm(copy.getDigestAlgorithm());\n+        setMaskGenAlgorithm(copy.getMGFAlgorithm());\n+        setMaskGenAlgorithmType(copy.getMGFParameters());\n+        setPSource(copy.getPSource());\n+    }\n+\n+    public void setDigestAlgorithm(String algo) throws IllegalArgumentException {\n+        switch (algo.toLowerCase()) {\n+            case \"md5\":\n+            case \"ckm_md5\":\n+                hashAlg = PKCS11Constants.CKM_MD5;\n+                break;\n+            case \"sha1\":\n+            case \"sha-1\":\n+            case \"ckm_sha_1\":\n+                hashAlg = PKCS11Constants.CKM_SHA_1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+            case \"ckm_sha256\":\n+                hashAlg = PKCS11Constants.CKM_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+            case \"ckm_sha384\":\n+                hashAlg = PKCS11Constants.CKM_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+            case \"ckm_sha512\":\n+                hashAlg = PKCS11Constants.CKM_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown algorithm identifier: \" + algo;\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setDigestAlgorithm(DigestAlgorithm algo) throws IllegalArgumentException {\n+        if ((algo instanceof HMACAlgorithm) || (algo instanceof CMACAlgorithm)) {\n+            String msg = \"Unable to use MAC digest algorithm \" + algo;\n+            msg += \" in place of an unkeyed hash algorithm\";\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        hashAlg = algo.getEnum().getValue();\n+    }\n+\n+    public void setDigestAlgorithm(long algo) throws IllegalArgumentException {\n+        hashAlg = algo;\n+    }\n+\n+    public void setMaskGenAlgorithm(String algo) throws IllegalArgumentException {\n+        if (!algo.toLowerCase().equals(\"mgf1\")) {\n+            String msg = \"Unknown mask generation algorithm: \" + algo;\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        // Do nothing. We just validate this data so if we get passed\n+        // something unexpected, we error out instead.\n+    }\n+\n+    public void setMaskGenAlgorithmType(String algo) throws IllegalArgumentException {\n+        switch (algo.toLowerCase()) {\n+            case \"sha1\":\n+            case \"sha-1\":\n+            case \"ckm_sha_1\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+            case \"ckm_sha256\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+            case \"ckm_sha384\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+            case \"ckm_sha512\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown mask generation algorithm identifier: \" + algo;\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setMaskGenAlgorithmType(AlgorithmParameterSpec algo) throws IllegalArgumentException {\n+        if (!(algo instanceof MGF1ParameterSpec) || algo == null) {\n+            String msg = \"Unknown mask generation algorithm parameter \";\n+            msg += \"specification: \" + algo;\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        MGF1ParameterSpec mgf1 = (MGF1ParameterSpec) algo;\n+        switch (mgf1.getDigestAlgorithm().toLowerCase()) {\n+            case \"sha1\":\n+            case \"sha-1\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown mask generation algorithm identifier: \";\n+                msg += mgf1.getDigestAlgorithm();\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setMaskGenAlgorithmType(long algo) throws IllegalArgumentException {\n+        mgf = algo;\n+    }\n+\n+    public void setPSource(PSource spec) throws IllegalArgumentException {\n+        if (spec == null) {\n+            return;\n+        }\n+\n+        if (!(spec instanceof PSource.PSpecified)) {\n+            String msg = \"Expected PSource spec to be an instance of \";\n+            msg += \"PSource.PSpecified, but wasn't: \" + spec;\n+            throw new IllegalArgumentException(msg);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE3ODk4Mg==", "bodyText": "I think the IllegalArgumentException is nicer than the ClassCastException personally in this case.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527178982", "createdAt": "2020-11-19T20:31:40Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.mozilla.jss.crypto;\n+\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n+\n+import org.mozilla.jss.pkcs11.PKCS11Constants;\n+import org.mozilla.jss.util.NativeEnclosure;\n+\n+/**\n+ * This class is utilized by JSS to implement OAEP support.\n+ *\n+ * Unlike the existing OAEPParameterSpec in the JCA, this class supports\n+ * NativeEnclosure, allowing it to be used within low-level JNI calls. We\n+ * support copying from an existing OAEPParameterSpec instance (so use is\n+ * interchangeable within JSS) and support setting members from JSS-specific\n+ * types.\n+ *\n+ * Note that this class cannot be used with other JCA providers natively.\n+ */\n+public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmParameterSpec {\n+    public long hashAlg;\n+    public long mgf;\n+    public byte[] sourceData;\n+\n+    public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n+        super();\n+\n+        setDigestAlgorithm(mdName);\n+        setMaskGenAlgorithm(mgfName);\n+        setMaskGenAlgorithmType(mgfSpec);\n+        setPSource(pSrc);\n+    }\n+\n+    public JSSOAEPParameterSpec(OAEPParameterSpec copy) {\n+        super();\n+\n+        setDigestAlgorithm(copy.getDigestAlgorithm());\n+        setMaskGenAlgorithm(copy.getMGFAlgorithm());\n+        setMaskGenAlgorithmType(copy.getMGFParameters());\n+        setPSource(copy.getPSource());\n+    }\n+\n+    public void setDigestAlgorithm(String algo) throws IllegalArgumentException {\n+        switch (algo.toLowerCase()) {\n+            case \"md5\":\n+            case \"ckm_md5\":\n+                hashAlg = PKCS11Constants.CKM_MD5;\n+                break;\n+            case \"sha1\":\n+            case \"sha-1\":\n+            case \"ckm_sha_1\":\n+                hashAlg = PKCS11Constants.CKM_SHA_1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+            case \"ckm_sha256\":\n+                hashAlg = PKCS11Constants.CKM_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+            case \"ckm_sha384\":\n+                hashAlg = PKCS11Constants.CKM_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+            case \"ckm_sha512\":\n+                hashAlg = PKCS11Constants.CKM_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown algorithm identifier: \" + algo;\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setDigestAlgorithm(DigestAlgorithm algo) throws IllegalArgumentException {\n+        if ((algo instanceof HMACAlgorithm) || (algo instanceof CMACAlgorithm)) {\n+            String msg = \"Unable to use MAC digest algorithm \" + algo;\n+            msg += \" in place of an unkeyed hash algorithm\";\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        hashAlg = algo.getEnum().getValue();\n+    }\n+\n+    public void setDigestAlgorithm(long algo) throws IllegalArgumentException {\n+        hashAlg = algo;\n+    }\n+\n+    public void setMaskGenAlgorithm(String algo) throws IllegalArgumentException {\n+        if (!algo.toLowerCase().equals(\"mgf1\")) {\n+            String msg = \"Unknown mask generation algorithm: \" + algo;\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        // Do nothing. We just validate this data so if we get passed\n+        // something unexpected, we error out instead.\n+    }\n+\n+    public void setMaskGenAlgorithmType(String algo) throws IllegalArgumentException {\n+        switch (algo.toLowerCase()) {\n+            case \"sha1\":\n+            case \"sha-1\":\n+            case \"ckm_sha_1\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+            case \"ckm_sha256\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+            case \"ckm_sha384\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+            case \"ckm_sha512\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown mask generation algorithm identifier: \" + algo;\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setMaskGenAlgorithmType(AlgorithmParameterSpec algo) throws IllegalArgumentException {\n+        if (!(algo instanceof MGF1ParameterSpec) || algo == null) {\n+            String msg = \"Unknown mask generation algorithm parameter \";\n+            msg += \"specification: \" + algo;\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        MGF1ParameterSpec mgf1 = (MGF1ParameterSpec) algo;\n+        switch (mgf1.getDigestAlgorithm().toLowerCase()) {\n+            case \"sha1\":\n+            case \"sha-1\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown mask generation algorithm identifier: \";\n+                msg += mgf1.getDigestAlgorithm();\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setMaskGenAlgorithmType(long algo) throws IllegalArgumentException {\n+        mgf = algo;\n+    }\n+\n+    public void setPSource(PSource spec) throws IllegalArgumentException {\n+        if (spec == null) {\n+            return;\n+        }\n+\n+        if (!(spec instanceof PSource.PSpecified)) {\n+            String msg = \"Expected PSource spec to be an instance of \";\n+            msg += \"PSource.PSpecified, but wasn't: \" + spec;\n+            throw new IllegalArgumentException(msg);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzODU4Ng=="}, "originalCommit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTI3MTcyOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTo0NzoxOFrOH2u80w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTo0NzoxOFrOH2u80w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1NDM4Nw==", "bodyText": "Do we want to set sourceData = null here? No big deal, just semantics.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527154387", "createdAt": "2020-11-19T19:47:18Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.mozilla.jss.crypto;\n+\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n+\n+import org.mozilla.jss.pkcs11.PKCS11Constants;\n+import org.mozilla.jss.util.NativeEnclosure;\n+\n+/**\n+ * This class is utilized by JSS to implement OAEP support.\n+ *\n+ * Unlike the existing OAEPParameterSpec in the JCA, this class supports\n+ * NativeEnclosure, allowing it to be used within low-level JNI calls. We\n+ * support copying from an existing OAEPParameterSpec instance (so use is\n+ * interchangeable within JSS) and support setting members from JSS-specific\n+ * types.\n+ *\n+ * Note that this class cannot be used with other JCA providers natively.\n+ */\n+public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmParameterSpec {\n+    public long hashAlg;\n+    public long mgf;\n+    public byte[] sourceData;\n+\n+    public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n+        super();\n+\n+        setDigestAlgorithm(mdName);\n+        setMaskGenAlgorithm(mgfName);\n+        setMaskGenAlgorithmType(mgfSpec);\n+        setPSource(pSrc);\n+    }\n+\n+    public JSSOAEPParameterSpec(OAEPParameterSpec copy) {\n+        super();\n+\n+        setDigestAlgorithm(copy.getDigestAlgorithm());\n+        setMaskGenAlgorithm(copy.getMGFAlgorithm());\n+        setMaskGenAlgorithmType(copy.getMGFParameters());\n+        setPSource(copy.getPSource());\n+    }\n+\n+    public void setDigestAlgorithm(String algo) throws IllegalArgumentException {\n+        switch (algo.toLowerCase()) {\n+            case \"md5\":\n+            case \"ckm_md5\":\n+                hashAlg = PKCS11Constants.CKM_MD5;\n+                break;\n+            case \"sha1\":\n+            case \"sha-1\":\n+            case \"ckm_sha_1\":\n+                hashAlg = PKCS11Constants.CKM_SHA_1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+            case \"ckm_sha256\":\n+                hashAlg = PKCS11Constants.CKM_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+            case \"ckm_sha384\":\n+                hashAlg = PKCS11Constants.CKM_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+            case \"ckm_sha512\":\n+                hashAlg = PKCS11Constants.CKM_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown algorithm identifier: \" + algo;\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setDigestAlgorithm(DigestAlgorithm algo) throws IllegalArgumentException {\n+        if ((algo instanceof HMACAlgorithm) || (algo instanceof CMACAlgorithm)) {\n+            String msg = \"Unable to use MAC digest algorithm \" + algo;\n+            msg += \" in place of an unkeyed hash algorithm\";\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        hashAlg = algo.getEnum().getValue();\n+    }\n+\n+    public void setDigestAlgorithm(long algo) throws IllegalArgumentException {\n+        hashAlg = algo;\n+    }\n+\n+    public void setMaskGenAlgorithm(String algo) throws IllegalArgumentException {\n+        if (!algo.toLowerCase().equals(\"mgf1\")) {\n+            String msg = \"Unknown mask generation algorithm: \" + algo;\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        // Do nothing. We just validate this data so if we get passed\n+        // something unexpected, we error out instead.\n+    }\n+\n+    public void setMaskGenAlgorithmType(String algo) throws IllegalArgumentException {\n+        switch (algo.toLowerCase()) {\n+            case \"sha1\":\n+            case \"sha-1\":\n+            case \"ckm_sha_1\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+            case \"ckm_sha256\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+            case \"ckm_sha384\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+            case \"ckm_sha512\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown mask generation algorithm identifier: \" + algo;\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setMaskGenAlgorithmType(AlgorithmParameterSpec algo) throws IllegalArgumentException {\n+        if (!(algo instanceof MGF1ParameterSpec) || algo == null) {\n+            String msg = \"Unknown mask generation algorithm parameter \";\n+            msg += \"specification: \" + algo;\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        MGF1ParameterSpec mgf1 = (MGF1ParameterSpec) algo;\n+        switch (mgf1.getDigestAlgorithm().toLowerCase()) {\n+            case \"sha1\":\n+            case \"sha-1\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown mask generation algorithm identifier: \";\n+                msg += mgf1.getDigestAlgorithm();\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setMaskGenAlgorithmType(long algo) throws IllegalArgumentException {\n+        mgf = algo;\n+    }\n+\n+    public void setPSource(PSource spec) throws IllegalArgumentException {\n+        if (spec == null) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222"}, "originalPosition": 167}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2594, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}