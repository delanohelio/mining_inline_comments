{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTU3MTIx", "number": 421, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzo0MTozMVrODlzMNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzo0MTozMVrODlzMNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTYyNjE1OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/JSSProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzo0MTozMVrOFy5DyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzo0MTozMVrOFy5DyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwNzk3Ng==", "bodyText": "@edewata We can't encapsulate JSSProviderLoader inside JSSProvider like this:\npublic final class JSSProvider extends java.security.Provider {\n    public final class Loader extends JSSProvider { }\n}\nBecause it complains about final:\ncd /home/ascheel/GitHub/c2/jss/build && /etc/alternatives/java_sdk/bin/javac -classpath /usr/share/java/slf4j/api.jar:/usr/share/java/apache-commons-lang.jar:/usr/share/java/jaxb-api.jar -sourcepath /home/ascheel/GitHub/c2/jss -target 1.8 -source 1.8 -g -d /home/ascheel/GitHub/c2/jss/build/classes/jss -h /home/ascheel/GitHub/c2/jss/build/include/jss/_jni @/home/ascheel/GitHub/c2/jss/build/.targets/java.sources && touch /home/ascheel/GitHub/c2/jss/build/.targets/finished_generate_java\n/home/ascheel/GitHub/c2/jss/org/mozilla/jss/JSSProvider.java:346: error: cannot inherit from final JSSProvider\n    public final static class JSSProviderLoader extends JSSProvider {\n                                                        ^\nNote: Some input files use or override a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: /home/ascheel/GitHub/c2/jss/org/mozilla/jss/ssl/SSLAlertDescription.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\nMy preference would be to leave JSSProvider as final somehow. Should I try and add detection logic to JSSProvider to see if a CM has been initialized, and if not, call JSSProviderLoader's init(...) method? That way we can keep the config-parsing logic separate from the JSSProvider itself, and point to org.mozilla.jss.JSSProvider as the actual provider in the java.security file.", "url": "https://github.com/dogtagpki/jss/pull/421#discussion_r388907976", "createdAt": "2020-03-06T13:41:31Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/JSSProvider.java", "diffHunk": "@@ -3,7 +3,7 @@\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n package org.mozilla.jss;\n \n-public final class JSSProvider extends java.security.Provider {\n+public class JSSProvider extends java.security.Provider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98b6c72c0b17d8791196a101fd5b2f7ce4a605a1"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2672, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}