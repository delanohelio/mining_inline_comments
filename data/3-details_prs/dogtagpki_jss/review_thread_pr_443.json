{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNTkwMDgz", "number": 443, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo1Mzo0OFrODwhs2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxNDo0MlrODzzwqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjEwMzkyOnYy", "diffSide": "RIGHT", "path": "docs/usage/jssprovider.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo1Mzo0OFrOGDlTvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo1Mzo0OFrOGDlTvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxMDE3NQ==", "bodyText": "Defaults to true.", "url": "https://github.com/dogtagpki/jss/pull/443#discussion_r406410175", "createdAt": "2020-04-09T18:53:48Z", "author": {"login": "edewata"}, "path": "docs/usage/jssprovider.md", "diffHunk": "@@ -0,0 +1,205 @@\n+# `Mozilla-JSS` Provider\n+\n+The `Mozilla-JSS` JCA-compatible Provider exposes most of the functionality\n+of JSS to external packages. This interface is the recommend interface most\n+developers should build against. However, once the dependencies are satisfied\n+and JSS's native component are available to the JVM, we still have to load\n+and initialize JSS.\n+\n+There are two routes to do this:\n+\n+ 1. Via the `CryptoManager` interface, _and_\n+ 2. Via `java.security`, directly loading the `JSSProvider`.\n+\n+\n+## Loading JSS via `CryptoManager`\n+\n+To load JSS from a `CryptoManager`, it is necessary to decide what level of\n+configuration is necessary. If you're happy with the defaults, it is\n+sufficient to only specify a NSS DB:\n+\n+```java\n+import org.mozilla.jss.CryptoManager;\n+\n+CryptoManager.initialize(\"/path/to/nss-db\");\n+```\n+\n+At this point, JSS will be initialized and can be used. However, a password\n+might still be required, so see the section below for providing password\n+callback handlers.\n+\n+However, certain default values might not work in all situations. For\n+instance, Candlepin expects other providers to be default, with the\n+Mozilla-JSS provider being the least-preferred provider. To do this, they'd\n+construct a `InitializationValues` instance and pass that to\n+`CryptoManager.initialize(...)`:\n+\n+```java\n+import org.mozilla.jss.InitializationValues;\n+\n+InitializationValues ivs = new InitializationValues(\"/path/to/nss-db\");\n+ivs.installJSSProviderFirst = false;\n+\n+CryptoManager.initialize(ivs);\n+```\n+\n+See the section below on other options available to configure.\n+\n+\n+### `InitializationValues` options\n+\n+There are two constructors for `InitializationValues`:\n+\n+ - Taking only a NSS DB directory. This was utilized above.\n+ - Taking a NSS DB directory, a prefix for the certificate database, a\n+   prefix for the key database, and the name of the secmod configuration.\n+\n+The latter is a more advanced use case and few individuals likely need to use\n+it. For more information, see the corresponding NSS documentation on these\n+values.\n+\n+The following initialization values are supported:\n+\n+ - `cooperate`: Sets 4 recommended options for applications that use both NSS\n+   and the Java SunPKCS11 provider. `boolean`, defaults to `false`.\n+ - `fipsMode`: The FIPS mode of the security library.\n+   `InitializationValues.FIPSMode` enum, defaults to `UNCHANGED`.\n+ - `forceOpen`: Continue to force initializations even if the databases\n+   cannot be opened. `boolean`, defaults to `false`.\n+ - `initializeJavaOnly`: If `true`, none of the underlying NSS components\n+   will be initialized. `boolean`, defaults to `false`.\n+ - `installJSSProvider`: Install the JSS crypto provider. `boolean`, defaults\n+   to `false`.\n+ - `installJSSProviderFirst`: Whether or not to initialize the JSS provider\n+   first. `boolean`, defaults to `false`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ddd122860255a0c0675b109139c21a3d6929c61"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjEwNDg1OnYy", "diffSide": "RIGHT", "path": "docs/usage/jssprovider.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo1NDowNFrOGDlUSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo1NDowNFrOGDlUSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxMDMxNQ==", "bodyText": "Defaults to true.", "url": "https://github.com/dogtagpki/jss/pull/443#discussion_r406410315", "createdAt": "2020-04-09T18:54:04Z", "author": {"login": "edewata"}, "path": "docs/usage/jssprovider.md", "diffHunk": "@@ -0,0 +1,205 @@\n+# `Mozilla-JSS` Provider\n+\n+The `Mozilla-JSS` JCA-compatible Provider exposes most of the functionality\n+of JSS to external packages. This interface is the recommend interface most\n+developers should build against. However, once the dependencies are satisfied\n+and JSS's native component are available to the JVM, we still have to load\n+and initialize JSS.\n+\n+There are two routes to do this:\n+\n+ 1. Via the `CryptoManager` interface, _and_\n+ 2. Via `java.security`, directly loading the `JSSProvider`.\n+\n+\n+## Loading JSS via `CryptoManager`\n+\n+To load JSS from a `CryptoManager`, it is necessary to decide what level of\n+configuration is necessary. If you're happy with the defaults, it is\n+sufficient to only specify a NSS DB:\n+\n+```java\n+import org.mozilla.jss.CryptoManager;\n+\n+CryptoManager.initialize(\"/path/to/nss-db\");\n+```\n+\n+At this point, JSS will be initialized and can be used. However, a password\n+might still be required, so see the section below for providing password\n+callback handlers.\n+\n+However, certain default values might not work in all situations. For\n+instance, Candlepin expects other providers to be default, with the\n+Mozilla-JSS provider being the least-preferred provider. To do this, they'd\n+construct a `InitializationValues` instance and pass that to\n+`CryptoManager.initialize(...)`:\n+\n+```java\n+import org.mozilla.jss.InitializationValues;\n+\n+InitializationValues ivs = new InitializationValues(\"/path/to/nss-db\");\n+ivs.installJSSProviderFirst = false;\n+\n+CryptoManager.initialize(ivs);\n+```\n+\n+See the section below on other options available to configure.\n+\n+\n+### `InitializationValues` options\n+\n+There are two constructors for `InitializationValues`:\n+\n+ - Taking only a NSS DB directory. This was utilized above.\n+ - Taking a NSS DB directory, a prefix for the certificate database, a\n+   prefix for the key database, and the name of the secmod configuration.\n+\n+The latter is a more advanced use case and few individuals likely need to use\n+it. For more information, see the corresponding NSS documentation on these\n+values.\n+\n+The following initialization values are supported:\n+\n+ - `cooperate`: Sets 4 recommended options for applications that use both NSS\n+   and the Java SunPKCS11 provider. `boolean`, defaults to `false`.\n+ - `fipsMode`: The FIPS mode of the security library.\n+   `InitializationValues.FIPSMode` enum, defaults to `UNCHANGED`.\n+ - `forceOpen`: Continue to force initializations even if the databases\n+   cannot be opened. `boolean`, defaults to `false`.\n+ - `initializeJavaOnly`: If `true`, none of the underlying NSS components\n+   will be initialized. `boolean`, defaults to `false`.\n+ - `installJSSProvider`: Install the JSS crypto provider. `boolean`, defaults\n+   to `false`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ddd122860255a0c0675b109139c21a3d6929c61"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjExNjM1OnYy", "diffSide": "RIGHT", "path": "docs/usage/jssprovider.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo1NzozOFrOGDlb1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo0NDowMlrOGF16HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxMjI0NQ==", "bodyText": "These params are documented in javadoc. Should we just point to javadoc instead duplicating it here?", "url": "https://github.com/dogtagpki/jss/pull/443#discussion_r406412245", "createdAt": "2020-04-09T18:57:38Z", "author": {"login": "edewata"}, "path": "docs/usage/jssprovider.md", "diffHunk": "@@ -0,0 +1,205 @@\n+# `Mozilla-JSS` Provider\n+\n+The `Mozilla-JSS` JCA-compatible Provider exposes most of the functionality\n+of JSS to external packages. This interface is the recommend interface most\n+developers should build against. However, once the dependencies are satisfied\n+and JSS's native component are available to the JVM, we still have to load\n+and initialize JSS.\n+\n+There are two routes to do this:\n+\n+ 1. Via the `CryptoManager` interface, _and_\n+ 2. Via `java.security`, directly loading the `JSSProvider`.\n+\n+\n+## Loading JSS via `CryptoManager`\n+\n+To load JSS from a `CryptoManager`, it is necessary to decide what level of\n+configuration is necessary. If you're happy with the defaults, it is\n+sufficient to only specify a NSS DB:\n+\n+```java\n+import org.mozilla.jss.CryptoManager;\n+\n+CryptoManager.initialize(\"/path/to/nss-db\");\n+```\n+\n+At this point, JSS will be initialized and can be used. However, a password\n+might still be required, so see the section below for providing password\n+callback handlers.\n+\n+However, certain default values might not work in all situations. For\n+instance, Candlepin expects other providers to be default, with the\n+Mozilla-JSS provider being the least-preferred provider. To do this, they'd\n+construct a `InitializationValues` instance and pass that to\n+`CryptoManager.initialize(...)`:\n+\n+```java\n+import org.mozilla.jss.InitializationValues;\n+\n+InitializationValues ivs = new InitializationValues(\"/path/to/nss-db\");\n+ivs.installJSSProviderFirst = false;\n+\n+CryptoManager.initialize(ivs);\n+```\n+\n+See the section below on other options available to configure.\n+\n+\n+### `InitializationValues` options\n+\n+There are two constructors for `InitializationValues`:\n+\n+ - Taking only a NSS DB directory. This was utilized above.\n+ - Taking a NSS DB directory, a prefix for the certificate database, a\n+   prefix for the key database, and the name of the secmod configuration.\n+\n+The latter is a more advanced use case and few individuals likely need to use\n+it. For more information, see the corresponding NSS documentation on these\n+values.\n+\n+The following initialization values are supported:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ddd122860255a0c0675b109139c21a3d6929c61"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3OTI5Mg==", "bodyText": "Sure, I think that'd be better.", "url": "https://github.com/dogtagpki/jss/pull/443#discussion_r408779292", "createdAt": "2020-04-15T11:44:02Z", "author": {"login": "cipherboy"}, "path": "docs/usage/jssprovider.md", "diffHunk": "@@ -0,0 +1,205 @@\n+# `Mozilla-JSS` Provider\n+\n+The `Mozilla-JSS` JCA-compatible Provider exposes most of the functionality\n+of JSS to external packages. This interface is the recommend interface most\n+developers should build against. However, once the dependencies are satisfied\n+and JSS's native component are available to the JVM, we still have to load\n+and initialize JSS.\n+\n+There are two routes to do this:\n+\n+ 1. Via the `CryptoManager` interface, _and_\n+ 2. Via `java.security`, directly loading the `JSSProvider`.\n+\n+\n+## Loading JSS via `CryptoManager`\n+\n+To load JSS from a `CryptoManager`, it is necessary to decide what level of\n+configuration is necessary. If you're happy with the defaults, it is\n+sufficient to only specify a NSS DB:\n+\n+```java\n+import org.mozilla.jss.CryptoManager;\n+\n+CryptoManager.initialize(\"/path/to/nss-db\");\n+```\n+\n+At this point, JSS will be initialized and can be used. However, a password\n+might still be required, so see the section below for providing password\n+callback handlers.\n+\n+However, certain default values might not work in all situations. For\n+instance, Candlepin expects other providers to be default, with the\n+Mozilla-JSS provider being the least-preferred provider. To do this, they'd\n+construct a `InitializationValues` instance and pass that to\n+`CryptoManager.initialize(...)`:\n+\n+```java\n+import org.mozilla.jss.InitializationValues;\n+\n+InitializationValues ivs = new InitializationValues(\"/path/to/nss-db\");\n+ivs.installJSSProviderFirst = false;\n+\n+CryptoManager.initialize(ivs);\n+```\n+\n+See the section below on other options available to configure.\n+\n+\n+### `InitializationValues` options\n+\n+There are two constructors for `InitializationValues`:\n+\n+ - Taking only a NSS DB directory. This was utilized above.\n+ - Taking a NSS DB directory, a prefix for the certificate database, a\n+   prefix for the key database, and the name of the secmod configuration.\n+\n+The latter is a more advanced use case and few individuals likely need to use\n+it. For more information, see the corresponding NSS documentation on these\n+values.\n+\n+The following initialization values are supported:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxMjI0NQ=="}, "originalCommit": {"oid": "5ddd122860255a0c0675b109139c21a3d6929c61"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjEyNjE5OnYy", "diffSide": "RIGHT", "path": "docs/usage/jssprovider.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowMDozOFrOGDliLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowMDozOFrOGDliLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxMzg3MA==", "bodyText": "How about removing the \"however\" here since the previous paragraph also contains a \"however\"?", "url": "https://github.com/dogtagpki/jss/pull/443#discussion_r406413870", "createdAt": "2020-04-09T19:00:38Z", "author": {"login": "edewata"}, "path": "docs/usage/jssprovider.md", "diffHunk": "@@ -0,0 +1,205 @@\n+# `Mozilla-JSS` Provider\n+\n+The `Mozilla-JSS` JCA-compatible Provider exposes most of the functionality\n+of JSS to external packages. This interface is the recommend interface most\n+developers should build against. However, once the dependencies are satisfied\n+and JSS's native component are available to the JVM, we still have to load\n+and initialize JSS.\n+\n+There are two routes to do this:\n+\n+ 1. Via the `CryptoManager` interface, _and_\n+ 2. Via `java.security`, directly loading the `JSSProvider`.\n+\n+\n+## Loading JSS via `CryptoManager`\n+\n+To load JSS from a `CryptoManager`, it is necessary to decide what level of\n+configuration is necessary. If you're happy with the defaults, it is\n+sufficient to only specify a NSS DB:\n+\n+```java\n+import org.mozilla.jss.CryptoManager;\n+\n+CryptoManager.initialize(\"/path/to/nss-db\");\n+```\n+\n+At this point, JSS will be initialized and can be used. However, a password\n+might still be required, so see the section below for providing password\n+callback handlers.\n+\n+However, certain default values might not work in all situations. For", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ddd122860255a0c0675b109139c21a3d6929c61"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjEzNzU2OnYy", "diffSide": "RIGHT", "path": "docs/usage/jssprovider.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowNDowM1rOGDlpUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowNDowM1rOGDlpUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNTY5Ng==", "bodyText": "Some properties are mapped to CryptoManager method, so \"InitializationValues member name\" is a bit inaccurate. How about \"Mapped to\"?", "url": "https://github.com/dogtagpki/jss/pull/443#discussion_r406415696", "createdAt": "2020-04-09T19:04:03Z", "author": {"login": "edewata"}, "path": "docs/usage/jssprovider.md", "diffHunk": "@@ -0,0 +1,205 @@\n+# `Mozilla-JSS` Provider\n+\n+The `Mozilla-JSS` JCA-compatible Provider exposes most of the functionality\n+of JSS to external packages. This interface is the recommend interface most\n+developers should build against. However, once the dependencies are satisfied\n+and JSS's native component are available to the JVM, we still have to load\n+and initialize JSS.\n+\n+There are two routes to do this:\n+\n+ 1. Via the `CryptoManager` interface, _and_\n+ 2. Via `java.security`, directly loading the `JSSProvider`.\n+\n+\n+## Loading JSS via `CryptoManager`\n+\n+To load JSS from a `CryptoManager`, it is necessary to decide what level of\n+configuration is necessary. If you're happy with the defaults, it is\n+sufficient to only specify a NSS DB:\n+\n+```java\n+import org.mozilla.jss.CryptoManager;\n+\n+CryptoManager.initialize(\"/path/to/nss-db\");\n+```\n+\n+At this point, JSS will be initialized and can be used. However, a password\n+might still be required, so see the section below for providing password\n+callback handlers.\n+\n+However, certain default values might not work in all situations. For\n+instance, Candlepin expects other providers to be default, with the\n+Mozilla-JSS provider being the least-preferred provider. To do this, they'd\n+construct a `InitializationValues` instance and pass that to\n+`CryptoManager.initialize(...)`:\n+\n+```java\n+import org.mozilla.jss.InitializationValues;\n+\n+InitializationValues ivs = new InitializationValues(\"/path/to/nss-db\");\n+ivs.installJSSProviderFirst = false;\n+\n+CryptoManager.initialize(ivs);\n+```\n+\n+See the section below on other options available to configure.\n+\n+\n+### `InitializationValues` options\n+\n+There are two constructors for `InitializationValues`:\n+\n+ - Taking only a NSS DB directory. This was utilized above.\n+ - Taking a NSS DB directory, a prefix for the certificate database, a\n+   prefix for the key database, and the name of the secmod configuration.\n+\n+The latter is a more advanced use case and few individuals likely need to use\n+it. For more information, see the corresponding NSS documentation on these\n+values.\n+\n+The following initialization values are supported:\n+\n+ - `cooperate`: Sets 4 recommended options for applications that use both NSS\n+   and the Java SunPKCS11 provider. `boolean`, defaults to `false`.\n+ - `fipsMode`: The FIPS mode of the security library.\n+   `InitializationValues.FIPSMode` enum, defaults to `UNCHANGED`.\n+ - `forceOpen`: Continue to force initializations even if the databases\n+   cannot be opened. `boolean`, defaults to `false`.\n+ - `initializeJavaOnly`: If `true`, none of the underlying NSS components\n+   will be initialized. `boolean`, defaults to `false`.\n+ - `installJSSProvider`: Install the JSS crypto provider. `boolean`, defaults\n+   to `false`.\n+ - `installJSSProviderFirst`: Whether or not to initialize the JSS provider\n+   first. `boolean`, defaults to `false`.\n+ - `noCertDB`: Don't open the cert DB and key DB's, just initialize the\n+   volatile certdb. `boolean`, defaults to `false`.\n+ - `noModDB`: Don't open the security module DB, just initialize the PKCS #11\n+   module. `boolean`, defaults to `false`.\n+ - `noPK11Finalize`: never call `C_Finalize` on any PKCS#11 module. `boolean`,\n+   defaults to `false`.\n+ - `noRootInit`: Don't try to look for the root certs module automatically.\n+   `boolean`, defaults to `false`.\n+ - `ocspCheckingEnabled`: To have NSS check the OCSP responder for when\n+   verifying certificates, set this flags to `true`. `boolean`, defaults to\n+   `false`.\n+ - `ocspResponderCertNickname`: The nickname of the cert to trust (expected)\n+   to sign the OCSP responses. `String`, defaults to `null`.\n+ - `ocspResponderURL`: Specify the location and cert of the responder.\n+   `String`, defaults to `null`.\n+ - `optimizeSpace`: Use smaller tables and caches. `boolean`, defaults to\n+   `false`.\n+ - `PK11Reload`: Init `PK11Reload` to ignore the\n+   `CKR_CRYPTOKI_ALREADY_INITIALIZED` error when loading PKCS#11 modules.\n+   `boolean`, defaults to `false`.\n+ - `PK11ThreadSafe`: only load PKCS#11 modules that are thread-safe, ie. that\n+   support locking - either OS locking or NSS-provided locks. `boolean`,\n+   defaults to `false`.\n+ - `PKIXVerify`: Enable PKIX verify rather than the old cert library, to\n+   verify certificates. `boolean`, defaults to `false`.\n+ - `readOnly`: To open the databases in read-only mode, set this flag to\n+   true. `boolean`, defaults to `false`.\n+ - `removeSunProvider`: Remove the Sun crypto provider. `boolean`, defaults\n+   to `false`.\n+\n+### `PasswordCallback` handlers\n+\n+In order to authenticate against a PKCS#11 token or to the internal\n+certificate store, it is necessary to select a `PasswordCallback` handler.\n+By default this is a console-based `PasswordCallback` handler. This prompts\n+the user for the password via the Console. However, this is not appropriate\n+in all scenarios.\n+\n+Developers are expected to extend and implement this as desired by their\n+application.\n+\n+For example, to set a static `PasswordCallback` handler:\n+\n+```java\n+CryptoManager cm = CryptoManager.getInstance();\n+cm.setPasswordCallback(new Password(\"password\".toCharArray()));\n+```\n+\n+## Loading JSS via `java.security`\n+\n+You can directly add the `JSSProvider` by adding it to the `java.security`\n+file:\n+\n+```properties\n+security.provider.<n> = org.mozilla.jss.JSSProvider /path/to/jss.cfg\n+```\n+\n+There are two ways use this `java.security` file: by directly installing\n+it to the system or by using `-Djava.security.properties=/path/to/file`.\n+Note that two equals signs may be used, in which case the system configuration\n+is ignored and fully overridden by this file.\n+\n+`JSSProvider` behaves like the `SunPKCS11-NSS` provider, requiring a\n+configuration file to initialize JSS (and the `CryptoManager` object).\n+\n+`jss.cfg` takes the same `InitializationValues` parameters, except in a\n+properties file format.\n+\n+### JSS Config\n+\n+| property                           | `InitializationValues` member name  |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ddd122860255a0c0675b109139c21a3d6929c61"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjE0MTE5OnYy", "diffSide": "RIGHT", "path": "docs/usage/jssprovider.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowNToxNVrOGDlrkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowNToxNVrOGDlrkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNjI3Mg==", "bodyText": "If we remove InitializationValues from the colum header, this should be InitializationValues.fipsMode. Same thing for other ivs fields below.", "url": "https://github.com/dogtagpki/jss/pull/443#discussion_r406416272", "createdAt": "2020-04-09T19:05:15Z", "author": {"login": "edewata"}, "path": "docs/usage/jssprovider.md", "diffHunk": "@@ -0,0 +1,205 @@\n+# `Mozilla-JSS` Provider\n+\n+The `Mozilla-JSS` JCA-compatible Provider exposes most of the functionality\n+of JSS to external packages. This interface is the recommend interface most\n+developers should build against. However, once the dependencies are satisfied\n+and JSS's native component are available to the JVM, we still have to load\n+and initialize JSS.\n+\n+There are two routes to do this:\n+\n+ 1. Via the `CryptoManager` interface, _and_\n+ 2. Via `java.security`, directly loading the `JSSProvider`.\n+\n+\n+## Loading JSS via `CryptoManager`\n+\n+To load JSS from a `CryptoManager`, it is necessary to decide what level of\n+configuration is necessary. If you're happy with the defaults, it is\n+sufficient to only specify a NSS DB:\n+\n+```java\n+import org.mozilla.jss.CryptoManager;\n+\n+CryptoManager.initialize(\"/path/to/nss-db\");\n+```\n+\n+At this point, JSS will be initialized and can be used. However, a password\n+might still be required, so see the section below for providing password\n+callback handlers.\n+\n+However, certain default values might not work in all situations. For\n+instance, Candlepin expects other providers to be default, with the\n+Mozilla-JSS provider being the least-preferred provider. To do this, they'd\n+construct a `InitializationValues` instance and pass that to\n+`CryptoManager.initialize(...)`:\n+\n+```java\n+import org.mozilla.jss.InitializationValues;\n+\n+InitializationValues ivs = new InitializationValues(\"/path/to/nss-db\");\n+ivs.installJSSProviderFirst = false;\n+\n+CryptoManager.initialize(ivs);\n+```\n+\n+See the section below on other options available to configure.\n+\n+\n+### `InitializationValues` options\n+\n+There are two constructors for `InitializationValues`:\n+\n+ - Taking only a NSS DB directory. This was utilized above.\n+ - Taking a NSS DB directory, a prefix for the certificate database, a\n+   prefix for the key database, and the name of the secmod configuration.\n+\n+The latter is a more advanced use case and few individuals likely need to use\n+it. For more information, see the corresponding NSS documentation on these\n+values.\n+\n+The following initialization values are supported:\n+\n+ - `cooperate`: Sets 4 recommended options for applications that use both NSS\n+   and the Java SunPKCS11 provider. `boolean`, defaults to `false`.\n+ - `fipsMode`: The FIPS mode of the security library.\n+   `InitializationValues.FIPSMode` enum, defaults to `UNCHANGED`.\n+ - `forceOpen`: Continue to force initializations even if the databases\n+   cannot be opened. `boolean`, defaults to `false`.\n+ - `initializeJavaOnly`: If `true`, none of the underlying NSS components\n+   will be initialized. `boolean`, defaults to `false`.\n+ - `installJSSProvider`: Install the JSS crypto provider. `boolean`, defaults\n+   to `false`.\n+ - `installJSSProviderFirst`: Whether or not to initialize the JSS provider\n+   first. `boolean`, defaults to `false`.\n+ - `noCertDB`: Don't open the cert DB and key DB's, just initialize the\n+   volatile certdb. `boolean`, defaults to `false`.\n+ - `noModDB`: Don't open the security module DB, just initialize the PKCS #11\n+   module. `boolean`, defaults to `false`.\n+ - `noPK11Finalize`: never call `C_Finalize` on any PKCS#11 module. `boolean`,\n+   defaults to `false`.\n+ - `noRootInit`: Don't try to look for the root certs module automatically.\n+   `boolean`, defaults to `false`.\n+ - `ocspCheckingEnabled`: To have NSS check the OCSP responder for when\n+   verifying certificates, set this flags to `true`. `boolean`, defaults to\n+   `false`.\n+ - `ocspResponderCertNickname`: The nickname of the cert to trust (expected)\n+   to sign the OCSP responses. `String`, defaults to `null`.\n+ - `ocspResponderURL`: Specify the location and cert of the responder.\n+   `String`, defaults to `null`.\n+ - `optimizeSpace`: Use smaller tables and caches. `boolean`, defaults to\n+   `false`.\n+ - `PK11Reload`: Init `PK11Reload` to ignore the\n+   `CKR_CRYPTOKI_ALREADY_INITIALIZED` error when loading PKCS#11 modules.\n+   `boolean`, defaults to `false`.\n+ - `PK11ThreadSafe`: only load PKCS#11 modules that are thread-safe, ie. that\n+   support locking - either OS locking or NSS-provided locks. `boolean`,\n+   defaults to `false`.\n+ - `PKIXVerify`: Enable PKIX verify rather than the old cert library, to\n+   verify certificates. `boolean`, defaults to `false`.\n+ - `readOnly`: To open the databases in read-only mode, set this flag to\n+   true. `boolean`, defaults to `false`.\n+ - `removeSunProvider`: Remove the Sun crypto provider. `boolean`, defaults\n+   to `false`.\n+\n+### `PasswordCallback` handlers\n+\n+In order to authenticate against a PKCS#11 token or to the internal\n+certificate store, it is necessary to select a `PasswordCallback` handler.\n+By default this is a console-based `PasswordCallback` handler. This prompts\n+the user for the password via the Console. However, this is not appropriate\n+in all scenarios.\n+\n+Developers are expected to extend and implement this as desired by their\n+application.\n+\n+For example, to set a static `PasswordCallback` handler:\n+\n+```java\n+CryptoManager cm = CryptoManager.getInstance();\n+cm.setPasswordCallback(new Password(\"password\".toCharArray()));\n+```\n+\n+## Loading JSS via `java.security`\n+\n+You can directly add the `JSSProvider` by adding it to the `java.security`\n+file:\n+\n+```properties\n+security.provider.<n> = org.mozilla.jss.JSSProvider /path/to/jss.cfg\n+```\n+\n+There are two ways use this `java.security` file: by directly installing\n+it to the system or by using `-Djava.security.properties=/path/to/file`.\n+Note that two equals signs may be used, in which case the system configuration\n+is ignored and fully overridden by this file.\n+\n+`JSSProvider` behaves like the `SunPKCS11-NSS` provider, requiring a\n+configuration file to initialize JSS (and the `CryptoManager` object).\n+\n+`jss.cfg` takes the same `InitializationValues` parameters, except in a\n+properties file format.\n+\n+### JSS Config\n+\n+| property                           | `InitializationValues` member name  |\n+|------------------------------------|-------------------------------------|\n+| `jss.fips`                         | `ivs.fipsMode`                      |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ddd122860255a0c0675b109139c21a3d6929c61"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjE1ODc4OnYy", "diffSide": "RIGHT", "path": "docs/usage/jssprovider.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOToxMToxN1rOGDl3Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDowMzo0MFrOGDngBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxOTI2Ng==", "bodyText": "I don't think we actually need the jss. or nss. prefixes, but it's up to you.", "url": "https://github.com/dogtagpki/jss/pull/443#discussion_r406419266", "createdAt": "2020-04-09T19:11:17Z", "author": {"login": "edewata"}, "path": "docs/usage/jssprovider.md", "diffHunk": "@@ -0,0 +1,205 @@\n+# `Mozilla-JSS` Provider\n+\n+The `Mozilla-JSS` JCA-compatible Provider exposes most of the functionality\n+of JSS to external packages. This interface is the recommend interface most\n+developers should build against. However, once the dependencies are satisfied\n+and JSS's native component are available to the JVM, we still have to load\n+and initialize JSS.\n+\n+There are two routes to do this:\n+\n+ 1. Via the `CryptoManager` interface, _and_\n+ 2. Via `java.security`, directly loading the `JSSProvider`.\n+\n+\n+## Loading JSS via `CryptoManager`\n+\n+To load JSS from a `CryptoManager`, it is necessary to decide what level of\n+configuration is necessary. If you're happy with the defaults, it is\n+sufficient to only specify a NSS DB:\n+\n+```java\n+import org.mozilla.jss.CryptoManager;\n+\n+CryptoManager.initialize(\"/path/to/nss-db\");\n+```\n+\n+At this point, JSS will be initialized and can be used. However, a password\n+might still be required, so see the section below for providing password\n+callback handlers.\n+\n+However, certain default values might not work in all situations. For\n+instance, Candlepin expects other providers to be default, with the\n+Mozilla-JSS provider being the least-preferred provider. To do this, they'd\n+construct a `InitializationValues` instance and pass that to\n+`CryptoManager.initialize(...)`:\n+\n+```java\n+import org.mozilla.jss.InitializationValues;\n+\n+InitializationValues ivs = new InitializationValues(\"/path/to/nss-db\");\n+ivs.installJSSProviderFirst = false;\n+\n+CryptoManager.initialize(ivs);\n+```\n+\n+See the section below on other options available to configure.\n+\n+\n+### `InitializationValues` options\n+\n+There are two constructors for `InitializationValues`:\n+\n+ - Taking only a NSS DB directory. This was utilized above.\n+ - Taking a NSS DB directory, a prefix for the certificate database, a\n+   prefix for the key database, and the name of the secmod configuration.\n+\n+The latter is a more advanced use case and few individuals likely need to use\n+it. For more information, see the corresponding NSS documentation on these\n+values.\n+\n+The following initialization values are supported:\n+\n+ - `cooperate`: Sets 4 recommended options for applications that use both NSS\n+   and the Java SunPKCS11 provider. `boolean`, defaults to `false`.\n+ - `fipsMode`: The FIPS mode of the security library.\n+   `InitializationValues.FIPSMode` enum, defaults to `UNCHANGED`.\n+ - `forceOpen`: Continue to force initializations even if the databases\n+   cannot be opened. `boolean`, defaults to `false`.\n+ - `initializeJavaOnly`: If `true`, none of the underlying NSS components\n+   will be initialized. `boolean`, defaults to `false`.\n+ - `installJSSProvider`: Install the JSS crypto provider. `boolean`, defaults\n+   to `false`.\n+ - `installJSSProviderFirst`: Whether or not to initialize the JSS provider\n+   first. `boolean`, defaults to `false`.\n+ - `noCertDB`: Don't open the cert DB and key DB's, just initialize the\n+   volatile certdb. `boolean`, defaults to `false`.\n+ - `noModDB`: Don't open the security module DB, just initialize the PKCS #11\n+   module. `boolean`, defaults to `false`.\n+ - `noPK11Finalize`: never call `C_Finalize` on any PKCS#11 module. `boolean`,\n+   defaults to `false`.\n+ - `noRootInit`: Don't try to look for the root certs module automatically.\n+   `boolean`, defaults to `false`.\n+ - `ocspCheckingEnabled`: To have NSS check the OCSP responder for when\n+   verifying certificates, set this flags to `true`. `boolean`, defaults to\n+   `false`.\n+ - `ocspResponderCertNickname`: The nickname of the cert to trust (expected)\n+   to sign the OCSP responses. `String`, defaults to `null`.\n+ - `ocspResponderURL`: Specify the location and cert of the responder.\n+   `String`, defaults to `null`.\n+ - `optimizeSpace`: Use smaller tables and caches. `boolean`, defaults to\n+   `false`.\n+ - `PK11Reload`: Init `PK11Reload` to ignore the\n+   `CKR_CRYPTOKI_ALREADY_INITIALIZED` error when loading PKCS#11 modules.\n+   `boolean`, defaults to `false`.\n+ - `PK11ThreadSafe`: only load PKCS#11 modules that are thread-safe, ie. that\n+   support locking - either OS locking or NSS-provided locks. `boolean`,\n+   defaults to `false`.\n+ - `PKIXVerify`: Enable PKIX verify rather than the old cert library, to\n+   verify certificates. `boolean`, defaults to `false`.\n+ - `readOnly`: To open the databases in read-only mode, set this flag to\n+   true. `boolean`, defaults to `false`.\n+ - `removeSunProvider`: Remove the Sun crypto provider. `boolean`, defaults\n+   to `false`.\n+\n+### `PasswordCallback` handlers\n+\n+In order to authenticate against a PKCS#11 token or to the internal\n+certificate store, it is necessary to select a `PasswordCallback` handler.\n+By default this is a console-based `PasswordCallback` handler. This prompts\n+the user for the password via the Console. However, this is not appropriate\n+in all scenarios.\n+\n+Developers are expected to extend and implement this as desired by their\n+application.\n+\n+For example, to set a static `PasswordCallback` handler:\n+\n+```java\n+CryptoManager cm = CryptoManager.getInstance();\n+cm.setPasswordCallback(new Password(\"password\".toCharArray()));\n+```\n+\n+## Loading JSS via `java.security`\n+\n+You can directly add the `JSSProvider` by adding it to the `java.security`\n+file:\n+\n+```properties\n+security.provider.<n> = org.mozilla.jss.JSSProvider /path/to/jss.cfg\n+```\n+\n+There are two ways use this `java.security` file: by directly installing\n+it to the system or by using `-Djava.security.properties=/path/to/file`.\n+Note that two equals signs may be used, in which case the system configuration\n+is ignored and fully overridden by this file.\n+\n+`JSSProvider` behaves like the `SunPKCS11-NSS` provider, requiring a\n+configuration file to initialize JSS (and the `CryptoManager` object).\n+\n+`jss.cfg` takes the same `InitializationValues` parameters, except in a\n+properties file format.\n+\n+### JSS Config", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ddd122860255a0c0675b109139c21a3d6929c61"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0NjA4NQ==", "bodyText": "There's other subtrees (ocsp being the deeper one); I think it makes sense then to have a separate jss and nss subtree. For reference, the nss.cfg used by OpenJDK is flat:\nname = NSS\nnssLibraryDirectory = /usr/lib64\nnssDbMode = noDb\nattributes = compatibility\nhandleStartupErrors = ignoreMultipleInitialisation\n\nBut they also use camelCase and prefix NSS-specific attributes with nss.", "url": "https://github.com/dogtagpki/jss/pull/443#discussion_r406446085", "createdAt": "2020-04-09T20:03:40Z", "author": {"login": "cipherboy"}, "path": "docs/usage/jssprovider.md", "diffHunk": "@@ -0,0 +1,205 @@\n+# `Mozilla-JSS` Provider\n+\n+The `Mozilla-JSS` JCA-compatible Provider exposes most of the functionality\n+of JSS to external packages. This interface is the recommend interface most\n+developers should build against. However, once the dependencies are satisfied\n+and JSS's native component are available to the JVM, we still have to load\n+and initialize JSS.\n+\n+There are two routes to do this:\n+\n+ 1. Via the `CryptoManager` interface, _and_\n+ 2. Via `java.security`, directly loading the `JSSProvider`.\n+\n+\n+## Loading JSS via `CryptoManager`\n+\n+To load JSS from a `CryptoManager`, it is necessary to decide what level of\n+configuration is necessary. If you're happy with the defaults, it is\n+sufficient to only specify a NSS DB:\n+\n+```java\n+import org.mozilla.jss.CryptoManager;\n+\n+CryptoManager.initialize(\"/path/to/nss-db\");\n+```\n+\n+At this point, JSS will be initialized and can be used. However, a password\n+might still be required, so see the section below for providing password\n+callback handlers.\n+\n+However, certain default values might not work in all situations. For\n+instance, Candlepin expects other providers to be default, with the\n+Mozilla-JSS provider being the least-preferred provider. To do this, they'd\n+construct a `InitializationValues` instance and pass that to\n+`CryptoManager.initialize(...)`:\n+\n+```java\n+import org.mozilla.jss.InitializationValues;\n+\n+InitializationValues ivs = new InitializationValues(\"/path/to/nss-db\");\n+ivs.installJSSProviderFirst = false;\n+\n+CryptoManager.initialize(ivs);\n+```\n+\n+See the section below on other options available to configure.\n+\n+\n+### `InitializationValues` options\n+\n+There are two constructors for `InitializationValues`:\n+\n+ - Taking only a NSS DB directory. This was utilized above.\n+ - Taking a NSS DB directory, a prefix for the certificate database, a\n+   prefix for the key database, and the name of the secmod configuration.\n+\n+The latter is a more advanced use case and few individuals likely need to use\n+it. For more information, see the corresponding NSS documentation on these\n+values.\n+\n+The following initialization values are supported:\n+\n+ - `cooperate`: Sets 4 recommended options for applications that use both NSS\n+   and the Java SunPKCS11 provider. `boolean`, defaults to `false`.\n+ - `fipsMode`: The FIPS mode of the security library.\n+   `InitializationValues.FIPSMode` enum, defaults to `UNCHANGED`.\n+ - `forceOpen`: Continue to force initializations even if the databases\n+   cannot be opened. `boolean`, defaults to `false`.\n+ - `initializeJavaOnly`: If `true`, none of the underlying NSS components\n+   will be initialized. `boolean`, defaults to `false`.\n+ - `installJSSProvider`: Install the JSS crypto provider. `boolean`, defaults\n+   to `false`.\n+ - `installJSSProviderFirst`: Whether or not to initialize the JSS provider\n+   first. `boolean`, defaults to `false`.\n+ - `noCertDB`: Don't open the cert DB and key DB's, just initialize the\n+   volatile certdb. `boolean`, defaults to `false`.\n+ - `noModDB`: Don't open the security module DB, just initialize the PKCS #11\n+   module. `boolean`, defaults to `false`.\n+ - `noPK11Finalize`: never call `C_Finalize` on any PKCS#11 module. `boolean`,\n+   defaults to `false`.\n+ - `noRootInit`: Don't try to look for the root certs module automatically.\n+   `boolean`, defaults to `false`.\n+ - `ocspCheckingEnabled`: To have NSS check the OCSP responder for when\n+   verifying certificates, set this flags to `true`. `boolean`, defaults to\n+   `false`.\n+ - `ocspResponderCertNickname`: The nickname of the cert to trust (expected)\n+   to sign the OCSP responses. `String`, defaults to `null`.\n+ - `ocspResponderURL`: Specify the location and cert of the responder.\n+   `String`, defaults to `null`.\n+ - `optimizeSpace`: Use smaller tables and caches. `boolean`, defaults to\n+   `false`.\n+ - `PK11Reload`: Init `PK11Reload` to ignore the\n+   `CKR_CRYPTOKI_ALREADY_INITIALIZED` error when loading PKCS#11 modules.\n+   `boolean`, defaults to `false`.\n+ - `PK11ThreadSafe`: only load PKCS#11 modules that are thread-safe, ie. that\n+   support locking - either OS locking or NSS-provided locks. `boolean`,\n+   defaults to `false`.\n+ - `PKIXVerify`: Enable PKIX verify rather than the old cert library, to\n+   verify certificates. `boolean`, defaults to `false`.\n+ - `readOnly`: To open the databases in read-only mode, set this flag to\n+   true. `boolean`, defaults to `false`.\n+ - `removeSunProvider`: Remove the Sun crypto provider. `boolean`, defaults\n+   to `false`.\n+\n+### `PasswordCallback` handlers\n+\n+In order to authenticate against a PKCS#11 token or to the internal\n+certificate store, it is necessary to select a `PasswordCallback` handler.\n+By default this is a console-based `PasswordCallback` handler. This prompts\n+the user for the password via the Console. However, this is not appropriate\n+in all scenarios.\n+\n+Developers are expected to extend and implement this as desired by their\n+application.\n+\n+For example, to set a static `PasswordCallback` handler:\n+\n+```java\n+CryptoManager cm = CryptoManager.getInstance();\n+cm.setPasswordCallback(new Password(\"password\".toCharArray()));\n+```\n+\n+## Loading JSS via `java.security`\n+\n+You can directly add the `JSSProvider` by adding it to the `java.security`\n+file:\n+\n+```properties\n+security.provider.<n> = org.mozilla.jss.JSSProvider /path/to/jss.cfg\n+```\n+\n+There are two ways use this `java.security` file: by directly installing\n+it to the system or by using `-Djava.security.properties=/path/to/file`.\n+Note that two equals signs may be used, in which case the system configuration\n+is ignored and fully overridden by this file.\n+\n+`JSSProvider` behaves like the `SunPKCS11-NSS` provider, requiring a\n+configuration file to initialize JSS (and the `CryptoManager` object).\n+\n+`jss.cfg` takes the same `InitializationValues` parameters, except in a\n+properties file format.\n+\n+### JSS Config", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxOTI2Ng=="}, "originalCommit": {"oid": "5ddd122860255a0c0675b109139c21a3d6929c61"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjE2MzY0OnYy", "diffSide": "RIGHT", "path": "docs/usage/jssprovider.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOToxMjo0OVrOGDl6Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOToxMjo0OVrOGDl6Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyMDA1NQ==", "bodyText": "Should we clarify that there is no changes required?", "url": "https://github.com/dogtagpki/jss/pull/443#discussion_r406420055", "createdAt": "2020-04-09T19:12:49Z", "author": {"login": "edewata"}, "path": "docs/usage/jssprovider.md", "diffHunk": "@@ -0,0 +1,205 @@\n+# `Mozilla-JSS` Provider\n+\n+The `Mozilla-JSS` JCA-compatible Provider exposes most of the functionality\n+of JSS to external packages. This interface is the recommend interface most\n+developers should build against. However, once the dependencies are satisfied\n+and JSS's native component are available to the JVM, we still have to load\n+and initialize JSS.\n+\n+There are two routes to do this:\n+\n+ 1. Via the `CryptoManager` interface, _and_\n+ 2. Via `java.security`, directly loading the `JSSProvider`.\n+\n+\n+## Loading JSS via `CryptoManager`\n+\n+To load JSS from a `CryptoManager`, it is necessary to decide what level of\n+configuration is necessary. If you're happy with the defaults, it is\n+sufficient to only specify a NSS DB:\n+\n+```java\n+import org.mozilla.jss.CryptoManager;\n+\n+CryptoManager.initialize(\"/path/to/nss-db\");\n+```\n+\n+At this point, JSS will be initialized and can be used. However, a password\n+might still be required, so see the section below for providing password\n+callback handlers.\n+\n+However, certain default values might not work in all situations. For\n+instance, Candlepin expects other providers to be default, with the\n+Mozilla-JSS provider being the least-preferred provider. To do this, they'd\n+construct a `InitializationValues` instance and pass that to\n+`CryptoManager.initialize(...)`:\n+\n+```java\n+import org.mozilla.jss.InitializationValues;\n+\n+InitializationValues ivs = new InitializationValues(\"/path/to/nss-db\");\n+ivs.installJSSProviderFirst = false;\n+\n+CryptoManager.initialize(ivs);\n+```\n+\n+See the section below on other options available to configure.\n+\n+\n+### `InitializationValues` options\n+\n+There are two constructors for `InitializationValues`:\n+\n+ - Taking only a NSS DB directory. This was utilized above.\n+ - Taking a NSS DB directory, a prefix for the certificate database, a\n+   prefix for the key database, and the name of the secmod configuration.\n+\n+The latter is a more advanced use case and few individuals likely need to use\n+it. For more information, see the corresponding NSS documentation on these\n+values.\n+\n+The following initialization values are supported:\n+\n+ - `cooperate`: Sets 4 recommended options for applications that use both NSS\n+   and the Java SunPKCS11 provider. `boolean`, defaults to `false`.\n+ - `fipsMode`: The FIPS mode of the security library.\n+   `InitializationValues.FIPSMode` enum, defaults to `UNCHANGED`.\n+ - `forceOpen`: Continue to force initializations even if the databases\n+   cannot be opened. `boolean`, defaults to `false`.\n+ - `initializeJavaOnly`: If `true`, none of the underlying NSS components\n+   will be initialized. `boolean`, defaults to `false`.\n+ - `installJSSProvider`: Install the JSS crypto provider. `boolean`, defaults\n+   to `false`.\n+ - `installJSSProviderFirst`: Whether or not to initialize the JSS provider\n+   first. `boolean`, defaults to `false`.\n+ - `noCertDB`: Don't open the cert DB and key DB's, just initialize the\n+   volatile certdb. `boolean`, defaults to `false`.\n+ - `noModDB`: Don't open the security module DB, just initialize the PKCS #11\n+   module. `boolean`, defaults to `false`.\n+ - `noPK11Finalize`: never call `C_Finalize` on any PKCS#11 module. `boolean`,\n+   defaults to `false`.\n+ - `noRootInit`: Don't try to look for the root certs module automatically.\n+   `boolean`, defaults to `false`.\n+ - `ocspCheckingEnabled`: To have NSS check the OCSP responder for when\n+   verifying certificates, set this flags to `true`. `boolean`, defaults to\n+   `false`.\n+ - `ocspResponderCertNickname`: The nickname of the cert to trust (expected)\n+   to sign the OCSP responses. `String`, defaults to `null`.\n+ - `ocspResponderURL`: Specify the location and cert of the responder.\n+   `String`, defaults to `null`.\n+ - `optimizeSpace`: Use smaller tables and caches. `boolean`, defaults to\n+   `false`.\n+ - `PK11Reload`: Init `PK11Reload` to ignore the\n+   `CKR_CRYPTOKI_ALREADY_INITIALIZED` error when loading PKCS#11 modules.\n+   `boolean`, defaults to `false`.\n+ - `PK11ThreadSafe`: only load PKCS#11 modules that are thread-safe, ie. that\n+   support locking - either OS locking or NSS-provided locks. `boolean`,\n+   defaults to `false`.\n+ - `PKIXVerify`: Enable PKIX verify rather than the old cert library, to\n+   verify certificates. `boolean`, defaults to `false`.\n+ - `readOnly`: To open the databases in read-only mode, set this flag to\n+   true. `boolean`, defaults to `false`.\n+ - `removeSunProvider`: Remove the Sun crypto provider. `boolean`, defaults\n+   to `false`.\n+\n+### `PasswordCallback` handlers\n+\n+In order to authenticate against a PKCS#11 token or to the internal\n+certificate store, it is necessary to select a `PasswordCallback` handler.\n+By default this is a console-based `PasswordCallback` handler. This prompts\n+the user for the password via the Console. However, this is not appropriate\n+in all scenarios.\n+\n+Developers are expected to extend and implement this as desired by their\n+application.\n+\n+For example, to set a static `PasswordCallback` handler:\n+\n+```java\n+CryptoManager cm = CryptoManager.getInstance();\n+cm.setPasswordCallback(new Password(\"password\".toCharArray()));\n+```\n+\n+## Loading JSS via `java.security`\n+\n+You can directly add the `JSSProvider` by adding it to the `java.security`\n+file:\n+\n+```properties\n+security.provider.<n> = org.mozilla.jss.JSSProvider /path/to/jss.cfg\n+```\n+\n+There are two ways use this `java.security` file: by directly installing\n+it to the system or by using `-Djava.security.properties=/path/to/file`.\n+Note that two equals signs may be used, in which case the system configuration\n+is ignored and fully overridden by this file.\n+\n+`JSSProvider` behaves like the `SunPKCS11-NSS` provider, requiring a\n+configuration file to initialize JSS (and the `CryptoManager` object).\n+\n+`jss.cfg` takes the same `InitializationValues` parameters, except in a\n+properties file format.\n+\n+### JSS Config\n+\n+| property                           | `InitializationValues` member name  |\n+|------------------------------------|-------------------------------------|\n+| `jss.fips`                         | `ivs.fipsMode`                      |\n+| `jss.ocsp.enabled`                 | `ivs.ocspCheckingEnabled`           |\n+| `jss.ocsp.policy`                  | `CryptoManager.setOCSPPolicy`       |\n+| `jss.ocsp.responder.cert_nickname` | `ivs.ocspResponderCertNickname`     |\n+| `jss.ocsp.responder.url`           | `ivs.ocspResponderURL`              |\n+| `jss.password`                     | `CryptoManager.setPasswordCallback` |\n+| `nss.config_dir`                   | `ivs.configDir`                     |\n+| `nss.cert_prefix`                  | `ivs.certPrefix`                    |\n+| `nss.cooperate`                    | `ivs.cooperate`                     |\n+| `nss.force_open`                   | `ivs.forceOpen`                     |\n+| `nss.java_only`                    | `ivs.javaOnly`                      |\n+| `nss.key_prefix`                   | `ivs.keyPrefix`                     |\n+| `nss.no_cert_db`                   | `ivs.noCertDB`                      |\n+| `nss.no_mod_db`                    | `ivs.noModDB`                       |\n+| `nss.no_pk11_finalize`             | `ivs.noPK11Finalize`                |\n+| `nss.no_root_init`                 | `ivs.noRootInit`                    |\n+| `nss.optimizeSpace`                | `ivs.optimizeSpace`                 |\n+| `nss.pkix_verify`                  | `ivs.pkixVerify`                    |\n+| `nss.pk11_reload`                  | `ivs.PK11Reload`                    |\n+| `nss.pk11_thread_safe`             | `ivs.PK11ThreadSafe`                |\n+| `nss.read_only`                    | `ivs.readOnly`                      |\n+| `nss.secmod_name`                  | `ivs.secmodName`                    |\n+\n+Note that the parameters `installJSSProvider`, `removeSunProvider`, and\n+`installJSSProviderFirst` are ignored, as they can be controlled by directly\n+manipulating the `java.security` file.\n+\n+## Upgrading Old Code\n+\n+There are two paths to upgrade an older code base to a newer JSS version,\n+using the JSSProvider interface:\n+\n+ 1. Continue using `CryptoManager.initialize(...)` as before. This gives the\n+    local application the most control over the NSS DB path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ddd122860255a0c0675b109139c21a3d6929c61"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjIzNDMwOnYy", "diffSide": "RIGHT", "path": "docs/usage/jssprovider.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozNToxNlrOGDmnBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo1MDo0M1rOGF2IHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMTQ5Mw==", "bodyText": "Not sure it's necessary to tell people to change their code this way.\nTheoretically people can continue to use the old API which will work\nwith the old and the new JSS:\nCryptoManager.initialize(...);\nCryptoManager cm = CryptoManager.getInstance();\n\nOnce they no longer need to support the old JSS they can simply drop\nCryptoManager.initialize() and switch to java.security.", "url": "https://github.com/dogtagpki/jss/pull/443#discussion_r406431493", "createdAt": "2020-04-09T19:35:16Z", "author": {"login": "edewata"}, "path": "docs/usage/jssprovider.md", "diffHunk": "@@ -0,0 +1,205 @@\n+# `Mozilla-JSS` Provider\n+\n+The `Mozilla-JSS` JCA-compatible Provider exposes most of the functionality\n+of JSS to external packages. This interface is the recommend interface most\n+developers should build against. However, once the dependencies are satisfied\n+and JSS's native component are available to the JVM, we still have to load\n+and initialize JSS.\n+\n+There are two routes to do this:\n+\n+ 1. Via the `CryptoManager` interface, _and_\n+ 2. Via `java.security`, directly loading the `JSSProvider`.\n+\n+\n+## Loading JSS via `CryptoManager`\n+\n+To load JSS from a `CryptoManager`, it is necessary to decide what level of\n+configuration is necessary. If you're happy with the defaults, it is\n+sufficient to only specify a NSS DB:\n+\n+```java\n+import org.mozilla.jss.CryptoManager;\n+\n+CryptoManager.initialize(\"/path/to/nss-db\");\n+```\n+\n+At this point, JSS will be initialized and can be used. However, a password\n+might still be required, so see the section below for providing password\n+callback handlers.\n+\n+However, certain default values might not work in all situations. For\n+instance, Candlepin expects other providers to be default, with the\n+Mozilla-JSS provider being the least-preferred provider. To do this, they'd\n+construct a `InitializationValues` instance and pass that to\n+`CryptoManager.initialize(...)`:\n+\n+```java\n+import org.mozilla.jss.InitializationValues;\n+\n+InitializationValues ivs = new InitializationValues(\"/path/to/nss-db\");\n+ivs.installJSSProviderFirst = false;\n+\n+CryptoManager.initialize(ivs);\n+```\n+\n+See the section below on other options available to configure.\n+\n+\n+### `InitializationValues` options\n+\n+There are two constructors for `InitializationValues`:\n+\n+ - Taking only a NSS DB directory. This was utilized above.\n+ - Taking a NSS DB directory, a prefix for the certificate database, a\n+   prefix for the key database, and the name of the secmod configuration.\n+\n+The latter is a more advanced use case and few individuals likely need to use\n+it. For more information, see the corresponding NSS documentation on these\n+values.\n+\n+The following initialization values are supported:\n+\n+ - `cooperate`: Sets 4 recommended options for applications that use both NSS\n+   and the Java SunPKCS11 provider. `boolean`, defaults to `false`.\n+ - `fipsMode`: The FIPS mode of the security library.\n+   `InitializationValues.FIPSMode` enum, defaults to `UNCHANGED`.\n+ - `forceOpen`: Continue to force initializations even if the databases\n+   cannot be opened. `boolean`, defaults to `false`.\n+ - `initializeJavaOnly`: If `true`, none of the underlying NSS components\n+   will be initialized. `boolean`, defaults to `false`.\n+ - `installJSSProvider`: Install the JSS crypto provider. `boolean`, defaults\n+   to `false`.\n+ - `installJSSProviderFirst`: Whether or not to initialize the JSS provider\n+   first. `boolean`, defaults to `false`.\n+ - `noCertDB`: Don't open the cert DB and key DB's, just initialize the\n+   volatile certdb. `boolean`, defaults to `false`.\n+ - `noModDB`: Don't open the security module DB, just initialize the PKCS #11\n+   module. `boolean`, defaults to `false`.\n+ - `noPK11Finalize`: never call `C_Finalize` on any PKCS#11 module. `boolean`,\n+   defaults to `false`.\n+ - `noRootInit`: Don't try to look for the root certs module automatically.\n+   `boolean`, defaults to `false`.\n+ - `ocspCheckingEnabled`: To have NSS check the OCSP responder for when\n+   verifying certificates, set this flags to `true`. `boolean`, defaults to\n+   `false`.\n+ - `ocspResponderCertNickname`: The nickname of the cert to trust (expected)\n+   to sign the OCSP responses. `String`, defaults to `null`.\n+ - `ocspResponderURL`: Specify the location and cert of the responder.\n+   `String`, defaults to `null`.\n+ - `optimizeSpace`: Use smaller tables and caches. `boolean`, defaults to\n+   `false`.\n+ - `PK11Reload`: Init `PK11Reload` to ignore the\n+   `CKR_CRYPTOKI_ALREADY_INITIALIZED` error when loading PKCS#11 modules.\n+   `boolean`, defaults to `false`.\n+ - `PK11ThreadSafe`: only load PKCS#11 modules that are thread-safe, ie. that\n+   support locking - either OS locking or NSS-provided locks. `boolean`,\n+   defaults to `false`.\n+ - `PKIXVerify`: Enable PKIX verify rather than the old cert library, to\n+   verify certificates. `boolean`, defaults to `false`.\n+ - `readOnly`: To open the databases in read-only mode, set this flag to\n+   true. `boolean`, defaults to `false`.\n+ - `removeSunProvider`: Remove the Sun crypto provider. `boolean`, defaults\n+   to `false`.\n+\n+### `PasswordCallback` handlers\n+\n+In order to authenticate against a PKCS#11 token or to the internal\n+certificate store, it is necessary to select a `PasswordCallback` handler.\n+By default this is a console-based `PasswordCallback` handler. This prompts\n+the user for the password via the Console. However, this is not appropriate\n+in all scenarios.\n+\n+Developers are expected to extend and implement this as desired by their\n+application.\n+\n+For example, to set a static `PasswordCallback` handler:\n+\n+```java\n+CryptoManager cm = CryptoManager.getInstance();\n+cm.setPasswordCallback(new Password(\"password\".toCharArray()));\n+```\n+\n+## Loading JSS via `java.security`\n+\n+You can directly add the `JSSProvider` by adding it to the `java.security`\n+file:\n+\n+```properties\n+security.provider.<n> = org.mozilla.jss.JSSProvider /path/to/jss.cfg\n+```\n+\n+There are two ways use this `java.security` file: by directly installing\n+it to the system or by using `-Djava.security.properties=/path/to/file`.\n+Note that two equals signs may be used, in which case the system configuration\n+is ignored and fully overridden by this file.\n+\n+`JSSProvider` behaves like the `SunPKCS11-NSS` provider, requiring a\n+configuration file to initialize JSS (and the `CryptoManager` object).\n+\n+`jss.cfg` takes the same `InitializationValues` parameters, except in a\n+properties file format.\n+\n+### JSS Config\n+\n+| property                           | `InitializationValues` member name  |\n+|------------------------------------|-------------------------------------|\n+| `jss.fips`                         | `ivs.fipsMode`                      |\n+| `jss.ocsp.enabled`                 | `ivs.ocspCheckingEnabled`           |\n+| `jss.ocsp.policy`                  | `CryptoManager.setOCSPPolicy`       |\n+| `jss.ocsp.responder.cert_nickname` | `ivs.ocspResponderCertNickname`     |\n+| `jss.ocsp.responder.url`           | `ivs.ocspResponderURL`              |\n+| `jss.password`                     | `CryptoManager.setPasswordCallback` |\n+| `nss.config_dir`                   | `ivs.configDir`                     |\n+| `nss.cert_prefix`                  | `ivs.certPrefix`                    |\n+| `nss.cooperate`                    | `ivs.cooperate`                     |\n+| `nss.force_open`                   | `ivs.forceOpen`                     |\n+| `nss.java_only`                    | `ivs.javaOnly`                      |\n+| `nss.key_prefix`                   | `ivs.keyPrefix`                     |\n+| `nss.no_cert_db`                   | `ivs.noCertDB`                      |\n+| `nss.no_mod_db`                    | `ivs.noModDB`                       |\n+| `nss.no_pk11_finalize`             | `ivs.noPK11Finalize`                |\n+| `nss.no_root_init`                 | `ivs.noRootInit`                    |\n+| `nss.optimizeSpace`                | `ivs.optimizeSpace`                 |\n+| `nss.pkix_verify`                  | `ivs.pkixVerify`                    |\n+| `nss.pk11_reload`                  | `ivs.PK11Reload`                    |\n+| `nss.pk11_thread_safe`             | `ivs.PK11ThreadSafe`                |\n+| `nss.read_only`                    | `ivs.readOnly`                      |\n+| `nss.secmod_name`                  | `ivs.secmodName`                    |\n+\n+Note that the parameters `installJSSProvider`, `removeSunProvider`, and\n+`installJSSProviderFirst` are ignored, as they can be controlled by directly\n+manipulating the `java.security` file.\n+\n+## Upgrading Old Code\n+\n+There are two paths to upgrade an older code base to a newer JSS version,\n+using the JSSProvider interface:\n+\n+ 1. Continue using `CryptoManager.initialize(...)` as before. This gives the\n+    local application the most control over the NSS DB path.\n+ 2. Switch to using `java.security`-based configuration (either via local\n+    policy with `-Djava.security.properties=/path` specified on the JVM\n+    command line or via system-wide policy by modifying the\n+    `$JAVA_HOME/conf/security/java.security` file). You can then remove the\n+    call to `CryptoManager.initialize(...)`. If this call is necessary for\n+    backwards-compatibility reasons (to support multiple JSS versions), it\n+    would be sufficient to check the value of `CryptoManager.getInstance(...)`\n+    before configuration:\n+\n+    ```java\n+    try {\n+        cm = CryptoManager.getInstance();\n+    } catch (NotInitializedException nie) {\n+        CryptoManager.initialize(...);\n+        cm = CryptoManager.getInstance();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ddd122860255a0c0675b109139c21a3d6929c61"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4Mjg3OQ==", "bodyText": "This is the section under java.security. Presumably, if they're using this code snippet, they'd prefer a java.security JSS instance over a CryptoManager instance. This describe a fallback when either JSS doesn't support java.security or JSS wasn't initialized that way.\nI've added a comment saying they could throw this exception instead of catching it.\nI don't think its reasonable to assume everyone is going to switch to java.security right away, and those that will, won't necessarily support it consistently.", "url": "https://github.com/dogtagpki/jss/pull/443#discussion_r408782879", "createdAt": "2020-04-15T11:50:43Z", "author": {"login": "cipherboy"}, "path": "docs/usage/jssprovider.md", "diffHunk": "@@ -0,0 +1,205 @@\n+# `Mozilla-JSS` Provider\n+\n+The `Mozilla-JSS` JCA-compatible Provider exposes most of the functionality\n+of JSS to external packages. This interface is the recommend interface most\n+developers should build against. However, once the dependencies are satisfied\n+and JSS's native component are available to the JVM, we still have to load\n+and initialize JSS.\n+\n+There are two routes to do this:\n+\n+ 1. Via the `CryptoManager` interface, _and_\n+ 2. Via `java.security`, directly loading the `JSSProvider`.\n+\n+\n+## Loading JSS via `CryptoManager`\n+\n+To load JSS from a `CryptoManager`, it is necessary to decide what level of\n+configuration is necessary. If you're happy with the defaults, it is\n+sufficient to only specify a NSS DB:\n+\n+```java\n+import org.mozilla.jss.CryptoManager;\n+\n+CryptoManager.initialize(\"/path/to/nss-db\");\n+```\n+\n+At this point, JSS will be initialized and can be used. However, a password\n+might still be required, so see the section below for providing password\n+callback handlers.\n+\n+However, certain default values might not work in all situations. For\n+instance, Candlepin expects other providers to be default, with the\n+Mozilla-JSS provider being the least-preferred provider. To do this, they'd\n+construct a `InitializationValues` instance and pass that to\n+`CryptoManager.initialize(...)`:\n+\n+```java\n+import org.mozilla.jss.InitializationValues;\n+\n+InitializationValues ivs = new InitializationValues(\"/path/to/nss-db\");\n+ivs.installJSSProviderFirst = false;\n+\n+CryptoManager.initialize(ivs);\n+```\n+\n+See the section below on other options available to configure.\n+\n+\n+### `InitializationValues` options\n+\n+There are two constructors for `InitializationValues`:\n+\n+ - Taking only a NSS DB directory. This was utilized above.\n+ - Taking a NSS DB directory, a prefix for the certificate database, a\n+   prefix for the key database, and the name of the secmod configuration.\n+\n+The latter is a more advanced use case and few individuals likely need to use\n+it. For more information, see the corresponding NSS documentation on these\n+values.\n+\n+The following initialization values are supported:\n+\n+ - `cooperate`: Sets 4 recommended options for applications that use both NSS\n+   and the Java SunPKCS11 provider. `boolean`, defaults to `false`.\n+ - `fipsMode`: The FIPS mode of the security library.\n+   `InitializationValues.FIPSMode` enum, defaults to `UNCHANGED`.\n+ - `forceOpen`: Continue to force initializations even if the databases\n+   cannot be opened. `boolean`, defaults to `false`.\n+ - `initializeJavaOnly`: If `true`, none of the underlying NSS components\n+   will be initialized. `boolean`, defaults to `false`.\n+ - `installJSSProvider`: Install the JSS crypto provider. `boolean`, defaults\n+   to `false`.\n+ - `installJSSProviderFirst`: Whether or not to initialize the JSS provider\n+   first. `boolean`, defaults to `false`.\n+ - `noCertDB`: Don't open the cert DB and key DB's, just initialize the\n+   volatile certdb. `boolean`, defaults to `false`.\n+ - `noModDB`: Don't open the security module DB, just initialize the PKCS #11\n+   module. `boolean`, defaults to `false`.\n+ - `noPK11Finalize`: never call `C_Finalize` on any PKCS#11 module. `boolean`,\n+   defaults to `false`.\n+ - `noRootInit`: Don't try to look for the root certs module automatically.\n+   `boolean`, defaults to `false`.\n+ - `ocspCheckingEnabled`: To have NSS check the OCSP responder for when\n+   verifying certificates, set this flags to `true`. `boolean`, defaults to\n+   `false`.\n+ - `ocspResponderCertNickname`: The nickname of the cert to trust (expected)\n+   to sign the OCSP responses. `String`, defaults to `null`.\n+ - `ocspResponderURL`: Specify the location and cert of the responder.\n+   `String`, defaults to `null`.\n+ - `optimizeSpace`: Use smaller tables and caches. `boolean`, defaults to\n+   `false`.\n+ - `PK11Reload`: Init `PK11Reload` to ignore the\n+   `CKR_CRYPTOKI_ALREADY_INITIALIZED` error when loading PKCS#11 modules.\n+   `boolean`, defaults to `false`.\n+ - `PK11ThreadSafe`: only load PKCS#11 modules that are thread-safe, ie. that\n+   support locking - either OS locking or NSS-provided locks. `boolean`,\n+   defaults to `false`.\n+ - `PKIXVerify`: Enable PKIX verify rather than the old cert library, to\n+   verify certificates. `boolean`, defaults to `false`.\n+ - `readOnly`: To open the databases in read-only mode, set this flag to\n+   true. `boolean`, defaults to `false`.\n+ - `removeSunProvider`: Remove the Sun crypto provider. `boolean`, defaults\n+   to `false`.\n+\n+### `PasswordCallback` handlers\n+\n+In order to authenticate against a PKCS#11 token or to the internal\n+certificate store, it is necessary to select a `PasswordCallback` handler.\n+By default this is a console-based `PasswordCallback` handler. This prompts\n+the user for the password via the Console. However, this is not appropriate\n+in all scenarios.\n+\n+Developers are expected to extend and implement this as desired by their\n+application.\n+\n+For example, to set a static `PasswordCallback` handler:\n+\n+```java\n+CryptoManager cm = CryptoManager.getInstance();\n+cm.setPasswordCallback(new Password(\"password\".toCharArray()));\n+```\n+\n+## Loading JSS via `java.security`\n+\n+You can directly add the `JSSProvider` by adding it to the `java.security`\n+file:\n+\n+```properties\n+security.provider.<n> = org.mozilla.jss.JSSProvider /path/to/jss.cfg\n+```\n+\n+There are two ways use this `java.security` file: by directly installing\n+it to the system or by using `-Djava.security.properties=/path/to/file`.\n+Note that two equals signs may be used, in which case the system configuration\n+is ignored and fully overridden by this file.\n+\n+`JSSProvider` behaves like the `SunPKCS11-NSS` provider, requiring a\n+configuration file to initialize JSS (and the `CryptoManager` object).\n+\n+`jss.cfg` takes the same `InitializationValues` parameters, except in a\n+properties file format.\n+\n+### JSS Config\n+\n+| property                           | `InitializationValues` member name  |\n+|------------------------------------|-------------------------------------|\n+| `jss.fips`                         | `ivs.fipsMode`                      |\n+| `jss.ocsp.enabled`                 | `ivs.ocspCheckingEnabled`           |\n+| `jss.ocsp.policy`                  | `CryptoManager.setOCSPPolicy`       |\n+| `jss.ocsp.responder.cert_nickname` | `ivs.ocspResponderCertNickname`     |\n+| `jss.ocsp.responder.url`           | `ivs.ocspResponderURL`              |\n+| `jss.password`                     | `CryptoManager.setPasswordCallback` |\n+| `nss.config_dir`                   | `ivs.configDir`                     |\n+| `nss.cert_prefix`                  | `ivs.certPrefix`                    |\n+| `nss.cooperate`                    | `ivs.cooperate`                     |\n+| `nss.force_open`                   | `ivs.forceOpen`                     |\n+| `nss.java_only`                    | `ivs.javaOnly`                      |\n+| `nss.key_prefix`                   | `ivs.keyPrefix`                     |\n+| `nss.no_cert_db`                   | `ivs.noCertDB`                      |\n+| `nss.no_mod_db`                    | `ivs.noModDB`                       |\n+| `nss.no_pk11_finalize`             | `ivs.noPK11Finalize`                |\n+| `nss.no_root_init`                 | `ivs.noRootInit`                    |\n+| `nss.optimizeSpace`                | `ivs.optimizeSpace`                 |\n+| `nss.pkix_verify`                  | `ivs.pkixVerify`                    |\n+| `nss.pk11_reload`                  | `ivs.PK11Reload`                    |\n+| `nss.pk11_thread_safe`             | `ivs.PK11ThreadSafe`                |\n+| `nss.read_only`                    | `ivs.readOnly`                      |\n+| `nss.secmod_name`                  | `ivs.secmodName`                    |\n+\n+Note that the parameters `installJSSProvider`, `removeSunProvider`, and\n+`installJSSProviderFirst` are ignored, as they can be controlled by directly\n+manipulating the `java.security` file.\n+\n+## Upgrading Old Code\n+\n+There are two paths to upgrade an older code base to a newer JSS version,\n+using the JSSProvider interface:\n+\n+ 1. Continue using `CryptoManager.initialize(...)` as before. This gives the\n+    local application the most control over the NSS DB path.\n+ 2. Switch to using `java.security`-based configuration (either via local\n+    policy with `-Djava.security.properties=/path` specified on the JVM\n+    command line or via system-wide policy by modifying the\n+    `$JAVA_HOME/conf/security/java.security` file). You can then remove the\n+    call to `CryptoManager.initialize(...)`. If this call is necessary for\n+    backwards-compatibility reasons (to support multiple JSS versions), it\n+    would be sufficient to check the value of `CryptoManager.getInstance(...)`\n+    before configuration:\n+\n+    ```java\n+    try {\n+        cm = CryptoManager.getInstance();\n+    } catch (NotInitializedException nie) {\n+        CryptoManager.initialize(...);\n+        cm = CryptoManager.getInstance();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMTQ5Mw=="}, "originalCommit": {"oid": "5ddd122860255a0c0675b109139c21a3d6929c61"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjIzODQ5OnYy", "diffSide": "RIGHT", "path": "docs/usage/jssprovider.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozNjo0NFrOGDmprw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozNjo0NFrOGDmprw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMjE3NQ==", "bodyText": "initialized", "url": "https://github.com/dogtagpki/jss/pull/443#discussion_r406432175", "createdAt": "2020-04-09T19:36:44Z", "author": {"login": "edewata"}, "path": "docs/usage/jssprovider.md", "diffHunk": "@@ -0,0 +1,205 @@\n+# `Mozilla-JSS` Provider\n+\n+The `Mozilla-JSS` JCA-compatible Provider exposes most of the functionality\n+of JSS to external packages. This interface is the recommend interface most\n+developers should build against. However, once the dependencies are satisfied\n+and JSS's native component are available to the JVM, we still have to load\n+and initialize JSS.\n+\n+There are two routes to do this:\n+\n+ 1. Via the `CryptoManager` interface, _and_\n+ 2. Via `java.security`, directly loading the `JSSProvider`.\n+\n+\n+## Loading JSS via `CryptoManager`\n+\n+To load JSS from a `CryptoManager`, it is necessary to decide what level of\n+configuration is necessary. If you're happy with the defaults, it is\n+sufficient to only specify a NSS DB:\n+\n+```java\n+import org.mozilla.jss.CryptoManager;\n+\n+CryptoManager.initialize(\"/path/to/nss-db\");\n+```\n+\n+At this point, JSS will be initialized and can be used. However, a password\n+might still be required, so see the section below for providing password\n+callback handlers.\n+\n+However, certain default values might not work in all situations. For\n+instance, Candlepin expects other providers to be default, with the\n+Mozilla-JSS provider being the least-preferred provider. To do this, they'd\n+construct a `InitializationValues` instance and pass that to\n+`CryptoManager.initialize(...)`:\n+\n+```java\n+import org.mozilla.jss.InitializationValues;\n+\n+InitializationValues ivs = new InitializationValues(\"/path/to/nss-db\");\n+ivs.installJSSProviderFirst = false;\n+\n+CryptoManager.initialize(ivs);\n+```\n+\n+See the section below on other options available to configure.\n+\n+\n+### `InitializationValues` options\n+\n+There are two constructors for `InitializationValues`:\n+\n+ - Taking only a NSS DB directory. This was utilized above.\n+ - Taking a NSS DB directory, a prefix for the certificate database, a\n+   prefix for the key database, and the name of the secmod configuration.\n+\n+The latter is a more advanced use case and few individuals likely need to use\n+it. For more information, see the corresponding NSS documentation on these\n+values.\n+\n+The following initialization values are supported:\n+\n+ - `cooperate`: Sets 4 recommended options for applications that use both NSS\n+   and the Java SunPKCS11 provider. `boolean`, defaults to `false`.\n+ - `fipsMode`: The FIPS mode of the security library.\n+   `InitializationValues.FIPSMode` enum, defaults to `UNCHANGED`.\n+ - `forceOpen`: Continue to force initializations even if the databases\n+   cannot be opened. `boolean`, defaults to `false`.\n+ - `initializeJavaOnly`: If `true`, none of the underlying NSS components\n+   will be initialized. `boolean`, defaults to `false`.\n+ - `installJSSProvider`: Install the JSS crypto provider. `boolean`, defaults\n+   to `false`.\n+ - `installJSSProviderFirst`: Whether or not to initialize the JSS provider\n+   first. `boolean`, defaults to `false`.\n+ - `noCertDB`: Don't open the cert DB and key DB's, just initialize the\n+   volatile certdb. `boolean`, defaults to `false`.\n+ - `noModDB`: Don't open the security module DB, just initialize the PKCS #11\n+   module. `boolean`, defaults to `false`.\n+ - `noPK11Finalize`: never call `C_Finalize` on any PKCS#11 module. `boolean`,\n+   defaults to `false`.\n+ - `noRootInit`: Don't try to look for the root certs module automatically.\n+   `boolean`, defaults to `false`.\n+ - `ocspCheckingEnabled`: To have NSS check the OCSP responder for when\n+   verifying certificates, set this flags to `true`. `boolean`, defaults to\n+   `false`.\n+ - `ocspResponderCertNickname`: The nickname of the cert to trust (expected)\n+   to sign the OCSP responses. `String`, defaults to `null`.\n+ - `ocspResponderURL`: Specify the location and cert of the responder.\n+   `String`, defaults to `null`.\n+ - `optimizeSpace`: Use smaller tables and caches. `boolean`, defaults to\n+   `false`.\n+ - `PK11Reload`: Init `PK11Reload` to ignore the\n+   `CKR_CRYPTOKI_ALREADY_INITIALIZED` error when loading PKCS#11 modules.\n+   `boolean`, defaults to `false`.\n+ - `PK11ThreadSafe`: only load PKCS#11 modules that are thread-safe, ie. that\n+   support locking - either OS locking or NSS-provided locks. `boolean`,\n+   defaults to `false`.\n+ - `PKIXVerify`: Enable PKIX verify rather than the old cert library, to\n+   verify certificates. `boolean`, defaults to `false`.\n+ - `readOnly`: To open the databases in read-only mode, set this flag to\n+   true. `boolean`, defaults to `false`.\n+ - `removeSunProvider`: Remove the Sun crypto provider. `boolean`, defaults\n+   to `false`.\n+\n+### `PasswordCallback` handlers\n+\n+In order to authenticate against a PKCS#11 token or to the internal\n+certificate store, it is necessary to select a `PasswordCallback` handler.\n+By default this is a console-based `PasswordCallback` handler. This prompts\n+the user for the password via the Console. However, this is not appropriate\n+in all scenarios.\n+\n+Developers are expected to extend and implement this as desired by their\n+application.\n+\n+For example, to set a static `PasswordCallback` handler:\n+\n+```java\n+CryptoManager cm = CryptoManager.getInstance();\n+cm.setPasswordCallback(new Password(\"password\".toCharArray()));\n+```\n+\n+## Loading JSS via `java.security`\n+\n+You can directly add the `JSSProvider` by adding it to the `java.security`\n+file:\n+\n+```properties\n+security.provider.<n> = org.mozilla.jss.JSSProvider /path/to/jss.cfg\n+```\n+\n+There are two ways use this `java.security` file: by directly installing\n+it to the system or by using `-Djava.security.properties=/path/to/file`.\n+Note that two equals signs may be used, in which case the system configuration\n+is ignored and fully overridden by this file.\n+\n+`JSSProvider` behaves like the `SunPKCS11-NSS` provider, requiring a\n+configuration file to initialize JSS (and the `CryptoManager` object).\n+\n+`jss.cfg` takes the same `InitializationValues` parameters, except in a\n+properties file format.\n+\n+### JSS Config\n+\n+| property                           | `InitializationValues` member name  |\n+|------------------------------------|-------------------------------------|\n+| `jss.fips`                         | `ivs.fipsMode`                      |\n+| `jss.ocsp.enabled`                 | `ivs.ocspCheckingEnabled`           |\n+| `jss.ocsp.policy`                  | `CryptoManager.setOCSPPolicy`       |\n+| `jss.ocsp.responder.cert_nickname` | `ivs.ocspResponderCertNickname`     |\n+| `jss.ocsp.responder.url`           | `ivs.ocspResponderURL`              |\n+| `jss.password`                     | `CryptoManager.setPasswordCallback` |\n+| `nss.config_dir`                   | `ivs.configDir`                     |\n+| `nss.cert_prefix`                  | `ivs.certPrefix`                    |\n+| `nss.cooperate`                    | `ivs.cooperate`                     |\n+| `nss.force_open`                   | `ivs.forceOpen`                     |\n+| `nss.java_only`                    | `ivs.javaOnly`                      |\n+| `nss.key_prefix`                   | `ivs.keyPrefix`                     |\n+| `nss.no_cert_db`                   | `ivs.noCertDB`                      |\n+| `nss.no_mod_db`                    | `ivs.noModDB`                       |\n+| `nss.no_pk11_finalize`             | `ivs.noPK11Finalize`                |\n+| `nss.no_root_init`                 | `ivs.noRootInit`                    |\n+| `nss.optimizeSpace`                | `ivs.optimizeSpace`                 |\n+| `nss.pkix_verify`                  | `ivs.pkixVerify`                    |\n+| `nss.pk11_reload`                  | `ivs.PK11Reload`                    |\n+| `nss.pk11_thread_safe`             | `ivs.PK11ThreadSafe`                |\n+| `nss.read_only`                    | `ivs.readOnly`                      |\n+| `nss.secmod_name`                  | `ivs.secmodName`                    |\n+\n+Note that the parameters `installJSSProvider`, `removeSunProvider`, and\n+`installJSSProviderFirst` are ignored, as they can be controlled by directly\n+manipulating the `java.security` file.\n+\n+## Upgrading Old Code\n+\n+There are two paths to upgrade an older code base to a newer JSS version,\n+using the JSSProvider interface:\n+\n+ 1. Continue using `CryptoManager.initialize(...)` as before. This gives the\n+    local application the most control over the NSS DB path.\n+ 2. Switch to using `java.security`-based configuration (either via local\n+    policy with `-Djava.security.properties=/path` specified on the JVM\n+    command line or via system-wide policy by modifying the\n+    `$JAVA_HOME/conf/security/java.security` file). You can then remove the\n+    call to `CryptoManager.initialize(...)`. If this call is necessary for\n+    backwards-compatibility reasons (to support multiple JSS versions), it\n+    would be sufficient to check the value of `CryptoManager.getInstance(...)`\n+    before configuration:\n+\n+    ```java\n+    try {\n+        cm = CryptoManager.getInstance();\n+    } catch (NotInitializedException nie) {\n+        CryptoManager.initialize(...);\n+        cm = CryptoManager.getInstance();\n+    }\n+    ```\n+\n+    This gives the user control over NSS DB path via modifying either of\n+    those two configuration files (or by providing a local override).\n+\n+Note that, between `java.security` and `CryptoManager.initialize()`, the\n+latter takes precedence unless `CryptoManager` has already been initialize.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ddd122860255a0c0675b109139c21a3d6929c61"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjUxNzg3OnYy", "diffSide": "RIGHT", "path": "docs/usage/jssprovider.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxNDoxNFrOGIceQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxNDoxNFrOGIceQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwODI4OA==", "bodyText": "are->is", "url": "https://github.com/dogtagpki/jss/pull/443#discussion_r411508288", "createdAt": "2020-04-20T16:14:14Z", "author": {"login": "cipherboy"}, "path": "docs/usage/jssprovider.md", "diffHunk": "@@ -0,0 +1,166 @@\n+# `Mozilla-JSS` Provider\n+\n+The `Mozilla-JSS` JCA-compatible Provider exposes most of the functionality\n+of JSS to external packages. This interface is the recommend interface most\n+developers should build against. However, once the dependencies are satisfied\n+and JSS's native component are available to the JVM, we still have to load", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe16ac887c9d51b9d2053376536e5ce4353a427"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjUyMDExOnYy", "diffSide": "RIGHT", "path": "docs/usage/jssprovider.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxNDo0MlrOGIcfow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxNDo0MlrOGIcfow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwODY0Mw==", "bodyText": "JSSProvider -> JSS Provider.", "url": "https://github.com/dogtagpki/jss/pull/443#discussion_r411508643", "createdAt": "2020-04-20T16:14:42Z", "author": {"login": "cipherboy"}, "path": "docs/usage/jssprovider.md", "diffHunk": "@@ -0,0 +1,166 @@\n+# `Mozilla-JSS` Provider\n+\n+The `Mozilla-JSS` JCA-compatible Provider exposes most of the functionality\n+of JSS to external packages. This interface is the recommend interface most\n+developers should build against. However, once the dependencies are satisfied\n+and JSS's native component are available to the JVM, we still have to load\n+and initialize JSS.\n+\n+There are two routes to do this:\n+\n+ 1. Via the `CryptoManager` interface, _and_\n+ 2. Via `java.security`, directly loading the `JSSProvider`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe16ac887c9d51b9d2053376536e5ce4353a427"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2681, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}