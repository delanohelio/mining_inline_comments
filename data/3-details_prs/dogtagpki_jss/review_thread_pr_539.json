{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MDg0NjAx", "number": 539, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDozMToxMVrOD6aLSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDozMToxMVrOD6aLSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTcyODc0OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/ssl/javax/JSSServerSocketChannel.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDozMToxMVrOGSPHqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMTo0OTo0OFrOGTuo6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3NTI3Mw==", "bodyText": "@edewata What do you think about this? It isn't technically right, but if we return null here, we could lose a client connection. Thoughts?", "url": "https://github.com/dogtagpki/jss/pull/539#discussion_r421775273", "createdAt": "2020-05-07T20:31:11Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/ssl/javax/JSSServerSocketChannel.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package org.mozilla.jss.ssl.javax;\n+\n+import java.io.*;\n+import java.net.*;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.*;\n+import java.security.*;\n+import java.util.*;\n+\n+import javax.net.ssl.*;\n+\n+public class JSSServerSocketChannel extends ServerSocketChannel {\n+    private JSSServerSocket sslSocket;\n+    private ServerSocketChannel parent;\n+    private ServerSocket parentSocket;\n+    private JSSEngine engine;\n+\n+    public JSSServerSocketChannel(JSSServerSocket sslSocket, ServerSocketChannel parent, JSSEngine engine) throws IOException {\n+        super(null);\n+\n+        this.sslSocket = sslSocket;\n+        this.parent = parent;\n+        this.parentSocket = parent.socket();\n+        this.engine = engine;\n+\n+        // Copy blocking mode from the parent channel.\n+        configureBlocking(parent.isBlocking());\n+    }\n+\n+    public JSSServerSocketChannel(JSSServerSocket sslSocket, ServerSocket parentSocket, JSSEngine engine) throws IOException {\n+        super(null);\n+\n+        this.sslSocket = sslSocket;\n+        this.parentSocket = parentSocket;\n+        this.engine = engine;\n+\n+        // When there is no parent channel, the channel must be in\n+        // blocking mode.\n+        configureBlocking(false);\n+    }\n+\n+    public JSSSocketChannel accept() throws IOException {\n+        if (parent == null) {\n+            // Have to be in blocking mode. Call up to sslSocket to handle\n+            // the accept. Note that JSSSocket always has a SocketChannel even\n+            // when the underlying socket doesn't so the call to getChannel()\n+            // will be non-null.\n+            JSSSocket acceptedSocket = sslSocket.accept();\n+            return acceptedSocket.getInternalChannel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191de520d29b795d6d89cc0eca77d3463edf0efe"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxNjU2OA==", "bodyText": "I'm not quite sure about the implication of each option, but if we don't want to deal with parent == null case we probably can throw an exception (either here or maybe in the constructor). That way people using JSS will know that it's not a supported configuration. As long as we provide a clear error message we don't have to worry about losing a client connection.", "url": "https://github.com/dogtagpki/jss/pull/539#discussion_r423316568", "createdAt": "2020-05-11T21:00:10Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/ssl/javax/JSSServerSocketChannel.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package org.mozilla.jss.ssl.javax;\n+\n+import java.io.*;\n+import java.net.*;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.*;\n+import java.security.*;\n+import java.util.*;\n+\n+import javax.net.ssl.*;\n+\n+public class JSSServerSocketChannel extends ServerSocketChannel {\n+    private JSSServerSocket sslSocket;\n+    private ServerSocketChannel parent;\n+    private ServerSocket parentSocket;\n+    private JSSEngine engine;\n+\n+    public JSSServerSocketChannel(JSSServerSocket sslSocket, ServerSocketChannel parent, JSSEngine engine) throws IOException {\n+        super(null);\n+\n+        this.sslSocket = sslSocket;\n+        this.parent = parent;\n+        this.parentSocket = parent.socket();\n+        this.engine = engine;\n+\n+        // Copy blocking mode from the parent channel.\n+        configureBlocking(parent.isBlocking());\n+    }\n+\n+    public JSSServerSocketChannel(JSSServerSocket sslSocket, ServerSocket parentSocket, JSSEngine engine) throws IOException {\n+        super(null);\n+\n+        this.sslSocket = sslSocket;\n+        this.parentSocket = parentSocket;\n+        this.engine = engine;\n+\n+        // When there is no parent channel, the channel must be in\n+        // blocking mode.\n+        configureBlocking(false);\n+    }\n+\n+    public JSSSocketChannel accept() throws IOException {\n+        if (parent == null) {\n+            // Have to be in blocking mode. Call up to sslSocket to handle\n+            // the accept. Note that JSSSocket always has a SocketChannel even\n+            // when the underlying socket doesn't so the call to getChannel()\n+            // will be non-null.\n+            JSSSocket acceptedSocket = sslSocket.accept();\n+            return acceptedSocket.getInternalChannel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3NTI3Mw=="}, "originalCommit": {"oid": "191de520d29b795d6d89cc0eca77d3463edf0efe"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0MDI2NQ==", "bodyText": "Okie dokie, I'll add the exception as a later PR. Thanks!", "url": "https://github.com/dogtagpki/jss/pull/539#discussion_r423340265", "createdAt": "2020-05-11T21:49:48Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/ssl/javax/JSSServerSocketChannel.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package org.mozilla.jss.ssl.javax;\n+\n+import java.io.*;\n+import java.net.*;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.*;\n+import java.security.*;\n+import java.util.*;\n+\n+import javax.net.ssl.*;\n+\n+public class JSSServerSocketChannel extends ServerSocketChannel {\n+    private JSSServerSocket sslSocket;\n+    private ServerSocketChannel parent;\n+    private ServerSocket parentSocket;\n+    private JSSEngine engine;\n+\n+    public JSSServerSocketChannel(JSSServerSocket sslSocket, ServerSocketChannel parent, JSSEngine engine) throws IOException {\n+        super(null);\n+\n+        this.sslSocket = sslSocket;\n+        this.parent = parent;\n+        this.parentSocket = parent.socket();\n+        this.engine = engine;\n+\n+        // Copy blocking mode from the parent channel.\n+        configureBlocking(parent.isBlocking());\n+    }\n+\n+    public JSSServerSocketChannel(JSSServerSocket sslSocket, ServerSocket parentSocket, JSSEngine engine) throws IOException {\n+        super(null);\n+\n+        this.sslSocket = sslSocket;\n+        this.parentSocket = parentSocket;\n+        this.engine = engine;\n+\n+        // When there is no parent channel, the channel must be in\n+        // blocking mode.\n+        configureBlocking(false);\n+    }\n+\n+    public JSSSocketChannel accept() throws IOException {\n+        if (parent == null) {\n+            // Have to be in blocking mode. Call up to sslSocket to handle\n+            // the accept. Note that JSSSocket always has a SocketChannel even\n+            // when the underlying socket doesn't so the call to getChannel()\n+            // will be non-null.\n+            JSSSocket acceptedSocket = sslSocket.accept();\n+            return acceptedSocket.getInternalChannel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3NTI3Mw=="}, "originalCommit": {"oid": "191de520d29b795d6d89cc0eca77d3463edf0efe"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2635, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}