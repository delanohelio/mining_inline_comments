{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMDUzNjA1", "number": 565, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTowMzoxMFrOEDlZOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo1MjozM1rOEIcwKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTkzODUxOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTowMzoxMVrOGgr_zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTowMzoxMVrOGgr_zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkyODQ2MQ==", "bodyText": "This is from the existing code, but it's probably not necessary since all classes implementing the org.mozilla.jss.crypto.X509Certificate are subclasses of PK11Cert.", "url": "https://github.com/dogtagpki/jss/pull/565#discussion_r436928461", "createdAt": "2020-06-08T19:03:11Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* BEGIN COPYRIGHT BLOCK\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 2.1 of the License, or (at your option) any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ *\n+ * Copyright (C) 2017 Red Hat, Inc.\n+ * All rights reserved.\n+ * END COPYRIGHT BLOCK */\n+\n+package org.mozilla.jss.provider.javax.crypto;\n+\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.Principal;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.net.ssl.X509KeyManager;\n+\n+import org.mozilla.jss.CryptoManager;\n+import org.mozilla.jss.NotInitializedException;\n+import org.mozilla.jss.crypto.ObjectNotFoundException;\n+import org.mozilla.jss.pkcs11.PK11Cert;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JSSTokenKeyManager implements JSSKeyManager {\n+\n+    final static Logger logger = LoggerFactory.getLogger(JSSCryptoKeyManager.class);\n+\n+    private KeyStore jks;\n+    private CryptoManager cm;\n+\n+    public JSSTokenKeyManager(KeyStore jssKeyStore) {\n+        jks = jssKeyStore;\n+\n+        try {\n+            cm = CryptoManager.getInstance();\n+        } catch (NotInitializedException nie) {\n+            String msg = \"CryptoManager reported as not initialized but have \";\n+            msg += \"a working KeyStore instance! \" + nie.getMessage();\n+            throw new RuntimeException(msg, nie);\n+        }\n+    }\n+\n+    @Override\n+    public String chooseClientAlias(String[] keyTypes, Principal[] issuers, Socket socket) {\n+        logger.debug(\"JSSKeyManager: chooseClientAlias() - not implemented\");\n+        return null;\n+    }\n+\n+    @Override\n+    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\n+        logger.debug(\"JSSKeyManager: chooseServerAlias() - not implemented\");\n+        return null; \n+    }\n+\n+    public org.mozilla.jss.crypto.X509Certificate getCertificate(String alias) {\n+        try {\n+            CryptoManager cm = CryptoManager.getInstance();\n+            return (org.mozilla.jss.crypto.X509Certificate) jks.getCertificate(alias);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public X509Certificate[] getCertificateChain(String alias) {\n+\n+        logger.debug(\"JSSKeyManager: getCertificateChain(\" + alias + \")\");\n+\n+        try {\n+            org.mozilla.jss.crypto.X509Certificate cert = getCertificate(alias);\n+\n+            org.mozilla.jss.crypto.X509Certificate[] chain = cm.buildCertificateChain(cert);\n+            logger.debug(\"JSSKeyManager: cert chain:\");\n+\n+            Collection<org.mozilla.jss.pkcs11.PK11Cert> list = new ArrayList<>();\n+            for (org.mozilla.jss.crypto.X509Certificate c : chain) {\n+                if (!(c instanceof PK11Cert)) {\n+                    logger.error(\"JSSKeyManager: Can't cast to PK11Cert: \" + c);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89292459c21f0cf9b3e4c8384ed36e2cc13faebf"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mjk0MzI2OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo1MDoxMlrOGoauHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo1MDoxMlrOGoauHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzNDAxMw==", "bodyText": "This line can be removed. We can use the cm field.", "url": "https://github.com/dogtagpki/jss/pull/565#discussion_r445034013", "createdAt": "2020-06-24T16:50:12Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/* BEGIN COPYRIGHT BLOCK\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 2.1 of the License, or (at your option) any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ *\n+ * Copyright (C) 2017 Red Hat, Inc.\n+ * All rights reserved.\n+ * END COPYRIGHT BLOCK */\n+\n+package org.mozilla.jss.provider.javax.crypto;\n+\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.Principal;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.net.ssl.X509KeyManager;\n+\n+import org.mozilla.jss.CryptoManager;\n+import org.mozilla.jss.NotInitializedException;\n+import org.mozilla.jss.crypto.ObjectNotFoundException;\n+import org.mozilla.jss.pkcs11.PK11Cert;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JSSTokenKeyManager implements JSSKeyManager {\n+\n+    final static Logger logger = LoggerFactory.getLogger(JSSTokenKeyManager.class);\n+\n+    private KeyStore jks;\n+    private CryptoManager cm;\n+    private char[] password;\n+\n+    public JSSTokenKeyManager(KeyStore jssKeyStore, char[] password) {\n+        jks = jssKeyStore;\n+        this.password = password;\n+\n+        try {\n+            cm = CryptoManager.getInstance();\n+        } catch (NotInitializedException nie) {\n+            String msg = \"CryptoManager reported as not initialized but have \";\n+            msg += \"a working KeyStore instance! \" + nie.getMessage();\n+            throw new RuntimeException(msg, nie);\n+        }\n+    }\n+\n+    @Override\n+    public String chooseClientAlias(String[] keyTypes, Principal[] issuers, Socket socket) {\n+        logger.debug(\"JSSKeyManager: chooseClientAlias() - not implemented\");\n+        return null;\n+    }\n+\n+    @Override\n+    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\n+        logger.debug(\"JSSKeyManager: chooseServerAlias() - not implemented\");\n+        return null;\n+    }\n+\n+    public org.mozilla.jss.crypto.X509Certificate getCertificate(String alias) {\n+        try {\n+            if (jks == null) {\n+                CryptoManager cm = CryptoManager.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55d954e61edb7c00a76a031dd95b01b06ff82f8c"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mjk0NDA1OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo1MDoyOVrOGoauqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo1MDoyOVrOGoauqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzNDE1Mg==", "bodyText": "This line can be removed. We can use the cm field.", "url": "https://github.com/dogtagpki/jss/pull/565#discussion_r445034152", "createdAt": "2020-06-24T16:50:29Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/* BEGIN COPYRIGHT BLOCK\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 2.1 of the License, or (at your option) any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ *\n+ * Copyright (C) 2017 Red Hat, Inc.\n+ * All rights reserved.\n+ * END COPYRIGHT BLOCK */\n+\n+package org.mozilla.jss.provider.javax.crypto;\n+\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.Principal;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.net.ssl.X509KeyManager;\n+\n+import org.mozilla.jss.CryptoManager;\n+import org.mozilla.jss.NotInitializedException;\n+import org.mozilla.jss.crypto.ObjectNotFoundException;\n+import org.mozilla.jss.pkcs11.PK11Cert;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JSSTokenKeyManager implements JSSKeyManager {\n+\n+    final static Logger logger = LoggerFactory.getLogger(JSSTokenKeyManager.class);\n+\n+    private KeyStore jks;\n+    private CryptoManager cm;\n+    private char[] password;\n+\n+    public JSSTokenKeyManager(KeyStore jssKeyStore, char[] password) {\n+        jks = jssKeyStore;\n+        this.password = password;\n+\n+        try {\n+            cm = CryptoManager.getInstance();\n+        } catch (NotInitializedException nie) {\n+            String msg = \"CryptoManager reported as not initialized but have \";\n+            msg += \"a working KeyStore instance! \" + nie.getMessage();\n+            throw new RuntimeException(msg, nie);\n+        }\n+    }\n+\n+    @Override\n+    public String chooseClientAlias(String[] keyTypes, Principal[] issuers, Socket socket) {\n+        logger.debug(\"JSSKeyManager: chooseClientAlias() - not implemented\");\n+        return null;\n+    }\n+\n+    @Override\n+    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\n+        logger.debug(\"JSSKeyManager: chooseServerAlias() - not implemented\");\n+        return null;\n+    }\n+\n+    public org.mozilla.jss.crypto.X509Certificate getCertificate(String alias) {\n+        try {\n+            if (jks == null) {\n+                CryptoManager cm = CryptoManager.getInstance();\n+                return cm.findCertByNickname(alias);\n+            }\n+\n+            return (org.mozilla.jss.crypto.X509Certificate) jks.getCertificate(alias);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public X509Certificate[] getCertificateChain(String alias) {\n+        logger.debug(\"JSSKeyManager: getCertificateChain(\" + alias + \")\");\n+\n+        try {\n+            org.mozilla.jss.crypto.X509Certificate cert = getCertificate(alias);\n+            org.mozilla.jss.crypto.X509Certificate[] chain = cm.buildCertificateChain(cert);\n+\n+            logger.debug(\"JSSKeyManager: cert chain:\");\n+\n+            Collection<org.mozilla.jss.pkcs11.PK11Cert> list = new ArrayList<>();\n+            for (org.mozilla.jss.crypto.X509Certificate c : chain) {\n+                logger.debug(\"JSSKeyManager: - \" + c.getSubjectDN());\n+                list.add((PK11Cert) c);\n+            }\n+\n+            return list.toArray(new X509Certificate[list.size()]);\n+        } catch (Throwable e) {\n+            logger.error(e.getMessage(), e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public String[] getClientAliases(String keyType, Principal[] issuers) {\n+        logger.debug(\"JSSKeyManager: getClientAliases() - not implemented\");\n+        return null;\n+    }\n+\n+    @Override\n+    public PrivateKey getPrivateKey(String alias) {\n+\n+        logger.debug(\"JSSKeyManager: getPrivateKey(\" + alias + \")\");\n+\n+        try {\n+            if (jks == null) {\n+                CryptoManager cm = CryptoManager.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55d954e61edb7c00a76a031dd95b01b06ff82f8c"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mjk1MTQ3OnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/provider/javax/crypto/JSSKeyManagerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo1MjozM1rOGoazXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo1MjozM1rOGoazXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzNTM1OA==", "bodyText": "The null initialization is redundant :)", "url": "https://github.com/dogtagpki/jss/pull/565#discussion_r445035358", "createdAt": "2020-06-24T16:52:33Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/provider/javax/crypto/JSSKeyManagerFactory.java", "diffHunk": "@@ -8,7 +8,26 @@\n import org.mozilla.jss.provider.java.security.*;\n \n public class JSSKeyManagerFactory extends KeyManagerFactorySpi {\n+    private KeyStore internalStorage = null;\n+    char[] password = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55d954e61edb7c00a76a031dd95b01b06ff82f8c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2647, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}