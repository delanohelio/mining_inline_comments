{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NDg1NzI4", "number": 625, "title": "Fix hostname verification and improve JCA compatibility", "bodyText": "This PR improves JCA compatibility by bypassing NSS's hostname verification on client SSLEngine connections, to mirror the behavior of SunJSSE.\nWe use the approach suggested by Bob Relyea, which is to hook the bad cert handler and check for a specific error. Because hostname verification is guaranteed to be the last thing NSS does (regardless of whether or not we use NSS's default handler or libpkix verification), this should be safe. This has the added benefit of also working with our custom cert authentication callbacks.\nEventually, we'll expose this method to all JSSEngine instances, and allow the caller a chance to override other errors if they'd like, in an asynchronous manner.", "createdAt": "2020-08-31T19:09:18Z", "url": "https://github.com/dogtagpki/jss/pull/625", "merged": true, "mergeCommit": {"oid": "fe75335bcf8ae6ad77a2e9cf597eea42e138dd2f"}, "closed": true, "closedAt": "2020-08-31T21:29:35Z", "author": {"login": "cipherboy"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEXRcSAH2gAyNDc2NDg1NzI4OjQ3YTI0NDcxNzhmN2NjYTYwMzZkNGMzZjhjNWExMWIyZjU5OGVjYjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEYvPNgFqTQ3ODkxNzg3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "47a2447178f7cca6036d4c3f8c5a11b2f598ecb4", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/47a2447178f7cca6036d4c3f8c5a11b2f598ecb4", "committedDate": "2020-08-31T18:39:48Z", "message": "Add NSS stubs for BadCertHandler\n\nThe JDK's SSL interfaces under javax.net.ssl do not provide a way for\nthe SSLSocket/SSLEngine instance to validate hostname during the\nhandshake. Instead, the accepted way of doing hostname verification\n(using a HostnameVerifier) is after the handshake is completed. This\ncauses problems with NSS, because they assume the hostname is available\nfor validation at handshake time.\n\nIn order to support this use case, when the hostname is `null` on a\nclient SSL socket, we will attach using SSL_BadCertHook and give the\nJSSEngine a chance to bypass this value.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7811272bdfb29a0ef78d77e3a55d9ff11132eb3", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/f7811272bdfb29a0ef78d77e3a55d9ff11132eb3", "committedDate": "2020-08-31T18:48:02Z", "message": "Add SSLErrors with SSL_ERROR_BAD_CERT_DOMAIN\n\nThis is the only SSLError we wish to allow through in regular JSSEngine\nclient operations.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c40aa4ed21899d789fcbf4d2179caad4c92aa67c", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/c40aa4ed21899d789fcbf4d2179caad4c92aa67c", "committedDate": "2020-08-31T18:59:50Z", "message": "Bypass SSL_ERRORS_BAD_CERT_DOMAIN for JDK\n\nWhen JSSEngine is used via the provider interface, most callers won't be\naware that they're using JSSEngine. As a side effect, they won't be\nusing JSSEngine's setHostname() to validate the server's SSL\ncertificate. This means NSS has no knowledge of the hostname, throwing\nan error like:\n\n    Caused by: javax.net.ssl.SSLHandshakeException: Error duing SSL.ForceHandshake() :: SSL_ERROR_BAD_CERT_DOMAIN (-12276)\n            at org.mozilla.jss.ssl.javax.JSSEngineReferenceImpl.updateHandshakeState(JSSEngineReferenceImpl.java:856)\n            at org.mozilla.jss.ssl.javax.JSSEngineReferenceImpl.unwrap(JSSEngineReferenceImpl.java:1037)\n            at org.mozilla.jss.ssl.javax.JSSSocketChannel.read(JSSSocketChannel.java:272)\n\nWe need to provide a mechanism to bypass this by default for these\nconnections, in order to stay compatible with the JCA. This approach was\nsuggested by Bob Relyea.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4OTE3ODc5", "url": "https://github.com/dogtagpki/jss/pull/625#pullrequestreview-478917879", "createdAt": "2020-08-31T20:07:56Z", "commit": {"oid": "c40aa4ed21899d789fcbf4d2179caad4c92aa67c"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDowNzo1NlrOHKHfxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDoyMDoyOFrOHKH39g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3MDYyOA==", "bodyText": "Just a note, the old public handler field is no longer available, so this is not a backward compatible change, but it probably doesn't matter assuming it's only used internally.", "url": "https://github.com/dogtagpki/jss/pull/625#discussion_r480370628", "createdAt": "2020-08-31T20:07:56Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/nss/SSLFDProxy.java", "diffHunk": "@@ -19,9 +19,12 @@\n     public int outboundOffset;\n \n     public boolean needCertValidation;\n+    public boolean needBadCertValidation;\n+    public int badCertError;\n     public boolean handshakeComplete;\n \n-    public CertAuthHandler handler;\n+    public CertAuthHandler certAuthHandler;\n+    public BadCertHandler badCertHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c40aa4ed21899d789fcbf4d2179caad4c92aa67c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3NjgyMg==", "bodyText": "When should we use ConfigAsyncBadCertCallback as opposed to ConfigSyncBadCertCallback?", "url": "https://github.com/dogtagpki/jss/pull/625#discussion_r480376822", "createdAt": "2020-08-31T20:20:28Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/nss/SSL.java", "diffHunk": "@@ -471,10 +471,38 @@ public static int EnableAlertLogging(SSLFDProxy fd) {\n      */\n     public static native int ConfigSyncTrustManagerCertAuthCallback(SSLFDProxy fd);\n \n+    /**\n+     * Use an asynchronous bad certificate handler which allows us to approve\n+     * rejected certificates. This allows us to bypass the hostname check\n+     * failure caused by the Java socket having no knowledge of the hostname\n+     * we use for certificate validation; no HostnameVerifier is passed in.\n+     * As a result, NSS has no value for the hostname and validation will fail.\n+     *\n+     * Note: This does NOT work for server-side connections.\n+     *\n+     * See also: SSL_BadCertHook in /usr/include/nss3/ssl.h and\n+     *           JSSL_SSLFDAsyncBadCertCallback in jss/nss/SSLFDProxy.c\n+     */\n+    public static native int ConfigAsyncBadCertCallback(SSLFDProxy fd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c40aa4ed21899d789fcbf4d2179caad4c92aa67c"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1453, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}