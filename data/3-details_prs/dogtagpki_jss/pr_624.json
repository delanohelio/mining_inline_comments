{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMDUxNjg4", "number": 624, "title": "Add OAEP KeyWrap support", "bodyText": "This is a patch set to add OAEP support for KeyWrap and KeyUnwrap. This will need to wait to merge until NSS supports OAEP at the high-level PK11_* function call level (for key wrapping). A patchset for NSS is available here to test against: cipherboy/nss@add-oaep-support.\nTODO:\n\n Propose NSS patchset upstream so we can merge this PR: https://bugzilla.mozilla.org/show_bug.cgi?id=1666891\n Add PKCS#11 mech\n Add parameters similar to KBKDF\n Add to KeyWrap\n Minor improvements to build system. :-)\n Update to fallback to original code when OAEP isn't present.\n\nAdding Cipher support for OAEP will be done at a later time in a separate PR.", "createdAt": "2020-08-20T16:29:35Z", "url": "https://github.com/dogtagpki/jss/pull/624", "merged": true, "mergeCommit": {"oid": "3348034f9f69ceef16356b979a7a175f06dca356"}, "closed": true, "closedAt": "2020-12-01T18:49:16Z", "author": {"login": "cipherboy"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEYIrcABqjM3MTEzNTI3NjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdh8ZDIABqjQwNTgwNTQ2MDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "547f05edbde874847f8451df43112ba4d58649cf", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/547f05edbde874847f8451df43112ba4d58649cf", "committedDate": "2020-08-20T16:28:30Z", "message": "FIXUP org/mozilla/jss/crypto/KeyWrapAlgorithm.java\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}, "afterCommit": {"oid": "7e0110fa406098b85dddfc0f238ba50e67be0190", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/7e0110fa406098b85dddfc0f238ba50e67be0190", "committedDate": "2020-08-31T19:38:49Z", "message": "FIXUP org/mozilla/jss/crypto/KeyWrapAlgorithm.java\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e0110fa406098b85dddfc0f238ba50e67be0190", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/7e0110fa406098b85dddfc0f238ba50e67be0190", "committedDate": "2020-08-31T19:38:49Z", "message": "FIXUP org/mozilla/jss/crypto/KeyWrapAlgorithm.java\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}, "afterCommit": {"oid": "d2da49fd7f6ab40249ec1eeb27805235dcc56a5a", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/d2da49fd7f6ab40249ec1eeb27805235dcc56a5a", "committedDate": "2020-09-11T16:20:45Z", "message": "FIXUP org/mozilla/jss/crypto/KeyWrapAlgorithm.java\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2da49fd7f6ab40249ec1eeb27805235dcc56a5a", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/d2da49fd7f6ab40249ec1eeb27805235dcc56a5a", "committedDate": "2020-09-11T16:20:45Z", "message": "FIXUP org/mozilla/jss/crypto/KeyWrapAlgorithm.java\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}, "afterCommit": {"oid": "d8bfed3ca9c11a8f3138d6ddb6c58e9a194b449d", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/d8bfed3ca9c11a8f3138d6ddb6c58e9a194b449d", "committedDate": "2020-09-21T18:18:13Z", "message": "FIXUP org/mozilla/jss/tests/KeyWrapping.java\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ab95ead967a93ca102676783c2c2cdd4175e3cc", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/9ab95ead967a93ca102676783c2c2cdd4175e3cc", "committedDate": "2020-09-21T20:22:37Z", "message": "FIXUP ../org/mozilla/jss/tests/OAEPKeyWrapping.java\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}, "afterCommit": {"oid": "551f7353d364a0b16982ab1b5ee04a7ad6791af7", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/551f7353d364a0b16982ab1b5ee04a7ad6791af7", "committedDate": "2020-09-23T12:11:39Z", "message": "Implement RSA/OAEP key wrapping\n\nThis depends on support from NSS for two new function calls,\nPK11_PubWrapSymKeyWithParams and PK11_PubUnwrapSymKeyWithParams.\nThese enable passing OAEP's mechanism parameters into NSS's high-level\nPK11 key wrap/unwrap interface, allowing them to succeed. Otherwise,\nprevious versions of NSS silently converted OAEP to PKCS#1 v1.5,\nallowing the trivial patchset to succeed without any mechanism\nparameters.\n\nIntroduce a JSSOAEPParameterSpec which can consume a JCA-standard\nOAEPParameterSpec instance but which also extends NativeEnclosure to\nallow us to call into the JNI layer with a parameter instance.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "551f7353d364a0b16982ab1b5ee04a7ad6791af7", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/551f7353d364a0b16982ab1b5ee04a7ad6791af7", "committedDate": "2020-09-23T12:11:39Z", "message": "Implement RSA/OAEP key wrapping\n\nThis depends on support from NSS for two new function calls,\nPK11_PubWrapSymKeyWithParams and PK11_PubUnwrapSymKeyWithParams.\nThese enable passing OAEP's mechanism parameters into NSS's high-level\nPK11 key wrap/unwrap interface, allowing them to succeed. Otherwise,\nprevious versions of NSS silently converted OAEP to PKCS#1 v1.5,\nallowing the trivial patchset to succeed without any mechanism\nparameters.\n\nIntroduce a JSSOAEPParameterSpec which can consume a JCA-standard\nOAEPParameterSpec instance but which also extends NativeEnclosure to\nallow us to call into the JNI layer with a parameter instance.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}, "afterCommit": {"oid": "1a515e84b8fb67439257ec7dc5836840973381fd", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/1a515e84b8fb67439257ec7dc5836840973381fd", "committedDate": "2020-09-23T19:34:06Z", "message": "Implement RSA/OAEP key wrapping\n\nThis depends on support from NSS for two new function calls,\nPK11_PubWrapSymKeyWithMechanism and PK11_PubUnwrapSymKeyWithMechanism.\nThese enable passing OAEP's mechanism parameters into NSS's high-level\nPK11 key wrap/unwrap interface, allowing them to succeed. Otherwise,\nprevious versions of NSS silently converted OAEP to PKCS#1 v1.5,\nallowing the trivial patchset to succeed without any mechanism\nparameters.\n\nIntroduce a JSSOAEPParameterSpec which can consume a JCA-standard\nOAEPParameterSpec instance but which also extends NativeEnclosure to\nallow us to call into the JNI layer with a parameter instance.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a515e84b8fb67439257ec7dc5836840973381fd", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/1a515e84b8fb67439257ec7dc5836840973381fd", "committedDate": "2020-09-23T19:34:06Z", "message": "Implement RSA/OAEP key wrapping\n\nThis depends on support from NSS for two new function calls,\nPK11_PubWrapSymKeyWithMechanism and PK11_PubUnwrapSymKeyWithMechanism.\nThese enable passing OAEP's mechanism parameters into NSS's high-level\nPK11 key wrap/unwrap interface, allowing them to succeed. Otherwise,\nprevious versions of NSS silently converted OAEP to PKCS#1 v1.5,\nallowing the trivial patchset to succeed without any mechanism\nparameters.\n\nIntroduce a JSSOAEPParameterSpec which can consume a JCA-standard\nOAEPParameterSpec instance but which also extends NativeEnclosure to\nallow us to call into the JNI layer with a parameter instance.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}, "afterCommit": {"oid": "02bb58c22307d87a0edfca42f550ce1adf68fe54", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/02bb58c22307d87a0edfca42f550ce1adf68fe54", "committedDate": "2020-11-05T23:26:20Z", "message": "Support running on older versions of NSS\n\nThis allows us to detect whether or not NSS supports RSA-OAEP key\nwrap/unwrap and if not, disable RSA-OAEP support, gracefully falling\nback to the old method for other mechanisms.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02bb58c22307d87a0edfca42f550ce1adf68fe54", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/02bb58c22307d87a0edfca42f550ce1adf68fe54", "committedDate": "2020-11-05T23:26:20Z", "message": "Support running on older versions of NSS\n\nThis allows us to detect whether or not NSS supports RSA-OAEP key\nwrap/unwrap and if not, disable RSA-OAEP support, gracefully falling\nback to the old method for other mechanisms.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}, "afterCommit": {"oid": "ea9ff3ddd3ba070bd0b17712adfcd2748f739028", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/ea9ff3ddd3ba070bd0b17712adfcd2748f739028", "committedDate": "2020-11-06T19:22:41Z", "message": "Support running on older versions of NSS\n\nThis allows us to detect whether or not NSS supports RSA-OAEP key\nwrap/unwrap and if not, disable RSA-OAEP support, gracefully falling\nback to the old method for other mechanisms.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea9ff3ddd3ba070bd0b17712adfcd2748f739028", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/ea9ff3ddd3ba070bd0b17712adfcd2748f739028", "committedDate": "2020-11-06T19:22:41Z", "message": "Support running on older versions of NSS\n\nThis allows us to detect whether or not NSS supports RSA-OAEP key\nwrap/unwrap and if not, disable RSA-OAEP support, gracefully falling\nback to the old method for other mechanisms.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}, "afterCommit": {"oid": "44f82ed8e1b82385e495e4be68c0144ee54b6b15", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/44f82ed8e1b82385e495e4be68c0144ee54b6b15", "committedDate": "2020-11-06T23:08:44Z", "message": "Support running on older versions of NSS\n\nThis allows us to detect whether or not NSS supports RSA-OAEP key\nwrap/unwrap and if not, disable RSA-OAEP support, gracefully falling\nback to the old method for other mechanisms.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44f82ed8e1b82385e495e4be68c0144ee54b6b15", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/44f82ed8e1b82385e495e4be68c0144ee54b6b15", "committedDate": "2020-11-06T23:08:44Z", "message": "Support running on older versions of NSS\n\nThis allows us to detect whether or not NSS supports RSA-OAEP key\nwrap/unwrap and if not, disable RSA-OAEP support, gracefully falling\nback to the old method for other mechanisms.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}, "afterCommit": {"oid": "13a22a1cdb3b8341c6a4feee5963e9cb657ad348", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/13a22a1cdb3b8341c6a4feee5963e9cb657ad348", "committedDate": "2020-11-09T15:02:50Z", "message": "Support running on older versions of NSS\n\nThis allows us to detect whether or not NSS supports RSA-OAEP key\nwrap/unwrap and if not, disable RSA-OAEP support, gracefully falling\nback to the old method for other mechanisms.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MzYwMjcx", "url": "https://github.com/dogtagpki/jss/pull/624#pullrequestreview-526360271", "createdAt": "2020-11-09T15:19:24Z", "commit": {"oid": "13a22a1cdb3b8341c6a4feee5963e9cb657ad348"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToxOToyNFrOHvzrzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToxOToyNFrOHvzrzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg5MTkxOA==", "bodyText": "@jmagne -- sorry, I forgot one line, that's why it was failing. :-)\njssconfig.h defines HAVE_NSS_OAEP from the build system. Now it works again.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r519891918", "createdAt": "2020-11-09T15:19:24Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/pkcs11/PK11KeyWrapper.c", "diffHunk": "@@ -17,6 +17,8 @@\n #include <jssutil.h>\n #include <pk11util.h>\n #include <Algorithm.h>\n+#include \"StaticVoidPointer.h\"\n+#include \"jssconfig.h\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13a22a1cdb3b8341c6a4feee5963e9cb657ad348"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NzYyNTEz", "url": "https://github.com/dogtagpki/jss/pull/624#pullrequestreview-534762513", "createdAt": "2020-11-19T19:06:04Z", "commit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowNjowNVrOH2tcCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTo0NzoxOFrOH2u80w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEyOTYwOQ==", "bodyText": "I think we can return immediately here, but no big deal.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527129609", "createdAt": "2020-11-19T19:06:05Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.c", "diffHunk": "@@ -0,0 +1,151 @@\n+#include <nss.h>\n+#include <pk11pub.h>\n+#include <pkcs11n.h>\n+#include <pkcs11t.h>\n+#include <jni.h>\n+\n+#include \"_jni/org_mozilla_jss_crypto_JSSOAEPParameterSpec.h\"\n+\n+#include \"jssutil.h\"\n+#include \"java_ids.h\"\n+#include \"jss_exceptions.h\"\n+#include \"pk11util.h\"\n+\n+#include \"NativeEnclosure.h\"\n+#include \"StaticVoidPointer.h\"\n+\n+PRStatus\n+oaep_GetHashAlg(JNIEnv *env, jobject this, jclass this_class, CK_MECHANISM_TYPE *ret)\n+{\n+    jfieldID field_id = NULL;\n+\n+    field_id = (*env)->GetFieldID(env, this_class, \"hashAlg\", \"J\");\n+    if (field_id == NULL) {\n+        return PR_FAILURE;\n+    }\n+\n+    *ret = (*env)->GetLongField(env, this, field_id);\n+    return PR_SUCCESS;\n+}\n+\n+PRStatus\n+oaep_GetMGFType(JNIEnv *env, jobject this, jclass this_class, CK_RSA_PKCS_MGF_TYPE *ret)\n+{\n+    jfieldID field_id = NULL;\n+\n+    field_id = (*env)->GetFieldID(env, this_class, \"mgf\", \"J\");\n+    if (field_id == NULL) {\n+        return PR_FAILURE;\n+    }\n+\n+    *ret = (*env)->GetLongField(env, this, field_id);\n+    return PR_SUCCESS;\n+}\n+\n+PRStatus\n+oaep_GetSpecifiedSourceData(JNIEnv *env, jobject this, jclass this_class, CK_VOID_PTR *ret, CK_ULONG *ret_len)\n+{\n+    jfieldID field_id = NULL;\n+    jbyteArray data = NULL;\n+\n+    field_id = (*env)->GetFieldID(env, this_class, \"sourceData\", \"[B\");\n+    if (field_id == NULL) {\n+        return PR_FAILURE;\n+    }\n+\n+    data = (*env)->GetObjectField(env, this, field_id);\n+    if (data == NULL) {\n+        *ret = NULL;\n+        *ret_len = 0;\n+        return PR_SUCCESS;\n+    }\n+\n+    if (!JSS_FromByteArray(env, data, (uint8_t **)ret, ret_len)) {\n+        return PR_FAILURE;\n+    }\n+\n+    return PR_SUCCESS;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_org_mozilla_jss_crypto_JSSOAEPParameterSpec_acquireNativeResources(JNIEnv *env, jobject this)\n+{\n+    jclass this_class = NULL;\n+\n+    CK_MECHANISM_TYPE hashAlg;\n+    CK_RSA_PKCS_MGF_TYPE mgf;\n+    CK_RSA_PKCS_OAEP_SOURCE_TYPE source = CKZ_DATA_SPECIFIED;\n+    CK_VOID_PTR pSourceData = NULL;\n+    CK_ULONG ulSourceDataLen = 0;\n+    CK_RSA_PKCS_OAEP_PARAMS_PTR oaep_params = NULL;\n+\n+    jobject params_obj;\n+\n+    this_class = (*env)->GetObjectClass(env, this);\n+    if (this_class == NULL) {\n+        return;\n+    }\n+\n+    if (oaep_GetHashAlg(env, this, this_class, &hashAlg) != PR_SUCCESS) {\n+        goto failure;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEyOTcyMg==", "bodyText": "Same thing here.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527129722", "createdAt": "2020-11-19T19:06:16Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.c", "diffHunk": "@@ -0,0 +1,151 @@\n+#include <nss.h>\n+#include <pk11pub.h>\n+#include <pkcs11n.h>\n+#include <pkcs11t.h>\n+#include <jni.h>\n+\n+#include \"_jni/org_mozilla_jss_crypto_JSSOAEPParameterSpec.h\"\n+\n+#include \"jssutil.h\"\n+#include \"java_ids.h\"\n+#include \"jss_exceptions.h\"\n+#include \"pk11util.h\"\n+\n+#include \"NativeEnclosure.h\"\n+#include \"StaticVoidPointer.h\"\n+\n+PRStatus\n+oaep_GetHashAlg(JNIEnv *env, jobject this, jclass this_class, CK_MECHANISM_TYPE *ret)\n+{\n+    jfieldID field_id = NULL;\n+\n+    field_id = (*env)->GetFieldID(env, this_class, \"hashAlg\", \"J\");\n+    if (field_id == NULL) {\n+        return PR_FAILURE;\n+    }\n+\n+    *ret = (*env)->GetLongField(env, this, field_id);\n+    return PR_SUCCESS;\n+}\n+\n+PRStatus\n+oaep_GetMGFType(JNIEnv *env, jobject this, jclass this_class, CK_RSA_PKCS_MGF_TYPE *ret)\n+{\n+    jfieldID field_id = NULL;\n+\n+    field_id = (*env)->GetFieldID(env, this_class, \"mgf\", \"J\");\n+    if (field_id == NULL) {\n+        return PR_FAILURE;\n+    }\n+\n+    *ret = (*env)->GetLongField(env, this, field_id);\n+    return PR_SUCCESS;\n+}\n+\n+PRStatus\n+oaep_GetSpecifiedSourceData(JNIEnv *env, jobject this, jclass this_class, CK_VOID_PTR *ret, CK_ULONG *ret_len)\n+{\n+    jfieldID field_id = NULL;\n+    jbyteArray data = NULL;\n+\n+    field_id = (*env)->GetFieldID(env, this_class, \"sourceData\", \"[B\");\n+    if (field_id == NULL) {\n+        return PR_FAILURE;\n+    }\n+\n+    data = (*env)->GetObjectField(env, this, field_id);\n+    if (data == NULL) {\n+        *ret = NULL;\n+        *ret_len = 0;\n+        return PR_SUCCESS;\n+    }\n+\n+    if (!JSS_FromByteArray(env, data, (uint8_t **)ret, ret_len)) {\n+        return PR_FAILURE;\n+    }\n+\n+    return PR_SUCCESS;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_org_mozilla_jss_crypto_JSSOAEPParameterSpec_acquireNativeResources(JNIEnv *env, jobject this)\n+{\n+    jclass this_class = NULL;\n+\n+    CK_MECHANISM_TYPE hashAlg;\n+    CK_RSA_PKCS_MGF_TYPE mgf;\n+    CK_RSA_PKCS_OAEP_SOURCE_TYPE source = CKZ_DATA_SPECIFIED;\n+    CK_VOID_PTR pSourceData = NULL;\n+    CK_ULONG ulSourceDataLen = 0;\n+    CK_RSA_PKCS_OAEP_PARAMS_PTR oaep_params = NULL;\n+\n+    jobject params_obj;\n+\n+    this_class = (*env)->GetObjectClass(env, this);\n+    if (this_class == NULL) {\n+        return;\n+    }\n+\n+    if (oaep_GetHashAlg(env, this, this_class, &hashAlg) != PR_SUCCESS) {\n+        goto failure;\n+    }\n+\n+    if (oaep_GetMGFType(env, this, this_class, &mgf) != PR_SUCCESS) {\n+        goto failure;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMzY3MQ==", "bodyText": "The super() is redundant. It's called implicitly. No big deal though.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527133671", "createdAt": "2020-11-19T19:13:11Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.mozilla.jss.crypto;\n+\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n+\n+import org.mozilla.jss.pkcs11.PKCS11Constants;\n+import org.mozilla.jss.util.NativeEnclosure;\n+\n+/**\n+ * This class is utilized by JSS to implement OAEP support.\n+ *\n+ * Unlike the existing OAEPParameterSpec in the JCA, this class supports\n+ * NativeEnclosure, allowing it to be used within low-level JNI calls. We\n+ * support copying from an existing OAEPParameterSpec instance (so use is\n+ * interchangeable within JSS) and support setting members from JSS-specific\n+ * types.\n+ *\n+ * Note that this class cannot be used with other JCA providers natively.\n+ */\n+public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmParameterSpec {\n+    public long hashAlg;\n+    public long mgf;\n+    public byte[] sourceData;\n+\n+    public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n+        super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMzgyMA==", "bodyText": "Same thing here.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527133820", "createdAt": "2020-11-19T19:13:27Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.mozilla.jss.crypto;\n+\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n+\n+import org.mozilla.jss.pkcs11.PKCS11Constants;\n+import org.mozilla.jss.util.NativeEnclosure;\n+\n+/**\n+ * This class is utilized by JSS to implement OAEP support.\n+ *\n+ * Unlike the existing OAEPParameterSpec in the JCA, this class supports\n+ * NativeEnclosure, allowing it to be used within low-level JNI calls. We\n+ * support copying from an existing OAEPParameterSpec instance (so use is\n+ * interchangeable within JSS) and support setting members from JSS-specific\n+ * types.\n+ *\n+ * Note that this class cannot be used with other JCA providers natively.\n+ */\n+public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmParameterSpec {\n+    public long hashAlg;\n+    public long mgf;\n+    public byte[] sourceData;\n+\n+    public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n+        super();\n+\n+        setDigestAlgorithm(mdName);\n+        setMaskGenAlgorithm(mgfName);\n+        setMaskGenAlgorithmType(mgfSpec);\n+        setPSource(pSrc);\n+    }\n+\n+    public JSSOAEPParameterSpec(OAEPParameterSpec copy) {\n+        super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzODU4Ng==", "bodyText": "Is this necessary? Java will throw ClassCastException automatically in the following code.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527138586", "createdAt": "2020-11-19T19:21:12Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.mozilla.jss.crypto;\n+\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n+\n+import org.mozilla.jss.pkcs11.PKCS11Constants;\n+import org.mozilla.jss.util.NativeEnclosure;\n+\n+/**\n+ * This class is utilized by JSS to implement OAEP support.\n+ *\n+ * Unlike the existing OAEPParameterSpec in the JCA, this class supports\n+ * NativeEnclosure, allowing it to be used within low-level JNI calls. We\n+ * support copying from an existing OAEPParameterSpec instance (so use is\n+ * interchangeable within JSS) and support setting members from JSS-specific\n+ * types.\n+ *\n+ * Note that this class cannot be used with other JCA providers natively.\n+ */\n+public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmParameterSpec {\n+    public long hashAlg;\n+    public long mgf;\n+    public byte[] sourceData;\n+\n+    public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n+        super();\n+\n+        setDigestAlgorithm(mdName);\n+        setMaskGenAlgorithm(mgfName);\n+        setMaskGenAlgorithmType(mgfSpec);\n+        setPSource(pSrc);\n+    }\n+\n+    public JSSOAEPParameterSpec(OAEPParameterSpec copy) {\n+        super();\n+\n+        setDigestAlgorithm(copy.getDigestAlgorithm());\n+        setMaskGenAlgorithm(copy.getMGFAlgorithm());\n+        setMaskGenAlgorithmType(copy.getMGFParameters());\n+        setPSource(copy.getPSource());\n+    }\n+\n+    public void setDigestAlgorithm(String algo) throws IllegalArgumentException {\n+        switch (algo.toLowerCase()) {\n+            case \"md5\":\n+            case \"ckm_md5\":\n+                hashAlg = PKCS11Constants.CKM_MD5;\n+                break;\n+            case \"sha1\":\n+            case \"sha-1\":\n+            case \"ckm_sha_1\":\n+                hashAlg = PKCS11Constants.CKM_SHA_1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+            case \"ckm_sha256\":\n+                hashAlg = PKCS11Constants.CKM_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+            case \"ckm_sha384\":\n+                hashAlg = PKCS11Constants.CKM_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+            case \"ckm_sha512\":\n+                hashAlg = PKCS11Constants.CKM_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown algorithm identifier: \" + algo;\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setDigestAlgorithm(DigestAlgorithm algo) throws IllegalArgumentException {\n+        if ((algo instanceof HMACAlgorithm) || (algo instanceof CMACAlgorithm)) {\n+            String msg = \"Unable to use MAC digest algorithm \" + algo;\n+            msg += \" in place of an unkeyed hash algorithm\";\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        hashAlg = algo.getEnum().getValue();\n+    }\n+\n+    public void setDigestAlgorithm(long algo) throws IllegalArgumentException {\n+        hashAlg = algo;\n+    }\n+\n+    public void setMaskGenAlgorithm(String algo) throws IllegalArgumentException {\n+        if (!algo.toLowerCase().equals(\"mgf1\")) {\n+            String msg = \"Unknown mask generation algorithm: \" + algo;\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        // Do nothing. We just validate this data so if we get passed\n+        // something unexpected, we error out instead.\n+    }\n+\n+    public void setMaskGenAlgorithmType(String algo) throws IllegalArgumentException {\n+        switch (algo.toLowerCase()) {\n+            case \"sha1\":\n+            case \"sha-1\":\n+            case \"ckm_sha_1\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+            case \"ckm_sha256\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+            case \"ckm_sha384\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+            case \"ckm_sha512\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown mask generation algorithm identifier: \" + algo;\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setMaskGenAlgorithmType(AlgorithmParameterSpec algo) throws IllegalArgumentException {\n+        if (!(algo instanceof MGF1ParameterSpec) || algo == null) {\n+            String msg = \"Unknown mask generation algorithm parameter \";\n+            msg += \"specification: \" + algo;\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        MGF1ParameterSpec mgf1 = (MGF1ParameterSpec) algo;\n+        switch (mgf1.getDigestAlgorithm().toLowerCase()) {\n+            case \"sha1\":\n+            case \"sha-1\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown mask generation algorithm identifier: \";\n+                msg += mgf1.getDigestAlgorithm();\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setMaskGenAlgorithmType(long algo) throws IllegalArgumentException {\n+        mgf = algo;\n+    }\n+\n+    public void setPSource(PSource spec) throws IllegalArgumentException {\n+        if (spec == null) {\n+            return;\n+        }\n+\n+        if (!(spec instanceof PSource.PSpecified)) {\n+            String msg = \"Expected PSource spec to be an instance of \";\n+            msg += \"PSource.PSpecified, but wasn't: \" + spec;\n+            throw new IllegalArgumentException(msg);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1NDM4Nw==", "bodyText": "Do we want to set sourceData = null here? No big deal, just semantics.", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527154387", "createdAt": "2020-11-19T19:47:18Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.mozilla.jss.crypto;\n+\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n+\n+import org.mozilla.jss.pkcs11.PKCS11Constants;\n+import org.mozilla.jss.util.NativeEnclosure;\n+\n+/**\n+ * This class is utilized by JSS to implement OAEP support.\n+ *\n+ * Unlike the existing OAEPParameterSpec in the JCA, this class supports\n+ * NativeEnclosure, allowing it to be used within low-level JNI calls. We\n+ * support copying from an existing OAEPParameterSpec instance (so use is\n+ * interchangeable within JSS) and support setting members from JSS-specific\n+ * types.\n+ *\n+ * Note that this class cannot be used with other JCA providers natively.\n+ */\n+public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmParameterSpec {\n+    public long hashAlg;\n+    public long mgf;\n+    public byte[] sourceData;\n+\n+    public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n+        super();\n+\n+        setDigestAlgorithm(mdName);\n+        setMaskGenAlgorithm(mgfName);\n+        setMaskGenAlgorithmType(mgfSpec);\n+        setPSource(pSrc);\n+    }\n+\n+    public JSSOAEPParameterSpec(OAEPParameterSpec copy) {\n+        super();\n+\n+        setDigestAlgorithm(copy.getDigestAlgorithm());\n+        setMaskGenAlgorithm(copy.getMGFAlgorithm());\n+        setMaskGenAlgorithmType(copy.getMGFParameters());\n+        setPSource(copy.getPSource());\n+    }\n+\n+    public void setDigestAlgorithm(String algo) throws IllegalArgumentException {\n+        switch (algo.toLowerCase()) {\n+            case \"md5\":\n+            case \"ckm_md5\":\n+                hashAlg = PKCS11Constants.CKM_MD5;\n+                break;\n+            case \"sha1\":\n+            case \"sha-1\":\n+            case \"ckm_sha_1\":\n+                hashAlg = PKCS11Constants.CKM_SHA_1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+            case \"ckm_sha256\":\n+                hashAlg = PKCS11Constants.CKM_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+            case \"ckm_sha384\":\n+                hashAlg = PKCS11Constants.CKM_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+            case \"ckm_sha512\":\n+                hashAlg = PKCS11Constants.CKM_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown algorithm identifier: \" + algo;\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setDigestAlgorithm(DigestAlgorithm algo) throws IllegalArgumentException {\n+        if ((algo instanceof HMACAlgorithm) || (algo instanceof CMACAlgorithm)) {\n+            String msg = \"Unable to use MAC digest algorithm \" + algo;\n+            msg += \" in place of an unkeyed hash algorithm\";\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        hashAlg = algo.getEnum().getValue();\n+    }\n+\n+    public void setDigestAlgorithm(long algo) throws IllegalArgumentException {\n+        hashAlg = algo;\n+    }\n+\n+    public void setMaskGenAlgorithm(String algo) throws IllegalArgumentException {\n+        if (!algo.toLowerCase().equals(\"mgf1\")) {\n+            String msg = \"Unknown mask generation algorithm: \" + algo;\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        // Do nothing. We just validate this data so if we get passed\n+        // something unexpected, we error out instead.\n+    }\n+\n+    public void setMaskGenAlgorithmType(String algo) throws IllegalArgumentException {\n+        switch (algo.toLowerCase()) {\n+            case \"sha1\":\n+            case \"sha-1\":\n+            case \"ckm_sha_1\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+            case \"ckm_sha256\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+            case \"ckm_sha384\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+            case \"ckm_sha512\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown mask generation algorithm identifier: \" + algo;\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setMaskGenAlgorithmType(AlgorithmParameterSpec algo) throws IllegalArgumentException {\n+        if (!(algo instanceof MGF1ParameterSpec) || algo == null) {\n+            String msg = \"Unknown mask generation algorithm parameter \";\n+            msg += \"specification: \" + algo;\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        MGF1ParameterSpec mgf1 = (MGF1ParameterSpec) algo;\n+        switch (mgf1.getDigestAlgorithm().toLowerCase()) {\n+            case \"sha1\":\n+            case \"sha-1\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown mask generation algorithm identifier: \";\n+                msg += mgf1.getDigestAlgorithm();\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setMaskGenAlgorithmType(long algo) throws IllegalArgumentException {\n+        mgf = algo;\n+    }\n+\n+    public void setPSource(PSource spec) throws IllegalArgumentException {\n+        if (spec == null) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222"}, "originalPosition": 167}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc17950f49c066fd16fc52ae015caccefe413222", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/bc17950f49c066fd16fc52ae015caccefe413222", "committedDate": "2020-11-19T17:30:47Z", "message": "Add class documentation about JSSOAEPParameterSpec\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}, "afterCommit": {"oid": "0fbacd87f466405673c2d5dffc90c477f4cc9a9b", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/0fbacd87f466405673c2d5dffc90c477f4cc9a9b", "committedDate": "2020-11-19T20:31:58Z", "message": "Add class documentation about JSSOAEPParameterSpec\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNDE2NjEw", "url": "https://github.com/dogtagpki/jss/pull/624#pullrequestreview-541416610", "createdAt": "2020-12-01T01:11:56Z", "commit": {"oid": "0fbacd87f466405673c2d5dffc90c477f4cc9a9b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "065474ffcee84ef6a6c3af463f4cbfdb76470426", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/065474ffcee84ef6a6c3af463f4cbfdb76470426", "committedDate": "2020-12-01T16:17:58Z", "message": "Add RSA/OAEP algorithm identifiers\n\nThis adds RSA/OAEP to jss.crypto.Algorithm as a known algorithm and adds\nstubs for indicating what type of key is required to use it.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5161f26d372c4dc4bac3e75eb27c49b8bc47f49", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/d5161f26d372c4dc4bac3e75eb27c49b8bc47f49", "committedDate": "2020-12-01T16:17:58Z", "message": "Re-add KeyWrapping tests to build\n\nThese tests have been updated from using DES/DES3 to AES-256.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "567248a032a77542c5305d60dafffc1bb6c1ca38", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/567248a032a77542c5305d60dafffc1bb6c1ca38", "committedDate": "2020-12-01T16:17:58Z", "message": "Fix FindNSS, FindNSPR to link with sandboxed libs\n\nWhen using `-Wl,-rpath`, the final generated binaries will have a rpath\ninclude to the sandboxed libraries. This is good as it enables binaries\nto run from the built directory. However, at link time, we're still\nusing the system's NSS library. This doesn't work when NSS introduces a\nchange to its external (public) API; the system's NSS likely doesn't\nhave this change yet. Include the `-L` flag as well, to use the\nsandboxed library at link time as well.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82096589011feaebd00400fee9f389c45db29e3c", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/82096589011feaebd00400fee9f389c45db29e3c", "committedDate": "2020-12-01T16:17:58Z", "message": "Add hash algorithms to PK11Algorithm.java\n\nWhile hash algorithms in JSS currently use the SEC_OID based interface\n(rather than PKCS#11), include them in PK11Algorithm because they have\nequivalent PKCS#11 constant definitions.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ea2761a6ad92c33017dacba452cd8ef6d458df1", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/9ea2761a6ad92c33017dacba452cd8ef6d458df1", "committedDate": "2020-12-01T16:17:59Z", "message": "Implement RSA/OAEP key wrapping\n\nThis depends on support from NSS for two new function calls,\nPK11_PubWrapSymKeyWithMechanism and PK11_PubUnwrapSymKeyWithMechanism.\nThese enable passing OAEP's mechanism parameters into NSS's high-level\nPK11 key wrap/unwrap interface, allowing them to succeed. Otherwise,\nprevious versions of NSS silently converted OAEP to PKCS#1 v1.5,\nallowing the trivial patchset to succeed without any mechanism\nparameters.\n\nIntroduce a JSSOAEPParameterSpec which can consume a JCA-standard\nOAEPParameterSpec instance but which also extends NativeEnclosure to\nallow us to call into the JNI layer with a parameter instance.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc56ecfd16cdb6c83f63bce37bdb0f14b30e8567", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/dc56ecfd16cdb6c83f63bce37bdb0f14b30e8567", "committedDate": "2020-12-01T16:17:59Z", "message": "Support running on older versions of NSS\n\nThis allows us to detect whether or not NSS supports RSA-OAEP key\nwrap/unwrap and if not, disable RSA-OAEP support, gracefully falling\nback to the old method for other mechanisms.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd8acaeb13a4aeb52bdfcc9955ba92eda6db1e8a", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/fd8acaeb13a4aeb52bdfcc9955ba92eda6db1e8a", "committedDate": "2020-12-01T16:17:59Z", "message": "Add class documentation about JSSOAEPParameterSpec\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fbacd87f466405673c2d5dffc90c477f4cc9a9b", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/0fbacd87f466405673c2d5dffc90c477f4cc9a9b", "committedDate": "2020-11-19T20:31:58Z", "message": "Add class documentation about JSSOAEPParameterSpec\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}, "afterCommit": {"oid": "fd8acaeb13a4aeb52bdfcc9955ba92eda6db1e8a", "author": {"user": {"login": "cipherboy", "name": "Alexander Scheel"}}, "url": "https://github.com/dogtagpki/jss/commit/fd8acaeb13a4aeb52bdfcc9955ba92eda6db1e8a", "committedDate": "2020-12-01T16:17:59Z", "message": "Add class documentation about JSSOAEPParameterSpec\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1451, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}