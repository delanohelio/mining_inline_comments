{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyODQwMDM5", "number": 361, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMToyNjowOFrODX_jMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1ODozNVrODYAGCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDg1MDQyOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/provider/javax/crypto/JSSKeyManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMToyNjowOFrOFdmSeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1NToxMVrOFdnD5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4MDM0NA==", "bodyText": "@edewata Is there a better exception here? The existing KeyManagers doesn't raise any exceptions, and this'll get called fairly early in the SSLEngine initialization (though, in Tomcat, that only happens when the first inbound connection occurs).\nThoughts?", "url": "https://github.com/dogtagpki/jss/pull/361#discussion_r366580344", "createdAt": "2020-01-14T21:26:08Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/provider/javax/crypto/JSSKeyManager.java", "diffHunk": "@@ -69,6 +69,16 @@ public String chooseServerAlias(String keyType, Principal[] issuers, Socket sock\n         return null;  // not implemented\n     }\n \n+    public org.mozilla.jss.crypto.X509Certificate getCertificate(String alias) {\n+        try {\n+            CryptoManager cm = CryptoManager.getInstance();\n+            return cm.findCertByNickname(alias);\n+        } catch (Exception e) {\n+            logger.error(e.getMessage(), e);\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "602f345468f7bd77e7bb0e67255fb88ca40e4445"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5Mjk5OA==", "bodyText": "I think the RuntimeException is fine. It's consistent with other methods and I don't have any better suggestion.", "url": "https://github.com/dogtagpki/jss/pull/361#discussion_r366592998", "createdAt": "2020-01-14T21:55:11Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/provider/javax/crypto/JSSKeyManager.java", "diffHunk": "@@ -69,6 +69,16 @@ public String chooseServerAlias(String keyType, Principal[] issuers, Socket sock\n         return null;  // not implemented\n     }\n \n+    public org.mozilla.jss.crypto.X509Certificate getCertificate(String alias) {\n+        try {\n+            CryptoManager cm = CryptoManager.getInstance();\n+            return cm.findCertByNickname(alias);\n+        } catch (Exception e) {\n+            logger.error(e.getMessage(), e);\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4MDM0NA=="}, "originalCommit": {"oid": "602f345468f7bd77e7bb0e67255fb88ca40e4445"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDkzOTYyOnYy", "diffSide": "RIGHT", "path": "org/mozilla/jss/provider/javax/crypto/JSSKeyManager.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1ODozNVrOFdnJpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMzoyODo0NVrOFd4OSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5NDQ3MQ==", "bodyText": "I think we should return a java.security.cert.X509Certificate just like getCertificateChain().\nBTW, I just noticed this in lines 96-98:\nif (!(c instanceof PK11Cert)) {\n    logger.error(\"JSSKeyManager: Can't cast to PK11Cert: \" + c);\n}\n\nThis code is only logging an error message, but the actual error will happen later in line 101:\nlist.add((PK11Cert) c);\n\nI think we can just remove lines 96-98 because line 101 will generate another error message.\nIdeally org.mozilla.jss.crypto.X509Certificate should extend java.security.cert.X509Certificate, but that's a separate issue.", "url": "https://github.com/dogtagpki/jss/pull/361#discussion_r366594471", "createdAt": "2020-01-14T21:58:35Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/provider/javax/crypto/JSSKeyManager.java", "diffHunk": "@@ -69,6 +69,16 @@ public String chooseServerAlias(String keyType, Principal[] issuers, Socket sock\n         return null;  // not implemented\n     }\n \n+    public org.mozilla.jss.crypto.X509Certificate getCertificate(String alias) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "602f345468f7bd77e7bb0e67255fb88ca40e4445"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxOTg5Ng==", "bodyText": "We can't fix the type problem, so we should just choose one and stick with it.\n\nRabbit Hole\nThe difference between a org.mozilla.jss.crypto.X509Certificate and a java.security.cert.X509Certificate are that the former pre-dates the latter by a bit (~2 years). It also doesn't really contain much and is just an interface. PK11Cert -- where all of the magic happens -- implements both.\nThe other problem -- and the bigger reason why this wouldn't necessarily work - is that JSS's X509Certificate is an interface, but Java's X509Certificate is an abstract class.\nSo if we make X509Certificate a class and X509Certificate an interface... you get to figure out how to deal with everything. There's a couple of interfaces:\n\nX509Certificate\nInternalCertificate extends X509Certificate\nTokenCertificate extends X509Certificate\n\nYou also have a couple of classes:\n\nPK11Cert extends java.X509Certertificate implements jss.X509Certertificate\nPK11InternalCert extends PK11Cert implements InternalCertificate\n\nInterfaces can't extend abstract classes. So X509Certificate needs to be an abstract class. If you make that a class you have two options:\n\nEither InternalCertificate and TokenCertificate remain interfaces, but drop the inheritance from jss.X509Certificate. This makes them less useful/powerful, but everything compiles. When you run tests, things seem to work in JSS. I'd bet money though, that we'd have to redo a lot of Dogtag PKI, because there's a bunch of references to InternalCertificate and TokenCertificate there.\nOr we make InternalCertificate and TokenCertificate abstract classes as well. This doesn't work because PK11InternalCertificate extends PK11Cert and also implements InternalCertificate. A class can't extend from two parent classes, so we're stuck.\n\nSo 1 is the only viable approach, but would require extending everything to use concrete implementations (PK11InternalCertificate and PK11TokenCertificate) instead of interfaces. I'm not sure that's a good thing in general.\nComing out of the rabbit hole, we could make JSS's X509Certificate have the same signature as Java's, but I'm not sure that gets us anything.\n\nMy argument is that, since this method doesn't exist on Java's KeyManagers -- and we specifically want a JSSKeyManager instance in JSSEngine where this is used -- we should make this return a JSS X509Certificate, like I have. This lets us (most safely) cast to PK11Cert. There are other Java X509Certificate implementations, but only one core JSS X509Certificate implementation.", "url": "https://github.com/dogtagpki/jss/pull/361#discussion_r366619896", "createdAt": "2020-01-14T23:06:03Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/provider/javax/crypto/JSSKeyManager.java", "diffHunk": "@@ -69,6 +69,16 @@ public String chooseServerAlias(String keyType, Principal[] issuers, Socket sock\n         return null;  // not implemented\n     }\n \n+    public org.mozilla.jss.crypto.X509Certificate getCertificate(String alias) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5NDQ3MQ=="}, "originalCommit": {"oid": "602f345468f7bd77e7bb0e67255fb88ca40e4445"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMDY0MQ==", "bodyText": "FWIW, my response to the second part of your comment is hidden in there:\n\nThere is only one core JSS X509Certificate implementation.\n\nIn other words, the cast from org.mozilla.jss.crypto.X509Certificate to PK11Cert is almost certainly safe. When we get such a c that isn't a PK11Cert, we want to know what object it is specifically (hence  + c on the log statement). I believe that information wouldn't be shown on the cast error, but I could be wrong.", "url": "https://github.com/dogtagpki/jss/pull/361#discussion_r366620641", "createdAt": "2020-01-14T23:08:23Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/provider/javax/crypto/JSSKeyManager.java", "diffHunk": "@@ -69,6 +69,16 @@ public String chooseServerAlias(String keyType, Principal[] issuers, Socket sock\n         return null;  // not implemented\n     }\n \n+    public org.mozilla.jss.crypto.X509Certificate getCertificate(String alias) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5NDQ3MQ=="}, "originalCommit": {"oid": "602f345468f7bd77e7bb0e67255fb88ca40e4445"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzNDI0MA==", "bodyText": "Yeah, I'm not suggesting to fix the X509Certificate hierarchy now :)\nBut if we do, I think the InternalCertificate and  TokenCertificate can be merged into org.mozilla.jss.crypto.X509Certificate (or PK11Cert) which will then extend java.security.cert.X509Certificate.\nI'll let you decide on the return type of getCertificate(). Even if we pick org.mozilla.jss.crypto.X509Certificate, when we eventually fix the hierarchy it shouldn't be much of an issue anymore.\nAbout the type casting, I think something like this will make more sense:\nlogger.debug(\"JSSKeyManager: - \" + c.getSubjectDN());\nif (c instanceof PK11Cert) {\n    list.add((PK11Cert) c);\n} else {\n    throw new ClassCastException(\"Can't cast \" + c.getClass().getName() + \" to PK11Cert: \" + c.getSubjectDN());\n}\n\nNo big deal, I'll leave that up to you. The code looks fine regardless. ACK.", "url": "https://github.com/dogtagpki/jss/pull/361#discussion_r366634240", "createdAt": "2020-01-14T23:55:24Z", "author": {"login": "edewata"}, "path": "org/mozilla/jss/provider/javax/crypto/JSSKeyManager.java", "diffHunk": "@@ -69,6 +69,16 @@ public String chooseServerAlias(String keyType, Principal[] issuers, Socket sock\n         return null;  // not implemented\n     }\n \n+    public org.mozilla.jss.crypto.X509Certificate getCertificate(String alias) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5NDQ3MQ=="}, "originalCommit": {"oid": "602f345468f7bd77e7bb0e67255fb88ca40e4445"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3NDE4Nw==", "bodyText": "ACK, will clean up casting in a separate PR.", "url": "https://github.com/dogtagpki/jss/pull/361#discussion_r366874187", "createdAt": "2020-01-15T13:28:45Z", "author": {"login": "cipherboy"}, "path": "org/mozilla/jss/provider/javax/crypto/JSSKeyManager.java", "diffHunk": "@@ -69,6 +69,16 @@ public String chooseServerAlias(String keyType, Principal[] issuers, Socket sock\n         return null;  // not implemented\n     }\n \n+    public org.mozilla.jss.crypto.X509Certificate getCertificate(String alias) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5NDQ3MQ=="}, "originalCommit": {"oid": "602f345468f7bd77e7bb0e67255fb88ca40e4445"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2729, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}