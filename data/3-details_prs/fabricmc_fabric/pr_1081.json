{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MTUzNDIw", "number": 1081, "title": "Fabric Networking API V1", "bodyText": "This is partially based of off and supersedes #605. This pull request is based off the feature/cut branch on the fablabs drafting repository. This pull request was primarily written by @liach but has been adapted into a new pull request on the FabLabs fabric api fork to continue the pull request.\nThis pull request migrates the networking api to v1 and deprecates the old api (minus player streams which need to be migrated by a different pull request). The old networking api is re-implemented using the new networking api in a backwards compatible way.\nRegistration of custom packet handlers is now done through the client or server networking's play receiver. The interface used to read the packet and apply (originally PacketConsumer) is now much more ergonomic, as it exposes the client and serve respectively along with the network handler. This effectively resolves #345.\nThis pull request also adds the ability for mods to send and handle login query messages. This allows the client and server to communicate much earlier and delay login for the client/server until tasks have been completed on either side (async tasks included).\nEvents related to the connection/disconnection of the client or server were added to the respective Client/ServerConnectionEvents. This effectively resolves #247\nAlso resolves #187, and prepares the groundwork for a system described in #164.", "createdAt": "2020-09-13T09:14:06Z", "url": "https://github.com/FabricMC/fabric/pull/1081", "merged": true, "mergeCommit": {"oid": "3775d21f763296579c0eeb20babcc58b00325edc"}, "closed": true, "closedAt": "2020-12-05T19:06:43Z", "author": {"login": "i509VCB"}, "timelineItems": {"totalCount": 101, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiUsaGAFqTU0MzIxNjg2MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiUsaGAFqTU0MzIxNjg2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMjE2ODYx", "url": "https://github.com/FabricMC/fabric/pull/1081#pullrequestreview-543216861", "createdAt": "2020-12-02T20:37:16Z", "commit": {"oid": "1c931c76571a5b888b1a8fe7f9546f26d6bd03ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ed9ede3e01d9731ac3fa082372450325b362da6", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/3ed9ede3e01d9731ac3fa082372450325b362da6", "committedDate": "2020-09-19T20:02:11Z", "message": "tab"}, "afterCommit": {"oid": "a92f8ebb4714a6dcd90d4fcdb451cbe6ad31e547", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/a92f8ebb4714a6dcd90d4fcdb451cbe6ad31e547", "committedDate": "2020-09-19T20:02:31Z", "message": "tab"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTEyNTc3", "url": "https://github.com/FabricMC/fabric/pull/1081#pullrequestreview-506112577", "createdAt": "2020-10-10T17:13:50Z", "commit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzoxMzo1MVrOHfhLRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzoxMzo1MVrOHfhLRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMTQ2MA==", "bodyText": "This might just be my computer but it looks like this indent is different then below?", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r502811460", "createdAt": "2020-10-10T17:13:51Z", "author": {"login": "RDIL"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientConnectionEvents.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the connection to a server on a logical client.\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientConnectionEvents {\n+\t/**\n+\t * An event for the initialization of the client play network handler.\n+\t *\n+\t * <p>At this stage, the network handler is ready to send packets to the server.\n+\t * Use {@link ClientNetworking#getPlaySender(ClientPlayNetworkHandler)} to obtain the packet sender in the callback.\n+\t */\n+\tpublic static final Event<PlayInitialized> PLAY_INITIALIZED = EventFactory.createArrayBacked(PlayInitialized.class, callbacks -> (handler, client, sender) -> {\n+\t\tfor (PlayInitialized callback : callbacks) {\n+\t\t\tcallback.onPlayInitialized(handler, client, sender);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event for the disconnection of the client play network handler.\n+\t *\n+\t * <p>No packets should be sent when this event is invoked.\n+\t */\n+\tpublic static final Event<PlayDisconnected> PLAY_DISCONNECTED = EventFactory.createArrayBacked(PlayDisconnected.class, callbacks -> (handler, client) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzEzMjgz", "url": "https://github.com/FabricMC/fabric/pull/1081#pullrequestreview-517313283", "createdAt": "2020-10-27T02:56:30Z", "commit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "state": "APPROVED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMjo1NjozMFrOHopnVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzozNDoyOFrOHoqNuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NjkwMw==", "bodyText": "this method should return {@code false} because ultimately implementation details can't definitively be known by interface exposure, but we can suggest that would be the norm", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512386903", "createdAt": "2020-10-27T02:56:30Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ChannelHandlerRegistry.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.util.Identifier;\n+\n+/**\n+ * Associates packets to individual packet reception handlers by channel.\n+ *\n+ * @param <H> the channel handler type\n+ */\n+public interface ChannelHandlerRegistry<H> extends ChannelRegistry {\n+\t/**\n+\t * Registers a handler to a channel.\n+\t *\n+\t * <p>If a handler is already registered to the {@code channel}, this method will return {@code false}, and no change will be made.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4OTQ5Mg==", "bodyText": "This could be further clarified. At first glance understanding what this does is a little difficult. Like when exactly does this trigger.", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512389492", "createdAt": "2020-10-27T03:05:59Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the registration of network channels for a client-side network handler.\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientChannelEvents {\n+\t/**\n+\t * An event for the client play network handler receiving an update indicating the connected server's ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4OTUxNQ==", "bodyText": "Same here", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512389515", "createdAt": "2020-10-27T03:06:04Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the registration of network channels for a client-side network handler.\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientChannelEvents {\n+\t/**\n+\t * An event for the client play network handler receiving an update indicating the connected server's ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */\n+\tpublic static final Event<Registered> REGISTERED = EventFactory.createArrayBacked(Registered.class, callbacks -> (handler, client, sender, channels) -> {\n+\t\tfor (Registered callback : callbacks) {\n+\t\t\tcallback.onChannelRegistered(handler, client, sender, channels);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event for the client play network handler receiving an update indicating the connected server's lack of ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4OTk5NQ==", "bodyText": "I might change this to getPlayReceivers to clarify that this isn't returning one specific play receiver but a registry of play receivers", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512389995", "createdAt": "2020-10-27T03:08:10Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.network.ClientPlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.networking.client.ClientNetworkingDetails;\n+\n+/**\n+ * Offers access to client-side networking functionalities.\n+ *\n+ * <p>Client-side networking functionalities include receiving clientbound packets,\n+ * sending serverbound packets, and events related to client-side network handlers.</p>\n+ *\n+ * <p>This class should be only used on the physical client and for the logical client.</p>\n+ *\n+ * @see ServerNetworking\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientNetworking {\n+\t/**\n+\t * Returns the packet sender for the current client player.\n+\t *\n+\t * <p>This is a shortcut method for getting a sender.\n+\t * When a client play network handler is available, {@link #getPlaySender(ClientPlayNetworkHandler)} is preferred.\n+\t *\n+\t * @return the packet sender for the current client player\n+\t * @throws IllegalStateException if the client's player is {@code null}\n+\t */\n+\tpublic static PlayPacketSender getPlaySender() throws IllegalStateException {\n+\t\tClientPlayerEntity player = MinecraftClient.getInstance().player;\n+\n+\t\tif (player == null) {\n+\t\t\tthrow new IllegalStateException(\"Cannot get packet sender when not in game!\");\n+\t\t}\n+\n+\t\treturn getPlaySender(player.networkHandler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet sender for a client play network handler.\n+\t *\n+\t * @param handler a client play network handler\n+\t * @return the associated packet sender\n+\t */\n+\tpublic static PlayPacketSender getPlaySender(ClientPlayNetworkHandler handler) {\n+\t\treturn ClientNetworkingDetails.getAddon(handler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client play network handlers, receiving {@link net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket server to client custom payload packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<PlayChannelHandler> getPlayReceiver() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MDA3Ng==", "bodyText": "Same here getLoginReceivers", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512390076", "createdAt": "2020-10-27T03:08:28Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.network.ClientPlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.networking.client.ClientNetworkingDetails;\n+\n+/**\n+ * Offers access to client-side networking functionalities.\n+ *\n+ * <p>Client-side networking functionalities include receiving clientbound packets,\n+ * sending serverbound packets, and events related to client-side network handlers.</p>\n+ *\n+ * <p>This class should be only used on the physical client and for the logical client.</p>\n+ *\n+ * @see ServerNetworking\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientNetworking {\n+\t/**\n+\t * Returns the packet sender for the current client player.\n+\t *\n+\t * <p>This is a shortcut method for getting a sender.\n+\t * When a client play network handler is available, {@link #getPlaySender(ClientPlayNetworkHandler)} is preferred.\n+\t *\n+\t * @return the packet sender for the current client player\n+\t * @throws IllegalStateException if the client's player is {@code null}\n+\t */\n+\tpublic static PlayPacketSender getPlaySender() throws IllegalStateException {\n+\t\tClientPlayerEntity player = MinecraftClient.getInstance().player;\n+\n+\t\tif (player == null) {\n+\t\t\tthrow new IllegalStateException(\"Cannot get packet sender when not in game!\");\n+\t\t}\n+\n+\t\treturn getPlaySender(player.networkHandler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet sender for a client play network handler.\n+\t *\n+\t * @param handler a client play network handler\n+\t * @return the associated packet sender\n+\t */\n+\tpublic static PlayPacketSender getPlaySender(ClientPlayNetworkHandler handler) {\n+\t\treturn ClientNetworkingDetails.getAddon(handler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client play network handlers, receiving {@link net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket server to client custom payload packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<PlayChannelHandler> getPlayReceiver() {\n+\t\treturn ClientNetworkingDetails.PLAY;\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client login network handlers, receiving {@link net.minecraft.network.packet.s2c.login.LoginQueryRequestS2CPacket login query request packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<LoginChannelHandler> getLoginReceiver() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MDQyOQ==", "bodyText": "Doesn't this have the opportunity to throw an exception? If so, that should be mentioned in the javadoc.", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512390429", "createdAt": "2020-10-27T03:09:40Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.network.ClientPlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.networking.client.ClientNetworkingDetails;\n+\n+/**\n+ * Offers access to client-side networking functionalities.\n+ *\n+ * <p>Client-side networking functionalities include receiving clientbound packets,\n+ * sending serverbound packets, and events related to client-side network handlers.</p>\n+ *\n+ * <p>This class should be only used on the physical client and for the logical client.</p>\n+ *\n+ * @see ServerNetworking\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientNetworking {\n+\t/**\n+\t * Returns the packet sender for the current client player.\n+\t *\n+\t * <p>This is a shortcut method for getting a sender.\n+\t * When a client play network handler is available, {@link #getPlaySender(ClientPlayNetworkHandler)} is preferred.\n+\t *\n+\t * @return the packet sender for the current client player\n+\t * @throws IllegalStateException if the client's player is {@code null}\n+\t */\n+\tpublic static PlayPacketSender getPlaySender() throws IllegalStateException {\n+\t\tClientPlayerEntity player = MinecraftClient.getInstance().player;\n+\n+\t\tif (player == null) {\n+\t\t\tthrow new IllegalStateException(\"Cannot get packet sender when not in game!\");\n+\t\t}\n+\n+\t\treturn getPlaySender(player.networkHandler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet sender for a client play network handler.\n+\t *\n+\t * @param handler a client play network handler\n+\t * @return the associated packet sender\n+\t */\n+\tpublic static PlayPacketSender getPlaySender(ClientPlayNetworkHandler handler) {\n+\t\treturn ClientNetworkingDetails.getAddon(handler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client play network handlers, receiving {@link net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket server to client custom payload packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<PlayChannelHandler> getPlayReceiver() {\n+\t\treturn ClientNetworkingDetails.PLAY;\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client login network handlers, receiving {@link net.minecraft.network.packet.s2c.login.LoginQueryRequestS2CPacket login query request packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<LoginChannelHandler> getLoginReceiver() {\n+\t\treturn ClientNetworkingDetails.LOGIN;\n+\t}\n+\n+\t/**\n+\t * Sends a packet to the connected server.\n+\t *\n+\t * @param channel the channel of the packet\n+\t * @param buf the payload of the packet\n+\t */\n+\tpublic static void send(Identifier channel, PacketByteBuf buf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MDgxOA==", "bodyText": "Also maybe there should be a method similar to getPlaySender(ClientPlayNetworkHandler handler) and getPlaySender() throws IllegalStateException that is send(ClientPlayNetworkHandler handler, Identifier channel, PacketByteBuf buf)", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512390818", "createdAt": "2020-10-27T03:10:56Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.network.ClientPlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.networking.client.ClientNetworkingDetails;\n+\n+/**\n+ * Offers access to client-side networking functionalities.\n+ *\n+ * <p>Client-side networking functionalities include receiving clientbound packets,\n+ * sending serverbound packets, and events related to client-side network handlers.</p>\n+ *\n+ * <p>This class should be only used on the physical client and for the logical client.</p>\n+ *\n+ * @see ServerNetworking\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientNetworking {\n+\t/**\n+\t * Returns the packet sender for the current client player.\n+\t *\n+\t * <p>This is a shortcut method for getting a sender.\n+\t * When a client play network handler is available, {@link #getPlaySender(ClientPlayNetworkHandler)} is preferred.\n+\t *\n+\t * @return the packet sender for the current client player\n+\t * @throws IllegalStateException if the client's player is {@code null}\n+\t */\n+\tpublic static PlayPacketSender getPlaySender() throws IllegalStateException {\n+\t\tClientPlayerEntity player = MinecraftClient.getInstance().player;\n+\n+\t\tif (player == null) {\n+\t\t\tthrow new IllegalStateException(\"Cannot get packet sender when not in game!\");\n+\t\t}\n+\n+\t\treturn getPlaySender(player.networkHandler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet sender for a client play network handler.\n+\t *\n+\t * @param handler a client play network handler\n+\t * @return the associated packet sender\n+\t */\n+\tpublic static PlayPacketSender getPlaySender(ClientPlayNetworkHandler handler) {\n+\t\treturn ClientNetworkingDetails.getAddon(handler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client play network handlers, receiving {@link net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket server to client custom payload packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<PlayChannelHandler> getPlayReceiver() {\n+\t\treturn ClientNetworkingDetails.PLAY;\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client login network handlers, receiving {@link net.minecraft.network.packet.s2c.login.LoginQueryRequestS2CPacket login query request packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<LoginChannelHandler> getLoginReceiver() {\n+\t\treturn ClientNetworkingDetails.LOGIN;\n+\t}\n+\n+\t/**\n+\t * Sends a packet to the connected server.\n+\t *\n+\t * @param channel the channel of the packet\n+\t * @param buf the payload of the packet\n+\t */\n+\tpublic static void send(Identifier channel, PacketByteBuf buf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTA3Mw==", "bodyText": "Where did the rest of this sentence go. I'm dying to know what it says", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512391073", "createdAt": "2020-10-27T03:12:07Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.network.ClientPlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.networking.client.ClientNetworkingDetails;\n+\n+/**\n+ * Offers access to client-side networking functionalities.\n+ *\n+ * <p>Client-side networking functionalities include receiving clientbound packets,\n+ * sending serverbound packets, and events related to client-side network handlers.</p>\n+ *\n+ * <p>This class should be only used on the physical client and for the logical client.</p>\n+ *\n+ * @see ServerNetworking\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientNetworking {\n+\t/**\n+\t * Returns the packet sender for the current client player.\n+\t *\n+\t * <p>This is a shortcut method for getting a sender.\n+\t * When a client play network handler is available, {@link #getPlaySender(ClientPlayNetworkHandler)} is preferred.\n+\t *\n+\t * @return the packet sender for the current client player\n+\t * @throws IllegalStateException if the client's player is {@code null}\n+\t */\n+\tpublic static PlayPacketSender getPlaySender() throws IllegalStateException {\n+\t\tClientPlayerEntity player = MinecraftClient.getInstance().player;\n+\n+\t\tif (player == null) {\n+\t\t\tthrow new IllegalStateException(\"Cannot get packet sender when not in game!\");\n+\t\t}\n+\n+\t\treturn getPlaySender(player.networkHandler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet sender for a client play network handler.\n+\t *\n+\t * @param handler a client play network handler\n+\t * @return the associated packet sender\n+\t */\n+\tpublic static PlayPacketSender getPlaySender(ClientPlayNetworkHandler handler) {\n+\t\treturn ClientNetworkingDetails.getAddon(handler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client play network handlers, receiving {@link net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket server to client custom payload packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<PlayChannelHandler> getPlayReceiver() {\n+\t\treturn ClientNetworkingDetails.PLAY;\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client login network handlers, receiving {@link net.minecraft.network.packet.s2c.login.LoginQueryRequestS2CPacket login query request packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<LoginChannelHandler> getLoginReceiver() {\n+\t\treturn ClientNetworkingDetails.LOGIN;\n+\t}\n+\n+\t/**\n+\t * Sends a packet to the connected server.\n+\t *\n+\t * @param channel the channel of the packet\n+\t * @param buf the payload of the packet\n+\t */\n+\tpublic static void send(Identifier channel, PacketByteBuf buf) {\n+\t\tgetPlaySender().sendPacket(channel, buf);\n+\t}\n+\n+\t@Environment(EnvType.CLIENT)\n+\t@FunctionalInterface\n+\tpublic interface PlayChannelHandler {\n+\t\t/**\n+\t\t * Handles an incoming packet.\n+\t\t *\n+\t\t * <p>This method is executed on {@linkplain io.netty.channel.EventLoop netty's event loops}.\n+\t\t * Modification to the game should be {@linkplain net.minecraft.util.thread.ThreadExecutor#submit(Runnable) scheduled} using the provided Minecraft client instance.\n+\t\t *\n+\t\t * <p>An example usage of this is to display a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTYyOQ==", "bodyText": "Just highlighting this as something that is on the to-do list for others looking at this review to get a synopsis", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512391629", "createdAt": "2020-10-27T03:14:13Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayPacketSender.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import net.minecraft.util.Identifier;\n+\n+/**\n+ * Supports sending packets to channels in the play network handlers.\n+ *\n+ * <p>Compared to a simple packet sender, the play packet sender is informed if its connected recipient may {@link #hasChannel(Identifier) accept packets in certain channels}.\n+ * <!--TODO: Implement use of system property-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTg4NQ==", "bodyText": "Similar to the comment I made on the client side, more specifics about when this occurs would be good in the javadoc", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512391885", "createdAt": "2020-10-27T03:15:08Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerPlayNetworkHandler;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the registration of network channels for a server-side network handler.\n+ */\n+public final class ServerChannelEvents {\n+\t/**\n+\t * An event for the server play network handler receiving an update indicating the connected client's ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */\n+\tpublic static final Event<Registered> REGISTERED = EventFactory.createArrayBacked(Registered.class, callbacks -> (handler, server, sender, channels) -> {\n+\t\tfor (Registered callback : callbacks) {\n+\t\t\tcallback.onChannelRegistered(handler, server, sender, channels);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event for the server play network handler receiving an update indicating the connected client's lack of ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTkxMA==", "bodyText": "Same here see below", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512391910", "createdAt": "2020-10-27T03:15:15Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerPlayNetworkHandler;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the registration of network channels for a server-side network handler.\n+ */\n+public final class ServerChannelEvents {\n+\t/**\n+\t * An event for the server play network handler receiving an update indicating the connected client's ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MjM4MQ==", "bodyText": "What's this comment for?", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512392381", "createdAt": "2020-10-27T03:17:11Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/AbstractChanneledNetworkAddon.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.networking;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import io.netty.util.AsciiString;\n+\n+import net.minecraft.network.ClientConnection;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.InvalidIdentifierException;\n+\n+import net.fabricmc.fabric.api.networking.v1.PacketByteBufs;\n+import net.fabricmc.fabric.api.networking.v1.PlayPacketSender;\n+\n+// play", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NjcyOQ==", "bodyText": "This is definitely me missing the point, but what is this for exactly?", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512396729", "createdAt": "2020-10-27T03:34:28Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-v0/src/main/java/net/fabricmc/fabric/impl/networking/OldNetworkingHooks.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.networking;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.network.C2SPacketTypeCallback;\n+import net.fabricmc.fabric.api.networking.v1.ServerChannelEvents;\n+\n+public final class OldNetworkingHooks implements ModInitializer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "committedDate": "2020-10-02T02:43:55Z", "message": "Mark all client side stuff client only, move client mixins"}, "afterCommit": {"oid": "f0efb180ef0b1fe0cdc7c32669d9ba5ad94a3f3c", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/f0efb180ef0b1fe0cdc7c32669d9ba5ad94a3f3c", "committedDate": "2020-10-27T22:46:56Z", "message": "Mark all client side stuff client only, move client mixins"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b05af414e49fb9fd2549f2f47a0409058d0923d7", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/b05af414e49fb9fd2549f2f47a0409058d0923d7", "committedDate": "2020-10-28T02:07:57Z", "message": "Add a missing FunctionalInterface annotation"}, "afterCommit": {"oid": "ba51574ba6b427ca958109d704b50a3f9a0a8dd0", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ba51574ba6b427ca958109d704b50a3f9a0a8dd0", "committedDate": "2020-10-29T23:36:40Z", "message": "Add a missing FunctionalInterface annotation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16a12688c755ff400807da130c060bfd9e9f4f09", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/16a12688c755ff400807da130c060bfd9e9f4f09", "committedDate": "2020-11-02T08:39:11Z", "message": "Start reimplementing global receivers. Still very hacky solution."}, "afterCommit": {"oid": "2a369dd2398dc0f6783f076e6b96e0784c88e547", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/2a369dd2398dc0f6783f076e6b96e0784c88e547", "committedDate": "2020-11-03T04:31:52Z", "message": "Start reimplementing global receivers. Still very hacky solution."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16850e3d6200f8ef6fb1fdd25ac400f350c61842", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/16850e3d6200f8ef6fb1fdd25ac400f350c61842", "committedDate": "2020-11-14T07:36:25Z", "message": "thisening"}, "afterCommit": {"oid": "a9522e87f9656ad080dbba6bc698fbeec0261821", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/a9522e87f9656ad080dbba6bc698fbeec0261821", "committedDate": "2020-11-14T07:38:11Z", "message": "thisening"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62302497bfa1ec5dc923928864930c2231bfee81", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/62302497bfa1ec5dc923928864930c2231bfee81", "committedDate": "2020-11-15T23:38:53Z", "message": "Add the two missing private ctors"}, "afterCommit": {"oid": "c4fabf0d840e554af90ead0bf3e94126a794e1f9", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/c4fabf0d840e554af90ead0bf3e94126a794e1f9", "committedDate": "2020-11-15T23:51:39Z", "message": "buildscript update to upstream"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTM0Njcw", "url": "https://github.com/FabricMC/fabric/pull/1081#pullrequestreview-531134670", "createdAt": "2020-11-16T09:14:27Z", "commit": {"oid": "b6991c3121b94eae120dcd025e9fa6148ae63079"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTQ5MjY5", "url": "https://github.com/FabricMC/fabric/pull/1081#pullrequestreview-531149269", "createdAt": "2020-11-16T09:33:10Z", "commit": {"oid": "b6991c3121b94eae120dcd025e9fa6148ae63079"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTozMzoxMVrOHzwC0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTo0MDo0MlrOHzwkPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyNjU3Ng==", "bodyText": "This (and its inner classes) should be annotated with @Environment(EnvType.CLIENT)", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r524026576", "createdAt": "2020-11-16T09:33:11Z", "author": {"login": "shedaniel"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/client/networking/v1/ClientLoginConnectionEvents.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.networking.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the connection to a server on the client while the server is processing the client's login request.\n+ */\n+public final class ClientLoginConnectionEvents {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6991c3121b94eae120dcd025e9fa6148ae63079"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAzNTEzMw==", "bodyText": "Would returning an Iterable or Iterator be sufficient in order to not creating a list?", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r524035133", "createdAt": "2020-11-16T09:40:42Z", "author": {"login": "shedaniel"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerPlayerEntity;\n+import net.minecraft.server.world.ServerChunkManager;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.server.world.ThreadedAnvilChunkStorage;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.ChunkPos;\n+import net.minecraft.util.math.Vec3d;\n+import net.minecraft.util.math.Vec3i;\n+import net.minecraft.world.chunk.ChunkManager;\n+\n+import net.fabricmc.fabric.impl.networking.ThreadedAnvilChunkStorageTrackingExtensions;\n+\n+/**\n+ * For example, a block entity may use the methods in this class to send a packet to all clients which can see the block entity in order notify clients about a change.\n+ *\n+ * <p>The word \"tracking\" means that an entity/chunk on the server is known to a player's client (within in view distance) and the (block) entity should notify tracking clients of changes.\n+ *\n+ * <p>These methods should only be called on the server thread and only be used on logical a server.\n+ */\n+public final class PlayerLookup {\n+\t/**\n+\t * Gets all the players on the minecraft server.\n+\t *\n+\t * <p>The returned collection is immutable.\n+\t *\n+\t * @param server the server\n+\t * @return all players on the server\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> all(MinecraftServer server) {\n+\t\tObjects.requireNonNull(server, \"The server cannot be null\");\n+\n+\t\t// return an immutable collection to guard against accidental removals.\n+\t\tif (server.getPlayerManager() != null) {\n+\t\t\treturn Collections.unmodifiableCollection(server.getPlayerManager().getPlayerList());\n+\t\t}\n+\n+\t\treturn Collections.emptyList();\n+\t}\n+\n+\t/**\n+\t * Gets all the players in a server world.\n+\t *\n+\t * <p>The returned collection is immutable.\n+\t *\n+\t * @param world the server world\n+\t * @return the players in the server world\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> world(ServerWorld world) {\n+\t\tObjects.requireNonNull(world, \"The world cannot be null\");\n+\n+\t\t// return an immutable collection to guard against accidental removals.\n+\t\treturn Collections.unmodifiableCollection(world.getPlayers());\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking a chunk in a server world.\n+\t *\n+\t * @param world the server world\n+\t * @param pos   the chunk in question\n+\t * @return the players tracking the chunk\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(ServerWorld world, ChunkPos pos) {\n+\t\tObjects.requireNonNull(world, \"The world cannot be null\");\n+\t\tObjects.requireNonNull(pos, \"The chunk pos cannot be null\");\n+\n+\t\treturn world.getChunkManager().threadedAnvilChunkStorage.getPlayersWatchingChunk(pos, false).collect(Collectors.toList());\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking an entity in a server world.\n+\t *\n+\t * <p>The returned collection is immutable.\n+\t *\n+\t * <p><b>Warning</b>: If the provided entity is a player, it is not\n+\t * guaranteed by the contract that said player is included in the\n+\t * resulting stream.\n+\t *\n+\t * @param entity the entity being tracked\n+\t * @return the players tracking the entity\n+\t * @throws IllegalArgumentException if the entity is not in a server world\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(Entity entity) {\n+\t\tObjects.requireNonNull(entity, \"Entity cannot be null\");\n+\t\tChunkManager manager = entity.world.getChunkManager();\n+\n+\t\tif (manager instanceof ServerChunkManager) {\n+\t\t\tThreadedAnvilChunkStorage storage = ((ServerChunkManager) manager).threadedAnvilChunkStorage;\n+\n+\t\t\t// return an immutable collection to guard against accidental removals.\n+\t\t\treturn Collections.unmodifiableCollection(((ThreadedAnvilChunkStorageTrackingExtensions) storage).fabric_getTrackingPlayers(entity));\n+\t\t}\n+\n+\t\tthrow new IllegalArgumentException(\"Only supported on server worlds!\");\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking a block entity in a server world.\n+\t *\n+\t * @param blockEntity the block entity\n+\t * @return the players tracking the block position\n+\t * @throws IllegalArgumentException if the block entity is not in a server world\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(BlockEntity blockEntity) {\n+\t\tObjects.requireNonNull(blockEntity, \"BlockEntity cannot be null\");\n+\n+\t\t//noinspection ConstantConditions - IJ intrinsics don't know hasWorld == true will result in no null\n+\t\tif (!blockEntity.hasWorld() || blockEntity.getWorld().isClient()) {\n+\t\t\tthrow new IllegalArgumentException(\"Only supported on server worlds!\");\n+\t\t}\n+\n+\t\treturn tracking((ServerWorld) blockEntity.getWorld(), blockEntity.getPos());\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking a block position in a server world.\n+\t *\n+\t * @param world the server world\n+\t * @param pos   the block position\n+\t * @return the players tracking the block position\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(ServerWorld world, BlockPos pos) {\n+\t\tObjects.requireNonNull(pos, \"BlockPos cannot be null\");\n+\n+\t\treturn tracking(world, new ChunkPos(pos));\n+\t}\n+\n+\t/**\n+\t * Gets all players around a position in a world.\n+\t *\n+\t * <p>The distance check is done in the three-dimensional space instead of in the horizontal plane.\n+\t *\n+\t * @param world  the world\n+\t * @param pos the position\n+\t * @param radius the maximum distance from the position in blocks\n+\t * @return the players around the position\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> around(ServerWorld world, Vec3d pos, double radius) {\n+\t\tdouble radiusSq = radius * radius;\n+\n+\t\treturn world(world)\n+\t\t\t\t.stream()\n+\t\t\t\t.filter((p) -> p.squaredDistanceTo(pos) <= radiusSq)\n+\t\t\t\t.collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6991c3121b94eae120dcd025e9fa6148ae63079"}, "originalPosition": 169}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNzM1ODg1", "url": "https://github.com/FabricMC/fabric/pull/1081#pullrequestreview-531735885", "createdAt": "2020-11-16T20:36:50Z", "commit": {"oid": "62efa1c4dd6a15044e5b6002d99e9c21e4456f12"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MDU2NzQ2", "url": "https://github.com/FabricMC/fabric/pull/1081#pullrequestreview-536056746", "createdAt": "2020-11-22T12:24:23Z", "commit": {"oid": "215f2f909cf6da420b030cb1e4bea8b2f1359295"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyNDoyM1rOH32ksw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyNDoyM1rOH32ksw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyNzg1OQ==", "bodyText": "I dont think this player tracking stuff belongs here? The module is not included in gradle?", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r528327859", "createdAt": "2020-11-22T12:24:23Z", "author": {"login": "modmuss50"}, "path": "fabric-player-tracking-api-v1/src/main/resources/fabric.mod.json", "diffHunk": "@@ -0,0 +1,26 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215f2f909cf6da420b030cb1e4bea8b2f1359295"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MDU3MDQ3", "url": "https://github.com/FabricMC/fabric/pull/1081#pullrequestreview-536057047", "createdAt": "2020-11-22T12:28:19Z", "commit": {"oid": "215f2f909cf6da420b030cb1e4bea8b2f1359295"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyODoxOVrOH32mcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjozMjoyM1rOH32ogw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyODMwNg==", "bodyText": "Disable this by default, its a fine test just dont really want this all the time when using the test mods :D", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r528328306", "createdAt": "2020-11-22T12:28:19Z", "author": {"login": "modmuss50"}, "path": "fabric-networking-api-v1/src/testmod/java/net/fabricmc/fabric/test/networking/login/NetworkingLoginQueryTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.networking.login;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.FutureTask;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerLoginNetworkHandler;\n+import net.minecraft.util.Util;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.networking.v1.ServerLoginConnectionEvents;\n+import net.fabricmc.fabric.api.networking.v1.PacketByteBufs;\n+import net.fabricmc.fabric.api.networking.v1.PacketSender;\n+import net.fabricmc.fabric.api.networking.v1.ServerLoginNetworking;\n+import net.fabricmc.fabric.test.networking.NetworkingTestmods;\n+import net.fabricmc.fabric.test.networking.play.NetworkingPlayPacketTest;\n+\n+public final class NetworkingLoginQueryTest implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tServerLoginConnectionEvents.LOGIN_QUERY_START.register(this::onLoginStart);\n+\t\tServerLoginConnectionEvents.LOGIN_QUERY_START.register(this::delaySimply);\n+\n+\t\t// login delaying example\n+\t\tServerLoginNetworking.registerGlobalReceiver(NetworkingPlayPacketTest.TEST_CHANNEL, (server, handler, understood, buf, synchronizer, sender) -> {\n+\t\t\tif (understood) {\n+\t\t\t\tFutureTask<?> future = new FutureTask<>(() -> {\n+\t\t\t\t\tfor (int i = 0; i <= 10; i++) {\n+\t\t\t\t\t\tThread.sleep(300);\n+\t\t\t\t\t\tNetworkingTestmods.LOGGER.info(\"Delayed login for number {} 300 milliseconds\", i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215f2f909cf6da420b030cb1e4bea8b2f1359295"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyODgzNQ==", "bodyText": "Need fixing apparenly.", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r528328835", "createdAt": "2020-11-22T12:32:23Z", "author": {"login": "modmuss50"}, "path": "fabric-networking-api-v1/src/testmod/java/net/fabricmc/fabric/test/networking/keybindreciever/NetworkingKeybindPacketTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.networking.keybindreciever;\n+\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerPlayerEntity;\n+import net.minecraft.text.KeybindText;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.util.Formatting;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.networking.v1.PacketSender;\n+import net.fabricmc.fabric.api.networking.v1.ServerPlayNetworking;\n+import net.fabricmc.fabric.test.networking.NetworkingTestmods;\n+\n+// Listens for a packet from the client which is sent to the server when a keybinding is pressed.\n+// In response the server will send a message containing the keybind text letting the client know it pressed that key.\n+public final class NetworkingKeybindPacketTest implements ModInitializer {\n+\tpublic static final Identifier KEYBINDING_PACKET_ID = NetworkingTestmods.id(\"keybind_press_test\");\n+\n+\tprivate static void receive(MinecraftServer server, ServerPlayerEntity player, PacketByteBuf buf, PacketSender responseSender) {\n+\t\t// TODO: Can we send chat off the server thread?\n+\t\tserver.execute(() -> {\n+\t\t\tplayer.sendMessage(new LiteralText(\"So you pressed \").append(new KeybindText(\"fabric-networking-api-v1-testmod-keybind\").styled(style -> style.withFormatting(Formatting.BLUE))), false);\n+\t\t});\n+\t}\n+\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// FIXME: DO NOT LET ME PR THIS BEFORE FIXING IT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215f2f909cf6da420b030cb1e4bea8b2f1359295"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7866409d201dbc357dfce21a5ebb05ebd3eff796", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/7866409d201dbc357dfce21a5ebb05ebd3eff796", "committedDate": "2020-11-22T20:13:46Z", "message": "Networking api v1\n\n\n\n\nSome final docs?\n\n\nLicenses and testmod\n\n\nFix a bunch o imports and make things work for v1 (v0 is bork)\n\n\nMake the testmod pass checkstyle and work\n\n\nDocs for v1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb38e9756b94c8b7f63a3683cc2c7932cfaf6370", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/cb38e9756b94c8b7f63a3683cc2c7932cfaf6370", "committedDate": "2020-11-22T20:13:46Z", "message": "Deprecate v0 and implement using v1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "821449aaf1b0c8c001d0346db0444e86addd8e0c", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/821449aaf1b0c8c001d0346db0444e86addd8e0c", "committedDate": "2020-11-22T20:13:46Z", "message": "Drop files down one package due to package check error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74a5192f424e4d7a0b14459a5653334bb42ef804", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/74a5192f424e4d7a0b14459a5653334bb42ef804", "committedDate": "2020-11-22T20:13:46Z", "message": "Fix issue with channel registration, add another testmod"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f248a0efd43806a18ac0adc7cbbe4a2658f4e91", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/0f248a0efd43806a18ac0adc7cbbe4a2658f4e91", "committedDate": "2020-11-22T20:13:46Z", "message": "jaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaavadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42b360bb9bb42dcdfaf997299b7002b24382693a", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/42b360bb9bb42dcdfaf997299b7002b24382693a", "committedDate": "2020-11-22T20:13:46Z", "message": "Make javadoc use `code`, move impl interface to package access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad73875b92ae72c74898ca51007d66261d86bca0", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ad73875b92ae72c74898ca51007d66261d86bca0", "committedDate": "2020-11-22T20:13:46Z", "message": "this things"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91711353e7ff2642352aa40f3261d8a40c25a37c", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/91711353e7ff2642352aa40f3261d8a40c25a37c", "committedDate": "2020-11-22T20:13:46Z", "message": "Rename a few internal methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45fe5ca44ed571decbd4869f00d1377d8991c6e3", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/45fe5ca44ed571decbd4869f00d1377d8991c6e3", "committedDate": "2020-11-22T20:13:46Z", "message": "Mark all client side stuff client only, move client mixins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e76709b01877153ed9b14b7ac24922916c99269f", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/e76709b01877153ed9b14b7ac24922916c99269f", "committedDate": "2020-11-22T20:13:46Z", "message": "Add null checks around the place, clarify some javadoc and method names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97dafb849135e79b3e5cf13ae4e415069e0678ca", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/97dafb849135e79b3e5cf13ae4e415069e0678ca", "committedDate": "2020-11-22T20:13:46Z", "message": "Make FutureListeners uninstantiable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a57967059594bc4e105d522dd606ade19c56ed55", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/a57967059594bc4e105d522dd606ade19c56ed55", "committedDate": "2020-11-22T20:13:46Z", "message": "Some internal nullable annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "648e3c619ab304a374fdeebb623fabfe9a311af5", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/648e3c619ab304a374fdeebb623fabfe9a311af5", "committedDate": "2020-11-22T20:13:46Z", "message": "An impl class I forgot to rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14ed357c337b01fd2171e055d88c205d3834aedf", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/14ed357c337b01fd2171e055d88c205d3834aedf", "committedDate": "2020-11-22T20:13:46Z", "message": "Some comments and clarify some client login handler javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ec39a467ed84b3be2927900ee99ada2d4db9520", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/9ec39a467ed84b3be2927900ee99ada2d4db9520", "committedDate": "2020-11-22T20:13:46Z", "message": "Add a missing FunctionalInterface annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db4ee6b5b3e5db37cd89831e8549f416c16032ea", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/db4ee6b5b3e5db37cd89831e8549f416c16032ea", "committedDate": "2020-11-22T20:13:46Z", "message": "Split play and login, move client stuff to right package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b839e27491f6b96da5401f9710e4720682ed4fa", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/4b839e27491f6b96da5401f9710e4720682ed4fa", "committedDate": "2020-11-22T20:13:46Z", "message": "No interface left behind"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f0c378f2a18f01cf7aec103488bcf2dd8c9502f", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/0f0c378f2a18f01cf7aec103488bcf2dd8c9502f", "committedDate": "2020-11-22T20:13:46Z", "message": "Inline channel registries in api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b38787dd688e75c13a8cf8f1dc53b5d58a5f08ec", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/b38787dd688e75c13a8cf8f1dc53b5d58a5f08ec", "committedDate": "2020-11-22T20:13:46Z", "message": "Login and play subpackages not needed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f4403d3850e2b8863f2757d31372861693c87d8", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/5f4403d3850e2b8863f2757d31372861693c87d8", "committedDate": "2020-11-22T20:13:46Z", "message": "Add helper method to create play custom packets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16b99901261a52737fa4d535906a3e9c28832958", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/16b99901261a52737fa4d535906a3e9c28832958", "committedDate": "2020-11-22T20:13:46Z", "message": "hasGlobalChannel -> hasGlobalReceiver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b575fed32e809d007427f5e5670fcb5d4efd8645", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/b575fed32e809d007427f5e5670fcb5d4efd8645", "committedDate": "2020-11-22T20:13:46Z", "message": "Just rename the collection method for now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fad4ad3b29334ed9dd6960d707c6295917d87fdc", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/fad4ad3b29334ed9dd6960d707c6295917d87fdc", "committedDate": "2020-11-22T20:13:46Z", "message": "Inline PlayPacketSender into static methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f7a25a3608300224b0122b67e8674fc9f2b4f82", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/1f7a25a3608300224b0122b67e8674fc9f2b4f82", "committedDate": "2020-11-22T20:13:46Z", "message": "Start on testmod idea for verifying dynamic registration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fd50e8d3433f72a495f465c837fc6ceb4e47842", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/2fd50e8d3433f72a495f465c837fc6ceb4e47842", "committedDate": "2020-11-22T20:13:46Z", "message": "Add client login events"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6af53ffafd12a99c1cb80bec970024ae093596c9", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/6af53ffafd12a99c1cb80bec970024ae093596c9", "committedDate": "2020-11-22T20:13:46Z", "message": "You don't say hello when talking to yourself.\n\nAlso more testmod stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61c01adb3f01bd02f7dc8b22c8e22c9a03933d79", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/61c01adb3f01bd02f7dc8b22c8e22c9a03933d79", "committedDate": "2020-11-22T20:13:46Z", "message": "Make event names present tense"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f903dd407ddf01cea0fe024a1039d834dcccc1e", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/6f903dd407ddf01cea0fe024a1039d834dcccc1e", "committedDate": "2020-11-22T20:13:46Z", "message": "Some javadoc and impl interface rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30d49b147b1a7ab4ffbd5449f7a79937e8e1322c", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/30d49b147b1a7ab4ffbd5449f7a79937e8e1322c", "committedDate": "2020-11-22T20:13:46Z", "message": "Change the test keybinding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7932d89b61558502618b77ad2428e96cd4c0a4e5", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/7932d89b61558502618b77ad2428e96cd4c0a4e5", "committedDate": "2020-11-22T20:13:46Z", "message": "Begin working on dynamic reg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de15bf06ac36d43771ad1cfb599ff3b0e95a770a", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/de15bf06ac36d43771ad1cfb599ff3b0e95a770a", "committedDate": "2020-11-22T20:13:46Z", "message": "Dynamic reg works, just need a lot of cleanup and reimpling global"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cebf6a90eee75017e9252969b26120847ef996d5", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/cebf6a90eee75017e9252969b26120847ef996d5", "committedDate": "2020-11-22T20:13:46Z", "message": "A few renames, readd global methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "646843dc1880715107ccf2eaf45539885bd75afd", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/646843dc1880715107ccf2eaf45539885bd75afd", "committedDate": "2020-11-22T20:13:46Z", "message": "Try to reduce the amount of duplicate registration logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba29bc14e30742d1c530afd14be1ea09e51df834", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ba29bc14e30742d1c530afd14be1ea09e51df834", "committedDate": "2020-11-22T20:13:46Z", "message": "Reimplement dynamic accessors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b62ee09e42a71cabb59cc58bf5708155e118c04", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/3b62ee09e42a71cabb59cc58bf5708155e118c04", "committedDate": "2020-11-22T20:13:46Z", "message": "More impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dae9571693644266d37b56244fa1dee042c953d3", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/dae9571693644266d37b56244fa1dee042c953d3", "committedDate": "2020-11-22T20:13:46Z", "message": "Start reimplementing global receivers. Still very hacky solution."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83adfe8436379d18e26ee7bbf43744907fd2cf37", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/83adfe8436379d18e26ee7bbf43744907fd2cf37", "committedDate": "2020-11-22T20:13:46Z", "message": "Reimplement some server global reciever stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d4b2c68b597a2173fc2be0dc699c17196bb0023", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/0d4b2c68b597a2173fc2be0dc699c17196bb0023", "committedDate": "2020-11-22T20:13:46Z", "message": "Add login init event for server login."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8191936e063210aaf15e05fb9c6c7c346ada0a17", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/8191936e063210aaf15e05fb9c6c7c346ada0a17", "committedDate": "2020-11-22T20:13:46Z", "message": "Implement client login query start event"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2db146120676e3289c2cbb2bba02fc43c3a03688", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/2db146120676e3289c2cbb2bba02fc43c3a03688", "committedDate": "2020-11-22T20:13:46Z", "message": "Move event invocations into addon, don't dual register global recievers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18f8695ae9fbd7dd07f2981c64997723fc40ae86", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/18f8695ae9fbd7dd07f2981c64997723fc40ae86", "committedDate": "2020-11-22T20:13:46Z", "message": "Finally reimplement global recievers for all networking phases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1526649357bbe41981e1e835c3a33c312230d01", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/a1526649357bbe41981e1e835c3a33c312230d01", "committedDate": "2020-11-22T20:13:46Z", "message": "A revelation: Send packets properly\n\nThis also finds the issue with screen getting the proper S2C channels, current on TODO list."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcd140d822e93381b096a948020e09c39131ebbd", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/dcd140d822e93381b096a948020e09c39131ebbd", "committedDate": "2020-11-22T20:13:46Z", "message": "Disconnect event does not need a packet sender"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8075e8997b19061747afb7d428c7310548092f53", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/8075e8997b19061747afb7d428c7310548092f53", "committedDate": "2020-11-22T20:13:46Z", "message": "Clarify, add methods to get channels net handler can recieve on client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3729f23eec152b6f684681c84a2868b27daa87e", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/f3729f23eec152b6f684681c84a2868b27daa87e", "committedDate": "2020-11-22T20:13:46Z", "message": "Unregister actually works now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c284f9875b7858eac531ebe73aca310b279e104", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/0c284f9875b7858eac531ebe73aca310b279e104", "committedDate": "2020-11-22T20:13:46Z", "message": "Bunch of null checks, add simpler login delay test for vanilla clients"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76486cd8041deedc369ce0dc4daeccfd4de7e08e", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/76486cd8041deedc369ce0dc4daeccfd4de7e08e", "committedDate": "2020-11-22T20:13:46Z", "message": "Add some debug logging entries, fix unregister on client's session reg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "908ea36b719d899ab97558621984539537c0e301", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/908ea36b719d899ab97558621984539537c0e301", "committedDate": "2020-11-22T20:13:46Z", "message": "Play channel event javadoc and rename login query handlers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a8f6c172d4bbf80e8da51dec9451f441dae5534", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/3a8f6c172d4bbf80e8da51dec9451f441dae5534", "committedDate": "2020-11-22T20:13:46Z", "message": "More channel -> channelName"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a537a5f92ee1c596ef884ff8a407fafa9107b2f1", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/a537a5f92ee1c596ef884ff8a407fafa9107b2f1", "committedDate": "2020-11-22T20:13:46Z", "message": "thisening"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9da01cbb47723c16cbf4ba4af0e85363494bfcd5", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/9da01cbb47723c16cbf4ba4af0e85363494bfcd5", "committedDate": "2020-11-22T20:13:46Z", "message": "Introduce the basics infrastructure for tracking global receivers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40eb739636ed79e3c4bfe7a037d03c46143629d6", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/40eb739636ed79e3c4bfe7a037d03c46143629d6", "committedDate": "2020-11-22T20:13:46Z", "message": "Add more substantial javadoc to login connection events"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a6d3f94ed65d0bcb593af049b63f022c806db2b", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/0a6d3f94ed65d0bcb593af049b63f022c806db2b", "committedDate": "2020-11-22T20:13:46Z", "message": "Javadoc, reimplement unreg methods on v0, 1 impl fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95ffc88c5190992fd067d97d758528650e3361ab", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/95ffc88c5190992fd067d97d758528650e3361ab", "committedDate": "2020-11-22T20:13:46Z", "message": "Implement tracking for global recievers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e57219e6c445570971325c79c6f0bdf4a6e934e", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/8e57219e6c445570971325c79c6f0bdf4a6e934e", "committedDate": "2020-11-22T20:13:46Z", "message": "Dont forget to start tracked sessions in 3/4 cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "436027b84caa6246102e1efef648b8746c70e4bc", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/436027b84caa6246102e1efef648b8746c70e4bc", "committedDate": "2020-11-22T20:13:46Z", "message": "Global receiver docs and move methods in classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ccd753add3a6d3382b3e3967063bd5e045d5a77", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/8ccd753add3a6d3382b3e3967063bd5e045d5a77", "committedDate": "2020-11-22T20:13:46Z", "message": "Complete null checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f9889ffcb250e186deea5ece25c5c15b17abc84", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/8f9889ffcb250e186deea5ece25c5c15b17abc84", "committedDate": "2020-11-22T20:13:46Z", "message": "big boi javadoc part 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be0c0ff3042323db38fae64dc13406a85e140648", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/be0c0ff3042323db38fae64dc13406a85e140648", "committedDate": "2020-11-22T20:13:46Z", "message": "Finish the main javadoc, usage javadoc is left"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1db30b28e25af4802b7a3f8f7cc14d542f24cc6", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/b1db30b28e25af4802b7a3f8f7cc14d542f24cc6", "committedDate": "2020-11-22T20:13:46Z", "message": "Set so has method is not needed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18dc03a2681908125ef5df25b0f2d6b6ae9c5fd7", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/18dc03a2681908125ef5df25b0f2d6b6ae9c5fd7", "committedDate": "2020-11-22T20:13:46Z", "message": "Rename receiveable and sendable methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "849ec645d880b1191a735e8bd64d846516470b39", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/849ec645d880b1191a735e8bd64d846516470b39", "committedDate": "2020-11-22T20:13:46Z", "message": "Add the two missing private ctors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6d60cf27c97223a0b9e3490defb270e432f7544", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/b6d60cf27c97223a0b9e3490defb270e432f7544", "committedDate": "2020-11-22T20:13:46Z", "message": "buildscript update to upstream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06b751eb650e94e89bafa48b81d8c44c12d697d9", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/06b751eb650e94e89bafa48b81d8c44c12d697d9", "committedDate": "2020-11-22T20:13:46Z", "message": "Split out player finding stuff to networking player tracking API v1\n\nSigned-off-by: liach <liach@users.noreply.github.com>\n\nForward v0 PlayerStream to new module, add entity track events\n\nRename module to player tracking\n\nWell javadoc can make sense\n\nDecide on tracking for the name\n\nUpdate fabric-player-tracking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/player/tracking/v1/package-info.java\n\nCo-authored-by: Erlend \u00c5mdal <erlend@aamdal.com>\nRemove exceptions from javadoc that are not thrown\n\njavadoc fix again\n\nHandle a case where the player manager happens to be null\n\nrename player tracking to player lookup\n\nYeet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d13fa65ecb24abe78ee5c1837326b147b83a62fa", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/d13fa65ecb24abe78ee5c1837326b147b83a62fa", "committedDate": "2020-11-22T20:13:46Z", "message": "Cherrypick #1092"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac405a543379ce3a7f3b1d03118a8b902ca726d9", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ac405a543379ce3a7f3b1d03118a8b902ca726d9", "committedDate": "2020-11-22T20:13:46Z", "message": "Remove some redundant client networking methods, rename `(un)register` to `(un)registerReceiver`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36b242846f67a3b5754d96928168994e351eebd4", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/36b242846f67a3b5754d96928168994e351eebd4", "committedDate": "2020-11-22T20:13:46Z", "message": "Simplify access to dynamic reg on client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a85d377355bc8f7fe9bb566a366529b3a45a859", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/4a85d377355bc8f7fe9bb566a366529b3a45a859", "committedDate": "2020-11-22T20:13:46Z", "message": "Param shifting, let users get sender."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4889bef9b306cae6875463b4fc2fce0ee034798", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/b4889bef9b306cae6875463b4fc2fce0ee034798", "committedDate": "2020-11-22T20:13:46Z", "message": "Warning about time and distance units"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8fd70578cdc56fe6c37e3dfd56587fb2e09e54f", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/d8fd70578cdc56fe6c37e3dfd56587fb2e09e54f", "committedDate": "2020-11-22T20:13:46Z", "message": "Make sure these are client only"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0ac2ecb5a8683e27e6127adf3d409e7eba1cfe6", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/b0ac2ecb5a8683e27e6127adf3d409e7eba1cfe6", "committedDate": "2020-11-22T20:13:46Z", "message": "Fix control flow in ClientPlayNetworking#send"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ae6fcdf3aadbdabb0c2321c4424050f782563d3", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/6ae6fcdf3aadbdabb0c2321c4424050f782563d3", "committedDate": "2020-11-22T20:13:46Z", "message": "Correct example code javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "572cfca40233145cc169402249adc0e546b15035", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/572cfca40233145cc169402249adc0e546b15035", "committedDate": "2020-11-22T20:13:46Z", "message": "javadoc correction in server login"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "215f2f909cf6da420b030cb1e4bea8b2f1359295", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/215f2f909cf6da420b030cb1e4bea8b2f1359295", "committedDate": "2020-11-17T06:24:56Z", "message": "javadoc correction in server login"}, "afterCommit": {"oid": "572cfca40233145cc169402249adc0e546b15035", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/572cfca40233145cc169402249adc0e546b15035", "committedDate": "2020-11-22T20:13:46Z", "message": "javadoc correction in server login"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60f142cc691c359acf93671e6bfea4593759fb7b", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/60f142cc691c359acf93671e6bfea4593759fb7b", "committedDate": "2020-11-22T20:20:35Z", "message": "Put login delay tests behind system property\n\nAlso remove unnecessary junk added by old module that was merged together."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8676f67f2a0d545dd8d98db2a9c8ccd8426f925", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/a8676f67f2a0d545dd8d98db2a9c8ccd8426f925", "committedDate": "2020-11-22T21:25:28Z", "message": "Fix ordering so channel registrations during `PHASE`_INIT work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "753b29b5adc9df0bd724f27bbe1c02e0f06c2444", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/753b29b5adc9df0bd724f27bbe1c02e0f06c2444", "committedDate": "2020-11-22T23:23:15Z", "message": "Fix prod bug and an oversight"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2fbc5a0de538cb2fbf24019447e922441b73e4c", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/c2fbc5a0de538cb2fbf24019447e922441b73e4c", "committedDate": "2020-11-23T00:41:57Z", "message": "Fix login when connecting to dedicated server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a06c8f96dcef64c5f2b0457da522e5b3d82e0a1", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/1a06c8f96dcef64c5f2b0457da522e5b3d82e0a1", "committedDate": "2020-11-23T01:12:52Z", "message": "Update registry sync to v0 to prevent issue with reg sync hanging client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MjMzNzA1", "url": "https://github.com/FabricMC/fabric/pull/1081#pullrequestreview-536233705", "createdAt": "2020-11-23T07:57:20Z", "commit": {"oid": "1a06c8f96dcef64c5f2b0457da522e5b3d82e0a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzo1NzoyMFrOH4CPew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzo1NzoyMFrOH4CPew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUxOTAzNQ==", "bodyText": "Is already done? Should remove", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r528519035", "createdAt": "2020-11-23T07:57:20Z", "author": {"login": "FlashyReese"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/server/QueryIdFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.networking.server;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Tracks the current query id used for login query responses.\n+ */\n+interface QueryIdFactory {\n+\tstatic QueryIdFactory create() {\n+\t\t// todo incremental ids or randomized", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a06c8f96dcef64c5f2b0457da522e5b3d82e0a1"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTk2NTI0", "url": "https://github.com/FabricMC/fabric/pull/1081#pullrequestreview-540196524", "createdAt": "2020-11-27T21:36:06Z", "commit": {"oid": "1a06c8f96dcef64c5f2b0457da522e5b3d82e0a1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c931c76571a5b888b1a8fe7f9546f26d6bd03ca", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/1c931c76571a5b888b1a8fe7f9546f26d6bd03ca", "committedDate": "2020-11-27T21:36:53Z", "message": "this is done"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTk3OTQ2", "url": "https://github.com/FabricMC/fabric/pull/1081#pullrequestreview-540197946", "createdAt": "2020-11-27T21:44:43Z", "commit": {"oid": "1c931c76571a5b888b1a8fe7f9546f26d6bd03ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMjE0MDgz", "url": "https://github.com/FabricMC/fabric/pull/1081#pullrequestreview-540214083", "createdAt": "2020-11-28T00:16:00Z", "commit": {"oid": "1c931c76571a5b888b1a8fe7f9546f26d6bd03ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMjE2Njc4", "url": "https://github.com/FabricMC/fabric/pull/1081#pullrequestreview-540216678", "createdAt": "2020-11-28T00:53:20Z", "commit": {"oid": "1c931c76571a5b888b1a8fe7f9546f26d6bd03ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzIyNzE2", "url": "https://github.com/FabricMC/fabric/pull/1081#pullrequestreview-517322716", "createdAt": "2020-10-27T03:27:17Z", "commit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMzU0ODgx", "url": "https://github.com/FabricMC/fabric/pull/1081#pullrequestreview-540354881", "createdAt": "2020-11-28T09:34:06Z", "commit": {"oid": "1c931c76571a5b888b1a8fe7f9546f26d6bd03ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3304, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}