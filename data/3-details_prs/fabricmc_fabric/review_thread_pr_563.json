{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDg3NDk3", "number": 563, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoxNzo1NVrODw3_VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1MToyMFrOD0sRqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc1NTczOnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoxNzo1NVrOGEHPRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoxNzo1NVrOGEHPRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjA4NQ==", "bodyText": "I personally think this should be abstract but it won't break anything if it weren't.", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406966085", "createdAt": "2020-04-10T22:17:55Z", "author": {"login": "i509VCB"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package net.fabricmc.fabric.mixin.client.rendering;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.item.BuiltinModelItemRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+@Mixin(BuiltinModelItemRenderer.class)\n+class MixinBuiltinModelItemRenderer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe53acce974b25dcfb493f880a99318964589357"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc1NzAxOnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoxODo0OVrOGEHQBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoxODo0OVrOGEHQBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjI3Nw==", "bodyText": "The impl will throw an exception if the item render is already registered to the item. I would recommend documenting that functionality", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406966277", "createdAt": "2020-04-10T22:18:49Z", "author": {"login": "i509VCB"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+/**\n+ * This registry holds {@linkplain BuiltinItemRenderer builtin item renderers} for items.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface BuiltinItemRendererRegistry {\n+\tBuiltinItemRendererRegistry INSTANCE = BuiltinItemRendererRegistryImpl.INSTANCE;\n+\n+\t/**\n+\t * Registers the renderer for the item.\n+\t *\n+\t * <p>Note that the item's JSON model must also extend {@code minecraft:builtin/entity}.\n+\t *\n+\t * @param item the item\n+\t * @param renderer the renderer\n+\t */\n+\tvoid register(Item item, BuiltinItemRenderer renderer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe53acce974b25dcfb493f880a99318964589357"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc1OTgzOnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoyMDoxOVrOGEHRmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzoxMzoxMFrOGEIBqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjY4MQ==", "bodyText": "I would recommend spitting out the Identifier this item is registered under rather than potentially having a jumbled mess.\nIf it isn't in the registry then obviously throw that as well", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406966681", "createdAt": "2020-04-10T22:20:19Z", "author": {"login": "i509VCB"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tif (RENDERERS.containsKey(item)) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + item + \" already has a builtin renderer!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71565c5db6cbc40da74bb99e68b555de3a457fef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODE2Mg==", "bodyText": "Item.toString() already gets the registry ID, though I guess make it get the ID directly.", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406968162", "createdAt": "2020-04-10T22:26:20Z", "author": {"login": "Juuxel"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tif (RENDERERS.containsKey(item)) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + item + \" already has a builtin renderer!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjY4MQ=="}, "originalCommit": {"oid": "71565c5db6cbc40da74bb99e68b555de3a457fef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODI4Mg==", "bodyText": "Hmm if it does already then that is fine", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406968282", "createdAt": "2020-04-10T22:26:52Z", "author": {"login": "i509VCB"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tif (RENDERERS.containsKey(item)) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + item + \" already has a builtin renderer!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjY4MQ=="}, "originalCommit": {"oid": "71565c5db6cbc40da74bb99e68b555de3a457fef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3ODk4Nw==", "bodyText": "I made it use Registry.getId anyway because vanilla only returns the path for some reason.", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406978987", "createdAt": "2020-04-10T23:13:10Z", "author": {"login": "Juuxel"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tif (RENDERERS.containsKey(item)) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + item + \" already has a builtin renderer!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjY4MQ=="}, "originalCommit": {"oid": "71565c5db6cbc40da74bb99e68b555de3a457fef"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc2MTM2OnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoyMTozMVrOGEHSjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoyMTozMVrOGEHSjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjkyNQ==", "bodyText": "We don't have annotations yet for nullability we agree on, so a simple /* NULLABLE */ comment would be nice for when we go back to manage these", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406966925", "createdAt": "2020-04-10T22:21:31Z", "author": {"login": "i509VCB"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tif (RENDERERS.containsKey(item)) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + item + \" already has a builtin renderer!\");\n+\t\t}\n+\n+\t\tRENDERERS.put(item, renderer);\n+\t}\n+\n+\tpublic static BuiltinItemRenderer getRenderer(Item item) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71565c5db6cbc40da74bb99e68b555de3a457fef"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc2OTQ3OnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoyNjoxOVrOGEHXXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoyODowMlrOGEHY7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODE1Ng==", "bodyText": "Hmm, should this injection be at head and return early instead? I don't see a point of having it in tail (i.e. waiting for all the vanilla if branch checks)", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406968156", "createdAt": "2020-04-10T22:26:19Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package net.fabricmc.fabric.mixin.client.rendering;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.item.BuiltinModelItemRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+@Mixin(BuiltinModelItemRenderer.class)\n+class MixinBuiltinModelItemRenderer {\n+\t@Inject(method = \"render\", at = @At(\"RETURN\"))\n+\tprivate void fabric_onRender(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay, CallbackInfo info) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71565c5db6cbc40da74bb99e68b555de3a457fef"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODUzNA==", "bodyText": "Yeah, that seems good.", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406968534", "createdAt": "2020-04-10T22:27:53Z", "author": {"login": "Juuxel"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package net.fabricmc.fabric.mixin.client.rendering;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.item.BuiltinModelItemRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+@Mixin(BuiltinModelItemRenderer.class)\n+class MixinBuiltinModelItemRenderer {\n+\t@Inject(method = \"render\", at = @At(\"RETURN\"))\n+\tprivate void fabric_onRender(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay, CallbackInfo info) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODE1Ng=="}, "originalCommit": {"oid": "71565c5db6cbc40da74bb99e68b555de3a457fef"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODU1OQ==", "bodyText": "Well that definitely branches onto an argument of, what if someone wanted to replace a built-in renderer for vanilla items, i.e. change the shulker box model", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406968559", "createdAt": "2020-04-10T22:28:02Z", "author": {"login": "i509VCB"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package net.fabricmc.fabric.mixin.client.rendering;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.item.BuiltinModelItemRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+@Mixin(BuiltinModelItemRenderer.class)\n+class MixinBuiltinModelItemRenderer {\n+\t@Inject(method = \"render\", at = @At(\"RETURN\"))\n+\tprivate void fabric_onRender(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay, CallbackInfo info) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODE1Ng=="}, "originalCommit": {"oid": "71565c5db6cbc40da74bb99e68b555de3a457fef"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc3NDQ5OnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoyOToyMVrOGEHaUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozMzozMFrOGEHeFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODkxMg==", "bodyText": "Oops license", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406968912", "createdAt": "2020-04-10T22:29:21Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package net.fabricmc.fabric.api.client.rendering.v1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9703cf73c04c87d9aa845885bf2346b2b913685"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTg3Nw==", "bodyText": "Oh, oops... There are so many code style things when working with Fabric API \ud83d\ude04", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406969877", "createdAt": "2020-04-10T22:33:30Z", "author": {"login": "Juuxel"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package net.fabricmc.fabric.api.client.rendering.v1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODkxMg=="}, "originalCommit": {"oid": "b9703cf73c04c87d9aa845885bf2346b2b913685"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc3NTYyOnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozMDowNVrOGEHa8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozMDowNVrOGEHa8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTA3Mw==", "bodyText": "Mind document this method (esp. parameters of light, overlay to show they are rgb)", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406969073", "createdAt": "2020-04-10T22:30:05Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Builtin item renderers render items with custom code.\n+ * They allow using non-model rendering, such as BERs, for items.\n+ *\n+ * <p>An item with a builtin renderer must have a model extending {@code minecraft:builtin/entity}.\n+ * The renderers are registered with {@link BuiltinItemRendererRegistry#register}.\n+ */\n+@Environment(EnvType.CLIENT)\n+@FunctionalInterface\n+public interface BuiltinItemRenderer {\n+\tvoid render(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9703cf73c04c87d9aa845885bf2346b2b913685"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc3NjQ5OnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozMDozNlrOGEHbeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozNjo0OVrOGEHhLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTIwOQ==", "bodyText": "Maybe note that this is how to get a renderer (some people have asked such questions on discord before)", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406969209", "createdAt": "2020-04-10T22:30:36Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+/**\n+ * This registry holds {@linkplain BuiltinItemRenderer builtin item renderers} for items.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface BuiltinItemRendererRegistry {\n+\tBuiltinItemRendererRegistry INSTANCE = BuiltinItemRendererRegistryImpl.INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9703cf73c04c87d9aa845885bf2346b2b913685"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MDMwNg==", "bodyText": "It's not how to get a renderer, though; that's not exposed in the API.", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406970306", "createdAt": "2020-04-10T22:35:16Z", "author": {"login": "Juuxel"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+/**\n+ * This registry holds {@linkplain BuiltinItemRenderer builtin item renderers} for items.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface BuiltinItemRendererRegistry {\n+\tBuiltinItemRendererRegistry INSTANCE = BuiltinItemRendererRegistryImpl.INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTIwOQ=="}, "originalCommit": {"oid": "b9703cf73c04c87d9aa845885bf2346b2b913685"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MDY2OA==", "bodyText": "Oh, I mean how to get a renderer registry \ud83d\ude05", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406970668", "createdAt": "2020-04-10T22:36:49Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+/**\n+ * This registry holds {@linkplain BuiltinItemRenderer builtin item renderers} for items.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface BuiltinItemRendererRegistry {\n+\tBuiltinItemRendererRegistry INSTANCE = BuiltinItemRendererRegistryImpl.INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTIwOQ=="}, "originalCommit": {"oid": "b9703cf73c04c87d9aa845885bf2346b2b913685"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc3ODEwOnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozMTo0OVrOGEHchg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozMTo0OVrOGEHchg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTQ3OA==", "bodyText": "Can just do\n\t\tif (RENDERERS.put(item, renderer) != null) {\n\t\t\tthrow new IllegalArgumentException(\"Item \" + Registry.ITEM.getId(item) + \" already has a builtin renderer!\");\n\t\t}", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406969478", "createdAt": "2020-04-10T22:31:49Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tif (RENDERERS.containsKey(item)) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + Registry.ITEM.getId(item) + \" already has a builtin renderer!\");\n+\t\t}\n+\n+\t\tRENDERERS.put(item, renderer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9703cf73c04c87d9aa845885bf2346b2b913685"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjgwNDUxOnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTowMToxMVrOGEPV9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTowMjowN1rOGEPWQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODg3MQ==", "bodyText": "Im really not a fan of using enums for singletons.", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r407098871", "createdAt": "2020-04-11T19:01:11Z", "author": {"login": "modmuss50"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d88f325efc73f1334da19dc9e906dd25f3272ea"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODk0Nw==", "bodyText": "It should be fine as this is an implementation detail (not exposed in the API)", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r407098947", "createdAt": "2020-04-11T19:02:07Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODg3MQ=="}, "originalCommit": {"oid": "1d88f325efc73f1334da19dc9e906dd25f3272ea"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjgwNTAwOnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/build.gradle", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTowMTo1NVrOGEPWMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOToxMzoxMFrOGEPatg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODkzMQ==", "bodyText": "0.2.0", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r407098931", "createdAt": "2020-04-11T19:01:55Z", "author": {"login": "modmuss50"}, "path": "fabric-rendering-v1/build.gradle", "diffHunk": "@@ -1,5 +1,5 @@\n archivesBaseName = \"fabric-rendering-v1\"\n-version = getSubprojectVersion(project, \"0.1.0\")\n+version = getSubprojectVersion(project, \"1.0.0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d88f325efc73f1334da19dc9e906dd25f3272ea"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5OTAwNA==", "bodyText": "Hmm, most new v1 modules are 1.0.0, is anything preventing this from being marked \"stable\"?", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r407099004", "createdAt": "2020-04-11T19:02:47Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/build.gradle", "diffHunk": "@@ -1,5 +1,5 @@\n archivesBaseName = \"fabric-rendering-v1\"\n-version = getSubprojectVersion(project, \"0.1.0\")\n+version = getSubprojectVersion(project, \"1.0.0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODkzMQ=="}, "originalCommit": {"oid": "1d88f325efc73f1334da19dc9e906dd25f3272ea"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5OTA5MQ==", "bodyText": "Doesnt really matter tbh", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r407099091", "createdAt": "2020-04-11T19:03:36Z", "author": {"login": "modmuss50"}, "path": "fabric-rendering-v1/build.gradle", "diffHunk": "@@ -1,5 +1,5 @@\n archivesBaseName = \"fabric-rendering-v1\"\n-version = getSubprojectVersion(project, \"0.1.0\")\n+version = getSubprojectVersion(project, \"1.0.0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODkzMQ=="}, "originalCommit": {"oid": "1d88f325efc73f1334da19dc9e906dd25f3272ea"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwMDA4Ng==", "bodyText": "Semver major version 0 implies possible breaking changes in any version update, so we should bump it to a stable version.", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r407100086", "createdAt": "2020-04-11T19:13:10Z", "author": {"login": "Juuxel"}, "path": "fabric-rendering-v1/build.gradle", "diffHunk": "@@ -1,5 +1,5 @@\n archivesBaseName = \"fabric-rendering-v1\"\n-version = getSubprojectVersion(project, \"0.1.0\")\n+version = getSubprojectVersion(project, \"1.0.0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODkzMQ=="}, "originalCommit": {"oid": "1d88f325efc73f1334da19dc9e906dd25f3272ea"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTQwNjU3OnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo0MjoxOVrOGFeHiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo1OTo1OFrOGFmIaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4OTUxMw==", "bodyText": "Would an IdentityHashMap do better over a hash map here? (unsure so some explanation would be nice)", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r408389513", "createdAt": "2020-04-14T19:42:19Z", "author": {"login": "i509VCB"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public final class BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tpublic static final BuiltinItemRendererRegistryImpl INSTANCE = new BuiltinItemRendererRegistryImpl();\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fae020880680eafd6d241f51683c0ee7cc2fdef8"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyMDgwOQ==", "bodyText": "don't think identity matters that much here", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r408520809", "createdAt": "2020-04-15T00:59:58Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public final class BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tpublic static final BuiltinItemRendererRegistryImpl INSTANCE = new BuiltinItemRendererRegistryImpl();\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4OTUxMw=="}, "originalCommit": {"oid": "fae020880680eafd6d241f51683c0ee7cc2fdef8"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTc3MDc5OnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo0OTowOFrOGJv-dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTowODo0NFrOGJwsPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NjQwNg==", "bodyText": "Someone could deliberately overwrite one by catching the IllegalArgumentException. Maybe this is sensible, or maybe not. I would expect mods to be able to overwrite existing entries if they want to deliberately do that.", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412876406", "createdAt": "2020-04-22T10:49:08Z", "author": {"login": "immibis"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public final class BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tpublic static final BuiltinItemRendererRegistryImpl INSTANCE = new BuiltinItemRendererRegistryImpl();\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\tprivate BuiltinItemRendererRegistryImpl() {\n+\t}\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tObjects.requireNonNull(item, \"item is null\");\n+\t\tObjects.requireNonNull(renderer, \"renderer is null\");\n+\n+\t\tif (RENDERERS.put(item, renderer) != null) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + Registry.ITEM.getId(item) + \" already has a builtin renderer!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23d9eb8a60450751e99e9230db67effbe306094c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4ODEyNA==", "bodyText": "I separated the check and put call.", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412888124", "createdAt": "2020-04-22T11:08:44Z", "author": {"login": "Juuxel"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public final class BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tpublic static final BuiltinItemRendererRegistryImpl INSTANCE = new BuiltinItemRendererRegistryImpl();\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\tprivate BuiltinItemRendererRegistryImpl() {\n+\t}\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tObjects.requireNonNull(item, \"item is null\");\n+\t\tObjects.requireNonNull(renderer, \"renderer is null\");\n+\n+\t\tif (RENDERERS.put(item, renderer) != null) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + Registry.ITEM.getId(item) + \" already has a builtin renderer!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NjQwNg=="}, "originalCommit": {"oid": "23d9eb8a60450751e99e9230db67effbe306094c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTc3NDc3OnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1MDoxN1rOGJwA5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1NTozMFrOGJwNqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzAyOA==", "bodyText": "The name \"builtin\" makes me think you are talking about vanilla rendering code. Like \"builtin\" vs \"modded\"", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412877028", "createdAt": "2020-04-22T10:50:17Z", "author": {"login": "immibis"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Builtin item renderers render items with custom code.\n+ * They allow using non-model rendering, such as BERs, for items.\n+ *\n+ * <p>An item with a builtin renderer must have a model extending {@code minecraft:builtin/entity}.\n+ * The renderers are registered with {@link BuiltinItemRendererRegistry#register}.\n+ */\n+@Environment(EnvType.CLIENT)\n+@FunctionalInterface\n+public interface BuiltinItemRenderer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23d9eb8a60450751e99e9230db67effbe306094c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3OTYzNg==", "bodyText": "It comes from the Yarn name, which matches the model identifier builtin/entity.", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412879636", "createdAt": "2020-04-22T10:54:25Z", "author": {"login": "Juuxel"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Builtin item renderers render items with custom code.\n+ * They allow using non-model rendering, such as BERs, for items.\n+ *\n+ * <p>An item with a builtin renderer must have a model extending {@code minecraft:builtin/entity}.\n+ * The renderers are registered with {@link BuiltinItemRendererRegistry#register}.\n+ */\n+@Environment(EnvType.CLIENT)\n+@FunctionalInterface\n+public interface BuiltinItemRenderer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzAyOA=="}, "originalCommit": {"oid": "23d9eb8a60450751e99e9230db67effbe306094c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MDI5Ng==", "bodyText": "Fair enough.", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412880296", "createdAt": "2020-04-22T10:55:30Z", "author": {"login": "immibis"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Builtin item renderers render items with custom code.\n+ * They allow using non-model rendering, such as BERs, for items.\n+ *\n+ * <p>An item with a builtin renderer must have a model extending {@code minecraft:builtin/entity}.\n+ * The renderers are registered with {@link BuiltinItemRendererRegistry#register}.\n+ */\n+@Environment(EnvType.CLIENT)\n+@FunctionalInterface\n+public interface BuiltinItemRenderer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzAyOA=="}, "originalCommit": {"oid": "23d9eb8a60450751e99e9230db67effbe306094c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTc3OTYzOnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1MToyMFrOGJwDmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1NDowOFrOGJwKbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzcyMw==", "bodyText": "I thought the purpose of Fabric API was to provide shared hooks where necessary to stop mods from conflicting or where mixins are impractical? This looks like an easy non-conflicting mixin for individual mods. Is it just for performance?", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412877723", "createdAt": "2020-04-22T10:51:20Z", "author": {"login": "immibis"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.client.rendering;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.item.BuiltinModelItemRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+@Mixin(BuiltinModelItemRenderer.class)\n+abstract class MixinBuiltinModelItemRenderer {\n+\t@Inject(method = \"render\", at = @At(\"HEAD\"), cancellable = true)\n+\tprivate void fabric_onRender(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay, CallbackInfo info) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23d9eb8a60450751e99e9230db67effbe306094c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3OTQ3MA==", "bodyText": "Fabric API should also cater to cases that are required by a large number of mods.", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412879470", "createdAt": "2020-04-22T10:54:08Z", "author": {"login": "modmuss50"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.client.rendering;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.item.BuiltinModelItemRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+@Mixin(BuiltinModelItemRenderer.class)\n+abstract class MixinBuiltinModelItemRenderer {\n+\t@Inject(method = \"render\", at = @At(\"HEAD\"), cancellable = true)\n+\tprivate void fabric_onRender(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay, CallbackInfo info) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzcyMw=="}, "originalCommit": {"oid": "23d9eb8a60450751e99e9230db67effbe306094c"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3524, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}