{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0OTI3NzA0", "number": 645, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoyMToxNVrOEAyFUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzozODo1NFrOESK0oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjU2MDE5OnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoyMToxNVrOGcRhBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoyMzozNlrOGcRlbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMDI5Mg==", "bodyText": "scaledWidth and scaledHeight", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r432300292", "createdAt": "2020-05-29T07:21:15Z", "author": {"login": "shedaniel"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public interface ScreenInitializeCallback {\n+\tEvent<ScreenInitializeCallback> EVENT = EventFactory.createArrayBacked(ScreenInitializeCallback.class, callbacks -> (screen, context, client, windowWidth, windowHeight) -> {\n+\t\tfor (ScreenInitializeCallback callback : callbacks) {\n+\t\t\tcallback.onInitialize(screen, context, client, windowWidth, windowHeight);\n+\t\t}\n+\t});\n+\n+\tvoid onInitialize(Screen screen, ScreenContext context, MinecraftClient client, int windowWidth, int windowHeight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937ebb6424ea7fa4c1535fd109dee35981a3bbbb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMTQyMw==", "bodyText": "onInit preferably to match yarn", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r432301423", "createdAt": "2020-05-29T07:23:36Z", "author": {"login": "shedaniel"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public interface ScreenInitializeCallback {\n+\tEvent<ScreenInitializeCallback> EVENT = EventFactory.createArrayBacked(ScreenInitializeCallback.class, callbacks -> (screen, context, client, windowWidth, windowHeight) -> {\n+\t\tfor (ScreenInitializeCallback callback : callbacks) {\n+\t\t\tcallback.onInitialize(screen, context, client, windowWidth, windowHeight);\n+\t\t}\n+\t});\n+\n+\tvoid onInitialize(Screen screen, ScreenContext context, MinecraftClient client, int windowWidth, int windowHeight);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMDI5Mg=="}, "originalCommit": {"oid": "937ebb6424ea7fa4c1535fd109dee35981a3bbbb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjU2MzgzOnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoyMjozMFrOGcRjTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMjowODozM1rOGc7kmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMDg3OA==", "bodyText": "ScreenInitializationCallback or ScreenInitCallback", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r432300878", "createdAt": "2020-05-29T07:22:30Z", "author": {"login": "shedaniel"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public interface ScreenInitializeCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937ebb6424ea7fa4c1535fd109dee35981a3bbbb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1MzU4NA==", "bodyText": "I'm in favour of ScreenInitCallback. It's shorter, and helps mitigate the Murikanization of \"initialise\"", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r432353584", "createdAt": "2020-05-29T09:04:53Z", "author": {"login": "Sollace"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public interface ScreenInitializeCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMDg3OA=="}, "originalCommit": {"oid": "937ebb6424ea7fa4c1535fd109dee35981a3bbbb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4OTMzNg==", "bodyText": "went for init", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r432989336", "createdAt": "2020-05-31T22:08:33Z", "author": {"login": "i509VCB"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public interface ScreenInitializeCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMDg3OA=="}, "originalCommit": {"oid": "937ebb6424ea7fa4c1535fd109dee35981a3bbbb"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTQxMzQ5OnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0NDoyMVrOGrHtOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0NDoyMVrOGrHtOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2ODIxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tLOGGER.info(String.format(\"Initializing %s\", screen.getClass().getName()));\n          \n          \n            \n            \t\tLOGGER.info(\"Initializing {}\", screen.getClass().getName());", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r447868217", "createdAt": "2020-06-30T17:44:21Z", "author": {"login": "Juuxel"}, "path": "fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.screen;\n+\n+import java.util.Random;\n+\n+import com.mojang.blaze3d.systems.RenderSystem;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.DrawableHelper;\n+import net.minecraft.client.gui.hud.InGameHud;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.TitleScreen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenInitCallback;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenRenderCallback;\n+\n+public class ScreenTests implements ClientModInitializer {\n+\tpublic static final Random RANDOM = new Random();\n+\tprivate static final Logger LOGGER = LogManager.getLogger(\"FabricScreenApiTests\");\n+\n+\t@Override\n+\tpublic void onInitializeClient() {\n+\t\tLOGGER.info(\"Started Screen Testmod\");\n+\t\tScreenInitCallback.EVENT.register(this::onInit);\n+\t\tScreenRenderCallback.EVENT.register(this::onRender);\n+\t}\n+\n+\tprivate void onInit(MinecraftClient client, Screen screen, ScreenContext context, int windowWidth, int windowHeight) {\n+\t\tLOGGER.info(String.format(\"Initializing %s\", screen.getClass().getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80969ca2a84e30d6f8fe9afba8730f78300c36a6"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTQyMTU3OnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0NjozOVrOGrHyXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0NjozOVrOGrHyXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2OTUzMw==", "bodyText": "Should make this method return an ioob exception than a message.", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r447869533", "createdAt": "2020-06-30T17:46:39Z", "author": {"login": "liach"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.screen;\n+\n+import java.util.AbstractList;\n+import java.util.List;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+\n+public final class ButtonList<T extends AbstractButtonWidget> extends AbstractList<T> {\n+\tprivate final List<T> buttons;\n+\tprivate final List<Element> children;\n+\n+\tpublic ButtonList(List<T> buttons, List<Element> children) {\n+\t\tthis.buttons = buttons;\n+\t\tthis.children = children;\n+\t}\n+\n+\t@Override\n+\tpublic T get(int index) {\n+\t\treturn this.buttons.get(index);\n+\t}\n+\n+\t@Override\n+\tpublic T set(int index, T element) {\n+\t\tthis.remove(element); // verify / ensure no duplicates\n+\n+\t\tfinal T existingButton = this.buttons.get(index);\n+\t\tint elementIndex = this.children.indexOf(existingButton);\n+\n+\t\tif (elementIndex > -1) {\n+\t\t\tthis.children.set(elementIndex, element);\n+\t\t}\n+\n+\t\treturn this.buttons.set(index, element);\n+\t}\n+\n+\t@Override\n+\tpublic void add(int index, T element) {\n+\t\tthis.rangeCheckForAdd(index); // verify index bounds\n+\t\tthis.remove(element); // ensure no duplicates\n+\n+\t\tthis.buttons.add(index, element);\n+\t\tthis.children.add(Math.min(this.children.size(), index), element);\n+\t}\n+\n+\t@Override\n+\tpublic T remove(int index) {\n+\t\tthis.rangeCheck(index); // verify index bounds\n+\n+\t\tfinal T removedButton = this.buttons.remove(index);\n+\t\tindex = this.children.indexOf(removedButton);\n+\n+\t\tif (index > -1) {\n+\t\t\tthis.children.remove(index);\n+\t\t}\n+\n+\t\treturn removedButton;\n+\t}\n+\n+\t@Override\n+\tpublic int size() {\n+\t\treturn this.buttons.size();\n+\t}\n+\n+\tprivate void rangeCheck(int index) {\n+\t\tif (index >= this.size()) {\n+\t\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n+\t\t}\n+\t}\n+\n+\tprivate void rangeCheckForAdd(int index) {\n+\t\tif (index > this.size() || index < 0) {\n+\t\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n+\t\t}\n+\t}\n+\n+\tprivate String outOfBoundsMsg(int index) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80969ca2a84e30d6f8fe9afba8730f78300c36a6"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjUwMTE5OnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenContext.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzo0MDoxM1rOGr4qtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTo0MDoyMlrOGr-HzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MDM4OA==", "bodyText": "more like FabricScreen?", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448670388", "createdAt": "2020-07-01T23:40:13Z", "author": {"login": "liach"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenContext.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.render.item.ItemRenderer;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Provides access to additional context a screen can hold.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface ScreenContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a50d955f3442bc6247104fc437cd7e1ef1537285"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyMzk5OQ==", "bodyText": "Somewhat against FabricScreen. ScreenAccess is pretty bad for a name imo", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448723999", "createdAt": "2020-07-02T03:11:46Z", "author": {"login": "i509VCB"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenContext.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.render.item.ItemRenderer;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Provides access to additional context a screen can hold.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface ScreenContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MDM4OA=="}, "originalCommit": {"oid": "a50d955f3442bc6247104fc437cd7e1ef1537285"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1OTc1Ng==", "bodyText": "\ud83d\udc4d for screen access over screen context", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448759756", "createdAt": "2020-07-02T05:40:22Z", "author": {"login": "liach"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenContext.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.render.item.ItemRenderer;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Provides access to additional context a screen can hold.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface ScreenContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MDM4OA=="}, "originalCommit": {"oid": "a50d955f3442bc6247104fc437cd7e1ef1537285"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjUwNTgyOnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzo0MjozN1rOGr4tUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTo0MDowNFrOGr-Hhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTA1OQ==", "bodyText": "need to change this to do actual captures.\nalso can you guarantee all screen implementations that override render calls super.render? otherwise this hook will just be skipped.\nSame below.", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448671059", "createdAt": "2020-07-01T23:42:37Z", "author": {"login": "liach"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.screen;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.render.GameRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+\n+@Mixin(GameRenderer.class)\n+public abstract class GameRendererMixin {\n+\t@Shadow\n+\t@Final\n+\tprivate MinecraftClient client;\n+\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.PRINT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a50d955f3442bc6247104fc437cd7e1ef1537285"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyMzU5Mg==", "bodyText": "This is the invocation of the actual render method.\nSame with tick methods except for the one odd case with loading screen.", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448723592", "createdAt": "2020-07-02T03:10:08Z", "author": {"login": "i509VCB"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.screen;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.render.GameRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+\n+@Mixin(GameRenderer.class)\n+public abstract class GameRendererMixin {\n+\t@Shadow\n+\t@Final\n+\tprivate MinecraftClient client;\n+\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.PRINT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTA1OQ=="}, "originalCommit": {"oid": "a50d955f3442bc6247104fc437cd7e1ef1537285"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1OTY4Nw==", "bodyText": "Then it should be safe.", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448759687", "createdAt": "2020-07-02T05:40:04Z", "author": {"login": "liach"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.screen;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.render.GameRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+\n+@Mixin(GameRenderer.class)\n+public abstract class GameRendererMixin {\n+\t@Shadow\n+\t@Final\n+\tprivate MinecraftClient client;\n+\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.PRINT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTA1OQ=="}, "originalCommit": {"oid": "a50d955f3442bc6247104fc437cd7e1ef1537285"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjUwNzc2OnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzo0MzozNFrOGr4ueQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzo1NTo0MVrOGr48Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTM1Mw==", "bodyText": "should fail hard. see no point of generating an exception stub.", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448671353", "createdAt": "2020-07-01T23:43:34Z", "author": {"login": "liach"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.screen;\n+\n+import java.util.function.Function;\n+\n+import com.mojang.datafixers.util.Function4;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Coerce;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.resource.DataPackSettings;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.registry.RegistryTracker;\n+import net.minecraft.world.SaveProperties;\n+import net.minecraft.world.level.storage.LevelStorage;\n+\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+\n+@Mixin(MinecraftClient.class)\n+public abstract class MinecraftClientMixin {\n+\t@Shadow\n+\tpublic Screen currentScreen;\n+\n+\t// These two should be caught by \"Screen#wrapScreenError\" if anything fails\n+\n+\t@Inject(method = \"method_1572\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;tick()V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a50d955f3442bc6247104fc437cd7e1ef1537285"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MzIzNA==", "bodyText": "It will hard fail, this just guarantees this is part of the screen crash log", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448673234", "createdAt": "2020-07-01T23:50:06Z", "author": {"login": "i509VCB"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.screen;\n+\n+import java.util.function.Function;\n+\n+import com.mojang.datafixers.util.Function4;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Coerce;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.resource.DataPackSettings;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.registry.RegistryTracker;\n+import net.minecraft.world.SaveProperties;\n+import net.minecraft.world.level.storage.LevelStorage;\n+\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+\n+@Mixin(MinecraftClient.class)\n+public abstract class MinecraftClientMixin {\n+\t@Shadow\n+\tpublic Screen currentScreen;\n+\n+\t// These two should be caught by \"Screen#wrapScreenError\" if anything fails\n+\n+\t@Inject(method = \"method_1572\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;tick()V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTM1Mw=="}, "originalCommit": {"oid": "a50d955f3442bc6247104fc437cd7e1ef1537285"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NDgyNg==", "bodyText": "Not until now do I realize how trashy mixin is", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448674826", "createdAt": "2020-07-01T23:55:41Z", "author": {"login": "liach"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.screen;\n+\n+import java.util.function.Function;\n+\n+import com.mojang.datafixers.util.Function4;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Coerce;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.resource.DataPackSettings;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.registry.RegistryTracker;\n+import net.minecraft.world.SaveProperties;\n+import net.minecraft.world.level.storage.LevelStorage;\n+\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+\n+@Mixin(MinecraftClient.class)\n+public abstract class MinecraftClientMixin {\n+\t@Shadow\n+\tpublic Screen currentScreen;\n+\n+\t// These two should be caught by \"Screen#wrapScreenError\" if anything fails\n+\n+\t@Inject(method = \"method_1572\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;tick()V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTM1Mw=="}, "originalCommit": {"oid": "a50d955f3442bc6247104fc437cd7e1ef1537285"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDU3NjI0OnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo0NzoyOVrOG3LvUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNToyMzo0MFrOHKjd_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzIwMQ==", "bodyText": "I wonder if there is a better name for this?", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517201", "createdAt": "2020-07-26T11:47:29Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.render.item.ItemRenderer;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Provides access to additional context a screen can hold.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface FabricScreen {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0NzA3Mg==", "bodyText": "Originally this was ScreenContext a few commits ago.\nScreenInfo could work.", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460547072", "createdAt": "2020-07-26T16:30:00Z", "author": {"login": "i509VCB"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.render.item.ItemRenderer;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Provides access to additional context a screen can hold.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface FabricScreen {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzIwMQ=="}, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4MzA3MQ==", "bodyText": "This is really fabric screens as this is injected wholesale into screen class.", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460583071", "createdAt": "2020-07-26T22:49:03Z", "author": {"login": "liach"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.render.item.ItemRenderer;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Provides access to additional context a screen can hold.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface FabricScreen {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzIwMQ=="}, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgyODkyNQ==", "bodyText": "Decided on ScreenExtensions in the end.", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r480828925", "createdAt": "2020-09-01T05:23:40Z", "author": {"login": "i509VCB"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.render.item.ItemRenderer;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Provides access to additional context a screen can hold.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface FabricScreen {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzIwMQ=="}, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDU3NzE2OnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo0ODo0MVrOG3LvzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo0ODo0MVrOG3LvzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzMyNQ==", "bodyText": "Yes, this is good!", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517325", "createdAt": "2020-07-26T11:48:41Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.screen;\n+\n+import java.util.AbstractList;\n+import java.util.List;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+\n+public final class ButtonList<T extends AbstractButtonWidget> extends AbstractList<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDU4MDM5OnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo1MjoyMFrOG3LxXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQyMjo1NToyN1rOG3Py4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzcyNA==", "bodyText": "Whats the use case for the tick events?", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517724", "createdAt": "2020-07-26T11:52:20Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0ODAxMA==", "bodyText": "I'd argue it's nessecary if someone adds a widget to a screen that needs to be ticked.\nFor example if someone added a sort of chyron to the title screen showing news about the latest snapshots, they would need to tick that element of the screen to advance the position of text.", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460548010", "createdAt": "2020-07-26T16:39:52Z", "author": {"login": "i509VCB"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzcyNA=="}, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4MzE3Mw==", "bodyText": "So in case a tick-needed widget added to a non-ticking screen?", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460583173", "createdAt": "2020-07-26T22:49:55Z", "author": {"login": "liach"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzcyNA=="}, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4MzY1MA==", "bodyText": "All screens are ticking, but child elements of a screen are not automatically ticking (some screen impls do do that).\nOften the tick method of each element is called in the screen's tick method", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460583650", "createdAt": "2020-07-26T22:55:27Z", "author": {"login": "i509VCB"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzcyNA=="}, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDU4MDcxOnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo1Mjo0MVrOG3Lxgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo1Mjo0MVrOG3Lxgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzc2Mg==", "bodyText": "should say is the before tick", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517762", "createdAt": "2020-07-26T11:52:41Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDU4MDg1OnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo1Mjo1M1rOG3Lxlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo1Mjo1M1rOG3Lxlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzc4Mg==", "bodyText": "same here say its the after tick", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517782", "createdAt": "2020-07-26T11:52:53Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDU4MDk3OnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo1MzowN1rOG3LxpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo1MzowN1rOG3LxpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzc5Nw==", "bodyText": "again here, say its the after renderer", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517797", "createdAt": "2020-07-26T11:53:07Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDU4MTA3OnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo1MzoxMVrOG3LxsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo1MzoxMVrOG3LxsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzgwOA==", "bodyText": "and before", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517808", "createdAt": "2020-07-26T11:53:11Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDU4MTQyOnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo1Mzo0OVrOG3Lx4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzozNzo1MVrOG3N-Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzg1OQ==", "bodyText": "Would it be worth exanding the docs to say what can do be done here. For example adding or changing buttons.", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517859", "createdAt": "2020-07-26T11:53:49Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0ODE3OA==", "bodyText": "I'll add some docs to the class explaining those two cases.", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460548178", "createdAt": "2020-07-26T16:41:29Z", "author": {"login": "i509VCB"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzg1OQ=="}, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1Mzc5OA==", "bodyText": "might want to mention that this is after the init", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460553798", "createdAt": "2020-07-26T17:37:51Z", "author": {"login": "shedaniel"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzg1OQ=="}, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDg2MzMwOnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzoyOTozMFrOG3N6yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzoyOTozMFrOG3N6yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1MjkwNA==", "bodyText": "just extend AbstractPressableButtonWidget instead of ButtonWidget so you don't pass a null", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460552904", "createdAt": "2020-07-26T17:29:30Z", "author": {"login": "shedaniel"}, "path": "fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.screen;\n+\n+import java.util.Random;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+import net.minecraft.client.sound.PositionedSoundInstance;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.sound.SoundEvents;\n+import net.minecraft.text.Text;\n+import net.minecraft.util.registry.Registry;\n+\n+class SoundButton extends ButtonWidget {\n+\tprivate static final Random RANDOM = new Random();\n+\n+\tSoundButton(int x, int y, int width, int height) {\n+\t\tsuper(x, y, width, height, Text.method_30163(\"Sound Button\"), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDg2NDc4OnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzozMDo0OVrOG3N7bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzozMDo0OVrOG3N7bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1MzA3MQ==", "bodyText": "same here with the null", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460553071", "createdAt": "2020-07-26T17:30:49Z", "author": {"login": "shedaniel"}, "path": "fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.screen;\n+\n+import com.mojang.blaze3d.systems.RenderSystem;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.DrawableHelper;\n+import net.minecraft.client.gui.hud.InGameHud;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.text.Text;\n+\n+class StopSoundButton extends ButtonWidget {\n+\tprivate final Screen screen;\n+\n+\tStopSoundButton(Screen screen, int x, int y, int width, int height) {\n+\t\tsuper(x, y, width, height, Text.method_30163(\"\"), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDg2ODUyOnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzozNTowNlrOG3N9LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzozNTowNlrOG3N9LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1MzUxNw==", "bodyText": "is it possible to just this.children.remove(removedButton);", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460553517", "createdAt": "2020-07-26T17:35:06Z", "author": {"login": "shedaniel"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.screen;\n+\n+import java.util.AbstractList;\n+import java.util.List;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+\n+public final class ButtonList<T extends AbstractButtonWidget> extends AbstractList<T> {\n+\tprivate final List<T> buttons;\n+\tprivate final List<Element> children;\n+\n+\tpublic ButtonList(List<T> buttons, List<Element> children) {\n+\t\tthis.buttons = buttons;\n+\t\tthis.children = children;\n+\t}\n+\n+\t@Override\n+\tpublic T get(int index) {\n+\t\treturn this.buttons.get(index);\n+\t}\n+\n+\t@Override\n+\tpublic T set(int index, T element) {\n+\t\tthis.remove(element); // verify / ensure no duplicates\n+\n+\t\tfinal T existingButton = this.buttons.get(index);\n+\t\tint elementIndex = this.children.indexOf(existingButton);\n+\n+\t\tif (elementIndex > -1) {\n+\t\t\tthis.children.set(elementIndex, element);\n+\t\t}\n+\n+\t\treturn this.buttons.set(index, element);\n+\t}\n+\n+\t@Override\n+\tpublic void add(int index, T element) {\n+\t\tthis.rangeCheckForAdd(index); // verify index bounds\n+\t\tthis.remove(element); // ensure no duplicates\n+\n+\t\tthis.buttons.add(index, element);\n+\t\tthis.children.add(Math.min(this.children.size(), index), element);\n+\t}\n+\n+\t@Override\n+\tpublic T remove(int index) {\n+\t\tthis.rangeCheck(index); // verify index bounds\n+\n+\t\tfinal T removedButton = this.buttons.remove(index);\n+\t\tindex = this.children.indexOf(removedButton);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDg3MTM2OnYy", "diffSide": "RIGHT", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzozODo1NFrOG3N-jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzozODo1NFrOG3N-jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1Mzg2OQ==", "bodyText": "functional interface? seeing that you have another pr that does that", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460553869", "createdAt": "2020-07-26T17:38:54Z", "author": {"login": "shedaniel"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic interface Init {\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t}\n+\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t}\n+\n+\tpublic interface AfterTick {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 144}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3574, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}