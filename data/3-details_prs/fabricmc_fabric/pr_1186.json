{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NTg2Nzk3", "number": 1186, "title": "Resource loader again", "bodyText": "Basically, another PR from me for resource loader.\nChanges:\n\nAdd ResourcePackActivationType, and change the built-in resource pack API (deprecated method still exists and work for legacy), allow mod authors to register always enabled packs, useful for datapacks and inter-mod recipes for example.\nAdd Programmer Art injection support.\nAny mod can create a directory programmer_art in the resources folder of the dev environment and it will load the provided resources with the Programmer Art resource pack, it does not allow to modify programmer art resources.\nGroup all mod resource packs into one unique pack.\nThe reason is simple but yet complicated:\n\nIn the pack screen GUI, when we change the priority of a pack, the invisible mod resource packs affects the little arrows, which means it gives the impression it does not move and the user unknowingly messes with the resource pack priority of mods.\nThis fixes the problem by making the mod resource packs visible again, but as a unique pack to avoid cluttering the pack menu, it cannot be disabled but priority can be modified like the Default resource pack.\nThere's one last thing to fix, if no mod resource pack existed before, it will be appended at the top priority, which is not wanted.", "createdAt": "2020-11-27T12:30:00Z", "url": "https://github.com/FabricMC/fabric/pull/1186", "merged": true, "mergeCommit": {"oid": "73b29211a6bd3a8f8dbfa5c28f7bb7990516a6a3"}, "closed": true, "closedAt": "2020-12-23T15:05:44Z", "author": {"login": "LambdAurora"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgmbwHgH2gAyNTI4NTg2Nzk3OjFiNTA4MmFmZjZjYzA4OGVjNGNiZTBlYTg0NWM3ZTBjNzg0YzFjZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeDNBvtAFqTYxMTc1NzE4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1b5082aff6cc088ec4cbe0ea845c7e0c784c1cea", "author": {"user": {"login": "LambdAurora", "name": "LambdAurora"}}, "url": "https://github.com/FabricMC/fabric/commit/1b5082aff6cc088ec4cbe0ea845c7e0c784c1cea", "committedDate": "2020-11-27T12:09:31Z", "message": "Add resource pack activation type, programmer art API, group mod resource packs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e18afdcc3f169e41275de2cbb503e331a851cdcb", "author": {"user": {"login": "LambdAurora", "name": "LambdAurora"}}, "url": "https://github.com/FabricMC/fabric/commit/e18afdcc3f169e41275de2cbb503e331a851cdcb", "committedDate": "2020-11-27T12:13:31Z", "message": "Add missing license headers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfc6ead8a555861f412c407920ef5d0d8b023a55", "author": {"user": {"login": "LambdAurora", "name": "LambdAurora"}}, "url": "https://github.com/FabricMC/fabric/commit/dfc6ead8a555861f412c407920ef5d0d8b023a55", "committedDate": "2020-11-27T12:44:14Z", "message": "Cleanup and add documentation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a611bf0252bb403af5277051bb9b97526e6956c", "author": {"user": {"login": "LambdAurora", "name": "LambdAurora"}}, "url": "https://github.com/FabricMC/fabric/commit/8a611bf0252bb403af5277051bb9b97526e6956c", "committedDate": "2020-11-27T17:25:15Z", "message": "Fix performance issues."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMjAwMDI4", "url": "https://github.com/FabricMC/fabric/pull/1186#pullrequestreview-540200028", "createdAt": "2020-11-27T21:58:13Z", "commit": {"oid": "8a611bf0252bb403af5277051bb9b97526e6956c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTo1ODoxNFrOH7KKxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTo1OTo1NlrOH7KL4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5NDYzMQ==", "bodyText": "Ideally this would have a translation?", "url": "https://github.com/FabricMC/fabric/pull/1186#discussion_r531794631", "createdAt": "2020-11-27T21:58:14Z", "author": {"login": "i509VCB"}, "path": "fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/impl/resource/loader/GroupResourcePack.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.resource.loader;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import it.unimi.dsi.fastutil.objects.Object2ObjectMap;\n+import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;\n+\n+import net.minecraft.resource.Resource;\n+import net.minecraft.resource.ResourceImpl;\n+import net.minecraft.resource.ResourceNotFoundException;\n+import net.minecraft.resource.ResourcePack;\n+import net.minecraft.resource.ResourceType;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.resource.ModResourcePack;\n+import net.fabricmc.fabric.mixin.resource.loader.NamespaceResourceManagerAccessor;\n+\n+/**\n+ * Represents a group resource pack, holds multiple resource packs as one.\n+ */\n+public abstract class GroupResourcePack implements ResourcePack {\n+\tprotected final ResourceType type;\n+\tprotected final List<ModResourcePack> packs;\n+\tprotected final Object2ObjectMap<String, List<ModResourcePack>> namespacedPacks = new Object2ObjectOpenHashMap<>();\n+\n+\tpublic GroupResourcePack(ResourceType type, List<ModResourcePack> packs) {\n+\t\tthis.type = type;\n+\t\tthis.packs = packs;\n+\t\tthis.packs.forEach(pack -> pack.getNamespaces(this.type)\n+\t\t\t\t.forEach(namespace -> this.namespacedPacks.computeIfAbsent(namespace, value -> new ArrayList<>())\n+\t\t\t\t\t\t.add(pack)));\n+\t}\n+\n+\t@Override\n+\tpublic InputStream open(ResourceType type, Identifier id) throws IOException {\n+\t\tList<ModResourcePack> packs = this.namespacedPacks.get(id.getNamespace());\n+\n+\t\tif (packs != null) {\n+\t\t\tfor (int i = packs.size() - 1; i >= 0; i--) {\n+\t\t\t\tResourcePack pack = packs.get(i);\n+\n+\t\t\t\tif (pack.contains(type, id)) {\n+\t\t\t\t\treturn pack.open(type, id);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tthrow new ResourceNotFoundException(null,\n+\t\t\t\tString.format(\"%s/%s/%s\", type.getDirectory(), id.getNamespace(), id.getPath()));\n+\t}\n+\n+\t@Override\n+\tpublic Collection<Identifier> findResources(ResourceType type, String namespace, String prefix, int maxDepth, Predicate<String> pathFilter) {\n+\t\tList<ModResourcePack> packs = this.namespacedPacks.get(namespace);\n+\n+\t\tif (packs == null) {\n+\t\t\treturn Collections.emptyList();\n+\t\t}\n+\n+\t\tSet<Identifier> resources = new HashSet<>();\n+\n+\t\tfor (int i = packs.size() - 1; i >= 0; i--) {\n+\t\t\tResourcePack pack = packs.get(i);\n+\t\t\tCollection<Identifier> modResources = pack.findResources(type, namespace, prefix, maxDepth, pathFilter);\n+\n+\t\t\tresources.addAll(modResources);\n+\t\t}\n+\n+\t\treturn resources;\n+\t}\n+\n+\t@Override\n+\tpublic boolean contains(ResourceType type, Identifier id) {\n+\t\tList<ModResourcePack> packs = this.namespacedPacks.get(id.getNamespace());\n+\n+\t\tif (packs == null) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfor (int i = packs.size() - 1; i >= 0; i--) {\n+\t\t\tResourcePack pack = packs.get(i);\n+\n+\t\t\tif (pack.contains(type, id)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic Set<String> getNamespaces(ResourceType type) {\n+\t\treturn this.namespacedPacks.keySet();\n+\t}\n+\n+\tpublic void appendResources(NamespaceResourceManagerAccessor manager, Identifier id, List<Resource> resources) throws IOException {\n+\t\tList<ModResourcePack> packs = this.namespacedPacks.get(id.getNamespace());\n+\n+\t\tif (packs == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfor (ModResourcePack pack : packs) {\n+\t\t\tif (pack.contains(manager.getType(), id)) {\n+\t\t\t\tInputStream inputStream = pack.contains(manager.getType(), id) ? manager.fabric$open(id, pack) : null;\n+\t\t\t\tresources.add(new ResourceImpl(pack.getName(), id, manager.fabric$open(id, pack), inputStream));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic String getFullName() {\n+\t\treturn this.getName() + \" (\" + this.packs.stream().map(ResourcePack::getName).collect(Collectors.joining(\", \")) + \")\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a611bf0252bb403af5277051bb9b97526e6956c"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5NDkxMg==", "bodyText": "hmm weird conflicts I assume.\nProbably accessor_open just to clarify it isn't a method added by fabric api", "url": "https://github.com/FabricMC/fabric/pull/1186#discussion_r531794912", "createdAt": "2020-11-27T21:59:56Z", "author": {"login": "i509VCB"}, "path": "fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/mixin/resource/loader/NamespaceResourceManagerAccessor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.resource.loader;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+import org.spongepowered.asm.mixin.gen.Invoker;\n+\n+import net.minecraft.resource.NamespaceResourceManager;\n+import net.minecraft.resource.ResourcePack;\n+import net.minecraft.resource.ResourceType;\n+import net.minecraft.util.Identifier;\n+\n+@Mixin(NamespaceResourceManager.class)\n+public interface NamespaceResourceManagerAccessor {\n+\t@Accessor(\"type\")\n+\tResourceType getType();\n+\n+\t@Invoker(\"open\")\n+\tInputStream fabric$open(Identifier id, ResourcePack pack) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a611bf0252bb403af5277051bb9b97526e6956c"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80561ba3203fdb3f1003f11b66054ef8bc553764", "author": {"user": {"login": "LambdAurora", "name": "LambdAurora"}}, "url": "https://github.com/FabricMC/fabric/commit/80561ba3203fdb3f1003f11b66054ef8bc553764", "committedDate": "2020-11-28T10:14:07Z", "message": "Rename invoker."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNzk3NjE4", "url": "https://github.com/FabricMC/fabric/pull/1186#pullrequestreview-543797618", "createdAt": "2020-12-03T10:11:32Z", "commit": {"oid": "80561ba3203fdb3f1003f11b66054ef8bc553764"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTgxODU1", "url": "https://github.com/FabricMC/fabric/pull/1186#pullrequestreview-545581855", "createdAt": "2020-12-05T11:56:25Z", "commit": {"oid": "80561ba3203fdb3f1003f11b66054ef8bc553764"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTY4MDU5", "url": "https://github.com/FabricMC/fabric/pull/1186#pullrequestreview-550968059", "createdAt": "2020-12-13T22:30:22Z", "commit": {"oid": "80561ba3203fdb3f1003f11b66054ef8bc553764"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjozMDoyMlrOIE6TyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjozMDoyMlrOIE6TyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMDU1Mw==", "bodyText": "Could you throw this in a comment above so we know this is a synthetic method:\nprivate static synthetic method_29491(Ljava/util/List;)Ljava/lang/Object;", "url": "https://github.com/FabricMC/fabric/pull/1186#discussion_r542020553", "createdAt": "2020-12-13T22:30:22Z", "author": {"login": "i509VCB"}, "path": "fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/mixin/resource/loader/ReloadableResourceManagerImplMixin.java", "diffHunk": "@@ -40,7 +43,18 @@\n \tprivate ResourceType type;\n \n \t@Inject(at = @At(\"HEAD\"), method = \"beginReloadInner\")\n-\tpublic void reload(Executor var1, Executor var2, List<ResourceReloadListener> listeners, CompletableFuture future, CallbackInfoReturnable<CompletableFuture> info) {\n+\tprivate void reload(Executor var1, Executor var2, List<ResourceReloadListener> listeners, CompletableFuture future, CallbackInfoReturnable<CompletableFuture> info) {\n \t\tResourceManagerHelperImpl.sort(type, listeners);\n \t}\n+\n+\t@Inject(method = \"method_29491\", at = @At(\"HEAD\"), cancellable = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80561ba3203fdb3f1003f11b66054ef8bc553764"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e9fd8c8a5f0af627ca63e0795f173bb10d7a6c9", "author": {"user": {"login": "LambdAurora", "name": "LambdAurora"}}, "url": "https://github.com/FabricMC/fabric/commit/3e9fd8c8a5f0af627ca63e0795f173bb10d7a6c9", "committedDate": "2020-12-14T10:14:02Z", "message": "Add comment in ReloadableResourceManagerImplMixin."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9a6f2e6932b144b3497b2019b717b42a03330b9", "author": {"user": {"login": "LambdAurora", "name": "LambdAurora"}}, "url": "https://github.com/FabricMC/fabric/commit/b9a6f2e6932b144b3497b2019b717b42a03330b9", "committedDate": "2020-12-15T13:06:00Z", "message": "Add package-info to resource loader."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNDMxODE1", "url": "https://github.com/FabricMC/fabric/pull/1186#pullrequestreview-552431815", "createdAt": "2020-12-15T13:09:38Z", "commit": {"oid": "b9a6f2e6932b144b3497b2019b717b42a03330b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjExNzU3MTgw", "url": "https://github.com/FabricMC/fabric/pull/1186#pullrequestreview-611757180", "createdAt": "2021-03-15T00:14:58Z", "commit": {"oid": "b9a6f2e6932b144b3497b2019b717b42a03330b9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNVQwMDoxNDo1OFrOI2eBJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNVQwMDoxOTozMlrOI2eEYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mzk4NTgyOQ==", "bodyText": "Oh my god, did no one ever notice this is some decompiler output", "url": "https://github.com/FabricMC/fabric/pull/1186#discussion_r593985829", "createdAt": "2021-03-15T00:14:58Z", "author": {"login": "liach"}, "path": "fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/impl/resource/loader/FabricModResourcePack.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.resource.loader;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.util.List;\n+\n+import com.google.common.base.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.resource.AbstractFileResourcePack;\n+import net.minecraft.resource.ResourceType;\n+import net.minecraft.resource.metadata.ResourceMetadataReader;\n+\n+import net.fabricmc.fabric.api.resource.ModResourcePack;\n+import net.fabricmc.loader.api.FabricLoader;\n+\n+/**\n+ * The Fabric mods resource pack, holds all the mod resource packs as one pack.\n+ */\n+public class FabricModResourcePack extends GroupResourcePack {\n+\tpublic FabricModResourcePack(ResourceType type, List<ModResourcePack> packs) {\n+\t\tsuper(type, packs);\n+\t}\n+\n+\t@Override\n+\tpublic InputStream openRoot(String fileName) throws IOException {\n+\t\tif (\"pack.mcmeta\".equals(fileName)) {\n+\t\t\tString description = \"Mod resources.\";\n+\t\t\tString pack = String.format(\"{\\\"pack\\\":{\\\"pack_format\\\":\" + ModResourcePackUtil.PACK_FORMAT_VERSION + \",\\\"description\\\":\\\"%s\\\"}}\", description);\n+\t\t\treturn IOUtils.toInputStream(pack, Charsets.UTF_8);\n+\t\t} else if (\"pack.png\".equals(fileName)) {\n+\t\t\tInputStream stream = FabricLoader.getInstance().getModContainer(\"fabric-resource-loader-v0\")\n+\t\t\t\t\t.flatMap(container -> container.getMetadata().getIconPath(512).map(container::getPath))\n+\t\t\t\t\t.filter(Files::exists)\n+\t\t\t\t\t.map(iconPath -> {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\treturn Files.newInputStream(iconPath);\n+\t\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t\treturn null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}).orElse(null);\n+\n+\t\t\tif (stream != null) {\n+\t\t\t\treturn stream;\n+\t\t\t}\n+\t\t}\n+\n+\t\t// ReloadableResourceManagerImpl gets away with FileNotFoundException.\n+\t\tthrow new FileNotFoundException(\"\\\"\" + fileName + \"\\\" in Fabric mod resource pack\");\n+\t}\n+\n+\t@Override\n+\tpublic <T> @Nullable T parseMetadata(ResourceMetadataReader<T> metaReader) throws IOException {\n+\t\ttry {\n+\t\t\tInputStream inputStream = this.openRoot(\"pack.mcmeta\");\n+\t\t\tThrowable error = null;\n+\t\t\tT metadata;\n+\n+\t\t\ttry {\n+\t\t\t\tmetadata = AbstractFileResourcePack.parseMetadata(metaReader, inputStream);\n+\t\t\t} catch (Throwable e) {\n+\t\t\t\terror = e;\n+\t\t\t\tthrow e;\n+\t\t\t} finally {\n+\t\t\t\tif (inputStream != null) {\n+\t\t\t\t\tif (error != null) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tinputStream.close();\n+\t\t\t\t\t\t} catch (Throwable e) {\n+\t\t\t\t\t\t\terror.addSuppressed(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a6f2e6932b144b3497b2019b717b42a03330b9"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mzk4NjY1OA==", "bodyText": "Imo patching resoruce pack profile to return multi packs is easier, as resource pack itself is used in way more places", "url": "https://github.com/FabricMC/fabric/pull/1186#discussion_r593986658", "createdAt": "2021-03-15T00:19:32Z", "author": {"login": "liach"}, "path": "fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/mixin/resource/loader/ReloadableResourceManagerImplMixin.java", "diffHunk": "@@ -40,7 +43,20 @@\n \tprivate ResourceType type;\n \n \t@Inject(at = @At(\"HEAD\"), method = \"beginReloadInner\")\n-\tpublic void reload(Executor var1, Executor var2, List<ResourceReloadListener> listeners, CompletableFuture future, CallbackInfoReturnable<CompletableFuture> info) {\n+\tprivate void reload(Executor var1, Executor var2, List<ResourceReloadListener> listeners, CompletableFuture future, CallbackInfoReturnable<CompletableFuture> info) {\n \t\tResourceManagerHelperImpl.sort(type, listeners);\n \t}\n+\n+\t// private static synthetic method_29491(Ljava/util/List;)Ljava/lang/Object;\n+\t// Supplier lambda in beginMonitoredReload method.\n+\t@Inject(method = \"method_29491\", at = @At(\"HEAD\"), cancellable = true)\n+\tprivate static void getResourcePackNames(List<ResourcePack> packs, CallbackInfoReturnable<String> cir) {\n+\t\tcir.setReturnValue(packs.stream().map(pack -> {\n+\t\t\tif (pack instanceof GroupResourcePack) {\n+\t\t\t\treturn ((GroupResourcePack) pack).getFullName();\n+\t\t\t} else {\n+\t\t\t\treturn pack.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a6f2e6932b144b3497b2019b717b42a03330b9"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3509, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}