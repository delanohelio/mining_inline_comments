{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyOTA2NjIz", "number": 1043, "title": "Tristate extensions", "bodyText": "Resolves #622\nThis is a precursor to my permissions API PR, the tri-state extensions allow for additional handling of the tri-state valued returned by permissions checks.", "createdAt": "2020-08-25T03:06:04Z", "url": "https://github.com/FabricMC/fabric/pull/1043", "merged": true, "mergeCommit": {"oid": "432d0485831594c9a1dac02a830ef8742d3e03b7"}, "closed": true, "closedAt": "2020-10-11T20:15:04Z", "author": {"login": "i509VCB"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCOe7OAFqTQ3NDEwNTM2MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdRHtdMAFqTUwNjA4NDQ5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MTA1MzYw", "url": "https://github.com/FabricMC/fabric/pull/1043#pullrequestreview-474105360", "createdAt": "2020-08-25T03:15:00Z", "commit": {"oid": "83ddb2b96e6b18f3b8708987b1f2b66ac057c388"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzoxNTowMFrOHGDM2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzoxNTowMFrOHGDM2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEwNTk0Ng==", "bodyText": "are you annotating the method or its return type here? imo should be the return type", "url": "https://github.com/FabricMC/fabric/pull/1043#discussion_r476105946", "createdAt": "2020-08-25T03:15:00Z", "author": {"login": "zml2008"}, "path": "fabric-api-base/src/main/java/net/fabricmc/fabric/api/util/TriState.java", "diffHunk": "@@ -16,16 +16,197 @@\n \n package net.fabricmc.fabric.api.util;\n \n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents a boolean value which can be true, false or refer to a default value.\n+ */\n public enum TriState {\n+\t/**\n+\t * Represents the boolean value of {@code false}.\n+\t */\n \tFALSE,\n+\t/**\n+\t * Represents a value that refers to a \"default\" value, often as a fallback.\n+\t */\n \tDEFAULT,\n+\t/**\n+\t * Represents the boolean value of {@code true}.\n+\t */\n \tTRUE;\n \n-\tpublic static TriState of(boolean b) {\n-\t\treturn b ? TRUE : FALSE;\n+\t/**\n+\t * Gets the corresponding tri-state from a boolean value.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(boolean bool) {\n+\t\treturn bool ? TRUE : FALSE;\n+\t}\n+\n+\t/**\n+\t * Gets a tri-state from a nullable boxed boolean.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#DEFAULT} if {@code null}.\n+\t * Otherwise {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(/* @Nullable */ Boolean bool) {\n+\t\tif (bool == null) {\n+\t\t\treturn DEFAULT;\n+\t\t}\n+\n+\t\treturn TriState.of(bool.booleanValue());\n \t}\n \n+\t/**\n+\t * Gets the value of the tri-state.\n+\t *\n+\t * @return true if the tri-state is {@link TriState#TRUE}.\n+\t * Otherwise false.\n+\t */\n \tpublic boolean get() {\n \t\treturn this == TRUE;\n \t}\n+\n+\t/**\n+\t * Gets the value of the tri-state as a boxed, nullable boolean.\n+\t *\n+\t * @return {@code null} if {@link TriState#DEFAULT}.\n+\t * Otherwise {@code true} if {@link TriState#TRUE} or {@code false} if {@link TriState#FALSE}.\n+\t */\n+\t/* @Nullable */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ddb2b96e6b18f3b8708987b1f2b66ac057c388"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MjIxMTc5", "url": "https://github.com/FabricMC/fabric/pull/1043#pullrequestreview-474221179", "createdAt": "2020-08-25T07:50:43Z", "commit": {"oid": "83ddb2b96e6b18f3b8708987b1f2b66ac057c388"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzo1MDo0M1rOHGL1Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODoxMTowM1rOHGMo0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0NzMxNA==", "bodyText": "Not totally necessary, but this could probably just be expressed with the ternary operator instead.\nreturn bool == null ? DEFAULT : TriState.of(bool.booleanValue());", "url": "https://github.com/FabricMC/fabric/pull/1043#discussion_r476247314", "createdAt": "2020-08-25T07:50:43Z", "author": {"login": "Vaerian"}, "path": "fabric-api-base/src/main/java/net/fabricmc/fabric/api/util/TriState.java", "diffHunk": "@@ -16,16 +16,197 @@\n \n package net.fabricmc.fabric.api.util;\n \n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents a boolean value which can be true, false or refer to a default value.\n+ */\n public enum TriState {\n+\t/**\n+\t * Represents the boolean value of {@code false}.\n+\t */\n \tFALSE,\n+\t/**\n+\t * Represents a value that refers to a \"default\" value, often as a fallback.\n+\t */\n \tDEFAULT,\n+\t/**\n+\t * Represents the boolean value of {@code true}.\n+\t */\n \tTRUE;\n \n-\tpublic static TriState of(boolean b) {\n-\t\treturn b ? TRUE : FALSE;\n+\t/**\n+\t * Gets the corresponding tri-state from a boolean value.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(boolean bool) {\n+\t\treturn bool ? TRUE : FALSE;\n+\t}\n+\n+\t/**\n+\t * Gets a tri-state from a nullable boxed boolean.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#DEFAULT} if {@code null}.\n+\t * Otherwise {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(/* @Nullable */ Boolean bool) {\n+\t\tif (bool == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ddb2b96e6b18f3b8708987b1f2b66ac057c388"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0OTUxOA==", "bodyText": "Same here, could probably be a ternary. I only mention it because all of the methods in the file are basically the same level of complexity, but some of them use the ternary operator, and some of them just use a traditional if statement. It might be good to just pick one and uniformly use that one.\nreturn this == TriState.DEFAULT ? null : this.get();", "url": "https://github.com/FabricMC/fabric/pull/1043#discussion_r476249518", "createdAt": "2020-08-25T07:54:38Z", "author": {"login": "Vaerian"}, "path": "fabric-api-base/src/main/java/net/fabricmc/fabric/api/util/TriState.java", "diffHunk": "@@ -16,16 +16,197 @@\n \n package net.fabricmc.fabric.api.util;\n \n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents a boolean value which can be true, false or refer to a default value.\n+ */\n public enum TriState {\n+\t/**\n+\t * Represents the boolean value of {@code false}.\n+\t */\n \tFALSE,\n+\t/**\n+\t * Represents a value that refers to a \"default\" value, often as a fallback.\n+\t */\n \tDEFAULT,\n+\t/**\n+\t * Represents the boolean value of {@code true}.\n+\t */\n \tTRUE;\n \n-\tpublic static TriState of(boolean b) {\n-\t\treturn b ? TRUE : FALSE;\n+\t/**\n+\t * Gets the corresponding tri-state from a boolean value.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(boolean bool) {\n+\t\treturn bool ? TRUE : FALSE;\n+\t}\n+\n+\t/**\n+\t * Gets a tri-state from a nullable boxed boolean.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#DEFAULT} if {@code null}.\n+\t * Otherwise {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(/* @Nullable */ Boolean bool) {\n+\t\tif (bool == null) {\n+\t\t\treturn DEFAULT;\n+\t\t}\n+\n+\t\treturn TriState.of(bool.booleanValue());\n \t}\n \n+\t/**\n+\t * Gets the value of the tri-state.\n+\t *\n+\t * @return true if the tri-state is {@link TriState#TRUE}.\n+\t * Otherwise false.\n+\t */\n \tpublic boolean get() {\n \t\treturn this == TRUE;\n \t}\n+\n+\t/**\n+\t * Gets the value of the tri-state as a boxed, nullable boolean.\n+\t *\n+\t * @return {@code null} if {@link TriState#DEFAULT}.\n+\t * Otherwise {@code true} if {@link TriState#TRUE} or {@code false} if {@link TriState#FALSE}.\n+\t */\n+\t/* @Nullable */\n+\tpublic Boolean getBoxed() {\n+\t\tif (this == TriState.DEFAULT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ddb2b96e6b18f3b8708987b1f2b66ac057c388"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1NDcwNA==", "bodyText": "Could be good to make a private mapEq or mapValue common method that takes in a Supplier and a TriState because mapTrue, mapFalse, and mapDefault all use the same logic except they use different things to compare to.\nTake for example\nprivate <T> Optional<T> mapEq(TriState comparison, Supplier<T> mapper) {\n    Objects.requireNonNull(mapper);\n\n    if (this == comparison) {\n        return Optional.ofNullable(mapper.get());\n    }\n\n    return Optional.empty();\n}\n\npublic <T> Optional<T> mapTrue(Supplier<T> mapper) {\n    return this.mapEq(TriState.TRUE, mapper);\n}\n\npublic <T> Optional<T> mapFalse(Supplier<T> mapper) {\n    return this.mapEq(TriState.FALSE, mapper);\n}\n\npublic <T> Optional<T> mapDefault(Supplier<T> mapper) {\n    return this.mapEq(TriState.DEFAULT, mapper);\n}", "url": "https://github.com/FabricMC/fabric/pull/1043#discussion_r476254704", "createdAt": "2020-08-25T08:02:58Z", "author": {"login": "Vaerian"}, "path": "fabric-api-base/src/main/java/net/fabricmc/fabric/api/util/TriState.java", "diffHunk": "@@ -16,16 +16,197 @@\n \n package net.fabricmc.fabric.api.util;\n \n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents a boolean value which can be true, false or refer to a default value.\n+ */\n public enum TriState {\n+\t/**\n+\t * Represents the boolean value of {@code false}.\n+\t */\n \tFALSE,\n+\t/**\n+\t * Represents a value that refers to a \"default\" value, often as a fallback.\n+\t */\n \tDEFAULT,\n+\t/**\n+\t * Represents the boolean value of {@code true}.\n+\t */\n \tTRUE;\n \n-\tpublic static TriState of(boolean b) {\n-\t\treturn b ? TRUE : FALSE;\n+\t/**\n+\t * Gets the corresponding tri-state from a boolean value.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(boolean bool) {\n+\t\treturn bool ? TRUE : FALSE;\n+\t}\n+\n+\t/**\n+\t * Gets a tri-state from a nullable boxed boolean.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#DEFAULT} if {@code null}.\n+\t * Otherwise {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(/* @Nullable */ Boolean bool) {\n+\t\tif (bool == null) {\n+\t\t\treturn DEFAULT;\n+\t\t}\n+\n+\t\treturn TriState.of(bool.booleanValue());\n \t}\n \n+\t/**\n+\t * Gets the value of the tri-state.\n+\t *\n+\t * @return true if the tri-state is {@link TriState#TRUE}.\n+\t * Otherwise false.\n+\t */\n \tpublic boolean get() {\n \t\treturn this == TRUE;\n \t}\n+\n+\t/**\n+\t * Gets the value of the tri-state as a boxed, nullable boolean.\n+\t *\n+\t * @return {@code null} if {@link TriState#DEFAULT}.\n+\t * Otherwise {@code true} if {@link TriState#TRUE} or {@code false} if {@link TriState#FALSE}.\n+\t */\n+\t/* @Nullable */\n+\tpublic Boolean getBoxed() {\n+\t\tif (this == TriState.DEFAULT) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\treturn this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param value the value to fallback to\n+\t * @return the value of the tri-state or the supplied value if {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElse(boolean value) {\n+\t\treturn this == TriState.DEFAULT ? value : this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param supplier the supplier used to get the value to fallback to\n+\t * @return the value of the tri-state or the value of the supplier if the tri-state is {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElseGet(BooleanSupplier supplier) {\n+\t\treturn this == TriState.DEFAULT ? supplier.getAsBoolean() : this.get();\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#TRUE}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#TRUE} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapTrue(Supplier<T> mapper) {\n+\t\tObjects.requireNonNull(mapper);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ddb2b96e6b18f3b8708987b1f2b66ac057c388"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1NTk2MQ==", "bodyText": "Sometimes you use TriState.FALSE and other times you just use FALSE. I personally prefer TriState.FALSE just to be explicit, but I would just choose one and stick to that as a general style rule.", "url": "https://github.com/FabricMC/fabric/pull/1043#discussion_r476255961", "createdAt": "2020-08-25T08:04:29Z", "author": {"login": "Vaerian"}, "path": "fabric-api-base/src/main/java/net/fabricmc/fabric/api/util/TriState.java", "diffHunk": "@@ -16,16 +16,197 @@\n \n package net.fabricmc.fabric.api.util;\n \n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents a boolean value which can be true, false or refer to a default value.\n+ */\n public enum TriState {\n+\t/**\n+\t * Represents the boolean value of {@code false}.\n+\t */\n \tFALSE,\n+\t/**\n+\t * Represents a value that refers to a \"default\" value, often as a fallback.\n+\t */\n \tDEFAULT,\n+\t/**\n+\t * Represents the boolean value of {@code true}.\n+\t */\n \tTRUE;\n \n-\tpublic static TriState of(boolean b) {\n-\t\treturn b ? TRUE : FALSE;\n+\t/**\n+\t * Gets the corresponding tri-state from a boolean value.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(boolean bool) {\n+\t\treturn bool ? TRUE : FALSE;\n+\t}\n+\n+\t/**\n+\t * Gets a tri-state from a nullable boxed boolean.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#DEFAULT} if {@code null}.\n+\t * Otherwise {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(/* @Nullable */ Boolean bool) {\n+\t\tif (bool == null) {\n+\t\t\treturn DEFAULT;\n+\t\t}\n+\n+\t\treturn TriState.of(bool.booleanValue());\n \t}\n \n+\t/**\n+\t * Gets the value of the tri-state.\n+\t *\n+\t * @return true if the tri-state is {@link TriState#TRUE}.\n+\t * Otherwise false.\n+\t */\n \tpublic boolean get() {\n \t\treturn this == TRUE;\n \t}\n+\n+\t/**\n+\t * Gets the value of the tri-state as a boxed, nullable boolean.\n+\t *\n+\t * @return {@code null} if {@link TriState#DEFAULT}.\n+\t * Otherwise {@code true} if {@link TriState#TRUE} or {@code false} if {@link TriState#FALSE}.\n+\t */\n+\t/* @Nullable */\n+\tpublic Boolean getBoxed() {\n+\t\tif (this == TriState.DEFAULT) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\treturn this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param value the value to fallback to\n+\t * @return the value of the tri-state or the supplied value if {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElse(boolean value) {\n+\t\treturn this == TriState.DEFAULT ? value : this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param supplier the supplier used to get the value to fallback to\n+\t * @return the value of the tri-state or the value of the supplier if the tri-state is {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElseGet(BooleanSupplier supplier) {\n+\t\treturn this == TriState.DEFAULT ? supplier.getAsBoolean() : this.get();\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#TRUE}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#TRUE} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapTrue(Supplier<T> mapper) {\n+\t\tObjects.requireNonNull(mapper);\n+\n+\t\tif (this == TRUE) {\n+\t\t\treturn Optional.ofNullable(mapper.get());\n+\t\t}\n+\n+\t\treturn Optional.empty();\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#TRUE}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#FALSE} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapFalse(Supplier<T> mapper) {\n+\t\tObjects.requireNonNull(mapper);\n+\n+\t\tif (this == FALSE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ddb2b96e6b18f3b8708987b1f2b66ac057c388"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1NjYxOQ==", "bodyText": "Choose TRUE or TriState.TRUE as a general style", "url": "https://github.com/FabricMC/fabric/pull/1043#discussion_r476256619", "createdAt": "2020-08-25T08:05:03Z", "author": {"login": "Vaerian"}, "path": "fabric-api-base/src/main/java/net/fabricmc/fabric/api/util/TriState.java", "diffHunk": "@@ -16,16 +16,197 @@\n \n package net.fabricmc.fabric.api.util;\n \n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents a boolean value which can be true, false or refer to a default value.\n+ */\n public enum TriState {\n+\t/**\n+\t * Represents the boolean value of {@code false}.\n+\t */\n \tFALSE,\n+\t/**\n+\t * Represents a value that refers to a \"default\" value, often as a fallback.\n+\t */\n \tDEFAULT,\n+\t/**\n+\t * Represents the boolean value of {@code true}.\n+\t */\n \tTRUE;\n \n-\tpublic static TriState of(boolean b) {\n-\t\treturn b ? TRUE : FALSE;\n+\t/**\n+\t * Gets the corresponding tri-state from a boolean value.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(boolean bool) {\n+\t\treturn bool ? TRUE : FALSE;\n+\t}\n+\n+\t/**\n+\t * Gets a tri-state from a nullable boxed boolean.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#DEFAULT} if {@code null}.\n+\t * Otherwise {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(/* @Nullable */ Boolean bool) {\n+\t\tif (bool == null) {\n+\t\t\treturn DEFAULT;\n+\t\t}\n+\n+\t\treturn TriState.of(bool.booleanValue());\n \t}\n \n+\t/**\n+\t * Gets the value of the tri-state.\n+\t *\n+\t * @return true if the tri-state is {@link TriState#TRUE}.\n+\t * Otherwise false.\n+\t */\n \tpublic boolean get() {\n \t\treturn this == TRUE;\n \t}\n+\n+\t/**\n+\t * Gets the value of the tri-state as a boxed, nullable boolean.\n+\t *\n+\t * @return {@code null} if {@link TriState#DEFAULT}.\n+\t * Otherwise {@code true} if {@link TriState#TRUE} or {@code false} if {@link TriState#FALSE}.\n+\t */\n+\t/* @Nullable */\n+\tpublic Boolean getBoxed() {\n+\t\tif (this == TriState.DEFAULT) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\treturn this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param value the value to fallback to\n+\t * @return the value of the tri-state or the supplied value if {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElse(boolean value) {\n+\t\treturn this == TriState.DEFAULT ? value : this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param supplier the supplier used to get the value to fallback to\n+\t * @return the value of the tri-state or the value of the supplier if the tri-state is {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElseGet(BooleanSupplier supplier) {\n+\t\treturn this == TriState.DEFAULT ? supplier.getAsBoolean() : this.get();\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#TRUE}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#TRUE} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapTrue(Supplier<T> mapper) {\n+\t\tObjects.requireNonNull(mapper);\n+\n+\t\tif (this == TRUE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ddb2b96e6b18f3b8708987b1f2b66ac057c388"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1NzIwOQ==", "bodyText": "Choose TRUE and FALSE or TriState.TRUE and TriState.FALSE as a general style", "url": "https://github.com/FabricMC/fabric/pull/1043#discussion_r476257209", "createdAt": "2020-08-25T08:05:35Z", "author": {"login": "Vaerian"}, "path": "fabric-api-base/src/main/java/net/fabricmc/fabric/api/util/TriState.java", "diffHunk": "@@ -16,16 +16,197 @@\n \n package net.fabricmc.fabric.api.util;\n \n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents a boolean value which can be true, false or refer to a default value.\n+ */\n public enum TriState {\n+\t/**\n+\t * Represents the boolean value of {@code false}.\n+\t */\n \tFALSE,\n+\t/**\n+\t * Represents a value that refers to a \"default\" value, often as a fallback.\n+\t */\n \tDEFAULT,\n+\t/**\n+\t * Represents the boolean value of {@code true}.\n+\t */\n \tTRUE;\n \n-\tpublic static TriState of(boolean b) {\n-\t\treturn b ? TRUE : FALSE;\n+\t/**\n+\t * Gets the corresponding tri-state from a boolean value.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(boolean bool) {\n+\t\treturn bool ? TRUE : FALSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ddb2b96e6b18f3b8708987b1f2b66ac057c388"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1NzU5Nw==", "bodyText": "Choose DEFAULT or TriState.DEFAULT as a general style", "url": "https://github.com/FabricMC/fabric/pull/1043#discussion_r476257597", "createdAt": "2020-08-25T08:06:00Z", "author": {"login": "Vaerian"}, "path": "fabric-api-base/src/main/java/net/fabricmc/fabric/api/util/TriState.java", "diffHunk": "@@ -16,16 +16,197 @@\n \n package net.fabricmc.fabric.api.util;\n \n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents a boolean value which can be true, false or refer to a default value.\n+ */\n public enum TriState {\n+\t/**\n+\t * Represents the boolean value of {@code false}.\n+\t */\n \tFALSE,\n+\t/**\n+\t * Represents a value that refers to a \"default\" value, often as a fallback.\n+\t */\n \tDEFAULT,\n+\t/**\n+\t * Represents the boolean value of {@code true}.\n+\t */\n \tTRUE;\n \n-\tpublic static TriState of(boolean b) {\n-\t\treturn b ? TRUE : FALSE;\n+\t/**\n+\t * Gets the corresponding tri-state from a boolean value.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(boolean bool) {\n+\t\treturn bool ? TRUE : FALSE;\n+\t}\n+\n+\t/**\n+\t * Gets a tri-state from a nullable boxed boolean.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#DEFAULT} if {@code null}.\n+\t * Otherwise {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(/* @Nullable */ Boolean bool) {\n+\t\tif (bool == null) {\n+\t\t\treturn DEFAULT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ddb2b96e6b18f3b8708987b1f2b66ac057c388"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1Nzc3OA==", "bodyText": "Choose TRUE or TriState.TRUE as a general style", "url": "https://github.com/FabricMC/fabric/pull/1043#discussion_r476257778", "createdAt": "2020-08-25T08:06:20Z", "author": {"login": "Vaerian"}, "path": "fabric-api-base/src/main/java/net/fabricmc/fabric/api/util/TriState.java", "diffHunk": "@@ -16,16 +16,197 @@\n \n package net.fabricmc.fabric.api.util;\n \n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents a boolean value which can be true, false or refer to a default value.\n+ */\n public enum TriState {\n+\t/**\n+\t * Represents the boolean value of {@code false}.\n+\t */\n \tFALSE,\n+\t/**\n+\t * Represents a value that refers to a \"default\" value, often as a fallback.\n+\t */\n \tDEFAULT,\n+\t/**\n+\t * Represents the boolean value of {@code true}.\n+\t */\n \tTRUE;\n \n-\tpublic static TriState of(boolean b) {\n-\t\treturn b ? TRUE : FALSE;\n+\t/**\n+\t * Gets the corresponding tri-state from a boolean value.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(boolean bool) {\n+\t\treturn bool ? TRUE : FALSE;\n+\t}\n+\n+\t/**\n+\t * Gets a tri-state from a nullable boxed boolean.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#DEFAULT} if {@code null}.\n+\t * Otherwise {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(/* @Nullable */ Boolean bool) {\n+\t\tif (bool == null) {\n+\t\t\treturn DEFAULT;\n+\t\t}\n+\n+\t\treturn TriState.of(bool.booleanValue());\n \t}\n \n+\t/**\n+\t * Gets the value of the tri-state.\n+\t *\n+\t * @return true if the tri-state is {@link TriState#TRUE}.\n+\t * Otherwise false.\n+\t */\n \tpublic boolean get() {\n \t\treturn this == TRUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ddb2b96e6b18f3b8708987b1f2b66ac057c388"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1ODE5NQ==", "bodyText": "Choose DEFAULT or TriState.DEFAULT as a general style", "url": "https://github.com/FabricMC/fabric/pull/1043#discussion_r476258195", "createdAt": "2020-08-25T08:07:00Z", "author": {"login": "Vaerian"}, "path": "fabric-api-base/src/main/java/net/fabricmc/fabric/api/util/TriState.java", "diffHunk": "@@ -16,16 +16,197 @@\n \n package net.fabricmc.fabric.api.util;\n \n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents a boolean value which can be true, false or refer to a default value.\n+ */\n public enum TriState {\n+\t/**\n+\t * Represents the boolean value of {@code false}.\n+\t */\n \tFALSE,\n+\t/**\n+\t * Represents a value that refers to a \"default\" value, often as a fallback.\n+\t */\n \tDEFAULT,\n+\t/**\n+\t * Represents the boolean value of {@code true}.\n+\t */\n \tTRUE;\n \n-\tpublic static TriState of(boolean b) {\n-\t\treturn b ? TRUE : FALSE;\n+\t/**\n+\t * Gets the corresponding tri-state from a boolean value.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(boolean bool) {\n+\t\treturn bool ? TRUE : FALSE;\n+\t}\n+\n+\t/**\n+\t * Gets a tri-state from a nullable boxed boolean.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#DEFAULT} if {@code null}.\n+\t * Otherwise {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(/* @Nullable */ Boolean bool) {\n+\t\tif (bool == null) {\n+\t\t\treturn DEFAULT;\n+\t\t}\n+\n+\t\treturn TriState.of(bool.booleanValue());\n \t}\n \n+\t/**\n+\t * Gets the value of the tri-state.\n+\t *\n+\t * @return true if the tri-state is {@link TriState#TRUE}.\n+\t * Otherwise false.\n+\t */\n \tpublic boolean get() {\n \t\treturn this == TRUE;\n \t}\n+\n+\t/**\n+\t * Gets the value of the tri-state as a boxed, nullable boolean.\n+\t *\n+\t * @return {@code null} if {@link TriState#DEFAULT}.\n+\t * Otherwise {@code true} if {@link TriState#TRUE} or {@code false} if {@link TriState#FALSE}.\n+\t */\n+\t/* @Nullable */\n+\tpublic Boolean getBoxed() {\n+\t\tif (this == TriState.DEFAULT) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\treturn this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param value the value to fallback to\n+\t * @return the value of the tri-state or the supplied value if {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElse(boolean value) {\n+\t\treturn this == TriState.DEFAULT ? value : this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param supplier the supplier used to get the value to fallback to\n+\t * @return the value of the tri-state or the value of the supplier if the tri-state is {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElseGet(BooleanSupplier supplier) {\n+\t\treturn this == TriState.DEFAULT ? supplier.getAsBoolean() : this.get();\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#TRUE}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#TRUE} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapTrue(Supplier<T> mapper) {\n+\t\tObjects.requireNonNull(mapper);\n+\n+\t\tif (this == TRUE) {\n+\t\t\treturn Optional.ofNullable(mapper.get());\n+\t\t}\n+\n+\t\treturn Optional.empty();\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#TRUE}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#FALSE} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapFalse(Supplier<T> mapper) {\n+\t\tObjects.requireNonNull(mapper);\n+\n+\t\tif (this == FALSE) {\n+\t\t\treturn Optional.ofNullable(mapper.get());\n+\t\t}\n+\n+\t\treturn Optional.empty();\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#DEFAULT}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#DEFAULT} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapDefault(Supplier<T> mapper) {\n+\t\tObjects.requireNonNull(mapper);\n+\n+\t\tif (this == DEFAULT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ddb2b96e6b18f3b8708987b1f2b66ac057c388"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1ODQ0NA==", "bodyText": "Choose TRUE or TriState.TRUE as a general style", "url": "https://github.com/FabricMC/fabric/pull/1043#discussion_r476258444", "createdAt": "2020-08-25T08:07:25Z", "author": {"login": "Vaerian"}, "path": "fabric-api-base/src/main/java/net/fabricmc/fabric/api/util/TriState.java", "diffHunk": "@@ -16,16 +16,197 @@\n \n package net.fabricmc.fabric.api.util;\n \n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents a boolean value which can be true, false or refer to a default value.\n+ */\n public enum TriState {\n+\t/**\n+\t * Represents the boolean value of {@code false}.\n+\t */\n \tFALSE,\n+\t/**\n+\t * Represents a value that refers to a \"default\" value, often as a fallback.\n+\t */\n \tDEFAULT,\n+\t/**\n+\t * Represents the boolean value of {@code true}.\n+\t */\n \tTRUE;\n \n-\tpublic static TriState of(boolean b) {\n-\t\treturn b ? TRUE : FALSE;\n+\t/**\n+\t * Gets the corresponding tri-state from a boolean value.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(boolean bool) {\n+\t\treturn bool ? TRUE : FALSE;\n+\t}\n+\n+\t/**\n+\t * Gets a tri-state from a nullable boxed boolean.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#DEFAULT} if {@code null}.\n+\t * Otherwise {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(/* @Nullable */ Boolean bool) {\n+\t\tif (bool == null) {\n+\t\t\treturn DEFAULT;\n+\t\t}\n+\n+\t\treturn TriState.of(bool.booleanValue());\n \t}\n \n+\t/**\n+\t * Gets the value of the tri-state.\n+\t *\n+\t * @return true if the tri-state is {@link TriState#TRUE}.\n+\t * Otherwise false.\n+\t */\n \tpublic boolean get() {\n \t\treturn this == TRUE;\n \t}\n+\n+\t/**\n+\t * Gets the value of the tri-state as a boxed, nullable boolean.\n+\t *\n+\t * @return {@code null} if {@link TriState#DEFAULT}.\n+\t * Otherwise {@code true} if {@link TriState#TRUE} or {@code false} if {@link TriState#FALSE}.\n+\t */\n+\t/* @Nullable */\n+\tpublic Boolean getBoxed() {\n+\t\tif (this == TriState.DEFAULT) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\treturn this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param value the value to fallback to\n+\t * @return the value of the tri-state or the supplied value if {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElse(boolean value) {\n+\t\treturn this == TriState.DEFAULT ? value : this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param supplier the supplier used to get the value to fallback to\n+\t * @return the value of the tri-state or the value of the supplier if the tri-state is {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElseGet(BooleanSupplier supplier) {\n+\t\treturn this == TriState.DEFAULT ? supplier.getAsBoolean() : this.get();\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#TRUE}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#TRUE} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapTrue(Supplier<T> mapper) {\n+\t\tObjects.requireNonNull(mapper);\n+\n+\t\tif (this == TRUE) {\n+\t\t\treturn Optional.ofNullable(mapper.get());\n+\t\t}\n+\n+\t\treturn Optional.empty();\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#TRUE}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#FALSE} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapFalse(Supplier<T> mapper) {\n+\t\tObjects.requireNonNull(mapper);\n+\n+\t\tif (this == FALSE) {\n+\t\t\treturn Optional.ofNullable(mapper.get());\n+\t\t}\n+\n+\t\treturn Optional.empty();\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#DEFAULT}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#DEFAULT} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapDefault(Supplier<T> mapper) {\n+\t\tObjects.requireNonNull(mapper);\n+\n+\t\tif (this == DEFAULT) {\n+\t\t\treturn Optional.ofNullable(mapper.get());\n+\t\t}\n+\n+\t\treturn Optional.empty();\n+\t}\n+\n+\t/**\n+\t * Calls the supplied runnable if this tri-state is {@link TriState#TRUE}.\n+\t *\n+\t * @param runnable the interface to run\n+\t */\n+\tpublic void ifTrue(Runnable runnable) {\n+\t\tif (this == TRUE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ddb2b96e6b18f3b8708987b1f2b66ac057c388"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI2MDU2MQ==", "bodyText": "Same here you could probably just make one general method and have the three enum type corresponding methods just use that one general method's return with the respective enum type as a parameter.\nprivate void ifEq(TriState comparison, Runnable runnable) {\n    if (this == comparison) {\n        runnable.run();\n    }\n}\n\npublic void ifTrue(Runnable runnable) {\n    this.ifEq(TriState.TRUE, runnable);\n}\n\npublic void ifFalse(Runnable runnable) {\n    this.ifEq(TriState.FALSE, runnable);\n}\n\npublic void ifDefault(Runnable runnable) {\n    this.ifEq(TriState.DEFAULT, runnable);\n}", "url": "https://github.com/FabricMC/fabric/pull/1043#discussion_r476260561", "createdAt": "2020-08-25T08:11:03Z", "author": {"login": "Vaerian"}, "path": "fabric-api-base/src/main/java/net/fabricmc/fabric/api/util/TriState.java", "diffHunk": "@@ -16,16 +16,197 @@\n \n package net.fabricmc.fabric.api.util;\n \n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents a boolean value which can be true, false or refer to a default value.\n+ */\n public enum TriState {\n+\t/**\n+\t * Represents the boolean value of {@code false}.\n+\t */\n \tFALSE,\n+\t/**\n+\t * Represents a value that refers to a \"default\" value, often as a fallback.\n+\t */\n \tDEFAULT,\n+\t/**\n+\t * Represents the boolean value of {@code true}.\n+\t */\n \tTRUE;\n \n-\tpublic static TriState of(boolean b) {\n-\t\treturn b ? TRUE : FALSE;\n+\t/**\n+\t * Gets the corresponding tri-state from a boolean value.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(boolean bool) {\n+\t\treturn bool ? TRUE : FALSE;\n+\t}\n+\n+\t/**\n+\t * Gets a tri-state from a nullable boxed boolean.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#DEFAULT} if {@code null}.\n+\t * Otherwise {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(/* @Nullable */ Boolean bool) {\n+\t\tif (bool == null) {\n+\t\t\treturn DEFAULT;\n+\t\t}\n+\n+\t\treturn TriState.of(bool.booleanValue());\n \t}\n \n+\t/**\n+\t * Gets the value of the tri-state.\n+\t *\n+\t * @return true if the tri-state is {@link TriState#TRUE}.\n+\t * Otherwise false.\n+\t */\n \tpublic boolean get() {\n \t\treturn this == TRUE;\n \t}\n+\n+\t/**\n+\t * Gets the value of the tri-state as a boxed, nullable boolean.\n+\t *\n+\t * @return {@code null} if {@link TriState#DEFAULT}.\n+\t * Otherwise {@code true} if {@link TriState#TRUE} or {@code false} if {@link TriState#FALSE}.\n+\t */\n+\t/* @Nullable */\n+\tpublic Boolean getBoxed() {\n+\t\tif (this == TriState.DEFAULT) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\treturn this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param value the value to fallback to\n+\t * @return the value of the tri-state or the supplied value if {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElse(boolean value) {\n+\t\treturn this == TriState.DEFAULT ? value : this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param supplier the supplier used to get the value to fallback to\n+\t * @return the value of the tri-state or the value of the supplier if the tri-state is {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElseGet(BooleanSupplier supplier) {\n+\t\treturn this == TriState.DEFAULT ? supplier.getAsBoolean() : this.get();\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#TRUE}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#TRUE} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapTrue(Supplier<T> mapper) {\n+\t\tObjects.requireNonNull(mapper);\n+\n+\t\tif (this == TRUE) {\n+\t\t\treturn Optional.ofNullable(mapper.get());\n+\t\t}\n+\n+\t\treturn Optional.empty();\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#TRUE}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#FALSE} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapFalse(Supplier<T> mapper) {\n+\t\tObjects.requireNonNull(mapper);\n+\n+\t\tif (this == FALSE) {\n+\t\t\treturn Optional.ofNullable(mapper.get());\n+\t\t}\n+\n+\t\treturn Optional.empty();\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#DEFAULT}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#DEFAULT} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapDefault(Supplier<T> mapper) {\n+\t\tObjects.requireNonNull(mapper);\n+\n+\t\tif (this == DEFAULT) {\n+\t\t\treturn Optional.ofNullable(mapper.get());\n+\t\t}\n+\n+\t\treturn Optional.empty();\n+\t}\n+\n+\t/**\n+\t * Calls the supplied runnable if this tri-state is {@link TriState#TRUE}.\n+\t *\n+\t * @param runnable the interface to run\n+\t */\n+\tpublic void ifTrue(Runnable runnable) {\n+\t\tif (this == TRUE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ddb2b96e6b18f3b8708987b1f2b66ac057c388"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NDExMzQ2", "url": "https://github.com/FabricMC/fabric/pull/1043#pullrequestreview-477411346", "createdAt": "2020-08-28T07:38:47Z", "commit": {"oid": "3b22c27a684a19945d94f1737d8838057d3855a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTE2OTg2", "url": "https://github.com/FabricMC/fabric/pull/1043#pullrequestreview-477916986", "createdAt": "2020-08-28T17:46:11Z", "commit": {"oid": "3b22c27a684a19945d94f1737d8838057d3855a2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5ODY3MDc4", "url": "https://github.com/FabricMC/fabric/pull/1043#pullrequestreview-479867078", "createdAt": "2020-09-01T15:33:02Z", "commit": {"oid": "3b22c27a684a19945d94f1737d8838057d3855a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYwOTQ1", "url": "https://github.com/FabricMC/fabric/pull/1043#pullrequestreview-492160945", "createdAt": "2020-09-19T23:10:42Z", "commit": {"oid": "3b22c27a684a19945d94f1737d8838057d3855a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50aa052c804d2416a4a1c6db1172559bb7464820", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/50aa052c804d2416a4a1c6db1172559bb7464820", "committedDate": "2020-09-20T18:49:33Z", "message": "Tri-state extensions\n\nAdds new extensions to tri-state and some javadoc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9100e94d89cdd2e9d66a27fccc912eb64fd91e12", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/9100e94d89cdd2e9d66a27fccc912eb64fd91e12", "committedDate": "2020-09-20T18:49:33Z", "message": "Part 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b3b759d208a20c7f865c9cadfce5f853c6889f3", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/3b3b759d208a20c7f865c9cadfce5f853c6889f3", "committedDate": "2020-09-20T18:49:33Z", "message": "Comment fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1360f4da47ce689ee533312cc6b78f4810f577ac", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/1360f4da47ce689ee533312cc6b78f4810f577ac", "committedDate": "2020-09-20T18:49:33Z", "message": "More conistent codestyle, abstract the map and ifxyz code a bit"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b22c27a684a19945d94f1737d8838057d3855a2", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/3b22c27a684a19945d94f1737d8838057d3855a2", "committedDate": "2020-08-25T18:52:52Z", "message": "More conistent codestyle, abstract the map and ifxyz code a bit"}, "afterCommit": {"oid": "1360f4da47ce689ee533312cc6b78f4810f577ac", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/1360f4da47ce689ee533312cc6b78f4810f577ac", "committedDate": "2020-09-20T18:49:33Z", "message": "More conistent codestyle, abstract the map and ifxyz code a bit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1559a1ba26b17cbb56388922ca38972060ea0ec6", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/1559a1ba26b17cbb56388922ca38972060ea0ec6", "committedDate": "2020-09-20T18:51:33Z", "message": "Annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8f74f82ce0e1bb620a21c0552813d99b9781800", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/d8f74f82ce0e1bb620a21c0552813d99b9781800", "committedDate": "2020-10-01T16:17:05Z", "message": "Player said no to qualifying static members local to the TriState enum."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzAyMzI2", "url": "https://github.com/FabricMC/fabric/pull/1043#pullrequestreview-500702326", "createdAt": "2020-10-01T20:41:20Z", "commit": {"oid": "d8f74f82ce0e1bb620a21c0552813d99b9781800"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzAzNDI2", "url": "https://github.com/FabricMC/fabric/pull/1043#pullrequestreview-500703426", "createdAt": "2020-10-01T20:43:09Z", "commit": {"oid": "d8f74f82ce0e1bb620a21c0552813d99b9781800"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo0MzowOVrOHbaKyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo0MzowOVrOHbaKyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMjM0Nw==", "bodyText": "xception -> exception", "url": "https://github.com/FabricMC/fabric/pull/1043#discussion_r498502347", "createdAt": "2020-10-01T20:43:09Z", "author": {"login": "LoganDark"}, "path": "fabric-api-base/src/main/java/net/fabricmc/fabric/api/util/TriState.java", "diffHunk": "@@ -16,16 +16,185 @@\n \n package net.fabricmc.fabric.api.util;\n \n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.Supplier;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Represents a boolean value which can be true, false or refer to a default value.\n+ */\n public enum TriState {\n+\t/**\n+\t * Represents the boolean value of {@code false}.\n+\t */\n \tFALSE,\n+\t/**\n+\t * Represents a value that refers to a \"default\" value, often as a fallback.\n+\t */\n \tDEFAULT,\n+\t/**\n+\t * Represents the boolean value of {@code true}.\n+\t */\n \tTRUE;\n \n-\tpublic static TriState of(boolean b) {\n-\t\treturn b ? TRUE : FALSE;\n+\t/**\n+\t * Gets the corresponding tri-state from a boolean value.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(boolean bool) {\n+\t\treturn bool ? TRUE : FALSE;\n+\t}\n+\n+\t/**\n+\t * Gets a tri-state from a nullable boxed boolean.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#DEFAULT} if {@code null}.\n+\t * Otherwise {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(@Nullable Boolean bool) {\n+\t\treturn bool == null ? DEFAULT : of(bool.booleanValue());\n \t}\n \n+\t/**\n+\t * Gets the value of the tri-state.\n+\t *\n+\t * @return true if the tri-state is {@link TriState#TRUE}.\n+\t * Otherwise false.\n+\t */\n \tpublic boolean get() {\n \t\treturn this == TRUE;\n \t}\n+\n+\t/**\n+\t * Gets the value of the tri-state as a boxed, nullable boolean.\n+\t *\n+\t * @return {@code null} if {@link TriState#DEFAULT}.\n+\t * Otherwise {@code true} if {@link TriState#TRUE} or {@code false} if {@link TriState#FALSE}.\n+\t */\n+\t@Nullable\n+\tpublic Boolean getBoxed() {\n+\t\treturn this == DEFAULT ? null : this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param value the value to fallback to\n+\t * @return the value of the tri-state or the supplied value if {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElse(boolean value) {\n+\t\treturn this == DEFAULT ? value : this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param supplier the supplier used to get the value to fallback to\n+\t * @return the value of the tri-state or the value of the supplier if the tri-state is {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElseGet(BooleanSupplier supplier) {\n+\t\treturn this == DEFAULT ? supplier.getAsBoolean() : this.get();\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#TRUE}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#TRUE} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapTrue(Supplier<@Nullable T> mapper) {\n+\t\treturn this.mapEq(TRUE, mapper);\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#TRUE}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#FALSE} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapFalse(Supplier<@Nullable T> mapper) {\n+\t\treturn this.mapEq(FALSE, mapper);\n+\t}\n+\n+\t/**\n+\t * Maps the value of an optional if this tri-state is {@link TriState#DEFAULT}.\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object supplied by the mapper\n+\t * @return an optional containing the value if {@link TriState#DEFAULT} and the value returned by the mapper is non-null, otherwise {@link Optional#empty()}.\n+\t */\n+\tpublic <T> Optional<T> mapDefault(Supplier<@Nullable T> mapper) {\n+\t\treturn this.mapEq(DEFAULT, mapper);\n+\t}\n+\n+\tprivate <T> Optional<T> mapEq(TriState comparison, Supplier<@Nullable T> mapper) {\n+\t\tObjects.requireNonNull(mapper);\n+\n+\t\tif (this == comparison) {\n+\t\t\treturn Optional.ofNullable(mapper.get());\n+\t\t}\n+\n+\t\treturn Optional.empty();\n+\t}\n+\n+\t/**\n+\t * Calls the supplied runnable if this tri-state is {@link TriState#TRUE}.\n+\t *\n+\t * @param runnable the interface to run\n+\t */\n+\tpublic void ifTrue(Runnable runnable) {\n+\t\tthis.ifEq(TRUE, runnable);\n+\t}\n+\n+\t/**\n+\t * Calls the supplied runnable if this tri-state is {@link TriState#FALSE}.\n+\t *\n+\t * @param runnable the interface to run\n+\t */\n+\tpublic void ifFalse(Runnable runnable) {\n+\t\tthis.ifEq(FALSE, runnable);\n+\t}\n+\n+\t/**\n+\t * Calls the supplied runnable if this tri-state is {@link TriState#DEFAULT}.\n+\t *\n+\t * @param runnable the interface to run\n+\t */\n+\tpublic void ifDefault(Runnable runnable) {\n+\t\tthis.ifEq(DEFAULT, runnable);\n+\t}\n+\n+\tprivate void ifEq(TriState comparison, Runnable runnable) {\n+\t\tObjects.requireNonNull(runnable);\n+\n+\t\tif (this == comparison) {\n+\t\t\trunnable.run();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state, or throws an exception if this tri-state's value is {@link TriState#DEFAULT}.\n+\t *\n+\t * @param exceptionSupplier the supplying function that produces an xception to be thrown", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8f74f82ce0e1bb620a21c0552813d99b9781800"}, "originalPosition": 175}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c6730d988e61cddf75a0ce7adf03a46e054660a", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/8c6730d988e61cddf75a0ce7adf03a46e054660a", "committedDate": "2020-10-02T05:09:16Z", "message": "Exceptional spelling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1a6357ab966bb54301107b8888cbcf6f9430ab8", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/f1a6357ab966bb54301107b8888cbcf6f9430ab8", "committedDate": "2020-10-04T01:00:13Z", "message": "add a more Optional-like map method and drop if*State*"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e267d5ed347217014bbd3f96fb28be54d90d684d", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/e267d5ed347217014bbd3f96fb28be54d90d684d", "committedDate": "2020-10-04T01:26:53Z", "message": "? extends T this time"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTg0NDEz", "url": "https://github.com/FabricMC/fabric/pull/1043#pullrequestreview-501584413", "createdAt": "2020-10-04T01:36:35Z", "commit": {"oid": "e267d5ed347217014bbd3f96fb28be54d90d684d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxOTI5Njcz", "url": "https://github.com/FabricMC/fabric/pull/1043#pullrequestreview-501929673", "createdAt": "2020-10-05T10:41:57Z", "commit": {"oid": "e267d5ed347217014bbd3f96fb28be54d90d684d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDo0MTo1N1rOHcXXHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDo0MTo1N1rOHcXXHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNDkyNg==", "bodyText": "everything else checks this == DEFAULT instead, should probably be changed here, too, for consistency.", "url": "https://github.com/FabricMC/fabric/pull/1043#discussion_r499504926", "createdAt": "2020-10-05T10:41:57Z", "author": {"login": "UpcraftLP"}, "path": "fabric-api-base/src/main/java/net/fabricmc/fabric/api/util/TriState.java", "diffHunk": "@@ -16,16 +16,124 @@\n \n package net.fabricmc.fabric.api.util;\n \n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.Supplier;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Represents a boolean value which can be true, false or refer to a default value.\n+ */\n public enum TriState {\n+\t/**\n+\t * Represents the boolean value of {@code false}.\n+\t */\n \tFALSE,\n+\t/**\n+\t * Represents a value that refers to a \"default\" value, often as a fallback.\n+\t */\n \tDEFAULT,\n+\t/**\n+\t * Represents the boolean value of {@code true}.\n+\t */\n \tTRUE;\n \n-\tpublic static TriState of(boolean b) {\n-\t\treturn b ? TRUE : FALSE;\n+\t/**\n+\t * Gets the corresponding tri-state from a boolean value.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(boolean bool) {\n+\t\treturn bool ? TRUE : FALSE;\n+\t}\n+\n+\t/**\n+\t * Gets a tri-state from a nullable boxed boolean.\n+\t *\n+\t * @param bool the boolean value\n+\t * @return {@link TriState#DEFAULT} if {@code null}.\n+\t * Otherwise {@link TriState#TRUE} or {@link TriState#FALSE} depending on the value of the boolean.\n+\t */\n+\tpublic static TriState of(@Nullable Boolean bool) {\n+\t\treturn bool == null ? DEFAULT : of(bool.booleanValue());\n \t}\n \n+\t/**\n+\t * Gets the value of the tri-state.\n+\t *\n+\t * @return true if the tri-state is {@link TriState#TRUE}.\n+\t * Otherwise false.\n+\t */\n \tpublic boolean get() {\n \t\treturn this == TRUE;\n \t}\n+\n+\t/**\n+\t * Gets the value of the tri-state as a boxed, nullable boolean.\n+\t *\n+\t * @return {@code null} if {@link TriState#DEFAULT}.\n+\t * Otherwise {@code true} if {@link TriState#TRUE} or {@code false} if {@link TriState#FALSE}.\n+\t */\n+\t@Nullable\n+\tpublic Boolean getBoxed() {\n+\t\treturn this == DEFAULT ? null : this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param value the value to fallback to\n+\t * @return the value of the tri-state or the supplied value if {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElse(boolean value) {\n+\t\treturn this == DEFAULT ? value : this.get();\n+\t}\n+\n+\t/**\n+\t * Gets the value of this tri-state.\n+\t * If the value is {@link TriState#DEFAULT} then use the supplied value.\n+\t *\n+\t * @param supplier the supplier used to get the value to fallback to\n+\t * @return the value of the tri-state or the value of the supplier if the tri-state is {@link TriState#DEFAULT}.\n+\t */\n+\tpublic boolean orElseGet(BooleanSupplier supplier) {\n+\t\treturn this == DEFAULT ? supplier.getAsBoolean() : this.get();\n+\t}\n+\n+\t/**\n+\t * Maps the boolean value of this tri-state if it is {@link TriState#TRUE} or {@link TriState#FALSE}\n+\t *\n+\t * @param mapper the mapper to use\n+\t * @param <T> the type of object being supplier by the mapper\n+\t * @return an optional containing the mapped value; {@link Optional#empty()} if the tri-state is {@link TriState#DEFAULT} or the value provided by the mapper is {@code null}.\n+\t */\n+\tpublic <T> Optional<T> map(BooleanFunction<@Nullable ? extends T> mapper) {\n+\t\tObjects.requireNonNull(mapper, \"Mapper function cannot be null\");\n+\n+\t\tif (this.getBoxed() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e267d5ed347217014bbd3f96fb28be54d90d684d"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fea558ac9bb81ae9653f6a21d6ca28e4af5aaef3", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/fea558ac9bb81ae9653f6a21d6ca28e4af5aaef3", "committedDate": "2020-10-05T14:35:56Z", "message": "Compare to default rather than null of getBoxed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c72f7df07a3931a8060abcc42a47c1f1183baf2", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/1c72f7df07a3931a8060abcc42a47c1f1183baf2", "committedDate": "2020-10-05T15:00:58Z", "message": "Puncation of course"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMzI5Mjcx", "url": "https://github.com/FabricMC/fabric/pull/1043#pullrequestreview-502329271", "createdAt": "2020-10-05T18:50:44Z", "commit": {"oid": "1c72f7df07a3931a8060abcc42a47c1f1183baf2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDg0NDM0", "url": "https://github.com/FabricMC/fabric/pull/1043#pullrequestreview-506084434", "createdAt": "2020-10-10T09:52:02Z", "commit": {"oid": "1c72f7df07a3931a8060abcc42a47c1f1183baf2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDg0NDk1", "url": "https://github.com/FabricMC/fabric/pull/1043#pullrequestreview-506084495", "createdAt": "2020-10-10T09:52:56Z", "commit": {"oid": "1c72f7df07a3931a8060abcc42a47c1f1183baf2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3267, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}