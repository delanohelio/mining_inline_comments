{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMjg5Njk2", "number": 1029, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0OTo0OFrOEaEMcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTozNTowOVrOEpozEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzY3MTU0OnYy", "diffSide": "RIGHT", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/DynamicRegistryEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0OTo0OFrOHDQb1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowNDozMlrOHDRMYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NzA0NA==", "bodyText": "I'd say final class with private ctor here.", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r473177044", "createdAt": "2020-08-19T16:49:48Z", "author": {"login": "i509VCB"}, "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/DynamicRegistryEvents.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import java.util.Map;\n+\n+import com.google.common.collect.Maps;\n+\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.registry.DynamicRegistryEntryAddedCallback;\n+import net.fabricmc.fabric.mixin.registry.sync.DynamicRegistryManagerAccessor;\n+\n+public abstract class DynamicRegistryEvents {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce49f034e6c2469f257e9ec49c4e7995df14daeb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4OTQ3Mg==", "bodyText": "ah yes, wasn't sure how java does this.", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r473189472", "createdAt": "2020-08-19T17:04:32Z", "author": {"login": "CheaterCodes"}, "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/DynamicRegistryEvents.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import java.util.Map;\n+\n+import com.google.common.collect.Maps;\n+\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.registry.DynamicRegistryEntryAddedCallback;\n+import net.fabricmc.fabric.mixin.registry.sync.DynamicRegistryManagerAccessor;\n+\n+public abstract class DynamicRegistryEvents {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NzA0NA=="}, "originalCommit": {"oid": "ce49f034e6c2469f257e9ec49c4e7995df14daeb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzY3Mzk3OnYy", "diffSide": "RIGHT", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistryEntryAddedCallback.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo1MDozMVrOHDQdTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToyMTo0MFrOHDV0EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NzQyMQ==", "bodyText": "You may be able to pass the generic type here and on the interface.", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r473177421", "createdAt": "2020-08-19T16:50:31Z", "author": {"login": "i509VCB"}, "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistryEntryAddedCallback.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import net.minecraft.util.registry.MutableRegistry;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.impl.registry.sync.DynamicRegistryEvents;\n+\n+@FunctionalInterface\n+public interface DynamicRegistryEntryAddedCallback {\n+\tvoid onEntryAdded(int rawId, RegistryKey<?> key, Object object, MutableRegistry<?> registry);\n+\n+\tstatic Event<DynamicRegistryEntryAddedCallback> event(RegistryKey<? extends Registry<?>> registryKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce49f034e6c2469f257e9ec49c4e7995df14daeb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxMTk4MQ==", "bodyText": "I can change it on the Interface without issues, but I get lots of problems in other classes.\nMaybe someone who knows more than I can fix it :)", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r473211981", "createdAt": "2020-08-19T17:42:33Z", "author": {"login": "CheaterCodes"}, "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistryEntryAddedCallback.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import net.minecraft.util.registry.MutableRegistry;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.impl.registry.sync.DynamicRegistryEvents;\n+\n+@FunctionalInterface\n+public interface DynamicRegistryEntryAddedCallback {\n+\tvoid onEntryAdded(int rawId, RegistryKey<?> key, Object object, MutableRegistry<?> registry);\n+\n+\tstatic Event<DynamicRegistryEntryAddedCallback> event(RegistryKey<? extends Registry<?>> registryKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NzQyMQ=="}, "originalCommit": {"oid": "ce49f034e6c2469f257e9ec49c4e7995df14daeb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2NTE2OA==", "bodyText": "Nvm, figured it out, should be good now :)", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r473265168", "createdAt": "2020-08-19T19:21:40Z", "author": {"login": "CheaterCodes"}, "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistryEntryAddedCallback.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import net.minecraft.util.registry.MutableRegistry;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.impl.registry.sync.DynamicRegistryEvents;\n+\n+@FunctionalInterface\n+public interface DynamicRegistryEntryAddedCallback {\n+\tvoid onEntryAdded(int rawId, RegistryKey<?> key, Object object, MutableRegistry<?> registry);\n+\n+\tstatic Event<DynamicRegistryEntryAddedCallback> event(RegistryKey<? extends Registry<?>> registryKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NzQyMQ=="}, "originalCommit": {"oid": "ce49f034e6c2469f257e9ec49c4e7995df14daeb"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzcxOTY0OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowMDoyMFrOHDQ8LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowNDoxMVrOHDRLGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NTMyNQ==", "bodyText": "In my opinion, it might be good to require 0.9.2 in fabric.mod.json", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r473185325", "createdAt": "2020-08-19T17:00:20Z", "author": {"login": "shedaniel"}, "path": "build.gradle", "diffHunk": "@@ -73,7 +73,7 @@ allprojects {\n \tdependencies {\n \t\tminecraft \"com.mojang:minecraft:$Globals.mcVersion\"\n \t\tmappings \"net.fabricmc:yarn:${Globals.mcVersion}${Globals.yarnVersion}:v2\"\n-\t\tmodCompile \"net.fabricmc:fabric-loader:0.8.9+build.203\"\n+\t\tmodCompile \"net.fabricmc:fabric-loader:0.9.2+build.206\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce49f034e6c2469f257e9ec49c4e7995df14daeb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NjMzNA==", "bodyText": "For registry sync's json file specifically.", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r473186334", "createdAt": "2020-08-19T17:01:22Z", "author": {"login": "i509VCB"}, "path": "build.gradle", "diffHunk": "@@ -73,7 +73,7 @@ allprojects {\n \tdependencies {\n \t\tminecraft \"com.mojang:minecraft:$Globals.mcVersion\"\n \t\tmappings \"net.fabricmc:yarn:${Globals.mcVersion}${Globals.yarnVersion}:v2\"\n-\t\tmodCompile \"net.fabricmc:fabric-loader:0.8.9+build.203\"\n+\t\tmodCompile \"net.fabricmc:fabric-loader:0.9.2+build.206\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NTMyNQ=="}, "originalCommit": {"oid": "ce49f034e6c2469f257e9ec49c4e7995df14daeb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4OTE0NQ==", "bodyText": "I mean, technically it doesn't require it.\nBut all mods calling it from their ModInitializer require it.\nI'd be happy to change it from... uhh... >=0.4.0 to >= 0.9.2.", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r473189145", "createdAt": "2020-08-19T17:04:11Z", "author": {"login": "CheaterCodes"}, "path": "build.gradle", "diffHunk": "@@ -73,7 +73,7 @@ allprojects {\n \tdependencies {\n \t\tminecraft \"com.mojang:minecraft:$Globals.mcVersion\"\n \t\tmappings \"net.fabricmc:yarn:${Globals.mcVersion}${Globals.yarnVersion}:v2\"\n-\t\tmodCompile \"net.fabricmc:fabric-loader:0.8.9+build.203\"\n+\t\tmodCompile \"net.fabricmc:fabric-loader:0.9.2+build.206\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NTMyNQ=="}, "originalCommit": {"oid": "ce49f034e6c2469f257e9ec49c4e7995df14daeb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDE2MjY3OnYy", "diffSide": "RIGHT", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/DynamicRegistryManagerMixin.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTo1NDowMlrOHERG7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOTowNDowNVrOHE4Erg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNjY1NA==", "bodyText": "Imo exposing a general event at this point like DynamicRegistrySetupEvent and letting users to register registry entry add callback etc. from this point on would be more useful.", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r474236654", "createdAt": "2020-08-20T19:54:02Z", "author": {"login": "liach"}, "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/DynamicRegistryManagerMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.registry.DynamicRegistryEntryAddedCallback;\n+import net.fabricmc.fabric.api.event.registry.RegistryEntryAddedCallback;\n+import net.fabricmc.fabric.impl.registry.sync.DynamicRegistryEvents;\n+\n+@Mixin(DynamicRegistryManager.class)\n+public class DynamicRegistryManagerMixin {\n+\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+\t@Inject(method = \"create\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/util/dynamic/RegistryOps$class_5506$class_5507;<init>()V\"), locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate static void onCreateImpl(CallbackInfoReturnable<DynamicRegistryManager.Impl> cir, DynamicRegistryManager.Impl registryManager) {\n+\t\tfor (Map.Entry<RegistryKey<? extends Registry<?>>, Event<?>> event : DynamicRegistryEvents.ADD_ENTRY_EVENTS.entrySet()) {\n+\t\t\tRegistryKey<? extends Registry<Object>> registryKey = (RegistryKey<? extends Registry<Object>>) event.getKey();\n+\t\t\tRegistryEntryAddedCallback.event(registryManager.get(registryKey)).register((rawId, id, object) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d987f451045fd4079770f2007989f6c7601e6abd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4OTI2NA==", "bodyText": "Hm... Good idea...\nI don't see a benefit for usage really, but it might make the code cleaner.\nI'd like to hear another vote or argument for this though. before I change something.", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r474289264", "createdAt": "2020-08-20T21:43:16Z", "author": {"login": "CheaterCodes"}, "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/DynamicRegistryManagerMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.registry.DynamicRegistryEntryAddedCallback;\n+import net.fabricmc.fabric.api.event.registry.RegistryEntryAddedCallback;\n+import net.fabricmc.fabric.impl.registry.sync.DynamicRegistryEvents;\n+\n+@Mixin(DynamicRegistryManager.class)\n+public class DynamicRegistryManagerMixin {\n+\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+\t@Inject(method = \"create\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/util/dynamic/RegistryOps$class_5506$class_5507;<init>()V\"), locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate static void onCreateImpl(CallbackInfoReturnable<DynamicRegistryManager.Impl> cir, DynamicRegistryManager.Impl registryManager) {\n+\t\tfor (Map.Entry<RegistryKey<? extends Registry<?>>, Event<?>> event : DynamicRegistryEvents.ADD_ENTRY_EVENTS.entrySet()) {\n+\t\t\tRegistryKey<? extends Registry<Object>> registryKey = (RegistryKey<? extends Registry<Object>>) event.getKey();\n+\t\t\tRegistryEntryAddedCallback.event(registryManager.get(registryKey)).register((rawId, id, object) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNjY1NA=="}, "originalCommit": {"oid": "d987f451045fd4079770f2007989f6c7601e6abd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxNTA2MQ==", "bodyText": "In that event, modders can not only add their entry add listeners but also remove listeners or other listeners on a registry. That is more extensible than your current setup.", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r474315061", "createdAt": "2020-08-20T22:53:41Z", "author": {"login": "liach"}, "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/DynamicRegistryManagerMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.registry.DynamicRegistryEntryAddedCallback;\n+import net.fabricmc.fabric.api.event.registry.RegistryEntryAddedCallback;\n+import net.fabricmc.fabric.impl.registry.sync.DynamicRegistryEvents;\n+\n+@Mixin(DynamicRegistryManager.class)\n+public class DynamicRegistryManagerMixin {\n+\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+\t@Inject(method = \"create\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/util/dynamic/RegistryOps$class_5506$class_5507;<init>()V\"), locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate static void onCreateImpl(CallbackInfoReturnable<DynamicRegistryManager.Impl> cir, DynamicRegistryManager.Impl registryManager) {\n+\t\tfor (Map.Entry<RegistryKey<? extends Registry<?>>, Event<?>> event : DynamicRegistryEvents.ADD_ENTRY_EVENTS.entrySet()) {\n+\t\t\tRegistryKey<? extends Registry<Object>> registryKey = (RegistryKey<? extends Registry<Object>>) event.getKey();\n+\t\t\tRegistryEntryAddedCallback.event(registryManager.get(registryKey)).register((rawId, id, object) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNjY1NA=="}, "originalCommit": {"oid": "d987f451045fd4079770f2007989f6c7601e6abd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0MzE4Nw==", "bodyText": "I've given this some thought and I agree with you.\nI think it's a little more inconvenient to use but offers much more flexibility.\nI'll implement this today if I can find the time.", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r474643187", "createdAt": "2020-08-21T11:38:50Z", "author": {"login": "CheaterCodes"}, "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/DynamicRegistryManagerMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.registry.DynamicRegistryEntryAddedCallback;\n+import net.fabricmc.fabric.api.event.registry.RegistryEntryAddedCallback;\n+import net.fabricmc.fabric.impl.registry.sync.DynamicRegistryEvents;\n+\n+@Mixin(DynamicRegistryManager.class)\n+public class DynamicRegistryManagerMixin {\n+\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+\t@Inject(method = \"create\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/util/dynamic/RegistryOps$class_5506$class_5507;<init>()V\"), locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate static void onCreateImpl(CallbackInfoReturnable<DynamicRegistryManager.Impl> cir, DynamicRegistryManager.Impl registryManager) {\n+\t\tfor (Map.Entry<RegistryKey<? extends Registry<?>>, Event<?>> event : DynamicRegistryEvents.ADD_ENTRY_EVENTS.entrySet()) {\n+\t\t\tRegistryKey<? extends Registry<Object>> registryKey = (RegistryKey<? extends Registry<Object>>) event.getKey();\n+\t\t\tRegistryEntryAddedCallback.event(registryManager.get(registryKey)).register((rawId, id, object) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNjY1NA=="}, "originalCommit": {"oid": "d987f451045fd4079770f2007989f6c7601e6abd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NTA1NA==", "bodyText": "Done!", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r474875054", "createdAt": "2020-08-21T19:04:05Z", "author": {"login": "CheaterCodes"}, "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/DynamicRegistryManagerMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.registry.DynamicRegistryEntryAddedCallback;\n+import net.fabricmc.fabric.api.event.registry.RegistryEntryAddedCallback;\n+import net.fabricmc.fabric.impl.registry.sync.DynamicRegistryEvents;\n+\n+@Mixin(DynamicRegistryManager.class)\n+public class DynamicRegistryManagerMixin {\n+\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+\t@Inject(method = \"create\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/util/dynamic/RegistryOps$class_5506$class_5507;<init>()V\"), locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate static void onCreateImpl(CallbackInfoReturnable<DynamicRegistryManager.Impl> cir, DynamicRegistryManager.Impl registryManager) {\n+\t\tfor (Map.Entry<RegistryKey<? extends Registry<?>>, Event<?>> event : DynamicRegistryEvents.ADD_ENTRY_EVENTS.entrySet()) {\n+\t\t\tRegistryKey<? extends Registry<Object>> registryKey = (RegistryKey<? extends Registry<Object>>) event.getKey();\n+\t\t\tRegistryEntryAddedCallback.event(registryManager.get(registryKey)).register((rawId, id, object) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNjY1NA=="}, "originalCommit": {"oid": "d987f451045fd4079770f2007989f6c7601e6abd"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDk1NTA2OnYy", "diffSide": "RIGHT", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistrySetupCallback.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTozNTowOVrOHbbi4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTozNzo1N1rOHbbnMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNDg5Ng==", "bodyText": "-> onRegistrySetup to be consistent with everything else and standard naming conventions", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r498524896", "createdAt": "2020-10-01T21:35:09Z", "author": {"login": "sfPlayer1"}, "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistrySetupCallback.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * This event gets triggered when a new {@link DynamicRegistryManager} gets created, but before it gets filled.\n+ * Therefore, this is the ideal place to register callbacks to dynamic registries.\n+ * For example, the following code is used to register a callback that gets triggered for any registered Biome, both JSON and code defined.\n+ *\n+ * <pre>\n+ * {@code\n+ * DynamicRegistrySetupCallback.EVENT.register(registryManager -> {\n+ *     Registry<Biome> biomes = registryManager.get(Registry.BIOME_KEY);\n+ *     RegistryEntryAddedCallback.event(biomes).register((rawId, id, object) -> {\n+ *         // Do something\n+ *     });\n+ * });\n+ * }\n+ * </pre>\n+ */\n+@FunctionalInterface\n+public interface DynamicRegistrySetupCallback {\n+\tvoid onSetupRegistry(DynamicRegistryManager registryManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "811b763fc3ea42364f080c83297901df02429219"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNjAwMw==", "bodyText": "Done!", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r498526003", "createdAt": "2020-10-01T21:37:57Z", "author": {"login": "CheaterCodes"}, "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistrySetupCallback.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * This event gets triggered when a new {@link DynamicRegistryManager} gets created, but before it gets filled.\n+ * Therefore, this is the ideal place to register callbacks to dynamic registries.\n+ * For example, the following code is used to register a callback that gets triggered for any registered Biome, both JSON and code defined.\n+ *\n+ * <pre>\n+ * {@code\n+ * DynamicRegistrySetupCallback.EVENT.register(registryManager -> {\n+ *     Registry<Biome> biomes = registryManager.get(Registry.BIOME_KEY);\n+ *     RegistryEntryAddedCallback.event(biomes).register((rawId, id, object) -> {\n+ *         // Do something\n+ *     });\n+ * });\n+ * }\n+ * </pre>\n+ */\n+@FunctionalInterface\n+public interface DynamicRegistrySetupCallback {\n+\tvoid onSetupRegistry(DynamicRegistryManager registryManager);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNDg5Ng=="}, "originalCommit": {"oid": "811b763fc3ea42364f080c83297901df02429219"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3440, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}