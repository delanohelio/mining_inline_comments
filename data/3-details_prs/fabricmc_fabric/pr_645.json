{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0OTI3NzA0", "number": 645, "title": "Screen API v1", "bodyText": "Supersedes and is based off of #249 brought up to kit with checkstyle and module naming.\nThis is a work in progress module, so far you can:\n\nListen to screens being initialized\nAdd elements and button widgets to a screen\nAdds Screens util class, which allows access to a screen's buttons, widgets, item renderer and text renderer.\n\nRequests for additional functionality are open, if you have any ideas, just comment below and I'll see if they are feasible.", "createdAt": "2020-05-29T07:09:55Z", "url": "https://github.com/FabricMC/fabric/pull/645", "merged": true, "mergeCommit": {"oid": "8e23c1d877bafbf6c12607be5c8450b4824be329"}, "closed": true, "closedAt": "2021-01-25T18:17:18Z", "author": {"login": "i509VCB"}, "timelineItems": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcl9P6OAFqTQyMDcwOTQzOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdxlVcXAFqTU3MDkzNzQwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNzA5NDM5", "url": "https://github.com/FabricMC/fabric/pull/645#pullrequestreview-420709439", "createdAt": "2020-05-29T07:21:15Z", "commit": {"oid": "937ebb6424ea7fa4c1535fd109dee35981a3bbbb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoyMToxNVrOGcRhBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoyMjozMFrOGcRjTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMDI5Mg==", "bodyText": "scaledWidth and scaledHeight", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r432300292", "createdAt": "2020-05-29T07:21:15Z", "author": {"login": "shedaniel"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public interface ScreenInitializeCallback {\n+\tEvent<ScreenInitializeCallback> EVENT = EventFactory.createArrayBacked(ScreenInitializeCallback.class, callbacks -> (screen, context, client, windowWidth, windowHeight) -> {\n+\t\tfor (ScreenInitializeCallback callback : callbacks) {\n+\t\t\tcallback.onInitialize(screen, context, client, windowWidth, windowHeight);\n+\t\t}\n+\t});\n+\n+\tvoid onInitialize(Screen screen, ScreenContext context, MinecraftClient client, int windowWidth, int windowHeight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937ebb6424ea7fa4c1535fd109dee35981a3bbbb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMDg3OA==", "bodyText": "ScreenInitializationCallback or ScreenInitCallback", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r432300878", "createdAt": "2020-05-29T07:22:30Z", "author": {"login": "shedaniel"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public interface ScreenInitializeCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937ebb6424ea7fa4c1535fd109dee35981a3bbbb"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjQ4NDgz", "url": "https://github.com/FabricMC/fabric/pull/645#pullrequestreview-440248483", "createdAt": "2020-06-30T17:44:21Z", "commit": {"oid": "80969ca2a84e30d6f8fe9afba8730f78300c36a6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0NDoyMVrOGrHtOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0NDoyMVrOGrHtOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2ODIxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tLOGGER.info(String.format(\"Initializing %s\", screen.getClass().getName()));\n          \n          \n            \n            \t\tLOGGER.info(\"Initializing {}\", screen.getClass().getName());", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r447868217", "createdAt": "2020-06-30T17:44:21Z", "author": {"login": "Juuxel"}, "path": "fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.screen;\n+\n+import java.util.Random;\n+\n+import com.mojang.blaze3d.systems.RenderSystem;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.DrawableHelper;\n+import net.minecraft.client.gui.hud.InGameHud;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.TitleScreen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenInitCallback;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenRenderCallback;\n+\n+public class ScreenTests implements ClientModInitializer {\n+\tpublic static final Random RANDOM = new Random();\n+\tprivate static final Logger LOGGER = LogManager.getLogger(\"FabricScreenApiTests\");\n+\n+\t@Override\n+\tpublic void onInitializeClient() {\n+\t\tLOGGER.info(\"Started Screen Testmod\");\n+\t\tScreenInitCallback.EVENT.register(this::onInit);\n+\t\tScreenRenderCallback.EVENT.register(this::onRender);\n+\t}\n+\n+\tprivate void onInit(MinecraftClient client, Screen screen, ScreenContext context, int windowWidth, int windowHeight) {\n+\t\tLOGGER.info(String.format(\"Initializing %s\", screen.getClass().getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80969ca2a84e30d6f8fe9afba8730f78300c36a6"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjUwMjA2", "url": "https://github.com/FabricMC/fabric/pull/645#pullrequestreview-440250206", "createdAt": "2020-06-30T17:46:39Z", "commit": {"oid": "80969ca2a84e30d6f8fe9afba8730f78300c36a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0NjozOVrOGrHyXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0NjozOVrOGrHyXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2OTUzMw==", "bodyText": "Should make this method return an ioob exception than a message.", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r447869533", "createdAt": "2020-06-30T17:46:39Z", "author": {"login": "liach"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.screen;\n+\n+import java.util.AbstractList;\n+import java.util.List;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+\n+public final class ButtonList<T extends AbstractButtonWidget> extends AbstractList<T> {\n+\tprivate final List<T> buttons;\n+\tprivate final List<Element> children;\n+\n+\tpublic ButtonList(List<T> buttons, List<Element> children) {\n+\t\tthis.buttons = buttons;\n+\t\tthis.children = children;\n+\t}\n+\n+\t@Override\n+\tpublic T get(int index) {\n+\t\treturn this.buttons.get(index);\n+\t}\n+\n+\t@Override\n+\tpublic T set(int index, T element) {\n+\t\tthis.remove(element); // verify / ensure no duplicates\n+\n+\t\tfinal T existingButton = this.buttons.get(index);\n+\t\tint elementIndex = this.children.indexOf(existingButton);\n+\n+\t\tif (elementIndex > -1) {\n+\t\t\tthis.children.set(elementIndex, element);\n+\t\t}\n+\n+\t\treturn this.buttons.set(index, element);\n+\t}\n+\n+\t@Override\n+\tpublic void add(int index, T element) {\n+\t\tthis.rangeCheckForAdd(index); // verify index bounds\n+\t\tthis.remove(element); // ensure no duplicates\n+\n+\t\tthis.buttons.add(index, element);\n+\t\tthis.children.add(Math.min(this.children.size(), index), element);\n+\t}\n+\n+\t@Override\n+\tpublic T remove(int index) {\n+\t\tthis.rangeCheck(index); // verify index bounds\n+\n+\t\tfinal T removedButton = this.buttons.remove(index);\n+\t\tindex = this.children.indexOf(removedButton);\n+\n+\t\tif (index > -1) {\n+\t\t\tthis.children.remove(index);\n+\t\t}\n+\n+\t\treturn removedButton;\n+\t}\n+\n+\t@Override\n+\tpublic int size() {\n+\t\treturn this.buttons.size();\n+\t}\n+\n+\tprivate void rangeCheck(int index) {\n+\t\tif (index >= this.size()) {\n+\t\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n+\t\t}\n+\t}\n+\n+\tprivate void rangeCheckForAdd(int index) {\n+\t\tif (index > this.size() || index < 0) {\n+\t\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n+\t\t}\n+\t}\n+\n+\tprivate String outOfBoundsMsg(int index) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80969ca2a84e30d6f8fe9afba8730f78300c36a6"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjUxMjQ0", "url": "https://github.com/FabricMC/fabric/pull/645#pullrequestreview-440251244", "createdAt": "2020-06-30T17:48:00Z", "commit": {"oid": "80969ca2a84e30d6f8fe9afba8730f78300c36a6"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf1f4f4292c0a36af8b504870d00a9b95d4fef62", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/bf1f4f4292c0a36af8b504870d00a9b95d4fef62", "committedDate": "2020-06-30T17:46:16Z", "message": "Update fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\n\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"}, "afterCommit": {"oid": "2632d263dbcffe5e92a80dcc7078e4dc7e1be0ca", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/2632d263dbcffe5e92a80dcc7078e4dc7e1be0ca", "committedDate": "2020-07-01T21:45:07Z", "message": "Implement screen api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2632d263dbcffe5e92a80dcc7078e4dc7e1be0ca", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/2632d263dbcffe5e92a80dcc7078e4dc7e1be0ca", "committedDate": "2020-07-01T21:45:07Z", "message": "Implement screen api"}, "afterCommit": {"oid": "e9f1219b54753bf6682d2adccaee575e336798e2", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/e9f1219b54753bf6682d2adccaee575e336798e2", "committedDate": "2020-07-01T21:47:00Z", "message": "Implement screen api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjYwNDUy", "url": "https://github.com/FabricMC/fabric/pull/645#pullrequestreview-441260452", "createdAt": "2020-07-01T23:40:13Z", "commit": {"oid": "a50d955f3442bc6247104fc437cd7e1ef1537285"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzo0MDoxM1rOGr4qtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzo0MzozNFrOGr4ueQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MDM4OA==", "bodyText": "more like FabricScreen?", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448670388", "createdAt": "2020-07-01T23:40:13Z", "author": {"login": "liach"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenContext.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.render.item.ItemRenderer;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Provides access to additional context a screen can hold.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface ScreenContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a50d955f3442bc6247104fc437cd7e1ef1537285"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTA1OQ==", "bodyText": "need to change this to do actual captures.\nalso can you guarantee all screen implementations that override render calls super.render? otherwise this hook will just be skipped.\nSame below.", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448671059", "createdAt": "2020-07-01T23:42:37Z", "author": {"login": "liach"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.screen;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.render.GameRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+\n+@Mixin(GameRenderer.class)\n+public abstract class GameRendererMixin {\n+\t@Shadow\n+\t@Final\n+\tprivate MinecraftClient client;\n+\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.PRINT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a50d955f3442bc6247104fc437cd7e1ef1537285"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTM1Mw==", "bodyText": "should fail hard. see no point of generating an exception stub.", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448671353", "createdAt": "2020-07-01T23:43:34Z", "author": {"login": "liach"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.screen;\n+\n+import java.util.function.Function;\n+\n+import com.mojang.datafixers.util.Function4;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Coerce;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.resource.DataPackSettings;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.registry.RegistryTracker;\n+import net.minecraft.world.SaveProperties;\n+import net.minecraft.world.level.storage.LevelStorage;\n+\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+\n+@Mixin(MinecraftClient.class)\n+public abstract class MinecraftClientMixin {\n+\t@Shadow\n+\tpublic Screen currentScreen;\n+\n+\t// These two should be caught by \"Screen#wrapScreenError\" if anything fails\n+\n+\t@Inject(method = \"method_1572\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;tick()V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a50d955f3442bc6247104fc437cd7e1ef1537285"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a50d955f3442bc6247104fc437cd7e1ef1537285", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/a50d955f3442bc6247104fc437cd7e1ef1537285", "committedDate": "2020-07-01T23:29:26Z", "message": "Split render and tick events to before and after"}, "afterCommit": {"oid": "4958018e67c6013226e31669684bb8a1eec4ba03", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/4958018e67c6013226e31669684bb8a1eec4ba03", "committedDate": "2020-07-26T02:48:59Z", "message": "Split render and tick events to before and after"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MzU2OTc5", "url": "https://github.com/FabricMC/fabric/pull/645#pullrequestreview-455356979", "createdAt": "2020-07-26T11:47:29Z", "commit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo0NzoyOVrOG3LvUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo1Mzo0OVrOG3Lx4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzIwMQ==", "bodyText": "I wonder if there is a better name for this?", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517201", "createdAt": "2020-07-26T11:47:29Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.render.item.ItemRenderer;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Provides access to additional context a screen can hold.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface FabricScreen {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzMyNQ==", "bodyText": "Yes, this is good!", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517325", "createdAt": "2020-07-26T11:48:41Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.screen;\n+\n+import java.util.AbstractList;\n+import java.util.List;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+\n+public final class ButtonList<T extends AbstractButtonWidget> extends AbstractList<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzcyNA==", "bodyText": "Whats the use case for the tick events?", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517724", "createdAt": "2020-07-26T11:52:20Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzc2Mg==", "bodyText": "should say is the before tick", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517762", "createdAt": "2020-07-26T11:52:41Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzc4Mg==", "bodyText": "same here say its the after tick", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517782", "createdAt": "2020-07-26T11:52:53Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzc5Nw==", "bodyText": "again here, say its the after renderer", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517797", "createdAt": "2020-07-26T11:53:07Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzgwOA==", "bodyText": "and before", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517808", "createdAt": "2020-07-26T11:53:11Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzg1OQ==", "bodyText": "Would it be worth exanding the docs to say what can do be done here. For example adding or changing buttons.", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517859", "createdAt": "2020-07-26T11:53:49Z", "author": {"login": "modmuss50"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MzgxOTE1", "url": "https://github.com/FabricMC/fabric/pull/645#pullrequestreview-455381915", "createdAt": "2020-07-26T17:29:29Z", "commit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzoyOTozMFrOG3N6yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzozNTowNlrOG3N9LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1MjkwNA==", "bodyText": "just extend AbstractPressableButtonWidget instead of ButtonWidget so you don't pass a null", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460552904", "createdAt": "2020-07-26T17:29:30Z", "author": {"login": "shedaniel"}, "path": "fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.screen;\n+\n+import java.util.Random;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+import net.minecraft.client.sound.PositionedSoundInstance;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.sound.SoundEvents;\n+import net.minecraft.text.Text;\n+import net.minecraft.util.registry.Registry;\n+\n+class SoundButton extends ButtonWidget {\n+\tprivate static final Random RANDOM = new Random();\n+\n+\tSoundButton(int x, int y, int width, int height) {\n+\t\tsuper(x, y, width, height, Text.method_30163(\"Sound Button\"), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1MzA3MQ==", "bodyText": "same here with the null", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460553071", "createdAt": "2020-07-26T17:30:49Z", "author": {"login": "shedaniel"}, "path": "fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.screen;\n+\n+import com.mojang.blaze3d.systems.RenderSystem;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.DrawableHelper;\n+import net.minecraft.client.gui.hud.InGameHud;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.text.Text;\n+\n+class StopSoundButton extends ButtonWidget {\n+\tprivate final Screen screen;\n+\n+\tStopSoundButton(Screen screen, int x, int y, int width, int height) {\n+\t\tsuper(x, y, width, height, Text.method_30163(\"\"), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1MzUxNw==", "bodyText": "is it possible to just this.children.remove(removedButton);", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460553517", "createdAt": "2020-07-26T17:35:06Z", "author": {"login": "shedaniel"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.screen;\n+\n+import java.util.AbstractList;\n+import java.util.List;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+\n+public final class ButtonList<T extends AbstractButtonWidget> extends AbstractList<T> {\n+\tprivate final List<T> buttons;\n+\tprivate final List<Element> children;\n+\n+\tpublic ButtonList(List<T> buttons, List<Element> children) {\n+\t\tthis.buttons = buttons;\n+\t\tthis.children = children;\n+\t}\n+\n+\t@Override\n+\tpublic T get(int index) {\n+\t\treturn this.buttons.get(index);\n+\t}\n+\n+\t@Override\n+\tpublic T set(int index, T element) {\n+\t\tthis.remove(element); // verify / ensure no duplicates\n+\n+\t\tfinal T existingButton = this.buttons.get(index);\n+\t\tint elementIndex = this.children.indexOf(existingButton);\n+\n+\t\tif (elementIndex > -1) {\n+\t\t\tthis.children.set(elementIndex, element);\n+\t\t}\n+\n+\t\treturn this.buttons.set(index, element);\n+\t}\n+\n+\t@Override\n+\tpublic void add(int index, T element) {\n+\t\tthis.rangeCheckForAdd(index); // verify index bounds\n+\t\tthis.remove(element); // ensure no duplicates\n+\n+\t\tthis.buttons.add(index, element);\n+\t\tthis.children.add(Math.min(this.children.size(), index), element);\n+\t}\n+\n+\t@Override\n+\tpublic T remove(int index) {\n+\t\tthis.rangeCheck(index); // verify index bounds\n+\n+\t\tfinal T removedButton = this.buttons.remove(index);\n+\t\tindex = this.children.indexOf(removedButton);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MzgyNTMx", "url": "https://github.com/FabricMC/fabric/pull/645#pullrequestreview-455382531", "createdAt": "2020-07-26T17:38:54Z", "commit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzozODo1NFrOG3N-jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzozODo1NFrOG3N-jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1Mzg2OQ==", "bodyText": "functional interface? seeing that you have another pr that does that", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460553869", "createdAt": "2020-07-26T17:38:54Z", "author": {"login": "shedaniel"}, "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic interface Init {\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t}\n+\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t}\n+\n+\tpublic interface AfterTick {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793731b822f69913cda29a579abccfe4aeec903"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MjczMzQw", "url": "https://github.com/FabricMC/fabric/pull/645#pullrequestreview-456273340", "createdAt": "2020-07-28T03:14:42Z", "commit": {"oid": "31caadc2fadab8510efcb9d041bcaa38c36c2a13"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7df35dc7a79d6b65e810e4be6bf5fb9a6714568e", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/7df35dc7a79d6b65e810e4be6bf5fb9a6714568e", "committedDate": "2020-07-28T23:38:18Z", "message": "Before init is nessecary to listen to addition/removal of child elements"}, "afterCommit": {"oid": "185123611a9d881425c647543ee0cf10b3495a15", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/185123611a9d881425c647543ee0cf10b3495a15", "committedDate": "2020-08-07T04:53:34Z", "message": "Before init is nessecary to listen to addition/removal of child elements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "185123611a9d881425c647543ee0cf10b3495a15", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/185123611a9d881425c647543ee0cf10b3495a15", "committedDate": "2020-08-07T04:53:34Z", "message": "Before init is nessecary to listen to addition/removal of child elements"}, "afterCommit": {"oid": "126413bc8db08dbfbe8c0fd6f8fd6eff8e606731", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/126413bc8db08dbfbe8c0fd6f8fd6eff8e606731", "committedDate": "2020-09-01T04:55:29Z", "message": "Before init is nessecary to listen to addition/removal of child elements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMTA5Nzgz", "url": "https://github.com/FabricMC/fabric/pull/645#pullrequestreview-500109783", "createdAt": "2020-10-01T08:17:17Z", "commit": {"oid": "ef47e47e3bd312c4526efd632e639c7b52dabba6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef47e47e3bd312c4526efd632e639c7b52dabba6", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ef47e47e3bd312c4526efd632e639c7b52dabba6", "committedDate": "2020-09-01T17:08:41Z", "message": "Mappings updates on testmod"}, "afterCommit": {"oid": "3ccacc14c7856191ec2d2381d39bef189aadee67", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/3ccacc14c7856191ec2d2381d39bef189aadee67", "committedDate": "2020-10-02T00:54:05Z", "message": "Mappings updates on testmod"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "962d0d9f2e79237c4efbfcde6c27f127defb37f0", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/962d0d9f2e79237c4efbfcde6c27f127defb37f0", "committedDate": "2020-10-02T00:57:30Z", "message": "javadoc formatting again"}, "afterCommit": {"oid": "56a0dbd1e0ab32c708a70eb8dc3343b5c9f80e68", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/56a0dbd1e0ab32c708a70eb8dc3343b5c9f80e68", "committedDate": "2020-10-28T02:13:57Z", "message": "javadoc formatting again"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56a0dbd1e0ab32c708a70eb8dc3343b5c9f80e68", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/56a0dbd1e0ab32c708a70eb8dc3343b5c9f80e68", "committedDate": "2020-10-28T02:13:57Z", "message": "javadoc formatting again"}, "afterCommit": {"oid": "fad33ba4ffb7b494e2b65e219c15375777207055", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/fad33ba4ffb7b494e2b65e219c15375777207055", "committedDate": "2020-11-20T04:06:22Z", "message": "javadoc formatting again"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84870570ea8c2deb24e01eeb09f5dd429fe3a229", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/84870570ea8c2deb24e01eeb09f5dd429fe3a229", "committedDate": "2020-11-22T09:24:46Z", "message": "Module dependencies"}, "afterCommit": {"oid": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/27d99857051c1e10db88aaee7038d0a2ffe978ba", "committedDate": "2020-11-22T09:25:00Z", "message": "Module dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTUyNDE1", "url": "https://github.com/FabricMC/fabric/pull/645#pullrequestreview-540552415", "createdAt": "2020-11-30T01:36:13Z", "commit": {"oid": "ae5dbe96285e3efd5179284ee8068027bde0fa8b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d881c61353d65b65b2eb36c884dc918d46d5f571", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/d881c61353d65b65b2eb36c884dc918d46d5f571", "committedDate": "2020-12-12T21:52:09Z", "message": "Implement screen api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "585ede1f279ff0e5803088172422f59f0123e4f4", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/585ede1f279ff0e5803088172422f59f0123e4f4", "committedDate": "2020-12-12T21:52:09Z", "message": "Actually update to 20w27a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ade900474066bcb629f695e9f8b88daf30fdd179", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ade900474066bcb629f695e9f8b88daf30fdd179", "committedDate": "2020-12-12T21:52:09Z", "message": "Split render and tick events to before and after"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4da197d3e46b3a28a3476ff27275edf10e6bb52", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/a4da197d3e46b3a28a3476ff27275edf10e6bb52", "committedDate": "2020-12-12T21:52:09Z", "message": "Rename and update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff4765c1596c979b1c57c01f636ddba2614166ab", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ff4765c1596c979b1c57c01f636ddba2614166ab", "committedDate": "2020-12-12T21:52:09Z", "message": "A bit of javadoc and profiler name fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd890185674ec10edfc12dd733b6d15240f38c3b", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/cd890185674ec10edfc12dd733b6d15240f38c3b", "committedDate": "2020-12-12T21:52:09Z", "message": "Add functional interface annotations, move render and ticking events to actual FabricScreen instance."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26d6e095dd4bbdf45e40837d8904e4a70d5b3f83", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/26d6e095dd4bbdf45e40837d8904e4a70d5b3f83", "committedDate": "2020-12-12T21:52:09Z", "message": "Add after screen resize event"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "251079d642840b1b3f436982554adf5596084cc0", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/251079d642840b1b3f436982554adf5596084cc0", "committedDate": "2020-12-12T21:52:09Z", "message": "Implement key and mouse click/press and release events."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fb9dcd404309f86f7c0893e9bceb52d404bd413", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/1fb9dcd404309f86f7c0893e9bceb52d404bd413", "committedDate": "2020-12-12T21:52:09Z", "message": "Move keyboard and mouse events to their own pojos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed17f6bcc330e4695f01ae39f20236d16c7d7de8", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ed17f6bcc330e4695f01ae39f20236d16c7d7de8", "committedDate": "2020-12-12T21:52:09Z", "message": "Init and resize are the same thing. Maybe Screen#init needs a rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4beaf04abd414d702bbe1454ac1a2d2740885694", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/4beaf04abd414d702bbe1454ac1a2d2740885694", "committedDate": "2020-12-12T21:52:09Z", "message": "Add mouse scroll events"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c78e1f1559251954182e88b9412ee00fe79322d", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/5c78e1f1559251954182e88b9412ee00fe79322d", "committedDate": "2020-12-12T21:52:09Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22d1bf054d654b7954b58f505c2cabe72fc7b13f", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/22d1bf054d654b7954b58f505c2cabe72fc7b13f", "committedDate": "2020-12-12T21:52:09Z", "message": "Refresh event instances after init"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65d008c89b3e930674d1d126a226fb5d1b1a4e41", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/65d008c89b3e930674d1d126a226fb5d1b1a4e41", "committedDate": "2020-12-12T21:52:09Z", "message": "Before init is nessecary to listen to addition/removal of child elements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c40779f62040ca0bb777ce072073fa1e87799146", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/c40779f62040ca0bb777ce072073fa1e87799146", "committedDate": "2020-12-12T21:52:09Z", "message": "Polish up the javadoc and do a rename to the public api interface."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "110669020a3f2eb2ad980bb5004dbdf0b8562483", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/110669020a3f2eb2ad980bb5004dbdf0b8562483", "committedDate": "2020-12-12T21:52:09Z", "message": "Mappings updates on testmod"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd7fa98ad5836abd8ed8dba64eb14824c0c450f7", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/bd7fa98ad5836abd8ed8dba64eb14824c0c450f7", "committedDate": "2020-12-12T21:52:09Z", "message": "javadoc formatting again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/787f48725d2665d22b493ea987ac282bbd0cd4bd", "committedDate": "2020-12-12T21:52:09Z", "message": "Rework screen api design to be more ergonomic."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6a01147b87772dc2bcba739d26480b413992c1a", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/e6a01147b87772dc2bcba739d26480b413992c1a", "committedDate": "2020-12-12T21:52:09Z", "message": "Add remove event, some javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d01613d6d1daae0a579545765d43ce7384e3beb5", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/d01613d6d1daae0a579545765d43ce7384e3beb5", "committedDate": "2020-12-12T21:52:09Z", "message": "Add allow phase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac28de50761b962f24e8749fbc1c727f03d7e044", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ac28de50761b962f24e8749fbc1c727f03d7e044", "committedDate": "2020-12-12T21:52:09Z", "message": "Module dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "610bd6ddcd28f23a8920f008e9f6256c18cda9c0", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/610bd6ddcd28f23a8920f008e9f6256c18cda9c0", "committedDate": "2020-12-12T21:52:09Z", "message": "Fix null ticking when no screen is open"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47de7ec9b0ea945d2ddafed1443f2d8634fc1845", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/47de7ec9b0ea945d2ddafed1443f2d8634fc1845", "committedDate": "2020-12-12T22:24:58Z", "message": "Refer to GLFW constants in mouse click/release events"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae5dbe96285e3efd5179284ee8068027bde0fa8b", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ae5dbe96285e3efd5179284ee8068027bde0fa8b", "committedDate": "2020-11-25T21:16:31Z", "message": "Fix null ticking when no screen is open"}, "afterCommit": {"oid": "47de7ec9b0ea945d2ddafed1443f2d8634fc1845", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/47de7ec9b0ea945d2ddafed1443f2d8634fc1845", "committedDate": "2020-12-12T22:24:58Z", "message": "Refer to GLFW constants in mouse click/release events"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9d2b942a3ba75ac69b4dc4cee855c8dc6a78499", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/f9d2b942a3ba75ac69b4dc4cee855c8dc6a78499", "committedDate": "2020-12-13T23:11:07Z", "message": "Keyboard event GLFW constant javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9688302b8638e4c1f523f5917a9d1522ca681135", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/9688302b8638e4c1f523f5917a9d1522ca681135", "committedDate": "2020-12-24T22:22:36Z", "message": "Remove redundant qualifier"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4ODIwOTI2", "url": "https://github.com/FabricMC/fabric/pull/645#pullrequestreview-558820926", "createdAt": "2020-12-25T14:32:21Z", "commit": {"oid": "9688302b8638e4c1f523f5917a9d1522ca681135"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80a86c77d696b8f0824d9237d75a230ba6ed7d38", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/80a86c77d696b8f0824d9237d75a230ba6ed7d38", "committedDate": "2021-01-18T04:39:35Z", "message": "Some docs, degetterifying"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3171d32e55485fe6ef9a7bbddb5a0866f6809204", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/3171d32e55485fe6ef9a7bbddb5a0866f6809204", "committedDate": "2021-01-18T05:25:24Z", "message": "Because global go brr add screen params back around"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwODIyNzYz", "url": "https://github.com/FabricMC/fabric/pull/645#pullrequestreview-570822763", "createdAt": "2021-01-18T23:34:54Z", "commit": {"oid": "3171d32e55485fe6ef9a7bbddb5a0866f6809204"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "165d3e3e2e36414241cae113990520cf92d4bdb8", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/165d3e3e2e36414241cae113990520cf92d4bdb8", "committedDate": "2021-01-19T02:41:54Z", "message": "Add module lifecycle to FMJ"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwOTM3NDAw", "url": "https://github.com/FabricMC/fabric/pull/645#pullrequestreview-570937400", "createdAt": "2021-01-19T06:29:26Z", "commit": {"oid": "165d3e3e2e36414241cae113990520cf92d4bdb8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3458, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}