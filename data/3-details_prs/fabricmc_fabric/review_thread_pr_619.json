{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NDkwMzIx", "number": 619, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzowNzoxMVrOD7hI7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozODo1NVrOEG3liA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzM1NTM1OnYy", "diffSide": "RIGHT", "path": "fabric-generic-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/generic/v1/item/ItemTooltipCallback.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzowNzoxMVrOGT43sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzoxODo1NFrOGUQ-dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNzg4OA==", "bodyText": "Should we still have this in its own separate EVENT class, since it looks like we're going in the direction of having classes that define lots of different events?", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423507888", "createdAt": "2020-05-12T07:07:11Z", "author": {"login": "LemmaEOF"}, "path": "fabric-generic-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/generic/v1/item/ItemTooltipCallback.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.event.generic.v1.item;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.item.TooltipContext;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.text.Text;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public interface ItemTooltipCallback {\n+\t/**\n+\t * Fired after the game has appended all base tooltip lines to the list.\n+\t */\n+\tEvent<ItemTooltipCallback> EVENT = EventFactory.createArrayBacked(ItemTooltipCallback.class, callbacks -> (stack, context, lines) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxMTE5MQ==", "bodyText": "Then again, a majority of the events in the API still follow that EVENT rule. Due to the fact there are references to client types, I couldn't easily do a EntityUnloadCallback.CLIENT/SERVER without classloader issues. The other route was double the amount of interfaces in the api", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423511191", "createdAt": "2020-05-12T07:13:37Z", "author": {"login": "i509VCB"}, "path": "fabric-generic-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/generic/v1/item/ItemTooltipCallback.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.event.generic.v1.item;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.item.TooltipContext;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.text.Text;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public interface ItemTooltipCallback {\n+\t/**\n+\t * Fired after the game has appended all base tooltip lines to the list.\n+\t */\n+\tEvent<ItemTooltipCallback> EVENT = EventFactory.createArrayBacked(ItemTooltipCallback.class, callbacks -> (stack, context, lines) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNzg4OA=="}, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2MTM0Ng==", "bodyText": "Imo for that you can do EntityUnloadCallback and ClientEvents.ENTITY_UNLOAD where\nEntityUnloadCallback ENTITY_UNLOAD = EventFactory.createArrayBacked(xxx); in ClientEvents class", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423561346", "createdAt": "2020-05-12T08:38:16Z", "author": {"login": "liach"}, "path": "fabric-generic-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/generic/v1/item/ItemTooltipCallback.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.event.generic.v1.item;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.item.TooltipContext;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.text.Text;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public interface ItemTooltipCallback {\n+\t/**\n+\t * Fired after the game has appended all base tooltip lines to the list.\n+\t */\n+\tEvent<ItemTooltipCallback> EVENT = EventFactory.createArrayBacked(ItemTooltipCallback.class, callbacks -> (stack, context, lines) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNzg4OA=="}, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2MTc2Mg==", "bodyText": "Also how is this a \"generic event\"?", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423561762", "createdAt": "2020-05-12T08:38:53Z", "author": {"login": "liach"}, "path": "fabric-generic-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/generic/v1/item/ItemTooltipCallback.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.event.generic.v1.item;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.item.TooltipContext;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.text.Text;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public interface ItemTooltipCallback {\n+\t/**\n+\t * Fired after the game has appended all base tooltip lines to the list.\n+\t */\n+\tEvent<ItemTooltipCallback> EVENT = EventFactory.createArrayBacked(ItemTooltipCallback.class, callbacks -> (stack, context, lines) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNzg4OA=="}, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwMjgzOA==", "bodyText": "Yes, it is not really a generic event. But the item tooltip stuff is surely not lifecycle by any metric.\nI'd say it makes more sense in an item module but this is temporary", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423902838", "createdAt": "2020-05-12T17:18:54Z", "author": {"login": "i509VCB"}, "path": "fabric-generic-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/generic/v1/item/ItemTooltipCallback.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.event.generic.v1.item;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.item.TooltipContext;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.text.Text;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public interface ItemTooltipCallback {\n+\t/**\n+\t * Fired after the game has appended all base tooltip lines to the list.\n+\t */\n+\tEvent<ItemTooltipCallback> EVENT = EventFactory.createArrayBacked(ItemTooltipCallback.class, callbacks -> (stack, context, lines) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNzg4OA=="}, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzY5MzE3OnYy", "diffSide": "RIGHT", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientLifecycleEvents.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODo0MDowN1rOGT8NiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMToyNzo1NVrOGUZmYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2MjYzMg==", "bodyText": "any point of getting the profiler before the profiler enabled check?", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423562632", "createdAt": "2020-05-12T08:40:07Z", "author": {"login": "liach"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.event.lifecycle.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.GameTickCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.world.WorldTickCallback;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientLifecycleEvents {\n+\tprivate ClientLifecycleEvents() {\n+\t}\n+\n+\tpublic static final Event<GameTickCallback<MinecraftClient>> CLIENT_TICK = EventFactory.createArrayBacked(GameTickCallback.class, callbacks -> client -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerTick\");\n+\n+\t\t\tfor (GameTickCallback<MinecraftClient> event : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(event));\n+\t\t\t\tevent.onTick(client);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (GameTickCallback<MinecraftClient> event : callbacks) {\n+\t\t\t\tevent.onTick(client);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<WorldTickCallback<ClientWorld>> WORLD_TICK = EventFactory.createArrayBacked(WorldTickCallback.class, callbacks -> world -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientWorldTick\");\n+\n+\t\t\tfor (WorldTickCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (WorldTickCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<ChunkLoadCallback<ClientWorld>> CHUNK_LOAD = EventFactory.createArrayBacked(ChunkLoadCallback.class, callbacks -> (clientWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tProfiler profiler = clientWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientChunkLoad\");\n+\n+\t\t\tfor (ChunkLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkLoad(clientWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkLoad(clientWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<ChunkUnloadCallback<ClientWorld>> CHUNK_UNLOAD = EventFactory.createArrayBacked(ChunkUnloadCallback.class, callbacks -> (clientWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tProfiler profiler = clientWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientChunkUnload\");\n+\n+\t\t\tfor (ChunkUnloadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkUnload(clientWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkUnloadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkUnload(clientWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<BlockEntityLoadCallback<ClientWorld>> BLOCK_ENTITY_LOAD = EventFactory.createArrayBacked(BlockEntityLoadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tfinal Profiler profiler = world.getProfiler();\n+\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tprofiler.push(\"fabricClientBlockEntityLoad\");\n+\n+\t\t\tfor (BlockEntityLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BlockEntityLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<BlockEntityUnloadCallback<ClientWorld>> BLOCK_ENTITY_UNLOAD = EventFactory.createArrayBacked(BlockEntityUnloadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tfinal Profiler profiler = world.getProfiler();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwMzYwNA==", "bodyText": "Really nothing. Just wanted to throw the profiler into the variable stack and forget about it. I'll probably move it into the if block", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423903604", "createdAt": "2020-05-12T17:20:11Z", "author": {"login": "i509VCB"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.event.lifecycle.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.GameTickCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.world.WorldTickCallback;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientLifecycleEvents {\n+\tprivate ClientLifecycleEvents() {\n+\t}\n+\n+\tpublic static final Event<GameTickCallback<MinecraftClient>> CLIENT_TICK = EventFactory.createArrayBacked(GameTickCallback.class, callbacks -> client -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerTick\");\n+\n+\t\t\tfor (GameTickCallback<MinecraftClient> event : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(event));\n+\t\t\t\tevent.onTick(client);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (GameTickCallback<MinecraftClient> event : callbacks) {\n+\t\t\t\tevent.onTick(client);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<WorldTickCallback<ClientWorld>> WORLD_TICK = EventFactory.createArrayBacked(WorldTickCallback.class, callbacks -> world -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientWorldTick\");\n+\n+\t\t\tfor (WorldTickCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (WorldTickCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<ChunkLoadCallback<ClientWorld>> CHUNK_LOAD = EventFactory.createArrayBacked(ChunkLoadCallback.class, callbacks -> (clientWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tProfiler profiler = clientWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientChunkLoad\");\n+\n+\t\t\tfor (ChunkLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkLoad(clientWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkLoad(clientWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<ChunkUnloadCallback<ClientWorld>> CHUNK_UNLOAD = EventFactory.createArrayBacked(ChunkUnloadCallback.class, callbacks -> (clientWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tProfiler profiler = clientWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientChunkUnload\");\n+\n+\t\t\tfor (ChunkUnloadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkUnload(clientWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkUnloadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkUnload(clientWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<BlockEntityLoadCallback<ClientWorld>> BLOCK_ENTITY_LOAD = EventFactory.createArrayBacked(BlockEntityLoadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tfinal Profiler profiler = world.getProfiler();\n+\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tprofiler.push(\"fabricClientBlockEntityLoad\");\n+\n+\t\t\tfor (BlockEntityLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BlockEntityLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<BlockEntityUnloadCallback<ClientWorld>> BLOCK_ENTITY_UNLOAD = EventFactory.createArrayBacked(BlockEntityUnloadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tfinal Profiler profiler = world.getProfiler();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2MjYzMg=="}, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0NDEzMA==", "bodyText": "All the profiler calls should be within the isProfilingEnabled block now", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r424044130", "createdAt": "2020-05-12T21:27:55Z", "author": {"login": "i509VCB"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.event.lifecycle.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.GameTickCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.world.WorldTickCallback;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientLifecycleEvents {\n+\tprivate ClientLifecycleEvents() {\n+\t}\n+\n+\tpublic static final Event<GameTickCallback<MinecraftClient>> CLIENT_TICK = EventFactory.createArrayBacked(GameTickCallback.class, callbacks -> client -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerTick\");\n+\n+\t\t\tfor (GameTickCallback<MinecraftClient> event : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(event));\n+\t\t\t\tevent.onTick(client);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (GameTickCallback<MinecraftClient> event : callbacks) {\n+\t\t\t\tevent.onTick(client);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<WorldTickCallback<ClientWorld>> WORLD_TICK = EventFactory.createArrayBacked(WorldTickCallback.class, callbacks -> world -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientWorldTick\");\n+\n+\t\t\tfor (WorldTickCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (WorldTickCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<ChunkLoadCallback<ClientWorld>> CHUNK_LOAD = EventFactory.createArrayBacked(ChunkLoadCallback.class, callbacks -> (clientWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tProfiler profiler = clientWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientChunkLoad\");\n+\n+\t\t\tfor (ChunkLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkLoad(clientWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkLoad(clientWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<ChunkUnloadCallback<ClientWorld>> CHUNK_UNLOAD = EventFactory.createArrayBacked(ChunkUnloadCallback.class, callbacks -> (clientWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tProfiler profiler = clientWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientChunkUnload\");\n+\n+\t\t\tfor (ChunkUnloadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkUnload(clientWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkUnloadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkUnload(clientWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<BlockEntityLoadCallback<ClientWorld>> BLOCK_ENTITY_LOAD = EventFactory.createArrayBacked(BlockEntityLoadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tfinal Profiler profiler = world.getProfiler();\n+\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tprofiler.push(\"fabricClientBlockEntityLoad\");\n+\n+\t\t\tfor (BlockEntityLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BlockEntityLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<BlockEntityUnloadCallback<ClientWorld>> BLOCK_ENTITY_UNLOAD = EventFactory.createArrayBacked(BlockEntityUnloadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tfinal Profiler profiler = world.getProfiler();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2MjYzMg=="}, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzY5NTQwOnYy", "diffSide": "RIGHT", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODo0MDo0MVrOGT8PDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODo0MDo0MVrOGT8PDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2MzAyMQ==", "bodyText": "yes, you do it like this, only get profiler after the isProfilingEnabled check", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423563021", "createdAt": "2020-05-12T08:40:41Z", "author": {"login": "liach"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.world.WorldTickCallback;\n+\n+public final class ServerLifecycleEvents {\n+\tprivate ServerLifecycleEvents() {\n+\t}\n+\n+\tpublic static final Event<GameTickCallback<MinecraftServer>> SERVER_TICK = EventFactory.createArrayBacked(GameTickCallback.class, callbacks -> server -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = server.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerTick\");\n+\n+\t\t\tfor (GameTickCallback<MinecraftServer> event : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(event));\n+\t\t\t\tevent.onTick(server);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (GameTickCallback<MinecraftServer> event : callbacks) {\n+\t\t\t\tevent.onTick(server);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<WorldTickCallback<ServerWorld>> WORLD_TICK = EventFactory.createArrayBacked(WorldTickCallback.class, callbacks -> world -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzcyNDMyOnYy", "diffSide": "RIGHT", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleCallback.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODo0Nzo1MFrOGT8h2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODoxMjowMlrOGVoh3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2NzgzNA==", "bodyText": "Maybe lifecycle?", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423567834", "createdAt": "2020-05-12T08:47:50Z", "author": {"login": "liach"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleCallback.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+import net.minecraft.server.MinecraftServer;\n+\n+/**\n+ * A callback which is invoked when the server advances in it's lifecycle.\n+ */\n+public interface ServerLifecycleCallback {\n+\tvoid onChangeLifecycle(MinecraftServer server);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwNDc3OA==", "bodyText": "Well this means the server's lifecycle stage has changed. onLifecycle is a bit vague it would somewhat correspond to a lifecycle method", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423904778", "createdAt": "2020-05-12T17:22:11Z", "author": {"login": "i509VCB"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleCallback.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+import net.minecraft.server.MinecraftServer;\n+\n+/**\n+ * A callback which is invoked when the server advances in it's lifecycle.\n+ */\n+public interface ServerLifecycleCallback {\n+\tvoid onChangeLifecycle(MinecraftServer server);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2NzgzNA=="}, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5MTM0OA==", "bodyText": "lifecycle is a verb. It has cycle meaning it is cycling to a next stage.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423991348", "createdAt": "2020-05-12T19:48:00Z", "author": {"login": "liach"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleCallback.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+import net.minecraft.server.MinecraftServer;\n+\n+/**\n+ * A callback which is invoked when the server advances in it's lifecycle.\n+ */\n+public interface ServerLifecycleCallback {\n+\tvoid onChangeLifecycle(MinecraftServer server);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2NzgzNA=="}, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2MDg4NA==", "bodyText": "Sorry what ? https://www.merriam-webster.com/dictionary/life%20cycle", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r424560884", "createdAt": "2020-05-13T16:11:43Z", "author": {"login": "Pyrofab"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleCallback.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+import net.minecraft.server.MinecraftServer;\n+\n+/**\n+ * A callback which is invoked when the server advances in it's lifecycle.\n+ */\n+public interface ServerLifecycleCallback {\n+\tvoid onChangeLifecycle(MinecraftServer server);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2NzgzNA=="}, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNzMwOA==", "bodyText": "Gradle has a lifecycle that is like a info for logging. This current name is acceptable.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r425337308", "createdAt": "2020-05-14T18:12:02Z", "author": {"login": "liach"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleCallback.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+import net.minecraft.server.MinecraftServer;\n+\n+/**\n+ * A callback which is invoked when the server advances in it's lifecycle.\n+ */\n+public interface ServerLifecycleCallback {\n+\tvoid onChangeLifecycle(MinecraftServer server);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2NzgzNA=="}, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTgxODk3OnYy", "diffSide": "RIGHT", "path": "fabric-events-lifecycle-v0/src/main/java/net/fabricmc/fabric/impl/event/lifecycle/client/LegacyClientEventInvokers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzoyODoyM1rOGURU_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODo1NTozNFrOGUUj5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwODYwNw==", "bodyText": "The invokers of all of the above legacy events are being captured here, which is invalid. That is, for each event here, the value of EVENT.invoker() is only evaluated in this method, where the callback is being registered for the replacement event, and not each time the new event is invoked. The Event class allows the value of invoker() to change when new listeners are registered.\nFor the array-based events which all of fabric API uses, the invoker is updated each time a new listener is registered, which means this will fail to notify any listeners that are registered after this initializer is called.\nThis will have to be changed to evaluate the value of invoker() each time the event is called, probably with an explicit lambda instead of a method reference.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423908607", "createdAt": "2020-05-12T17:28:23Z", "author": {"login": "JamiesWhiteShirt"}, "path": "fabric-events-lifecycle-v0/src/main/java/net/fabricmc/fabric/impl/event/lifecycle/client/LegacyClientEventInvokers.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.event.lifecycle.client;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.fabric.api.event.client.ClientTickCallback;\n+import net.fabricmc.fabric.api.event.client.ItemTooltipCallback;\n+import net.fabricmc.fabric.api.event.world.WorldTickCallback;\n+import net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientLifecycleEvents;\n+\n+public class LegacyClientEventInvokers implements ClientModInitializer {\n+\t@Override\n+\tpublic void onInitializeClient() {\n+\t\t// Allows deprecated events to still be invoked by the newer implementations\n+\t\tClientLifecycleEvents.CLIENT_TICK.register(ClientTickCallback.EVENT.invoker()::tick);\n+\t\tClientLifecycleEvents.WORLD_TICK.register(WorldTickCallback.EVENT.invoker()::tick);\n+\t\t// This is part of generic events now.\n+\t\tnet.fabricmc.fabric.api.client.event.generic.v1.item.ItemTooltipCallback.EVENT.register(ItemTooltipCallback.EVENT.invoker()::getTooltip);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2MTU3NQ==", "bodyText": "Changed it to a lambda.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423961575", "createdAt": "2020-05-12T18:55:34Z", "author": {"login": "i509VCB"}, "path": "fabric-events-lifecycle-v0/src/main/java/net/fabricmc/fabric/impl/event/lifecycle/client/LegacyClientEventInvokers.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.event.lifecycle.client;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.fabric.api.event.client.ClientTickCallback;\n+import net.fabricmc.fabric.api.event.client.ItemTooltipCallback;\n+import net.fabricmc.fabric.api.event.world.WorldTickCallback;\n+import net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientLifecycleEvents;\n+\n+public class LegacyClientEventInvokers implements ClientModInitializer {\n+\t@Override\n+\tpublic void onInitializeClient() {\n+\t\t// Allows deprecated events to still be invoked by the newer implementations\n+\t\tClientLifecycleEvents.CLIENT_TICK.register(ClientTickCallback.EVENT.invoker()::tick);\n+\t\tClientLifecycleEvents.WORLD_TICK.register(WorldTickCallback.EVENT.invoker()::tick);\n+\t\t// This is part of generic events now.\n+\t\tnet.fabricmc.fabric.api.client.event.generic.v1.item.ItemTooltipCallback.EVENT.register(ItemTooltipCallback.EVENT.invoker()::getTooltip);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwODYwNw=="}, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTg2MDE2OnYy", "diffSide": "RIGHT", "path": "fabric-events-lifecycle-v0/src/main/java/net/fabricmc/fabric/impl/event/lifecycle/client/LegacyClientEventInvokers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozOToxOVrOGURvwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzo1ODozMlrOGUSe3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNTQ1Ng==", "bodyText": "do we already tick twice per tick for worlds? once for server and once for client?", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423915456", "createdAt": "2020-05-12T17:39:19Z", "author": {"login": "shedaniel"}, "path": "fabric-events-lifecycle-v0/src/main/java/net/fabricmc/fabric/impl/event/lifecycle/client/LegacyClientEventInvokers.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.event.lifecycle.client;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.fabric.api.event.client.ClientTickCallback;\n+import net.fabricmc.fabric.api.event.client.ItemTooltipCallback;\n+import net.fabricmc.fabric.api.event.world.WorldTickCallback;\n+import net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientLifecycleEvents;\n+\n+public class LegacyClientEventInvokers implements ClientModInitializer {\n+\t@Override\n+\tpublic void onInitializeClient() {\n+\t\t// Allows deprecated events to still be invoked by the newer implementations\n+\t\tClientLifecycleEvents.CLIENT_TICK.register(ClientTickCallback.EVENT.invoker()::tick);\n+\t\tClientLifecycleEvents.WORLD_TICK.register(WorldTickCallback.EVENT.invoker()::tick);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkyNzUxOQ==", "bodyText": "Yes.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423927519", "createdAt": "2020-05-12T17:58:32Z", "author": {"login": "i509VCB"}, "path": "fabric-events-lifecycle-v0/src/main/java/net/fabricmc/fabric/impl/event/lifecycle/client/LegacyClientEventInvokers.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.event.lifecycle.client;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.fabric.api.event.client.ClientTickCallback;\n+import net.fabricmc.fabric.api.event.client.ItemTooltipCallback;\n+import net.fabricmc.fabric.api.event.world.WorldTickCallback;\n+import net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientLifecycleEvents;\n+\n+public class LegacyClientEventInvokers implements ClientModInitializer {\n+\t@Override\n+\tpublic void onInitializeClient() {\n+\t\t// Allows deprecated events to still be invoked by the newer implementations\n+\t\tClientLifecycleEvents.CLIENT_TICK.register(ClientTickCallback.EVENT.invoker()::tick);\n+\t\tClientLifecycleEvents.WORLD_TICK.register(WorldTickCallback.EVENT.invoker()::tick);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNTQ1Ng=="}, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTg3MDU1OnYy", "diffSide": "RIGHT", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/impl/event/lifecycle/LifecycleInternalListeners.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzo0MjowNlrOGUR2Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMToxMjowNFrOGUZIqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNzEyNg==", "bodyText": "We might want to impose a stricter order for when the SERVER_STOP and ENTITY_UNLOAD/BLOCK_ENTITY_UNLOAD events are called. Let's say a mod registers a listener for both SERVER_STOP and ENTITY_UNLOAD/BLOCK_ENTITY_UNLOAD. Depending on whether the mod gets to register its SERVER_STOP event listener before or after this listener (which may be nondeterministic), it will have its SERVER_STOP event listener called either before or after all the ENTITY_UNLOAD/BLOCK_ENTITY_UNLOAD events are invoked.\nI imagine a mod might use these events to free resources, and might want to use some server-bound resource which is freed when the SERVER_STOP event is called when entities and block entities are unloaded. Having all the entities and block entities unload before the server is unloaded would make the most sense.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423917126", "createdAt": "2020-05-12T17:42:06Z", "author": {"login": "JamiesWhiteShirt"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/impl/event/lifecycle/LifecycleInternalListeners.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.event.lifecycle;\n+\n+import java.util.List;\n+\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.server.world.ServerWorld;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.ServerLifecycleEvents;\n+\n+public class LifecycleInternalListeners implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tServerLifecycleEvents.SERVER_STOP.register(server -> {\n+\t\t\t// We use the server shutdown to unload all entities and block entities so their events are fired.\n+\t\t\tfor (ServerWorld world : server.getWorlds()) {\n+\t\t\t\tfinal List<Entity> entities = world.getEntities(null, entity -> true); // Get every single entity in the world\n+\n+\t\t\t\tfor (Entity entity : entities) {\n+\t\t\t\t\tServerLifecycleEvents.ENTITY_UNLOAD.invoker().onEntityUnload(entity, world);\n+\t\t\t\t}\n+\n+\t\t\t\tfor (BlockEntity blockEntity : world.blockEntities) {\n+\t\t\t\t\tServerLifecycleEvents.BLOCK_ENTITY_UNLOAD.invoker().onUnloadBlockEntity(blockEntity, world);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNDMzNw==", "bodyText": "I could fire that internal listener a bit earlier so all entities would be ublosded before the server stops. However some event listeners may already use the fact not every entity is unloaded during server shutdown themselves, so we would be shooting them in the foot then. I could hook this into the server world being closed so it is garunteed the world no longer will exist, and some what covers custom worlds added by other mods", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r423934337", "createdAt": "2020-05-12T18:09:46Z", "author": {"login": "i509VCB"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/impl/event/lifecycle/LifecycleInternalListeners.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.event.lifecycle;\n+\n+import java.util.List;\n+\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.server.world.ServerWorld;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.ServerLifecycleEvents;\n+\n+public class LifecycleInternalListeners implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tServerLifecycleEvents.SERVER_STOP.register(server -> {\n+\t\t\t// We use the server shutdown to unload all entities and block entities so their events are fired.\n+\t\t\tfor (ServerWorld world : server.getWorlds()) {\n+\t\t\t\tfinal List<Entity> entities = world.getEntities(null, entity -> true); // Get every single entity in the world\n+\n+\t\t\t\tfor (Entity entity : entities) {\n+\t\t\t\t\tServerLifecycleEvents.ENTITY_UNLOAD.invoker().onEntityUnload(entity, world);\n+\t\t\t\t}\n+\n+\t\t\t\tfor (BlockEntity blockEntity : world.blockEntities) {\n+\t\t\t\t\tServerLifecycleEvents.BLOCK_ENTITY_UNLOAD.invoker().onUnloadBlockEntity(blockEntity, world);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNzEyNg=="}, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNjUyMA==", "bodyText": "@JamiesWhiteShirt So I decided to make this case be bound to the closing of the server worlds so events can still work off the old contract where entities were still present on the server", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r424036520", "createdAt": "2020-05-12T21:12:04Z", "author": {"login": "i509VCB"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/impl/event/lifecycle/LifecycleInternalListeners.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.event.lifecycle;\n+\n+import java.util.List;\n+\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.server.world.ServerWorld;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.ServerLifecycleEvents;\n+\n+public class LifecycleInternalListeners implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tServerLifecycleEvents.SERVER_STOP.register(server -> {\n+\t\t\t// We use the server shutdown to unload all entities and block entities so their events are fired.\n+\t\t\tfor (ServerWorld world : server.getWorlds()) {\n+\t\t\t\tfinal List<Entity> entities = world.getEntities(null, entity -> true); // Get every single entity in the world\n+\n+\t\t\t\tfor (Entity entity : entities) {\n+\t\t\t\t\tServerLifecycleEvents.ENTITY_UNLOAD.invoker().onEntityUnload(entity, world);\n+\t\t\t\t}\n+\n+\t\t\t\tfor (BlockEntity blockEntity : world.blockEntities) {\n+\t\t\t\t\tServerLifecycleEvents.BLOCK_ENTITY_UNLOAD.invoker().onUnloadBlockEntity(blockEntity, world);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNzEyNg=="}, "originalCommit": {"oid": "f4bfead302a597dc0caba69f9e8f2d62f3218e9e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzI5MzI5OnYy", "diffSide": "RIGHT", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientLifecycleEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo0ODozM1rOGfajOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMzo0Mzo0MVrOGgGNKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NDA0Mw==", "bodyText": "These all need more specific documentation, the various ticks all last quite a while. It may even be necessary to have separate events for start and end, e.g. end of world tick may be used to start async computations for the next tick.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r435594043", "createdAt": "2020-06-04T22:48:33Z", "author": {"login": "sfPlayer1"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.event.lifecycle.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.GameLifecycleCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.GameTickCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.world.WorldTickCallback;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientLifecycleEvents {\n+\tprivate ClientLifecycleEvents() {\n+\t}\n+\n+\t/**\n+\t * Called when a client ticks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3180af925a4e314bf325498692eac40951bb84f7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwOTI4OQ==", "bodyText": "Added some slight documentation about where the tick events are called. (There are START and END callbacks now)", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r436309289", "createdAt": "2020-06-06T23:43:41Z", "author": {"login": "i509VCB"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.event.lifecycle.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.GameLifecycleCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.GameTickCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.world.WorldTickCallback;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientLifecycleEvents {\n+\tprivate ClientLifecycleEvents() {\n+\t}\n+\n+\t/**\n+\t * Called when a client ticks.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NDA0Mw=="}, "originalCommit": {"oid": "3180af925a4e314bf325498692eac40951bb84f7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzMyNTUzOnYy", "diffSide": "RIGHT", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientLifecycleEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzowMzoyMlrOGfa2bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzowNDoxNVrOGf_keQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5ODk1Nw==", "bodyText": "For load/unload the timing is crucial and should be explained. Ideally all load events occur after the subject has been added to the world/chunk with the world+chunk being normally usable and obtainable via MinecraftServer. This ensures that e.g. an area search can be done without fragile postponing workarounds. Unload should happen while still reachable for similar reasons.\nAdditionally, access to the de-/serialization phases would be useful such that custom data can be embedded in the vanilla nbt tree as it gets read or written. It is useful for persistent data attachments to chunk or world, e.g. to store worldgen metadata for retrogen implementations.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r435598957", "createdAt": "2020-06-04T23:03:22Z", "author": {"login": "sfPlayer1"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.event.lifecycle.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.GameLifecycleCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.GameTickCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.world.WorldTickCallback;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientLifecycleEvents {\n+\tprivate ClientLifecycleEvents() {\n+\t}\n+\n+\t/**\n+\t * Called when a client ticks.\n+\t */\n+\tpublic static final Event<GameTickCallback<MinecraftClient>> CLIENT_TICK = EventFactory.createArrayBacked(GameTickCallback.class, callbacks -> client -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerTick\");\n+\n+\t\t\tfor (GameTickCallback<MinecraftClient> event : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(event));\n+\t\t\t\tevent.onTick(client);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (GameTickCallback<MinecraftClient> event : callbacks) {\n+\t\t\t\tevent.onTick(client);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a ClientWorld ticks.\n+\t */\n+\tpublic static final Event<WorldTickCallback<ClientWorld>> WORLD_TICK = EventFactory.createArrayBacked(WorldTickCallback.class, callbacks -> world -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientWorldTick\");\n+\n+\t\t\tfor (WorldTickCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (WorldTickCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a chunk is loaded into a ClientWorld.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3180af925a4e314bf325498692eac40951bb84f7"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMDU2OQ==", "bodyText": "I've had a discussion on discord related to a Save/LoadEntityDataCallback and the concenus was it isn't very useful unless we have a way to attach data to an entity (via something like CCA) or mixin to said entity to access the data you wish to store.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r436200569", "createdAt": "2020-06-05T23:04:15Z", "author": {"login": "i509VCB"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.event.lifecycle.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.GameLifecycleCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.GameTickCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.world.WorldTickCallback;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientLifecycleEvents {\n+\tprivate ClientLifecycleEvents() {\n+\t}\n+\n+\t/**\n+\t * Called when a client ticks.\n+\t */\n+\tpublic static final Event<GameTickCallback<MinecraftClient>> CLIENT_TICK = EventFactory.createArrayBacked(GameTickCallback.class, callbacks -> client -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerTick\");\n+\n+\t\t\tfor (GameTickCallback<MinecraftClient> event : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(event));\n+\t\t\t\tevent.onTick(client);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (GameTickCallback<MinecraftClient> event : callbacks) {\n+\t\t\t\tevent.onTick(client);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a ClientWorld ticks.\n+\t */\n+\tpublic static final Event<WorldTickCallback<ClientWorld>> WORLD_TICK = EventFactory.createArrayBacked(WorldTickCallback.class, callbacks -> world -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientWorldTick\");\n+\n+\t\t\tfor (WorldTickCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (WorldTickCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a chunk is loaded into a ClientWorld.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5ODk1Nw=="}, "originalCommit": {"oid": "3180af925a4e314bf325498692eac40951bb84f7"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzMyNzQ1OnYy", "diffSide": "RIGHT", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientLifecycleEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzowNDoyNFrOGfa3vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzowNDoyNFrOGfa3vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5OTI5NQ==", "bodyText": "These lack documentation, not sure what they are supposed to do?", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r435599295", "createdAt": "2020-06-04T23:04:24Z", "author": {"login": "sfPlayer1"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.event.lifecycle.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.GameLifecycleCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.GameTickCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.world.WorldTickCallback;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientLifecycleEvents {\n+\tprivate ClientLifecycleEvents() {\n+\t}\n+\n+\t/**\n+\t * Called when a client ticks.\n+\t */\n+\tpublic static final Event<GameTickCallback<MinecraftClient>> CLIENT_TICK = EventFactory.createArrayBacked(GameTickCallback.class, callbacks -> client -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerTick\");\n+\n+\t\t\tfor (GameTickCallback<MinecraftClient> event : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(event));\n+\t\t\t\tevent.onTick(client);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (GameTickCallback<MinecraftClient> event : callbacks) {\n+\t\t\t\tevent.onTick(client);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a ClientWorld ticks.\n+\t */\n+\tpublic static final Event<WorldTickCallback<ClientWorld>> WORLD_TICK = EventFactory.createArrayBacked(WorldTickCallback.class, callbacks -> world -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientWorldTick\");\n+\n+\t\t\tfor (WorldTickCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (WorldTickCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a chunk is loaded into a ClientWorld.\n+\t */\n+\tpublic static final Event<ChunkLoadCallback<ClientWorld>> CHUNK_LOAD = EventFactory.createArrayBacked(ChunkLoadCallback.class, callbacks -> (clientWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tProfiler profiler = clientWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientChunkLoad\");\n+\n+\t\t\tfor (ChunkLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkLoad(clientWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkLoad(clientWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a chunk is unloaded from a ClientWorld.\n+\t */\n+\tpublic static final Event<ChunkUnloadCallback<ClientWorld>> CHUNK_UNLOAD = EventFactory.createArrayBacked(ChunkUnloadCallback.class, callbacks -> (clientWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = clientWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientChunkUnload\");\n+\n+\t\t\tfor (ChunkUnloadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkUnload(clientWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkUnloadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkUnload(clientWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a BlockEntity is loaded into a ClientWorld.\n+\t */\n+\tpublic static final Event<BlockEntityLoadCallback<ClientWorld>> BLOCK_ENTITY_LOAD = EventFactory.createArrayBacked(BlockEntityLoadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientBlockEntityLoad\");\n+\n+\t\t\tfor (BlockEntityLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BlockEntityLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a BlockEntity is unloaded from a ClientWorld.\n+\t */\n+\tpublic static final Event<BlockEntityUnloadCallback<ClientWorld>> BLOCK_ENTITY_UNLOAD = EventFactory.createArrayBacked(BlockEntityUnloadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientBlockEntityUnload\");\n+\n+\t\t\tfor (BlockEntityUnloadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onUnloadBlockEntity(blockEntity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BlockEntityUnloadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onUnloadBlockEntity(blockEntity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an Entity is loaded into a ClientWorld.\n+\t */\n+\tpublic static final Event<EntityLoadCallback<ClientWorld>> ENTITY_LOAD = EventFactory.createArrayBacked(EntityLoadCallback.class, callbacks -> (entity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientEntityLoad\");\n+\n+\t\t\tfor (EntityLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onEntityLoad(entity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (EntityLoadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onEntityLoad(entity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an Entity is unloaded from a ClientWorld.\n+\t */\n+\tpublic static final Event<EntityUnloadCallback<ClientWorld>> ENTITY_UNLOAD = EventFactory.createArrayBacked(EntityUnloadCallback.class, callbacks -> (entity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricClientEntityLoad\");\n+\n+\t\t\tfor (EntityUnloadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onEntityUnload(entity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (EntityUnloadCallback<ClientWorld> callback : callbacks) {\n+\t\t\t\tcallback.onEntityUnload(entity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic static final Event<GameLifecycleCallback<MinecraftClient>> CLIENT_STARTING = EventFactory.createArrayBacked(GameLifecycleCallback.class, callbacks -> client -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3180af925a4e314bf325498692eac40951bb84f7"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzMzNTk0OnYy", "diffSide": "RIGHT", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/GameLifecycleCallback.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzowODo1M1rOGfa9AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzowMjo0N1rOGf_jTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwMDY0MA==", "bodyText": "I'd use two instances without generics for ease of use. It may be worthwhile to organize the events+callbacks differently, maybe an outer class like ClientTickEvents that holds both the event fields and callbacks as nested classes? Similar for others, ClientLifecycleEvents is getting big and the many trivial top level callback interfaces are getting a bit too spread out.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r435600640", "createdAt": "2020-06-04T23:08:53Z", "author": {"login": "sfPlayer1"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/GameLifecycleCallback.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+/**\n+ * A callback which is invoked when the game's engine advances in it's lifecycle.\n+ */\n+public interface GameLifecycleCallback<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3180af925a4e314bf325498692eac40951bb84f7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMDI3MA==", "bodyText": "I've split up the Client/ServerLifecycleEvents into more specific classes.\nBecause of the split, at most these more specific classes (So there is a ClientTickEvents.World and ServerTickEvents.World) now only hold 2-3 inner classes for the interfaces for event listeners implement.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r436200270", "createdAt": "2020-06-05T23:02:47Z", "author": {"login": "i509VCB"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/GameLifecycleCallback.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+/**\n+ * A callback which is invoked when the game's engine advances in it's lifecycle.\n+ */\n+public interface GameLifecycleCallback<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwMDY0MA=="}, "originalCommit": {"oid": "3180af925a4e314bf325498692eac40951bb84f7"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzMzODMyOnYy", "diffSide": "RIGHT", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/GameTickCallback.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoxMDowOVrOGfa-dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoxMDowOVrOGfa-dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwMTAxNQ==", "bodyText": "Same with this generic parameter, also avoids implementing e.g. chunk+world tick handlers in the same class.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r435601015", "createdAt": "2020-06-04T23:10:09Z", "author": {"login": "sfPlayer1"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/GameTickCallback.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+public interface GameTickCallback<T> {\n+\tvoid onTick(T game);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3180af925a4e314bf325498692eac40951bb84f7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzM0MDQyOnYy", "diffSide": "RIGHT", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoxMToxMVrOGfa_yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoxMToxMVrOGfa_yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwMTM1Mw==", "bodyText": "\".. and it is about to tick for the first time\" maybe? assuming that's correct?", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r435601353", "createdAt": "2020-06-04T23:11:11Z", "author": {"login": "sfPlayer1"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.world.WorldTickCallback;\n+import net.fabricmc.fabric.impl.lifecycle.ServerLifecycleInternals;\n+\n+public final class ServerLifecycleEvents {\n+\tprivate ServerLifecycleEvents() {\n+\t}\n+\n+\t/**\n+\t * Called when a server ticks.\n+\t */\n+\tpublic static final Event<GameTickCallback<MinecraftServer>> SERVER_TICK = EventFactory.createArrayBacked(GameTickCallback.class, callbacks -> server -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = server.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerTick\");\n+\n+\t\t\tfor (GameTickCallback<MinecraftServer> event : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(event));\n+\t\t\t\tevent.onTick(server);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (GameTickCallback<MinecraftServer> event : callbacks) {\n+\t\t\t\tevent.onTick(server);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a ServerWorld ticks.\n+\t */\n+\tpublic static final Event<WorldTickCallback<ServerWorld>> WORLD_TICK = EventFactory.createArrayBacked(WorldTickCallback.class, callbacks -> world -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerWorldTick_\" + world.dimension.getType().toString());\n+\n+\t\t\tfor (WorldTickCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (WorldTickCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an chunk is loaded into a ServerWorld.\n+\t */\n+\tpublic static final Event<ChunkLoadCallback<ServerWorld>> CHUNK_LOAD = EventFactory.createArrayBacked(ChunkLoadCallback.class, callbacks -> (serverWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = serverWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerChunkLoad\");\n+\n+\t\t\tfor (ChunkLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkLoad(serverWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkLoad(serverWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an chunk is unloaded from a ServerWorld.\n+\t */\n+\tpublic static final Event<ChunkUnloadCallback<ServerWorld>> CHUNK_UNLOAD = EventFactory.createArrayBacked(ChunkUnloadCallback.class, callbacks -> (serverWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = serverWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerChunkUnload\");\n+\n+\t\t\tfor (ChunkUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkUnload(serverWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkUnload(serverWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an BlockEntity is loaded into a ServerWorld.\n+\t */\n+\tpublic static final Event<BlockEntityLoadCallback<ServerWorld>> BLOCK_ENTITY_LOAD = EventFactory.createArrayBacked(BlockEntityLoadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerBlockEntityLoad\");\n+\n+\t\t\tfor (BlockEntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BlockEntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an BlockEntity is unloaded from a ServerWorld.\n+\t */\n+\tpublic static final Event<BlockEntityUnloadCallback<ServerWorld>> BLOCK_ENTITY_UNLOAD = EventFactory.createArrayBacked(BlockEntityUnloadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerBlockEntityUnload\");\n+\n+\t\t\tfor (BlockEntityUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onUnloadBlockEntity(blockEntity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BlockEntityUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onUnloadBlockEntity(blockEntity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an Entity is loaded into a ServerWorld.\n+\t *\n+\t * <p>Note there is no corresponding unload event because entity unloads cannot be reliably tracked.\n+\t */\n+\tpublic static final Event<EntityLoadCallback<ServerWorld>> ENTITY_LOAD = EventFactory.createArrayBacked(EntityLoadCallback.class, callbacks -> (entity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerEntityLoad\");\n+\n+\t\t\tfor (EntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onEntityLoad(entity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (EntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onEntityLoad(entity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when the server has started. At this stage, all worlds are live.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3180af925a4e314bf325498692eac40951bb84f7"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzM0NDQzOnYy", "diffSide": "RIGHT", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoxMzoxMFrOGfbCPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoxMzoxMFrOGfbCPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwMTk4Mg==", "bodyText": "This could clarify what stopping means, especially with the client having a less permanent stop (in a way).", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r435601982", "createdAt": "2020-06-04T23:13:10Z", "author": {"login": "sfPlayer1"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.world.WorldTickCallback;\n+import net.fabricmc.fabric.impl.lifecycle.ServerLifecycleInternals;\n+\n+public final class ServerLifecycleEvents {\n+\tprivate ServerLifecycleEvents() {\n+\t}\n+\n+\t/**\n+\t * Called when a server ticks.\n+\t */\n+\tpublic static final Event<GameTickCallback<MinecraftServer>> SERVER_TICK = EventFactory.createArrayBacked(GameTickCallback.class, callbacks -> server -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = server.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerTick\");\n+\n+\t\t\tfor (GameTickCallback<MinecraftServer> event : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(event));\n+\t\t\t\tevent.onTick(server);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (GameTickCallback<MinecraftServer> event : callbacks) {\n+\t\t\t\tevent.onTick(server);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a ServerWorld ticks.\n+\t */\n+\tpublic static final Event<WorldTickCallback<ServerWorld>> WORLD_TICK = EventFactory.createArrayBacked(WorldTickCallback.class, callbacks -> world -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerWorldTick_\" + world.dimension.getType().toString());\n+\n+\t\t\tfor (WorldTickCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (WorldTickCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an chunk is loaded into a ServerWorld.\n+\t */\n+\tpublic static final Event<ChunkLoadCallback<ServerWorld>> CHUNK_LOAD = EventFactory.createArrayBacked(ChunkLoadCallback.class, callbacks -> (serverWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = serverWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerChunkLoad\");\n+\n+\t\t\tfor (ChunkLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkLoad(serverWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkLoad(serverWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an chunk is unloaded from a ServerWorld.\n+\t */\n+\tpublic static final Event<ChunkUnloadCallback<ServerWorld>> CHUNK_UNLOAD = EventFactory.createArrayBacked(ChunkUnloadCallback.class, callbacks -> (serverWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = serverWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerChunkUnload\");\n+\n+\t\t\tfor (ChunkUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkUnload(serverWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkUnload(serverWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an BlockEntity is loaded into a ServerWorld.\n+\t */\n+\tpublic static final Event<BlockEntityLoadCallback<ServerWorld>> BLOCK_ENTITY_LOAD = EventFactory.createArrayBacked(BlockEntityLoadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerBlockEntityLoad\");\n+\n+\t\t\tfor (BlockEntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BlockEntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an BlockEntity is unloaded from a ServerWorld.\n+\t */\n+\tpublic static final Event<BlockEntityUnloadCallback<ServerWorld>> BLOCK_ENTITY_UNLOAD = EventFactory.createArrayBacked(BlockEntityUnloadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerBlockEntityUnload\");\n+\n+\t\t\tfor (BlockEntityUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onUnloadBlockEntity(blockEntity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BlockEntityUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onUnloadBlockEntity(blockEntity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an Entity is loaded into a ServerWorld.\n+\t *\n+\t * <p>Note there is no corresponding unload event because entity unloads cannot be reliably tracked.\n+\t */\n+\tpublic static final Event<EntityLoadCallback<ServerWorld>> ENTITY_LOAD = EventFactory.createArrayBacked(EntityLoadCallback.class, callbacks -> (entity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerEntityLoad\");\n+\n+\t\t\tfor (EntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onEntityLoad(entity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (EntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onEntityLoad(entity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when the server has started. At this stage, all worlds are live.\n+\t */\n+\tpublic static final Event<GameLifecycleCallback<MinecraftServer>> SERVER_STARTED = EventFactory.createArrayBacked(GameLifecycleCallback.class, (callbacks) -> (server) -> {\n+\t\tfor (GameLifecycleCallback<MinecraftServer> callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when the server has started stopping. All worlds are still present.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3180af925a4e314bf325498692eac40951bb84f7"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzM0ODc4OnYy", "diffSide": "RIGHT", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoxNTozMVrOGfbEyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMjo1NjoxOFrOGgGEZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwMjYzNA==", "bodyText": "While this is useful and sometimes not truly avoidable, I am not sure if we want to reinforce the notion that there's only one server. There should at least be a strong recommendation to always use world.getServer and other context specific approaches instead.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r435602634", "createdAt": "2020-06-04T23:15:31Z", "author": {"login": "sfPlayer1"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.world.WorldTickCallback;\n+import net.fabricmc.fabric.impl.lifecycle.ServerLifecycleInternals;\n+\n+public final class ServerLifecycleEvents {\n+\tprivate ServerLifecycleEvents() {\n+\t}\n+\n+\t/**\n+\t * Called when a server ticks.\n+\t */\n+\tpublic static final Event<GameTickCallback<MinecraftServer>> SERVER_TICK = EventFactory.createArrayBacked(GameTickCallback.class, callbacks -> server -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = server.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerTick\");\n+\n+\t\t\tfor (GameTickCallback<MinecraftServer> event : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(event));\n+\t\t\t\tevent.onTick(server);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (GameTickCallback<MinecraftServer> event : callbacks) {\n+\t\t\t\tevent.onTick(server);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a ServerWorld ticks.\n+\t */\n+\tpublic static final Event<WorldTickCallback<ServerWorld>> WORLD_TICK = EventFactory.createArrayBacked(WorldTickCallback.class, callbacks -> world -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerWorldTick_\" + world.dimension.getType().toString());\n+\n+\t\t\tfor (WorldTickCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (WorldTickCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an chunk is loaded into a ServerWorld.\n+\t */\n+\tpublic static final Event<ChunkLoadCallback<ServerWorld>> CHUNK_LOAD = EventFactory.createArrayBacked(ChunkLoadCallback.class, callbacks -> (serverWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = serverWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerChunkLoad\");\n+\n+\t\t\tfor (ChunkLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkLoad(serverWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkLoad(serverWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an chunk is unloaded from a ServerWorld.\n+\t */\n+\tpublic static final Event<ChunkUnloadCallback<ServerWorld>> CHUNK_UNLOAD = EventFactory.createArrayBacked(ChunkUnloadCallback.class, callbacks -> (serverWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = serverWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerChunkUnload\");\n+\n+\t\t\tfor (ChunkUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkUnload(serverWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkUnload(serverWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an BlockEntity is loaded into a ServerWorld.\n+\t */\n+\tpublic static final Event<BlockEntityLoadCallback<ServerWorld>> BLOCK_ENTITY_LOAD = EventFactory.createArrayBacked(BlockEntityLoadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerBlockEntityLoad\");\n+\n+\t\t\tfor (BlockEntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BlockEntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an BlockEntity is unloaded from a ServerWorld.\n+\t */\n+\tpublic static final Event<BlockEntityUnloadCallback<ServerWorld>> BLOCK_ENTITY_UNLOAD = EventFactory.createArrayBacked(BlockEntityUnloadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerBlockEntityUnload\");\n+\n+\t\t\tfor (BlockEntityUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onUnloadBlockEntity(blockEntity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BlockEntityUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onUnloadBlockEntity(blockEntity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an Entity is loaded into a ServerWorld.\n+\t *\n+\t * <p>Note there is no corresponding unload event because entity unloads cannot be reliably tracked.\n+\t */\n+\tpublic static final Event<EntityLoadCallback<ServerWorld>> ENTITY_LOAD = EventFactory.createArrayBacked(EntityLoadCallback.class, callbacks -> (entity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerEntityLoad\");\n+\n+\t\t\tfor (EntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onEntityLoad(entity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (EntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onEntityLoad(entity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when the server has started. At this stage, all worlds are live.\n+\t */\n+\tpublic static final Event<GameLifecycleCallback<MinecraftServer>> SERVER_STARTED = EventFactory.createArrayBacked(GameLifecycleCallback.class, (callbacks) -> (server) -> {\n+\t\tfor (GameLifecycleCallback<MinecraftServer> callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when the server has started stopping. All worlds are still present.\n+\t */\n+\tpublic static final Event<GameLifecycleCallback<MinecraftServer>> SERVER_STOPPING = EventFactory.createArrayBacked(GameLifecycleCallback.class, (callbacks) -> (server) -> {\n+\t\tfor (GameLifecycleCallback<MinecraftServer> callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when the server has stopped. All worlds have been closed and all (block)entities and players have been unloaded.\n+\t */\n+\tpublic static final Event<GameLifecycleCallback<MinecraftServer>> SERVER_STOPPED = EventFactory.createArrayBacked(GameLifecycleCallback.class, callbacks -> server -> {\n+\t\tfor (GameLifecycleCallback<MinecraftServer> callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Gets the currently running server.\n+\t *\n+\t * <p>The server instance returned SHOULD NOT be cached! Call the method every time you need the server.\n+\t *\n+\t * @return the currently running server\n+\t * @throws IllegalStateException if the server is not available\n+\t */\n+\tpublic static MinecraftServer getCurrentServer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3180af925a4e314bf325498692eac40951bb84f7"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyNTA1NA==", "bodyText": "Yea that is precisely why I did stage this addition to one commit incase it was unpopular. The documentation would be nice to have about reccomending getting the server from the ServerWorld.\nInternally this will optionally get the depending on a client or server. Which you can look at in impl packages.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r436025054", "createdAt": "2020-06-05T16:16:18Z", "author": {"login": "i509VCB"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.world.WorldTickCallback;\n+import net.fabricmc.fabric.impl.lifecycle.ServerLifecycleInternals;\n+\n+public final class ServerLifecycleEvents {\n+\tprivate ServerLifecycleEvents() {\n+\t}\n+\n+\t/**\n+\t * Called when a server ticks.\n+\t */\n+\tpublic static final Event<GameTickCallback<MinecraftServer>> SERVER_TICK = EventFactory.createArrayBacked(GameTickCallback.class, callbacks -> server -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = server.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerTick\");\n+\n+\t\t\tfor (GameTickCallback<MinecraftServer> event : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(event));\n+\t\t\t\tevent.onTick(server);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (GameTickCallback<MinecraftServer> event : callbacks) {\n+\t\t\t\tevent.onTick(server);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a ServerWorld ticks.\n+\t */\n+\tpublic static final Event<WorldTickCallback<ServerWorld>> WORLD_TICK = EventFactory.createArrayBacked(WorldTickCallback.class, callbacks -> world -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerWorldTick_\" + world.dimension.getType().toString());\n+\n+\t\t\tfor (WorldTickCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (WorldTickCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an chunk is loaded into a ServerWorld.\n+\t */\n+\tpublic static final Event<ChunkLoadCallback<ServerWorld>> CHUNK_LOAD = EventFactory.createArrayBacked(ChunkLoadCallback.class, callbacks -> (serverWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = serverWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerChunkLoad\");\n+\n+\t\t\tfor (ChunkLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkLoad(serverWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkLoad(serverWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an chunk is unloaded from a ServerWorld.\n+\t */\n+\tpublic static final Event<ChunkUnloadCallback<ServerWorld>> CHUNK_UNLOAD = EventFactory.createArrayBacked(ChunkUnloadCallback.class, callbacks -> (serverWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = serverWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerChunkUnload\");\n+\n+\t\t\tfor (ChunkUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkUnload(serverWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkUnload(serverWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an BlockEntity is loaded into a ServerWorld.\n+\t */\n+\tpublic static final Event<BlockEntityLoadCallback<ServerWorld>> BLOCK_ENTITY_LOAD = EventFactory.createArrayBacked(BlockEntityLoadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerBlockEntityLoad\");\n+\n+\t\t\tfor (BlockEntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BlockEntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an BlockEntity is unloaded from a ServerWorld.\n+\t */\n+\tpublic static final Event<BlockEntityUnloadCallback<ServerWorld>> BLOCK_ENTITY_UNLOAD = EventFactory.createArrayBacked(BlockEntityUnloadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerBlockEntityUnload\");\n+\n+\t\t\tfor (BlockEntityUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onUnloadBlockEntity(blockEntity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BlockEntityUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onUnloadBlockEntity(blockEntity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an Entity is loaded into a ServerWorld.\n+\t *\n+\t * <p>Note there is no corresponding unload event because entity unloads cannot be reliably tracked.\n+\t */\n+\tpublic static final Event<EntityLoadCallback<ServerWorld>> ENTITY_LOAD = EventFactory.createArrayBacked(EntityLoadCallback.class, callbacks -> (entity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerEntityLoad\");\n+\n+\t\t\tfor (EntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onEntityLoad(entity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (EntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onEntityLoad(entity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when the server has started. At this stage, all worlds are live.\n+\t */\n+\tpublic static final Event<GameLifecycleCallback<MinecraftServer>> SERVER_STARTED = EventFactory.createArrayBacked(GameLifecycleCallback.class, (callbacks) -> (server) -> {\n+\t\tfor (GameLifecycleCallback<MinecraftServer> callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when the server has started stopping. All worlds are still present.\n+\t */\n+\tpublic static final Event<GameLifecycleCallback<MinecraftServer>> SERVER_STOPPING = EventFactory.createArrayBacked(GameLifecycleCallback.class, (callbacks) -> (server) -> {\n+\t\tfor (GameLifecycleCallback<MinecraftServer> callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when the server has stopped. All worlds have been closed and all (block)entities and players have been unloaded.\n+\t */\n+\tpublic static final Event<GameLifecycleCallback<MinecraftServer>> SERVER_STOPPED = EventFactory.createArrayBacked(GameLifecycleCallback.class, callbacks -> server -> {\n+\t\tfor (GameLifecycleCallback<MinecraftServer> callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Gets the currently running server.\n+\t *\n+\t * <p>The server instance returned SHOULD NOT be cached! Call the method every time you need the server.\n+\t *\n+\t * @return the currently running server\n+\t * @throws IllegalStateException if the server is not available\n+\t */\n+\tpublic static MinecraftServer getCurrentServer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwMjYzNA=="}, "originalCommit": {"oid": "3180af925a4e314bf325498692eac40951bb84f7"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNzA0NQ==", "bodyText": "Hmm, I think this might getPrimaryServer might be a better name since we don't assume one server exists. I've added some docs explaining how it's use is discouraged.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r436307045", "createdAt": "2020-06-06T22:56:18Z", "author": {"login": "i509VCB"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.block.entity.BlockEntityUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.chunk.ChunkUnloadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.entity.EntityLoadCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.world.WorldTickCallback;\n+import net.fabricmc.fabric.impl.lifecycle.ServerLifecycleInternals;\n+\n+public final class ServerLifecycleEvents {\n+\tprivate ServerLifecycleEvents() {\n+\t}\n+\n+\t/**\n+\t * Called when a server ticks.\n+\t */\n+\tpublic static final Event<GameTickCallback<MinecraftServer>> SERVER_TICK = EventFactory.createArrayBacked(GameTickCallback.class, callbacks -> server -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = server.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerTick\");\n+\n+\t\t\tfor (GameTickCallback<MinecraftServer> event : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(event));\n+\t\t\t\tevent.onTick(server);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (GameTickCallback<MinecraftServer> event : callbacks) {\n+\t\t\t\tevent.onTick(server);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a ServerWorld ticks.\n+\t */\n+\tpublic static final Event<WorldTickCallback<ServerWorld>> WORLD_TICK = EventFactory.createArrayBacked(WorldTickCallback.class, callbacks -> world -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerWorldTick_\" + world.dimension.getType().toString());\n+\n+\t\t\tfor (WorldTickCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (WorldTickCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onTick(world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an chunk is loaded into a ServerWorld.\n+\t */\n+\tpublic static final Event<ChunkLoadCallback<ServerWorld>> CHUNK_LOAD = EventFactory.createArrayBacked(ChunkLoadCallback.class, callbacks -> (serverWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = serverWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerChunkLoad\");\n+\n+\t\t\tfor (ChunkLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkLoad(serverWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkLoad(serverWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an chunk is unloaded from a ServerWorld.\n+\t */\n+\tpublic static final Event<ChunkUnloadCallback<ServerWorld>> CHUNK_UNLOAD = EventFactory.createArrayBacked(ChunkUnloadCallback.class, callbacks -> (serverWorld, chunk) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = serverWorld.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerChunkUnload\");\n+\n+\t\t\tfor (ChunkUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onChunkUnload(serverWorld, chunk);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (ChunkUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onChunkUnload(serverWorld, chunk);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an BlockEntity is loaded into a ServerWorld.\n+\t */\n+\tpublic static final Event<BlockEntityLoadCallback<ServerWorld>> BLOCK_ENTITY_LOAD = EventFactory.createArrayBacked(BlockEntityLoadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerBlockEntityLoad\");\n+\n+\t\t\tfor (BlockEntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BlockEntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onLoadBlockEntity(blockEntity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an BlockEntity is unloaded from a ServerWorld.\n+\t */\n+\tpublic static final Event<BlockEntityUnloadCallback<ServerWorld>> BLOCK_ENTITY_UNLOAD = EventFactory.createArrayBacked(BlockEntityUnloadCallback.class, callbacks -> (blockEntity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerBlockEntityUnload\");\n+\n+\t\t\tfor (BlockEntityUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onUnloadBlockEntity(blockEntity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BlockEntityUnloadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onUnloadBlockEntity(blockEntity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when an Entity is loaded into a ServerWorld.\n+\t *\n+\t * <p>Note there is no corresponding unload event because entity unloads cannot be reliably tracked.\n+\t */\n+\tpublic static final Event<EntityLoadCallback<ServerWorld>> ENTITY_LOAD = EventFactory.createArrayBacked(EntityLoadCallback.class, callbacks -> (entity, world) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = world.getProfiler();\n+\t\t\tprofiler.push(\"fabricServerEntityLoad\");\n+\n+\t\t\tfor (EntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.onEntityLoad(entity, world);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (EntityLoadCallback<ServerWorld> callback : callbacks) {\n+\t\t\t\tcallback.onEntityLoad(entity, world);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when the server has started. At this stage, all worlds are live.\n+\t */\n+\tpublic static final Event<GameLifecycleCallback<MinecraftServer>> SERVER_STARTED = EventFactory.createArrayBacked(GameLifecycleCallback.class, (callbacks) -> (server) -> {\n+\t\tfor (GameLifecycleCallback<MinecraftServer> callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when the server has started stopping. All worlds are still present.\n+\t */\n+\tpublic static final Event<GameLifecycleCallback<MinecraftServer>> SERVER_STOPPING = EventFactory.createArrayBacked(GameLifecycleCallback.class, (callbacks) -> (server) -> {\n+\t\tfor (GameLifecycleCallback<MinecraftServer> callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when the server has stopped. All worlds have been closed and all (block)entities and players have been unloaded.\n+\t */\n+\tpublic static final Event<GameLifecycleCallback<MinecraftServer>> SERVER_STOPPED = EventFactory.createArrayBacked(GameLifecycleCallback.class, callbacks -> server -> {\n+\t\tfor (GameLifecycleCallback<MinecraftServer> callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Gets the currently running server.\n+\t *\n+\t * <p>The server instance returned SHOULD NOT be cached! Call the method every time you need the server.\n+\t *\n+\t * @return the currently running server\n+\t * @throws IllegalStateException if the server is not available\n+\t */\n+\tpublic static MinecraftServer getCurrentServer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwMjYzNA=="}, "originalCommit": {"oid": "3180af925a4e314bf325498692eac40951bb84f7"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzg3NzQ0OnYy", "diffSide": "RIGHT", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMzo0Mzo0MFrOGgGNJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMzo0Mzo0MFrOGgGNJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwOTI4Nw==", "bodyText": "just do @Deprecated", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r436309287", "createdAt": "2020-06-06T23:43:40Z", "author": {"login": "liach"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "diffHunk": "@@ -61,17 +61,17 @@ private ServerLifecycleEvents() {\n \t});\n \n \t/**\n-\t * Gets the currently running server.\n+\t * Gets the currently running primary server.\n \t *\n-\t * <p><b>Use of this method is highly impractical and not recommended since there is no real restriction on whether the game engine could run multiple servers concurrently.</b>\n+\t * <p><b>Use of this method is highly discouraged and not recommended since there is no real restriction on whether the game engine could run multiple servers concurrently.</b>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9dcda0789f23b4df8b2da290ead333af2a93217"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDQ3MDE3OnYy", "diffSide": "RIGHT", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0NjowMVrOGkGYWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDo0ODo1M1rOGkLHfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNjQ1Nw==", "bodyText": "After thinking a bit, I am going to drop these methods.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r440506457", "createdAt": "2020-06-15T23:46:01Z", "author": {"login": "i509VCB"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.world.ServerWorld;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.impl.lifecycle.ServerLifecycleInternals;\n+\n+public final class ServerLifecycleEvents {\n+\tprivate ServerLifecycleEvents() {\n+\t}\n+\n+\t/**\n+\t * Called when a Minecraft server has started and is about to tick for the first time.\n+\t *\n+\t * <p>At this stage, all worlds are live.\n+\t */\n+\tpublic static final Event<ServerLifecycleEvents.LifecycleCallback> SERVER_STARTED = EventFactory.createArrayBacked(ServerLifecycleEvents.LifecycleCallback.class, (callbacks) -> (server) -> {\n+\t\tfor (ServerLifecycleEvents.LifecycleCallback callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a Minecraft server has started shutting down.\n+\t * This occurs before the server's network channel is closed and before any players are disconnected.\n+\t *\n+\t * <p>For example, an integrated server will begin stopping, but it's client may continue to run.\n+\t *\n+\t * <p>All worlds are still present and can be modified.\n+\t */\n+\tpublic static final Event<ServerLifecycleEvents.LifecycleCallback> SERVER_STOPPING = EventFactory.createArrayBacked(ServerLifecycleEvents.LifecycleCallback.class, (callbacks) -> (server) -> {\n+\t\tfor (ServerLifecycleEvents.LifecycleCallback callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a Minecraft server has stopped.\n+\t * All worlds have been closed and all (block)entities and players have been unloaded.\n+\t *\n+\t * <p>For example, an {@link net.fabricmc.api.EnvType#CLIENT integrated server} will begin stopping, but it's client may continue to run.\n+\t * Meanwhile for a {@link net.fabricmc.api.EnvType#SERVER dedicated server}, this will be the last event called.\n+\t */\n+\tpublic static final Event<ServerLifecycleEvents.LifecycleCallback> SERVER_STOPPED = EventFactory.createArrayBacked(ServerLifecycleEvents.LifecycleCallback.class, callbacks -> server -> {\n+\t\tfor (ServerLifecycleEvents.LifecycleCallback callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Gets the currently running primary server.\n+\t *\n+\t * <p><b>Use of this method is highly discouraged and not recommended since there is no real restriction on whether the game engine could run multiple servers concurrently.</b>\n+\t * One should attempt to obtain the server instance from a {@link ServerWorld server world} or via other means.\n+\t *\n+\t * <p>The server instance returned SHOULD NOT be cached! Call the method every time you need the server.\n+\t *\n+\t * @return the currently running server\n+\t * @throws IllegalStateException if the server is not available\n+\t */\n+\t@Deprecated\n+\tpublic static MinecraftServer getPrimaryServer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "046fa8ca53afe6a2d2e837cf9a44fe235d7f58f8"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzNDEwMg==", "bodyText": "Please do.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r440534102", "createdAt": "2020-06-16T01:26:20Z", "author": {"login": "liach"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.world.ServerWorld;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.impl.lifecycle.ServerLifecycleInternals;\n+\n+public final class ServerLifecycleEvents {\n+\tprivate ServerLifecycleEvents() {\n+\t}\n+\n+\t/**\n+\t * Called when a Minecraft server has started and is about to tick for the first time.\n+\t *\n+\t * <p>At this stage, all worlds are live.\n+\t */\n+\tpublic static final Event<ServerLifecycleEvents.LifecycleCallback> SERVER_STARTED = EventFactory.createArrayBacked(ServerLifecycleEvents.LifecycleCallback.class, (callbacks) -> (server) -> {\n+\t\tfor (ServerLifecycleEvents.LifecycleCallback callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a Minecraft server has started shutting down.\n+\t * This occurs before the server's network channel is closed and before any players are disconnected.\n+\t *\n+\t * <p>For example, an integrated server will begin stopping, but it's client may continue to run.\n+\t *\n+\t * <p>All worlds are still present and can be modified.\n+\t */\n+\tpublic static final Event<ServerLifecycleEvents.LifecycleCallback> SERVER_STOPPING = EventFactory.createArrayBacked(ServerLifecycleEvents.LifecycleCallback.class, (callbacks) -> (server) -> {\n+\t\tfor (ServerLifecycleEvents.LifecycleCallback callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a Minecraft server has stopped.\n+\t * All worlds have been closed and all (block)entities and players have been unloaded.\n+\t *\n+\t * <p>For example, an {@link net.fabricmc.api.EnvType#CLIENT integrated server} will begin stopping, but it's client may continue to run.\n+\t * Meanwhile for a {@link net.fabricmc.api.EnvType#SERVER dedicated server}, this will be the last event called.\n+\t */\n+\tpublic static final Event<ServerLifecycleEvents.LifecycleCallback> SERVER_STOPPED = EventFactory.createArrayBacked(ServerLifecycleEvents.LifecycleCallback.class, callbacks -> server -> {\n+\t\tfor (ServerLifecycleEvents.LifecycleCallback callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Gets the currently running primary server.\n+\t *\n+\t * <p><b>Use of this method is highly discouraged and not recommended since there is no real restriction on whether the game engine could run multiple servers concurrently.</b>\n+\t * One should attempt to obtain the server instance from a {@link ServerWorld server world} or via other means.\n+\t *\n+\t * <p>The server instance returned SHOULD NOT be cached! Call the method every time you need the server.\n+\t *\n+\t * @return the currently running server\n+\t * @throws IllegalStateException if the server is not available\n+\t */\n+\t@Deprecated\n+\tpublic static MinecraftServer getPrimaryServer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNjQ1Nw=="}, "originalCommit": {"oid": "046fa8ca53afe6a2d2e837cf9a44fe235d7f58f8"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4NDA2MA==", "bodyText": "And it's out", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r440584060", "createdAt": "2020-06-16T04:48:53Z", "author": {"login": "i509VCB"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/event/lifecycle/v1/ServerLifecycleEvents.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.lifecycle.v1;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.world.ServerWorld;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.impl.lifecycle.ServerLifecycleInternals;\n+\n+public final class ServerLifecycleEvents {\n+\tprivate ServerLifecycleEvents() {\n+\t}\n+\n+\t/**\n+\t * Called when a Minecraft server has started and is about to tick for the first time.\n+\t *\n+\t * <p>At this stage, all worlds are live.\n+\t */\n+\tpublic static final Event<ServerLifecycleEvents.LifecycleCallback> SERVER_STARTED = EventFactory.createArrayBacked(ServerLifecycleEvents.LifecycleCallback.class, (callbacks) -> (server) -> {\n+\t\tfor (ServerLifecycleEvents.LifecycleCallback callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a Minecraft server has started shutting down.\n+\t * This occurs before the server's network channel is closed and before any players are disconnected.\n+\t *\n+\t * <p>For example, an integrated server will begin stopping, but it's client may continue to run.\n+\t *\n+\t * <p>All worlds are still present and can be modified.\n+\t */\n+\tpublic static final Event<ServerLifecycleEvents.LifecycleCallback> SERVER_STOPPING = EventFactory.createArrayBacked(ServerLifecycleEvents.LifecycleCallback.class, (callbacks) -> (server) -> {\n+\t\tfor (ServerLifecycleEvents.LifecycleCallback callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when a Minecraft server has stopped.\n+\t * All worlds have been closed and all (block)entities and players have been unloaded.\n+\t *\n+\t * <p>For example, an {@link net.fabricmc.api.EnvType#CLIENT integrated server} will begin stopping, but it's client may continue to run.\n+\t * Meanwhile for a {@link net.fabricmc.api.EnvType#SERVER dedicated server}, this will be the last event called.\n+\t */\n+\tpublic static final Event<ServerLifecycleEvents.LifecycleCallback> SERVER_STOPPED = EventFactory.createArrayBacked(ServerLifecycleEvents.LifecycleCallback.class, callbacks -> server -> {\n+\t\tfor (ServerLifecycleEvents.LifecycleCallback callback : callbacks) {\n+\t\t\tcallback.onChangeLifecycle(server);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Gets the currently running primary server.\n+\t *\n+\t * <p><b>Use of this method is highly discouraged and not recommended since there is no real restriction on whether the game engine could run multiple servers concurrently.</b>\n+\t * One should attempt to obtain the server instance from a {@link ServerWorld server world} or via other means.\n+\t *\n+\t * <p>The server instance returned SHOULD NOT be cached! Call the method every time you need the server.\n+\t *\n+\t * @return the currently running server\n+\t * @throws IllegalStateException if the server is not available\n+\t */\n+\t@Deprecated\n+\tpublic static MinecraftServer getPrimaryServer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNjQ1Nw=="}, "originalCommit": {"oid": "046fa8ca53afe6a2d2e837cf9a44fe235d7f58f8"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzQzMTEwOnYy", "diffSide": "RIGHT", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientLifecycleEvents.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMzozOToxNVrOGlegWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNDoxMToyNlrOGle93g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1MDI5OQ==", "bodyText": "clientStopping.onClientStopping etc sounds weird \ud83e\udd14", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r441950299", "createdAt": "2020-06-18T03:39:15Z", "author": {"login": "liach"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientLifecycleEvents.java", "diffHunk": "@@ -33,9 +33,9 @@ private ClientLifecycleEvents() {\n \t *\n \t * <p>This occurs while the splash screen is displayed.\n \t */\n-\tpublic static final Event<ClientLifecycleCallback> CLIENT_STARTED = EventFactory.createArrayBacked(ClientLifecycleCallback.class, callbacks -> client -> {\n-\t\tfor (ClientLifecycleCallback callback : callbacks) {\n-\t\t\tcallback.onChangeLifecycle(client);\n+\tpublic static final Event<ClientStarted> CLIENT_STARTED = EventFactory.createArrayBacked(ClientStarted.class, callbacks -> client -> {\n+\t\tfor (ClientStarted callback : callbacks) {\n+\t\t\tcallback.onClientStarted(client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3431c0d894309f137f39f288174a5d14c6423cee"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1Nzg1NA==", "bodyText": "yea it definitely felt odd to type out. Any better ideas for name?", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r441957854", "createdAt": "2020-06-18T04:11:26Z", "author": {"login": "i509VCB"}, "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientLifecycleEvents.java", "diffHunk": "@@ -33,9 +33,9 @@ private ClientLifecycleEvents() {\n \t *\n \t * <p>This occurs while the splash screen is displayed.\n \t */\n-\tpublic static final Event<ClientLifecycleCallback> CLIENT_STARTED = EventFactory.createArrayBacked(ClientLifecycleCallback.class, callbacks -> client -> {\n-\t\tfor (ClientLifecycleCallback callback : callbacks) {\n-\t\t\tcallback.onChangeLifecycle(client);\n+\tpublic static final Event<ClientStarted> CLIENT_STARTED = EventFactory.createArrayBacked(ClientStarted.class, callbacks -> client -> {\n+\t\tfor (ClientStarted callback : callbacks) {\n+\t\t\tcallback.onClientStarted(client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1MDI5OQ=="}, "originalCommit": {"oid": "3431c0d894309f137f39f288174a5d14c6423cee"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjM3NjQwOnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/build.gradle", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozODo1NVrOGl7nEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1NjozMVrOGl8MiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNzE1NQ==", "bodyText": "Not sure if we really need a whole module just for ItemTooltipCallback", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r442427155", "createdAt": "2020-06-18T18:38:55Z", "author": {"login": "modmuss50"}, "path": "fabric-item-api-v1/build.gradle", "diffHunk": "@@ -0,0 +1,6 @@\n+archivesBaseName = \"fabric-item-api-v1\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3431c0d894309f137f39f288174a5d14c6423cee"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMjY3MQ==", "bodyText": "To me, it makes sense. It gives a home for future item hooks. Better than a huge misc module that would become massively bloated as time goes on.", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r442432671", "createdAt": "2020-06-18T18:49:15Z", "author": {"login": "Prospector"}, "path": "fabric-item-api-v1/build.gradle", "diffHunk": "@@ -0,0 +1,6 @@\n+archivesBaseName = \"fabric-item-api-v1\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNzE1NQ=="}, "originalCommit": {"oid": "3431c0d894309f137f39f288174a5d14c6423cee"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNjc0NA==", "bodyText": "Like prospector said, this is a thought of, what would likely exist in the future where this one can live", "url": "https://github.com/FabricMC/fabric/pull/619#discussion_r442436744", "createdAt": "2020-06-18T18:56:31Z", "author": {"login": "i509VCB"}, "path": "fabric-item-api-v1/build.gradle", "diffHunk": "@@ -0,0 +1,6 @@\n+archivesBaseName = \"fabric-item-api-v1\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNzE1NQ=="}, "originalCommit": {"oid": "3431c0d894309f137f39f288174a5d14c6423cee"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3554, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}