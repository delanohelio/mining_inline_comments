{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1Nzg0ODc5", "number": 1053, "title": "Ported 1.16.1 biomes-api-v1 to 1.16.2", "bodyText": "Public API changes:\n\nRemoved flagging biomes as suitable for player spawns since that is now handled in the Biome Builder.\nChanged API over to RegistryKey's, not because it's necessary, but because it is more ergonomic since Vanilla Biomes in BuiltInBiomes are now all exposed as keys, rather than instances.\n\nI also increased Gradle-Memory-Settings to 3G since I saw OOM errors in unrelated modules.\nThis aims to simply restore the biome module for now, and split off the work required to post-process biomes so it becomes more manageable. (See #1036)\nThis PR in conjunction with #1052 will enable mods to port from 1.16.1 in a safe manner by moving from Registry.* to BuiltInRegistry.* for their WorldGen objects. After this, the next step is to provide simple APIs for adding carvers/features/structures to other biomes (See #1036).", "createdAt": "2020-08-29T14:36:15Z", "url": "https://github.com/FabricMC/fabric/pull/1053", "merged": true, "mergeCommit": {"oid": "c29459abafb4fd66ee2cdee6cb889484ed71a754"}, "closed": true, "closedAt": "2020-09-18T17:11:52Z", "author": {"login": "shartte"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEC3D4gFqTQ3ODIyNDI4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKDqbQAFqTQ5MTM2ODc2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjI0Mjgy", "url": "https://github.com/FabricMC/fabric/pull/1053#pullrequestreview-478224282", "createdAt": "2020-08-30T18:22:02Z", "commit": {"oid": "6273175cdadcc9ff3b5993dc29df425220e29c0e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxODoyMjowMlrOHJksbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxODo1MToxM1rOHJk3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMDQyOA==", "bodyText": "I would suggest using InternalBiomeUtils.fromRawId similar to InternalBiomeUtils.getRawId so we can make them both use a DynamicRegistryManager if needed", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479800428", "createdAt": "2020-08-30T18:22:02Z", "author": {"login": "CheaterCodes"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeUtils.java", "diffHunk": "@@ -138,7 +148,7 @@ public static void injectBiomesIntoClimate(LayerRandomnessSource random, int[] v\n \t\tif (reqWeightSum < vanillaArray.length) {\n \t\t\t// Vanilla biome; look it up from the vanilla array and transform accordingly.\n \n-\t\t\tresult.accept(transformBiome(random, BuiltinRegistries.BIOME.get(vanillaArray[(int) reqWeightSum]), climate));\n+\t\t\tresult.accept(transformBiome(random, Biomes.fromRawId(vanillaArray[(int) reqWeightSum]), climate));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6273175cdadcc9ff3b5993dc29df425220e29c0e"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMDc5OA==", "bodyText": "I would suggest capturing the biomeRegistry in VanillaLayeredBiomeSource.<init> and use that one theoughout for the conversion RegistryKey <-> RawId. That should be compatible with using the DynamicRegistryManager then (and I think also json biomes).\nWe'd have to check if that capture covers all use cases, but I think it does.", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479800798", "createdAt": "2020-08-30T18:25:33Z", "author": {"login": "CheaterCodes"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeUtils.java", "diffHunk": "@@ -148,7 +158,22 @@ public static void injectBiomesIntoClimate(LayerRandomnessSource random, int[] v\n \t\t}\n \t}\n \n-\tpublic static void recreateChunkGenerators(GeneratorOptions generatorOptions) {\n-\t\t((DimensionOptionsAccessor) (Object) generatorOptions.getDimensionMap().get(DimensionOptions.NETHER)).setChunkGenerator(DimensionTypeAccessor.createNetherGenerator(generatorOptions.getSeed()));\n+\tpublic static int getRawId(RegistryKey<Biome> key) {\n+\t\treturn BuiltinRegistries.BIOME.getRawId(BuiltinRegistries.BIOME.method_31140(key));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6273175cdadcc9ff3b5993dc29df425220e29c0e"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMTE1Ng==", "bodyText": "This validation doesn't seem great to me. How does this interact with registering to DynamicRegistryManager.BUILTIN or using json biomes?\nI'd suggest dropping this validation for the initial PR.\nThis seems like it could cause issues, and that's the last thing we want validation to do.", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479801156", "createdAt": "2020-08-30T18:29:23Z", "author": {"login": "CheaterCodes"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeUtils.java", "diffHunk": "@@ -148,7 +158,22 @@ public static void injectBiomesIntoClimate(LayerRandomnessSource random, int[] v\n \t\t}\n \t}\n \n-\tpublic static void recreateChunkGenerators(GeneratorOptions generatorOptions) {\n-\t\t((DimensionOptionsAccessor) (Object) generatorOptions.getDimensionMap().get(DimensionOptions.NETHER)).setChunkGenerator(DimensionTypeAccessor.createNetherGenerator(generatorOptions.getSeed()));\n+\tpublic static int getRawId(RegistryKey<Biome> key) {\n+\t\treturn BuiltinRegistries.BIOME.getRawId(BuiltinRegistries.BIOME.method_31140(key));\n+\t}\n+\n+\t/**\n+\t * Makes sure that the given registry key is mapped in {@link Biomes}. This mapping may be absent\n+\t * if mods register their biomes only in {@link BuiltinRegistries#BIOME}, and not using the\n+\t * private method in {@link Biomes}.\n+\t */\n+\tpublic static void ensureIdMapping(RegistryKey<Biome> biomeKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6273175cdadcc9ff3b5993dc29df425220e29c0e"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMTY5Ng==", "bodyText": "I would suggest using InternalBiomeUtils.fromRawId similar to InternalBiomeUtils.getRawId so we can make them both use a DynamicRegistryManager if needed.", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479801696", "createdAt": "2020-08-30T18:34:43Z", "author": {"login": "CheaterCodes"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinAddEdgeBiomesLayer.java", "diffHunk": "@@ -31,18 +32,18 @@\n import net.fabricmc.fabric.impl.biome.InternalBiomeUtils;\n \n /**\n- * Adds edges and shores specified in {@link OverworldBiomes#addEdgeBiome(Biome, Biome, double)} and {@link OverworldBiomes#addShoreBiome(Biome, Biome, double)} to the edges layer.\n+ * Adds edges and shores specified in {@link OverworldBiomes#addEdgeBiome(RegistryKey, RegistryKey, double)} and {@link OverworldBiomes#addShoreBiome(RegistryKey, RegistryKey, double)} to the edges layer.\n  */\n @Mixin(AddEdgeBiomesLayer.class)\n public class MixinAddEdgeBiomesLayer {\n \t@Inject(at = @At(\"HEAD\"), method = \"sample\", cancellable = true)\n \tprivate void sample(LayerRandomnessSource rand, int north, int east, int south, int west, int center, CallbackInfoReturnable<Integer> info) {\n-\t\tBiome centerBiome = BuiltinRegistries.BIOME.get(center);\n+\t\tRegistryKey<Biome> centerBiome = Biomes.fromRawId(center);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6273175cdadcc9ff3b5993dc29df425220e29c0e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMTgxMA==", "bodyText": "I would suggest using InternalBiomeUtils.fromRawId similar to InternalBiomeUtils.getRawId so we can make them both use a DynamicRegistryManager if needed.", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479801810", "createdAt": "2020-08-30T18:35:45Z", "author": {"login": "CheaterCodes"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinAddHillsLayer.java", "diffHunk": "@@ -48,9 +55,13 @@ private void sample(LayerRandomnessSource rand, LayerSampler biomeSampler, Layer\n \t\tfinal int biomeId = biomeSampler.sample(chunkX, chunkZ);\n \t\tint noiseSample = noiseSampler.sample(chunkX, chunkZ);\n \t\tint processedNoiseSample = (noiseSample - 2) % 29;\n-\t\tfinal Biome biome = BuiltinRegistries.BIOME.get(biomeId);\n+\t\tRegistryKey<Biome> key = Biomes.fromRawId(biomeId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6273175cdadcc9ff3b5993dc29df425220e29c0e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMTk0MA==", "bodyText": "I would suggest using InternalBiomeUtils.fromRawId similar to InternalBiomeUtils.getRawId so we can make them both use a DynamicRegistryManager if needed.", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479801940", "createdAt": "2020-08-30T18:37:17Z", "author": {"login": "CheaterCodes"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinAddRiversLayer.java", "diffHunk": "@@ -18,42 +18,39 @@\n \n import java.util.Map;\n \n-import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Shadow;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n \n-import net.minecraft.util.registry.BuiltinRegistries;\n+import net.minecraft.util.registry.RegistryKey;\n import net.minecraft.world.biome.Biome;\n+import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.BuiltInBiomes;\n import net.minecraft.world.biome.layer.AddRiversLayer;\n import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n import net.minecraft.world.biome.layer.util.LayerSampler;\n \n import net.fabricmc.fabric.api.biomes.v1.OverworldBiomes;\n import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.InternalBiomeUtils;\n \n /**\n- * Sets river biomes specified with {@link OverworldBiomes#setRiverBiome(Biome, Biome)}.\n+ * Sets river biomes specified with {@link OverworldBiomes#setRiverBiome(RegistryKey, RegistryKey)}.\n  */\n @Mixin(AddRiversLayer.class)\n public class MixinAddRiversLayer {\n-\t@Shadow\n-\t@Final\n-\tprivate static int RIVER_ID;\n-\n \t@Inject(at = @At(\"HEAD\"), method = \"sample\", cancellable = true)\n \tprivate void sample(LayerRandomnessSource rand, LayerSampler landSampler, LayerSampler riverSampler, int x, int z, CallbackInfoReturnable<Integer> info) {\n \t\tint landBiomeId = landSampler.sample(x, z);\n-\t\tBiome landBiome = BuiltinRegistries.BIOME.get(landBiomeId);\n+\t\tRegistryKey<Biome> landBiomeKey = Biomes.fromRawId(landBiomeId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6273175cdadcc9ff3b5993dc29df425220e29c0e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMjA4Ng==", "bodyText": "I would suggest... Ok, I think you get the point.", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479802086", "createdAt": "2020-08-30T18:39:09Z", "author": {"login": "CheaterCodes"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinAddRiversLayer.java", "diffHunk": "@@ -18,42 +18,39 @@\n \n import java.util.Map;\n \n-import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Shadow;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n \n-import net.minecraft.util.registry.BuiltinRegistries;\n+import net.minecraft.util.registry.RegistryKey;\n import net.minecraft.world.biome.Biome;\n+import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.BuiltInBiomes;\n import net.minecraft.world.biome.layer.AddRiversLayer;\n import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n import net.minecraft.world.biome.layer.util.LayerSampler;\n \n import net.fabricmc.fabric.api.biomes.v1.OverworldBiomes;\n import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.InternalBiomeUtils;\n \n /**\n- * Sets river biomes specified with {@link OverworldBiomes#setRiverBiome(Biome, Biome)}.\n+ * Sets river biomes specified with {@link OverworldBiomes#setRiverBiome(RegistryKey, RegistryKey)}.\n  */\n @Mixin(AddRiversLayer.class)\n public class MixinAddRiversLayer {\n-\t@Shadow\n-\t@Final\n-\tprivate static int RIVER_ID;\n-\n \t@Inject(at = @At(\"HEAD\"), method = \"sample\", cancellable = true)\n \tprivate void sample(LayerRandomnessSource rand, LayerSampler landSampler, LayerSampler riverSampler, int x, int z, CallbackInfoReturnable<Integer> info) {\n \t\tint landBiomeId = landSampler.sample(x, z);\n-\t\tBiome landBiome = BuiltinRegistries.BIOME.get(landBiomeId);\n+\t\tRegistryKey<Biome> landBiomeKey = Biomes.fromRawId(landBiomeId);\n \n \t\tint riverBiomeId = riverSampler.sample(x, z);\n-\t\tMap<Biome, Biome> overworldRivers = InternalBiomeData.getOverworldRivers();\n+\t\tMap<RegistryKey<Biome>, RegistryKey<Biome>> overworldRivers = InternalBiomeData.getOverworldRivers();\n \n-\t\tif (overworldRivers.containsKey(landBiome) && riverBiomeId == RIVER_ID) {\n-\t\t\tBiome riverBiome = overworldRivers.get(landBiome);\n-\t\t\tinfo.setReturnValue(riverBiome == null ? landBiomeId : BuiltinRegistries.BIOME.getRawId(riverBiome));\n+\t\tif (overworldRivers.containsKey(landBiomeKey) && Biomes.fromRawId(riverBiomeId) == BuiltInBiomes.RIVER) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6273175cdadcc9ff3b5993dc29df425220e29c0e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMjQzNQ==", "bodyText": "Same thing again.", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479802435", "createdAt": "2020-08-30T18:42:34Z", "author": {"login": "CheaterCodes"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinSetBaseBiomesLayer.java", "diffHunk": "@@ -96,16 +82,16 @@ private void injectCoolBiomes(LayerRandomnessSource random, int value, CallbackI\n \t@Inject(at = @At(\"RETURN\"), method = \"sample\", cancellable = true)\n \tprivate void transformVariants(LayerRandomnessSource random, int value, CallbackInfoReturnable<Integer> info) {\n \t\tint biomeId = info.getReturnValueI();\n-\t\tBiome biome = BuiltinRegistries.BIOME.get(biomeId);\n+\t\tRegistryKey<Biome> biome = Biomes.fromRawId(biomeId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6273175cdadcc9ff3b5993dc29df425220e29c0e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMjg5OA==", "bodyText": "Just gonna mention that I like my approach in my fork better, but this is probably fine too.", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479802898", "createdAt": "2020-08-30T18:47:49Z", "author": {"login": "CheaterCodes"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinMultiNoiseBiomeSource.java", "diffHunk": "@@ -20,33 +20,45 @@\n import java.util.List;\n import java.util.function.Supplier;\n \n+import com.google.common.collect.ImmutableList;\n import com.mojang.datafixers.util.Pair;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n \n+import net.minecraft.util.registry.Registry;\n import net.minecraft.world.biome.Biome;\n import net.minecraft.world.biome.source.MultiNoiseBiomeSource;\n \n import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n \n-@Mixin(MultiNoiseBiomeSource.class)\n+/**\n+ * This Mixin is responsible for adding mod-biomes to the NETHER preset in the MultiNoiseBiomeSource.\n+ */\n+@Mixin(MultiNoiseBiomeSource.Preset.class)\n public class MixinMultiNoiseBiomeSource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6273175cdadcc9ff3b5993dc29df425220e29c0e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMzA5NQ==", "bodyText": "I know you disagree, but I'm still gonna comment that I don't think we should use BuiltinRegistries, but DynamicRegistryManager.BUILTIN. We can easily provide a getter for that registry too.", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479803095", "createdAt": "2020-08-30T18:50:09Z", "author": {"login": "CheaterCodes"}, "path": "fabric-biomes-v1/src/testmod/java/net/fabricmc/fabric/test/biome/FabricBiomeTest.java", "diffHunk": "@@ -16,26 +16,52 @@\n \n package net.fabricmc.fabric.test.biome;\n \n-import net.minecraft.world.biome.DefaultBiomeCreator;\n import net.minecraft.util.Identifier;\n import net.minecraft.util.registry.BuiltinRegistries;\n import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n import net.minecraft.world.biome.Biome;\n-import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.BuiltInBiomes;\n+import net.minecraft.world.biome.DefaultBiomeCreator;\n \n import net.fabricmc.api.ModInitializer;\n import net.fabricmc.fabric.api.biomes.v1.NetherBiomes;\n import net.fabricmc.fabric.api.biomes.v1.OverworldBiomes;\n+import net.fabricmc.fabric.api.biomes.v1.OverworldClimate;\n \n+/**\n+ * <b>NOTES FOR TESTING:</b>\n+ * When running with this test-mod, also test this when running a dedicated server since there\n+ * are significant differences between server + client and how they sync biomes.\n+ *\n+ * <p>Ingame, you can use <code>/locatebiome</code> since we use nether- and end-biomes in the overworld,\n+ * and vice-versa, making them easy to find to verify the injection worked.\n+ *\n+ * <p>If you don't find a biome right away, teleport far away (~10000 blocks) from spawn and try again.\n+ */\n public class FabricBiomeTest implements ModInitializer {\n \tpublic static final String MOD_ID = \"fabric-biome-api-v1-testmod\";\n \n-\t@Override public void onInitialize() {\n-\t\tBiome biome = Registry.register(BuiltinRegistries.BIOME, new Identifier(MOD_ID, \"test_crimson_forest\"), DefaultBiomeCreator.createCrimsonForest());\n-\t\tNetherBiomes.addNetherBiome(Biomes.BEACH, new Biome.MixedNoisePoint(0.0F, 0.5F, 0.0F, 0.0F, 0.1F));\n-\t\tNetherBiomes.addNetherBiome(biome, new Biome.MixedNoisePoint(0.0F, 0.5F, 0.0F, 0.0F, 0.275F));\n+\tprivate static final RegistryKey<Biome> TEST_CRIMSON_FOREST = RegistryKey.of(Registry.BIOME_KEY, new Identifier(MOD_ID, \"test_crimson_forest\"));\n+\n+\tprivate static final RegistryKey<Biome> CUSTOM_PLAINS = RegistryKey.of(Registry.BIOME_KEY, new Identifier(MOD_ID, \"custom_plains\"));\n+\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tRegistry.register(BuiltinRegistries.BIOME, TEST_CRIMSON_FOREST.getValue(), DefaultBiomeCreator.createCrimsonForest());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6273175cdadcc9ff3b5993dc29df425220e29c0e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMzE5MQ==", "bodyText": "Would be nice if we could get this to work using json biomes, even if you think we shouldn't use those.\nPutting this here cause it'd be part of the test mod.", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479803191", "createdAt": "2020-08-30T18:51:13Z", "author": {"login": "CheaterCodes"}, "path": "fabric-biomes-v1/src/testmod/java/net/fabricmc/fabric/test/biome/FabricBiomeTest.java", "diffHunk": "@@ -16,26 +16,52 @@\n \n package net.fabricmc.fabric.test.biome;\n \n-import net.minecraft.world.biome.DefaultBiomeCreator;\n import net.minecraft.util.Identifier;\n import net.minecraft.util.registry.BuiltinRegistries;\n import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n import net.minecraft.world.biome.Biome;\n-import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.BuiltInBiomes;\n+import net.minecraft.world.biome.DefaultBiomeCreator;\n \n import net.fabricmc.api.ModInitializer;\n import net.fabricmc.fabric.api.biomes.v1.NetherBiomes;\n import net.fabricmc.fabric.api.biomes.v1.OverworldBiomes;\n+import net.fabricmc.fabric.api.biomes.v1.OverworldClimate;\n \n+/**\n+ * <b>NOTES FOR TESTING:</b>\n+ * When running with this test-mod, also test this when running a dedicated server since there\n+ * are significant differences between server + client and how they sync biomes.\n+ *\n+ * <p>Ingame, you can use <code>/locatebiome</code> since we use nether- and end-biomes in the overworld,\n+ * and vice-versa, making them easy to find to verify the injection worked.\n+ *\n+ * <p>If you don't find a biome right away, teleport far away (~10000 blocks) from spawn and try again.\n+ */\n public class FabricBiomeTest implements ModInitializer {\n \tpublic static final String MOD_ID = \"fabric-biome-api-v1-testmod\";\n \n-\t@Override public void onInitialize() {\n-\t\tBiome biome = Registry.register(BuiltinRegistries.BIOME, new Identifier(MOD_ID, \"test_crimson_forest\"), DefaultBiomeCreator.createCrimsonForest());\n-\t\tNetherBiomes.addNetherBiome(Biomes.BEACH, new Biome.MixedNoisePoint(0.0F, 0.5F, 0.0F, 0.0F, 0.1F));\n-\t\tNetherBiomes.addNetherBiome(biome, new Biome.MixedNoisePoint(0.0F, 0.5F, 0.0F, 0.0F, 0.275F));\n+\tprivate static final RegistryKey<Biome> TEST_CRIMSON_FOREST = RegistryKey.of(Registry.BIOME_KEY, new Identifier(MOD_ID, \"test_crimson_forest\"));\n+\n+\tprivate static final RegistryKey<Biome> CUSTOM_PLAINS = RegistryKey.of(Registry.BIOME_KEY, new Identifier(MOD_ID, \"custom_plains\"));\n+\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tRegistry.register(BuiltinRegistries.BIOME, TEST_CRIMSON_FOREST.getValue(), DefaultBiomeCreator.createCrimsonForest());\n+\n+\t\tNetherBiomes.addNetherBiome(BuiltInBiomes.BEACH, new Biome.MixedNoisePoint(0.0F, 0.5F, 0.0F, 0.0F, 0.1F));\n+\t\tNetherBiomes.addNetherBiome(TEST_CRIMSON_FOREST, new Biome.MixedNoisePoint(0.0F, 0.5F, 0.0F, 0.0F, 0.275F));\n+\n+\t\tRegistry.register(BuiltinRegistries.BIOME, CUSTOM_PLAINS.getValue(), DefaultBiomeCreator.createPlains(false));\n+\t\tOverworldBiomes.addBiomeVariant(BuiltInBiomes.PLAINS, CUSTOM_PLAINS, 1);\n+\n+\t\tOverworldBiomes.addEdgeBiome(BuiltInBiomes.PLAINS, BuiltInBiomes.END_BARRENS, 0.9);\n+\n+\t\tOverworldBiomes.addShoreBiome(BuiltInBiomes.FOREST, BuiltInBiomes.NETHER_WASTES, 0.9);\n+\n+\t\tOverworldBiomes.addHillsBiome(BuiltInBiomes.BAMBOO_JUNGLE, BuiltInBiomes.BASALT_DELTAS, 0.9);\n \n-\t\tBiome customPlains = Registry.register(BuiltinRegistries.BIOME, new Identifier(MOD_ID, \"custom_plains\"), DefaultBiomeCreator.createPlains(null, false));\n-\t\tOverworldBiomes.addBiomeVariant(Biomes.PLAINS, customPlains, 1);\n+\t\tOverworldBiomes.addContinentalBiome(BuiltInBiomes.END_HIGHLANDS, OverworldClimate.DRY, 0.5);\n \t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6273175cdadcc9ff3b5993dc29df425220e29c0e"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MTQ1Mzk4", "url": "https://github.com/FabricMC/fabric/pull/1053#pullrequestreview-478145398", "createdAt": "2020-08-29T18:06:43Z", "commit": {"oid": "6273175cdadcc9ff3b5993dc29df425220e29c0e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxODowNjo0M1rOHJdBzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxODowOTowMlrOHJdCgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3NDgzMA==", "bodyText": "This effectively is a new module, so you should probably rename it to fabric-biome-api-v1", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479674830", "createdAt": "2020-08-29T18:06:43Z", "author": {"login": "i509VCB"}, "path": "fabric-biomes-v1/build.gradle", "diffHunk": "@@ -1,2 +1,2 @@\n archivesBaseName = \"fabric-biomes-v1\"\n-version = getSubprojectVersion(project, \"1.0.2\")\n+version = getSubprojectVersion(project, \"1.1.0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6273175cdadcc9ff3b5993dc29df425220e29c0e"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3NTAxMA==", "bodyText": "Please name the method, this just confuses me.", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479675010", "createdAt": "2020-08-29T18:09:02Z", "author": {"login": "i509VCB"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/AddHillsLayerAccessor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome;\n+\n+import it.unimi.dsi.fastutil.ints.Int2IntMap;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+import net.minecraft.world.biome.layer.AddHillsLayer;\n+\n+@Mixin(AddHillsLayer.class)\n+public interface AddHillsLayerAccessor {\n+\t/**\n+\t * This field contains a raw-id to raw-id map for establishing parent/child relationships that\n+\t * model derived biomes.\n+\t *\n+\t * <p>For example, it contains a mapping for 1 -> 129 where 1 is the raw id of plains, while 129 is the raw id\n+\t * of the sunflower plains, which is derived from plains.\n+\t */\n+\t@Accessor\n+\tstatic Int2IntMap getField_26727() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6273175cdadcc9ff3b5993dc29df425220e29c0e"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMDY3Mjgz", "url": "https://github.com/FabricMC/fabric/pull/1053#pullrequestreview-482067283", "createdAt": "2020-09-03T17:45:26Z", "commit": {"oid": "c1af3d3d36c04624d6289e0b5c236ea23d975132"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo0NToyN1rOHMxNMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo0NjozNVrOHMxPoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1MTE1NA==", "bodyText": "What version did this biome thing occur in?\n.2 is probably not optimistic enough about version ranges, but not a major deal tbf", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r483151154", "createdAt": "2020-09-03T17:45:27Z", "author": {"login": "i509VCB"}, "path": "fabric-biomes-v1/src/main/resources/fabric.mod.json", "diffHunk": "@@ -16,8 +16,8 @@\n     \"FabricMC\"\n   ],\n   \"depends\": {\n-    \"fabricloader\": \">=0.4.0\",\n-    \"minecraft\": \">=1.16-alpha.20.22.a\"\n+    \"fabricloader\": \">=0.9.2\",\n+    \"minecraft\": \">=1.16.2\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1af3d3d36c04624d6289e0b5c236ea23d975132"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1MTc3Ng==", "bodyText": "please put these in alphabetical order. This reverse ordering adds a bunch of noise to the pull request", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r483151776", "createdAt": "2020-09-03T17:46:35Z", "author": {"login": "i509VCB"}, "path": "fabric-biomes-v1/src/main/resources/fabric-biomes-v1.mixins.json", "diffHunk": "@@ -3,17 +3,16 @@\n   \"package\": \"net.fabricmc.fabric.mixin.biome\",\n   \"compatibilityLevel\": \"JAVA_8\",\n   \"mixins\": [\n-    \"DimensionOptionsAccessor\",\n-    \"DimensionTypeAccessor\",\n     \"MixinAddEdgeBiomesLayer\",\n     \"MixinAddHillsLayer\",\n     \"MixinAddRiversLayer\",\n-    \"MixinBiomeSource\",\n     \"MixinSetBaseBiomesLayer\",\n-    \"MixinMinecraftDedicatedServer\",\n     \"MixinMultiNoiseBiomeSource\",\n-    \"MixinVanillaLayeredBiomeSource\",\n-    \"MultiNoiseBiomeSourceAccessor\"\n+    \"VanillaLayeredBiomeSourceAccessor\",\n+    \"MultiNoiseBiomeSourceAccessor\",\n+    \"BiomeSourceAccessor\",\n+    \"BiomesAccessor\",\n+    \"AddHillsLayerAccessor\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1af3d3d36c04624d6289e0b5c236ea23d975132"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e24ed8b394b710c176e419be3ac3c63246ed538b", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/e24ed8b394b710c176e419be3ac3c63246ed538b", "committedDate": "2020-09-05T00:02:57Z", "message": "Ported 1.16.1 biomes-api-v1 to 1.16.2.\nPublic API changes:\n- Removed flagging biomes as suitable for player spawns since that is now handled in the Biome Builder.\n- Changed API over to RegistryKey's, not because it's necessary, but because it is more ergonomic since Vanilla Biomes in BuiltInBiomes are now all exposed as keys, rather than instances."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82c487bb76385d154e06d45c6860230a51e5c48e", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/82c487bb76385d154e06d45c6860230a51e5c48e", "committedDate": "2020-09-05T00:20:47Z", "message": "Changed to CheaterCode's mixin for modifying the nether biomes, saving us one accessor."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTUzNzUz", "url": "https://github.com/FabricMC/fabric/pull/1053#pullrequestreview-483153753", "createdAt": "2020-09-06T15:41:44Z", "commit": {"oid": "82c487bb76385d154e06d45c6860230a51e5c48e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf1c84f1b03dfcd64eedd17779f9d2388880bd3a", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/bf1c84f1b03dfcd64eedd17779f9d2388880bd3a", "committedDate": "2020-09-07T21:31:06Z", "message": "Move Bonanza"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "337fe1c604f45d2ce3855f17d47d2064185ca1f4", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/337fe1c604f45d2ce3855f17d47d2064185ca1f4", "committedDate": "2020-09-07T22:08:37Z", "message": "Finished moving and updating of the module, added experimental markers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce552411e15f0d05fd62b229ce4813dda26d5069", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ce552411e15f0d05fd62b229ce4813dda26d5069", "committedDate": "2020-09-07T22:19:19Z", "message": "Adjusted experimental notes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2beb7acfcbaa62cb21d704d8065914e7ba670f27", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/2beb7acfcbaa62cb21d704d8065914e7ba670f27", "committedDate": "2020-09-08T21:32:50Z", "message": "Finished rename from biomes-v1 to biome-api-v1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTU0MTkw", "url": "https://github.com/FabricMC/fabric/pull/1053#pullrequestreview-486954190", "createdAt": "2020-09-11T16:31:20Z", "commit": {"oid": "2beb7acfcbaa62cb21d704d8065914e7ba670f27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjozMToyMVrOHQlvtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjozMToyMVrOHQlvtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1NzY4Ng==", "bodyText": "Can you undo this? This will make it fail to build on jenkins, should be better with 0.5 loom.", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r487157686", "createdAt": "2020-09-11T16:31:21Z", "author": {"login": "modmuss50"}, "path": "gradle.properties", "diffHunk": "@@ -1 +1 @@\n-org.gradle.jvmargs=-Xmx2560M", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2beb7acfcbaa62cb21d704d8065914e7ba670f27"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e05fde7e3748535f2986e6de1de384af8ace357", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/1e05fde7e3748535f2986e6de1de384af8ace357", "committedDate": "2020-09-11T17:35:59Z", "message": "Reverted memory settings in preparation for loom-0.5"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzIwNDky", "url": "https://github.com/FabricMC/fabric/pull/1053#pullrequestreview-487320492", "createdAt": "2020-09-13T16:17:48Z", "commit": {"oid": "1e05fde7e3748535f2986e6de1de384af8ace357"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDU2MTMy", "url": "https://github.com/FabricMC/fabric/pull/1053#pullrequestreview-491056132", "createdAt": "2020-09-17T23:33:28Z", "commit": {"oid": "1e05fde7e3748535f2986e6de1de384af8ace357"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMzY4NzYy", "url": "https://github.com/FabricMC/fabric/pull/1053#pullrequestreview-491368762", "createdAt": "2020-09-18T11:12:32Z", "commit": {"oid": "1e05fde7e3748535f2986e6de1de384af8ace357"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3275, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}