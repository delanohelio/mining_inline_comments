{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MTUzNDIw", "number": 1081, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzoxMzo1MVrOEsTNBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzo1NzoyMFrOE8GfjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODg3NDMwOnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientConnectionEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzoxMzo1MVrOHfhLRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzoxNToxM1rOHfhL2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMTQ2MA==", "bodyText": "This might just be my computer but it looks like this indent is different then below?", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r502811460", "createdAt": "2020-10-10T17:13:51Z", "author": {"login": "RDIL"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientConnectionEvents.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the connection to a server on a logical client.\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientConnectionEvents {\n+\t/**\n+\t * An event for the initialization of the client play network handler.\n+\t *\n+\t * <p>At this stage, the network handler is ready to send packets to the server.\n+\t * Use {@link ClientNetworking#getPlaySender(ClientPlayNetworkHandler)} to obtain the packet sender in the callback.\n+\t */\n+\tpublic static final Event<PlayInitialized> PLAY_INITIALIZED = EventFactory.createArrayBacked(PlayInitialized.class, callbacks -> (handler, client, sender) -> {\n+\t\tfor (PlayInitialized callback : callbacks) {\n+\t\t\tcallback.onPlayInitialized(handler, client, sender);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event for the disconnection of the client play network handler.\n+\t *\n+\t * <p>No packets should be sent when this event is invoked.\n+\t */\n+\tpublic static final Event<PlayDisconnected> PLAY_DISCONNECTED = EventFactory.createArrayBacked(PlayDisconnected.class, callbacks -> (handler, client) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMTYxMA==", "bodyText": "I think GH is funky with tabs sometimes", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r502811610", "createdAt": "2020-10-10T17:15:13Z", "author": {"login": "i509VCB"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientConnectionEvents.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the connection to a server on a logical client.\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientConnectionEvents {\n+\t/**\n+\t * An event for the initialization of the client play network handler.\n+\t *\n+\t * <p>At this stage, the network handler is ready to send packets to the server.\n+\t * Use {@link ClientNetworking#getPlaySender(ClientPlayNetworkHandler)} to obtain the packet sender in the callback.\n+\t */\n+\tpublic static final Event<PlayInitialized> PLAY_INITIALIZED = EventFactory.createArrayBacked(PlayInitialized.class, callbacks -> (handler, client, sender) -> {\n+\t\tfor (PlayInitialized callback : callbacks) {\n+\t\t\tcallback.onPlayInitialized(handler, client, sender);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event for the disconnection of the client play network handler.\n+\t *\n+\t * <p>No packets should be sent when this event is invoked.\n+\t */\n+\tpublic static final Event<PlayDisconnected> PLAY_DISCONNECTED = EventFactory.createArrayBacked(PlayDisconnected.class, callbacks -> (handler, client) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMTQ2MA=="}, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM1NDY1OnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ChannelHandlerRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMjo1NjozMFrOHopnVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzozNTo1MVrOHpUxGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NjkwMw==", "bodyText": "this method should return {@code false} because ultimately implementation details can't definitively be known by interface exposure, but we can suggest that would be the norm", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512386903", "createdAt": "2020-10-27T02:56:30Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ChannelHandlerRegistry.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.util.Identifier;\n+\n+/**\n+ * Associates packets to individual packet reception handlers by channel.\n+ *\n+ * @param <H> the channel handler type\n+ */\n+public interface ChannelHandlerRegistry<H> extends ChannelRegistry {\n+\t/**\n+\t * Registers a handler to a channel.\n+\t *\n+\t * <p>If a handler is already registered to the {@code channel}, this method will return {@code false}, and no change will be made.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MzkxNA==", "bodyText": "Imo specifying semantics are fine in javadoc for an interface", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r513093914", "createdAt": "2020-10-27T23:35:51Z", "author": {"login": "i509VCB"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ChannelHandlerRegistry.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.util.Identifier;\n+\n+/**\n+ * Associates packets to individual packet reception handlers by channel.\n+ *\n+ * @param <H> the channel handler type\n+ */\n+public interface ChannelHandlerRegistry<H> extends ChannelRegistry {\n+\t/**\n+\t * Registers a handler to a channel.\n+\t *\n+\t * <p>If a handler is already registered to the {@code channel}, this method will return {@code false}, and no change will be made.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NjkwMw=="}, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM3MTg3OnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzowNTo1OVrOHopxdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzowNTo1OVrOHopxdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4OTQ5Mg==", "bodyText": "This could be further clarified. At first glance understanding what this does is a little difficult. Like when exactly does this trigger.", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512389492", "createdAt": "2020-10-27T03:05:59Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the registration of network channels for a client-side network handler.\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientChannelEvents {\n+\t/**\n+\t * An event for the client play network handler receiving an update indicating the connected server's ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM3MTk5OnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzowNjowNFrOHopxiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzowNjowNFrOHopxiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4OTUxNQ==", "bodyText": "Same here", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512389515", "createdAt": "2020-10-27T03:06:04Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the registration of network channels for a client-side network handler.\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientChannelEvents {\n+\t/**\n+\t * An event for the client play network handler receiving an update indicating the connected server's ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */\n+\tpublic static final Event<Registered> REGISTERED = EventFactory.createArrayBacked(Registered.class, callbacks -> (handler, client, sender, channels) -> {\n+\t\tfor (Registered callback : callbacks) {\n+\t\t\tcallback.onChannelRegistered(handler, client, sender, channels);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event for the client play network handler receiving an update indicating the connected server's lack of ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM3NTAyOnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzowODoxMFrOHopzaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzowODoxMFrOHopzaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4OTk5NQ==", "bodyText": "I might change this to getPlayReceivers to clarify that this isn't returning one specific play receiver but a registry of play receivers", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512389995", "createdAt": "2020-10-27T03:08:10Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.network.ClientPlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.networking.client.ClientNetworkingDetails;\n+\n+/**\n+ * Offers access to client-side networking functionalities.\n+ *\n+ * <p>Client-side networking functionalities include receiving clientbound packets,\n+ * sending serverbound packets, and events related to client-side network handlers.</p>\n+ *\n+ * <p>This class should be only used on the physical client and for the logical client.</p>\n+ *\n+ * @see ServerNetworking\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientNetworking {\n+\t/**\n+\t * Returns the packet sender for the current client player.\n+\t *\n+\t * <p>This is a shortcut method for getting a sender.\n+\t * When a client play network handler is available, {@link #getPlaySender(ClientPlayNetworkHandler)} is preferred.\n+\t *\n+\t * @return the packet sender for the current client player\n+\t * @throws IllegalStateException if the client's player is {@code null}\n+\t */\n+\tpublic static PlayPacketSender getPlaySender() throws IllegalStateException {\n+\t\tClientPlayerEntity player = MinecraftClient.getInstance().player;\n+\n+\t\tif (player == null) {\n+\t\t\tthrow new IllegalStateException(\"Cannot get packet sender when not in game!\");\n+\t\t}\n+\n+\t\treturn getPlaySender(player.networkHandler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet sender for a client play network handler.\n+\t *\n+\t * @param handler a client play network handler\n+\t * @return the associated packet sender\n+\t */\n+\tpublic static PlayPacketSender getPlaySender(ClientPlayNetworkHandler handler) {\n+\t\treturn ClientNetworkingDetails.getAddon(handler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client play network handlers, receiving {@link net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket server to client custom payload packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<PlayChannelHandler> getPlayReceiver() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM3NTU2OnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzowODoyOFrOHopzvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzowODoyOFrOHopzvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MDA3Ng==", "bodyText": "Same here getLoginReceivers", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512390076", "createdAt": "2020-10-27T03:08:28Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.network.ClientPlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.networking.client.ClientNetworkingDetails;\n+\n+/**\n+ * Offers access to client-side networking functionalities.\n+ *\n+ * <p>Client-side networking functionalities include receiving clientbound packets,\n+ * sending serverbound packets, and events related to client-side network handlers.</p>\n+ *\n+ * <p>This class should be only used on the physical client and for the logical client.</p>\n+ *\n+ * @see ServerNetworking\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientNetworking {\n+\t/**\n+\t * Returns the packet sender for the current client player.\n+\t *\n+\t * <p>This is a shortcut method for getting a sender.\n+\t * When a client play network handler is available, {@link #getPlaySender(ClientPlayNetworkHandler)} is preferred.\n+\t *\n+\t * @return the packet sender for the current client player\n+\t * @throws IllegalStateException if the client's player is {@code null}\n+\t */\n+\tpublic static PlayPacketSender getPlaySender() throws IllegalStateException {\n+\t\tClientPlayerEntity player = MinecraftClient.getInstance().player;\n+\n+\t\tif (player == null) {\n+\t\t\tthrow new IllegalStateException(\"Cannot get packet sender when not in game!\");\n+\t\t}\n+\n+\t\treturn getPlaySender(player.networkHandler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet sender for a client play network handler.\n+\t *\n+\t * @param handler a client play network handler\n+\t * @return the associated packet sender\n+\t */\n+\tpublic static PlayPacketSender getPlaySender(ClientPlayNetworkHandler handler) {\n+\t\treturn ClientNetworkingDetails.getAddon(handler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client play network handlers, receiving {@link net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket server to client custom payload packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<PlayChannelHandler> getPlayReceiver() {\n+\t\treturn ClientNetworkingDetails.PLAY;\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client login network handlers, receiving {@link net.minecraft.network.packet.s2c.login.LoginQueryRequestS2CPacket login query request packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<LoginChannelHandler> getLoginReceiver() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM3Nzk5OnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzowOTo0MFrOHop1HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzowOTo0MFrOHop1HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MDQyOQ==", "bodyText": "Doesn't this have the opportunity to throw an exception? If so, that should be mentioned in the javadoc.", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512390429", "createdAt": "2020-10-27T03:09:40Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.network.ClientPlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.networking.client.ClientNetworkingDetails;\n+\n+/**\n+ * Offers access to client-side networking functionalities.\n+ *\n+ * <p>Client-side networking functionalities include receiving clientbound packets,\n+ * sending serverbound packets, and events related to client-side network handlers.</p>\n+ *\n+ * <p>This class should be only used on the physical client and for the logical client.</p>\n+ *\n+ * @see ServerNetworking\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientNetworking {\n+\t/**\n+\t * Returns the packet sender for the current client player.\n+\t *\n+\t * <p>This is a shortcut method for getting a sender.\n+\t * When a client play network handler is available, {@link #getPlaySender(ClientPlayNetworkHandler)} is preferred.\n+\t *\n+\t * @return the packet sender for the current client player\n+\t * @throws IllegalStateException if the client's player is {@code null}\n+\t */\n+\tpublic static PlayPacketSender getPlaySender() throws IllegalStateException {\n+\t\tClientPlayerEntity player = MinecraftClient.getInstance().player;\n+\n+\t\tif (player == null) {\n+\t\t\tthrow new IllegalStateException(\"Cannot get packet sender when not in game!\");\n+\t\t}\n+\n+\t\treturn getPlaySender(player.networkHandler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet sender for a client play network handler.\n+\t *\n+\t * @param handler a client play network handler\n+\t * @return the associated packet sender\n+\t */\n+\tpublic static PlayPacketSender getPlaySender(ClientPlayNetworkHandler handler) {\n+\t\treturn ClientNetworkingDetails.getAddon(handler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client play network handlers, receiving {@link net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket server to client custom payload packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<PlayChannelHandler> getPlayReceiver() {\n+\t\treturn ClientNetworkingDetails.PLAY;\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client login network handlers, receiving {@link net.minecraft.network.packet.s2c.login.LoginQueryRequestS2CPacket login query request packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<LoginChannelHandler> getLoginReceiver() {\n+\t\treturn ClientNetworkingDetails.LOGIN;\n+\t}\n+\n+\t/**\n+\t * Sends a packet to the connected server.\n+\t *\n+\t * @param channel the channel of the packet\n+\t * @param buf the payload of the packet\n+\t */\n+\tpublic static void send(Identifier channel, PacketByteBuf buf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM4MDUyOnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxMDo1NlrOHop2og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxMDo1NlrOHop2og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MDgxOA==", "bodyText": "Also maybe there should be a method similar to getPlaySender(ClientPlayNetworkHandler handler) and getPlaySender() throws IllegalStateException that is send(ClientPlayNetworkHandler handler, Identifier channel, PacketByteBuf buf)", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512390818", "createdAt": "2020-10-27T03:10:56Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.network.ClientPlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.networking.client.ClientNetworkingDetails;\n+\n+/**\n+ * Offers access to client-side networking functionalities.\n+ *\n+ * <p>Client-side networking functionalities include receiving clientbound packets,\n+ * sending serverbound packets, and events related to client-side network handlers.</p>\n+ *\n+ * <p>This class should be only used on the physical client and for the logical client.</p>\n+ *\n+ * @see ServerNetworking\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientNetworking {\n+\t/**\n+\t * Returns the packet sender for the current client player.\n+\t *\n+\t * <p>This is a shortcut method for getting a sender.\n+\t * When a client play network handler is available, {@link #getPlaySender(ClientPlayNetworkHandler)} is preferred.\n+\t *\n+\t * @return the packet sender for the current client player\n+\t * @throws IllegalStateException if the client's player is {@code null}\n+\t */\n+\tpublic static PlayPacketSender getPlaySender() throws IllegalStateException {\n+\t\tClientPlayerEntity player = MinecraftClient.getInstance().player;\n+\n+\t\tif (player == null) {\n+\t\t\tthrow new IllegalStateException(\"Cannot get packet sender when not in game!\");\n+\t\t}\n+\n+\t\treturn getPlaySender(player.networkHandler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet sender for a client play network handler.\n+\t *\n+\t * @param handler a client play network handler\n+\t * @return the associated packet sender\n+\t */\n+\tpublic static PlayPacketSender getPlaySender(ClientPlayNetworkHandler handler) {\n+\t\treturn ClientNetworkingDetails.getAddon(handler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client play network handlers, receiving {@link net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket server to client custom payload packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<PlayChannelHandler> getPlayReceiver() {\n+\t\treturn ClientNetworkingDetails.PLAY;\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client login network handlers, receiving {@link net.minecraft.network.packet.s2c.login.LoginQueryRequestS2CPacket login query request packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<LoginChannelHandler> getLoginReceiver() {\n+\t\treturn ClientNetworkingDetails.LOGIN;\n+\t}\n+\n+\t/**\n+\t * Sends a packet to the connected server.\n+\t *\n+\t * @param channel the channel of the packet\n+\t * @param buf the payload of the packet\n+\t */\n+\tpublic static void send(Identifier channel, PacketByteBuf buf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM4MjMwOnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxMjowN1rOHop3oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxMjowN1rOHop3oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTA3Mw==", "bodyText": "Where did the rest of this sentence go. I'm dying to know what it says", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512391073", "createdAt": "2020-10-27T03:12:07Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.network.ClientPlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.networking.client.ClientNetworkingDetails;\n+\n+/**\n+ * Offers access to client-side networking functionalities.\n+ *\n+ * <p>Client-side networking functionalities include receiving clientbound packets,\n+ * sending serverbound packets, and events related to client-side network handlers.</p>\n+ *\n+ * <p>This class should be only used on the physical client and for the logical client.</p>\n+ *\n+ * @see ServerNetworking\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientNetworking {\n+\t/**\n+\t * Returns the packet sender for the current client player.\n+\t *\n+\t * <p>This is a shortcut method for getting a sender.\n+\t * When a client play network handler is available, {@link #getPlaySender(ClientPlayNetworkHandler)} is preferred.\n+\t *\n+\t * @return the packet sender for the current client player\n+\t * @throws IllegalStateException if the client's player is {@code null}\n+\t */\n+\tpublic static PlayPacketSender getPlaySender() throws IllegalStateException {\n+\t\tClientPlayerEntity player = MinecraftClient.getInstance().player;\n+\n+\t\tif (player == null) {\n+\t\t\tthrow new IllegalStateException(\"Cannot get packet sender when not in game!\");\n+\t\t}\n+\n+\t\treturn getPlaySender(player.networkHandler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet sender for a client play network handler.\n+\t *\n+\t * @param handler a client play network handler\n+\t * @return the associated packet sender\n+\t */\n+\tpublic static PlayPacketSender getPlaySender(ClientPlayNetworkHandler handler) {\n+\t\treturn ClientNetworkingDetails.getAddon(handler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client play network handlers, receiving {@link net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket server to client custom payload packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<PlayChannelHandler> getPlayReceiver() {\n+\t\treturn ClientNetworkingDetails.PLAY;\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client login network handlers, receiving {@link net.minecraft.network.packet.s2c.login.LoginQueryRequestS2CPacket login query request packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<LoginChannelHandler> getLoginReceiver() {\n+\t\treturn ClientNetworkingDetails.LOGIN;\n+\t}\n+\n+\t/**\n+\t * Sends a packet to the connected server.\n+\t *\n+\t * @param channel the channel of the packet\n+\t * @param buf the payload of the packet\n+\t */\n+\tpublic static void send(Identifier channel, PacketByteBuf buf) {\n+\t\tgetPlaySender().sendPacket(channel, buf);\n+\t}\n+\n+\t@Environment(EnvType.CLIENT)\n+\t@FunctionalInterface\n+\tpublic interface PlayChannelHandler {\n+\t\t/**\n+\t\t * Handles an incoming packet.\n+\t\t *\n+\t\t * <p>This method is executed on {@linkplain io.netty.channel.EventLoop netty's event loops}.\n+\t\t * Modification to the game should be {@linkplain net.minecraft.util.thread.ThreadExecutor#submit(Runnable) scheduled} using the provided Minecraft client instance.\n+\t\t *\n+\t\t * <p>An example usage of this is to display a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM4NTc2OnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayPacketSender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxNDoxM1rOHop5zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxNDoxM1rOHop5zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTYyOQ==", "bodyText": "Just highlighting this as something that is on the to-do list for others looking at this review to get a synopsis", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512391629", "createdAt": "2020-10-27T03:14:13Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayPacketSender.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import net.minecraft.util.Identifier;\n+\n+/**\n+ * Supports sending packets to channels in the play network handlers.\n+ *\n+ * <p>Compared to a simple packet sender, the play packet sender is informed if its connected recipient may {@link #hasChannel(Identifier) accept packets in certain channels}.\n+ * <!--TODO: Implement use of system property-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM4NzUyOnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxNTowOFrOHop6zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxNTowOFrOHop6zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTg4NQ==", "bodyText": "Similar to the comment I made on the client side, more specifics about when this occurs would be good in the javadoc", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512391885", "createdAt": "2020-10-27T03:15:08Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerPlayNetworkHandler;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the registration of network channels for a server-side network handler.\n+ */\n+public final class ServerChannelEvents {\n+\t/**\n+\t * An event for the server play network handler receiving an update indicating the connected client's ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */\n+\tpublic static final Event<Registered> REGISTERED = EventFactory.createArrayBacked(Registered.class, callbacks -> (handler, server, sender, channels) -> {\n+\t\tfor (Registered callback : callbacks) {\n+\t\t\tcallback.onChannelRegistered(handler, server, sender, channels);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event for the server play network handler receiving an update indicating the connected client's lack of ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM4NzY2OnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxNToxNVrOHop65g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxNToxNVrOHop65g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTkxMA==", "bodyText": "Same here see below", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512391910", "createdAt": "2020-10-27T03:15:15Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerPlayNetworkHandler;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the registration of network channels for a server-side network handler.\n+ */\n+public final class ServerChannelEvents {\n+\t/**\n+\t * An event for the server play network handler receiving an update indicating the connected client's ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM5MDY3OnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/AbstractChanneledNetworkAddon.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxNzoxMVrOHop8vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxNzoxMVrOHop8vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MjM4MQ==", "bodyText": "What's this comment for?", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512392381", "createdAt": "2020-10-27T03:17:11Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/AbstractChanneledNetworkAddon.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.networking;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import io.netty.util.AsciiString;\n+\n+import net.minecraft.network.ClientConnection;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.InvalidIdentifierException;\n+\n+import net.fabricmc.fabric.api.networking.v1.PacketByteBufs;\n+import net.fabricmc.fabric.api.networking.v1.PlayPacketSender;\n+\n+// play", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDQxOTc1OnYy", "diffSide": "RIGHT", "path": "fabric-networking-v0/src/main/java/net/fabricmc/fabric/impl/networking/OldNetworkingHooks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzozNDoyOFrOHoqNuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDowMjoxMlrOHoqoog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NjcyOQ==", "bodyText": "This is definitely me missing the point, but what is this for exactly?", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512396729", "createdAt": "2020-10-27T03:34:28Z", "author": {"login": "Vaerian"}, "path": "fabric-networking-v0/src/main/java/net/fabricmc/fabric/impl/networking/OldNetworkingHooks.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.networking;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.network.C2SPacketTypeCallback;\n+import net.fabricmc.fabric.api.networking.v1.ServerChannelEvents;\n+\n+public final class OldNetworkingHooks implements ModInitializer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwMzYxOA==", "bodyText": "That class implements the old PacketType events using the new ClientChannelEvents and ServerChannelEvents", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512403618", "createdAt": "2020-10-27T04:02:12Z", "author": {"login": "i509VCB"}, "path": "fabric-networking-v0/src/main/java/net/fabricmc/fabric/impl/networking/OldNetworkingHooks.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.networking;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.network.C2SPacketTypeCallback;\n+import net.fabricmc.fabric.api.networking.v1.ServerChannelEvents;\n+\n+public final class OldNetworkingHooks implements ModInitializer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NjcyOQ=="}, "originalCommit": {"oid": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTcwODk0OnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/client/networking/v1/ClientLoginConnectionEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTozMzoxMVrOHzwC0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTozMzoxMVrOHzwC0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyNjU3Ng==", "bodyText": "This (and its inner classes) should be annotated with @Environment(EnvType.CLIENT)", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r524026576", "createdAt": "2020-11-16T09:33:11Z", "author": {"login": "shedaniel"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/client/networking/v1/ClientLoginConnectionEvents.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.networking.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the connection to a server on the client while the server is processing the client's login request.\n+ */\n+public final class ClientLoginConnectionEvents {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6991c3121b94eae120dcd025e9fa6148ae63079"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTc2MDMzOnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTo0MDo0MlrOHzwkPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTo1MDoyMlrOHzxOFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAzNTEzMw==", "bodyText": "Would returning an Iterable or Iterator be sufficient in order to not creating a list?", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r524035133", "createdAt": "2020-11-16T09:40:42Z", "author": {"login": "shedaniel"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerPlayerEntity;\n+import net.minecraft.server.world.ServerChunkManager;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.server.world.ThreadedAnvilChunkStorage;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.ChunkPos;\n+import net.minecraft.util.math.Vec3d;\n+import net.minecraft.util.math.Vec3i;\n+import net.minecraft.world.chunk.ChunkManager;\n+\n+import net.fabricmc.fabric.impl.networking.ThreadedAnvilChunkStorageTrackingExtensions;\n+\n+/**\n+ * For example, a block entity may use the methods in this class to send a packet to all clients which can see the block entity in order notify clients about a change.\n+ *\n+ * <p>The word \"tracking\" means that an entity/chunk on the server is known to a player's client (within in view distance) and the (block) entity should notify tracking clients of changes.\n+ *\n+ * <p>These methods should only be called on the server thread and only be used on logical a server.\n+ */\n+public final class PlayerLookup {\n+\t/**\n+\t * Gets all the players on the minecraft server.\n+\t *\n+\t * <p>The returned collection is immutable.\n+\t *\n+\t * @param server the server\n+\t * @return all players on the server\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> all(MinecraftServer server) {\n+\t\tObjects.requireNonNull(server, \"The server cannot be null\");\n+\n+\t\t// return an immutable collection to guard against accidental removals.\n+\t\tif (server.getPlayerManager() != null) {\n+\t\t\treturn Collections.unmodifiableCollection(server.getPlayerManager().getPlayerList());\n+\t\t}\n+\n+\t\treturn Collections.emptyList();\n+\t}\n+\n+\t/**\n+\t * Gets all the players in a server world.\n+\t *\n+\t * <p>The returned collection is immutable.\n+\t *\n+\t * @param world the server world\n+\t * @return the players in the server world\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> world(ServerWorld world) {\n+\t\tObjects.requireNonNull(world, \"The world cannot be null\");\n+\n+\t\t// return an immutable collection to guard against accidental removals.\n+\t\treturn Collections.unmodifiableCollection(world.getPlayers());\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking a chunk in a server world.\n+\t *\n+\t * @param world the server world\n+\t * @param pos   the chunk in question\n+\t * @return the players tracking the chunk\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(ServerWorld world, ChunkPos pos) {\n+\t\tObjects.requireNonNull(world, \"The world cannot be null\");\n+\t\tObjects.requireNonNull(pos, \"The chunk pos cannot be null\");\n+\n+\t\treturn world.getChunkManager().threadedAnvilChunkStorage.getPlayersWatchingChunk(pos, false).collect(Collectors.toList());\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking an entity in a server world.\n+\t *\n+\t * <p>The returned collection is immutable.\n+\t *\n+\t * <p><b>Warning</b>: If the provided entity is a player, it is not\n+\t * guaranteed by the contract that said player is included in the\n+\t * resulting stream.\n+\t *\n+\t * @param entity the entity being tracked\n+\t * @return the players tracking the entity\n+\t * @throws IllegalArgumentException if the entity is not in a server world\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(Entity entity) {\n+\t\tObjects.requireNonNull(entity, \"Entity cannot be null\");\n+\t\tChunkManager manager = entity.world.getChunkManager();\n+\n+\t\tif (manager instanceof ServerChunkManager) {\n+\t\t\tThreadedAnvilChunkStorage storage = ((ServerChunkManager) manager).threadedAnvilChunkStorage;\n+\n+\t\t\t// return an immutable collection to guard against accidental removals.\n+\t\t\treturn Collections.unmodifiableCollection(((ThreadedAnvilChunkStorageTrackingExtensions) storage).fabric_getTrackingPlayers(entity));\n+\t\t}\n+\n+\t\tthrow new IllegalArgumentException(\"Only supported on server worlds!\");\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking a block entity in a server world.\n+\t *\n+\t * @param blockEntity the block entity\n+\t * @return the players tracking the block position\n+\t * @throws IllegalArgumentException if the block entity is not in a server world\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(BlockEntity blockEntity) {\n+\t\tObjects.requireNonNull(blockEntity, \"BlockEntity cannot be null\");\n+\n+\t\t//noinspection ConstantConditions - IJ intrinsics don't know hasWorld == true will result in no null\n+\t\tif (!blockEntity.hasWorld() || blockEntity.getWorld().isClient()) {\n+\t\t\tthrow new IllegalArgumentException(\"Only supported on server worlds!\");\n+\t\t}\n+\n+\t\treturn tracking((ServerWorld) blockEntity.getWorld(), blockEntity.getPos());\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking a block position in a server world.\n+\t *\n+\t * @param world the server world\n+\t * @param pos   the block position\n+\t * @return the players tracking the block position\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(ServerWorld world, BlockPos pos) {\n+\t\tObjects.requireNonNull(pos, \"BlockPos cannot be null\");\n+\n+\t\treturn tracking(world, new ChunkPos(pos));\n+\t}\n+\n+\t/**\n+\t * Gets all players around a position in a world.\n+\t *\n+\t * <p>The distance check is done in the three-dimensional space instead of in the horizontal plane.\n+\t *\n+\t * @param world  the world\n+\t * @param pos the position\n+\t * @param radius the maximum distance from the position in blocks\n+\t * @return the players around the position\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> around(ServerWorld world, Vec3d pos, double radius) {\n+\t\tdouble radiusSq = radius * radius;\n+\n+\t\treturn world(world)\n+\t\t\t\t.stream()\n+\t\t\t\t.filter((p) -> p.squaredDistanceTo(pos) <= radiusSq)\n+\t\t\t\t.collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6991c3121b94eae120dcd025e9fa6148ae63079"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA0NTg0NQ==", "bodyText": "Having the size is quite nice and it needs to create something, the (Array)List should be one of the cheapest options.", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r524045845", "createdAt": "2020-11-16T09:50:22Z", "author": {"login": "sfPlayer1"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerPlayerEntity;\n+import net.minecraft.server.world.ServerChunkManager;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.server.world.ThreadedAnvilChunkStorage;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.ChunkPos;\n+import net.minecraft.util.math.Vec3d;\n+import net.minecraft.util.math.Vec3i;\n+import net.minecraft.world.chunk.ChunkManager;\n+\n+import net.fabricmc.fabric.impl.networking.ThreadedAnvilChunkStorageTrackingExtensions;\n+\n+/**\n+ * For example, a block entity may use the methods in this class to send a packet to all clients which can see the block entity in order notify clients about a change.\n+ *\n+ * <p>The word \"tracking\" means that an entity/chunk on the server is known to a player's client (within in view distance) and the (block) entity should notify tracking clients of changes.\n+ *\n+ * <p>These methods should only be called on the server thread and only be used on logical a server.\n+ */\n+public final class PlayerLookup {\n+\t/**\n+\t * Gets all the players on the minecraft server.\n+\t *\n+\t * <p>The returned collection is immutable.\n+\t *\n+\t * @param server the server\n+\t * @return all players on the server\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> all(MinecraftServer server) {\n+\t\tObjects.requireNonNull(server, \"The server cannot be null\");\n+\n+\t\t// return an immutable collection to guard against accidental removals.\n+\t\tif (server.getPlayerManager() != null) {\n+\t\t\treturn Collections.unmodifiableCollection(server.getPlayerManager().getPlayerList());\n+\t\t}\n+\n+\t\treturn Collections.emptyList();\n+\t}\n+\n+\t/**\n+\t * Gets all the players in a server world.\n+\t *\n+\t * <p>The returned collection is immutable.\n+\t *\n+\t * @param world the server world\n+\t * @return the players in the server world\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> world(ServerWorld world) {\n+\t\tObjects.requireNonNull(world, \"The world cannot be null\");\n+\n+\t\t// return an immutable collection to guard against accidental removals.\n+\t\treturn Collections.unmodifiableCollection(world.getPlayers());\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking a chunk in a server world.\n+\t *\n+\t * @param world the server world\n+\t * @param pos   the chunk in question\n+\t * @return the players tracking the chunk\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(ServerWorld world, ChunkPos pos) {\n+\t\tObjects.requireNonNull(world, \"The world cannot be null\");\n+\t\tObjects.requireNonNull(pos, \"The chunk pos cannot be null\");\n+\n+\t\treturn world.getChunkManager().threadedAnvilChunkStorage.getPlayersWatchingChunk(pos, false).collect(Collectors.toList());\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking an entity in a server world.\n+\t *\n+\t * <p>The returned collection is immutable.\n+\t *\n+\t * <p><b>Warning</b>: If the provided entity is a player, it is not\n+\t * guaranteed by the contract that said player is included in the\n+\t * resulting stream.\n+\t *\n+\t * @param entity the entity being tracked\n+\t * @return the players tracking the entity\n+\t * @throws IllegalArgumentException if the entity is not in a server world\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(Entity entity) {\n+\t\tObjects.requireNonNull(entity, \"Entity cannot be null\");\n+\t\tChunkManager manager = entity.world.getChunkManager();\n+\n+\t\tif (manager instanceof ServerChunkManager) {\n+\t\t\tThreadedAnvilChunkStorage storage = ((ServerChunkManager) manager).threadedAnvilChunkStorage;\n+\n+\t\t\t// return an immutable collection to guard against accidental removals.\n+\t\t\treturn Collections.unmodifiableCollection(((ThreadedAnvilChunkStorageTrackingExtensions) storage).fabric_getTrackingPlayers(entity));\n+\t\t}\n+\n+\t\tthrow new IllegalArgumentException(\"Only supported on server worlds!\");\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking a block entity in a server world.\n+\t *\n+\t * @param blockEntity the block entity\n+\t * @return the players tracking the block position\n+\t * @throws IllegalArgumentException if the block entity is not in a server world\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(BlockEntity blockEntity) {\n+\t\tObjects.requireNonNull(blockEntity, \"BlockEntity cannot be null\");\n+\n+\t\t//noinspection ConstantConditions - IJ intrinsics don't know hasWorld == true will result in no null\n+\t\tif (!blockEntity.hasWorld() || blockEntity.getWorld().isClient()) {\n+\t\t\tthrow new IllegalArgumentException(\"Only supported on server worlds!\");\n+\t\t}\n+\n+\t\treturn tracking((ServerWorld) blockEntity.getWorld(), blockEntity.getPos());\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking a block position in a server world.\n+\t *\n+\t * @param world the server world\n+\t * @param pos   the block position\n+\t * @return the players tracking the block position\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(ServerWorld world, BlockPos pos) {\n+\t\tObjects.requireNonNull(pos, \"BlockPos cannot be null\");\n+\n+\t\treturn tracking(world, new ChunkPos(pos));\n+\t}\n+\n+\t/**\n+\t * Gets all players around a position in a world.\n+\t *\n+\t * <p>The distance check is done in the three-dimensional space instead of in the horizontal plane.\n+\t *\n+\t * @param world  the world\n+\t * @param pos the position\n+\t * @param radius the maximum distance from the position in blocks\n+\t * @return the players around the position\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> around(ServerWorld world, Vec3d pos, double radius) {\n+\t\tdouble radiusSq = radius * radius;\n+\n+\t\treturn world(world)\n+\t\t\t\t.stream()\n+\t\t\t\t.filter((p) -> p.squaredDistanceTo(pos) <= radiusSq)\n+\t\t\t\t.collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAzNTEzMw=="}, "originalCommit": {"oid": "b6991c3121b94eae120dcd025e9fa6148ae63079"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzExNjQ0OnYy", "diffSide": "RIGHT", "path": "fabric-player-tracking-api-v1/src/main/resources/fabric.mod.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyNDoyM1rOH32ksw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyNDoyM1rOH32ksw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyNzg1OQ==", "bodyText": "I dont think this player tracking stuff belongs here? The module is not included in gradle?", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r528327859", "createdAt": "2020-11-22T12:24:23Z", "author": {"login": "modmuss50"}, "path": "fabric-player-tracking-api-v1/src/main/resources/fabric.mod.json", "diffHunk": "@@ -0,0 +1,26 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215f2f909cf6da420b030cb1e4bea8b2f1359295"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzEyMDIyOnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/testmod/java/net/fabricmc/fabric/test/networking/login/NetworkingLoginQueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyODoxOVrOH32mcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyODoxOVrOH32mcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyODMwNg==", "bodyText": "Disable this by default, its a fine test just dont really want this all the time when using the test mods :D", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r528328306", "createdAt": "2020-11-22T12:28:19Z", "author": {"login": "modmuss50"}, "path": "fabric-networking-api-v1/src/testmod/java/net/fabricmc/fabric/test/networking/login/NetworkingLoginQueryTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.networking.login;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.FutureTask;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerLoginNetworkHandler;\n+import net.minecraft.util.Util;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.networking.v1.ServerLoginConnectionEvents;\n+import net.fabricmc.fabric.api.networking.v1.PacketByteBufs;\n+import net.fabricmc.fabric.api.networking.v1.PacketSender;\n+import net.fabricmc.fabric.api.networking.v1.ServerLoginNetworking;\n+import net.fabricmc.fabric.test.networking.NetworkingTestmods;\n+import net.fabricmc.fabric.test.networking.play.NetworkingPlayPacketTest;\n+\n+public final class NetworkingLoginQueryTest implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tServerLoginConnectionEvents.LOGIN_QUERY_START.register(this::onLoginStart);\n+\t\tServerLoginConnectionEvents.LOGIN_QUERY_START.register(this::delaySimply);\n+\n+\t\t// login delaying example\n+\t\tServerLoginNetworking.registerGlobalReceiver(NetworkingPlayPacketTest.TEST_CHANNEL, (server, handler, understood, buf, synchronizer, sender) -> {\n+\t\t\tif (understood) {\n+\t\t\t\tFutureTask<?> future = new FutureTask<>(() -> {\n+\t\t\t\t\tfor (int i = 0; i <= 10; i++) {\n+\t\t\t\t\t\tThread.sleep(300);\n+\t\t\t\t\t\tNetworkingTestmods.LOGGER.info(\"Delayed login for number {} 300 milliseconds\", i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215f2f909cf6da420b030cb1e4bea8b2f1359295"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzEyNDU2OnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/testmod/java/net/fabricmc/fabric/test/networking/keybindreciever/NetworkingKeybindPacketTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjozMjoyM1rOH32ogw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjozMjoyM1rOH32ogw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyODgzNQ==", "bodyText": "Need fixing apparenly.", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r528328835", "createdAt": "2020-11-22T12:32:23Z", "author": {"login": "modmuss50"}, "path": "fabric-networking-api-v1/src/testmod/java/net/fabricmc/fabric/test/networking/keybindreciever/NetworkingKeybindPacketTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.networking.keybindreciever;\n+\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerPlayerEntity;\n+import net.minecraft.text.KeybindText;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.util.Formatting;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.networking.v1.PacketSender;\n+import net.fabricmc.fabric.api.networking.v1.ServerPlayNetworking;\n+import net.fabricmc.fabric.test.networking.NetworkingTestmods;\n+\n+// Listens for a packet from the client which is sent to the server when a keybinding is pressed.\n+// In response the server will send a message containing the keybind text letting the client know it pressed that key.\n+public final class NetworkingKeybindPacketTest implements ModInitializer {\n+\tpublic static final Identifier KEYBINDING_PACKET_ID = NetworkingTestmods.id(\"keybind_press_test\");\n+\n+\tprivate static void receive(MinecraftServer server, ServerPlayerEntity player, PacketByteBuf buf, PacketSender responseSender) {\n+\t\t// TODO: Can we send chat off the server thread?\n+\t\tserver.execute(() -> {\n+\t\t\tplayer.sendMessage(new LiteralText(\"So you pressed \").append(new KeybindText(\"fabric-networking-api-v1-testmod-keybind\").styled(style -> style.withFormatting(Formatting.BLUE))), false);\n+\t\t});\n+\t}\n+\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// FIXME: DO NOT LET ME PR THIS BEFORE FIXING IT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215f2f909cf6da420b030cb1e4bea8b2f1359295"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDU2Mzk2OnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/server/QueryIdFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzo1NzoyMFrOH4CPew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzo1NzoyMFrOH4CPew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUxOTAzNQ==", "bodyText": "Is already done? Should remove", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r528519035", "createdAt": "2020-11-23T07:57:20Z", "author": {"login": "FlashyReese"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/server/QueryIdFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.networking.server;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Tracks the current query id used for login query responses.\n+ */\n+interface QueryIdFactory {\n+\tstatic QueryIdFactory create() {\n+\t\t// todo incremental ids or randomized", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a06c8f96dcef64c5f2b0457da522e5b3d82e0a1"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3470, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}