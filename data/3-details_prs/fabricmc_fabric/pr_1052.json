{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NzU4MzE3", "number": 1052, "title": "Make BuiltInRegistries safe for Worldgen Registration during Mod Initialization", "bodyText": "Problem:\nThe static initializer of DynamicRegistryManager will copy all current entries from BuiltInRegistries into field_26733 and from then on only use entries from that copy instead of the source. In \"normal\" operation, DynamicRegistryManager will only be class-loaded after initialization of all Mods has completed, because Vanilla will create its first dynamic registry afterwards (loader version 0.9.2 moves the server-side entrypoint to make this be true on the dedicated server too).\nHowever. Another mod might still class-load DynamicRegistryManager during its own Mod initializer, which will lead to all subsequent mods Worldgen registration in BuiltInRegistries to be ignored. This PR aims to fix that by mixing into the static initializer of DynamicRegistryManager and setting up registry event listeners for all source-registries in BuiltInRegistries. The listeners propagate entries that are added to the builtin registries after the static initializer has run into the builtin dynamic registry manager.\nWhile it's possible for Mods to set up Events and register into field_26733 directly, this will a) leave BuiltInRegistries and field_26733 out of sync b) is more complex since field_26733 is private c) more important it will create a problem for layering since adding everything to BuiltInRegistries will create consistent raw-ids for use in Biome layering, while having a desync between BuiltInRegistries and field_26733 will make this a convoluted mess (if possible at all).\nWhen this is merged, it will be simple to recommend to mods to register their built-in Worldgen objects to BuiltInRegistries, like Vanilla does. To support modded Biomes in layering, I'll make another PR that also properly  synchronized BuiltInRegistries to the raw-id map in Biomes.BIOMES.", "createdAt": "2020-08-29T10:42:49Z", "url": "https://github.com/FabricMC/fabric/pull/1052", "merged": true, "mergeCommit": {"oid": "7490af87a10f24b2a5e4b43dbb34b5da5f34c430"}, "closed": true, "closedAt": "2020-09-18T17:10:48Z", "author": {"login": "shartte"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEYPAtgFqTQ3ODkwMjkxMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKDoQlAFqTQ5MTM2NzI4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4OTAyOTEz", "url": "https://github.com/FabricMC/fabric/pull/1052#pullrequestreview-478902913", "createdAt": "2020-08-31T19:44:22Z", "commit": {"oid": "7b861300bd7ea77e5ec28fa6fd54355d608a7532"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo0NDoyMlrOHKGyyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo0NDoyMlrOHKGyyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1OTExMg==", "bodyText": "Would prefer this having an actual name", "url": "https://github.com/FabricMC/fabric/pull/1052#discussion_r480359112", "createdAt": "2020-08-31T19:44:22Z", "author": {"login": "NeusFear"}, "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/AccessorRegistry.java", "diffHunk": "@@ -32,4 +34,10 @@\n \n \t@Accessor()\n \tRegistryKey<Registry<T>> getRegistryKey();\n+\n+\t/**\n+\t * Gets the lifecycle of a registry entry.\n+\t */\n+\t@Invoker\n+\tLifecycle callMethod_31139(T object);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b861300bd7ea77e5ec28fa6fd54355d608a7532"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "232f45f27b6f04b765328f3d14b0dad80571f13a", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/232f45f27b6f04b765328f3d14b0dad80571f13a", "committedDate": "2020-09-04T23:28:04Z", "message": "Adds a synchronisation for entries in BuiltInRegistries to the built-in DynamicRegistryManager, to a void class-loading DynamicRegistryManager during Mod initialization from messing up the Worldgen registrations of subsequently loaded mods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e98bf71fa873812ba87fa1b06ad5856e687f8fa0", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/e98bf71fa873812ba87fa1b06ad5856e687f8fa0", "committedDate": "2020-09-04T23:35:31Z", "message": "Changed to use updated Yarn mappings."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDA4Nzk0", "url": "https://github.com/FabricMC/fabric/pull/1052#pullrequestreview-483008794", "createdAt": "2020-09-04T23:38:07Z", "commit": {"oid": "e98bf71fa873812ba87fa1b06ad5856e687f8fa0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMzozODowN1rOHNdyIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMzozODowN1rOHNdyIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg4MTUwNg==", "bodyText": "Literally my only gripe is that this uses the word \"we\" I'd try to change it to something using 3rd person language", "url": "https://github.com/FabricMC/fabric/pull/1052#discussion_r483881506", "createdAt": "2020-09-04T23:38:07Z", "author": {"login": "Vaerian"}, "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/DynamicRegistrySync.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import com.mojang.serialization.Lifecycle;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.util.registry.BuiltinRegistries;\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+import net.minecraft.util.registry.MutableRegistry;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.api.event.registry.RegistryEntryAddedCallback;\n+import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n+\n+/**\n+ * Handles synchronising changes to the built-in registries into the dynamic registry manager's template manager,\n+ * in case it gets classloaded early.\n+ */\n+public class DynamicRegistrySync {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\n+\t/**\n+\t * Sets up a synchronisation that will propagate added entries to the given dynamic registry manager, which\n+\t * should be the <em>built-in</em> manager. It is never destroyed. We don't ever have to unregister", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98bf71fa873812ba87fa1b06ad5856e687f8fa0"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTUzNDU5", "url": "https://github.com/FabricMC/fabric/pull/1052#pullrequestreview-483153459", "createdAt": "2020-09-06T15:37:45Z", "commit": {"oid": "e98bf71fa873812ba87fa1b06ad5856e687f8fa0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTQ0NTk3", "url": "https://github.com/FabricMC/fabric/pull/1052#pullrequestreview-486944597", "createdAt": "2020-09-11T16:17:26Z", "commit": {"oid": "e98bf71fa873812ba87fa1b06ad5856e687f8fa0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjoxNzoyNlrOHQlSlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjoxNzoyNlrOHQlSlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1MDIzMQ==", "bodyText": "I'd probably throw assertion errors here and for the couple of exceptions below.", "url": "https://github.com/FabricMC/fabric/pull/1052#discussion_r487150231", "createdAt": "2020-09-11T16:17:26Z", "author": {"login": "i509VCB"}, "path": "fabric-registry-sync-v0/src/testmod/java/net/fabricmc/fabric/test/registry/sync/RegistrySyncTest.java", "diffHunk": "@@ -69,4 +77,53 @@ public void onInitialize() {\n \t\tValidate.isTrue(RegistryAttributeHolder.get(fabricRegistry).hasAttribute(RegistryAttribute.SYNCED));\n \t\tValidate.isTrue(!RegistryAttributeHolder.get(fabricRegistry).hasAttribute(RegistryAttribute.PERSISTED));\n \t}\n+\n+\t/**\n+\t * Tests that built-in registries are properly synchronized even after the dynamic reigstry managers have been\n+\t * class-loaded.\n+\t */\n+\tprivate void testBuiltInRegistrySync() {\n+\t\tSystem.out.println(\"Checking built-in registry sync...\");\n+\n+\t\t// Register a configured feature before force-loading the dynamic registry manager\n+\t\tConfiguredFeature<DefaultFeatureConfig, ?> cf1 = Feature.BASALT_PILLAR.configure(DefaultFeatureConfig.INSTANCE);\n+\t\tIdentifier f1Id = new Identifier(\"registry_sync\", \"f1\");\n+\t\tRegistry.register(BuiltinRegistries.CONFIGURED_FEATURE, f1Id, cf1);\n+\n+\t\t// Force-Initialize the dynamic registry manager, doing this in a Mod initializer would cause\n+\t\t// further registrations into BuiltInRegistries to _NOT_ propagate into DynamicRegistryManager.BUILTIN\n+\t\tcheckFeature(DynamicRegistryManager.create(), f1Id);\n+\n+\t\tConfiguredFeature<DefaultFeatureConfig, ?> cf2 = Feature.DESERT_WELL.configure(DefaultFeatureConfig.INSTANCE);\n+\t\tIdentifier f2Id = new Identifier(\"registry_sync\", \"f2\");\n+\t\tRegistry.register(BuiltinRegistries.CONFIGURED_FEATURE, f2Id, cf2);\n+\n+\t\tDynamicRegistryManager.Impl impl2 = DynamicRegistryManager.create();\n+\t\tcheckFeature(impl2, f1Id);\n+\t\tcheckFeature(impl2, f2Id);\n+\t}\n+\n+\tprivate void checkFeature(DynamicRegistryManager manager, Identifier id) {\n+\t\tMutableRegistry<ConfiguredFeature<?, ?>> registry = manager.get(Registry.CONFIGURED_FEATURE_WORLDGEN);\n+\n+\t\tConfiguredFeature<?, ?> builtInEntry = BuiltinRegistries.CONFIGURED_FEATURE.get(id);\n+\n+\t\tif (builtInEntry == null) {\n+\t\t\tthrow new IllegalStateException(\"Expected built-in entry to exist for: \" + id);\n+\t\t}\n+\n+\t\tConfiguredFeature<?, ?> entry = registry.get(id);\n+\n+\t\tif (entry == null) {\n+\t\t\tthrow new IllegalStateException(\"Expected dynamic registry to contain entry \" + id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98bf71fa873812ba87fa1b06ad5856e687f8fa0"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MjI0ODg3", "url": "https://github.com/FabricMC/fabric/pull/1052#pullrequestreview-487224887", "createdAt": "2020-09-12T11:53:27Z", "commit": {"oid": "e98bf71fa873812ba87fa1b06ad5856e687f8fa0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDU0Mzc2", "url": "https://github.com/FabricMC/fabric/pull/1052#pullrequestreview-491054376", "createdAt": "2020-09-17T23:28:20Z", "commit": {"oid": "e98bf71fa873812ba87fa1b06ad5856e687f8fa0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMzY3Mjg3", "url": "https://github.com/FabricMC/fabric/pull/1052#pullrequestreview-491367287", "createdAt": "2020-09-18T11:10:10Z", "commit": {"oid": "e98bf71fa873812ba87fa1b06ad5856e687f8fa0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3273, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}