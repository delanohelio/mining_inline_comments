{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMjQyMzcy", "number": 568, "title": "Entity attribute registry", "bodyText": "Fixes #551\n\n Test in production environment with an actual mod using the api", "createdAt": "2020-04-11T20:23:19Z", "url": "https://github.com/FabricMC/fabric/pull/568", "merged": true, "mergeCommit": {"oid": "5417aa6a291fb781a588807ea83c2ad037da6ab6"}, "closed": true, "closedAt": "2020-04-27T11:52:56Z", "author": {"login": "liach"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWrmxagH2gAyNDAyMjQyMzcyOjAwYmE3MzE0MzY3Y2U0MjZhZmJmZDI0ZTIzNzAwNDg5YTQ5YWExYzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbsKZagFqTQwMDc5NDc3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "00ba7314367ce426afbfd24e23700489a49aa1c9", "author": {"user": {"login": "liach", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/00ba7314367ce426afbfd24e23700489a49aa1c9", "committedDate": "2020-04-11T20:20:41Z", "message": "Entity attribute registry\n\nSigned-off-by: liach <liach@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99dc49192ca18b1006ef6f278a40326995ea8189", "author": {"user": {"login": "liach", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/99dc49192ca18b1006ef6f278a40326995ea8189", "committedDate": "2020-04-13T01:30:55Z", "message": "Update based on suggestions\n\nSigned-off-by: liach <liach@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "949576866f71df1a493b55764c08737538c499d7", "author": {"user": {"login": "liach", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/949576866f71df1a493b55764c08737538c499d7", "committedDate": "2020-04-14T05:01:38Z", "message": "Code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDQyMDM5", "url": "https://github.com/FabricMC/fabric/pull/568#pullrequestreview-396042039", "createdAt": "2020-04-19T17:23:30Z", "commit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzoyMzozMVrOGH6c-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzoyMzozMVrOGH6c-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1MDkwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t@Final\n          \n          \n            \n            \t@Mutable\n          \n          \n            \n            \t@Mutable\n          \n      \n    \n    \n  \n\n@Final is unnecessary and has no purpose when @Mutable is present.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410950905", "createdAt": "2020-04-19T17:23:31Z", "author": {"login": "Earthcomputer"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/entity/attribute/DefaultAttributeRegistryMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Mutable;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.entity.attribute.DefaultAttributeRegistry;\n+\n+import net.fabricmc.fabric.impl.entity.attribute.FabricEntityAttributeRegistry;\n+\n+@Mixin(DefaultAttributeRegistry.class)\n+public abstract class DefaultAttributeRegistryMixin {\n+\t@Shadow\n+\t@Final\n+\t@Mutable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDQzNzAz", "url": "https://github.com/FabricMC/fabric/pull/568#pullrequestreview-396043703", "createdAt": "2020-04-19T17:41:42Z", "commit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzo0MTo0MlrOGH6q3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzo0Mjo1MlrOGH6rkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1NDQ2Mg==", "bodyText": "I assume this will be bumped to 1.0.0 during the pre releases", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410954462", "createdAt": "2020-04-19T17:41:42Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/build.gradle", "diffHunk": "@@ -0,0 +1,2 @@\n+archivesBaseName = \"fabric-entity-attribute-api-v1\"\n+version = getSubprojectVersion(project, \"0.1.0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1NDY0Mw==", "bodyText": "It's 2020 @sfPlayer1 @modmuss50 we need to bump the license year.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410954643", "createdAt": "2020-04-19T17:42:52Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDQ1ODM0", "url": "https://github.com/FabricMC/fabric/pull/568#pullrequestreview-396045834", "createdAt": "2020-04-19T18:04:10Z", "commit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDUxMDY2", "url": "https://github.com/FabricMC/fabric/pull/568#pullrequestreview-396051066", "createdAt": "2020-04-19T19:02:33Z", "commit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTowMjozM1rOGH7izA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTowNjo1OFrOGH7mCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2ODc4MA==", "bodyText": "Maybe mention that one can check if a registration already exists using DefaultAttributeRegistry#hasDefinitionFor(EntityType).", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410968780", "createdAt": "2020-04-19T19:02:33Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/EntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import java.util.function.Supplier;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+\n+import net.fabricmc.fabric.impl.entity.attribute.FabricEntityAttributeRegistry;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * @see net.minecraft.entity.attribute.DefaultAttributeRegistry\n+ * @deprecated Vanilla snapshot feature, subject to vanilla change\n+ */\n+@Deprecated\n+public interface EntityAttributeRegistry {\n+\t/**\n+\t * The entity attribute registry provided by the Fabric API.\n+\t */\n+\tEntityAttributeRegistry INSTANCE = FabricEntityAttributeRegistry.INSTANCE;\n+\n+\t/**\n+\t * Registers a default attribute for a type of living entity.\n+\t *\n+\t * <p>It can be used in a fashion similar to this:\n+\t * <blockquote><pre>\n+\t * EntityAttributeRegistry.INSTANCE.register(type, LivingEntity::createLivingAttributes);\n+\t * </pre></blockquote>\n+\t * </p>\n+\t *\n+\t * <p>If a registration overrides another, a log message will be emitted./p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2OTU0MQ==", "bodyText": "I would just mention the Identifier of the entity in the log. Also EntityType does not have a toString method, so the log would show Overriding existing registration for entity type EntityType@2673ab (id \"randommobs:giant\") or something like that/", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410969541", "createdAt": "2020-04-19T19:06:36Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.entity.attribute.v1.EntityAttributeRegistry;\n+\n+public final class FabricEntityAttributeRegistry implements EntityAttributeRegistry {\n+\tpublic static final FabricEntityAttributeRegistry INSTANCE = new FabricEntityAttributeRegistry();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> pendingRegistrations = new HashMap<>();\n+\tprivate Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> registrations;\n+\n+\t@Override\n+\tpublic void register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier) {\n+\t\tif (this.registrations == null) {\n+\t\t\tif (this.pendingRegistrations.put(type, builderSupplier) != null) {\n+\t\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));\n+\t\t\t}\n+\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (this.registrations.put(type, builderSupplier.get().build()) != null) {\n+\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2OTYxMQ==", "bodyText": "Similarly to above mention of logging here.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410969611", "createdAt": "2020-04-19T19:06:58Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.entity.attribute.v1.EntityAttributeRegistry;\n+\n+public final class FabricEntityAttributeRegistry implements EntityAttributeRegistry {\n+\tpublic static final FabricEntityAttributeRegistry INSTANCE = new FabricEntityAttributeRegistry();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> pendingRegistrations = new HashMap<>();\n+\tprivate Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> registrations;\n+\n+\t@Override\n+\tpublic void register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier) {\n+\t\tif (this.registrations == null) {\n+\t\t\tif (this.pendingRegistrations.put(type, builderSupplier) != null) {\n+\t\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));\n+\t\t\t}\n+\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (this.registrations.put(type, builderSupplier.get().build()) != null) {\n+\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));\n+\t\t}\n+\t}\n+\n+\tpublic void initMap(Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> map) {\n+\t\tfor (Map.Entry<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> entry : this.pendingRegistrations.entrySet()) {\n+\t\t\tEntityType<? extends LivingEntity> type = entry.getKey();\n+\n+\t\t\tif (map.put(type, entry.getValue().get().build()) != null) {\n+\t\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f7e7ea2c67caaea071911a50ec344f1f225b20c", "author": {"user": {"login": "liach", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/1f7e7ea2c67caaea071911a50ec344f1f225b20c", "committedDate": "2020-04-19T19:18:00Z", "message": "i509vcb's nice suggestions\n\nSigned-off-by: liach <liach@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "336bfc52152f7f604f709ea7a8d1c3d6b6aa97da", "author": {"user": {"login": "liach", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/336bfc52152f7f604f709ea7a8d1c3d6b6aa97da", "committedDate": "2020-04-19T19:22:11Z", "message": "Missed this one\n\nSigned-off-by: liach <liach@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDUxMTY0", "url": "https://github.com/FabricMC/fabric/pull/568#pullrequestreview-396051164", "createdAt": "2020-04-19T19:03:21Z", "commit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTowMzoyMVrOGH7jgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTo1MTozOFrOGH8HDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2ODk2Mw==", "bodyText": "I like the way BlockRenderLayerMapImpl uses BiConsumer's to handle early and late registrations. Its basicly the same as what you have, migt just be a bit cleaner.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410968963", "createdAt": "2020-04-19T19:03:21Z", "author": {"login": "modmuss50"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.entity.attribute.v1.EntityAttributeRegistry;\n+\n+public final class FabricEntityAttributeRegistry implements EntityAttributeRegistry {\n+\tpublic static final FabricEntityAttributeRegistry INSTANCE = new FabricEntityAttributeRegistry();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> pendingRegistrations = new HashMap<>();\n+\tprivate Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> registrations;\n+\n+\t@Override\n+\tpublic void register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier) {\n+\t\tif (this.registrations == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2OTM0Ng==", "bodyText": "It may help cut down the number of times the same log is also printed", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410969346", "createdAt": "2020-04-19T19:05:37Z", "author": {"login": "modmuss50"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.entity.attribute.v1.EntityAttributeRegistry;\n+\n+public final class FabricEntityAttributeRegistry implements EntityAttributeRegistry {\n+\tpublic static final FabricEntityAttributeRegistry INSTANCE = new FabricEntityAttributeRegistry();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> pendingRegistrations = new HashMap<>();\n+\tprivate Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> registrations;\n+\n+\t@Override\n+\tpublic void register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier) {\n+\t\tif (this.registrations == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2ODk2Mw=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2OTM5NQ==", "bodyText": "should this be allowed? is there a reason a mod should do this?", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410969395", "createdAt": "2020-04-19T19:05:51Z", "author": {"login": "modmuss50"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.entity.attribute.v1.EntityAttributeRegistry;\n+\n+public final class FabricEntityAttributeRegistry implements EntityAttributeRegistry {\n+\tpublic static final FabricEntityAttributeRegistry INSTANCE = new FabricEntityAttributeRegistry();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> pendingRegistrations = new HashMap<>();\n+\tprivate Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> registrations;\n+\n+\t@Override\n+\tpublic void register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier) {\n+\t\tif (this.registrations == null) {\n+\t\t\tif (this.pendingRegistrations.put(type, builderSupplier) != null) {\n+\t\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3ODA2MQ==", "bodyText": "is there a reason behind the supplier?", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410978061", "createdAt": "2020-04-19T19:51:38Z", "author": {"login": "modmuss50"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/EntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import java.util.function.Supplier;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+\n+import net.fabricmc.fabric.impl.entity.attribute.FabricEntityAttributeRegistry;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * @see net.minecraft.entity.attribute.DefaultAttributeRegistry\n+ * @deprecated Vanilla snapshot feature, subject to vanilla change\n+ */\n+@Deprecated\n+public interface EntityAttributeRegistry {\n+\t/**\n+\t * The entity attribute registry provided by the Fabric API.\n+\t */\n+\tEntityAttributeRegistry INSTANCE = FabricEntityAttributeRegistry.INSTANCE;\n+\n+\t/**\n+\t * Registers a default attribute for a type of living entity.\n+\t *\n+\t * <p>It can be used in a fashion similar to this:\n+\t * <blockquote><pre>\n+\t * EntityAttributeRegistry.INSTANCE.register(type, LivingEntity::createLivingAttributes);\n+\t * </pre></blockquote>\n+\t * </p>\n+\t *\n+\t * <p>If a registration overrides another, a log message will be emitted./p>\n+\t *\n+\t * @param type            the entity type\n+\t * @param builderSupplier the supplier giving a builder that creates the default attribute\n+\t */\n+\tvoid register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d79fef326a2d43c066d66128f94edb370ed475a8", "author": {"user": {"login": "liach", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/d79fef326a2d43c066d66128f94edb370ed475a8", "committedDate": "2020-04-19T20:56:04Z", "message": "Remove unnecessary abstractions and always classload vanilla default attribute registry\n\nSigned-off-by: liach <liach@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc", "author": {"user": {"login": "liach", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/670a5c60ffc7af71a7c926901ebcb2921a50c2bc", "committedDate": "2020-04-19T20:59:28Z", "message": "Add missing license header\n\nSigned-off-by: liach <liach@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDY4NDcz", "url": "https://github.com/FabricMC/fabric/pull/568#pullrequestreview-396068473", "createdAt": "2020-04-19T22:20:06Z", "commit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjoyMDowN1rOGH9tbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjoyMDowN1rOGH9tbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNDI3MQ==", "bodyText": "This is looking a lot cleaner now. Is there ever a case that this would be ok? if not id just crash.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411004271", "createdAt": "2020-04-19T22:20:07Z", "author": {"login": "modmuss50"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/FabricDefaultAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.mixin.entity.attribute.DefaultAttributeRegistryAccessor;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * @see net.minecraft.entity.attribute.DefaultAttributeRegistry\n+ * @deprecated Vanilla snapshot feature, subject to vanilla change\n+ */\n+@Deprecated\n+public final class FabricDefaultAttributeRegistry {\n+\t/**\n+\t * Private logger, not exposed.\n+\t */\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\n+\t/**\n+\t * Registers a default attribute for a type of living entity.\n+\t *\n+\t * <p>It can be used in a fashion similar to this:\n+\t * <blockquote><pre>\n+\t * EntityAttributeRegistry.INSTANCE.register(type, LivingEntity.createLivingAttributes());\n+\t * </pre></blockquote>\n+\t * </p>\n+\t *\n+\t * <p>If a registration overrides another, a log message will be emitted. Existing registrations\n+\t * can be checked at {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#hasDefinitionFor(EntityType)}.</p>\n+\t *\n+\t * @param type    the entity type\n+\t * @param builder the builder that creates the default attribute\n+\t */\n+\tpublic static void register(EntityType<? extends LivingEntity> type, DefaultAttributeContainer.Builder builder) {\n+\t\tif (DefaultAttributeRegistryAccessor.getRegistry().put(type, builder.build()) != null) {\n+\t\t\tLOGGER.info(\"Overriding existing registration for entity type {}\", Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDY5MTAx", "url": "https://github.com/FabricMC/fabric/pull/568#pullrequestreview-396069101", "createdAt": "2020-04-19T22:27:00Z", "commit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjoyNzowMFrOGH9yKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjozMzowNVrOGH91zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNTQ4MA==", "bodyText": "Hmm, do we have a consistent message for this type of dummy error across the whole api? I see we seem to have multiple cases of this across the place.\nOne idea I had was an instance of an exception that we should throw in the fabric-base-api so we only refer to one common message we know.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411005480", "createdAt": "2020-04-19T22:27:00Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/entity/attribute/DefaultAttributeRegistryAccessor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.entity.attribute;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.entity.attribute.DefaultAttributeRegistry;\n+\n+@Mixin(DefaultAttributeRegistry.class)\n+public interface DefaultAttributeRegistryAccessor {\n+\t@Accessor(\"DEFAULT_ATTRIBUTE_REGISTRY\")\n+\tstatic Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> getRegistry() {\n+\t\tthrow new AssertionError(\"mixin dummy\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNjQxMg==", "bodyText": "Maybe complete this description message?", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411006412", "createdAt": "2020-04-19T22:33:05Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/src/main/resources/fabric.mod.json", "diffHunk": "@@ -0,0 +1,26 @@\n+{\n+  \"schemaVersion\": 1,\n+  \"id\": \"fabric-entity-attribute-api-v1\",\n+  \"name\": \"Fabric Entity Attribute API (v1)\",\n+  \"version\": \"${version}\",\n+  \"environment\": \"*\",\n+  \"license\": \"Apache-2.0\",\n+  \"icon\": \"assets/fabric-entity-attribute-api-v1/icon.png\",\n+  \"contact\": {\n+    \"homepage\": \"https://fabricmc.net\",\n+    \"irc\": \"irc://irc.esper.net:6667/fabric\",\n+    \"issues\": \"https://github.com/FabricMC/fabric/issues\",\n+    \"sources\": \"https://github.com/FabricMC/fabric\"\n+  },\n+  \"authors\": [\n+    \"FabricMC\"\n+  ],\n+  \"depends\": {\n+    \"fabricloader\": \">=0.8.0\",\n+    \"minecraft\": \">=1.16-alpha.20.15.a\"\n+  },\n+  \"description\": \"Hooks for registering .\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDcwMTE1", "url": "https://github.com/FabricMC/fabric/pull/568#pullrequestreview-396070115", "createdAt": "2020-04-19T22:37:50Z", "commit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29f708c75bda4392bb65969b3b48d3b630f0c9e7", "author": {"user": {"login": "liach", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/29f708c75bda4392bb65969b3b48d3b630f0c9e7", "committedDate": "2020-04-19T22:42:54Z", "message": "Explicitly note that this API is experimental\n\nSigned-off-by: liach <liach@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "892b3d794b0cfd6d6f1e1f71363d30f03460d532", "author": {"user": {"login": "liach", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/892b3d794b0cfd6d6f1e1f71363d30f03460d532", "committedDate": "2020-04-19T22:44:02Z", "message": "Debug only for overriding\n\nSigned-off-by: liach <liach@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDcyNzI0", "url": "https://github.com/FabricMC/fabric/pull/568#pullrequestreview-396072724", "createdAt": "2020-04-19T23:05:05Z", "commit": {"oid": "892b3d794b0cfd6d6f1e1f71363d30f03460d532"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzowNTowNVrOGH-J9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzoxMDowNlrOGH-Njg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxMTU3NA==", "bodyText": "I still want to use 1.0.0 everywhere, experimental doesn't quite mean the same as wip", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411011574", "createdAt": "2020-04-19T23:05:05Z", "author": {"login": "sfPlayer1"}, "path": "fabric-entity-attribute-api-v1/build.gradle", "diffHunk": "@@ -0,0 +1,2 @@\n+archivesBaseName = \"fabric-entity-attribute-api-v1\"\n+version = getSubprojectVersion(project, \"0.1.0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1NDQ2Mg=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxMTcxMQ==", "bodyText": "The message doesn't match the standard form, see #499", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411011711", "createdAt": "2020-04-19T23:05:47Z", "author": {"login": "sfPlayer1"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/FabricDefaultAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.mixin.entity.attribute.DefaultAttributeRegistryAccessor;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * <p>This API is <strong>experimental</strong> and subject to breaking changes without\n+ * prior deprecation or warning.</p>\n+ *\n+ * @see net.minecraft.entity.attribute.DefaultAttributeRegistry\n+ * @deprecated Vanilla snapshot feature, subject to vanilla change; experimental API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "892b3d794b0cfd6d6f1e1f71363d30f03460d532"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxMTc4Nw==", "bodyText": "This belongs in @deprecated", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411011787", "createdAt": "2020-04-19T23:06:13Z", "author": {"login": "sfPlayer1"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/FabricDefaultAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.mixin.entity.attribute.DefaultAttributeRegistryAccessor;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * <p>This API is <strong>experimental</strong> and subject to breaking changes without\n+ * prior deprecation or warning.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "892b3d794b0cfd6d6f1e1f71363d30f03460d532"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxMjQ5NA==", "bodyText": "No standard error, I'd throw UnsupportedOperationException(\"dummy method, impl to be swapped by mixin\") or similar.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411012494", "createdAt": "2020-04-19T23:10:06Z", "author": {"login": "sfPlayer1"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/entity/attribute/DefaultAttributeRegistryAccessor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.entity.attribute;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.entity.attribute.DefaultAttributeRegistry;\n+\n+@Mixin(DefaultAttributeRegistry.class)\n+public interface DefaultAttributeRegistryAccessor {\n+\t@Accessor(\"DEFAULT_ATTRIBUTE_REGISTRY\")\n+\tstatic Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> getRegistry() {\n+\t\tthrow new AssertionError(\"mixin dummy\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNTQ4MA=="}, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2687b3fc7b3ca984c360b1540ec8ecab65121dc2", "author": {"user": {"login": "liach", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/2687b3fc7b3ca984c360b1540ec8ecab65121dc2", "committedDate": "2020-04-19T23:22:54Z", "message": "Squash deprecation docs\n\nSigned-off-by: liach <liach@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e59ef8ac9fdf7010a62677aec477d9f2f6a9510f", "author": {"user": {"login": "liach", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/e59ef8ac9fdf7010a62677aec477d9f2f6a9510f", "committedDate": "2020-04-19T23:31:27Z", "message": "Move default attribute registry into object builders\n\nLooks fitting!\n\nSigned-off-by: liach <liach@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDc2NTQ0", "url": "https://github.com/FabricMC/fabric/pull/568#pullrequestreview-396076544", "createdAt": "2020-04-19T23:39:59Z", "commit": {"oid": "e59ef8ac9fdf7010a62677aec477d9f2f6a9510f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50fe0529159e078869e9060c28c19678f643c33a", "author": {"user": {"login": "liach", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/50fe0529159e078869e9060c28c19678f643c33a", "committedDate": "2020-04-19T23:46:21Z", "message": "Crosslinking in javadoc\n\nSigned-off-by: liach <liach@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNzk0Nzc5", "url": "https://github.com/FabricMC/fabric/pull/568#pullrequestreview-400794779", "createdAt": "2020-04-27T09:49:13Z", "commit": {"oid": "50fe0529159e078869e9060c28c19678f643c33a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3420, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}