{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NTEyMjIw", "number": 973, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDo1ODo1NlrOET15ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxNToyNVrOEaLulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjQxNDgyOnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererWithMode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDo1ODo1NlrOG5znNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDo1ODo1NlrOG5znNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2NzYzNg==", "bodyText": "I do not think this is a multiplier.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @param light           the color light multiplier at the rendering position\n          \n          \n            \n            \t * @param light           packed lightmap coordinates", "url": "https://github.com/FabricMC/fabric/pull/973#discussion_r463267636", "createdAt": "2020-07-30T20:58:56Z", "author": {"login": "shartte"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererWithMode.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.model.json.ModelTransformation;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+/**\n+ * Builtin item renderers render items with custom code.\n+ * They allow using non-model rendering, such as BERs, for items.\n+ *\n+ * <p>An item with a builtin renderer must have a model extending {@code minecraft:builtin/entity}.\n+ * The renderers are registered with {@link BuiltinItemRendererRegistry#register}.\n+ */\n+public interface BuiltinItemRendererWithMode {\n+\t/**\n+\t * Renders an item stack.\n+\t *\n+\t * @param stack           the rendered item stack\n+\t * @param mode            the model transformation mode\n+\t * @param matrices        the matrix stack\n+\t * @param vertexConsumers the vertex consumer provider\n+\t * @param light           the color light multiplier at the rendering position", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "783b5d72141a3b6305dff9df5daa4d2a2ba4a6b9"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTUzMjExOnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzo0NjozMlrOG6Q0Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxOToxMjo0NlrOG6fxdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc0NjEzMQ==", "bodyText": "can just convert this to a lambda imo since that is not performance-wise worse", "url": "https://github.com/FabricMC/fabric/pull/973#discussion_r463746131", "createdAt": "2020-07-31T17:46:32Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -50,7 +59,23 @@ public void register(Item item, BuiltinItemRenderer renderer) {\n \t}\n \n \t/* @Nullable */\n-\tpublic static BuiltinItemRenderer getRenderer(Item item) {\n+\tpublic static DynamicItemRenderer getRenderer(Item item) {\n \t\treturn RENDERERS.get(item);\n \t}\n+\n+\t/**\n+\t * An implementation of the new renderer that forwards calls to an old renderer.\n+\t */\n+\tstatic class OldRendererImpl implements DynamicItemRenderer {\n+\t\tprivate final BuiltinItemRenderer renderer;\n+\n+\t\tprivate OldRendererImpl(BuiltinItemRenderer renderer) {\n+\t\t\tthis.renderer = renderer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2bd7d3c6acee293d867f3ba3e323be99161f05"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5MTE1Ng==", "bodyText": "Just messy as a Lambda imo. But I could", "url": "https://github.com/FabricMC/fabric/pull/973#discussion_r463991156", "createdAt": "2020-08-01T19:12:46Z", "author": {"login": "i509VCB"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -50,7 +59,23 @@ public void register(Item item, BuiltinItemRenderer renderer) {\n \t}\n \n \t/* @Nullable */\n-\tpublic static BuiltinItemRenderer getRenderer(Item item) {\n+\tpublic static DynamicItemRenderer getRenderer(Item item) {\n \t\treturn RENDERERS.get(item);\n \t}\n+\n+\t/**\n+\t * An implementation of the new renderer that forwards calls to an old renderer.\n+\t */\n+\tstatic class OldRendererImpl implements DynamicItemRenderer {\n+\t\tprivate final BuiltinItemRenderer renderer;\n+\n+\t\tprivate OldRendererImpl(BuiltinItemRenderer renderer) {\n+\t\t\tthis.renderer = renderer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc0NjEzMQ=="}, "originalCommit": {"oid": "ea2bd7d3c6acee293d867f3ba3e323be99161f05"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODQwMTY2OnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxOTo1MjowOFrOG6ncVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxOTo1MjowOFrOG6ncVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExNjgyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tthis.register(item, new OldRendererImpl(Objects.requireNonNull(renderer, \"renderer is null\")));\n          \n          \n            \n            \t\tObjects.requireNonNull(renderer, \"renderer is null\")\n          \n          \n            \n            \t\tthis.register(item, (stack, mode, matrices, vertexConsumers, light, overlay) -> renderer.render(stack, matrices, vertexConsumers, light, overlay));\n          \n      \n    \n    \n  \n\nAnd remove that old renderer class", "url": "https://github.com/FabricMC/fabric/pull/973#discussion_r464116822", "createdAt": "2020-08-02T19:52:08Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -32,13 +36,18 @@\n public final class BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n \tpublic static final BuiltinItemRendererRegistryImpl INSTANCE = new BuiltinItemRendererRegistryImpl();\n \n-\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\tprivate static final Map<Item, DynamicItemRenderer> RENDERERS = new HashMap<>();\n \n \tprivate BuiltinItemRendererRegistryImpl() {\n \t}\n \n \t@Override\n \tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tthis.register(item, new OldRendererImpl(Objects.requireNonNull(renderer, \"renderer is null\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2bd7d3c6acee293d867f3ba3e323be99161f05"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjUyNTExOnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTowMTozNVrOG_lZyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzoxMTowMFrOG_qslA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyNjI4MQ==", "bodyText": "I think this would be better as a top-level type like the old interface.", "url": "https://github.com/FabricMC/fabric/pull/973#discussion_r469326281", "createdAt": "2020-08-12T15:01:35Z", "author": {"login": "Juuxel"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java", "diffHunk": "@@ -42,6 +47,43 @@\n \t * @param renderer the renderer\n \t * @throws IllegalArgumentException if the item already has a registered renderer\n \t * @throws NullPointerException if either the item or the renderer is null\n+\t * @deprecated Please use {@link BuiltinItemRendererRegistry#register(Item, DynamicItemRenderer)} instead.\n \t */\n+\t@Deprecated\n \tvoid register(Item item, BuiltinItemRenderer renderer);\n+\n+\t/**\n+\t * Registers the renderer for the item.\n+\t *\n+\t * <p>Note that the item's JSON model must also extend {@code minecraft:builtin/entity}.\n+\t *\n+\t * @param item     the item\n+\t * @param renderer the renderer\n+\t * @throws IllegalArgumentException if the item already has a registered renderer\n+\t * @throws NullPointerException if either the item or the renderer is null\n+\t */\n+\tvoid register(ItemConvertible item, DynamicItemRenderer renderer);\n+\n+\t/**\n+\t * Dynamic item renderers render items with custom code.\n+\t * They allow using non-model rendering, such as BERs, for items.\n+\t *\n+\t * <p>An item with a dynamic renderer must have a model extending {@code minecraft:builtin/entity}.\n+\t * The renderers are registered with {@link BuiltinItemRendererRegistry#register(Item, DynamicItemRenderer)}.\n+\t */\n+\t@FunctionalInterface\n+\t@Environment(EnvType.CLIENT)\n+\tinterface DynamicItemRenderer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d614115edb54f48020dbcfc2e979247ead3a1ebc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxMzAxMg==", "bodyText": "Given this name, it's better left at top level indeed. \ud83d\udc4d", "url": "https://github.com/FabricMC/fabric/pull/973#discussion_r469413012", "createdAt": "2020-08-12T17:11:00Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java", "diffHunk": "@@ -42,6 +47,43 @@\n \t * @param renderer the renderer\n \t * @throws IllegalArgumentException if the item already has a registered renderer\n \t * @throws NullPointerException if either the item or the renderer is null\n+\t * @deprecated Please use {@link BuiltinItemRendererRegistry#register(Item, DynamicItemRenderer)} instead.\n \t */\n+\t@Deprecated\n \tvoid register(Item item, BuiltinItemRenderer renderer);\n+\n+\t/**\n+\t * Registers the renderer for the item.\n+\t *\n+\t * <p>Note that the item's JSON model must also extend {@code minecraft:builtin/entity}.\n+\t *\n+\t * @param item     the item\n+\t * @param renderer the renderer\n+\t * @throws IllegalArgumentException if the item already has a registered renderer\n+\t * @throws NullPointerException if either the item or the renderer is null\n+\t */\n+\tvoid register(ItemConvertible item, DynamicItemRenderer renderer);\n+\n+\t/**\n+\t * Dynamic item renderers render items with custom code.\n+\t * They allow using non-model rendering, such as BERs, for items.\n+\t *\n+\t * <p>An item with a dynamic renderer must have a model extending {@code minecraft:builtin/entity}.\n+\t * The renderers are registered with {@link BuiltinItemRendererRegistry#register(Item, DynamicItemRenderer)}.\n+\t */\n+\t@FunctionalInterface\n+\t@Environment(EnvType.CLIENT)\n+\tinterface DynamicItemRenderer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyNjI4MQ=="}, "originalCommit": {"oid": "d614115edb54f48020dbcfc2e979247ead3a1ebc"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDAzNTE2OnYy", "diffSide": "RIGHT", "path": "fabric-loot-tables-v1/src/main/java/net/fabricmc/fabric/api/loot/v1/FabricLootSupplierBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNDoxNTowN1rOHBPZEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo0NzowNlrOHMzTaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2MjgwMg==", "bodyText": "So a story on this one, apparently a symbol was there that prevents gradle from building on my arch setup, so the whitespace had to change", "url": "https://github.com/FabricMC/fabric/pull/973#discussion_r471062802", "createdAt": "2020-08-16T04:15:07Z", "author": {"login": "i509VCB"}, "path": "fabric-loot-tables-v1/src/main/java/net/fabricmc/fabric/api/loot/v1/FabricLootSupplierBuilder.java", "diffHunk": "@@ -81,7 +81,7 @@ public FabricLootSupplierBuilder copyFrom(LootTable supplier) {\n \t}\n \n \t/**\n-\t * Copies the pools and functions of the\u00a0{@code supplier} to this builder.\n+\t * Copies the pools and functions of the {@code supplier} to this builder.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd722306337139bfa7470fbe262e550434f2b635"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4MTA3MQ==", "bodyText": "Ah, I've probably made an accidental NBSP there (iirc that's my code?)", "url": "https://github.com/FabricMC/fabric/pull/973#discussion_r471081071", "createdAt": "2020-08-16T08:02:42Z", "author": {"login": "Juuxel"}, "path": "fabric-loot-tables-v1/src/main/java/net/fabricmc/fabric/api/loot/v1/FabricLootSupplierBuilder.java", "diffHunk": "@@ -81,7 +81,7 @@ public FabricLootSupplierBuilder copyFrom(LootTable supplier) {\n \t}\n \n \t/**\n-\t * Copies the pools and functions of the\u00a0{@code supplier} to this builder.\n+\t * Copies the pools and functions of the {@code supplier} to this builder.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2MjgwMg=="}, "originalCommit": {"oid": "bd722306337139bfa7470fbe262e550434f2b635"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4NTUxMw==", "bodyText": "Can checksyle fail on these? idk", "url": "https://github.com/FabricMC/fabric/pull/973#discussion_r483185513", "createdAt": "2020-09-03T18:47:06Z", "author": {"login": "modmuss50"}, "path": "fabric-loot-tables-v1/src/main/java/net/fabricmc/fabric/api/loot/v1/FabricLootSupplierBuilder.java", "diffHunk": "@@ -81,7 +81,7 @@ public FabricLootSupplierBuilder copyFrom(LootTable supplier) {\n \t}\n \n \t/**\n-\t * Copies the pools and functions of the\u00a0{@code supplier} to this builder.\n+\t * Copies the pools and functions of the {@code supplier} to this builder.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2MjgwMg=="}, "originalCommit": {"oid": "bd722306337139bfa7470fbe262e550434f2b635"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODkwNDUwOnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxNTowN1rOHDcsAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo0Nzo1M1rOHE0N5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3Nzc5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (RENDERERS.containsKey(item.asItem())) {\n          \n          \n            \n            \t\tif (RENDERERS.put(item.asItem(), renderer) != null) {", "url": "https://github.com/FabricMC/fabric/pull/973#discussion_r473377795", "createdAt": "2020-08-19T22:15:07Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -56,8 +51,21 @@ public void register(ItemConvertible item, BuiltinItemRenderer renderer) {\n \t\tregister(item.asItem(), renderer);\n \t}\n \n+\t@Override\n+\tpublic void register(ItemConvertible item, DynamicItemRenderer renderer) {\n+\t\tObjects.requireNonNull(item, \"item is null\");\n+\t\tObjects.requireNonNull(item.asItem(), \"item is null\");\n+\t\tObjects.requireNonNull(renderer, \"renderer is null\");\n+\n+\t\tif (RENDERERS.containsKey(item.asItem())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e02f8012415122e31213ac790a482002ce5f6e3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2MDg1Ng==", "bodyText": "This will still overwrite the existing entry if the modder decides to catch any exceptions produced by this method, which is incorrect behaviour IMO. If that exception is thrown, there should be no side effects to the registry itself.", "url": "https://github.com/FabricMC/fabric/pull/973#discussion_r474060856", "createdAt": "2020-08-20T15:14:28Z", "author": {"login": "Juuxel"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -56,8 +51,21 @@ public void register(ItemConvertible item, BuiltinItemRenderer renderer) {\n \t\tregister(item.asItem(), renderer);\n \t}\n \n+\t@Override\n+\tpublic void register(ItemConvertible item, DynamicItemRenderer renderer) {\n+\t\tObjects.requireNonNull(item, \"item is null\");\n+\t\tObjects.requireNonNull(item.asItem(), \"item is null\");\n+\t\tObjects.requireNonNull(renderer, \"renderer is null\");\n+\n+\t\tif (RENDERERS.containsKey(item.asItem())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3Nzc5NQ=="}, "originalCommit": {"oid": "5e02f8012415122e31213ac790a482002ce5f6e3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ5MTA1Mg==", "bodyText": "then putIfAbsent", "url": "https://github.com/FabricMC/fabric/pull/973#discussion_r474491052", "createdAt": "2020-08-21T07:55:13Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -56,8 +51,21 @@ public void register(ItemConvertible item, BuiltinItemRenderer renderer) {\n \t\tregister(item.asItem(), renderer);\n \t}\n \n+\t@Override\n+\tpublic void register(ItemConvertible item, DynamicItemRenderer renderer) {\n+\t\tObjects.requireNonNull(item, \"item is null\");\n+\t\tObjects.requireNonNull(item.asItem(), \"item is null\");\n+\t\tObjects.requireNonNull(renderer, \"renderer is null\");\n+\n+\t\tif (RENDERERS.containsKey(item.asItem())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3Nzc5NQ=="}, "originalCommit": {"oid": "5e02f8012415122e31213ac790a482002ce5f6e3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMTg3Ng==", "bodyText": "Will do that in a bit", "url": "https://github.com/FabricMC/fabric/pull/973#discussion_r474811876", "createdAt": "2020-08-21T16:47:53Z", "author": {"login": "i509VCB"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -56,8 +51,21 @@ public void register(ItemConvertible item, BuiltinItemRenderer renderer) {\n \t\tregister(item.asItem(), renderer);\n \t}\n \n+\t@Override\n+\tpublic void register(ItemConvertible item, DynamicItemRenderer renderer) {\n+\t\tObjects.requireNonNull(item, \"item is null\");\n+\t\tObjects.requireNonNull(item.asItem(), \"item is null\");\n+\t\tObjects.requireNonNull(renderer, \"renderer is null\");\n+\n+\t\tif (RENDERERS.containsKey(item.asItem())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3Nzc5NQ=="}, "originalCommit": {"oid": "5e02f8012415122e31213ac790a482002ce5f6e3"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODkwNTgzOnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxNToyNVrOHDcs2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxNToyNVrOHDcs2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3ODAwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \t\tRENDERERS.put(item.asItem(), renderer);", "url": "https://github.com/FabricMC/fabric/pull/973#discussion_r473378009", "createdAt": "2020-08-19T22:15:25Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -56,8 +51,21 @@ public void register(ItemConvertible item, BuiltinItemRenderer renderer) {\n \t\tregister(item.asItem(), renderer);\n \t}\n \n+\t@Override\n+\tpublic void register(ItemConvertible item, DynamicItemRenderer renderer) {\n+\t\tObjects.requireNonNull(item, \"item is null\");\n+\t\tObjects.requireNonNull(item.asItem(), \"item is null\");\n+\t\tObjects.requireNonNull(renderer, \"renderer is null\");\n+\n+\t\tif (RENDERERS.containsKey(item.asItem())) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + Registry.ITEM.getId(item.asItem()) + \" already has a builtin renderer!\");\n+\t\t}\n+\n+\t\tRENDERERS.put(item.asItem(), renderer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e02f8012415122e31213ac790a482002ce5f6e3"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3422, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}