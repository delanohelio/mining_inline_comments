{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NzI2MzIw", "number": 615, "title": "migrate to fabric-keybindings-v1 and remove builder", "bodyText": "This is an edited clone of #244 as that seemed dead and I want to push stuff going faster.\n\nFixed checkstyle issues\nMigrated to fabric-keybindings-v1\nAdded a test mod\nAdded FabricKeyBinding#getBoundKeyOf for getting vanilla bound keys with ease\nRenamed registered to automaticallyRegister as that is more of a better name\nAdded a couple of Objects.requireNonNull validations", "createdAt": "2020-05-10T14:11:05Z", "url": "https://github.com/FabricMC/fabric/pull/615", "merged": true, "mergeCommit": {"oid": "2af3af9102e1f0b609499accccf5c73736c15b94"}, "closed": true, "closedAt": "2020-06-12T10:18:18Z", "author": {"login": "shedaniel"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcf7p3sAH2gAyNDE1NzI2MzIwOmFjMDQ5OTU1ZWU3NTlkZTI4NzhmMTdkNGZmZTZlNmVmZTM5ZTg3Yzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcogQJTgH2gAyNDE1NzI2MzIwOmMyNmJlZGJhYTg4NDQyNWNhODBhZjAxNGY0ZDcwYjcxODU3MmM1Yjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ac049955ee759de2878f17d4ffe6e6efe39e87c7", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ac049955ee759de2878f17d4ffe6e6efe39e87c7", "committedDate": "2020-05-10T14:07:52Z", "message": "Edited Clone of #244\n- Fixed checkstyle issues\n- Migrated to fabric-keybindings-v1\n- Removed sticky keybindings from #244 as it sounds useless and you can just around it by simply adding that functionality yourself, I might add it back if someone can tell me the advantages of sticky keys except bloat\n- Added a test mod\n- Added FabricKeyBinding#getBoundKeyOf for getting vanilla bound keys with ease\n- Renamed `registered` to `automaticallyRegister` as that is more of a better name\n- Added a couple Objects.requireNonNull validations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2708863a9199ff14fa7afc0855f645097c87b63a", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/2708863a9199ff14fa7afc0855f645097c87b63a", "committedDate": "2020-05-10T14:20:33Z", "message": "Add back StickyFabricKeyBinding as it is in vanilla, did not notice."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f05ca5277d2288d98c39c5946a78cef266b9bea0", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/f05ca5277d2288d98c39c5946a78cef266b9bea0", "committedDate": "2020-05-10T14:19:34Z", "message": "Add back StickyFabricKeyBinding as it is in vanilla, did not notice."}, "afterCommit": {"oid": "2708863a9199ff14fa7afc0855f645097c87b63a", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/2708863a9199ff14fa7afc0855f645097c87b63a", "committedDate": "2020-05-10T14:20:33Z", "message": "Add back StickyFabricKeyBinding as it is in vanilla, did not notice."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba96129d19b92f64d76e973bc057a5736b73e32e", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ba96129d19b92f64d76e973bc057a5736b73e32e", "committedDate": "2020-05-10T14:23:21Z", "message": "Remove extra \"key.\""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzYzNzE0", "url": "https://github.com/FabricMC/fabric/pull/615#pullrequestreview-408763714", "createdAt": "2020-05-10T17:10:32Z", "commit": {"oid": "ba96129d19b92f64d76e973bc057a5736b73e32e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzoxMDozMlrOGTF4HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzoxNjo0N1rOGTF69g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3MjQxMw==", "bodyText": "1.0.0", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r422672413", "createdAt": "2020-05-10T17:10:32Z", "author": {"login": "i509VCB"}, "path": "fabric-keybindings-v1/build.gradle", "diffHunk": "@@ -0,0 +1,7 @@\n+archivesBaseName = \"fabric-keybindings-v1\"\n+version = getSubprojectVersion(project, \"0.1.0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba96129d19b92f64d76e973bc057a5736b73e32e"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3MzE0Mg==", "bodyText": "Hmm, maybe instead of this, we have a build and a buildAndRegister method", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r422673142", "createdAt": "2020-05-10T17:16:47Z", "author": {"login": "i509VCB"}, "path": "fabric-keybindings-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {\n+\t\treturn getBoundKeyOf(this);\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @param keyBinding the keybinding\n+\t * @return configured KeyCode\n+\t */\n+\tpublic static InputUtil.KeyCode getBoundKeyOf(KeyBinding keyBinding) {\n+\t\treturn ((KeyCodeAccessor) keyBinding).getKeyCode();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int UNASSIGNED = InputUtil.UNKNOWN_KEYCODE.getKeyCode();\n+\n+\t\tprivate InputUtil.Type type = InputUtil.Type.KEYSYM;\n+\t\tprivate Identifier id = null;\n+\t\tprivate String translationKey;\n+\t\tprivate boolean unassigned = false;\n+\t\tprivate boolean automaticallyRegister = false;\n+\t\tprivate BooleanSupplier toggleFlagSupplier = null;\n+\t\tprivate int code = UNASSIGNED;\n+\t\tprivate String category = KeyCategories.MISC;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key binding id and translation key for this builder.\n+\t\t * <br>\n+\t\t * Key bindings will be assigned a translation key of the format \"key.{namespace}.{path}\"\n+\t\t *\n+\t\t * @param id Unique identifier for the bound key.\n+\t\t */\n+\t\tpublic Builder id(Identifier id) {\n+\t\t\tthis.id = Objects.requireNonNull(id, \"Keybinding's id can not be null!\");\n+\t\t\tthis.translationKey = String.format(\"key.%s.%s\", id.getNamespace(), id.getPath());\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the translation key for the key's category. {@link KeyCategories} for\n+\t\t * all possible values, vanilla values.\n+\t\t *\n+\t\t * @param category The category under which key bindings created by this builder will be grouped.\n+\t\t */\n+\t\tpublic Builder category(String category) {\n+\t\t\tthis.category = Objects.requireNonNull(category, \"Keybinding's category can not be null!\");\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the default key to be used for the key binding created using this builder.\n+\t\t *\n+\t\t * @param keyCode The default key code. Must be a valid key. May not be -1.\n+\t\t */\n+\t\tpublic Builder code(int keyCode) {\n+\t\t\tPreconditions.checkState(keyCode != UNASSIGNED, \"UNASSIGNED is not a valid key code.\");\n+\t\t\tthis.code = keyCode;\n+\t\t\tthis.unassigned = false;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Indicates to this builder that keybindings built through it are intended to be unbound.\n+\t\t */\n+\t\tpublic Builder unassigned() {\n+\t\t\tthis.code = UNASSIGNED;\n+\t\t\tthis.unassigned = true;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets this builder to create sticky keybindings that will toggle their state when pressed.\n+\t\t */\n+\t\tpublic Builder sticky() {\n+\t\t\treturn sticky(() -> true);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets a sticking action to be used by the constructed key binding which can be used to switch between\n+\t\t * a sticky (toggle) and a regular key binding.\n+\t\t *\n+\t\t * @param toggleFlagSupplier A getter function to determine whether to toggle or not. True for toggling behaviour, false otherwise.\n+\t\t */\n+\t\tpublic Builder sticky(BooleanSupplier toggleFlagSupplier) {\n+\t\t\tthis.toggleFlagSupplier = toggleFlagSupplier;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets this builder to auto-register any key bindings created using it.\n+\t\t *\n+\t\t * <p>Mods who intend to register their own key bindings manually may choose not to use this.</p>\n+\t\t */\n+\t\tpublic Builder automaticallyRegister() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba96129d19b92f64d76e973bc057a5736b73e32e"}, "originalPosition": 178}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c27abb4c19b93a20b7ee676cc9505ad300e040cf", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/c27abb4c19b93a20b7ee676cc9505ad300e040cf", "committedDate": "2020-05-11T01:12:24Z", "message": "Bump to 1.0.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1", "committedDate": "2020-05-11T01:15:05Z", "message": "build().register()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDg3MDE2", "url": "https://github.com/FabricMC/fabric/pull/615#pullrequestreview-409487016", "createdAt": "2020-05-11T20:00:35Z", "commit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowMDozNlrOGTrRFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowMjozNlrOGTrU-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTAxNA==", "bodyText": "Can probably remove this override?", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r423285014", "createdAt": "2020-05-11T20:00:36Z", "author": {"login": "liach"}, "path": "fabric-keybindings-v0/src/main/java/net/fabricmc/fabric/api/client/keybinding/FabricKeyBinding.java", "diffHunk": "@@ -20,27 +20,31 @@\n import net.minecraft.client.util.InputUtil;\n import net.minecraft.util.Identifier;\n \n-import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n-\n /**\n  * Expanded version of {@link KeyBinding} for use by Fabric mods.\n  *\n  * <p>*ALL* instantiated FabricKeyBindings should be registered in\n- * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!</p>\n+ *\n+ * @deprecated Please migrate to v1. Please use {@link net.fabricmc.fabric.api.client.keybinding.v1.FabricKeyBinding} instead.\n  */\n-public class FabricKeyBinding extends KeyBinding {\n+@Deprecated\n+public class FabricKeyBinding extends net.fabricmc.fabric.api.client.keybinding.v1.FabricKeyBinding {\n \tprotected FabricKeyBinding(Identifier id, InputUtil.Type type, int code, String category) {\n-\t\tsuper(\"key.\" + id.toString().replace(':', '.'), type, code, category);\n+\t\tsuper(id, String.format(\"key.%s.%s\", id.getNamespace(), id.getPath()), type, code, category);\n \t}\n \n \t/**\n \t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n \t * @return configured KeyCode\n \t */\n+\t@Override\n \tpublic InputUtil.KeyCode getBoundKey() {\n-\t\treturn ((KeyCodeAccessor) this).getKeyCode();\n+\t\treturn super.getBoundKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTI5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic Identifier getIdentifier() {\n          \n          \n            \n            \tpublic Identifier getId() {", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r423285291", "createdAt": "2020-05-11T20:01:05Z", "author": {"login": "liach"}, "path": "fabric-keybindings-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NjAwOQ==", "bodyText": "I personally disagree with the addition of this method. Imo error-prone and violating oop design.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r423286009", "createdAt": "2020-05-11T20:02:36Z", "author": {"login": "liach"}, "path": "fabric-keybindings-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Registers the keybinding with {@link KeyBindingRegistry#register(FabricKeyBinding)}.\n+\t *\n+\t * @return self\n+\t */\n+\tpublic <T extends FabricKeyBinding> T register() {\n+\t\tKeyBindingRegistry.INSTANCE.register(this);\n+\t\treturn (T) this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8abe49276d8eb9db0bdea489a698e0f45e8bee0e", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/8abe49276d8eb9db0bdea489a698e0f45e8bee0e", "committedDate": "2020-05-12T10:26:49Z", "message": "Remove `register()`\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f7f80b043845aa1eba7bb3bc758fce7cd27af96", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/0f7f80b043845aa1eba7bb3bc758fce7cd27af96", "committedDate": "2020-05-12T10:44:47Z", "message": "Fix test\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzgyMTY4", "url": "https://github.com/FabricMC/fabric/pull/615#pullrequestreview-410382168", "createdAt": "2020-05-12T20:06:19Z", "commit": {"oid": "0f7f80b043845aa1eba7bb3bc758fce7cd27af96"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea69a720b23f43ff81916f5457e03d318b480ca2", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ea69a720b23f43ff81916f5457e03d318b480ca2", "committedDate": "2020-05-13T01:40:09Z", "message": "Rename module\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/cacfb980e96ad4cdf31d74cbe6882dc9a28753b4", "committedDate": "2020-05-13T01:45:19Z", "message": "Fix checkstyle violation\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjQyMzc1", "url": "https://github.com/FabricMC/fabric/pull/615#pullrequestreview-416642375", "createdAt": "2020-05-22T04:36:30Z", "commit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDozNjozMVrOGZKaWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo0OToyMlrOGZKj9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODE2OA==", "bodyText": "Is there a specific reason to reuse the builder instance? It may be nicer to supply the required parameter (id) on creation, it is only one after all and recreating the builder doesn't look too bad to me.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429038168", "createdAt": "2020-05-22T04:36:31Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODI2Ng==", "bodyText": "final?", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429038266", "createdAt": "2020-05-22T04:37:02Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODQyNw==", "bodyText": "This method should be first or last, depending on what we do elsewhere", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429038427", "createdAt": "2020-05-22T04:37:42Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODgxMQ==", "bodyText": "Wouldn't a .buildAndRegister be better than exposing and requiring the registration separately? Is there any good reason not to want to register directly?", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429038811", "createdAt": "2020-05-22T04:40:01Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODk4Mg==", "bodyText": "Maybe something like \"... aren't assigned to any key by default\" to more clearly state the effect?", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429038982", "createdAt": "2020-05-22T04:40:59Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {\n+\t\treturn getBoundKeyOf(this);\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @param keyBinding the keybinding\n+\t * @return configured KeyCode\n+\t */\n+\tpublic static InputUtil.KeyCode getBoundKeyOf(KeyBinding keyBinding) {\n+\t\treturn ((KeyCodeAccessor) keyBinding).getKeyCode();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int UNASSIGNED = InputUtil.UNKNOWN_KEYCODE.getKeyCode();\n+\n+\t\tprivate InputUtil.Type type = InputUtil.Type.KEYSYM;\n+\t\tprivate Identifier id = null;\n+\t\tprivate String translationKey;\n+\t\tprivate boolean unassigned = false;\n+\t\tprivate BooleanSupplier toggleFlagSupplier = null;\n+\t\tprivate int code = UNASSIGNED;\n+\t\tprivate String category = KeyCategories.MISC;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key binding id and translation key for this builder.\n+\t\t * <br>\n+\t\t * Key bindings will be assigned a translation key of the format \"key.{namespace}.{path}\"\n+\t\t *\n+\t\t * @param id Unique identifier for the bound key.\n+\t\t */\n+\t\tpublic Builder id(Identifier id) {\n+\t\t\tthis.id = Objects.requireNonNull(id, \"Keybinding's id can not be null!\");\n+\t\t\tthis.translationKey = String.format(\"key.%s.%s\", id.getNamespace(), id.getPath());\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the translation key for the key's category. {@link KeyCategories} for\n+\t\t * all possible values, vanilla values.\n+\t\t *\n+\t\t * @param category The category under which key bindings created by this builder will be grouped.\n+\t\t */\n+\t\tpublic Builder category(String category) {\n+\t\t\tthis.category = Objects.requireNonNull(category, \"Keybinding's category can not be null!\");\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the default key to be used for the key binding created using this builder.\n+\t\t *\n+\t\t * @param keyCode The default key code. Must be a valid key. May not be -1.\n+\t\t */\n+\t\tpublic Builder code(int keyCode) {\n+\t\t\tPreconditions.checkState(keyCode != UNASSIGNED, \"UNASSIGNED is not a valid key code.\");\n+\t\t\tthis.code = keyCode;\n+\t\t\tthis.unassigned = false;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Indicates to this builder that keybindings built through it are intended to be unbound.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzOTUzNg==", "bodyText": "Is the any way we can verify the integer more? Maybe check against some reasonable lower and upper bound?", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429039536", "createdAt": "2020-05-22T04:43:56Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {\n+\t\treturn getBoundKeyOf(this);\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @param keyBinding the keybinding\n+\t * @return configured KeyCode\n+\t */\n+\tpublic static InputUtil.KeyCode getBoundKeyOf(KeyBinding keyBinding) {\n+\t\treturn ((KeyCodeAccessor) keyBinding).getKeyCode();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int UNASSIGNED = InputUtil.UNKNOWN_KEYCODE.getKeyCode();\n+\n+\t\tprivate InputUtil.Type type = InputUtil.Type.KEYSYM;\n+\t\tprivate Identifier id = null;\n+\t\tprivate String translationKey;\n+\t\tprivate boolean unassigned = false;\n+\t\tprivate BooleanSupplier toggleFlagSupplier = null;\n+\t\tprivate int code = UNASSIGNED;\n+\t\tprivate String category = KeyCategories.MISC;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key binding id and translation key for this builder.\n+\t\t * <br>\n+\t\t * Key bindings will be assigned a translation key of the format \"key.{namespace}.{path}\"\n+\t\t *\n+\t\t * @param id Unique identifier for the bound key.\n+\t\t */\n+\t\tpublic Builder id(Identifier id) {\n+\t\t\tthis.id = Objects.requireNonNull(id, \"Keybinding's id can not be null!\");\n+\t\t\tthis.translationKey = String.format(\"key.%s.%s\", id.getNamespace(), id.getPath());\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the translation key for the key's category. {@link KeyCategories} for\n+\t\t * all possible values, vanilla values.\n+\t\t *\n+\t\t * @param category The category under which key bindings created by this builder will be grouped.\n+\t\t */\n+\t\tpublic Builder category(String category) {\n+\t\t\tthis.category = Objects.requireNonNull(category, \"Keybinding's category can not be null!\");\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the default key to be used for the key binding created using this builder.\n+\t\t *\n+\t\t * @param keyCode The default key code. Must be a valid key. May not be -1.\n+\t\t */\n+\t\tpublic Builder code(int keyCode) {\n+\t\t\tPreconditions.checkState(keyCode != UNASSIGNED, \"UNASSIGNED is not a valid key code.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzOTcyNQ==", "bodyText": "Does MC not allow switching key binds between mouse and keyboard?", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429039725", "createdAt": "2020-05-22T04:44:51Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {\n+\t\treturn getBoundKeyOf(this);\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @param keyBinding the keybinding\n+\t * @return configured KeyCode\n+\t */\n+\tpublic static InputUtil.KeyCode getBoundKeyOf(KeyBinding keyBinding) {\n+\t\treturn ((KeyCodeAccessor) keyBinding).getKeyCode();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int UNASSIGNED = InputUtil.UNKNOWN_KEYCODE.getKeyCode();\n+\n+\t\tprivate InputUtil.Type type = InputUtil.Type.KEYSYM;\n+\t\tprivate Identifier id = null;\n+\t\tprivate String translationKey;\n+\t\tprivate boolean unassigned = false;\n+\t\tprivate BooleanSupplier toggleFlagSupplier = null;\n+\t\tprivate int code = UNASSIGNED;\n+\t\tprivate String category = KeyCategories.MISC;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key binding id and translation key for this builder.\n+\t\t * <br>\n+\t\t * Key bindings will be assigned a translation key of the format \"key.{namespace}.{path}\"\n+\t\t *\n+\t\t * @param id Unique identifier for the bound key.\n+\t\t */\n+\t\tpublic Builder id(Identifier id) {\n+\t\t\tthis.id = Objects.requireNonNull(id, \"Keybinding's id can not be null!\");\n+\t\t\tthis.translationKey = String.format(\"key.%s.%s\", id.getNamespace(), id.getPath());\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the translation key for the key's category. {@link KeyCategories} for\n+\t\t * all possible values, vanilla values.\n+\t\t *\n+\t\t * @param category The category under which key bindings created by this builder will be grouped.\n+\t\t */\n+\t\tpublic Builder category(String category) {\n+\t\t\tthis.category = Objects.requireNonNull(category, \"Keybinding's category can not be null!\");\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the default key to be used for the key binding created using this builder.\n+\t\t *\n+\t\t * @param keyCode The default key code. Must be a valid key. May not be -1.\n+\t\t */\n+\t\tpublic Builder code(int keyCode) {\n+\t\t\tPreconditions.checkState(keyCode != UNASSIGNED, \"UNASSIGNED is not a valid key code.\");\n+\t\t\tthis.code = keyCode;\n+\t\t\tthis.unassigned = false;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Indicates to this builder that keybindings built through it are intended to be unbound.\n+\t\t */\n+\t\tpublic Builder unassigned() {\n+\t\t\tthis.code = UNASSIGNED;\n+\t\t\tthis.unassigned = true;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets this builder to create sticky keybindings that will toggle their state when pressed.\n+\t\t */\n+\t\tpublic Builder sticky() {\n+\t\t\treturn sticky(() -> true);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets a sticking action to be used by the constructed key binding which can be used to switch between\n+\t\t * a sticky (toggle) and a regular key binding.\n+\t\t *\n+\t\t * @param toggleFlagSupplier A getter function to determine whether to toggle or not. True for toggling behaviour, false otherwise.\n+\t\t */\n+\t\tpublic Builder sticky(BooleanSupplier toggleFlagSupplier) {\n+\t\t\tthis.toggleFlagSupplier = toggleFlagSupplier;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key's type. Maybe be one of [{@link InputUtil.Type#KEYSYM} (keyboard), {@link InputUtil.Type#SCANCODE}, {@link InputUtil.Type#MOUSE}]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzOTk4Mw==", "bodyText": "If we add register to the builder's build(), this method could get moved as a static helper to KeyCategories.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429039983", "createdAt": "2020-05-22T04:46:00Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/KeyBindingRegistry.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.KeyBindingRegistryImpl;\n+\n+/**\n+ * Interface for registering key bindings.\n+ *\n+ * @see FabricKeyBinding\n+ */\n+public interface KeyBindingRegistry {\n+\tKeyBindingRegistry INSTANCE = KeyBindingRegistryImpl.INSTANCE;\n+\n+\t/**\n+\t * Add a new key binding category.\n+\t *\n+\t * @param categoryName The key binding category name.\n+\t * @return True if a new category was added.\n+\t */\n+\tboolean addCategory(String categoryName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MDI2Nw==", "bodyText": "There are some naming inconsistencies between bound vs assigned.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429040267", "createdAt": "2020-05-22T04:47:27Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MDYzMA==", "bodyText": "I'd use a little nested class instead of BooleanSupplier that can then use a better method name and document it.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429040630", "createdAt": "2020-05-22T04:49:22Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {\n+\t\treturn getBoundKeyOf(this);\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @param keyBinding the keybinding\n+\t * @return configured KeyCode\n+\t */\n+\tpublic static InputUtil.KeyCode getBoundKeyOf(KeyBinding keyBinding) {\n+\t\treturn ((KeyCodeAccessor) keyBinding).getKeyCode();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int UNASSIGNED = InputUtil.UNKNOWN_KEYCODE.getKeyCode();\n+\n+\t\tprivate InputUtil.Type type = InputUtil.Type.KEYSYM;\n+\t\tprivate Identifier id = null;\n+\t\tprivate String translationKey;\n+\t\tprivate boolean unassigned = false;\n+\t\tprivate BooleanSupplier toggleFlagSupplier = null;\n+\t\tprivate int code = UNASSIGNED;\n+\t\tprivate String category = KeyCategories.MISC;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key binding id and translation key for this builder.\n+\t\t * <br>\n+\t\t * Key bindings will be assigned a translation key of the format \"key.{namespace}.{path}\"\n+\t\t *\n+\t\t * @param id Unique identifier for the bound key.\n+\t\t */\n+\t\tpublic Builder id(Identifier id) {\n+\t\t\tthis.id = Objects.requireNonNull(id, \"Keybinding's id can not be null!\");\n+\t\t\tthis.translationKey = String.format(\"key.%s.%s\", id.getNamespace(), id.getPath());\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the translation key for the key's category. {@link KeyCategories} for\n+\t\t * all possible values, vanilla values.\n+\t\t *\n+\t\t * @param category The category under which key bindings created by this builder will be grouped.\n+\t\t */\n+\t\tpublic Builder category(String category) {\n+\t\t\tthis.category = Objects.requireNonNull(category, \"Keybinding's category can not be null!\");\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the default key to be used for the key binding created using this builder.\n+\t\t *\n+\t\t * @param keyCode The default key code. Must be a valid key. May not be -1.\n+\t\t */\n+\t\tpublic Builder code(int keyCode) {\n+\t\t\tPreconditions.checkState(keyCode != UNASSIGNED, \"UNASSIGNED is not a valid key code.\");\n+\t\t\tthis.code = keyCode;\n+\t\t\tthis.unassigned = false;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Indicates to this builder that keybindings built through it are intended to be unbound.\n+\t\t */\n+\t\tpublic Builder unassigned() {\n+\t\t\tthis.code = UNASSIGNED;\n+\t\t\tthis.unassigned = true;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets this builder to create sticky keybindings that will toggle their state when pressed.\n+\t\t */\n+\t\tpublic Builder sticky() {\n+\t\t\treturn sticky(() -> true);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets a sticking action to be used by the constructed key binding which can be used to switch between\n+\t\t * a sticky (toggle) and a regular key binding.\n+\t\t *\n+\t\t * @param toggleFlagSupplier A getter function to determine whether to toggle or not. True for toggling behaviour, false otherwise.\n+\t\t */\n+\t\tpublic Builder sticky(BooleanSupplier toggleFlagSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 167}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "479de279b72eca7c79992bc728231a6e436ead5c", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/479de279b72eca7c79992bc728231a6e436ead5c", "committedDate": "2020-05-22T11:17:39Z", "message": "major refactor\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ae383b1ddc6f80d8c38382cc5d733d1ad7f003e", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/9ae383b1ddc6f80d8c38382cc5d733d1ad7f003e", "committedDate": "2020-05-22T11:37:11Z", "message": "revert some stuff\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46ac2e06eb8d9f2d810f9e35aa9431beac4ba291", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/46ac2e06eb8d9f2d810f9e35aa9431beac4ba291", "committedDate": "2020-05-22T11:45:39Z", "message": "fix build\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08344b14d727fd68eec2003afff2f3d276ea8cd8", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/08344b14d727fd68eec2003afff2f3d276ea8cd8", "committedDate": "2020-05-23T06:40:20Z", "message": "major stuff\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b4be8b48a8783b9a011cb327b5e3e7955888746", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/3b4be8b48a8783b9a011cb327b5e3e7955888746", "committedDate": "2020-05-23T06:46:59Z", "message": "fix license, of course\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjU2MzY1", "url": "https://github.com/FabricMC/fabric/pull/615#pullrequestreview-417256365", "createdAt": "2020-05-23T06:52:31Z", "commit": {"oid": "3b4be8b48a8783b9a011cb327b5e3e7955888746"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwNjo1MjozMVrOGZn31g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwNjo1MjozMVrOGZn31g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUyMDg1NA==", "bodyText": "Do note because you have translation keys in your tests, you need to add the resource loader to the testmodCompile", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429520854", "createdAt": "2020-05-23T06:52:31Z", "author": {"login": "i509VCB"}, "path": "fabric-key-binding-api-v1/build.gradle", "diffHunk": "@@ -0,0 +1,7 @@\n+archivesBaseName = \"fabric-key-binding-api-v1\"\n+version = getSubprojectVersion(project, \"1.0.0\")\n+\n+dependencies {\n+\tcompile project(path: ':fabric-api-base', configuration: 'dev')\n+\ttestmodCompile project(path: ':fabric-events-lifecycle-v0', configuration: 'dev')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b4be8b48a8783b9a011cb327b5e3e7955888746"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ff6f673b5a8090ebcb93f1d33d4af863c7533c4", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/1ff6f673b5a8090ebcb93f1d33d4af863c7533c4", "committedDate": "2020-05-23T10:06:17Z", "message": "Add resource loader v0\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d61c3dc414c187b5d2bfc7250f8080bdbb1ce90", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/3d61c3dc414c187b5d2bfc7250f8080bdbb1ce90", "committedDate": "2020-05-23T10:10:20Z", "message": "Let's not break the api.\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdef23a31b0758d41d2669428a08c725f42ff7cd", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/fdef23a31b0758d41d2669428a08c725f42ff7cd", "committedDate": "2020-05-23T10:11:32Z", "message": "Rename to buildAndRegister\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjczODU0", "url": "https://github.com/FabricMC/fabric/pull/615#pullrequestreview-417273854", "createdAt": "2020-05-23T12:08:12Z", "commit": {"oid": "fdef23a31b0758d41d2669428a08c725f42ff7cd"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ea84382414defb4395e33e7adda0cd69ddbc643", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/9ea84382414defb4395e33e7adda0cd69ddbc643", "committedDate": "2020-05-23T12:25:42Z", "message": "resolve reviews\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjgwMzU5", "url": "https://github.com/FabricMC/fabric/pull/615#pullrequestreview-417280359", "createdAt": "2020-05-23T13:50:30Z", "commit": {"oid": "9ea84382414defb4395e33e7adda0cd69ddbc643"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MzA0NjM2", "url": "https://github.com/FabricMC/fabric/pull/615#pullrequestreview-417304636", "createdAt": "2020-05-23T19:56:10Z", "commit": {"oid": "9ea84382414defb4395e33e7adda0cd69ddbc643"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOTo1NjoxMFrOGZrGlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOTo1NjoxMFrOGZrGlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3Mzc4Mg==", "bodyText": "Use the GLFW constants GLFW.GLFW_KEY_P will be clearer and act as a better example", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429573782", "createdAt": "2020-05-23T19:56:10Z", "author": {"login": "modmuss50"}, "path": "fabric-key-binding-api-v1/src/testmod/java/net/fabricmc/fabric/test/client/keybinding/KeybindingsTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.client.keybinding;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.fabric.api.client.keybinding.v1.KeyBindingHelper;\n+import net.fabricmc.fabric.api.event.client.ClientTickCallback;\n+\n+public class KeybindingsTest implements ClientModInitializer {\n+\t@Override\n+\tpublic void onInitializeClient() {\n+\t\tKeyBinding binding1 = KeyBindingHelper.builder()\n+\t\t\t\t.identifier(new Identifier(\"fabric-key-binding-api-v1-testmod:test_keybinding_1\"))\n+\t\t\t\t.category(\"category.first.test\")\n+\t\t\t\t.key(InputUtil.Type.KEYSYM, 80) // P", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea84382414defb4395e33e7adda0cd69ddbc643"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f3f9995e6e7e00ea12e9254056d00aaa47da0fb", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/2f3f9995e6e7e00ea12e9254056d00aaa47da0fb", "committedDate": "2020-05-24T15:07:29Z", "message": "Use GLFW\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "859156c813a1efc28c160b47047c6b457db50e63", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/859156c813a1efc28c160b47047c6b457db50e63", "committedDate": "2020-05-27T14:37:06Z", "message": "Dump the builder entirely\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMjYwNjY2", "url": "https://github.com/FabricMC/fabric/pull/615#pullrequestreview-421260666", "createdAt": "2020-05-29T20:16:53Z", "commit": {"oid": "859156c813a1efc28c160b47047c6b457db50e63"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODcyNjcy", "url": "https://github.com/FabricMC/fabric/pull/615#pullrequestreview-424872672", "createdAt": "2020-06-04T22:15:34Z", "commit": {"oid": "859156c813a1efc28c160b47047c6b457db50e63"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODgwODYx", "url": "https://github.com/FabricMC/fabric/pull/615#pullrequestreview-424880861", "createdAt": "2020-06-04T22:34:38Z", "commit": {"oid": "859156c813a1efc28c160b47047c6b457db50e63"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjozNDozOFrOGfaQPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjozNDozOFrOGfaQPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4OTE4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              \"name\": \"Fabric Key Bindings API (v1)\",\n          \n          \n            \n              \"name\": \"Fabric Key Binding API (v1)\",\n          \n      \n    \n    \n  \n\nAlso, the name and ID use \"key binding\" but the description uses \"keybinding\", should be made consistent.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r435589182", "createdAt": "2020-06-04T22:34:38Z", "author": {"login": "Juuxel"}, "path": "fabric-key-binding-api-v1/src/main/resources/fabric.mod.json", "diffHunk": "@@ -0,0 +1,25 @@\n+{\n+  \"schemaVersion\": 1,\n+  \"id\": \"fabric-key-binding-api-v1\",\n+  \"name\": \"Fabric Key Bindings API (v1)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859156c813a1efc28c160b47047c6b457db50e63"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c26bedbaa884425ca80af014f4d70b718572c5b7", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/c26bedbaa884425ca80af014f4d70b718572c5b7", "committedDate": "2020-06-06T05:17:39Z", "message": "Rename to Key Binding\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3439, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}