{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMTY4NTYx", "number": 1234, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNjoxMzoyNlrOFOAApA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwMDoyNjoyMlrOFc1XHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjI0NTQ4OnYy", "diffSide": "RIGHT", "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiLookupImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNjoxMzoyNlrOISg57A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMzoyMzoxNFrOITJGEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI4NDM5Ng==", "bodyText": "Would adding a String name to this logger make it clearer for the user where the error came from?", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r556284396", "createdAt": "2021-01-13T06:13:26Z", "author": {"login": "PepperCode1"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiLookupImpl.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.lookup.block;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.block.entity.BlockEntityType;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.lookup.v1.ApiProviderMap;\n+import net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup;\n+import net.fabricmc.fabric.mixin.lookup.BlockEntityTypeAccessor;\n+\n+public final class BlockApiLookupImpl<T, C> implements BlockApiLookup<T, C> {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047fe88d687a2a688e86dc90c40a002787c72f0e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMxMTg3NA==", "bodyText": "IMO BlockApiLookupImpl links the log messages to the module pretty well with Lookup in the name, but using the module ID could also be good (I've done that in the screen handler API).", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r556311874", "createdAt": "2021-01-13T07:29:20Z", "author": {"login": "Juuxel"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiLookupImpl.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.lookup.block;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.block.entity.BlockEntityType;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.lookup.v1.ApiProviderMap;\n+import net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup;\n+import net.fabricmc.fabric.mixin.lookup.BlockEntityTypeAccessor;\n+\n+public final class BlockApiLookupImpl<T, C> implements BlockApiLookup<T, C> {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI4NDM5Ng=="}, "originalCommit": {"oid": "047fe88d687a2a688e86dc90c40a002787c72f0e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk0Mjg2Ng==", "bodyText": "Let's go for fabric-api-lookup-api-v1.", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r556942866", "createdAt": "2021-01-13T23:23:14Z", "author": {"login": "Technici4n"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiLookupImpl.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.lookup.block;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.block.entity.BlockEntityType;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.lookup.v1.ApiProviderMap;\n+import net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup;\n+import net.fabricmc.fabric.mixin.lookup.BlockEntityTypeAccessor;\n+\n+public final class BlockApiLookupImpl<T, C> implements BlockApiLookup<T, C> {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI4NDM5Ng=="}, "originalCommit": {"oid": "047fe88d687a2a688e86dc90c40a002787c72f0e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjI1MzUxOnYy", "diffSide": "RIGHT", "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNjoxNzoxNFrOISg-tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMzoyMjoyNFrOITJE0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI4NTYyMA==", "bodyText": "This is the only occurrence of <br>. Is it necessary for formatting or can it be replaced with a <p> for consistency?", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r556285620", "createdAt": "2021-01-13T06:17:14Z", "author": {"login": "PepperCode1"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.lookup.v1.block;\n+\n+import java.util.Objects;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.world.World;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.math.BlockPos;\n+\n+import net.fabricmc.fabric.impl.lookup.block.BlockApiCacheImpl;\n+import net.fabricmc.fabric.impl.lookup.block.BlockApiLookupImpl;\n+\n+/**\n+ * A {@link BlockApiLookup} bound to a {@link ServerWorld} and a position, providing much faster Api access.\n+ * Refer to {@link BlockApiLookup} for example code.\n+ *\n+ * <p>{@link BlockApiLookup#get(World, BlockPos, BlockState, BlockEntity, Object) BlockApiLookup#get()} looks up\n+ * the block state, the block entity, and the Api provider registered for the target block.\n+ *\n+ * <br>This object caches the block entity at the target position, and the last used Api provider, removing those queries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047fe88d687a2a688e86dc90c40a002787c72f0e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk0MjU0Ng==", "bodyText": "Thanks!", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r556942546", "createdAt": "2021-01-13T23:22:24Z", "author": {"login": "Technici4n"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.lookup.v1.block;\n+\n+import java.util.Objects;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.world.World;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.math.BlockPos;\n+\n+import net.fabricmc.fabric.impl.lookup.block.BlockApiCacheImpl;\n+import net.fabricmc.fabric.impl.lookup.block.BlockApiLookupImpl;\n+\n+/**\n+ * A {@link BlockApiLookup} bound to a {@link ServerWorld} and a position, providing much faster Api access.\n+ * Refer to {@link BlockApiLookup} for example code.\n+ *\n+ * <p>{@link BlockApiLookup#get(World, BlockPos, BlockState, BlockEntity, Object) BlockApiLookup#get()} looks up\n+ * the block state, the block entity, and the Api provider registered for the target block.\n+ *\n+ * <br>This object caches the block entity at the target position, and the last used Api provider, removing those queries.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI4NTYyMA=="}, "originalCommit": {"oid": "047fe88d687a2a688e86dc90c40a002787c72f0e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTE2NDE1OnYy", "diffSide": "RIGHT", "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/ApiLookupMap.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMTowMDo0OVrOIT3D8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMTozNDozMVrOIT4Gmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5NTk4Ng==", "bodyText": "Unless im missing something I dont see these 2 interfaces needing to be exposed as API? They seem to be related to impl details?", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r557695986", "createdAt": "2021-01-14T21:00:49Z", "author": {"login": "modmuss50"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/ApiLookupMap.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.lookup.v1;\n+\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.lookup.ApiLookupMapImpl;\n+\n+/**\n+ * Access to generic Api lookup instances. This is is meant to be used by implementors of Api lookup registries.\n+ *\n+ * <p>Note: To store a lookup class with type parameters {@code <T, C>}, it is recommended to store it as {@code <?, ?>} and perform an unchecked cast on queries internally.\n+ *\n+ * @param <L> The type of the lookup.\n+ */\n+public interface ApiLookupMap<L> extends Iterable<L> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaba1d7096af8a44f385fc059d2bc78bb9bf93b6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcwODI0Mg==", "bodyText": "They are indeed implementation details, but they are provided to accelerate implementations of other types of api lookups.\nSee for example the third-party https://github.com/Technici4n/FastTransferLib/blob/transactions/src/main/java/dev/technici4n/fasttransferlib/impl/item/ItemKeyApiLookupRegistryImpl.java and https://github.com/Technici4n/FastTransferLib/blob/transactions/src/main/java/dev/technici4n/fasttransferlib/impl/item/ItemKeyApiLookupImpl.java for an example of how it can be used by other mods.\nThe plan is to add item and entity api lookups as well in later PRs, but this could still be useful in other contexts, basically any time you want to convert a game object to some type T. For example, someone might want to expose a WorldApiLookup.", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r557708242", "createdAt": "2021-01-14T21:25:18Z", "author": {"login": "Technici4n"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/ApiLookupMap.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.lookup.v1;\n+\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.lookup.ApiLookupMapImpl;\n+\n+/**\n+ * Access to generic Api lookup instances. This is is meant to be used by implementors of Api lookup registries.\n+ *\n+ * <p>Note: To store a lookup class with type parameters {@code <T, C>}, it is recommended to store it as {@code <?, ?>} and perform an unchecked cast on queries internally.\n+ *\n+ * @param <L> The type of the lookup.\n+ */\n+public interface ApiLookupMap<L> extends Iterable<L> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5NTk4Ng=="}, "originalCommit": {"oid": "eaba1d7096af8a44f385fc059d2bc78bb9bf93b6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcxMzA1MA==", "bodyText": "Ok that\u2019s cool. Just don\u2019t want to expose something for the sake of it, but this is fine.", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r557713050", "createdAt": "2021-01-14T21:34:31Z", "author": {"login": "modmuss50"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/ApiLookupMap.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.lookup.v1;\n+\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.lookup.ApiLookupMapImpl;\n+\n+/**\n+ * Access to generic Api lookup instances. This is is meant to be used by implementors of Api lookup registries.\n+ *\n+ * <p>Note: To store a lookup class with type parameters {@code <T, C>}, it is recommended to store it as {@code <?, ?>} and perform an unchecked cast on queries internally.\n+ *\n+ * @param <L> The type of the lookup.\n+ */\n+public interface ApiLookupMap<L> extends Iterable<L> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5NTk4Ng=="}, "originalCommit": {"oid": "eaba1d7096af8a44f385fc059d2bc78bb9bf93b6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTIxNDM4OnYy", "diffSide": "RIGHT", "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiCacheImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMToxNjoxNlrOIT3irA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMTo0ODoyNVrOIT4iJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcwMzg1Mg==", "bodyText": "What happens if you try to cache something that isnt a BE? registred via registerForBlocks.", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r557703852", "createdAt": "2021-01-14T21:16:16Z", "author": {"login": "modmuss50"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiCacheImpl.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.lookup.block;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.math.BlockPos;\n+\n+import net.fabricmc.fabric.api.event.lifecycle.v1.ServerBlockEntityEvents;\n+import net.fabricmc.fabric.api.lookup.v1.block.BlockApiCache;\n+import net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup;\n+\n+public final class BlockApiCacheImpl<T, C> implements BlockApiCache<T, C> {\n+\tprivate final BlockApiLookupImpl<T, C> lookup;\n+\tprivate final ServerWorld world;\n+\tprivate final BlockPos pos;\n+\t/**\n+\t * We always cache the block entity, even if it's null. We rely on BE load and unload events to invalidate the cache when necessary.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaba1d7096af8a44f385fc059d2bc78bb9bf93b6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcxNDUxNw==", "bodyText": "If there is no block entity at the target position, the following should happen, matching the behavior of BlockApiLookup:\n\nIf the block state is not provided to the cache it will be queried in the world.\nIf the provider for the block state is a WrappedBlockEntityProvider, which is not supposed to happen, it should probably log an error and not pass a null BE. (I should change that). Otherwise, the provider will receive (world, pos, state, context).\nThe fallback providers will receive a null block entity instance.\n\nNot sure if that's the explanation you expected. If needed, I can probably explain better on Discord, just ping me.", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r557714517", "createdAt": "2021-01-14T21:37:29Z", "author": {"login": "Technici4n"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiCacheImpl.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.lookup.block;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.math.BlockPos;\n+\n+import net.fabricmc.fabric.api.event.lifecycle.v1.ServerBlockEntityEvents;\n+import net.fabricmc.fabric.api.lookup.v1.block.BlockApiCache;\n+import net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup;\n+\n+public final class BlockApiCacheImpl<T, C> implements BlockApiCache<T, C> {\n+\tprivate final BlockApiLookupImpl<T, C> lookup;\n+\tprivate final ServerWorld world;\n+\tprivate final BlockPos pos;\n+\t/**\n+\t * We always cache the block entity, even if it's null. We rely on BE load and unload events to invalidate the cache when necessary.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcwMzg1Mg=="}, "originalCommit": {"oid": "eaba1d7096af8a44f385fc059d2bc78bb9bf93b6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcyMDEwMg==", "bodyText": "I really need to boot it up and play with it. Easier to find out that way :)", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r557720102", "createdAt": "2021-01-14T21:48:25Z", "author": {"login": "modmuss50"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiCacheImpl.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.lookup.block;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.math.BlockPos;\n+\n+import net.fabricmc.fabric.api.event.lifecycle.v1.ServerBlockEntityEvents;\n+import net.fabricmc.fabric.api.lookup.v1.block.BlockApiCache;\n+import net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup;\n+\n+public final class BlockApiCacheImpl<T, C> implements BlockApiCache<T, C> {\n+\tprivate final BlockApiLookupImpl<T, C> lookup;\n+\tprivate final ServerWorld world;\n+\tprivate final BlockPos pos;\n+\t/**\n+\t * We always cache the block entity, even if it's null. We rely on BE load and unload events to invalidate the cache when necessary.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcwMzg1Mg=="}, "originalCommit": {"oid": "eaba1d7096af8a44f385fc059d2bc78bb9bf93b6"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyOTE5OTgwOnYy", "diffSide": "RIGHT", "path": "fabric-api-lookup-api-v1/src/main/resources/fabric.mod.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMDoxOTo0MFrOIWgK_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMDoxOTo0MFrOIWgK_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQ2NjY4Nw==", "bodyText": "This module now needs to define a module lifecycle:\nFor the new module you would add the following to the fabric.mod.json\n  \"custom\": {\n    \"fabric-api:module-lifecycle\": \"stable\"\n  }", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r560466687", "createdAt": "2021-01-19T20:19:40Z", "author": {"login": "i509VCB"}, "path": "fabric-api-lookup-api-v1/src/main/resources/fabric.mod.json", "diffHunk": "@@ -0,0 +1,27 @@\n+{\n+  \"schemaVersion\": 1,\n+  \"id\": \"fabric-api-lookup-api-v1\",\n+  \"name\": \"Fabric Api Lookup API (v1)\",\n+  \"version\": \"${version}\",\n+  \"environment\": \"*\",\n+  \"license\": \"Apache-2.0\",\n+  \"icon\": \"assets/fabric-api-lookup-api-v1/icon.png\",\n+  \"contact\": {\n+    \"homepage\": \"https://fabricmc.net\",\n+    \"irc\": \"irc://irc.esper.net:6667/fabric\",\n+    \"issues\": \"https://github.com/FabricMC/fabric/issues\",\n+    \"sources\": \"https://github.com/FabricMC/fabric\"\n+  },\n+  \"authors\": [\n+    \"FabricMC\"\n+  ],\n+  \"depends\": {\n+    \"fabricloader\": \">=0.9.2\",\n+    \"fabric-api-base\": \"*\",\n+    \"fabric-lifecycle-events-v1\": \"*\"\n+  },\n+  \"description\": \"A universal way to expose and query Apis\",\n+  \"mixins\": [\n+    \"fabric-api-lookup-api-v1.mixins.json\"\n+  ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaba1d7096af8a44f385fc059d2bc78bb9bf93b6"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NzQ4ODMwOnYy", "diffSide": "RIGHT", "path": "fabric-api-lookup-api-v1/README.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQxMTozNDoxNVrOIZLyng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQxNDoyNDo1N1rOIZNHEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI3ODQ5NA==", "bodyText": "copying my non-merge-blocking bikeshed from 1278:\nI'm so sorry but I honestly think I need to commit bikeshed and say argue that \"Api Lookup Api\" is a terrible name that, while being very literal, is clunky to use and ends up hurting ease of understanding of the code due to the redundancy of the term \"api\". Calling it a component API isn't quite accurate either, since entity-component systems are inherently about managing storage as well as lookup. I think the best term to use here would be \"property\", as it's looking or traits of an object without caring about how they're stored.", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r563278494", "createdAt": "2021-01-24T11:34:15Z", "author": {"login": "LemmaEOF"}, "path": "fabric-api-lookup-api-v1/README.md", "diffHunk": "@@ -0,0 +1,28 @@\n+#  Fabric Api Lookup API (v1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f91dfb62b469222a1d5f4db738a7bcc8f97ae93"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI4MjIzMQ==", "bodyText": "I think the only redundancy of the term \"api\" is in the name of this module, which is sometimes referred to as \"API API\" anyway (an API to expose APIs). In code, it only appears as ApiLookup or ApiCache.\nAs for the exact name, it may be a bit literal, but I think it conveys very well that this API is just meant to look up API instances from objects, I think it's more general than property.", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r563282231", "createdAt": "2021-01-24T12:05:57Z", "author": {"login": "Technici4n"}, "path": "fabric-api-lookup-api-v1/README.md", "diffHunk": "@@ -0,0 +1,28 @@\n+#  Fabric Api Lookup API (v1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI3ODQ5NA=="}, "originalCommit": {"oid": "8f91dfb62b469222a1d5f4db738a7bcc8f97ae93"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI5OTc0MQ==", "bodyText": "how about \"interface lookup api\" or \"hook lookup api\"", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r563299741", "createdAt": "2021-01-24T14:21:38Z", "author": {"login": "liach"}, "path": "fabric-api-lookup-api-v1/README.md", "diffHunk": "@@ -0,0 +1,28 @@\n+#  Fabric Api Lookup API (v1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI3ODQ5NA=="}, "originalCommit": {"oid": "8f91dfb62b469222a1d5f4db738a7bcc8f97ae93"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMwMDExMg==", "bodyText": "I don't think those are really better. In theory, an Api doesn't necessarily have to be an interface. Also, it's mostly bikeshedding at this point... :-P", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r563300112", "createdAt": "2021-01-24T14:24:57Z", "author": {"login": "Technici4n"}, "path": "fabric-api-lookup-api-v1/README.md", "diffHunk": "@@ -0,0 +1,28 @@\n+#  Fabric Api Lookup API (v1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI3ODQ5NA=="}, "originalCommit": {"oid": "8f91dfb62b469222a1d5f4db738a7bcc8f97ae93"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MDYxNjQ4OnYy", "diffSide": "RIGHT", "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/ApiLookupMapImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxMzo1Njo0OFrOIclEhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQwODo1ODo1M1rOIc8YiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgzODQwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate static class StoredLookup<L> {\n          \n          \n            \n            \t\tprivate final L lookup;\n          \n          \n            \n            \t\tprivate final Class<?> apiClass;\n          \n          \n            \n            \t\tprivate final Class<?> contextClass;\n          \n          \n            \n            \n          \n          \n            \n            \t\tprivate StoredLookup(L lookup, Class<?> apiClass, Class<?> contextClass) {\n          \n          \n            \n            \tprivate static final class StoredLookup<L> {\n          \n          \n            \n            \t\tfinal L lookup;\n          \n          \n            \n            \t\tfinal Class<?> apiClass;\n          \n          \n            \n            \t\tfinal Class<?> contextClass;\n          \n          \n            \n            \n          \n          \n            \n            \t\tStoredLookup(L lookup, Class<?> apiClass, Class<?> contextClass) {\n          \n      \n    \n    \n  \n\nThis ain't java 11, no nest host yet", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r566838404", "createdAt": "2021-01-29T13:56:48Z", "author": {"login": "liach"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/ApiLookupMapImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.lookup;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.lookup.v1.ApiLookupMap;\n+\n+public final class ApiLookupMapImpl<L> implements ApiLookupMap<L> {\n+\tprivate final Map<Identifier, StoredLookup<L>> lookups = new HashMap<>();\n+\tprivate final Supplier<L> lookupFactory;\n+\n+\tpublic ApiLookupMapImpl(Supplier<L> lookupFactory) {\n+\t\tthis.lookupFactory = lookupFactory;\n+\t}\n+\n+\t@Override\n+\tpublic synchronized L getLookup(Identifier lookupId, Class<?> apiClass, Class<?> contextClass) {\n+\t\tStoredLookup<L> storedLookup = lookups.computeIfAbsent(lookupId, id -> new StoredLookup<>(lookupFactory.get(), apiClass, contextClass));\n+\n+\t\tif (storedLookup.apiClass == apiClass && storedLookup.contextClass == contextClass) {\n+\t\t\treturn storedLookup.lookup;\n+\t\t}\n+\n+\t\tfinal String errorMessage = String.format(\n+\t\t\t\t\"Lookup with id %s is already registered with api class %s and context class %s. It can't be registered with api class %s and context class %s.\",\n+\t\t\t\tlookupId,\n+\t\t\t\tstoredLookup.apiClass.getCanonicalName(),\n+\t\t\t\tstoredLookup.contextClass.getCanonicalName(),\n+\t\t\t\tapiClass.getCanonicalName(),\n+\t\t\t\tcontextClass.getCanonicalName()\n+\t\t);\n+\n+\t\tthrow new IllegalArgumentException(errorMessage);\n+\t}\n+\n+\t@Override\n+\tpublic synchronized Iterator<L> iterator() {\n+\t\treturn lookups.values().stream().map(storedLookup -> storedLookup.lookup).collect(Collectors.toList()).iterator();\n+\t}\n+\n+\tprivate static class StoredLookup<L> {\n+\t\tprivate final L lookup;\n+\t\tprivate final Class<?> apiClass;\n+\t\tprivate final Class<?> contextClass;\n+\n+\t\tprivate StoredLookup(L lookup, Class<?> apiClass, Class<?> contextClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f91dfb62b469222a1d5f4db738a7bcc8f97ae93"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg1NTU2Nw==", "bodyText": "No idea what the difference is. I don't think final is important for an impl class?", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r566855567", "createdAt": "2021-01-29T14:23:54Z", "author": {"login": "Technici4n"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/ApiLookupMapImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.lookup;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.lookup.v1.ApiLookupMap;\n+\n+public final class ApiLookupMapImpl<L> implements ApiLookupMap<L> {\n+\tprivate final Map<Identifier, StoredLookup<L>> lookups = new HashMap<>();\n+\tprivate final Supplier<L> lookupFactory;\n+\n+\tpublic ApiLookupMapImpl(Supplier<L> lookupFactory) {\n+\t\tthis.lookupFactory = lookupFactory;\n+\t}\n+\n+\t@Override\n+\tpublic synchronized L getLookup(Identifier lookupId, Class<?> apiClass, Class<?> contextClass) {\n+\t\tStoredLookup<L> storedLookup = lookups.computeIfAbsent(lookupId, id -> new StoredLookup<>(lookupFactory.get(), apiClass, contextClass));\n+\n+\t\tif (storedLookup.apiClass == apiClass && storedLookup.contextClass == contextClass) {\n+\t\t\treturn storedLookup.lookup;\n+\t\t}\n+\n+\t\tfinal String errorMessage = String.format(\n+\t\t\t\t\"Lookup with id %s is already registered with api class %s and context class %s. It can't be registered with api class %s and context class %s.\",\n+\t\t\t\tlookupId,\n+\t\t\t\tstoredLookup.apiClass.getCanonicalName(),\n+\t\t\t\tstoredLookup.contextClass.getCanonicalName(),\n+\t\t\t\tapiClass.getCanonicalName(),\n+\t\t\t\tcontextClass.getCanonicalName()\n+\t\t);\n+\n+\t\tthrow new IllegalArgumentException(errorMessage);\n+\t}\n+\n+\t@Override\n+\tpublic synchronized Iterator<L> iterator() {\n+\t\treturn lookups.values().stream().map(storedLookup -> storedLookup.lookup).collect(Collectors.toList()).iterator();\n+\t}\n+\n+\tprivate static class StoredLookup<L> {\n+\t\tprivate final L lookup;\n+\t\tprivate final Class<?> apiClass;\n+\t\tprivate final Class<?> contextClass;\n+\n+\t\tprivate StoredLookup(L lookup, Class<?> apiClass, Class<?> contextClass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgzODQwNA=="}, "originalCommit": {"oid": "8f91dfb62b469222a1d5f4db738a7bcc8f97ae93"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjkxMDY1OA==", "bodyText": "final on classes can make jvm better optimize pojos\nRemoving private from inner class members (not class itself, as the class modifiers are effectively package and public) allows the compiler to not generate bridge methods for each place where the private field is accessed or the private constructor is called. fyi the accessor in compiled java looks like access$$0 something, while the constructors have some useless arguments inserted by compiler to avoid descriptor conflicts (all constructors are named <init>, so descriptors are their only difference).\n\nIn Java 11, the accessor problem is gone as jvm would recognize nest mates for private access and compiler no longer has to generate bridges. But remember, we are on Java 8", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r566910658", "createdAt": "2021-01-29T15:43:28Z", "author": {"login": "liach"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/ApiLookupMapImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.lookup;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.lookup.v1.ApiLookupMap;\n+\n+public final class ApiLookupMapImpl<L> implements ApiLookupMap<L> {\n+\tprivate final Map<Identifier, StoredLookup<L>> lookups = new HashMap<>();\n+\tprivate final Supplier<L> lookupFactory;\n+\n+\tpublic ApiLookupMapImpl(Supplier<L> lookupFactory) {\n+\t\tthis.lookupFactory = lookupFactory;\n+\t}\n+\n+\t@Override\n+\tpublic synchronized L getLookup(Identifier lookupId, Class<?> apiClass, Class<?> contextClass) {\n+\t\tStoredLookup<L> storedLookup = lookups.computeIfAbsent(lookupId, id -> new StoredLookup<>(lookupFactory.get(), apiClass, contextClass));\n+\n+\t\tif (storedLookup.apiClass == apiClass && storedLookup.contextClass == contextClass) {\n+\t\t\treturn storedLookup.lookup;\n+\t\t}\n+\n+\t\tfinal String errorMessage = String.format(\n+\t\t\t\t\"Lookup with id %s is already registered with api class %s and context class %s. It can't be registered with api class %s and context class %s.\",\n+\t\t\t\tlookupId,\n+\t\t\t\tstoredLookup.apiClass.getCanonicalName(),\n+\t\t\t\tstoredLookup.contextClass.getCanonicalName(),\n+\t\t\t\tapiClass.getCanonicalName(),\n+\t\t\t\tcontextClass.getCanonicalName()\n+\t\t);\n+\n+\t\tthrow new IllegalArgumentException(errorMessage);\n+\t}\n+\n+\t@Override\n+\tpublic synchronized Iterator<L> iterator() {\n+\t\treturn lookups.values().stream().map(storedLookup -> storedLookup.lookup).collect(Collectors.toList()).iterator();\n+\t}\n+\n+\tprivate static class StoredLookup<L> {\n+\t\tprivate final L lookup;\n+\t\tprivate final Class<?> apiClass;\n+\t\tprivate final Class<?> contextClass;\n+\n+\t\tprivate StoredLookup(L lookup, Class<?> apiClass, Class<?> contextClass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgzODQwNA=="}, "originalCommit": {"oid": "8f91dfb62b469222a1d5f4db738a7bcc8f97ae93"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzIyMDM2MA==", "bodyText": "I'm pretty sure the JVM already recognizes effectively final classes, but this change can't hurt anyway, and sure it's a good idea to remove synthetic methods as well. :)", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r567220360", "createdAt": "2021-01-30T08:58:53Z", "author": {"login": "Technici4n"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/ApiLookupMapImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.lookup;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.lookup.v1.ApiLookupMap;\n+\n+public final class ApiLookupMapImpl<L> implements ApiLookupMap<L> {\n+\tprivate final Map<Identifier, StoredLookup<L>> lookups = new HashMap<>();\n+\tprivate final Supplier<L> lookupFactory;\n+\n+\tpublic ApiLookupMapImpl(Supplier<L> lookupFactory) {\n+\t\tthis.lookupFactory = lookupFactory;\n+\t}\n+\n+\t@Override\n+\tpublic synchronized L getLookup(Identifier lookupId, Class<?> apiClass, Class<?> contextClass) {\n+\t\tStoredLookup<L> storedLookup = lookups.computeIfAbsent(lookupId, id -> new StoredLookup<>(lookupFactory.get(), apiClass, contextClass));\n+\n+\t\tif (storedLookup.apiClass == apiClass && storedLookup.contextClass == contextClass) {\n+\t\t\treturn storedLookup.lookup;\n+\t\t}\n+\n+\t\tfinal String errorMessage = String.format(\n+\t\t\t\t\"Lookup with id %s is already registered with api class %s and context class %s. It can't be registered with api class %s and context class %s.\",\n+\t\t\t\tlookupId,\n+\t\t\t\tstoredLookup.apiClass.getCanonicalName(),\n+\t\t\t\tstoredLookup.contextClass.getCanonicalName(),\n+\t\t\t\tapiClass.getCanonicalName(),\n+\t\t\t\tcontextClass.getCanonicalName()\n+\t\t);\n+\n+\t\tthrow new IllegalArgumentException(errorMessage);\n+\t}\n+\n+\t@Override\n+\tpublic synchronized Iterator<L> iterator() {\n+\t\treturn lookups.values().stream().map(storedLookup -> storedLookup.lookup).collect(Collectors.toList()).iterator();\n+\t}\n+\n+\tprivate static class StoredLookup<L> {\n+\t\tprivate final L lookup;\n+\t\tprivate final Class<?> apiClass;\n+\t\tprivate final Class<?> contextClass;\n+\n+\t\tprivate StoredLookup(L lookup, Class<?> apiClass, Class<?> contextClass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgzODQwNA=="}, "originalCommit": {"oid": "8f91dfb62b469222a1d5f4db738a7bcc8f97ae93"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1Nzc2MDA2OnYy", "diffSide": "RIGHT", "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwMDowMjowM1rOIpBnRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwMDo0NDo1NlrOIpCAPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4ODk2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @param context Additional context for the query, defined by type parameter C.\n          \n          \n            \n            \t * @return The retrieved API, or {@code null} if no API was found.\n          \n          \n            \n            \t * @param context additional context for the query\n          \n          \n            \n            \t * @return the retrieved API, or {@code null} if no API was found\n          \n      \n    \n    \n  \n\nImo you should move the description of type C to the @param tags for class doc\nI think we are more inclined to use sentence fragments for the param and return tags than full sentences. This just serves as an example.", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579888966", "createdAt": "2021-02-22T00:02:03Z", "author": {"login": "liach"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java", "diffHunk": "@@ -40,25 +40,30 @@\n @ApiStatus.NonExtendable\n public interface BlockApiCache<A, C> {\n \t/**\n-\t * Retrieve an Api from a block in the world, using the world and the position passed at creation time.\n+\t * Attempt to retrieve an API from a block in the world, using the world and the position passed at creation time.\n \t *\n-\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#get(BlockState, Object)}.\n+\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#find(BlockState, Object)}.\n+\t *\n+\t * @param context Additional context for the query, defined by type parameter C.\n+\t * @return The retrieved API, or {@code null} if no API was found.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a111356677cb11e8534e748764c0fa09e5823ee"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MDg0OQ==", "bodyText": "I find context additional context for the query much harder to parse than context Additional context for the query, defined by type parameter C. as it's harder to directly tell where the parameter name ends and where the description starts.", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579890849", "createdAt": "2021-02-22T00:15:52Z", "author": {"login": "Technici4n"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java", "diffHunk": "@@ -40,25 +40,30 @@\n @ApiStatus.NonExtendable\n public interface BlockApiCache<A, C> {\n \t/**\n-\t * Retrieve an Api from a block in the world, using the world and the position passed at creation time.\n+\t * Attempt to retrieve an API from a block in the world, using the world and the position passed at creation time.\n \t *\n-\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#get(BlockState, Object)}.\n+\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#find(BlockState, Object)}.\n+\t *\n+\t * @param context Additional context for the query, defined by type parameter C.\n+\t * @return The retrieved API, or {@code null} if no API was found.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4ODk2Ng=="}, "originalCommit": {"oid": "3a111356677cb11e8534e748764c0fa09e5823ee"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MTA2Nw==", "bodyText": "Also, the whole PR is consistent with itself and it's an entirely new module - nobody complained the first time and I really don't feel like going through all of the very extensive javadoc one more time to make it less readable in the end.", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579891067", "createdAt": "2021-02-22T00:17:19Z", "author": {"login": "Technici4n"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java", "diffHunk": "@@ -40,25 +40,30 @@\n @ApiStatus.NonExtendable\n public interface BlockApiCache<A, C> {\n \t/**\n-\t * Retrieve an Api from a block in the world, using the world and the position passed at creation time.\n+\t * Attempt to retrieve an API from a block in the world, using the world and the position passed at creation time.\n \t *\n-\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#get(BlockState, Object)}.\n+\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#find(BlockState, Object)}.\n+\t *\n+\t * @param context Additional context for the query, defined by type parameter C.\n+\t * @return The retrieved API, or {@code null} if no API was found.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4ODk2Ng=="}, "originalCommit": {"oid": "3a111356677cb11e8534e748764c0fa09e5823ee"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MTI5NQ==", "bodyText": "You should just document what C is in class's javadoc. You have the C as parameter type, so people already know it's C", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579891295", "createdAt": "2021-02-22T00:18:32Z", "author": {"login": "liach"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java", "diffHunk": "@@ -40,25 +40,30 @@\n @ApiStatus.NonExtendable\n public interface BlockApiCache<A, C> {\n \t/**\n-\t * Retrieve an Api from a block in the world, using the world and the position passed at creation time.\n+\t * Attempt to retrieve an API from a block in the world, using the world and the position passed at creation time.\n \t *\n-\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#get(BlockState, Object)}.\n+\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#find(BlockState, Object)}.\n+\t *\n+\t * @param context Additional context for the query, defined by type parameter C.\n+\t * @return The retrieved API, or {@code null} if no API was found.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4ODk2Ng=="}, "originalCommit": {"oid": "3a111356677cb11e8534e748764c0fa09e5823ee"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MTc4Ng==", "bodyText": "In this particular case, the parameters are not documented in BlockApiCache because they are the same as those of BlockApiLookup, and the cache already refers to it. I added this comment in BlockApiCache to be consistent with BlockApiLookup#find where it's imo necessary anyway due to find being one of the API entrypoints, and people might miss the @param <C> at the end of the huge javadoc.", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579891786", "createdAt": "2021-02-22T00:21:53Z", "author": {"login": "Technici4n"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java", "diffHunk": "@@ -40,25 +40,30 @@\n @ApiStatus.NonExtendable\n public interface BlockApiCache<A, C> {\n \t/**\n-\t * Retrieve an Api from a block in the world, using the world and the position passed at creation time.\n+\t * Attempt to retrieve an API from a block in the world, using the world and the position passed at creation time.\n \t *\n-\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#get(BlockState, Object)}.\n+\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#find(BlockState, Object)}.\n+\t *\n+\t * @param context Additional context for the query, defined by type parameter C.\n+\t * @return The retrieved API, or {@code null} if no API was found.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4ODk2Ng=="}, "originalCommit": {"oid": "3a111356677cb11e8534e748764c0fa09e5823ee"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5Mjk3MQ==", "bodyText": "might miss the @param <C> at the end of the huge javadoc\n\nAll parameters are generated alike as they are block tags whose contents are appended to end of member output. Per your argument, you shouldn't add param tags for method parameters because they might be missed.\nImo it's still best to document them in class. If you document the params, javadoc will generate the link for param C so when you click the clickable C in method parameter types, you will be redirected to the definition of the type parameter at the top of the class", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579892971", "createdAt": "2021-02-22T00:29:10Z", "author": {"login": "liach"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java", "diffHunk": "@@ -40,25 +40,30 @@\n @ApiStatus.NonExtendable\n public interface BlockApiCache<A, C> {\n \t/**\n-\t * Retrieve an Api from a block in the world, using the world and the position passed at creation time.\n+\t * Attempt to retrieve an API from a block in the world, using the world and the position passed at creation time.\n \t *\n-\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#get(BlockState, Object)}.\n+\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#find(BlockState, Object)}.\n+\t *\n+\t * @param context Additional context for the query, defined by type parameter C.\n+\t * @return The retrieved API, or {@code null} if no API was found.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4ODk2Ng=="}, "originalCommit": {"oid": "3a111356677cb11e8534e748764c0fa09e5823ee"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5NTM1Nw==", "bodyText": "IntelliJ does not seem to link the class directly, so I kept that comment in the javadoc of the find methods, but I also added the params to BlockApiCache for extra clarity and for web browser javadoc users. Hope that works for you.", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579895357", "createdAt": "2021-02-22T00:44:56Z", "author": {"login": "Technici4n"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java", "diffHunk": "@@ -40,25 +40,30 @@\n @ApiStatus.NonExtendable\n public interface BlockApiCache<A, C> {\n \t/**\n-\t * Retrieve an Api from a block in the world, using the world and the position passed at creation time.\n+\t * Attempt to retrieve an API from a block in the world, using the world and the position passed at creation time.\n \t *\n-\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#get(BlockState, Object)}.\n+\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#find(BlockState, Object)}.\n+\t *\n+\t * @param context Additional context for the query, defined by type parameter C.\n+\t * @return The retrieved API, or {@code null} if no API was found.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4ODk2Ng=="}, "originalCommit": {"oid": "3a111356677cb11e8534e748764c0fa09e5823ee"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1Nzc4NzE4OnYy", "diffSide": "RIGHT", "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/custom/ApiLookupMap.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwMDoyNjoyMlrOIpB0xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwMDo1MToxM1rOIpCEiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MjQyMg==", "bodyText": "the reason checkstyle complained here is you need to use the html entity codes for < and >", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579892422", "createdAt": "2021-02-22T00:26:22Z", "author": {"login": "i509VCB"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/custom/ApiLookupMap.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.lookup.v1.custom;\n+\n+import java.util.Objects;\n+\n+import org.jetbrains.annotations.ApiStatus;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.lookup.custom.ApiLookupMapImpl;\n+\n+//CHECKSTYLE.OFF: JavadocStyle - Checkstyle didn't like <A, C>, even though {@code ... } already escapes it.\n+/**\n+ * A a map meant to be used as the backing storage for custom {@code ApiLookup} instances,\n+ * to implement a custom equivalent of {@link net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup#get BlockApiLookup#get}.\n+ *\n+ * <p><h3>Usage Example</h3>\n+ * We will be implementing the following simplified version of an API lookup interface for item stacks\n+ * to illustrate how to use {@link ApiLookupMap} and {@link ApiProviderMap}.\n+ * <pre>{@code\n+ * public interface ItemStackApiLookup<A, C> {\n+ *     static <A, C> ItemStackApiLookup<A, C> get(Identifier lookupId, Class<A> apiClass, Class<C> contextClass) {\n+ *         return ItemStackApiLookupImpl.get(lookupId, apiClass, contextClass);\n+ *     }\n+ *     // Find an API instance.\n+ *     \uff20Nullable\n+ *     A find(ItemStack stack, C context);\n+ *     // Expose the API for some item.\n+ *     void register(ItemStackApiProvider<A, C> provider, Item item);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4dc7627836be462e19fc4fc93fc096b334bdd8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MjcxNA==", "bodyText": "Then it fails to render correctly as the {@code} tag already escapes them, I tried that first...", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579892714", "createdAt": "2021-02-22T00:27:44Z", "author": {"login": "Technici4n"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/custom/ApiLookupMap.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.lookup.v1.custom;\n+\n+import java.util.Objects;\n+\n+import org.jetbrains.annotations.ApiStatus;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.lookup.custom.ApiLookupMapImpl;\n+\n+//CHECKSTYLE.OFF: JavadocStyle - Checkstyle didn't like <A, C>, even though {@code ... } already escapes it.\n+/**\n+ * A a map meant to be used as the backing storage for custom {@code ApiLookup} instances,\n+ * to implement a custom equivalent of {@link net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup#get BlockApiLookup#get}.\n+ *\n+ * <p><h3>Usage Example</h3>\n+ * We will be implementing the following simplified version of an API lookup interface for item stacks\n+ * to illustrate how to use {@link ApiLookupMap} and {@link ApiProviderMap}.\n+ * <pre>{@code\n+ * public interface ItemStackApiLookup<A, C> {\n+ *     static <A, C> ItemStackApiLookup<A, C> get(Identifier lookupId, Class<A> apiClass, Class<C> contextClass) {\n+ *         return ItemStackApiLookupImpl.get(lookupId, apiClass, contextClass);\n+ *     }\n+ *     // Find an API instance.\n+ *     \uff20Nullable\n+ *     A find(ItemStack stack, C context);\n+ *     // Expose the API for some item.\n+ *     void register(ItemStackApiProvider<A, C> provider, Item item);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MjQyMg=="}, "originalCommit": {"oid": "5d4dc7627836be462e19fc4fc93fc096b334bdd8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MjgwOA==", "bodyText": "It won't render in IDE but the doclet will render it", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579892808", "createdAt": "2021-02-22T00:28:14Z", "author": {"login": "i509VCB"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/custom/ApiLookupMap.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.lookup.v1.custom;\n+\n+import java.util.Objects;\n+\n+import org.jetbrains.annotations.ApiStatus;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.lookup.custom.ApiLookupMapImpl;\n+\n+//CHECKSTYLE.OFF: JavadocStyle - Checkstyle didn't like <A, C>, even though {@code ... } already escapes it.\n+/**\n+ * A a map meant to be used as the backing storage for custom {@code ApiLookup} instances,\n+ * to implement a custom equivalent of {@link net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup#get BlockApiLookup#get}.\n+ *\n+ * <p><h3>Usage Example</h3>\n+ * We will be implementing the following simplified version of an API lookup interface for item stacks\n+ * to illustrate how to use {@link ApiLookupMap} and {@link ApiProviderMap}.\n+ * <pre>{@code\n+ * public interface ItemStackApiLookup<A, C> {\n+ *     static <A, C> ItemStackApiLookup<A, C> get(Identifier lookupId, Class<A> apiClass, Class<C> contextClass) {\n+ *         return ItemStackApiLookupImpl.get(lookupId, apiClass, contextClass);\n+ *     }\n+ *     // Find an API instance.\n+ *     \uff20Nullable\n+ *     A find(ItemStack stack, C context);\n+ *     // Expose the API for some item.\n+ *     void register(ItemStackApiProvider<A, C> provider, Item item);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MjQyMg=="}, "originalCommit": {"oid": "5d4dc7627836be462e19fc4fc93fc096b334bdd8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MzI1Mg==", "bodyText": "gradlew javadoc was unable to render them correctly when I tried on my laptop - just disable the inspection and be done with it, there are more important things in life and javadoc escaping is weird anyway. :P", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579893252", "createdAt": "2021-02-22T00:30:47Z", "author": {"login": "Technici4n"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/custom/ApiLookupMap.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.lookup.v1.custom;\n+\n+import java.util.Objects;\n+\n+import org.jetbrains.annotations.ApiStatus;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.lookup.custom.ApiLookupMapImpl;\n+\n+//CHECKSTYLE.OFF: JavadocStyle - Checkstyle didn't like <A, C>, even though {@code ... } already escapes it.\n+/**\n+ * A a map meant to be used as the backing storage for custom {@code ApiLookup} instances,\n+ * to implement a custom equivalent of {@link net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup#get BlockApiLookup#get}.\n+ *\n+ * <p><h3>Usage Example</h3>\n+ * We will be implementing the following simplified version of an API lookup interface for item stacks\n+ * to illustrate how to use {@link ApiLookupMap} and {@link ApiProviderMap}.\n+ * <pre>{@code\n+ * public interface ItemStackApiLookup<A, C> {\n+ *     static <A, C> ItemStackApiLookup<A, C> get(Identifier lookupId, Class<A> apiClass, Class<C> contextClass) {\n+ *         return ItemStackApiLookupImpl.get(lookupId, apiClass, contextClass);\n+ *     }\n+ *     // Find an API instance.\n+ *     \uff20Nullable\n+ *     A find(ItemStack stack, C context);\n+ *     // Expose the API for some item.\n+ *     void register(ItemStackApiProvider<A, C> provider, Item item);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MjQyMg=="}, "originalCommit": {"oid": "5d4dc7627836be462e19fc4fc93fc096b334bdd8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5NjQ1Nw==", "bodyText": "Fun fact: the \uff20 symbol in the javadoc is not a regular @ \ud83d\ude06 (https://stackoverflow.com/a/46332643/13567109).", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579896457", "createdAt": "2021-02-22T00:51:13Z", "author": {"login": "Technici4n"}, "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/custom/ApiLookupMap.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.lookup.v1.custom;\n+\n+import java.util.Objects;\n+\n+import org.jetbrains.annotations.ApiStatus;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.lookup.custom.ApiLookupMapImpl;\n+\n+//CHECKSTYLE.OFF: JavadocStyle - Checkstyle didn't like <A, C>, even though {@code ... } already escapes it.\n+/**\n+ * A a map meant to be used as the backing storage for custom {@code ApiLookup} instances,\n+ * to implement a custom equivalent of {@link net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup#get BlockApiLookup#get}.\n+ *\n+ * <p><h3>Usage Example</h3>\n+ * We will be implementing the following simplified version of an API lookup interface for item stacks\n+ * to illustrate how to use {@link ApiLookupMap} and {@link ApiProviderMap}.\n+ * <pre>{@code\n+ * public interface ItemStackApiLookup<A, C> {\n+ *     static <A, C> ItemStackApiLookup<A, C> get(Identifier lookupId, Class<A> apiClass, Class<C> contextClass) {\n+ *         return ItemStackApiLookupImpl.get(lookupId, apiClass, contextClass);\n+ *     }\n+ *     // Find an API instance.\n+ *     \uff20Nullable\n+ *     A find(ItemStack stack, C context);\n+ *     // Expose the API for some item.\n+ *     void register(ItemStackApiProvider<A, C> provider, Item item);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MjQyMg=="}, "originalCommit": {"oid": "5d4dc7627836be462e19fc4fc93fc096b334bdd8"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3361, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}