{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNzA3NjY1", "number": 1097, "title": "Biome Modification API", "bodyText": "This builds on the previousy biome API PR to add a way for modifying existing Biomes. This is needed since 1.16.2 made Biomes immutable, and introduced several copy-steps which make it harder to simply modify the Biomes in BuiltInBiomes and be done with it.\nThis API aims to add a more generic way of allowing ordered modifications, while building some heavily used convenience methods on top of that more generic API (i.e. adding features, and structure should be easy, while still allowing more wide-spread mods).\nImplementation Notes\n\nThis will modify only after datapacks are loaded, so no modifications for the demo world or server.properties parsing (I don't think anyone cares)\nAny method using RegistryKey parameters will work with purely JSON defined worldgen objects too, the test cases test this fully (different PR for the Unit Tests). This means JSON configured features can be added to vanilla biomes\nBiomes overridden or defined in data packs will run through this system too\nAny method that's called addBuiltIn*/removeBuiltIn* will use the BuiltInRegistries to resolve a registry key and continue with that, this means that built-in worldgen objects can easily be added to any biome (be it JSON or built-in)\nOrdering of modifiers is based around both the given order (first), then alphabetically based on the modifier ID (given to BiomeModifications.create), to guarantee consistent feature ordering regardless of mod-loading order\nThe IDs have the additional benefit of allowing other mods like KubeJS or WorldGenDebug to specifically target biome modifiers by ID to disable or modify their order (great for modpacks), or print before/after reports while attributing changes to the actual modifiers that caused them\nThe convenience methods found on BiomeModifications that quickly add modifiers for common use cases will automatically use the ID of the added worldgen objects as the ID of the modifiers they add, which works well for mod-defined worldgen objects (i.e. the example below where \"ae2:quartz_ore\" is added will use that as the ID for the modifier)\n\nMost important classes:\n\nBiomeModifications is the entry point for any form of modification\nBiomeSelectors contains commonly used selectors such as all biomes in the overworld, all biomes in the nether, all biomes in a given list, etc. (selectors can be combined like standard Java predicates)\nBiomeModificationContext is the object given to the actual modifier to add/remove/change the biome as needed\n\nExample usage (for the simple ore generation case, with some extra config bonus):\nboolean isQuartzOreWorldgenEnabled = /* from mod config file */;\nboolean isChargedQuartzOreWorldgenEnabled = /* from mod config file */;\nSet<RegistryKey<Biome>> quartzOreBiomeBlacklist = /* from mod config file */;\n\nif (isQuartzOreWorldgenEnabled) {\n    Predicate<BiomeSelectionContext> biomeSelector = BiomeSelectors.foundInOverworld()\n            .and(BiomeSelectors.excludeByKey(quartzOreBiomeBlacklist)));\n    BiomeModifications.addFeature(biomeSelector, GenerationStep.Feature.UNDERGROUND_ORES, WorldGenKeys.QUARTZ_ORE);\n\n    if (isChargedQuartzOreWorldgenEnabled) {\n        BiomeModifications.addFeature(biomeSelector, GenerationStep.Feature.UNDERGROUND_DECORATION, WorldGenKeys.CHARGED_QUARTZ_ORE);\n    }\n}\nExample usage (for the simple custom structure case, with some extra config bonus):\nboolean isMeteoriteWorldgenEnabled = /* from mod config file */;\nSet<RegistryKey<Biome>> meteoriteBiomeBlacklist = /* from mod config file */;\n\nif (isMeteoriteWorldgenEnabled) {\n    Predicate<BiomeSelectionContext> biomeSelector = BiomeSelectors.foundInOverworld()\n            .and(BiomeSelectors.excludeByKey(meteoriteBiomeBlacklist)));\n    BiomeModifications.addStructure(biomeSelector, WorldGenKeys.METEORITE);\n}\nExample usage (biome-specific mineshafts using biome-based selectors and multiple modifiers):\nBiomeModifications.create(new Identifier(\"mymod:biome_mineshafts\"))\n        .add(BiomeModifications.ORDER_REPLACEMENTS,\n                BiomeSelectors.includeByKey(BiomeKeys.PLAINS, BiomeKeys.SUNFLOWER_PLAINS),\n                context -> {\n                    if (context.getGenerationSettings().removeStructure(StructureFeature.MINESHAFT)) {\n                        context.getGenerationSettings().addStructure(WorldGenKeys.PLAINS_MINESHAFT);\n                    }\n                })\n        .add(BiomeModifications.ORDER_REPLACEMENTS,\n                BiomeSelectors.includeByKey(BiomeKeys.JUNGLE, BiomeKeys.JUNGLE_HILLS, BiomeKeys.JUNGLE_EDGE/*, ... more jungles */),\n                context -> {\n                    if (context.getGenerationSettings().removeStructure(StructureFeature.MINESHAFT)) {\n                        context.getGenerationSettings().addStructure(WorldGenKeys.JUNGLE_MINESHAFT);\n                    }\n                });\nExample usage (biome-specific mineshafts using context-sensitive modifier):\nBiomeModifications.create(new Identifier(\"mymod:biome_mineshafts\"))\n        .add(BiomeModifications.ORDER_REPLACEMENTS,\n                context -> context.getBiome().getGenerationSettings().hasStructureFeature(StructureFeature.MINESHAFT),\n                (selectionContext, context) -> {\n                    RegistryKey<ConfiguredStructureFeature<?, ?>> replacement = REPLACEMENT_BY_BIOME.get(selectionContext.getBiomeKey());\n                    \n                    if (replacement != null) {\n                        context.getGenerationSettings().removeStructure(StructureFeature.MINESHAFT);\n                        context.getGenerationSettings().addStructure(replacement);\n                    }\n                });\nExample usage (making an entity spawn  in all biomes that also spawn sheep):\nBiomeModifications.addSpawn(\n        BiomeSelectors.spawnsOneOf(EntityType.SHEEP),\n        SpawnGroup.CREATURE,\n        MyEntityTypes.SUPER_SHEEP,\n        1 /* weight */,\n        2 /* minGroupSize */,\n        3 /* maxGroupSize */\n);\nExample usage (replace sheep spawns with custom sheep in all overworld biomes below a given temperature as long as they're not oceans, and inherit their spawn settings - requires a custom accessor to get all properties of existing spawn entries):\nBiomeModifications.create(new Identifier(\"mymod:extra_wooly_sheeps\"))\n    .add(BiomeModifications.ORDER_REPLACEMENTS,\n        BiomeSelectors.foundInOverworld().and(context -> {\n            Biome biome = context.getBiome();\n            return biome.getCategory() != Biome.Category.OCEAN && biome.getTemperature() < 0.2f\n        }),\n        (selection, context) -> {\n            List<SpawnSettings.SpawnEntry> oldSpawns = selection.getBiome().getSpawnSettings().getSpawnEntry(SpawnGroup.CREATURE);\n            for (SpawnSettings.SpawnEntry spawnEntry : oldSpawns) {\n                if (spawnEntry.type == EntityType.SHEEP) {\n                    context.getSpawnSettings().addSpawn(SpawnGroup.CREATURE, new SpawnSettings.SpawnEntry(\n                            MyEntityTypes.EXTRA_WOOLY_SHEEP, /* TODO: get weight from spawn entry */, spawnEntry.minGroupSize,spawnEntry.maxGroupSize\n                    ));\n                }\n            }\n            context.getSpawnSettings().removeSpawnsOfEntityType(EntityType.SHEEP);\n        });\n    }\n}\nFor the curious, the tests are currently here: b02d6a7", "createdAt": "2020-09-23T11:28:22Z", "url": "https://github.com/FabricMC/fabric/pull/1097", "merged": true, "mergeCommit": {"oid": "f5a9be898839110cc20b3eba409decd2cc6b8be5"}, "closed": true, "closedAt": "2020-10-30T20:08:54Z", "author": {"login": "shartte"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMcuqPAH2gAyNDkxNzA3NjY1OjQxOTc1ZjgyY2E4OTMxZTIyOGU4Nzc4MmY5YTMzN2I1MjBhNDA3ZjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXrmF0gFqTUyMDk1NjYxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "41975f82ca8931e228e87782f9a337b520a407f6", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/41975f82ca8931e228e87782f9a337b520a407f6", "committedDate": "2020-09-25T21:32:38Z", "message": "Biome Modification API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2OTE2MDE1", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-496916015", "createdAt": "2020-09-25T23:50:27Z", "commit": {"oid": "41975f82ca8931e228e87782f9a337b520a407f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMzo1MDoyN1rOHYYSoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMzo1MDoyN1rOHYYSoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMyNTg1Nw==", "bodyText": "Do you need to specify @Mutable in accessors?", "url": "https://github.com/FabricMC/fabric/pull/1097#discussion_r495325857", "createdAt": "2020-09-25T23:50:27Z", "author": {"login": "i509VCB"}, "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/modification/BiomeEffectsAccessor.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome.modification;\n+\n+import java.util.Optional;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Mutable;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+import net.minecraft.sound.BiomeAdditionsSound;\n+import net.minecraft.sound.BiomeMoodSound;\n+import net.minecraft.sound.MusicSound;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.world.biome.BiomeEffects;\n+import net.minecraft.world.biome.BiomeParticleConfig;\n+\n+@Mixin(BiomeEffects.class)\n+public interface BiomeEffectsAccessor {\n+\t@Accessor(\"fogColor\")\n+\t@Mutable\n+\tvoid fabric_setFogColor(int value);\n+\n+\t@Accessor(\"waterColor\")\n+\t@Mutable\n+\tvoid fabric_setWaterColor(int value);\n+\n+\t@Accessor(\"waterFogColor\")\n+\t@Mutable\n+\tvoid fabric_setWaterFogColor(int value);\n+\n+\t@Accessor(\"skyColor\")\n+\t@Mutable\n+\tvoid fabric_setSkyColor(int value);\n+\n+\t@Accessor(\"foliageColor\")\n+\t@Mutable\n+\tvoid fabric_setFoliageColor(Optional<Integer> value);\n+\n+\t@Accessor(\"grassColor\")\n+\t@Mutable\n+\tvoid fabric_setGrassColor(Optional<Integer> value);\n+\n+\t@Accessor(\"grassColorModifier\")\n+\t@Mutable\n+\tvoid fabric_setGrassColorModifier(BiomeEffects.GrassColorModifier value);\n+\n+\t@Accessor(\"particleConfig\")\n+\t@Mutable\n+\tvoid fabric_setParticleConfig(Optional<BiomeParticleConfig> value);\n+\n+\t@Accessor(\"loopSound\")\n+\t@Mutable\n+\tvoid fabric_setLoopSound(Optional<SoundEvent> value);\n+\n+\t@Accessor(\"moodSound\")\n+\t@Mutable\n+\tvoid fabric_setMoodSound(Optional<BiomeMoodSound> value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41975f82ca8931e228e87782f9a337b520a407f6"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2OTE4NDE2", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-496918416", "createdAt": "2020-09-26T00:03:45Z", "commit": {"oid": "41975f82ca8931e228e87782f9a337b520a407f6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDIzMjY4", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-497023268", "createdAt": "2020-09-26T18:37:48Z", "commit": {"oid": "41975f82ca8931e228e87782f9a337b520a407f6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDI3MTQw", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-497027140", "createdAt": "2020-09-26T19:47:47Z", "commit": {"oid": "41975f82ca8931e228e87782f9a337b520a407f6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxOTo0Nzo0OFrOHYiQ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxOTo0Nzo0OFrOHYiQ3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4OTI0Ng==", "bodyText": "I will note the fact that by multiplying by 10 for each of these values (sometimes more than once) the result is there's an exponential increase in the possible values between each of these points. It might be a better idea to just do like\n000000000\n025000000\n050000000\n075000000\n100000000\n\nSo distribution is more uniform. Really though I'm guessing it doesn't really matter.", "url": "https://github.com/FabricMC/fabric/pull/1097#discussion_r495489246", "createdAt": "2020-09-26T19:47:48Z", "author": {"login": "Vaerian"}, "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/api/biome/v1/BiomeModifications.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.biome.v1;\n+\n+import java.util.function.Predicate;\n+\n+import org.jetbrains.annotations.ApiStatus;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.RegistryKey;\n+import net.minecraft.world.gen.GenerationStep;\n+import net.minecraft.world.gen.carver.ConfiguredCarver;\n+import net.minecraft.world.gen.feature.ConfiguredFeature;\n+import net.minecraft.world.gen.feature.ConfiguredStructureFeature;\n+\n+/**\n+ * Provides an API to modify Biomes after they have been loaded and before they are used in the World.\n+ *\n+ * <p>Any modifications made to biomes will not be available for use in server.properties (as of 1.16.1),\n+ * or the demo level.\n+ *\n+ * <p><b>Experimental feature</b>, may be removed or changed without further notice.\n+ * Because of the volatility of world generation in Minecraft 1.16, this API is marked experimental\n+ * since it is likely to change in future Minecraft versions.\n+ */\n+@ApiStatus.Experimental\n+public final class BiomeModifications {\n+\t/**\n+\t * The suggested order for modifiers that enrich biomes by adding to them without relying on\n+\t * other information in the biome, or removing other features.\n+\t *\n+\t * <p><b>Examples:</b> New ores, new vegetation, new structures\n+\t */\n+\tpublic static final int ORDER_ADDITIONS = 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41975f82ca8931e228e87782f9a337b520a407f6"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3b1c55482d4af973f5a618169a4781b90a4752a", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/f3b1c55482d4af973f5a618169a4781b90a4752a", "committedDate": "2020-09-26T20:36:04Z", "message": "Improved docs on Mixins."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7232977f9631d435167764d86c1480e13e0d4b5", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/e7232977f9631d435167764d86c1480e13e0d4b5", "committedDate": "2020-09-26T20:36:39Z", "message": "Added convenience methods to select biomes by mob-spawns, and added a top-level convenience method to add new spawns."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "238372a729d69caf3209d160c258207e7b5ee979", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/238372a729d69caf3209d160c258207e7b5ee979", "committedDate": "2020-09-26T21:03:47Z", "message": "Checkstyle fixes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMTEyNTQx", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-500112541", "createdAt": "2020-10-01T08:20:54Z", "commit": {"oid": "238372a729d69caf3209d160c258207e7b5ee979"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODoyMDo1NFrOHa_keA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODoyMDo1NFrOHa_keA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA2NjU1Mg==", "bodyText": "I would expand the tests a bit, I would atleast add an ore or something as well.", "url": "https://github.com/FabricMC/fabric/pull/1097#discussion_r498066552", "createdAt": "2020-10-01T08:20:54Z", "author": {"login": "modmuss50"}, "path": "fabric-biome-api-v1/src/testmod/java/net/fabricmc/fabric/test/biome/FabricBiomeTest.java", "diffHunk": "@@ -63,5 +66,17 @@ public void onInitialize() {\n \t\tOverworldBiomes.addHillsBiome(BiomeKeys.BAMBOO_JUNGLE, BiomeKeys.BASALT_DELTAS, 0.9);\n \n \t\tOverworldBiomes.addContinentalBiome(BiomeKeys.END_HIGHLANDS, OverworldClimate.DRY, 0.5);\n+\n+\t\tBiomeModifications.create(new Identifier(\"fabric:test_mod\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238372a729d69caf3209d160c258207e7b5ee979"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMTEzODcw", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-500113870", "createdAt": "2020-10-01T08:22:40Z", "commit": {"oid": "238372a729d69caf3209d160c258207e7b5ee979"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODoyMjo0MFrOHa_ohQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODoyMjo0MFrOHa_ohQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA2NzU4OQ==", "bodyText": "Id you are going to use DRM for short use it in full once with (DRM) and then make sure its being used throughout the javadoc.", "url": "https://github.com/FabricMC/fabric/pull/1097#discussion_r498067589", "createdAt": "2020-10-01T08:22:40Z", "author": {"login": "modmuss50"}, "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/modification/RegistryOpsMixin.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome.modification;\n+\n+import com.mojang.serialization.DynamicOps;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.dynamic.RegistryOps;\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+\n+import net.fabricmc.fabric.impl.biome.modification.BiomeModificationImpl;\n+\n+/**\n+ * This Mixin hooks int the creation of RegistryOps, which will currently load data pack contents into\n+ * the supplied dynamic registry manager, making it the point at which we should apply biome modifications.\n+ *\n+ * <p>There is generally the following order:\n+ * <ol>\n+ *     <li>{@link DynamicRegistryManager#create()} is used to create a dynamic registry manager with just\n+ *     entries from {@link net.minecraft.util.registry.BuiltinRegistries}</li>\n+ *     <li>Sometimes, Vanilla Minecraft will stop here, and use the DRM as-is (examples: server.properties parsing, world creation screen).</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238372a729d69caf3209d160c258207e7b5ee979"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17935013d56fc4f200b4bf700e4c52fe473d2700", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/17935013d56fc4f200b4bf700e4c52fe473d2700", "committedDate": "2020-10-02T10:38:12Z", "message": "Replace a reference to DRM with DynamicRegistryManager"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNjA1MjUw", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-501605250", "createdAt": "2020-10-04T09:16:49Z", "commit": {"oid": "17935013d56fc4f200b4bf700e4c52fe473d2700"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNjUzMjI2", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-501653226", "createdAt": "2020-10-04T19:41:04Z", "commit": {"oid": "17935013d56fc4f200b4bf700e4c52fe473d2700"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxOTo0MTowNFrOHcJuKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxOTo0MTowNFrOHcJuKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4MTQ1MA==", "bodyText": "Might be nice to have a BiomeSelector that checks a Biome.Category", "url": "https://github.com/FabricMC/fabric/pull/1097#discussion_r499281450", "createdAt": "2020-10-04T19:41:04Z", "author": {"login": "modmuss50"}, "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/api/biome/v1/BiomeSelectors.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.biome.v1;\n+\n+import java.util.Collection;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.jetbrains.annotations.ApiStatus;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.SpawnGroup;\n+import net.minecraft.util.registry.BuiltinRegistries;\n+import net.minecraft.util.registry.RegistryKey;\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.world.biome.BiomeKeys;\n+import net.minecraft.world.biome.SpawnSettings;\n+\n+import net.fabricmc.fabric.mixin.biome.VanillaLayeredBiomeSourceAccessor;\n+\n+/**\n+ * Provides several convenient biome selectors that can be used with {@link BiomeModifications}.\n+ *\n+ * <p><b>Experimental feature</b>, may be removed or changed without further notice.\n+ * Because of the volatility of world generation in Minecraft 1.16, this API is marked experimental\n+ * since it is likely to change in future Minecraft versions.\n+ */\n+@ApiStatus.Experimental\n+public final class BiomeSelectors {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17935013d56fc4f200b4bf700e4c52fe473d2700"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNjUzNzMw", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-501653730", "createdAt": "2020-10-04T19:47:47Z", "commit": {"oid": "17935013d56fc4f200b4bf700e4c52fe473d2700"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxOTo0Nzo0OFrOHcJwSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxOTo1NDoxNFrOHcJyzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4MTk5Mg==", "bodyText": "All of the experimal classes must also be deprecated as not all IDE's handle this.", "url": "https://github.com/FabricMC/fabric/pull/1097#discussion_r499281992", "createdAt": "2020-10-04T19:47:48Z", "author": {"login": "modmuss50"}, "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/api/biome/v1/BiomeModification.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.biome.v1;\n+\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+\n+import org.jetbrains.annotations.ApiStatus;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.biome.modification.BiomeModificationImpl;\n+\n+/**\n+ * @see BiomeModifications\n+ */\n+@ApiStatus.Experimental", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17935013d56fc4f200b4bf700e4c52fe473d2700"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4MjAyMg==", "bodyText": "Again, fine to add just not to replace.", "url": "https://github.com/FabricMC/fabric/pull/1097#discussion_r499282022", "createdAt": "2020-10-04T19:48:17Z", "author": {"login": "modmuss50"}, "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/api/biome/v1/OverworldBiomes.java", "diffHunk": "@@ -24,11 +26,11 @@\n /**\n  * API that exposes some internals of the minecraft default biome source for the overworld.\n  *\n- * @deprecated Experimental feature, may be removed or changed without further notice.\n+ * <p><b>Experimental feature</b>, may be removed or changed without further notice.\n  * Because of the volatility of world generation in Minecraft 1.16, this API is marked experimental\n  * since it is likely to change in future Minecraft versions.\n  */\n-@Deprecated\n+@ApiStatus.Experimental", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17935013d56fc4f200b4bf700e4c52fe473d2700"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4MjYzNg==", "bodyText": "I do still think there should be few more examples/tests here, atleast add an ore or something.", "url": "https://github.com/FabricMC/fabric/pull/1097#discussion_r499282636", "createdAt": "2020-10-04T19:54:14Z", "author": {"login": "modmuss50"}, "path": "fabric-biome-api-v1/src/testmod/java/net/fabricmc/fabric/test/biome/FabricBiomeTest.java", "diffHunk": "@@ -63,5 +66,17 @@ public void onInitialize() {\n \t\tOverworldBiomes.addHillsBiome(BiomeKeys.BAMBOO_JUNGLE, BiomeKeys.BASALT_DELTAS, 0.9);\n \n \t\tOverworldBiomes.addContinentalBiome(BiomeKeys.END_HIGHLANDS, OverworldClimate.DRY, 0.5);\n+\n+\t\tBiomeModifications.create(new Identifier(\"fabric:test_mod\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA2NjU1Mg=="}, "originalCommit": {"oid": "238372a729d69caf3209d160c258207e7b5ee979"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90e730bd5052fd9ec4a246326c15f9550869cea9", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/90e730bd5052fd9ec4a246326c15f9550869cea9", "committedDate": "2020-10-04T21:37:42Z", "message": "Replaced integer order with phase-based ordering."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eed9a7baa18583cb286d44bd548a571fb0df105f", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/eed9a7baa18583cb286d44bd548a571fb0df105f", "committedDate": "2020-10-07T18:07:43Z", "message": "Changed to @Deprecated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5c344aad04fbf459a99f180603153c81b7a61f8", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/b5c344aad04fbf459a99f180603153c81b7a61f8", "committedDate": "2020-10-07T18:08:56Z", "message": "Checkstyle fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MjE0Mzkw", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-506214390", "createdAt": "2020-10-11T20:36:14Z", "commit": {"oid": "b5c344aad04fbf459a99f180603153c81b7a61f8"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38fbd309ccef26486043e93b115c18b3c973a36a", "author": {"user": {"login": "shartte", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/38fbd309ccef26486043e93b115c18b3c973a36a", "committedDate": "2020-10-12T18:19:11Z", "message": "Added category selector."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2ODM0OTg3", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-506834987", "createdAt": "2020-10-12T18:30:33Z", "commit": {"oid": "38fbd309ccef26486043e93b115c18b3c973a36a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjI1MTgy", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-509225182", "createdAt": "2020-10-15T10:13:40Z", "commit": {"oid": "38fbd309ccef26486043e93b115c18b3c973a36a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNzA4NjE5", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-513708619", "createdAt": "2020-10-21T13:50:34Z", "commit": {"oid": "38fbd309ccef26486043e93b115c18b3c973a36a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNzI1ODE0", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-513725814", "createdAt": "2020-10-21T14:05:58Z", "commit": {"oid": "38fbd309ccef26486043e93b115c18b3c973a36a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzcyNDQ3", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-516372447", "createdAt": "2020-10-25T15:53:28Z", "commit": {"oid": "38fbd309ccef26486043e93b115c18b3c973a36a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTMzOTQ5", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-517133949", "createdAt": "2020-10-26T20:05:59Z", "commit": {"oid": "38fbd309ccef26486043e93b115c18b3c973a36a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwOTU2NjE1", "url": "https://github.com/FabricMC/fabric/pull/1097#pullrequestreview-520956615", "createdAt": "2020-10-30T19:05:01Z", "commit": {"oid": "38fbd309ccef26486043e93b115c18b3c973a36a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3324, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}