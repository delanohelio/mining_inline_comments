{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwOTU2NzQx", "number": 1115, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNjo0ODo0OFrOEsTFzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwNjoxMTo1NVrOFOef_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODg1NTgzOnYy", "diffSide": "RIGHT", "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/api/client/command/v1/ArgumentBuilders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNjo0ODo0OFrOHfhClA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDo0Nzo0NVrOHrJw3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwOTIzNg==", "bodyText": "The class name should specify it is for client arguments.", "url": "https://github.com/FabricMC/fabric/pull/1115#discussion_r502809236", "createdAt": "2020-10-10T16:48:48Z", "author": {"login": "i509VCB"}, "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/api/client/command/v1/ArgumentBuilders.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.command.v1;\n+\n+import com.mojang.brigadier.arguments.ArgumentType;\n+import com.mojang.brigadier.builder.LiteralArgumentBuilder;\n+import com.mojang.brigadier.builder.RequiredArgumentBuilder;\n+\n+/**\n+ * Provides helper methods for constructing argument builders\n+ * for client-sided commands.\n+ *\n+ * <p>This is an alternative to the server-side helper methods in\n+ * {@link net.minecraft.server.command.CommandManager}.\n+ */\n+public final class ArgumentBuilders {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cbebe0bf78b32545153616d6d9d3a3562806d8e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxMDc4MQ==", "bodyText": "Renamed to ClientArgumentBuilders.", "url": "https://github.com/FabricMC/fabric/pull/1115#discussion_r515010781", "createdAt": "2020-10-30T10:47:45Z", "author": {"login": "Juuxel"}, "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/api/client/command/v1/ArgumentBuilders.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.command.v1;\n+\n+import com.mojang.brigadier.arguments.ArgumentType;\n+import com.mojang.brigadier.builder.LiteralArgumentBuilder;\n+import com.mojang.brigadier.builder.RequiredArgumentBuilder;\n+\n+/**\n+ * Provides helper methods for constructing argument builders\n+ * for client-sided commands.\n+ *\n+ * <p>This is an alternative to the server-side helper methods in\n+ * {@link net.minecraft.server.command.CommandManager}.\n+ */\n+public final class ArgumentBuilders {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwOTIzNg=="}, "originalCommit": {"oid": "4cbebe0bf78b32545153616d6d9d3a3562806d8e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDQ1ODkzOnYy", "diffSide": "RIGHT", "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/api/client/command/v1/ClientCommandRegistrationCallback.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTowNjozN1rOHpQ_DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoxOToxMVrOHpcuhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzMTk0OQ==", "bodyText": "Not a big fan of allowing prefixes like this? Id keep this as close as possible to the normal CommandRegistrationCallback", "url": "https://github.com/FabricMC/fabric/pull/1115#discussion_r513031949", "createdAt": "2020-10-27T21:06:37Z", "author": {"login": "modmuss50"}, "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/api/client/command/v1/ClientCommandRegistrationCallback.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.command.v1;\n+\n+import com.mojang.brigadier.CommandDispatcher;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.impl.command.client.ClientCommandInternals;\n+\n+/**\n+ * Callback for registering client-sided commands.\n+ *\n+ * <p>Client-sided commands are fully executed on the client,\n+ * so players can use them in both singleplayer and multiplayer.\n+ *\n+ * <p>Client-sided commands also support using custom command\n+ * prefixes instead of the {@code /} symbol. You can customize\n+ * the used prefix with {@link #event(char)}.\n+ *\n+ * <p>The commands are run on the client game thread by default.\n+ * Avoid doing any heavy calculations here as that can freeze the game's rendering.\n+ * For example, you can move heavy code to another thread.\n+ *\n+ * <h2>Example</h2>\n+ * <pre>\n+ * {@code\n+ * ClientCommandRegistrationCallback.event().register(dispatcher -> {\n+ *     dispatcher.register(ArgumentBuilders.literal(\"hello\").executes(context -> {\n+ *         context.getSource().sendFeedback(new LiteralText(\"Hello, world!\"));\n+ *         return 0;\n+ *     }));\n+ * });\n+ * }\n+ * </pre>\n+ */\n+@FunctionalInterface\n+@Environment(EnvType.CLIENT)\n+public interface ClientCommandRegistrationCallback {\n+\t/**\n+\t * Gets the command registration event for commands with the {@code /} prefix.\n+\t *\n+\t * @return the event object\n+\t */\n+\tstatic Event<ClientCommandRegistrationCallback> event() {\n+\t\treturn event('/');\n+\t}\n+\n+\t/**\n+\t * Gets the command registration event with a custom command prefix.\n+\t *\n+\t * @param prefix the command prefix\n+\t * @return the event object\n+\t * @throws IllegalArgumentException if the prefix {@linkplain Character#isLetterOrDigit(char) is a letter or a digit},\n+\t *                                  or if it {@linkplain Character#isWhitespace(char) is whitespace}.\n+\t */\n+\tstatic Event<ClientCommandRegistrationCallback> event(char prefix) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cbebe0bf78b32545153616d6d9d3a3562806d8e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNDMyNQ==", "bodyText": "Ah, alright. That lets me simplify the code a lot, then.", "url": "https://github.com/FabricMC/fabric/pull/1115#discussion_r513224325", "createdAt": "2020-10-28T07:19:11Z", "author": {"login": "Juuxel"}, "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/api/client/command/v1/ClientCommandRegistrationCallback.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.command.v1;\n+\n+import com.mojang.brigadier.CommandDispatcher;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.impl.command.client.ClientCommandInternals;\n+\n+/**\n+ * Callback for registering client-sided commands.\n+ *\n+ * <p>Client-sided commands are fully executed on the client,\n+ * so players can use them in both singleplayer and multiplayer.\n+ *\n+ * <p>Client-sided commands also support using custom command\n+ * prefixes instead of the {@code /} symbol. You can customize\n+ * the used prefix with {@link #event(char)}.\n+ *\n+ * <p>The commands are run on the client game thread by default.\n+ * Avoid doing any heavy calculations here as that can freeze the game's rendering.\n+ * For example, you can move heavy code to another thread.\n+ *\n+ * <h2>Example</h2>\n+ * <pre>\n+ * {@code\n+ * ClientCommandRegistrationCallback.event().register(dispatcher -> {\n+ *     dispatcher.register(ArgumentBuilders.literal(\"hello\").executes(context -> {\n+ *         context.getSource().sendFeedback(new LiteralText(\"Hello, world!\"));\n+ *         return 0;\n+ *     }));\n+ * });\n+ * }\n+ * </pre>\n+ */\n+@FunctionalInterface\n+@Environment(EnvType.CLIENT)\n+public interface ClientCommandRegistrationCallback {\n+\t/**\n+\t * Gets the command registration event for commands with the {@code /} prefix.\n+\t *\n+\t * @return the event object\n+\t */\n+\tstatic Event<ClientCommandRegistrationCallback> event() {\n+\t\treturn event('/');\n+\t}\n+\n+\t/**\n+\t * Gets the command registration event with a custom command prefix.\n+\t *\n+\t * @param prefix the command prefix\n+\t * @return the event object\n+\t * @throws IllegalArgumentException if the prefix {@linkplain Character#isLetterOrDigit(char) is a letter or a digit},\n+\t *                                  or if it {@linkplain Character#isWhitespace(char) is whitespace}.\n+\t */\n+\tstatic Event<ClientCommandRegistrationCallback> event(char prefix) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzMTk0OQ=="}, "originalCommit": {"oid": "4cbebe0bf78b32545153616d6d9d3a3562806d8e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDQ2NjEzOnYy", "diffSide": "RIGHT", "path": "fabric-command-api-v1/src/testmod/java/net/fabricmc/fabric/test/command/client/ClientCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTowODoxM1rOHpRDdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTowODoxM1rOHpRDdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzMzA3OA==", "bodyText": "Might be nice to have some better tests, take a look at the normal command tests to see how they fail hard even if not ran. Has saved a bug once before. \ud83d\udc4d", "url": "https://github.com/FabricMC/fabric/pull/1115#discussion_r513033078", "createdAt": "2020-10-27T21:08:13Z", "author": {"login": "modmuss50"}, "path": "fabric-command-api-v1/src/testmod/java/net/fabricmc/fabric/test/command/client/ClientCommandTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.command.client;\n+\n+import com.mojang.brigadier.exceptions.DynamicCommandExceptionType;\n+\n+import net.minecraft.text.LiteralText;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.fabric.api.client.command.v1.ArgumentBuilders;\n+import net.fabricmc.fabric.api.client.command.v1.ClientCommandRegistrationCallback;\n+\n+public final class ClientCommandTest implements ClientModInitializer {\n+\tprivate static final DynamicCommandExceptionType IS_NULL = new DynamicCommandExceptionType(x -> new LiteralText(\"The \" + x + \" is null\"));\n+\n+\t@Override\n+\tpublic void onInitializeClient() {\n+\t\tClientCommandRegistrationCallback.event().register(registerSimpleCommands(\"This is a client command\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cbebe0bf78b32545153616d6d9d3a3562806d8e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNzI0MDkzOnYy", "diffSide": "RIGHT", "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/impl/command/client/ClientCommandInternals.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwNjoxMTo1NVrOITQf-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQwMDoxODowNlrOIlNeLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA2NDE4NA==", "bodyText": "I think there was already a discussion on this in the discord if these commands should have a different/customizable prefix. If not, it would be nice to have customizable prefixes and if the API is going through the trouble of adding client commands, we might as well have commands be able to have custom prefixes. (obviously default to /).", "url": "https://github.com/FabricMC/fabric/pull/1115#discussion_r557064184", "createdAt": "2021-01-14T06:11:55Z", "author": {"login": "OroArmor"}, "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/impl/command/client/ClientCommandInternals.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.command.client;\n+\n+import static net.fabricmc.fabric.api.client.command.v1.ClientCommandManager.DISPATCHER;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.mojang.brigadier.AmbiguityConsumer;\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.builder.ArgumentBuilder;\n+import com.mojang.brigadier.exceptions.BuiltInExceptionProvider;\n+import com.mojang.brigadier.exceptions.CommandExceptionType;\n+import com.mojang.brigadier.exceptions.CommandSyntaxException;\n+import com.mojang.brigadier.tree.CommandNode;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.command.CommandException;\n+import net.minecraft.text.Text;\n+import net.minecraft.text.Texts;\n+import net.minecraft.text.TranslatableText;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.command.v1.FabricClientCommandSource;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientCommandInternals {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate static final char PREFIX = '/';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "527f292bdbef03b35ccc9f3aaa3f3f207120bf1b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA2NjAzNQ==", "bodyText": "Ah, it seems that modmuss50 already gave some input on this, but I think that having two registration methods, one for a default prefix and one for a custom one is better. I feel like the main reason to have a different prefix is to think about how it has a different function than /, If we don't include this, it will exclude the modders that want to include these features, and force them to rewrite what we have already done. I feel that this is counterproductive to the purpose of the Fabric API where common needs are made accessible to all modders and do not require mixins.", "url": "https://github.com/FabricMC/fabric/pull/1115#discussion_r557066035", "createdAt": "2021-01-14T06:18:23Z", "author": {"login": "OroArmor"}, "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/impl/command/client/ClientCommandInternals.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.command.client;\n+\n+import static net.fabricmc.fabric.api.client.command.v1.ClientCommandManager.DISPATCHER;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.mojang.brigadier.AmbiguityConsumer;\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.builder.ArgumentBuilder;\n+import com.mojang.brigadier.exceptions.BuiltInExceptionProvider;\n+import com.mojang.brigadier.exceptions.CommandExceptionType;\n+import com.mojang.brigadier.exceptions.CommandSyntaxException;\n+import com.mojang.brigadier.tree.CommandNode;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.command.CommandException;\n+import net.minecraft.text.Text;\n+import net.minecraft.text.Texts;\n+import net.minecraft.text.TranslatableText;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.command.v1.FabricClientCommandSource;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientCommandInternals {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate static final char PREFIX = '/';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA2NDE4NA=="}, "originalCommit": {"oid": "527f292bdbef03b35ccc9f3aaa3f3f207120bf1b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY0MDE4MQ==", "bodyText": "Well, I had custom prefixes working quite nicely originally. I removed them because modmuss didn't want them in Fabric API (to keep the client commands closer to vanilla's server commands).", "url": "https://github.com/FabricMC/fabric/pull/1115#discussion_r561640181", "createdAt": "2021-01-21T06:56:37Z", "author": {"login": "Juuxel"}, "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/impl/command/client/ClientCommandInternals.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.command.client;\n+\n+import static net.fabricmc.fabric.api.client.command.v1.ClientCommandManager.DISPATCHER;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.mojang.brigadier.AmbiguityConsumer;\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.builder.ArgumentBuilder;\n+import com.mojang.brigadier.exceptions.BuiltInExceptionProvider;\n+import com.mojang.brigadier.exceptions.CommandExceptionType;\n+import com.mojang.brigadier.exceptions.CommandSyntaxException;\n+import com.mojang.brigadier.tree.CommandNode;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.command.CommandException;\n+import net.minecraft.text.Text;\n+import net.minecraft.text.Texts;\n+import net.minecraft.text.TranslatableText;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.command.v1.FabricClientCommandSource;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientCommandInternals {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate static final char PREFIX = '/';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA2NDE4NA=="}, "originalCommit": {"oid": "527f292bdbef03b35ccc9f3aaa3f3f207120bf1b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcyMDQ0Mw==", "bodyText": "Which seems a bit weird, because it doesn't seem to handle conflict very well.\nLike if a mod register a command a and the server also has a command a what happens?\nCustom prefixes could partially fix this issue, but at the same time some custom prefixes might be weird/annoying.\nClient commands having the same prefix as everything else doesn't seem very user-friendly in the end.", "url": "https://github.com/FabricMC/fabric/pull/1115#discussion_r561720443", "createdAt": "2021-01-21T09:25:26Z", "author": {"login": "LambdAurora"}, "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/impl/command/client/ClientCommandInternals.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.command.client;\n+\n+import static net.fabricmc.fabric.api.client.command.v1.ClientCommandManager.DISPATCHER;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.mojang.brigadier.AmbiguityConsumer;\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.builder.ArgumentBuilder;\n+import com.mojang.brigadier.exceptions.BuiltInExceptionProvider;\n+import com.mojang.brigadier.exceptions.CommandExceptionType;\n+import com.mojang.brigadier.exceptions.CommandSyntaxException;\n+import com.mojang.brigadier.tree.CommandNode;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.command.CommandException;\n+import net.minecraft.text.Text;\n+import net.minecraft.text.Texts;\n+import net.minecraft.text.TranslatableText;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.command.v1.FabricClientCommandSource;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientCommandInternals {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate static final char PREFIX = '/';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA2NDE4NA=="}, "originalCommit": {"oid": "527f292bdbef03b35ccc9f3aaa3f3f207120bf1b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTczNzQzNQ==", "bodyText": "Like if a mod register a command a and the server also has a command a what happens?\n\nI actually haven't tested this, but with the current impl the client command should override the server command. It might be more sensible to reverse that behaviour.\n@modmuss50 Should we reconsider custom prefixes for compatibility with servers? I'm not sure whether there should use only /, only some client-specific character (say, #) or to have the full prefix support again.", "url": "https://github.com/FabricMC/fabric/pull/1115#discussion_r561737435", "createdAt": "2021-01-21T09:49:42Z", "author": {"login": "Juuxel"}, "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/impl/command/client/ClientCommandInternals.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.command.client;\n+\n+import static net.fabricmc.fabric.api.client.command.v1.ClientCommandManager.DISPATCHER;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.mojang.brigadier.AmbiguityConsumer;\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.builder.ArgumentBuilder;\n+import com.mojang.brigadier.exceptions.BuiltInExceptionProvider;\n+import com.mojang.brigadier.exceptions.CommandExceptionType;\n+import com.mojang.brigadier.exceptions.CommandSyntaxException;\n+import com.mojang.brigadier.tree.CommandNode;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.command.CommandException;\n+import net.minecraft.text.Text;\n+import net.minecraft.text.Texts;\n+import net.minecraft.text.TranslatableText;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.command.v1.FabricClientCommandSource;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientCommandInternals {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate static final char PREFIX = '/';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA2NDE4NA=="}, "originalCommit": {"oid": "527f292bdbef03b35ccc9f3aaa3f3f207120bf1b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc0MDY1MA==", "bodyText": "I don't know if it's possible, but for the conflict situation I would like to see the Bukkit behavior which is to add namespace: at the start of the command.", "url": "https://github.com/FabricMC/fabric/pull/1115#discussion_r561740650", "createdAt": "2021-01-21T09:54:41Z", "author": {"login": "LambdAurora"}, "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/impl/command/client/ClientCommandInternals.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.command.client;\n+\n+import static net.fabricmc.fabric.api.client.command.v1.ClientCommandManager.DISPATCHER;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.mojang.brigadier.AmbiguityConsumer;\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.builder.ArgumentBuilder;\n+import com.mojang.brigadier.exceptions.BuiltInExceptionProvider;\n+import com.mojang.brigadier.exceptions.CommandExceptionType;\n+import com.mojang.brigadier.exceptions.CommandSyntaxException;\n+import com.mojang.brigadier.tree.CommandNode;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.command.CommandException;\n+import net.minecraft.text.Text;\n+import net.minecraft.text.Texts;\n+import net.minecraft.text.TranslatableText;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.command.v1.FabricClientCommandSource;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientCommandInternals {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate static final char PREFIX = '/';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA2NDE4NA=="}, "originalCommit": {"oid": "527f292bdbef03b35ccc9f3aaa3f3f207120bf1b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk1Njk2Mw==", "bodyText": "namespace:command is fairly pointless when you can do namespace command", "url": "https://github.com/FabricMC/fabric/pull/1115#discussion_r561956963", "createdAt": "2021-01-21T15:10:57Z", "author": {"login": "liach"}, "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/impl/command/client/ClientCommandInternals.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.command.client;\n+\n+import static net.fabricmc.fabric.api.client.command.v1.ClientCommandManager.DISPATCHER;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.mojang.brigadier.AmbiguityConsumer;\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.builder.ArgumentBuilder;\n+import com.mojang.brigadier.exceptions.BuiltInExceptionProvider;\n+import com.mojang.brigadier.exceptions.CommandExceptionType;\n+import com.mojang.brigadier.exceptions.CommandSyntaxException;\n+import com.mojang.brigadier.tree.CommandNode;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.command.CommandException;\n+import net.minecraft.text.Text;\n+import net.minecraft.text.Texts;\n+import net.minecraft.text.TranslatableText;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.command.v1.FabricClientCommandSource;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientCommandInternals {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate static final char PREFIX = '/';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA2NDE4NA=="}, "originalCommit": {"oid": "527f292bdbef03b35ccc9f3aaa3f3f207120bf1b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTg4NzUzMQ==", "bodyText": "A custom prefix is out of scope for the initial PR at least, IMO the best solution is to eventually:\n\ngive precedence to server side commands\nuse /fcc x to always run the client command /x\n\nThis will resolve the ambiguity cleanly, as long as nothing else claims /fcc, which me might exclude from the server precedence.", "url": "https://github.com/FabricMC/fabric/pull/1115#discussion_r575887531", "createdAt": "2021-02-15T00:08:45Z", "author": {"login": "sfPlayer1"}, "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/impl/command/client/ClientCommandInternals.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.command.client;\n+\n+import static net.fabricmc.fabric.api.client.command.v1.ClientCommandManager.DISPATCHER;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.mojang.brigadier.AmbiguityConsumer;\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.builder.ArgumentBuilder;\n+import com.mojang.brigadier.exceptions.BuiltInExceptionProvider;\n+import com.mojang.brigadier.exceptions.CommandExceptionType;\n+import com.mojang.brigadier.exceptions.CommandSyntaxException;\n+import com.mojang.brigadier.tree.CommandNode;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.command.CommandException;\n+import net.minecraft.text.Text;\n+import net.minecraft.text.Texts;\n+import net.minecraft.text.TranslatableText;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.command.v1.FabricClientCommandSource;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientCommandInternals {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate static final char PREFIX = '/';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA2NDE4NA=="}, "originalCommit": {"oid": "527f292bdbef03b35ccc9f3aaa3f3f207120bf1b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTg4ODk0Mw==", "bodyText": "I feel like /fcc should just be a shortcut to a full /fabricclientcommand or whatever, much like /tp is a short alias for /teleport. It lets people find it if they don't know the acronym, and if they do then they can type it quickly.", "url": "https://github.com/FabricMC/fabric/pull/1115#discussion_r575888943", "createdAt": "2021-02-15T00:18:06Z", "author": {"login": "Prospector"}, "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/impl/command/client/ClientCommandInternals.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.command.client;\n+\n+import static net.fabricmc.fabric.api.client.command.v1.ClientCommandManager.DISPATCHER;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.mojang.brigadier.AmbiguityConsumer;\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.builder.ArgumentBuilder;\n+import com.mojang.brigadier.exceptions.BuiltInExceptionProvider;\n+import com.mojang.brigadier.exceptions.CommandExceptionType;\n+import com.mojang.brigadier.exceptions.CommandSyntaxException;\n+import com.mojang.brigadier.tree.CommandNode;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.command.CommandException;\n+import net.minecraft.text.Text;\n+import net.minecraft.text.Texts;\n+import net.minecraft.text.TranslatableText;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.command.v1.FabricClientCommandSource;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ClientCommandInternals {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate static final char PREFIX = '/';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA2NDE4NA=="}, "originalCommit": {"oid": "527f292bdbef03b35ccc9f3aaa3f3f207120bf1b"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3486, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}