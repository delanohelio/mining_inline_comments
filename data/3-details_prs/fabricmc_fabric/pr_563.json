{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDg3NDk3", "number": 563, "title": "Add a hook for BuiltinModelItemRenderer", "bodyText": "Closes #488.\nThis hook allows modders to register \"builtin renderers\" for their items, which can be used to render their items with custom code such as BERs.", "createdAt": "2020-04-10T22:12:24Z", "url": "https://github.com/FabricMC/fabric/pull/563", "merged": true, "mergeCommit": {"oid": "2a034f0a880124a32de84985f3a3771fc7002ea8"}, "closed": true, "closedAt": "2020-04-29T23:05:40Z", "author": {"login": "Juuxel"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWYlMnAH2gAyNDAyMDg3NDk3OmZlNTNhY2NlOTc0YjI1ZGNmYjQ5M2Y4ODBhOTkzMTg5NjQ1ODkzNTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaGTI_gH2gAyNDAyMDg3NDk3OmM0OTliNTFhNGUyNmYxZWExZjI2YWZkODQzODM4YjA3ODQxNDQ3ZDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fe53acce974b25dcfb493f880a99318964589357", "author": {"user": {"login": "Juuxel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/fe53acce974b25dcfb493f880a99318964589357", "committedDate": "2020-04-10T22:10:46Z", "message": "Add builtin item renderers\n\nCloses #488."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71565c5db6cbc40da74bb99e68b555de3a457fef", "author": {"user": {"login": "Juuxel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/71565c5db6cbc40da74bb99e68b555de3a457fef", "committedDate": "2020-04-10T22:18:13Z", "message": "Bump fabric-rendering-v1 to 1.0.0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjg4NTI3", "url": "https://github.com/FabricMC/fabric/pull/563#pullrequestreview-391688527", "createdAt": "2020-04-10T22:17:55Z", "commit": {"oid": "fe53acce974b25dcfb493f880a99318964589357"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoxNzo1NVrOGEHPRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoyMTozMVrOGEHSjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjA4NQ==", "bodyText": "I personally think this should be abstract but it won't break anything if it weren't.", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406966085", "createdAt": "2020-04-10T22:17:55Z", "author": {"login": "i509VCB"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package net.fabricmc.fabric.mixin.client.rendering;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.item.BuiltinModelItemRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+@Mixin(BuiltinModelItemRenderer.class)\n+class MixinBuiltinModelItemRenderer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe53acce974b25dcfb493f880a99318964589357"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjI3Nw==", "bodyText": "The impl will throw an exception if the item render is already registered to the item. I would recommend documenting that functionality", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406966277", "createdAt": "2020-04-10T22:18:49Z", "author": {"login": "i509VCB"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+/**\n+ * This registry holds {@linkplain BuiltinItemRenderer builtin item renderers} for items.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface BuiltinItemRendererRegistry {\n+\tBuiltinItemRendererRegistry INSTANCE = BuiltinItemRendererRegistryImpl.INSTANCE;\n+\n+\t/**\n+\t * Registers the renderer for the item.\n+\t *\n+\t * <p>Note that the item's JSON model must also extend {@code minecraft:builtin/entity}.\n+\t *\n+\t * @param item the item\n+\t * @param renderer the renderer\n+\t */\n+\tvoid register(Item item, BuiltinItemRenderer renderer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe53acce974b25dcfb493f880a99318964589357"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjY4MQ==", "bodyText": "I would recommend spitting out the Identifier this item is registered under rather than potentially having a jumbled mess.\nIf it isn't in the registry then obviously throw that as well", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406966681", "createdAt": "2020-04-10T22:20:19Z", "author": {"login": "i509VCB"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tif (RENDERERS.containsKey(item)) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + item + \" already has a builtin renderer!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71565c5db6cbc40da74bb99e68b555de3a457fef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjkyNQ==", "bodyText": "We don't have annotations yet for nullability we agree on, so a simple /* NULLABLE */ comment would be nice for when we go back to manage these", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406966925", "createdAt": "2020-04-10T22:21:31Z", "author": {"login": "i509VCB"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tif (RENDERERS.containsKey(item)) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + item + \" already has a builtin renderer!\");\n+\t\t}\n+\n+\t\tRENDERERS.put(item, renderer);\n+\t}\n+\n+\tpublic static BuiltinItemRenderer getRenderer(Item item) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71565c5db6cbc40da74bb99e68b555de3a457fef"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjkwNzYy", "url": "https://github.com/FabricMC/fabric/pull/563#pullrequestreview-391690762", "createdAt": "2020-04-10T22:26:19Z", "commit": {"oid": "71565c5db6cbc40da74bb99e68b555de3a457fef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoyNjoxOVrOGEHXXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoyNjoxOVrOGEHXXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODE1Ng==", "bodyText": "Hmm, should this injection be at head and return early instead? I don't see a point of having it in tail (i.e. waiting for all the vanilla if branch checks)", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406968156", "createdAt": "2020-04-10T22:26:19Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package net.fabricmc.fabric.mixin.client.rendering;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.item.BuiltinModelItemRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+@Mixin(BuiltinModelItemRenderer.class)\n+class MixinBuiltinModelItemRenderer {\n+\t@Inject(method = \"render\", at = @At(\"RETURN\"))\n+\tprivate void fabric_onRender(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay, CallbackInfo info) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71565c5db6cbc40da74bb99e68b555de3a457fef"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9703cf73c04c87d9aa845885bf2346b2b913685", "author": {"user": {"login": "Juuxel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/b9703cf73c04c87d9aa845885bf2346b2b913685", "committedDate": "2020-04-10T22:28:58Z", "message": "Code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjkxNTM0", "url": "https://github.com/FabricMC/fabric/pull/563#pullrequestreview-391691534", "createdAt": "2020-04-10T22:29:21Z", "commit": {"oid": "b9703cf73c04c87d9aa845885bf2346b2b913685"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoyOToyMVrOGEHaUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozMTo0OVrOGEHchg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODkxMg==", "bodyText": "Oops license", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406968912", "createdAt": "2020-04-10T22:29:21Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package net.fabricmc.fabric.api.client.rendering.v1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9703cf73c04c87d9aa845885bf2346b2b913685"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTA3Mw==", "bodyText": "Mind document this method (esp. parameters of light, overlay to show they are rgb)", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406969073", "createdAt": "2020-04-10T22:30:05Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Builtin item renderers render items with custom code.\n+ * They allow using non-model rendering, such as BERs, for items.\n+ *\n+ * <p>An item with a builtin renderer must have a model extending {@code minecraft:builtin/entity}.\n+ * The renderers are registered with {@link BuiltinItemRendererRegistry#register}.\n+ */\n+@Environment(EnvType.CLIENT)\n+@FunctionalInterface\n+public interface BuiltinItemRenderer {\n+\tvoid render(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9703cf73c04c87d9aa845885bf2346b2b913685"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTIwOQ==", "bodyText": "Maybe note that this is how to get a renderer (some people have asked such questions on discord before)", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406969209", "createdAt": "2020-04-10T22:30:36Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+/**\n+ * This registry holds {@linkplain BuiltinItemRenderer builtin item renderers} for items.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface BuiltinItemRendererRegistry {\n+\tBuiltinItemRendererRegistry INSTANCE = BuiltinItemRendererRegistryImpl.INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9703cf73c04c87d9aa845885bf2346b2b913685"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTQ3OA==", "bodyText": "Can just do\n\t\tif (RENDERERS.put(item, renderer) != null) {\n\t\t\tthrow new IllegalArgumentException(\"Item \" + Registry.ITEM.getId(item) + \" already has a builtin renderer!\");\n\t\t}", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406969478", "createdAt": "2020-04-10T22:31:49Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tif (RENDERERS.containsKey(item)) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + Registry.ITEM.getId(item) + \" already has a builtin renderer!\");\n+\t\t}\n+\n+\t\tRENDERERS.put(item, renderer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9703cf73c04c87d9aa845885bf2346b2b913685"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5f1bf04a2a0b4a3f842e7b0c9facf5a9a931267", "author": {"user": {"login": "Juuxel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/d5f1bf04a2a0b4a3f842e7b0c9facf5a9a931267", "committedDate": "2020-04-10T22:45:32Z", "message": "Add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e5f1d022ba820ea9a26f4348572324a8e247125", "author": {"user": {"login": "Juuxel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/9e5f1d022ba820ea9a26f4348572324a8e247125", "committedDate": "2020-04-10T22:47:25Z", "message": "Code review II\n\nCo-authored-by: liach <liach@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d88f325efc73f1334da19dc9e906dd25f3272ea", "author": {"user": {"login": "Juuxel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/1d88f325efc73f1334da19dc9e906dd25f3272ea", "committedDate": "2020-04-10T22:48:00Z", "message": "Add missing license headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjk3OTYx", "url": "https://github.com/FabricMC/fabric/pull/563#pullrequestreview-391697961", "createdAt": "2020-04-10T22:55:41Z", "commit": {"oid": "1d88f325efc73f1334da19dc9e906dd25f3272ea"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzkyMDk4", "url": "https://github.com/FabricMC/fabric/pull/563#pullrequestreview-391792098", "createdAt": "2020-04-11T19:01:10Z", "commit": {"oid": "1d88f325efc73f1334da19dc9e906dd25f3272ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTowMToxMVrOGEPV9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTowMToxMVrOGEPV9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODg3MQ==", "bodyText": "Im really not a fan of using enums for singletons.", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r407098871", "createdAt": "2020-04-11T19:01:11Z", "author": {"login": "modmuss50"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d88f325efc73f1334da19dc9e906dd25f3272ea"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzkyMTU2", "url": "https://github.com/FabricMC/fabric/pull/563#pullrequestreview-391792156", "createdAt": "2020-04-11T19:01:54Z", "commit": {"oid": "1d88f325efc73f1334da19dc9e906dd25f3272ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTowMTo1NVrOGEPWMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTowMTo1NVrOGEPWMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODkzMQ==", "bodyText": "0.2.0", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r407098931", "createdAt": "2020-04-11T19:01:55Z", "author": {"login": "modmuss50"}, "path": "fabric-rendering-v1/build.gradle", "diffHunk": "@@ -1,5 +1,5 @@\n archivesBaseName = \"fabric-rendering-v1\"\n-version = getSubprojectVersion(project, \"0.1.0\")\n+version = getSubprojectVersion(project, \"1.0.0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d88f325efc73f1334da19dc9e906dd25f3272ea"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fae020880680eafd6d241f51683c0ee7cc2fdef8", "author": {"user": {"login": "Juuxel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/fae020880680eafd6d241f51683c0ee7cc2fdef8", "committedDate": "2020-04-12T00:07:14Z", "message": "Switch to ugly class singletons"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTgxNDAz", "url": "https://github.com/FabricMC/fabric/pull/563#pullrequestreview-393181403", "createdAt": "2020-04-14T18:19:17Z", "commit": {"oid": "fae020880680eafd6d241f51683c0ee7cc2fdef8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMjM5NTMy", "url": "https://github.com/FabricMC/fabric/pull/563#pullrequestreview-393239532", "createdAt": "2020-04-14T19:42:19Z", "commit": {"oid": "fae020880680eafd6d241f51683c0ee7cc2fdef8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo0MjoxOVrOGFeHiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo0MjoxOVrOGFeHiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4OTUxMw==", "bodyText": "Would an IdentityHashMap do better over a hash map here? (unsure so some explanation would be nice)", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r408389513", "createdAt": "2020-04-14T19:42:19Z", "author": {"login": "i509VCB"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public final class BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tpublic static final BuiltinItemRendererRegistryImpl INSTANCE = new BuiltinItemRendererRegistryImpl();\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fae020880680eafd6d241f51683c0ee7cc2fdef8"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MzQyNTQ3", "url": "https://github.com/FabricMC/fabric/pull/563#pullrequestreview-394342547", "createdAt": "2020-04-16T06:51:00Z", "commit": {"oid": "fae020880680eafd6d241f51683c0ee7cc2fdef8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MzUxMDQ4", "url": "https://github.com/FabricMC/fabric/pull/563#pullrequestreview-394351048", "createdAt": "2020-04-16T07:06:08Z", "commit": {"oid": "fae020880680eafd6d241f51683c0ee7cc2fdef8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MDA3NTU2", "url": "https://github.com/FabricMC/fabric/pull/563#pullrequestreview-398007556", "createdAt": "2020-04-22T09:26:43Z", "commit": {"oid": "fae020880680eafd6d241f51683c0ee7cc2fdef8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23d9eb8a60450751e99e9230db67effbe306094c", "author": {"user": {"login": "Juuxel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/23d9eb8a60450751e99e9230db67effbe306094c", "committedDate": "2020-04-22T10:13:43Z", "message": "Add null checks to BuiltinItemRendererRegistry.register"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MDY4OTI0", "url": "https://github.com/FabricMC/fabric/pull/563#pullrequestreview-398068924", "createdAt": "2020-04-22T10:49:07Z", "commit": {"oid": "23d9eb8a60450751e99e9230db67effbe306094c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo0OTowOFrOGJv-dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1MToyMFrOGJwDmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NjQwNg==", "bodyText": "Someone could deliberately overwrite one by catching the IllegalArgumentException. Maybe this is sensible, or maybe not. I would expect mods to be able to overwrite existing entries if they want to deliberately do that.", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412876406", "createdAt": "2020-04-22T10:49:08Z", "author": {"login": "immibis"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public final class BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tpublic static final BuiltinItemRendererRegistryImpl INSTANCE = new BuiltinItemRendererRegistryImpl();\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\tprivate BuiltinItemRendererRegistryImpl() {\n+\t}\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tObjects.requireNonNull(item, \"item is null\");\n+\t\tObjects.requireNonNull(renderer, \"renderer is null\");\n+\n+\t\tif (RENDERERS.put(item, renderer) != null) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + Registry.ITEM.getId(item) + \" already has a builtin renderer!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23d9eb8a60450751e99e9230db67effbe306094c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzAyOA==", "bodyText": "The name \"builtin\" makes me think you are talking about vanilla rendering code. Like \"builtin\" vs \"modded\"", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412877028", "createdAt": "2020-04-22T10:50:17Z", "author": {"login": "immibis"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Builtin item renderers render items with custom code.\n+ * They allow using non-model rendering, such as BERs, for items.\n+ *\n+ * <p>An item with a builtin renderer must have a model extending {@code minecraft:builtin/entity}.\n+ * The renderers are registered with {@link BuiltinItemRendererRegistry#register}.\n+ */\n+@Environment(EnvType.CLIENT)\n+@FunctionalInterface\n+public interface BuiltinItemRenderer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23d9eb8a60450751e99e9230db67effbe306094c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzcyMw==", "bodyText": "I thought the purpose of Fabric API was to provide shared hooks where necessary to stop mods from conflicting or where mixins are impractical? This looks like an easy non-conflicting mixin for individual mods. Is it just for performance?", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412877723", "createdAt": "2020-04-22T10:51:20Z", "author": {"login": "immibis"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.client.rendering;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.item.BuiltinModelItemRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+@Mixin(BuiltinModelItemRenderer.class)\n+abstract class MixinBuiltinModelItemRenderer {\n+\t@Inject(method = \"render\", at = @At(\"HEAD\"), cancellable = true)\n+\tprivate void fabric_onRender(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay, CallbackInfo info) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23d9eb8a60450751e99e9230db67effbe306094c"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c499b51a4e26f1ea1f26afd843838b07841447d1", "author": {"user": {"login": "Juuxel", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/c499b51a4e26f1ea1f26afd843838b07841447d1", "committedDate": "2020-04-22T11:08:27Z", "message": "Protect against overwriting others' renderers by catching exceptions"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3416, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}