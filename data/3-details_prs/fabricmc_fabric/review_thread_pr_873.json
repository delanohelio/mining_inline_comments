{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1ODg0OTEx", "number": 873, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToxMzo1NFrOEMcM0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo0NDozNlrOESJAXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDgwNDAxOnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/RegisterFeatureRendererCallback.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToxMzo1NFrOGujM6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo0MToxOVrOGuwdzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2NDQyNg==", "bodyText": "can we create a local generic like <T extends LivingEntity> to simplify and guarantee some generics here", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r451464426", "createdAt": "2020-07-08T11:13:54Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/RegisterFeatureRendererCallback.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import java.util.function.Consumer;\n+\n+import net.minecraft.client.render.entity.LivingEntityRenderer;\n+import net.minecraft.client.render.entity.feature.Deadmau5FeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRenderer;\n+import net.minecraft.client.render.entity.model.EntityModel;\n+import net.minecraft.entity.LivingEntity;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Called when {@link FeatureRenderer feature renderers} for a {@link LivingEntityRenderer living entity renderer} are registered.\n+ *\n+ * <p>Feature renderers are typically used for rendering additional objects on an entity, such as armor, an elytra or {@link Deadmau5FeatureRenderer Deadmau5's ears}.\n+ * This callback lets developers add additional feature renderers for use in entity rendering.\n+ * Listeners should filter out the specific entity renderer they want to hook into, usually through {@code instanceof} checks.\n+ * Once listeners find a suitable entity renderer, they should register their feature renderer via the acceptor.\n+ *\n+ * <p>For example, to register a feature renderer for a player model, the example below may used:\n+ * <blockquote><pre>\n+ * RegisterFeatureRendererCallback.EVENT.register((entityRenderer, acceptor) -> {\n+ * \tif (entityRenderer instanceof PlayerEntityModel) {\n+ * \t\tacceptor.accept(new MyFeatureRenderer((PlayerEntityModel) entityRenderer));\n+ * \t}\n+ * });\n+ * </pre></blockquote>\n+ */\n+@FunctionalInterface\n+@Environment(EnvType.CLIENT)\n+public interface RegisterFeatureRendererCallback {\n+\tEvent<RegisterFeatureRendererCallback> EVENT = EventFactory.createArrayBacked(RegisterFeatureRendererCallback.class, callbacks -> (entityRenderer, acceptor) -> {\n+\t\tfor (RegisterFeatureRendererCallback callback : callbacks) {\n+\t\t\tcallback.registerFeatureRenderers(entityRenderer, acceptor);\n+\t\t}\n+\t});\n+\n+\tvoid registerFeatureRenderers(LivingEntityRenderer<? extends LivingEntity, ? extends EntityModel<? extends LivingEntity>> entityRenderer, Consumer<FeatureRenderer<? extends LivingEntity, ? extends EntityModel<? extends LivingEntity>>> acceptor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d63eef8a7c67660b49d5e5f984260a4d8f0a62b1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1ODQwMA==", "bodyText": "Compiler does not let you do that, it complains that the method is generic", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r451658400", "createdAt": "2020-07-08T16:05:30Z", "author": {"login": "i509VCB"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/RegisterFeatureRendererCallback.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import java.util.function.Consumer;\n+\n+import net.minecraft.client.render.entity.LivingEntityRenderer;\n+import net.minecraft.client.render.entity.feature.Deadmau5FeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRenderer;\n+import net.minecraft.client.render.entity.model.EntityModel;\n+import net.minecraft.entity.LivingEntity;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Called when {@link FeatureRenderer feature renderers} for a {@link LivingEntityRenderer living entity renderer} are registered.\n+ *\n+ * <p>Feature renderers are typically used for rendering additional objects on an entity, such as armor, an elytra or {@link Deadmau5FeatureRenderer Deadmau5's ears}.\n+ * This callback lets developers add additional feature renderers for use in entity rendering.\n+ * Listeners should filter out the specific entity renderer they want to hook into, usually through {@code instanceof} checks.\n+ * Once listeners find a suitable entity renderer, they should register their feature renderer via the acceptor.\n+ *\n+ * <p>For example, to register a feature renderer for a player model, the example below may used:\n+ * <blockquote><pre>\n+ * RegisterFeatureRendererCallback.EVENT.register((entityRenderer, acceptor) -> {\n+ * \tif (entityRenderer instanceof PlayerEntityModel) {\n+ * \t\tacceptor.accept(new MyFeatureRenderer((PlayerEntityModel) entityRenderer));\n+ * \t}\n+ * });\n+ * </pre></blockquote>\n+ */\n+@FunctionalInterface\n+@Environment(EnvType.CLIENT)\n+public interface RegisterFeatureRendererCallback {\n+\tEvent<RegisterFeatureRendererCallback> EVENT = EventFactory.createArrayBacked(RegisterFeatureRendererCallback.class, callbacks -> (entityRenderer, acceptor) -> {\n+\t\tfor (RegisterFeatureRendererCallback callback : callbacks) {\n+\t\t\tcallback.registerFeatureRenderers(entityRenderer, acceptor);\n+\t\t}\n+\t});\n+\n+\tvoid registerFeatureRenderers(LivingEntityRenderer<? extends LivingEntity, ? extends EntityModel<? extends LivingEntity>> entityRenderer, Consumer<FeatureRenderer<? extends LivingEntity, ? extends EntityModel<? extends LivingEntity>>> acceptor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2NDQyNg=="}, "originalCommit": {"oid": "d63eef8a7c67660b49d5e5f984260a4d8f0a62b1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4MTc0MA==", "bodyText": "Really No for this?\n<T extends LivingEntity, M extends EntityModel<T>> void registerFeatureRenderers(LivingEntityRenderer<T, M> entityRenderer, Consumer<FeatureRenderer<T, M>> acceptor);", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r451681740", "createdAt": "2020-07-08T16:41:19Z", "author": {"login": "liach"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/RegisterFeatureRendererCallback.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import java.util.function.Consumer;\n+\n+import net.minecraft.client.render.entity.LivingEntityRenderer;\n+import net.minecraft.client.render.entity.feature.Deadmau5FeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRenderer;\n+import net.minecraft.client.render.entity.model.EntityModel;\n+import net.minecraft.entity.LivingEntity;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Called when {@link FeatureRenderer feature renderers} for a {@link LivingEntityRenderer living entity renderer} are registered.\n+ *\n+ * <p>Feature renderers are typically used for rendering additional objects on an entity, such as armor, an elytra or {@link Deadmau5FeatureRenderer Deadmau5's ears}.\n+ * This callback lets developers add additional feature renderers for use in entity rendering.\n+ * Listeners should filter out the specific entity renderer they want to hook into, usually through {@code instanceof} checks.\n+ * Once listeners find a suitable entity renderer, they should register their feature renderer via the acceptor.\n+ *\n+ * <p>For example, to register a feature renderer for a player model, the example below may used:\n+ * <blockquote><pre>\n+ * RegisterFeatureRendererCallback.EVENT.register((entityRenderer, acceptor) -> {\n+ * \tif (entityRenderer instanceof PlayerEntityModel) {\n+ * \t\tacceptor.accept(new MyFeatureRenderer((PlayerEntityModel) entityRenderer));\n+ * \t}\n+ * });\n+ * </pre></blockquote>\n+ */\n+@FunctionalInterface\n+@Environment(EnvType.CLIENT)\n+public interface RegisterFeatureRendererCallback {\n+\tEvent<RegisterFeatureRendererCallback> EVENT = EventFactory.createArrayBacked(RegisterFeatureRendererCallback.class, callbacks -> (entityRenderer, acceptor) -> {\n+\t\tfor (RegisterFeatureRendererCallback callback : callbacks) {\n+\t\t\tcallback.registerFeatureRenderers(entityRenderer, acceptor);\n+\t\t}\n+\t});\n+\n+\tvoid registerFeatureRenderers(LivingEntityRenderer<? extends LivingEntity, ? extends EntityModel<? extends LivingEntity>> entityRenderer, Consumer<FeatureRenderer<? extends LivingEntity, ? extends EntityModel<? extends LivingEntity>>> acceptor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2NDQyNg=="}, "originalCommit": {"oid": "d63eef8a7c67660b49d5e5f984260a4d8f0a62b1"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTg4MjYzOnYy", "diffSide": "RIGHT", "path": "fabric-renderer-registries-v1/src/main/java/net/fabricmc/fabric/api/client/rendereregistry/v1/RegisterFeatureRendererCallback.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMjoxMTo0N1rOGvnmRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMzoxOToyNVrOGvokJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4NTAyOA==", "bodyText": "imo you should just make this an interface and the impl creates an instance of FeatureAcceptor when it calls the event instead.", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r452585028", "createdAt": "2020-07-10T02:11:47Z", "author": {"login": "liach"}, "path": "fabric-renderer-registries-v1/src/main/java/net/fabricmc/fabric/api/client/rendereregistry/v1/RegisterFeatureRendererCallback.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.rendereregistry.v1;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+import net.minecraft.client.render.entity.LivingEntityRenderer;\n+import net.minecraft.client.render.entity.feature.Deadmau5FeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRenderer;\n+import net.minecraft.client.render.entity.model.EntityModel;\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Called when {@link FeatureRenderer feature renderers} for a {@link LivingEntityRenderer living entity renderer} are registered.\n+ *\n+ * <p>Feature renderers are typically used for rendering additional objects on an entity, such as armor, an elytra or {@link Deadmau5FeatureRenderer Deadmau5's ears}.\n+ * This callback lets developers add additional feature renderers for use in entity rendering.\n+ * Listeners should filter out the specific entity renderer they want to hook into, usually through {@code instanceof} checks.\n+ * Once listeners find a suitable entity renderer, they should register their feature renderer via the acceptor.\n+ *\n+ * <p>For example, to register a feature renderer for a player model, the example below may used:\n+ * <blockquote><pre>\n+ * RegisterFeatureRendererCallback.EVENT.register((entityType, entityRenderer, acceptor) -> {\n+ * \tif (entityRenderer instanceof PlayerEntityModel) {\n+ * \t\tacceptor.accept(new MyFeatureRenderer((PlayerEntityModel) entityRenderer));\n+ *    }\n+ * });\n+ * </pre></blockquote>\n+ */\n+@FunctionalInterface\n+@Environment(EnvType.CLIENT)\n+public interface RegisterFeatureRendererCallback {\n+\tEvent<RegisterFeatureRendererCallback> EVENT = EventFactory.createArrayBacked(RegisterFeatureRendererCallback.class, callbacks -> (entityType, entityRenderer, acceptor) -> {\n+\t\tfor (RegisterFeatureRendererCallback callback : callbacks) {\n+\t\t\tcallback.registerFeatureRenderers(entityType, entityRenderer, acceptor);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when feature renderers may be registered.\n+\t *\n+\t * @param entityType     the entity type of the renderer\n+\t * @param entityRenderer the entity renderer\n+\t * @param acceptor       the accepted used to register feature renderers\n+\t */\n+\tvoid registerFeatureRenderers(EntityType<? extends LivingEntity> entityType, LivingEntityRenderer<?, ?> entityRenderer, FeatureAcceptor acceptor);\n+\n+\tfinal class FeatureAcceptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe32c8f418afa6fad315f1251f232507ede48bb"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU5OTYxMg==", "bodyText": "I'll consider it. Could even implement it onto living entity renderer itself if I went for an interface (but that would not be part of docs and an impl detail", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r452599612", "createdAt": "2020-07-10T03:13:34Z", "author": {"login": "i509VCB"}, "path": "fabric-renderer-registries-v1/src/main/java/net/fabricmc/fabric/api/client/rendereregistry/v1/RegisterFeatureRendererCallback.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.rendereregistry.v1;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+import net.minecraft.client.render.entity.LivingEntityRenderer;\n+import net.minecraft.client.render.entity.feature.Deadmau5FeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRenderer;\n+import net.minecraft.client.render.entity.model.EntityModel;\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Called when {@link FeatureRenderer feature renderers} for a {@link LivingEntityRenderer living entity renderer} are registered.\n+ *\n+ * <p>Feature renderers are typically used for rendering additional objects on an entity, such as armor, an elytra or {@link Deadmau5FeatureRenderer Deadmau5's ears}.\n+ * This callback lets developers add additional feature renderers for use in entity rendering.\n+ * Listeners should filter out the specific entity renderer they want to hook into, usually through {@code instanceof} checks.\n+ * Once listeners find a suitable entity renderer, they should register their feature renderer via the acceptor.\n+ *\n+ * <p>For example, to register a feature renderer for a player model, the example below may used:\n+ * <blockquote><pre>\n+ * RegisterFeatureRendererCallback.EVENT.register((entityType, entityRenderer, acceptor) -> {\n+ * \tif (entityRenderer instanceof PlayerEntityModel) {\n+ * \t\tacceptor.accept(new MyFeatureRenderer((PlayerEntityModel) entityRenderer));\n+ *    }\n+ * });\n+ * </pre></blockquote>\n+ */\n+@FunctionalInterface\n+@Environment(EnvType.CLIENT)\n+public interface RegisterFeatureRendererCallback {\n+\tEvent<RegisterFeatureRendererCallback> EVENT = EventFactory.createArrayBacked(RegisterFeatureRendererCallback.class, callbacks -> (entityType, entityRenderer, acceptor) -> {\n+\t\tfor (RegisterFeatureRendererCallback callback : callbacks) {\n+\t\t\tcallback.registerFeatureRenderers(entityType, entityRenderer, acceptor);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when feature renderers may be registered.\n+\t *\n+\t * @param entityType     the entity type of the renderer\n+\t * @param entityRenderer the entity renderer\n+\t * @param acceptor       the accepted used to register feature renderers\n+\t */\n+\tvoid registerFeatureRenderers(EntityType<? extends LivingEntity> entityType, LivingEntityRenderer<?, ?> entityRenderer, FeatureAcceptor acceptor);\n+\n+\tfinal class FeatureAcceptor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4NTAyOA=="}, "originalCommit": {"oid": "cbe32c8f418afa6fad315f1251f232507ede48bb"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwMDg2OQ==", "bodyText": "Exposing this in the api defeats the point of abstraction; users don't need to know how this interface is implemented.", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r452600869", "createdAt": "2020-07-10T03:19:25Z", "author": {"login": "liach"}, "path": "fabric-renderer-registries-v1/src/main/java/net/fabricmc/fabric/api/client/rendereregistry/v1/RegisterFeatureRendererCallback.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.rendereregistry.v1;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+import net.minecraft.client.render.entity.LivingEntityRenderer;\n+import net.minecraft.client.render.entity.feature.Deadmau5FeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRenderer;\n+import net.minecraft.client.render.entity.model.EntityModel;\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Called when {@link FeatureRenderer feature renderers} for a {@link LivingEntityRenderer living entity renderer} are registered.\n+ *\n+ * <p>Feature renderers are typically used for rendering additional objects on an entity, such as armor, an elytra or {@link Deadmau5FeatureRenderer Deadmau5's ears}.\n+ * This callback lets developers add additional feature renderers for use in entity rendering.\n+ * Listeners should filter out the specific entity renderer they want to hook into, usually through {@code instanceof} checks.\n+ * Once listeners find a suitable entity renderer, they should register their feature renderer via the acceptor.\n+ *\n+ * <p>For example, to register a feature renderer for a player model, the example below may used:\n+ * <blockquote><pre>\n+ * RegisterFeatureRendererCallback.EVENT.register((entityType, entityRenderer, acceptor) -> {\n+ * \tif (entityRenderer instanceof PlayerEntityModel) {\n+ * \t\tacceptor.accept(new MyFeatureRenderer((PlayerEntityModel) entityRenderer));\n+ *    }\n+ * });\n+ * </pre></blockquote>\n+ */\n+@FunctionalInterface\n+@Environment(EnvType.CLIENT)\n+public interface RegisterFeatureRendererCallback {\n+\tEvent<RegisterFeatureRendererCallback> EVENT = EventFactory.createArrayBacked(RegisterFeatureRendererCallback.class, callbacks -> (entityType, entityRenderer, acceptor) -> {\n+\t\tfor (RegisterFeatureRendererCallback callback : callbacks) {\n+\t\t\tcallback.registerFeatureRenderers(entityType, entityRenderer, acceptor);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when feature renderers may be registered.\n+\t *\n+\t * @param entityType     the entity type of the renderer\n+\t * @param entityRenderer the entity renderer\n+\t * @param acceptor       the accepted used to register feature renderers\n+\t */\n+\tvoid registerFeatureRenderers(EntityType<? extends LivingEntity> entityType, LivingEntityRenderer<?, ?> entityRenderer, FeatureAcceptor acceptor);\n+\n+\tfinal class FeatureAcceptor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4NTAyOA=="}, "originalCommit": {"oid": "cbe32c8f418afa6fad315f1251f232507ede48bb"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDU3MzcyOnYy", "diffSide": "RIGHT", "path": "fabric-renderer-registries-v1/src/testmod/java/net/fabricmc/fabric/test/renderer/registry/FeatureRendererTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTo0NDozNlrOG3LuHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNjoxNzowOVrOG3Ne2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNjg5Mw==", "bodyText": "Unless im blind I dont see this being added to the test mod json?", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r460516893", "createdAt": "2020-07-26T11:44:36Z", "author": {"login": "modmuss50"}, "path": "fabric-renderer-registries-v1/src/testmod/java/net/fabricmc/fabric/test/renderer/registry/FeatureRendererTests.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.renderer.registry;\n+\n+import net.minecraft.client.network.AbstractClientPlayerEntity;\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.entity.ArmorStandEntityRenderer;\n+import net.minecraft.client.render.entity.BipedEntityRenderer;\n+import net.minecraft.client.render.entity.LivingEntityRenderer;\n+import net.minecraft.client.render.entity.PlayerEntityRenderer;\n+import net.minecraft.client.render.entity.feature.ElytraFeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRendererContext;\n+import net.minecraft.client.render.entity.feature.HeldItemFeatureRenderer;\n+import net.minecraft.client.render.entity.model.ArmorStandArmorEntityModel;\n+import net.minecraft.client.render.entity.model.PlayerEntityModel;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.decoration.ArmorStandEntity;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.fabric.api.client.rendereregistry.v1.RegisterFeatureRendererCallback;\n+\n+public class FeatureRendererTests implements ClientModInitializer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f0e7e5aee01a7e64434425370fe27424f3e7f54"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0NTc1Mg==", "bodyText": "This testmod was primarily designed for testing generics on the methods. I'll hook up an actual simple feature to render in a bit.", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r460545752", "createdAt": "2020-07-26T16:17:09Z", "author": {"login": "i509VCB"}, "path": "fabric-renderer-registries-v1/src/testmod/java/net/fabricmc/fabric/test/renderer/registry/FeatureRendererTests.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.renderer.registry;\n+\n+import net.minecraft.client.network.AbstractClientPlayerEntity;\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.entity.ArmorStandEntityRenderer;\n+import net.minecraft.client.render.entity.BipedEntityRenderer;\n+import net.minecraft.client.render.entity.LivingEntityRenderer;\n+import net.minecraft.client.render.entity.PlayerEntityRenderer;\n+import net.minecraft.client.render.entity.feature.ElytraFeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRendererContext;\n+import net.minecraft.client.render.entity.feature.HeldItemFeatureRenderer;\n+import net.minecraft.client.render.entity.model.ArmorStandArmorEntityModel;\n+import net.minecraft.client.render.entity.model.PlayerEntityModel;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.decoration.ArmorStandEntity;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.fabric.api.client.rendereregistry.v1.RegisterFeatureRendererCallback;\n+\n+public class FeatureRendererTests implements ClientModInitializer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNjg5Mw=="}, "originalCommit": {"oid": "0f0e7e5aee01a7e64434425370fe27424f3e7f54"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3399, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}