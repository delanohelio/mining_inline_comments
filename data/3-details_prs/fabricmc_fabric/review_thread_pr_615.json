{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NzI2MzIw", "number": 615, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzoxMDozMlrOD7AHew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjozNDozOFrOECwbow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTk0NDkxOnYy", "diffSide": "RIGHT", "path": "fabric-keybindings-v1/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzoxMDozMlrOGTF4HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzoxMDozMlrOGTF4HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3MjQxMw==", "bodyText": "1.0.0", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r422672413", "createdAt": "2020-05-10T17:10:32Z", "author": {"login": "i509VCB"}, "path": "fabric-keybindings-v1/build.gradle", "diffHunk": "@@ -0,0 +1,7 @@\n+archivesBaseName = \"fabric-keybindings-v1\"\n+version = getSubprojectVersion(project, \"0.1.0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba96129d19b92f64d76e973bc057a5736b73e32e"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTk1MDgxOnYy", "diffSide": "RIGHT", "path": "fabric-keybindings-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzoxNjo0N1rOGTF69g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODozNzowNFrOGTGfqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3MzE0Mg==", "bodyText": "Hmm, maybe instead of this, we have a build and a buildAndRegister method", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r422673142", "createdAt": "2020-05-10T17:16:47Z", "author": {"login": "i509VCB"}, "path": "fabric-keybindings-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {\n+\t\treturn getBoundKeyOf(this);\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @param keyBinding the keybinding\n+\t * @return configured KeyCode\n+\t */\n+\tpublic static InputUtil.KeyCode getBoundKeyOf(KeyBinding keyBinding) {\n+\t\treturn ((KeyCodeAccessor) keyBinding).getKeyCode();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int UNASSIGNED = InputUtil.UNKNOWN_KEYCODE.getKeyCode();\n+\n+\t\tprivate InputUtil.Type type = InputUtil.Type.KEYSYM;\n+\t\tprivate Identifier id = null;\n+\t\tprivate String translationKey;\n+\t\tprivate boolean unassigned = false;\n+\t\tprivate boolean automaticallyRegister = false;\n+\t\tprivate BooleanSupplier toggleFlagSupplier = null;\n+\t\tprivate int code = UNASSIGNED;\n+\t\tprivate String category = KeyCategories.MISC;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key binding id and translation key for this builder.\n+\t\t * <br>\n+\t\t * Key bindings will be assigned a translation key of the format \"key.{namespace}.{path}\"\n+\t\t *\n+\t\t * @param id Unique identifier for the bound key.\n+\t\t */\n+\t\tpublic Builder id(Identifier id) {\n+\t\t\tthis.id = Objects.requireNonNull(id, \"Keybinding's id can not be null!\");\n+\t\t\tthis.translationKey = String.format(\"key.%s.%s\", id.getNamespace(), id.getPath());\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the translation key for the key's category. {@link KeyCategories} for\n+\t\t * all possible values, vanilla values.\n+\t\t *\n+\t\t * @param category The category under which key bindings created by this builder will be grouped.\n+\t\t */\n+\t\tpublic Builder category(String category) {\n+\t\t\tthis.category = Objects.requireNonNull(category, \"Keybinding's category can not be null!\");\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the default key to be used for the key binding created using this builder.\n+\t\t *\n+\t\t * @param keyCode The default key code. Must be a valid key. May not be -1.\n+\t\t */\n+\t\tpublic Builder code(int keyCode) {\n+\t\t\tPreconditions.checkState(keyCode != UNASSIGNED, \"UNASSIGNED is not a valid key code.\");\n+\t\t\tthis.code = keyCode;\n+\t\t\tthis.unassigned = false;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Indicates to this builder that keybindings built through it are intended to be unbound.\n+\t\t */\n+\t\tpublic Builder unassigned() {\n+\t\t\tthis.code = UNASSIGNED;\n+\t\t\tthis.unassigned = true;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets this builder to create sticky keybindings that will toggle their state when pressed.\n+\t\t */\n+\t\tpublic Builder sticky() {\n+\t\t\treturn sticky(() -> true);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets a sticking action to be used by the constructed key binding which can be used to switch between\n+\t\t * a sticky (toggle) and a regular key binding.\n+\t\t *\n+\t\t * @param toggleFlagSupplier A getter function to determine whether to toggle or not. True for toggling behaviour, false otherwise.\n+\t\t */\n+\t\tpublic Builder sticky(BooleanSupplier toggleFlagSupplier) {\n+\t\t\tthis.toggleFlagSupplier = toggleFlagSupplier;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets this builder to auto-register any key bindings created using it.\n+\t\t *\n+\t\t * <p>Mods who intend to register their own key bindings manually may choose not to use this.</p>\n+\t\t */\n+\t\tpublic Builder automaticallyRegister() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba96129d19b92f64d76e973bc057a5736b73e32e"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MjUzNw==", "bodyText": "I would do build().register() if that's nice", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r422682537", "createdAt": "2020-05-10T18:37:04Z", "author": {"login": "shedaniel"}, "path": "fabric-keybindings-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {\n+\t\treturn getBoundKeyOf(this);\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @param keyBinding the keybinding\n+\t * @return configured KeyCode\n+\t */\n+\tpublic static InputUtil.KeyCode getBoundKeyOf(KeyBinding keyBinding) {\n+\t\treturn ((KeyCodeAccessor) keyBinding).getKeyCode();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int UNASSIGNED = InputUtil.UNKNOWN_KEYCODE.getKeyCode();\n+\n+\t\tprivate InputUtil.Type type = InputUtil.Type.KEYSYM;\n+\t\tprivate Identifier id = null;\n+\t\tprivate String translationKey;\n+\t\tprivate boolean unassigned = false;\n+\t\tprivate boolean automaticallyRegister = false;\n+\t\tprivate BooleanSupplier toggleFlagSupplier = null;\n+\t\tprivate int code = UNASSIGNED;\n+\t\tprivate String category = KeyCategories.MISC;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key binding id and translation key for this builder.\n+\t\t * <br>\n+\t\t * Key bindings will be assigned a translation key of the format \"key.{namespace}.{path}\"\n+\t\t *\n+\t\t * @param id Unique identifier for the bound key.\n+\t\t */\n+\t\tpublic Builder id(Identifier id) {\n+\t\t\tthis.id = Objects.requireNonNull(id, \"Keybinding's id can not be null!\");\n+\t\t\tthis.translationKey = String.format(\"key.%s.%s\", id.getNamespace(), id.getPath());\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the translation key for the key's category. {@link KeyCategories} for\n+\t\t * all possible values, vanilla values.\n+\t\t *\n+\t\t * @param category The category under which key bindings created by this builder will be grouped.\n+\t\t */\n+\t\tpublic Builder category(String category) {\n+\t\t\tthis.category = Objects.requireNonNull(category, \"Keybinding's category can not be null!\");\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the default key to be used for the key binding created using this builder.\n+\t\t *\n+\t\t * @param keyCode The default key code. Must be a valid key. May not be -1.\n+\t\t */\n+\t\tpublic Builder code(int keyCode) {\n+\t\t\tPreconditions.checkState(keyCode != UNASSIGNED, \"UNASSIGNED is not a valid key code.\");\n+\t\t\tthis.code = keyCode;\n+\t\t\tthis.unassigned = false;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Indicates to this builder that keybindings built through it are intended to be unbound.\n+\t\t */\n+\t\tpublic Builder unassigned() {\n+\t\t\tthis.code = UNASSIGNED;\n+\t\t\tthis.unassigned = true;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets this builder to create sticky keybindings that will toggle their state when pressed.\n+\t\t */\n+\t\tpublic Builder sticky() {\n+\t\t\treturn sticky(() -> true);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets a sticking action to be used by the constructed key binding which can be used to switch between\n+\t\t * a sticky (toggle) and a regular key binding.\n+\t\t *\n+\t\t * @param toggleFlagSupplier A getter function to determine whether to toggle or not. True for toggling behaviour, false otherwise.\n+\t\t */\n+\t\tpublic Builder sticky(BooleanSupplier toggleFlagSupplier) {\n+\t\t\tthis.toggleFlagSupplier = toggleFlagSupplier;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets this builder to auto-register any key bindings created using it.\n+\t\t *\n+\t\t * <p>Mods who intend to register their own key bindings manually may choose not to use this.</p>\n+\t\t */\n+\t\tpublic Builder automaticallyRegister() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3MzE0Mg=="}, "originalCommit": {"oid": "ba96129d19b92f64d76e973bc057a5736b73e32e"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk1MzM2OnYy", "diffSide": "RIGHT", "path": "fabric-keybindings-v0/src/main/java/net/fabricmc/fabric/api/client/keybinding/FabricKeyBinding.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowMDozNlrOGTrRFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDozNzoyOFrOGTsc5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTAxNA==", "bodyText": "Can probably remove this override?", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r423285014", "createdAt": "2020-05-11T20:00:36Z", "author": {"login": "liach"}, "path": "fabric-keybindings-v0/src/main/java/net/fabricmc/fabric/api/client/keybinding/FabricKeyBinding.java", "diffHunk": "@@ -20,27 +20,31 @@\n import net.minecraft.client.util.InputUtil;\n import net.minecraft.util.Identifier;\n \n-import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n-\n /**\n  * Expanded version of {@link KeyBinding} for use by Fabric mods.\n  *\n  * <p>*ALL* instantiated FabricKeyBindings should be registered in\n- * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!</p>\n+ *\n+ * @deprecated Please migrate to v1. Please use {@link net.fabricmc.fabric.api.client.keybinding.v1.FabricKeyBinding} instead.\n  */\n-public class FabricKeyBinding extends KeyBinding {\n+@Deprecated\n+public class FabricKeyBinding extends net.fabricmc.fabric.api.client.keybinding.v1.FabricKeyBinding {\n \tprotected FabricKeyBinding(Identifier id, InputUtil.Type type, int code, String category) {\n-\t\tsuper(\"key.\" + id.toString().replace(':', '.'), type, code, category);\n+\t\tsuper(id, String.format(\"key.%s.%s\", id.getNamespace(), id.getPath()), type, code, category);\n \t}\n \n \t/**\n \t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n \t * @return configured KeyCode\n \t */\n+\t@Override\n \tpublic InputUtil.KeyCode getBoundKey() {\n-\t\treturn ((KeyCodeAccessor) this).getKeyCode();\n+\t\treturn super.getBoundKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MDE1OQ==", "bodyText": "will it preserve backwards compatibility if I do this? (I am not sure so I did this)", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r423290159", "createdAt": "2020-05-11T20:10:39Z", "author": {"login": "shedaniel"}, "path": "fabric-keybindings-v0/src/main/java/net/fabricmc/fabric/api/client/keybinding/FabricKeyBinding.java", "diffHunk": "@@ -20,27 +20,31 @@\n import net.minecraft.client.util.InputUtil;\n import net.minecraft.util.Identifier;\n \n-import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n-\n /**\n  * Expanded version of {@link KeyBinding} for use by Fabric mods.\n  *\n  * <p>*ALL* instantiated FabricKeyBindings should be registered in\n- * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!</p>\n+ *\n+ * @deprecated Please migrate to v1. Please use {@link net.fabricmc.fabric.api.client.keybinding.v1.FabricKeyBinding} instead.\n  */\n-public class FabricKeyBinding extends KeyBinding {\n+@Deprecated\n+public class FabricKeyBinding extends net.fabricmc.fabric.api.client.keybinding.v1.FabricKeyBinding {\n \tprotected FabricKeyBinding(Identifier id, InputUtil.Type type, int code, String category) {\n-\t\tsuper(\"key.\" + id.toString().replace(':', '.'), type, code, category);\n+\t\tsuper(id, String.format(\"key.%s.%s\", id.getNamespace(), id.getPath()), type, code, category);\n \t}\n \n \t/**\n \t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n \t * @return configured KeyCode\n \t */\n+\t@Override\n \tpublic InputUtil.KeyCode getBoundKey() {\n-\t\treturn ((KeyCodeAccessor) this).getKeyCode();\n+\t\treturn super.getBoundKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTAxNA=="}, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MDg3Mg==", "bodyText": "Make the v0 use a delegate class internally like how I did FabricBlockSettings v1", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r423290872", "createdAt": "2020-05-11T20:12:06Z", "author": {"login": "i509VCB"}, "path": "fabric-keybindings-v0/src/main/java/net/fabricmc/fabric/api/client/keybinding/FabricKeyBinding.java", "diffHunk": "@@ -20,27 +20,31 @@\n import net.minecraft.client.util.InputUtil;\n import net.minecraft.util.Identifier;\n \n-import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n-\n /**\n  * Expanded version of {@link KeyBinding} for use by Fabric mods.\n  *\n  * <p>*ALL* instantiated FabricKeyBindings should be registered in\n- * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!</p>\n+ *\n+ * @deprecated Please migrate to v1. Please use {@link net.fabricmc.fabric.api.client.keybinding.v1.FabricKeyBinding} instead.\n  */\n-public class FabricKeyBinding extends KeyBinding {\n+@Deprecated\n+public class FabricKeyBinding extends net.fabricmc.fabric.api.client.keybinding.v1.FabricKeyBinding {\n \tprotected FabricKeyBinding(Identifier id, InputUtil.Type type, int code, String category) {\n-\t\tsuper(\"key.\" + id.toString().replace(':', '.'), type, code, category);\n+\t\tsuper(id, String.format(\"key.%s.%s\", id.getNamespace(), id.getPath()), type, code, category);\n \t}\n \n \t/**\n \t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n \t * @return configured KeyCode\n \t */\n+\t@Override\n \tpublic InputUtil.KeyCode getBoundKey() {\n-\t\treturn ((KeyCodeAccessor) this).getKeyCode();\n+\t\treturn super.getBoundKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTAxNA=="}, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTg0NA==", "bodyText": "but the v0 one extends Keybinding anyways", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r423291844", "createdAt": "2020-05-11T20:13:56Z", "author": {"login": "shedaniel"}, "path": "fabric-keybindings-v0/src/main/java/net/fabricmc/fabric/api/client/keybinding/FabricKeyBinding.java", "diffHunk": "@@ -20,27 +20,31 @@\n import net.minecraft.client.util.InputUtil;\n import net.minecraft.util.Identifier;\n \n-import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n-\n /**\n  * Expanded version of {@link KeyBinding} for use by Fabric mods.\n  *\n  * <p>*ALL* instantiated FabricKeyBindings should be registered in\n- * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!</p>\n+ *\n+ * @deprecated Please migrate to v1. Please use {@link net.fabricmc.fabric.api.client.keybinding.v1.FabricKeyBinding} instead.\n  */\n-public class FabricKeyBinding extends KeyBinding {\n+@Deprecated\n+public class FabricKeyBinding extends net.fabricmc.fabric.api.client.keybinding.v1.FabricKeyBinding {\n \tprotected FabricKeyBinding(Identifier id, InputUtil.Type type, int code, String category) {\n-\t\tsuper(\"key.\" + id.toString().replace(':', '.'), type, code, category);\n+\t\tsuper(id, String.format(\"key.%s.%s\", id.getNamespace(), id.getPath()), type, code, category);\n \t}\n \n \t/**\n \t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n \t * @return configured KeyCode\n \t */\n+\t@Override\n \tpublic InputUtil.KeyCode getBoundKey() {\n-\t\treturn ((KeyCodeAccessor) this).getKeyCode();\n+\t\treturn super.getBoundKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTAxNA=="}, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MzUzOQ==", "bodyText": "It should preserve backward compatibility... the call to old keybinding's getBoundKey should be invokevirtual in existing bytecode\nHmm, I guess we can give the new method a new name like getDefaultCode instead", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r423293539", "createdAt": "2020-05-11T20:17:15Z", "author": {"login": "liach"}, "path": "fabric-keybindings-v0/src/main/java/net/fabricmc/fabric/api/client/keybinding/FabricKeyBinding.java", "diffHunk": "@@ -20,27 +20,31 @@\n import net.minecraft.client.util.InputUtil;\n import net.minecraft.util.Identifier;\n \n-import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n-\n /**\n  * Expanded version of {@link KeyBinding} for use by Fabric mods.\n  *\n  * <p>*ALL* instantiated FabricKeyBindings should be registered in\n- * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!</p>\n+ *\n+ * @deprecated Please migrate to v1. Please use {@link net.fabricmc.fabric.api.client.keybinding.v1.FabricKeyBinding} instead.\n  */\n-public class FabricKeyBinding extends KeyBinding {\n+@Deprecated\n+public class FabricKeyBinding extends net.fabricmc.fabric.api.client.keybinding.v1.FabricKeyBinding {\n \tprotected FabricKeyBinding(Identifier id, InputUtil.Type type, int code, String category) {\n-\t\tsuper(\"key.\" + id.toString().replace(':', '.'), type, code, category);\n+\t\tsuper(id, String.format(\"key.%s.%s\", id.getNamespace(), id.getPath()), type, code, category);\n \t}\n \n \t/**\n \t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n \t * @return configured KeyCode\n \t */\n+\t@Override\n \tpublic InputUtil.KeyCode getBoundKey() {\n-\t\treturn ((KeyCodeAccessor) this).getKeyCode();\n+\t\treturn super.getBoundKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTAxNA=="}, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwNDQyMw==", "bodyText": "is not the default code, it returns the current code, bound key is the best name for this imo", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r423304423", "createdAt": "2020-05-11T20:37:28Z", "author": {"login": "shedaniel"}, "path": "fabric-keybindings-v0/src/main/java/net/fabricmc/fabric/api/client/keybinding/FabricKeyBinding.java", "diffHunk": "@@ -20,27 +20,31 @@\n import net.minecraft.client.util.InputUtil;\n import net.minecraft.util.Identifier;\n \n-import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n-\n /**\n  * Expanded version of {@link KeyBinding} for use by Fabric mods.\n  *\n  * <p>*ALL* instantiated FabricKeyBindings should be registered in\n- * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!</p>\n+ *\n+ * @deprecated Please migrate to v1. Please use {@link net.fabricmc.fabric.api.client.keybinding.v1.FabricKeyBinding} instead.\n  */\n-public class FabricKeyBinding extends KeyBinding {\n+@Deprecated\n+public class FabricKeyBinding extends net.fabricmc.fabric.api.client.keybinding.v1.FabricKeyBinding {\n \tprotected FabricKeyBinding(Identifier id, InputUtil.Type type, int code, String category) {\n-\t\tsuper(\"key.\" + id.toString().replace(':', '.'), type, code, category);\n+\t\tsuper(id, String.format(\"key.%s.%s\", id.getNamespace(), id.getPath()), type, code, category);\n \t}\n \n \t/**\n \t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n \t * @return configured KeyCode\n \t */\n+\t@Override\n \tpublic InputUtil.KeyCode getBoundKey() {\n-\t\treturn ((KeyCodeAccessor) this).getKeyCode();\n+\t\treturn super.getBoundKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTAxNA=="}, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk1NTA0OnYy", "diffSide": "RIGHT", "path": "fabric-keybindings-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowMTowNVrOGTrSKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMzozMToxM1rOGZJmfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTI5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic Identifier getIdentifier() {\n          \n          \n            \n            \tpublic Identifier getId() {", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r423285291", "createdAt": "2020-05-11T20:01:05Z", "author": {"login": "liach"}, "path": "fabric-keybindings-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4ODQzOQ==", "bodyText": "May be different from the {@link #getId()}.\n\nThere already seems to be one.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r423288439", "createdAt": "2020-05-11T20:07:21Z", "author": {"login": "Juuxel"}, "path": "fabric-keybindings-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTI5MQ=="}, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MjYzNA==", "bodyText": "Hmm, then need to fix that in yarn probably. In api that thing is called translationKey, which should be right if it starts with key.\nhttps://maven.fabricmc.net/docs/yarn-20w19a+build.1/net/minecraft/client/options/KeyBinding.html#KeyBinding-java.lang.String-net.minecraft.client.util.InputUtil.Type-int-java.lang.String-", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r423292634", "createdAt": "2020-05-11T20:15:25Z", "author": {"login": "liach"}, "path": "fabric-keybindings-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTI5MQ=="}, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNDg5Mg==", "bodyText": "I'll keep this because this PR is for 1.15", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429024892", "createdAt": "2020-05-22T03:31:13Z", "author": {"login": "shedaniel"}, "path": "fabric-keybindings-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTI5MQ=="}, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk1OTIyOnYy", "diffSide": "RIGHT", "path": "fabric-keybindings-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowMjozNlrOGTrU-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDowNTozMlrOGT_gBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NjAwOQ==", "bodyText": "I personally disagree with the addition of this method. Imo error-prone and violating oop design.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r423286009", "createdAt": "2020-05-11T20:02:36Z", "author": {"login": "liach"}, "path": "fabric-keybindings-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Registers the keybinding with {@link KeyBindingRegistry#register(FabricKeyBinding)}.\n+\t *\n+\t * @return self\n+\t */\n+\tpublic <T extends FabricKeyBinding> T register() {\n+\t\tKeyBindingRegistry.INSTANCE.register(this);\n+\t\treturn (T) this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNDk5Nw==", "bodyText": "@shedaniel the other two points are rejected but this you need to explain or change. Imo this is dangerous as it allows random error-prone casts, just ask users call KeybindingRegistry.INSTANCE.register on their own", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r423614997", "createdAt": "2020-05-12T10:02:49Z", "author": {"login": "liach"}, "path": "fabric-keybindings-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Registers the keybinding with {@link KeyBindingRegistry#register(FabricKeyBinding)}.\n+\t *\n+\t * @return self\n+\t */\n+\tpublic <T extends FabricKeyBinding> T register() {\n+\t\tKeyBindingRegistry.INSTANCE.register(this);\n+\t\treturn (T) this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NjAwOQ=="}, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNjUxOQ==", "bodyText": "will do.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r423616519", "createdAt": "2020-05-12T10:05:32Z", "author": {"login": "shedaniel"}, "path": "fabric-keybindings-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Registers the keybinding with {@link KeyBindingRegistry#register(FabricKeyBinding)}.\n+\t *\n+\t * @return self\n+\t */\n+\tpublic <T extends FabricKeyBinding> T register() {\n+\t\tKeyBindingRegistry.INSTANCE.register(this);\n+\t\treturn (T) this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NjAwOQ=="}, "originalCommit": {"oid": "0500ee7f13bb3800b13dbd23c2559c7d3a3c9ae1"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjAzNzI4OnYy", "diffSide": "RIGHT", "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDozNjozMVrOGZKaWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNTo0MDo0N1rOGZLRkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODE2OA==", "bodyText": "Is there a specific reason to reuse the builder instance? It may be nicer to supply the required parameter (id) on creation, it is only one after all and recreating the builder doesn't look too bad to me.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429038168", "createdAt": "2020-05-22T04:36:31Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MjMwNg==", "bodyText": "you shouldn't reuse the builder instance, will update this example", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429052306", "createdAt": "2020-05-22T05:40:47Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODE2OA=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjAzNzg2OnYy", "diffSide": "RIGHT", "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDozNzowMlrOGZKaug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTowMzowN1rOGZabeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODI2Ng==", "bodyText": "final?", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429038266", "createdAt": "2020-05-22T04:37:02Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MTQ2OQ==", "bodyText": "need to extend this for v0.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429051469", "createdAt": "2020-05-22T05:37:07Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODI2Ng=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MzY4NQ==", "bodyText": "Any reasonable way to avoid this? Allowing sub classes may make future changes more difficult.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429053685", "createdAt": "2020-05-22T05:46:34Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODI2Ng=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NDMxMw==", "bodyText": "Would making an interface for detecting if it is a fabric keybind be alright? need to do that for it to work rn, might look at how it works to tweak it", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429054313", "createdAt": "2020-05-22T05:49:01Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODI2Ng=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2ODMyMA==", "bodyText": "If there's no simple solution we can leave it not final", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429068320", "createdAt": "2020-05-22T06:37:39Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODI2Ng=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4OTQ2Mg==", "bodyText": "Made an interface called ModdedKeyBinding for both the v1 and v0 keybinding to extend, I can't think of a better name for that class.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429189462", "createdAt": "2020-05-22T11:19:49Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODI2Ng=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NjIyMA==", "bodyText": "nvm I reverted this.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429196220", "createdAt": "2020-05-22T11:36:58Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODI2Ng=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMDYwMQ==", "bodyText": "We might be above to just never return the fabric version of the keybind to the player, and return the vanilla ones, I don't see a clear reason how getIdentitier() is useful, vanilla keybindings don't have them anyways", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429300601", "createdAt": "2020-05-22T15:03:07Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODI2Ng=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjAzODk4OnYy", "diffSide": "RIGHT", "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDozNzo0MlrOGZKbWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMToxOTowMlrOGZToJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODQyNw==", "bodyText": "This method should be first or last, depending on what we do elsewhere", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429038427", "createdAt": "2020-05-22T04:37:42Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4OTE1OA==", "bodyText": "Should be first, I changed the javadoc to make it not reuse the builder and you shouldn't be.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429189158", "createdAt": "2020-05-22T11:19:02Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODQyNw=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjA0MTI2OnYy", "diffSide": "RIGHT", "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo0MDowMVrOGZKc2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMToxODoyOFrOGZTnPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODgxMQ==", "bodyText": "Wouldn't a .buildAndRegister be better than exposing and requiring the registration separately? Is there any good reason not to want to register directly?", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429038811", "createdAt": "2020-05-22T04:40:01Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4ODkyNw==", "bodyText": "I am making this register both the keybinding and the category automatically now", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429188927", "createdAt": "2020-05-22T11:18:28Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODgxMQ=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjA0MjQ3OnYy", "diffSide": "RIGHT", "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo0MDo1OVrOGZKdhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo0MDo1OVrOGZKdhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzODk4Mg==", "bodyText": "Maybe something like \"... aren't assigned to any key by default\" to more clearly state the effect?", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429038982", "createdAt": "2020-05-22T04:40:59Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {\n+\t\treturn getBoundKeyOf(this);\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @param keyBinding the keybinding\n+\t * @return configured KeyCode\n+\t */\n+\tpublic static InputUtil.KeyCode getBoundKeyOf(KeyBinding keyBinding) {\n+\t\treturn ((KeyCodeAccessor) keyBinding).getKeyCode();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int UNASSIGNED = InputUtil.UNKNOWN_KEYCODE.getKeyCode();\n+\n+\t\tprivate InputUtil.Type type = InputUtil.Type.KEYSYM;\n+\t\tprivate Identifier id = null;\n+\t\tprivate String translationKey;\n+\t\tprivate boolean unassigned = false;\n+\t\tprivate BooleanSupplier toggleFlagSupplier = null;\n+\t\tprivate int code = UNASSIGNED;\n+\t\tprivate String category = KeyCategories.MISC;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key binding id and translation key for this builder.\n+\t\t * <br>\n+\t\t * Key bindings will be assigned a translation key of the format \"key.{namespace}.{path}\"\n+\t\t *\n+\t\t * @param id Unique identifier for the bound key.\n+\t\t */\n+\t\tpublic Builder id(Identifier id) {\n+\t\t\tthis.id = Objects.requireNonNull(id, \"Keybinding's id can not be null!\");\n+\t\t\tthis.translationKey = String.format(\"key.%s.%s\", id.getNamespace(), id.getPath());\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the translation key for the key's category. {@link KeyCategories} for\n+\t\t * all possible values, vanilla values.\n+\t\t *\n+\t\t * @param category The category under which key bindings created by this builder will be grouped.\n+\t\t */\n+\t\tpublic Builder category(String category) {\n+\t\t\tthis.category = Objects.requireNonNull(category, \"Keybinding's category can not be null!\");\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the default key to be used for the key binding created using this builder.\n+\t\t *\n+\t\t * @param keyCode The default key code. Must be a valid key. May not be -1.\n+\t\t */\n+\t\tpublic Builder code(int keyCode) {\n+\t\t\tPreconditions.checkState(keyCode != UNASSIGNED, \"UNASSIGNED is not a valid key code.\");\n+\t\t\tthis.code = keyCode;\n+\t\t\tthis.unassigned = false;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Indicates to this builder that keybindings built through it are intended to be unbound.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjA0NjA0OnYy", "diffSide": "RIGHT", "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo0Mzo1NlrOGZKfsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxMjoxMFrOGZR8-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzOTUzNg==", "bodyText": "Is the any way we can verify the integer more? Maybe check against some reasonable lower and upper bound?", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429039536", "createdAt": "2020-05-22T04:43:56Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {\n+\t\treturn getBoundKeyOf(this);\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @param keyBinding the keybinding\n+\t * @return configured KeyCode\n+\t */\n+\tpublic static InputUtil.KeyCode getBoundKeyOf(KeyBinding keyBinding) {\n+\t\treturn ((KeyCodeAccessor) keyBinding).getKeyCode();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int UNASSIGNED = InputUtil.UNKNOWN_KEYCODE.getKeyCode();\n+\n+\t\tprivate InputUtil.Type type = InputUtil.Type.KEYSYM;\n+\t\tprivate Identifier id = null;\n+\t\tprivate String translationKey;\n+\t\tprivate boolean unassigned = false;\n+\t\tprivate BooleanSupplier toggleFlagSupplier = null;\n+\t\tprivate int code = UNASSIGNED;\n+\t\tprivate String category = KeyCategories.MISC;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key binding id and translation key for this builder.\n+\t\t * <br>\n+\t\t * Key bindings will be assigned a translation key of the format \"key.{namespace}.{path}\"\n+\t\t *\n+\t\t * @param id Unique identifier for the bound key.\n+\t\t */\n+\t\tpublic Builder id(Identifier id) {\n+\t\t\tthis.id = Objects.requireNonNull(id, \"Keybinding's id can not be null!\");\n+\t\t\tthis.translationKey = String.format(\"key.%s.%s\", id.getNamespace(), id.getPath());\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the translation key for the key's category. {@link KeyCategories} for\n+\t\t * all possible values, vanilla values.\n+\t\t *\n+\t\t * @param category The category under which key bindings created by this builder will be grouped.\n+\t\t */\n+\t\tpublic Builder category(String category) {\n+\t\t\tthis.category = Objects.requireNonNull(category, \"Keybinding's category can not be null!\");\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the default key to be used for the key binding created using this builder.\n+\t\t *\n+\t\t * @param keyCode The default key code. Must be a valid key. May not be -1.\n+\t\t */\n+\t\tpublic Builder code(int keyCode) {\n+\t\t\tPreconditions.checkState(keyCode != UNASSIGNED, \"UNASSIGNED is not a valid key code.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2MTcyMw==", "bodyText": "Just checked, it seems like there isn't a limit on what the integer can be, Minecraft will just create a new code if it doesn't exist already, meaning that it can basically accept any code.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429161723", "createdAt": "2020-05-22T10:12:10Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {\n+\t\treturn getBoundKeyOf(this);\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @param keyBinding the keybinding\n+\t * @return configured KeyCode\n+\t */\n+\tpublic static InputUtil.KeyCode getBoundKeyOf(KeyBinding keyBinding) {\n+\t\treturn ((KeyCodeAccessor) keyBinding).getKeyCode();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int UNASSIGNED = InputUtil.UNKNOWN_KEYCODE.getKeyCode();\n+\n+\t\tprivate InputUtil.Type type = InputUtil.Type.KEYSYM;\n+\t\tprivate Identifier id = null;\n+\t\tprivate String translationKey;\n+\t\tprivate boolean unassigned = false;\n+\t\tprivate BooleanSupplier toggleFlagSupplier = null;\n+\t\tprivate int code = UNASSIGNED;\n+\t\tprivate String category = KeyCategories.MISC;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key binding id and translation key for this builder.\n+\t\t * <br>\n+\t\t * Key bindings will be assigned a translation key of the format \"key.{namespace}.{path}\"\n+\t\t *\n+\t\t * @param id Unique identifier for the bound key.\n+\t\t */\n+\t\tpublic Builder id(Identifier id) {\n+\t\t\tthis.id = Objects.requireNonNull(id, \"Keybinding's id can not be null!\");\n+\t\t\tthis.translationKey = String.format(\"key.%s.%s\", id.getNamespace(), id.getPath());\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the translation key for the key's category. {@link KeyCategories} for\n+\t\t * all possible values, vanilla values.\n+\t\t *\n+\t\t * @param category The category under which key bindings created by this builder will be grouped.\n+\t\t */\n+\t\tpublic Builder category(String category) {\n+\t\t\tthis.category = Objects.requireNonNull(category, \"Keybinding's category can not be null!\");\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the default key to be used for the key binding created using this builder.\n+\t\t *\n+\t\t * @param keyCode The default key code. Must be a valid key. May not be -1.\n+\t\t */\n+\t\tpublic Builder code(int keyCode) {\n+\t\t\tPreconditions.checkState(keyCode != UNASSIGNED, \"UNASSIGNED is not a valid key code.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzOTUzNg=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjA0NzI1OnYy", "diffSide": "RIGHT", "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo0NDo1MVrOGZKgbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNTo1MDowMlrOGZLabw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzOTcyNQ==", "bodyText": "Does MC not allow switching key binds between mouse and keyboard?", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429039725", "createdAt": "2020-05-22T04:44:51Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {\n+\t\treturn getBoundKeyOf(this);\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @param keyBinding the keybinding\n+\t * @return configured KeyCode\n+\t */\n+\tpublic static InputUtil.KeyCode getBoundKeyOf(KeyBinding keyBinding) {\n+\t\treturn ((KeyCodeAccessor) keyBinding).getKeyCode();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int UNASSIGNED = InputUtil.UNKNOWN_KEYCODE.getKeyCode();\n+\n+\t\tprivate InputUtil.Type type = InputUtil.Type.KEYSYM;\n+\t\tprivate Identifier id = null;\n+\t\tprivate String translationKey;\n+\t\tprivate boolean unassigned = false;\n+\t\tprivate BooleanSupplier toggleFlagSupplier = null;\n+\t\tprivate int code = UNASSIGNED;\n+\t\tprivate String category = KeyCategories.MISC;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key binding id and translation key for this builder.\n+\t\t * <br>\n+\t\t * Key bindings will be assigned a translation key of the format \"key.{namespace}.{path}\"\n+\t\t *\n+\t\t * @param id Unique identifier for the bound key.\n+\t\t */\n+\t\tpublic Builder id(Identifier id) {\n+\t\t\tthis.id = Objects.requireNonNull(id, \"Keybinding's id can not be null!\");\n+\t\t\tthis.translationKey = String.format(\"key.%s.%s\", id.getNamespace(), id.getPath());\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the translation key for the key's category. {@link KeyCategories} for\n+\t\t * all possible values, vanilla values.\n+\t\t *\n+\t\t * @param category The category under which key bindings created by this builder will be grouped.\n+\t\t */\n+\t\tpublic Builder category(String category) {\n+\t\t\tthis.category = Objects.requireNonNull(category, \"Keybinding's category can not be null!\");\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the default key to be used for the key binding created using this builder.\n+\t\t *\n+\t\t * @param keyCode The default key code. Must be a valid key. May not be -1.\n+\t\t */\n+\t\tpublic Builder code(int keyCode) {\n+\t\t\tPreconditions.checkState(keyCode != UNASSIGNED, \"UNASSIGNED is not a valid key code.\");\n+\t\t\tthis.code = keyCode;\n+\t\t\tthis.unassigned = false;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Indicates to this builder that keybindings built through it are intended to be unbound.\n+\t\t */\n+\t\tpublic Builder unassigned() {\n+\t\t\tthis.code = UNASSIGNED;\n+\t\t\tthis.unassigned = true;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets this builder to create sticky keybindings that will toggle their state when pressed.\n+\t\t */\n+\t\tpublic Builder sticky() {\n+\t\t\treturn sticky(() -> true);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets a sticking action to be used by the constructed key binding which can be used to switch between\n+\t\t * a sticky (toggle) and a regular key binding.\n+\t\t *\n+\t\t * @param toggleFlagSupplier A getter function to determine whether to toggle or not. True for toggling behaviour, false otherwise.\n+\t\t */\n+\t\tpublic Builder sticky(BooleanSupplier toggleFlagSupplier) {\n+\t\t\tthis.toggleFlagSupplier = toggleFlagSupplier;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key's type. Maybe be one of [{@link InputUtil.Type#KEYSYM} (keyboard), {@link InputUtil.Type#SCANCODE}, {@link InputUtil.Type#MOUSE}]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MTgyNA==", "bodyText": "this is the type of the code specified above, this is just for the default binding", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429051824", "createdAt": "2020-05-22T05:38:31Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {\n+\t\treturn getBoundKeyOf(this);\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @param keyBinding the keybinding\n+\t * @return configured KeyCode\n+\t */\n+\tpublic static InputUtil.KeyCode getBoundKeyOf(KeyBinding keyBinding) {\n+\t\treturn ((KeyCodeAccessor) keyBinding).getKeyCode();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int UNASSIGNED = InputUtil.UNKNOWN_KEYCODE.getKeyCode();\n+\n+\t\tprivate InputUtil.Type type = InputUtil.Type.KEYSYM;\n+\t\tprivate Identifier id = null;\n+\t\tprivate String translationKey;\n+\t\tprivate boolean unassigned = false;\n+\t\tprivate BooleanSupplier toggleFlagSupplier = null;\n+\t\tprivate int code = UNASSIGNED;\n+\t\tprivate String category = KeyCategories.MISC;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key binding id and translation key for this builder.\n+\t\t * <br>\n+\t\t * Key bindings will be assigned a translation key of the format \"key.{namespace}.{path}\"\n+\t\t *\n+\t\t * @param id Unique identifier for the bound key.\n+\t\t */\n+\t\tpublic Builder id(Identifier id) {\n+\t\t\tthis.id = Objects.requireNonNull(id, \"Keybinding's id can not be null!\");\n+\t\t\tthis.translationKey = String.format(\"key.%s.%s\", id.getNamespace(), id.getPath());\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the translation key for the key's category. {@link KeyCategories} for\n+\t\t * all possible values, vanilla values.\n+\t\t *\n+\t\t * @param category The category under which key bindings created by this builder will be grouped.\n+\t\t */\n+\t\tpublic Builder category(String category) {\n+\t\t\tthis.category = Objects.requireNonNull(category, \"Keybinding's category can not be null!\");\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the default key to be used for the key binding created using this builder.\n+\t\t *\n+\t\t * @param keyCode The default key code. Must be a valid key. May not be -1.\n+\t\t */\n+\t\tpublic Builder code(int keyCode) {\n+\t\t\tPreconditions.checkState(keyCode != UNASSIGNED, \"UNASSIGNED is not a valid key code.\");\n+\t\t\tthis.code = keyCode;\n+\t\t\tthis.unassigned = false;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Indicates to this builder that keybindings built through it are intended to be unbound.\n+\t\t */\n+\t\tpublic Builder unassigned() {\n+\t\t\tthis.code = UNASSIGNED;\n+\t\t\tthis.unassigned = true;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets this builder to create sticky keybindings that will toggle their state when pressed.\n+\t\t */\n+\t\tpublic Builder sticky() {\n+\t\t\treturn sticky(() -> true);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets a sticking action to be used by the constructed key binding which can be used to switch between\n+\t\t * a sticky (toggle) and a regular key binding.\n+\t\t *\n+\t\t * @param toggleFlagSupplier A getter function to determine whether to toggle or not. True for toggling behaviour, false otherwise.\n+\t\t */\n+\t\tpublic Builder sticky(BooleanSupplier toggleFlagSupplier) {\n+\t\t\tthis.toggleFlagSupplier = toggleFlagSupplier;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key's type. Maybe be one of [{@link InputUtil.Type#KEYSYM} (keyboard), {@link InputUtil.Type#SCANCODE}, {@link InputUtil.Type#MOUSE}]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzOTcyNQ=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MzA5Mg==", "bodyText": "Can we combine this with the code (int) method then, maybe having per-type methods?", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429053092", "createdAt": "2020-05-22T05:44:06Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {\n+\t\treturn getBoundKeyOf(this);\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @param keyBinding the keybinding\n+\t * @return configured KeyCode\n+\t */\n+\tpublic static InputUtil.KeyCode getBoundKeyOf(KeyBinding keyBinding) {\n+\t\treturn ((KeyCodeAccessor) keyBinding).getKeyCode();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int UNASSIGNED = InputUtil.UNKNOWN_KEYCODE.getKeyCode();\n+\n+\t\tprivate InputUtil.Type type = InputUtil.Type.KEYSYM;\n+\t\tprivate Identifier id = null;\n+\t\tprivate String translationKey;\n+\t\tprivate boolean unassigned = false;\n+\t\tprivate BooleanSupplier toggleFlagSupplier = null;\n+\t\tprivate int code = UNASSIGNED;\n+\t\tprivate String category = KeyCategories.MISC;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key binding id and translation key for this builder.\n+\t\t * <br>\n+\t\t * Key bindings will be assigned a translation key of the format \"key.{namespace}.{path}\"\n+\t\t *\n+\t\t * @param id Unique identifier for the bound key.\n+\t\t */\n+\t\tpublic Builder id(Identifier id) {\n+\t\t\tthis.id = Objects.requireNonNull(id, \"Keybinding's id can not be null!\");\n+\t\t\tthis.translationKey = String.format(\"key.%s.%s\", id.getNamespace(), id.getPath());\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the translation key for the key's category. {@link KeyCategories} for\n+\t\t * all possible values, vanilla values.\n+\t\t *\n+\t\t * @param category The category under which key bindings created by this builder will be grouped.\n+\t\t */\n+\t\tpublic Builder category(String category) {\n+\t\t\tthis.category = Objects.requireNonNull(category, \"Keybinding's category can not be null!\");\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the default key to be used for the key binding created using this builder.\n+\t\t *\n+\t\t * @param keyCode The default key code. Must be a valid key. May not be -1.\n+\t\t */\n+\t\tpublic Builder code(int keyCode) {\n+\t\t\tPreconditions.checkState(keyCode != UNASSIGNED, \"UNASSIGNED is not a valid key code.\");\n+\t\t\tthis.code = keyCode;\n+\t\t\tthis.unassigned = false;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Indicates to this builder that keybindings built through it are intended to be unbound.\n+\t\t */\n+\t\tpublic Builder unassigned() {\n+\t\t\tthis.code = UNASSIGNED;\n+\t\t\tthis.unassigned = true;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets this builder to create sticky keybindings that will toggle their state when pressed.\n+\t\t */\n+\t\tpublic Builder sticky() {\n+\t\t\treturn sticky(() -> true);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets a sticking action to be used by the constructed key binding which can be used to switch between\n+\t\t * a sticky (toggle) and a regular key binding.\n+\t\t *\n+\t\t * @param toggleFlagSupplier A getter function to determine whether to toggle or not. True for toggling behaviour, false otherwise.\n+\t\t */\n+\t\tpublic Builder sticky(BooleanSupplier toggleFlagSupplier) {\n+\t\t\tthis.toggleFlagSupplier = toggleFlagSupplier;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key's type. Maybe be one of [{@link InputUtil.Type#KEYSYM} (keyboard), {@link InputUtil.Type#SCANCODE}, {@link InputUtil.Type#MOUSE}]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzOTcyNQ=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NDU3NQ==", "bodyText": "I'll just combine it, don't know if a mod would like to extend the enum", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429054575", "createdAt": "2020-05-22T05:50:02Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {\n+\t\treturn getBoundKeyOf(this);\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @param keyBinding the keybinding\n+\t * @return configured KeyCode\n+\t */\n+\tpublic static InputUtil.KeyCode getBoundKeyOf(KeyBinding keyBinding) {\n+\t\treturn ((KeyCodeAccessor) keyBinding).getKeyCode();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int UNASSIGNED = InputUtil.UNKNOWN_KEYCODE.getKeyCode();\n+\n+\t\tprivate InputUtil.Type type = InputUtil.Type.KEYSYM;\n+\t\tprivate Identifier id = null;\n+\t\tprivate String translationKey;\n+\t\tprivate boolean unassigned = false;\n+\t\tprivate BooleanSupplier toggleFlagSupplier = null;\n+\t\tprivate int code = UNASSIGNED;\n+\t\tprivate String category = KeyCategories.MISC;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key binding id and translation key for this builder.\n+\t\t * <br>\n+\t\t * Key bindings will be assigned a translation key of the format \"key.{namespace}.{path}\"\n+\t\t *\n+\t\t * @param id Unique identifier for the bound key.\n+\t\t */\n+\t\tpublic Builder id(Identifier id) {\n+\t\t\tthis.id = Objects.requireNonNull(id, \"Keybinding's id can not be null!\");\n+\t\t\tthis.translationKey = String.format(\"key.%s.%s\", id.getNamespace(), id.getPath());\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the translation key for the key's category. {@link KeyCategories} for\n+\t\t * all possible values, vanilla values.\n+\t\t *\n+\t\t * @param category The category under which key bindings created by this builder will be grouped.\n+\t\t */\n+\t\tpublic Builder category(String category) {\n+\t\t\tthis.category = Objects.requireNonNull(category, \"Keybinding's category can not be null!\");\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the default key to be used for the key binding created using this builder.\n+\t\t *\n+\t\t * @param keyCode The default key code. Must be a valid key. May not be -1.\n+\t\t */\n+\t\tpublic Builder code(int keyCode) {\n+\t\t\tPreconditions.checkState(keyCode != UNASSIGNED, \"UNASSIGNED is not a valid key code.\");\n+\t\t\tthis.code = keyCode;\n+\t\t\tthis.unassigned = false;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Indicates to this builder that keybindings built through it are intended to be unbound.\n+\t\t */\n+\t\tpublic Builder unassigned() {\n+\t\t\tthis.code = UNASSIGNED;\n+\t\t\tthis.unassigned = true;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets this builder to create sticky keybindings that will toggle their state when pressed.\n+\t\t */\n+\t\tpublic Builder sticky() {\n+\t\t\treturn sticky(() -> true);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets a sticking action to be used by the constructed key binding which can be used to switch between\n+\t\t * a sticky (toggle) and a regular key binding.\n+\t\t *\n+\t\t * @param toggleFlagSupplier A getter function to determine whether to toggle or not. True for toggling behaviour, false otherwise.\n+\t\t */\n+\t\tpublic Builder sticky(BooleanSupplier toggleFlagSupplier) {\n+\t\t\tthis.toggleFlagSupplier = toggleFlagSupplier;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key's type. Maybe be one of [{@link InputUtil.Type#KEYSYM} (keyboard), {@link InputUtil.Type#SCANCODE}, {@link InputUtil.Type#MOUSE}]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzOTcyNQ=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjA0ODk0OnYy", "diffSide": "RIGHT", "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/KeyBindingRegistry.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo0NjowMFrOGZKhbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMDowMDowMlrOGZiYlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzOTk4Mw==", "bodyText": "If we add register to the builder's build(), this method could get moved as a static helper to KeyCategories.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429039983", "createdAt": "2020-05-22T04:46:00Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/KeyBindingRegistry.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.KeyBindingRegistryImpl;\n+\n+/**\n+ * Interface for registering key bindings.\n+ *\n+ * @see FabricKeyBinding\n+ */\n+public interface KeyBindingRegistry {\n+\tKeyBindingRegistry INSTANCE = KeyBindingRegistryImpl.INSTANCE;\n+\n+\t/**\n+\t * Add a new key binding category.\n+\t *\n+\t * @param categoryName The key binding category name.\n+\t * @return True if a new category was added.\n+\t */\n+\tboolean addCategory(String categoryName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2ODEzMw==", "bodyText": "should we just automatically register the category if it doesn't exist?", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429168133", "createdAt": "2020-05-22T10:27:25Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/KeyBindingRegistry.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.KeyBindingRegistryImpl;\n+\n+/**\n+ * Interface for registering key bindings.\n+ *\n+ * @see FabricKeyBinding\n+ */\n+public interface KeyBindingRegistry {\n+\tKeyBindingRegistry INSTANCE = KeyBindingRegistryImpl.INSTANCE;\n+\n+\t/**\n+\t * Add a new key binding category.\n+\t *\n+\t * @param categoryName The key binding category name.\n+\t * @return True if a new category was added.\n+\t */\n+\tboolean addCategory(String categoryName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzOTk4Mw=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3MDc3NQ==", "bodyText": "Seems like we are already doing that with a warning that doesn't make sense, I think I will just remove that warning.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429170775", "createdAt": "2020-05-22T10:33:25Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/KeyBindingRegistry.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.KeyBindingRegistryImpl;\n+\n+/**\n+ * Interface for registering key bindings.\n+ *\n+ * @see FabricKeyBinding\n+ */\n+public interface KeyBindingRegistry {\n+\tKeyBindingRegistry INSTANCE = KeyBindingRegistryImpl.INSTANCE;\n+\n+\t/**\n+\t * Add a new key binding category.\n+\t *\n+\t * @param categoryName The key binding category name.\n+\t * @return True if a new category was added.\n+\t */\n+\tboolean addCategory(String categoryName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzOTk4Mw=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzMDkzNQ==", "bodyText": "Just registering the category makes sense", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429430935", "createdAt": "2020-05-22T20:00:02Z", "author": {"login": "dexman545"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/KeyBindingRegistry.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.KeyBindingRegistryImpl;\n+\n+/**\n+ * Interface for registering key bindings.\n+ *\n+ * @see FabricKeyBinding\n+ */\n+public interface KeyBindingRegistry {\n+\tKeyBindingRegistry INSTANCE = KeyBindingRegistryImpl.INSTANCE;\n+\n+\t/**\n+\t * Add a new key binding category.\n+\t *\n+\t * @param categoryName The key binding category name.\n+\t * @return True if a new category was added.\n+\t */\n+\tboolean addCategory(String categoryName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzOTk4Mw=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjA1MDY3OnYy", "diffSide": "RIGHT", "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo0NzoyN1rOGZKiiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNTo0MTo0OVrOGZLSqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MDI2Nw==", "bodyText": "There are some naming inconsistencies between bound vs assigned.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429040267", "createdAt": "2020-05-22T04:47:27Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MTk5OQ==", "bodyText": "We have been using bound in the new yarn, where is assigned used", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429051999", "createdAt": "2020-05-22T05:39:21Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MDI2Nw=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MjU4NQ==", "bodyText": "Search the file for \"assign\", there are multiple uses both in code and docs", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429052585", "createdAt": "2020-05-22T05:41:49Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MDI2Nw=="}, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjA1MzAxOnYy", "diffSide": "RIGHT", "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo0OToyMlrOGZKj9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo0OToyMlrOGZKj9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MDYzMA==", "bodyText": "I'd use a little nested class instead of BooleanSupplier that can then use a better method name and document it.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429040630", "createdAt": "2020-05-22T04:49:22Z", "author": {"login": "sfPlayer1"}, "path": "fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/api/client/keybinding/v1/FabricKeyBinding.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.keybinding.v1;\n+\n+import java.util.Objects;\n+import java.util.function.BooleanSupplier;\n+\n+import com.google.common.base.Preconditions;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.client.keybinding.StickyFabricKeyBinding;\n+import net.fabricmc.fabric.mixin.client.keybinding.KeyCodeAccessor;\n+\n+/**\n+ * Expanded version of {@link KeyBinding} for use by Fabric mods.\n+ *\n+ * <p>*ALL* instantiated FabricKeyBindings should be registered in\n+ * {@link KeyBindingRegistry#register(FabricKeyBinding)}!\n+ * </p>\n+ *\n+ * <pre><code>\n+ * FabricKeyBinding.Builder builder = FabricKeyBinding.builder();\n+ * FabricKeyBinding left = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"left\"))\n+ * \t\t\t.code(Keys.Left)\n+ * \t\t\t.build();\n+ * FabricKeyBinding right = builder\n+ * \t\t\t.id(new Identifier(\"example\", \"right\"))\n+ * \t\t\t.code(Keys.Right)\n+ * \t\t\t.build();\n+ * KeyBindingRegistry.register(left);\n+ * KeyBindingRegistry.register(right);\n+ * </code></pre>\n+ */\n+public class FabricKeyBinding extends KeyBinding {\n+\tprivate final Identifier id;\n+\n+\tprotected FabricKeyBinding(Identifier id, String translationKey, InputUtil.Type type, int code, String category) {\n+\t\tsuper(translationKey, type, code, category);\n+\t\tthis.id = id;\n+\t}\n+\n+\t/**\n+\t * Original identifier used to register this key.\n+\t *\n+\t * <p>May be different from the {@link #getId()}.</p>\n+\t */\n+\tpublic Identifier getIdentifier() {\n+\t\treturn id;\n+\t}\n+\n+\t/**\n+\t * Creates a new builder for constructing custom key bindings.\n+\t */\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @return configured KeyCode\n+\t */\n+\tpublic InputUtil.KeyCode getBoundKey() {\n+\t\treturn getBoundKeyOf(this);\n+\t}\n+\n+\t/**\n+\t * Returns the configured KeyCode assigned to the KeyBinding from the player's settings.\n+\t *\n+\t * @param keyBinding the keybinding\n+\t * @return configured KeyCode\n+\t */\n+\tpublic static InputUtil.KeyCode getBoundKeyOf(KeyBinding keyBinding) {\n+\t\treturn ((KeyCodeAccessor) keyBinding).getKeyCode();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int UNASSIGNED = InputUtil.UNKNOWN_KEYCODE.getKeyCode();\n+\n+\t\tprivate InputUtil.Type type = InputUtil.Type.KEYSYM;\n+\t\tprivate Identifier id = null;\n+\t\tprivate String translationKey;\n+\t\tprivate boolean unassigned = false;\n+\t\tprivate BooleanSupplier toggleFlagSupplier = null;\n+\t\tprivate int code = UNASSIGNED;\n+\t\tprivate String category = KeyCategories.MISC;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the key binding id and translation key for this builder.\n+\t\t * <br>\n+\t\t * Key bindings will be assigned a translation key of the format \"key.{namespace}.{path}\"\n+\t\t *\n+\t\t * @param id Unique identifier for the bound key.\n+\t\t */\n+\t\tpublic Builder id(Identifier id) {\n+\t\t\tthis.id = Objects.requireNonNull(id, \"Keybinding's id can not be null!\");\n+\t\t\tthis.translationKey = String.format(\"key.%s.%s\", id.getNamespace(), id.getPath());\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the translation key for the key's category. {@link KeyCategories} for\n+\t\t * all possible values, vanilla values.\n+\t\t *\n+\t\t * @param category The category under which key bindings created by this builder will be grouped.\n+\t\t */\n+\t\tpublic Builder category(String category) {\n+\t\t\tthis.category = Objects.requireNonNull(category, \"Keybinding's category can not be null!\");\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the default key to be used for the key binding created using this builder.\n+\t\t *\n+\t\t * @param keyCode The default key code. Must be a valid key. May not be -1.\n+\t\t */\n+\t\tpublic Builder code(int keyCode) {\n+\t\t\tPreconditions.checkState(keyCode != UNASSIGNED, \"UNASSIGNED is not a valid key code.\");\n+\t\t\tthis.code = keyCode;\n+\t\t\tthis.unassigned = false;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Indicates to this builder that keybindings built through it are intended to be unbound.\n+\t\t */\n+\t\tpublic Builder unassigned() {\n+\t\t\tthis.code = UNASSIGNED;\n+\t\t\tthis.unassigned = true;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets this builder to create sticky keybindings that will toggle their state when pressed.\n+\t\t */\n+\t\tpublic Builder sticky() {\n+\t\t\treturn sticky(() -> true);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets a sticking action to be used by the constructed key binding which can be used to switch between\n+\t\t * a sticky (toggle) and a regular key binding.\n+\t\t *\n+\t\t * @param toggleFlagSupplier A getter function to determine whether to toggle or not. True for toggling behaviour, false otherwise.\n+\t\t */\n+\t\tpublic Builder sticky(BooleanSupplier toggleFlagSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfb980e96ad4cdf31d74cbe6882dc9a28753b4"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTA3MDA3OnYy", "diffSide": "RIGHT", "path": "fabric-key-binding-api-v1/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwNjo1MjozMVrOGZn31g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwNzowNjozMFrOGZn7Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUyMDg1NA==", "bodyText": "Do note because you have translation keys in your tests, you need to add the resource loader to the testmodCompile", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429520854", "createdAt": "2020-05-23T06:52:31Z", "author": {"login": "i509VCB"}, "path": "fabric-key-binding-api-v1/build.gradle", "diffHunk": "@@ -0,0 +1,7 @@\n+archivesBaseName = \"fabric-key-binding-api-v1\"\n+version = getSubprojectVersion(project, \"1.0.0\")\n+\n+dependencies {\n+\tcompile project(path: ':fabric-api-base', configuration: 'dev')\n+\ttestmodCompile project(path: ':fabric-events-lifecycle-v0', configuration: 'dev')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b4be8b48a8783b9a011cb327b5e3e7955888746"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUyMTY3NA==", "bodyText": "oh right.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429521674", "createdAt": "2020-05-23T07:06:30Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/build.gradle", "diffHunk": "@@ -0,0 +1,7 @@\n+archivesBaseName = \"fabric-key-binding-api-v1\"\n+version = getSubprojectVersion(project, \"1.0.0\")\n+\n+dependencies {\n+\tcompile project(path: ':fabric-api-base', configuration: 'dev')\n+\ttestmodCompile project(path: ':fabric-events-lifecycle-v0', configuration: 'dev')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUyMDg1NA=="}, "originalCommit": {"oid": "3b4be8b48a8783b9a011cb327b5e3e7955888746"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQ2NTUwOnYy", "diffSide": "RIGHT", "path": "fabric-key-binding-api-v1/src/testmod/java/net/fabricmc/fabric/test/client/keybinding/KeybindingsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOTo1NjoxMFrOGZrGlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNTowODo1NFrOGZvhkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3Mzc4Mg==", "bodyText": "Use the GLFW constants GLFW.GLFW_KEY_P will be clearer and act as a better example", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429573782", "createdAt": "2020-05-23T19:56:10Z", "author": {"login": "modmuss50"}, "path": "fabric-key-binding-api-v1/src/testmod/java/net/fabricmc/fabric/test/client/keybinding/KeybindingsTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.client.keybinding;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.fabric.api.client.keybinding.v1.KeyBindingHelper;\n+import net.fabricmc.fabric.api.event.client.ClientTickCallback;\n+\n+public class KeybindingsTest implements ClientModInitializer {\n+\t@Override\n+\tpublic void onInitializeClient() {\n+\t\tKeyBinding binding1 = KeyBindingHelper.builder()\n+\t\t\t\t.identifier(new Identifier(\"fabric-key-binding-api-v1-testmod:test_keybinding_1\"))\n+\t\t\t\t.category(\"category.first.test\")\n+\t\t\t\t.key(InputUtil.Type.KEYSYM, 80) // P", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea84382414defb4395e33e7adda0cd69ddbc643"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NjIyNw==", "bodyText": "fixed.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r429646227", "createdAt": "2020-05-24T15:08:54Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/testmod/java/net/fabricmc/fabric/test/client/keybinding/KeybindingsTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.client.keybinding;\n+\n+import net.minecraft.client.options.KeyBinding;\n+import net.minecraft.client.util.InputUtil;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.fabric.api.client.keybinding.v1.KeyBindingHelper;\n+import net.fabricmc.fabric.api.event.client.ClientTickCallback;\n+\n+public class KeybindingsTest implements ClientModInitializer {\n+\t@Override\n+\tpublic void onInitializeClient() {\n+\t\tKeyBinding binding1 = KeyBindingHelper.builder()\n+\t\t\t\t.identifier(new Identifier(\"fabric-key-binding-api-v1-testmod:test_keybinding_1\"))\n+\t\t\t\t.category(\"category.first.test\")\n+\t\t\t\t.key(InputUtil.Type.KEYSYM, 80) // P", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3Mzc4Mg=="}, "originalCommit": {"oid": "9ea84382414defb4395e33e7adda0cd69ddbc643"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzI2MTE1OnYy", "diffSide": "RIGHT", "path": "fabric-key-binding-api-v1/src/main/resources/fabric.mod.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjozNDozOFrOGfaQPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNToxODoxMFrOGgB81w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4OTE4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              \"name\": \"Fabric Key Bindings API (v1)\",\n          \n          \n            \n              \"name\": \"Fabric Key Binding API (v1)\",\n          \n      \n    \n    \n  \n\nAlso, the name and ID use \"key binding\" but the description uses \"keybinding\", should be made consistent.", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r435589182", "createdAt": "2020-06-04T22:34:38Z", "author": {"login": "Juuxel"}, "path": "fabric-key-binding-api-v1/src/main/resources/fabric.mod.json", "diffHunk": "@@ -0,0 +1,25 @@\n+{\n+  \"schemaVersion\": 1,\n+  \"id\": \"fabric-key-binding-api-v1\",\n+  \"name\": \"Fabric Key Bindings API (v1)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859156c813a1efc28c160b47047c6b457db50e63"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzOTU3NQ==", "bodyText": "Fixed", "url": "https://github.com/FabricMC/fabric/pull/615#discussion_r436239575", "createdAt": "2020-06-06T05:18:10Z", "author": {"login": "shedaniel"}, "path": "fabric-key-binding-api-v1/src/main/resources/fabric.mod.json", "diffHunk": "@@ -0,0 +1,25 @@\n+{\n+  \"schemaVersion\": 1,\n+  \"id\": \"fabric-key-binding-api-v1\",\n+  \"name\": \"Fabric Key Bindings API (v1)\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4OTE4Mg=="}, "originalCommit": {"oid": "859156c813a1efc28c160b47047c6b457db50e63"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3551, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}