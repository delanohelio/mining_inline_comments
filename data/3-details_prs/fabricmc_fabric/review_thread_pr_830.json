{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NDg1MTMx", "number": 830, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMjozODozMVrOEHVHEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxOTowMjoyM1rOE2YI-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTIxMzYyOnYy", "diffSide": "RIGHT", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/api/biomes/v1/EndBiomes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMjozODozMVrOGmpShw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMjozODozMVrOGmpShw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTU1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic static void addMidlandsiome(Biome biome, double weight) {\n          \n          \n            \n            \tpublic static void addMidlandsBiome(Biome biome, double weight) {", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443175559", "createdAt": "2020-06-21T02:38:31Z", "author": {"login": "i509VCB"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/api/biomes/v1/EndBiomes.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.biomes.v1;\n+\n+import net.fabricmc.fabric.impl.biome.EndRegion;\n+import net.minecraft.world.biome.Biome;\n+\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+\n+/**\n+ * API that allows for adding biomes to the biome source for The End.\n+ */\n+public final class EndBiomes {\n+\tprivate EndBiomes() { }\n+\n+\t/**\n+\t * Ands the biome with the specified weight to the main end island region; note that this includes the main island and some of the land encircling the empty space.\n+\t *\n+\t * @param biome the biome to be added\n+\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n+\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n+\t * Vanilla biomes have a weight of 1.0\n+\t */\n+\tpublic static void addMainIslandBiome(Biome biome, double weight) {\n+\t\tInternalBiomeData.addEndBiome(biome, EndRegion.MAIN_ISLAND, weight);\n+\t}\n+\n+\t/**\n+\t * Ands the biome to with the specified weight to the end highlands regions which correspond to the End Highlands biome.\n+\t *\n+\t * @param biome the biome to be added\n+\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n+\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n+\t * Vanilla biomes have a weight of 1.0\n+\t */\n+\tpublic static void addHighlandsBiome(Biome biome, double weight) {\n+\t\tInternalBiomeData.addEndBiome(biome, EndRegion.MAIN_ISLAND, weight);\n+\t}\n+\n+\t/**\n+\t * Ands the biome to with the specified weight to the end midlands regions which correspond to the End Midlands biome.\n+\t *\n+\t * @param biome the biome to be added\n+\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n+\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n+\t * Vanilla biomes have a weight of 1.0\n+\t */\n+\tpublic static void addMidlandsiome(Biome biome, double weight) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bd9a647015155822785fd7a2def345da1d560c6"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTIxMzkxOnYy", "diffSide": "RIGHT", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMjozOToxOVrOGmpSpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMjozOToxOVrOGmpSpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTU5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tPreconditions.checkArgument(weight > 0.0, \"Weight is less than or equal to 0.0 (%s)\", weight);\n          \n          \n            \n            \t\tPreconditions.checkArgument(weight > 0.0, \"Weight is less than or equal to 0.0 (got %s)\", weight);", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443175591", "createdAt": "2020-06-21T02:39:19Z", "author": {"login": "i509VCB"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java", "diffHunk": "@@ -131,6 +133,13 @@ public static void addNetherBiome(Biome biome) {\n \t\tNETHER_BIOMES.add(biome);\n \t}\n \n+\tpublic static void addEndBiome(Biome biome, EndRegion region, double weight) {\n+\t\tPreconditions.checkArgument(biome != null, \"Biome is null\");\n+\t\tPreconditions.checkArgument(region != null, \"EndRegion is null\");\n+\t\tPreconditions.checkArgument(weight > 0.0, \"Weight is less than or equal to 0.0 (%s)\", weight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bd9a647015155822785fd7a2def345da1d560c6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTIxNDEwOnYy", "diffSide": "RIGHT", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMjozOTo0MlrOGmpSwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMjozOTo0MlrOGmpSwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTYxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tEND_REGION_BIOME_PICKERS.computeIfAbsent(region, region1 -> new WeightedBiomePicker()).addBiome(biome, weight);\n          \n          \n            \n            \t\tEND_REGION_BIOME_PICKERS.computeIfAbsent(region, key -> new WeightedBiomePicker()).addBiome(biome, weight);", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443175616", "createdAt": "2020-06-21T02:39:42Z", "author": {"login": "i509VCB"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java", "diffHunk": "@@ -131,6 +133,13 @@ public static void addNetherBiome(Biome biome) {\n \t\tNETHER_BIOMES.add(biome);\n \t}\n \n+\tpublic static void addEndBiome(Biome biome, EndRegion region, double weight) {\n+\t\tPreconditions.checkArgument(biome != null, \"Biome is null\");\n+\t\tPreconditions.checkArgument(region != null, \"EndRegion is null\");\n+\t\tPreconditions.checkArgument(weight > 0.0, \"Weight is less than or equal to 0.0 (%s)\", weight);\n+\t\tEND_REGION_BIOME_PICKERS.computeIfAbsent(region, region1 -> new WeightedBiomePicker()).addBiome(biome, weight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bd9a647015155822785fd7a2def345da1d560c6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTIxNDY2OnYy", "diffSide": "RIGHT", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMjo0MDo1NlrOGmpS_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMjo0MDo1NlrOGmpS_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTY3Ng==", "bodyText": "Mark this @Unique", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443175676", "createdAt": "2020-06-21T02:40:56Z", "author": {"login": "i509VCB"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+import net.minecraft.world.biome.source.TheEndBiomeSource;\n+\n+import net.fabricmc.fabric.impl.biome.EndRegion;\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.SimpleLayerRandomnessSource;\n+import net.fabricmc.fabric.impl.biome.WeightedBiomePicker;\n+\n+@Mixin(TheEndBiomeSource.class)\n+public class MixinTheEndBiomeSource {\n+\t@Shadow\n+\t@Final\n+\tprivate long field_24731;\n+\tprivate final Map<Biome, EndRegion> BIOME_REGION_MAP = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bd9a647015155822785fd7a2def345da1d560c6"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTIxNDcwOnYy", "diffSide": "RIGHT", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMjo0MTowNFrOGmpTAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMjo0MTowNFrOGmpTAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTY4MQ==", "bodyText": "Mark this @Unique", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443175681", "createdAt": "2020-06-21T02:41:04Z", "author": {"login": "i509VCB"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+import net.minecraft.world.biome.source.TheEndBiomeSource;\n+\n+import net.fabricmc.fabric.impl.biome.EndRegion;\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.SimpleLayerRandomnessSource;\n+import net.fabricmc.fabric.impl.biome.WeightedBiomePicker;\n+\n+@Mixin(TheEndBiomeSource.class)\n+public class MixinTheEndBiomeSource {\n+\t@Shadow\n+\t@Final\n+\tprivate long field_24731;\n+\tprivate final Map<Biome, EndRegion> BIOME_REGION_MAP = new HashMap<>();\n+\tprivate final LayerRandomnessSource randomnessSource = new SimpleLayerRandomnessSource(field_24731);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bd9a647015155822785fd7a2def345da1d560c6"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTIxNTI3OnYy", "diffSide": "RIGHT", "path": "fabric-biomes-v1/src/testmod/java/net/fabricmc/fabric/test/biome/FabricBiomeTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMjo0MjoyNFrOGmpTSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMjo1OTo1MFrOGmpWaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTc1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic class TestEndHighlandsBiome extends EndHighlandsBiome {\n          \n          \n            \n            \n          \n          \n            \n            \t}\n          \n          \n            \n            \tpublic class TestEndHighlandsBiome extends EndHighlandsBiome {\n          \n          \n            \n            \t}\n          \n      \n    \n    \n  \n\nSo checkstyle builds", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443175754", "createdAt": "2020-06-21T02:42:24Z", "author": {"login": "i509VCB"}, "path": "fabric-biomes-v1/src/testmod/java/net/fabricmc/fabric/test/biome/FabricBiomeTest.java", "diffHunk": "@@ -31,8 +33,15 @@\n \t\tTestCrimsonForestBiome biome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_crimson_forest\"), new TestCrimsonForestBiome());\n \t\tNetherBiomes.addNetherBiome(Biomes.BEACH);\n \t\tNetherBiomes.addNetherBiome(biome);\n+\n+\t\tTestEndHighlandsBiome testEndBiome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_end_highlands\"), new TestEndHighlandsBiome());\n+\t\tEndBiomes.addHighlandsBiome(testEndBiome, 5.0);\n \t}\n \n \tpublic class TestCrimsonForestBiome extends CrimsonForestBiome {\n \t}\n+\n+\tpublic class TestEndHighlandsBiome extends EndHighlandsBiome {\n+\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bd9a647015155822785fd7a2def345da1d560c6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NjUwNQ==", "bodyText": "That doesn't prevent it from building.", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443176505", "createdAt": "2020-06-21T02:58:24Z", "author": {"login": "RedstoneParadox"}, "path": "fabric-biomes-v1/src/testmod/java/net/fabricmc/fabric/test/biome/FabricBiomeTest.java", "diffHunk": "@@ -31,8 +33,15 @@\n \t\tTestCrimsonForestBiome biome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_crimson_forest\"), new TestCrimsonForestBiome());\n \t\tNetherBiomes.addNetherBiome(Biomes.BEACH);\n \t\tNetherBiomes.addNetherBiome(biome);\n+\n+\t\tTestEndHighlandsBiome testEndBiome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_end_highlands\"), new TestEndHighlandsBiome());\n+\t\tEndBiomes.addHighlandsBiome(testEndBiome, 5.0);\n \t}\n \n \tpublic class TestCrimsonForestBiome extends CrimsonForestBiome {\n \t}\n+\n+\tpublic class TestEndHighlandsBiome extends EndHighlandsBiome {\n+\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTc1NA=="}, "originalCommit": {"oid": "1bd9a647015155822785fd7a2def345da1d560c6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NjU1Mw==", "bodyText": "must have been mistaken. I'd say then to be consistent with the other test class", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443176553", "createdAt": "2020-06-21T02:59:50Z", "author": {"login": "i509VCB"}, "path": "fabric-biomes-v1/src/testmod/java/net/fabricmc/fabric/test/biome/FabricBiomeTest.java", "diffHunk": "@@ -31,8 +33,15 @@\n \t\tTestCrimsonForestBiome biome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_crimson_forest\"), new TestCrimsonForestBiome());\n \t\tNetherBiomes.addNetherBiome(Biomes.BEACH);\n \t\tNetherBiomes.addNetherBiome(biome);\n+\n+\t\tTestEndHighlandsBiome testEndBiome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_end_highlands\"), new TestEndHighlandsBiome());\n+\t\tEndBiomes.addHighlandsBiome(testEndBiome, 5.0);\n \t}\n \n \tpublic class TestCrimsonForestBiome extends CrimsonForestBiome {\n \t}\n+\n+\tpublic class TestEndHighlandsBiome extends EndHighlandsBiome {\n+\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTc1NA=="}, "originalCommit": {"oid": "1bd9a647015155822785fd7a2def345da1d560c6"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTIxNzAzOnYy", "diffSide": "RIGHT", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/api/biomes/v1/EndBiomes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMjo0NzowN1rOGmpUKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMjo0NzowN1rOGmpUKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTk3OQ==", "bodyText": "TheEndBiomes imo", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443175979", "createdAt": "2020-06-21T02:47:07Z", "author": {"login": "Prospector"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/api/biomes/v1/EndBiomes.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.biomes.v1;\n+\n+import net.fabricmc.fabric.impl.biome.EndRegion;\n+import net.minecraft.world.biome.Biome;\n+\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+\n+/**\n+ * API that allows for adding biomes to the biome source for The End.\n+ */\n+public final class EndBiomes {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bd9a647015155822785fd7a2def345da1d560c6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTI4NzMwOnYy", "diffSide": "RIGHT", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNTo1MDoyMlrOGmp1hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNTo1NTozMFrOGmp2rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NDUxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate static final Map<EndRegion, WeightedBiomePicker> END_REGION_BIOME_PICKERS = new HashMap<>();\n          \n          \n            \n            \tprivate static final Map<EndRegion, WeightedBiomePicker> END_REGION_BIOME_PICKERS = new EnumMap<>();", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443184516", "createdAt": "2020-06-21T05:50:22Z", "author": {"login": "liach"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java", "diffHunk": "@@ -51,6 +51,8 @@ private InternalBiomeData() { }\n \n \tprivate static final Set<Biome> NETHER_BIOMES = new HashSet<>();\n \n+\tprivate static final Map<EndRegion, WeightedBiomePicker> END_REGION_BIOME_PICKERS = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc36ef24c8ba207c2b3f464048beb1502852957"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NDgxMw==", "bodyText": "Don't just apply this change, you need to add import in addition", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443184813", "createdAt": "2020-06-21T05:55:30Z", "author": {"login": "liach"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java", "diffHunk": "@@ -51,6 +51,8 @@ private InternalBiomeData() { }\n \n \tprivate static final Set<Biome> NETHER_BIOMES = new HashSet<>();\n \n+\tprivate static final Map<EndRegion, WeightedBiomePicker> END_REGION_BIOME_PICKERS = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NDUxNg=="}, "originalCommit": {"oid": "9dc36ef24c8ba207c2b3f464048beb1502852957"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTI4Nzg1OnYy", "diffSide": "RIGHT", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/SimpleLayerRandomnessSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNTo1MTozNlrOGmp1xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNTo1MTozNlrOGmp1xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NDU4MQ==", "bodyText": "Is it intentional that the calls on the sampler doesn't affect the calls on nextInt in this implementation?", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443184581", "createdAt": "2020-06-21T05:51:36Z", "author": {"login": "liach"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/SimpleLayerRandomnessSource.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.biome;\n+\n+import java.util.Random;\n+\n+import net.minecraft.util.math.noise.PerlinNoiseSampler;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+\n+public class SimpleLayerRandomnessSource implements LayerRandomnessSource {\n+\tprivate final long seed;\n+\tprivate final Random random;\n+\tprivate final PerlinNoiseSampler sampler;\n+\n+\tpublic SimpleLayerRandomnessSource(long seed) {\n+\t\tthis.seed = seed;\n+\t\tthis.random = new Random(seed);\n+\t\tthis.sampler = new PerlinNoiseSampler(new Random(seed));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc36ef24c8ba207c2b3f464048beb1502852957"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTI4ODcxOnYy", "diffSide": "RIGHT", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNTo1MzoxMlrOGmp2MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNTo1MzoxMlrOGmp2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NDY4OQ==", "bodyText": "Maybe comment that picker won't be null as you've populated all the 5 end regions above, so if npe arises below it'd be easier to debug", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443184689", "createdAt": "2020-06-21T05:53:12Z", "author": {"login": "liach"}, "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+import net.minecraft.world.biome.source.TheEndBiomeSource;\n+\n+import net.fabricmc.fabric.impl.biome.EndRegion;\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.SimpleLayerRandomnessSource;\n+import net.fabricmc.fabric.impl.biome.WeightedBiomePicker;\n+\n+@Mixin(TheEndBiomeSource.class)\n+public class MixinTheEndBiomeSource {\n+\t@Shadow\n+\t@Final\n+\tprivate long field_24731;\n+\t@Unique\n+\tprivate final Map<Biome, EndRegion> BIOME_REGION_MAP = new HashMap<>();\n+\t@Unique\n+\tprivate final LayerRandomnessSource randomnessSource = new SimpleLayerRandomnessSource(field_24731);\n+\n+\t@Inject(method = \"<init>\", at = @At(\"TAIL\"))\n+\tprivate void fabric_addDefaultEndBiomes(long l, CallbackInfo ci) {\n+\t\tBIOME_REGION_MAP.put(Biomes.THE_END, EndRegion.MAIN_ISLAND);\n+\t\tBIOME_REGION_MAP.put(Biomes.END_HIGHLANDS, EndRegion.HIGHLANDS);\n+\t\tBIOME_REGION_MAP.put(Biomes.END_MIDLANDS, EndRegion.MIDLANDS);\n+\t\tBIOME_REGION_MAP.put(Biomes.END_BARRENS, EndRegion.BARRENS);\n+\t\tBIOME_REGION_MAP.put(Biomes.SMALL_END_ISLANDS, EndRegion.SMALL_ISLANDS);\n+\n+\t\tfor (Map.Entry<Biome, EndRegion> entry : BIOME_REGION_MAP.entrySet()) {\n+\t\t\tBiome biome = entry.getKey();\n+\t\t\tEndRegion region = entry.getValue();\n+\t\t\tInternalBiomeData.addEndBiome(biome, region, 1.0);\n+\t\t}\n+\t}\n+\n+\t@Inject(method = \"getBiomeForNoiseGen\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void fabric_getWeightedEndBiome(int biomeX, int biomeY, int biomeZ, CallbackInfoReturnable<Biome> cir) {\n+\t\tBiome vanillaBiome = cir.getReturnValue();\n+\n+\t\tif (BIOME_REGION_MAP.containsKey(vanillaBiome)) {\n+\t\t\tEndRegion region = BIOME_REGION_MAP.get(vanillaBiome);\n+\t\t\tWeightedBiomePicker picker = InternalBiomeData.getEndRegionBiomePickers().get(region);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc36ef24c8ba207c2b3f464048beb1502852957"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDY5MDk4OnYy", "diffSide": "RIGHT", "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNToxNzo0MVrOHn2eVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNToxNzo0MVrOHn2eVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0OTAxMg==", "bodyText": "this should be variant is null", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r511549012", "createdAt": "2020-10-25T05:17:41Z", "author": {"login": "OroArmor"}, "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java", "diffHunk": "@@ -142,6 +161,13 @@ public static void addNetherBiome(RegistryKey<Biome> biome, Biome.MixedNoisePoin\n \t\tNETHER_BIOME_NOISE_POINTS.put(biome, spawnNoisePoint);\n \t}\n \n+\tpublic static void addEndBiomeReplacement(RegistryKey<Biome> replaced, RegistryKey<Biome> variant, double weight) {\n+\t\tPreconditions.checkNotNull(replaced, \"replaced is null\");\n+\t\tPreconditions.checkNotNull(variant, \"replaced is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc471062410ec2de0899a7520584b16f5ddb88f1"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDY5Mjg2OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/testmod/java/net/fabricmc/fabric/test/item/FabricItemSettingsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNToyMToxOFrOHn2fKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNToyMToxOFrOHn2fKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0OTIyNg==", "bodyText": "uh is git being weird... This is in the wrong module, It should be in the biomes module, but it is in the Items module.", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r511549226", "createdAt": "2020-10-25T05:21:18Z", "author": {"login": "OroArmor"}, "path": "fabric-item-api-v1/src/testmod/java/net/fabricmc/fabric/test/item/FabricItemSettingsTests.java", "diffHunk": "@@ -16,20 +16,31 @@\n \n package net.fabricmc.fabric.test.item;\n \n-import net.minecraft.entity.EquipmentSlot;\n-import net.minecraft.item.Item;\n-import net.minecraft.item.ItemGroup;\n import net.minecraft.util.Identifier;\n import net.minecraft.util.registry.Registry;\n+import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.CrimsonForestBiome;\n+import net.minecraft.world.biome.EndHighlandsBiome;\n \n+import net.fabricmc.fabric.api.biomes.v1.TheEndBiomes;\n import net.fabricmc.api.ModInitializer;\n-import net.fabricmc.fabric.api.item.v1.FabricItemSettings;\n-\n-public class FabricItemSettingsTests implements ModInitializer {\n-\t@Override\n-\tpublic void onInitialize() {\n-\t\t// Registers an item with a custom equipment slot.\n-\t\tItem testItem = new Item(new FabricItemSettings().group(ItemGroup.MISC).equipmentSlot(stack -> EquipmentSlot.CHEST));\n-\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-item-api-v1-testmod\", \"test_item\"), testItem);\n+import net.fabricmc.fabric.api.biomes.v1.NetherBiomes;\n+\n+public class FabricBiomeTest implements ModInitializer {\n+\tpublic static final String MOD_ID = \"fabric-biome-api-v1-testmod\";\n+\n+\t@Override public void onInitialize() {\n+\t\tTestCrimsonForestBiome biome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_crimson_forest\"), new TestCrimsonForestBiome());\n+\t\tNetherBiomes.addNetherBiome(Biomes.BEACH);\n+\t\tNetherBiomes.addNetherBiome(biome);\n+\n+\t\tTestEndHighlandsBiome testEndBiome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_end_highlands\"), new TestEndHighlandsBiome());\n+\t\tTheEndBiomes.addHighlandsBiome(testEndBiome, 5.0);\n+\t}\n+\n+\tpublic class TestCrimsonForestBiome extends CrimsonForestBiome {\n+\t}\n+\n+\tpublic class TestEndHighlandsBiome extends EndHighlandsBiome {\n \t}\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc471062410ec2de0899a7520584b16f5ddb88f1"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjQyMDYzOnYy", "diffSide": "RIGHT", "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzo0OTowM1rOHsfcrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzo0OTowM1rOHsfcrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxNDYzOA==", "bodyText": "the fabric_ prefix can be dropped", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r516414638", "createdAt": "2020-11-03T03:49:03Z", "author": {"login": "i509VCB"}, "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.BiomeKeys;\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+import net.minecraft.world.biome.source.TheEndBiomeSource;\n+\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.SimpleLayerRandomnessSource;\n+import net.fabricmc.fabric.impl.biome.WeightedBiomePicker;\n+\n+@Mixin(TheEndBiomeSource.class)\n+public class MixinTheEndBiomeSource {\n+\t@Shadow\n+\t@Final\n+\tprivate Registry<Biome> biomeRegistry;\n+\t@Shadow\n+\t@Final\n+\tprivate long seed;\n+\t@Unique\n+\tprivate LayerRandomnessSource randomnessSource = new SimpleLayerRandomnessSource(seed);\n+\n+\t@Inject(method = \"getBiomeForNoiseGen\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void fabric_getWeightedEndBiome(int biomeX, int biomeY, int biomeZ, CallbackInfoReturnable<Biome> cir) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24968ce2bf0120f59bfa9e3336e408e7b1fa6782"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzQ0MDYxOnYy", "diffSide": "RIGHT", "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMzozOToyNFrOHvAtQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzo1MTo1N1rOHxX-lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1NjcwNQ==", "bodyText": "One thing that was never actually addressed was whether or not this stretch value of 64 was good for biome sampling. Since TheEndBiomeSource is very simplistic, there isn't actually anything to base this value off of and was something I came up with. Perhaps 128 or 256 would be better?", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r519056705", "createdAt": "2020-11-06T23:39:24Z", "author": {"login": "RedstoneParadox"}, "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.BiomeKeys;\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+import net.minecraft.world.biome.source.TheEndBiomeSource;\n+\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.SimpleLayerRandomnessSource;\n+import net.fabricmc.fabric.impl.biome.WeightedBiomePicker;\n+\n+@Mixin(TheEndBiomeSource.class)\n+public class MixinTheEndBiomeSource {\n+\t@Shadow\n+\t@Final\n+\tprivate Registry<Biome> biomeRegistry;\n+\t@Shadow\n+\t@Final\n+\tprivate long seed;\n+\t@Unique\n+\tprivate LayerRandomnessSource randomnessSource = new SimpleLayerRandomnessSource(seed);\n+\n+\t@Inject(method = \"getBiomeForNoiseGen\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void getWeightedEndBiome(int biomeX, int biomeY, int biomeZ, CallbackInfoReturnable<Biome> cir) {\n+\t\tBiome vanillaBiome = cir.getReturnValue();\n+\n+\t\t// Since all vanilla biomes are added to the registry, this will never fail.\n+\t\t// If not all vanilla biomes are added to the registry, this code will fail\n+\t\t// either way.\n+\t\tRegistryKey<Biome> vanillaKey = biomeRegistry.getKey(vanillaBiome).get();\n+\t\tRegistryKey<Biome> replacementKey;\n+\n+\t\tif (vanillaKey == BiomeKeys.END_MIDLANDS || vanillaKey == BiomeKeys.END_BARRENS) {\n+\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\tWeightedBiomePicker highlandsPicker = InternalBiomeData.getEndBiomesMap().get(BiomeKeys.END_HIGHLANDS);\n+\t\t\tRegistryKey<Biome> highlandsKey = highlandsPicker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);\n+\n+\t\t\tif (vanillaKey == BiomeKeys.END_MIDLANDS) {\n+\t\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\t\tWeightedBiomePicker midlandsPicker = InternalBiomeData.getEndMidlandsMap().get(highlandsKey);\n+\t\t\t\treplacementKey = midlandsPicker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);\n+\t\t\t} else {\n+\t\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\t\tWeightedBiomePicker barrensPicker = InternalBiomeData.getEndBarrensMap().get(highlandsKey);\n+\t\t\t\treplacementKey = barrensPicker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);\n+\t\t\t}\n+\t\t} else {\n+\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\tWeightedBiomePicker picker = InternalBiomeData.getEndBiomesMap().get(vanillaKey);\n+\t\t\treplacementKey = picker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d379a07d881d52a465cc85ea6988c43eb05fbcfd"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyNTUwOQ==", "bodyText": "I did some testing and it's very difficult to find a custom biome when the stretch is 128, so I'm just going to leave it as is.", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r521525509", "createdAt": "2020-11-11T17:36:45Z", "author": {"login": "RedstoneParadox"}, "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.BiomeKeys;\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+import net.minecraft.world.biome.source.TheEndBiomeSource;\n+\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.SimpleLayerRandomnessSource;\n+import net.fabricmc.fabric.impl.biome.WeightedBiomePicker;\n+\n+@Mixin(TheEndBiomeSource.class)\n+public class MixinTheEndBiomeSource {\n+\t@Shadow\n+\t@Final\n+\tprivate Registry<Biome> biomeRegistry;\n+\t@Shadow\n+\t@Final\n+\tprivate long seed;\n+\t@Unique\n+\tprivate LayerRandomnessSource randomnessSource = new SimpleLayerRandomnessSource(seed);\n+\n+\t@Inject(method = \"getBiomeForNoiseGen\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void getWeightedEndBiome(int biomeX, int biomeY, int biomeZ, CallbackInfoReturnable<Biome> cir) {\n+\t\tBiome vanillaBiome = cir.getReturnValue();\n+\n+\t\t// Since all vanilla biomes are added to the registry, this will never fail.\n+\t\t// If not all vanilla biomes are added to the registry, this code will fail\n+\t\t// either way.\n+\t\tRegistryKey<Biome> vanillaKey = biomeRegistry.getKey(vanillaBiome).get();\n+\t\tRegistryKey<Biome> replacementKey;\n+\n+\t\tif (vanillaKey == BiomeKeys.END_MIDLANDS || vanillaKey == BiomeKeys.END_BARRENS) {\n+\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\tWeightedBiomePicker highlandsPicker = InternalBiomeData.getEndBiomesMap().get(BiomeKeys.END_HIGHLANDS);\n+\t\t\tRegistryKey<Biome> highlandsKey = highlandsPicker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);\n+\n+\t\t\tif (vanillaKey == BiomeKeys.END_MIDLANDS) {\n+\t\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\t\tWeightedBiomePicker midlandsPicker = InternalBiomeData.getEndMidlandsMap().get(highlandsKey);\n+\t\t\t\treplacementKey = midlandsPicker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);\n+\t\t\t} else {\n+\t\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\t\tWeightedBiomePicker barrensPicker = InternalBiomeData.getEndBarrensMap().get(highlandsKey);\n+\t\t\t\treplacementKey = barrensPicker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);\n+\t\t\t}\n+\t\t} else {\n+\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\tWeightedBiomePicker picker = InternalBiomeData.getEndBiomesMap().get(vanillaKey);\n+\t\t\treplacementKey = picker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1NjcwNQ=="}, "originalCommit": {"oid": "d379a07d881d52a465cc85ea6988c43eb05fbcfd"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUzNTEyNQ==", "bodyText": "It would be nice if you throw a comment there explaining why 64 is the best value for say", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r521535125", "createdAt": "2020-11-11T17:51:57Z", "author": {"login": "i509VCB"}, "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.BiomeKeys;\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+import net.minecraft.world.biome.source.TheEndBiomeSource;\n+\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.SimpleLayerRandomnessSource;\n+import net.fabricmc.fabric.impl.biome.WeightedBiomePicker;\n+\n+@Mixin(TheEndBiomeSource.class)\n+public class MixinTheEndBiomeSource {\n+\t@Shadow\n+\t@Final\n+\tprivate Registry<Biome> biomeRegistry;\n+\t@Shadow\n+\t@Final\n+\tprivate long seed;\n+\t@Unique\n+\tprivate LayerRandomnessSource randomnessSource = new SimpleLayerRandomnessSource(seed);\n+\n+\t@Inject(method = \"getBiomeForNoiseGen\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void getWeightedEndBiome(int biomeX, int biomeY, int biomeZ, CallbackInfoReturnable<Biome> cir) {\n+\t\tBiome vanillaBiome = cir.getReturnValue();\n+\n+\t\t// Since all vanilla biomes are added to the registry, this will never fail.\n+\t\t// If not all vanilla biomes are added to the registry, this code will fail\n+\t\t// either way.\n+\t\tRegistryKey<Biome> vanillaKey = biomeRegistry.getKey(vanillaBiome).get();\n+\t\tRegistryKey<Biome> replacementKey;\n+\n+\t\tif (vanillaKey == BiomeKeys.END_MIDLANDS || vanillaKey == BiomeKeys.END_BARRENS) {\n+\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\tWeightedBiomePicker highlandsPicker = InternalBiomeData.getEndBiomesMap().get(BiomeKeys.END_HIGHLANDS);\n+\t\t\tRegistryKey<Biome> highlandsKey = highlandsPicker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);\n+\n+\t\t\tif (vanillaKey == BiomeKeys.END_MIDLANDS) {\n+\t\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\t\tWeightedBiomePicker midlandsPicker = InternalBiomeData.getEndMidlandsMap().get(highlandsKey);\n+\t\t\t\treplacementKey = midlandsPicker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);\n+\t\t\t} else {\n+\t\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\t\tWeightedBiomePicker barrensPicker = InternalBiomeData.getEndBarrensMap().get(highlandsKey);\n+\t\t\t\treplacementKey = barrensPicker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);\n+\t\t\t}\n+\t\t} else {\n+\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\tWeightedBiomePicker picker = InternalBiomeData.getEndBiomesMap().get(vanillaKey);\n+\t\t\treplacementKey = picker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1NjcwNQ=="}, "originalCommit": {"oid": "d379a07d881d52a465cc85ea6988c43eb05fbcfd"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDU0MDcyOnYy", "diffSide": "RIGHT", "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/impl/biome/SimpleLayerRandomnessSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxOTowMjoyM1rOHvJ54w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxOTozMjoyMVrOHvKFQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwNzM5NQ==", "bodyText": "Don't use Java's random here. It'll cause issues. Instead, the layer random should be re-initialized with the x/z coords and world seed. (nextInt() is not used anywhere here, but it's important enough to point out. Alternatively, throw an unsupported operation exception in nextInt.)", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r519207395", "createdAt": "2020-11-07T19:02:23Z", "author": {"login": "SuperCoder7979"}, "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/impl/biome/SimpleLayerRandomnessSource.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.biome;\n+\n+import java.util.Random;\n+\n+import net.minecraft.util.math.noise.PerlinNoiseSampler;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+\n+public class SimpleLayerRandomnessSource implements LayerRandomnessSource {\n+\tprivate final long seed;\n+\tprivate final Random random;\n+\tprivate final PerlinNoiseSampler sampler;\n+\n+\tpublic SimpleLayerRandomnessSource(long seed) {\n+\t\tthis.seed = seed;\n+\t\tthis.random = new Random(seed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d379a07d881d52a465cc85ea6988c43eb05fbcfd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIxMDMwNA==", "bodyText": "But then what do I pass to the PerlinNoiseSampler?", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r519210304", "createdAt": "2020-11-07T19:32:21Z", "author": {"login": "RedstoneParadox"}, "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/impl/biome/SimpleLayerRandomnessSource.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.biome;\n+\n+import java.util.Random;\n+\n+import net.minecraft.util.math.noise.PerlinNoiseSampler;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+\n+public class SimpleLayerRandomnessSource implements LayerRandomnessSource {\n+\tprivate final long seed;\n+\tprivate final Random random;\n+\tprivate final PerlinNoiseSampler sampler;\n+\n+\tpublic SimpleLayerRandomnessSource(long seed) {\n+\t\tthis.seed = seed;\n+\t\tthis.random = new Random(seed);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwNzM5NQ=="}, "originalCommit": {"oid": "d379a07d881d52a465cc85ea6988c43eb05fbcfd"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3385, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}