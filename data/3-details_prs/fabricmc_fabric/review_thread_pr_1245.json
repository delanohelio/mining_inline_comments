{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2Mjk4NTIy", "number": 1245, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo1MTowMVrOFJqlyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNDo0NjozMFrOFJraVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Njc5MzA0OnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo1MTowMVrOIMF0Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo1NDo1OVrOIMF2nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0OTEwNw==", "bodyText": "Should this be returning an empty set or fail since the entity is not being tracked at all by the server world.", "url": "https://github.com/FabricMC/fabric/pull/1245#discussion_r549549107", "createdAt": "2020-12-29T02:51:01Z", "author": {"login": "i509VCB"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java", "diffHunk": "@@ -111,9 +113,15 @@\n \n \t\tif (manager instanceof ServerChunkManager) {\n \t\t\tThreadedAnvilChunkStorage storage = ((ServerChunkManager) manager).threadedAnvilChunkStorage;\n+\t\t\tEntityTrackerAccessor tracker = ((ThreadedAnvilChunkStorageAccessor) storage).getEntityTrackers().get(entity.getEntityId());\n \n \t\t\t// return an immutable collection to guard against accidental removals.\n-\t\t\treturn Collections.unmodifiableCollection(((ThreadedAnvilChunkStorageTrackingExtensions) storage).fabric_getTrackingPlayers(entity));\n+\t\t\tif (tracker != null) {\n+\t\t\t\treturn Collections.unmodifiableCollection(tracker.getPlayersTracking()\n+\t\t\t\t\t\t.stream().map(class_5629::method_32311).collect(Collectors.toSet()));\n+\t\t\t}\n+\n+\t\t\treturn Collections.emptySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c29480066a998fcbc595515ee7ecbbe8239866"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0OTU3Nw==", "bodyText": "This is following the semantics of the late ThreadedAnvilChunkStorageMixinfabric_getTrackingPlayers", "url": "https://github.com/FabricMC/fabric/pull/1245#discussion_r549549577", "createdAt": "2020-12-29T02:53:56Z", "author": {"login": "ChloeDawn"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java", "diffHunk": "@@ -111,9 +113,15 @@\n \n \t\tif (manager instanceof ServerChunkManager) {\n \t\t\tThreadedAnvilChunkStorage storage = ((ServerChunkManager) manager).threadedAnvilChunkStorage;\n+\t\t\tEntityTrackerAccessor tracker = ((ThreadedAnvilChunkStorageAccessor) storage).getEntityTrackers().get(entity.getEntityId());\n \n \t\t\t// return an immutable collection to guard against accidental removals.\n-\t\t\treturn Collections.unmodifiableCollection(((ThreadedAnvilChunkStorageTrackingExtensions) storage).fabric_getTrackingPlayers(entity));\n+\t\t\tif (tracker != null) {\n+\t\t\t\treturn Collections.unmodifiableCollection(tracker.getPlayersTracking()\n+\t\t\t\t\t\t.stream().map(class_5629::method_32311).collect(Collectors.toSet()));\n+\t\t\t}\n+\n+\t\t\treturn Collections.emptySet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0OTEwNw=="}, "originalCommit": {"oid": "72c29480066a998fcbc595515ee7ecbbe8239866"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0OTcyNw==", "bodyText": "Hmm I see.", "url": "https://github.com/FabricMC/fabric/pull/1245#discussion_r549549727", "createdAt": "2020-12-29T02:54:59Z", "author": {"login": "i509VCB"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java", "diffHunk": "@@ -111,9 +113,15 @@\n \n \t\tif (manager instanceof ServerChunkManager) {\n \t\t\tThreadedAnvilChunkStorage storage = ((ServerChunkManager) manager).threadedAnvilChunkStorage;\n+\t\t\tEntityTrackerAccessor tracker = ((ThreadedAnvilChunkStorageAccessor) storage).getEntityTrackers().get(entity.getEntityId());\n \n \t\t\t// return an immutable collection to guard against accidental removals.\n-\t\t\treturn Collections.unmodifiableCollection(((ThreadedAnvilChunkStorageTrackingExtensions) storage).fabric_getTrackingPlayers(entity));\n+\t\t\tif (tracker != null) {\n+\t\t\t\treturn Collections.unmodifiableCollection(tracker.getPlayersTracking()\n+\t\t\t\t\t\t.stream().map(class_5629::method_32311).collect(Collectors.toSet()));\n+\t\t\t}\n+\n+\t\t\treturn Collections.emptySet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0OTEwNw=="}, "originalCommit": {"oid": "72c29480066a998fcbc595515ee7ecbbe8239866"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjkyNzU5OnYy", "diffSide": "RIGHT", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNDo0NjozMFrOIMG3UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNDo0NjozMFrOIMG3UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2NjI4OA==", "bodyText": "pre-sized output collection with manual for-each please, the Stream is needless overhead+debugging hazard", "url": "https://github.com/FabricMC/fabric/pull/1245#discussion_r549566288", "createdAt": "2020-12-29T04:46:30Z", "author": {"login": "sfPlayer1"}, "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java", "diffHunk": "@@ -111,9 +113,15 @@\n \n \t\tif (manager instanceof ServerChunkManager) {\n \t\t\tThreadedAnvilChunkStorage storage = ((ServerChunkManager) manager).threadedAnvilChunkStorage;\n+\t\t\tEntityTrackerAccessor tracker = ((ThreadedAnvilChunkStorageAccessor) storage).getEntityTrackers().get(entity.getEntityId());\n \n \t\t\t// return an immutable collection to guard against accidental removals.\n-\t\t\treturn Collections.unmodifiableCollection(((ThreadedAnvilChunkStorageTrackingExtensions) storage).fabric_getTrackingPlayers(entity));\n+\t\t\tif (tracker != null) {\n+\t\t\t\treturn Collections.unmodifiableCollection(tracker.getPlayersTracking()\n+\t\t\t\t\t\t.stream().map(class_5629::method_32311).collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c29480066a998fcbc595515ee7ecbbe8239866"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3373, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}