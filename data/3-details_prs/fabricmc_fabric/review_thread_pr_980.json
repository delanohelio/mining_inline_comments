{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNzc5Nzk3", "number": 980, "reviewThreads": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNDo0NzowM1rOEUQcYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMTowNjozM1rOEWoWVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Njc2Mzg3OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BreakBlockCallback.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNDo0NzowM1rOG6bi7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNDo0OTowNFrOG6bkCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkyMTkwMQ==", "bodyText": "Imo we also need a After event so mods can react to the block being broken if it occurs.\nSo this would probably become a Before event\nEDIT: The after event should not be cancellable.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r463921901", "createdAt": "2020-08-01T04:47:03Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BreakBlockCallback.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.Hand;\n+import net.minecraft.util.hit.BlockHitResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+/**\n+ * Callback for when a block is broken.\n+ * Only called on the server, however updates are synced with the client.\n+ *\n+ * <p>Upon return:\n+ * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+ * <li>FAIL cancels the block breaking action\n+ */\n+public interface BreakBlockCallback {\n+\tEvent<BreakBlockCallback> EVENT = EventFactory.createArrayBacked(BreakBlockCallback.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ecebb524346cdf3b7dd5068f3aa63968fda813"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkyMjE4Ng==", "bodyText": "I'll add that", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r463922186", "createdAt": "2020-08-01T04:49:04Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BreakBlockCallback.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.Hand;\n+import net.minecraft.util.hit.BlockHitResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+/**\n+ * Callback for when a block is broken.\n+ * Only called on the server, however updates are synced with the client.\n+ *\n+ * <p>Upon return:\n+ * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+ * <li>FAIL cancels the block breaking action\n+ */\n+public interface BreakBlockCallback {\n+\tEvent<BreakBlockCallback> EVENT = EventFactory.createArrayBacked(BreakBlockCallback.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkyMTkwMQ=="}, "originalCommit": {"oid": "d0ecebb524346cdf3b7dd5068f3aa63968fda813"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzIyNTgzOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/testmod/java/net/fabricmc/fabric/test/event/interaction/InteractionEventsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNjoxNjo0N1rOG6e5XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNjozODoyNVrOG6fAKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3Njc5Ng==", "bodyText": "toShortString() is client-only.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r463976796", "createdAt": "2020-08-01T16:16:47Z", "author": {"login": "Shnupbups"}, "path": "fabric-events-interaction-v0/src/testmod/java/net/fabricmc/fabric/test/event/interaction/InteractionEventsTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.event.interaction;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.block.Blocks;\n+import net.minecraft.util.ActionResult;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.player.AfterBreakBlockCallback;\n+import net.fabricmc.fabric.api.event.player.BeforeBreakBlockCallback;\n+\n+public class InteractionEventsTest implements ModInitializer {\n+\tpublic static final Logger LOGGER = LogManager.getLogger(\"InteractionEventsTest\");\n+\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tBeforeBreakBlockCallback.EVENT.register(((pos, state, entity, block) -> {\n+\t\t\treturn block == Blocks.BEDROCK ? ActionResult.FAIL : ActionResult.PASS;\n+\t\t}));\n+\n+\t\tAfterBreakBlockCallback.EVENT.register(((pos, state, entity, block) -> {\n+\t\t\tLOGGER.info(\"Block broken at \" + pos.toShortString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "328f32cccfca4316ba352ebdba4966181f82ad51"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3ODUzOQ==", "bodyText": "also remove ur debug statement :tiny_potato:", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r463978539", "createdAt": "2020-08-01T16:38:25Z", "author": {"login": "Devan-Kerman"}, "path": "fabric-events-interaction-v0/src/testmod/java/net/fabricmc/fabric/test/event/interaction/InteractionEventsTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.event.interaction;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.block.Blocks;\n+import net.minecraft.util.ActionResult;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.player.AfterBreakBlockCallback;\n+import net.fabricmc.fabric.api.event.player.BeforeBreakBlockCallback;\n+\n+public class InteractionEventsTest implements ModInitializer {\n+\tpublic static final Logger LOGGER = LogManager.getLogger(\"InteractionEventsTest\");\n+\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tBeforeBreakBlockCallback.EVENT.register(((pos, state, entity, block) -> {\n+\t\t\treturn block == Blocks.BEDROCK ? ActionResult.FAIL : ActionResult.PASS;\n+\t\t}));\n+\n+\t\tAfterBreakBlockCallback.EVENT.register(((pos, state, entity, block) -> {\n+\t\t\tLOGGER.info(\"Block broken at \" + pos.toShortString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3Njc5Ng=="}, "originalCommit": {"oid": "328f32cccfca4316ba352ebdba4966181f82ad51"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzI1ODUwOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PostBreakBlockCallback.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzowMzoyMFrOG6fIaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzoyMzoyN1rOG6fOkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MDY0OA==", "bodyText": "Named post but the event is called before? Something is wrong here.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r463980648", "createdAt": "2020-08-01T17:03:20Z", "author": {"login": "LambdAurora"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PostBreakBlockCallback.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Callback before a block is broken.\n+ * Only called on the server, however updates are synced with the client.\n+ *\n+ * <p>Upon return:\n+ * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+ * <li>FAIL cancels the block breaking action</ul>\n+ */\n+public interface PostBreakBlockCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "640185e26c20e4fca486d6068071667a1edd23f2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjIyNg==", "bodyText": "Imo just make a BlockBreakEvents class and move the individual callback interfaces to subclasses there with simple names like Pre Post. Btw @Geometrically you messed up pre and post as lambd said", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r463982226", "createdAt": "2020-08-01T17:23:27Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PostBreakBlockCallback.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Callback before a block is broken.\n+ * Only called on the server, however updates are synced with the client.\n+ *\n+ * <p>Upon return:\n+ * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+ * <li>FAIL cancels the block breaking action</ul>\n+ */\n+public interface PostBreakBlockCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MDY0OA=="}, "originalCommit": {"oid": "640185e26c20e4fca486d6068071667a1edd23f2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzI1ODYyOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PostBreakBlockCallback.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzowMzoyNVrOG6fIdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzowMzoyNVrOG6fIdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MDY2MA==", "bodyText": "The injection point of the event is in ServerPlayerInteractionManager, why the event doesn't give the player handle as its triggered when the player does the action?", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r463980660", "createdAt": "2020-08-01T17:03:25Z", "author": {"login": "LambdAurora"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PostBreakBlockCallback.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Callback before a block is broken.\n+ * Only called on the server, however updates are synced with the client.\n+ *\n+ * <p>Upon return:\n+ * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+ * <li>FAIL cancels the block breaking action</ul>\n+ */\n+public interface PostBreakBlockCallback {\n+\tEvent<PostBreakBlockCallback> EVENT = EventFactory.createArrayBacked(PostBreakBlockCallback.class,\n+\t\t\t(listeners) -> (pos, state, entity, block) -> {\n+\t\t\t\tfor (PostBreakBlockCallback event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(pos, state, entity, block);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\tActionResult beforeBlockBreak(BlockPos pos, BlockState state, BlockEntity entity, Block block);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "640185e26c20e4fca486d6068071667a1edd23f2"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzI1ODY0OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PreBreakBlockCallback.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzowMzoyOVrOG6fIdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzowMzoyOVrOG6fIdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MDY2Mg==", "bodyText": "Same issue with player handle.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r463980662", "createdAt": "2020-08-01T17:03:29Z", "author": {"login": "LambdAurora"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PreBreakBlockCallback.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.util.math.BlockPos;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Callback after a block is broken.\n+ * Only called on the server, however updates are synced with the client.\n+ */\n+public interface PreBreakBlockCallback {\n+\tEvent<PreBreakBlockCallback> EVENT = EventFactory.createArrayBacked(PreBreakBlockCallback.class,\n+\t\t\t(listeners) -> (pos, state, entity, block) -> {\n+\t\t\t\tfor (PreBreakBlockCallback event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(pos, state, entity, block);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\tvoid afterBlockBreak(BlockPos pos, BlockState state, BlockEntity entity, Block block);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "640185e26c20e4fca486d6068071667a1edd23f2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzI3NTEzOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzoyNzo1MVrOG6fQHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoyNDowM1rOG7CF0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjYyMg==", "bodyText": "Are we really to send 27 packets? Like is 7 packets not sufficient (send packet at pos and do a for loop for direction values and send packet for pos offset at each direction)\nAlso if you do need to send by radius, there is method in block pos that allow you to iterate block pos in a radius (3d) from closest to furthest.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r463982622", "createdAt": "2020-08-01T17:27:51Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +87,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = PostBreakBlockCallback.EVENT.invoker().beforeBlockBreak(pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);\n+\n+\t\t\tfor (int x = 0; x < 3; x++) {\n+\t\t\t\tfor (int y = 0; y < 3; y++) {\n+\t\t\t\t\tfor (int z = 0; z < 3; z++) {\n+\t\t\t\t\t\tthis.player.networkHandler.sendPacket(new BlockUpdateS2CPacket(world, cornerPos.add(x, y, z)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "640185e26c20e4fca486d6068071667a1edd23f2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzMzMg==", "bodyText": "yes u do need all 27 packets because of redstone dust", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r463983332", "createdAt": "2020-08-01T17:36:40Z", "author": {"login": "Devan-Kerman"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +87,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = PostBreakBlockCallback.EVENT.invoker().beforeBlockBreak(pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);\n+\n+\t\t\tfor (int x = 0; x < 3; x++) {\n+\t\t\t\tfor (int y = 0; y < 3; y++) {\n+\t\t\t\t\tfor (int z = 0; z < 3; z++) {\n+\t\t\t\t\t\tthis.player.networkHandler.sendPacket(new BlockUpdateS2CPacket(world, cornerPos.add(x, y, z)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjYyMg=="}, "originalCommit": {"oid": "640185e26c20e4fca486d6068071667a1edd23f2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzY2NA==", "bodyText": "Does redstone dust update block that far? And how can we make sure modded blocks don't update further?", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r463983664", "createdAt": "2020-08-01T17:40:48Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +87,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = PostBreakBlockCallback.EVENT.invoker().beforeBlockBreak(pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);\n+\n+\t\t\tfor (int x = 0; x < 3; x++) {\n+\t\t\t\tfor (int y = 0; y < 3; y++) {\n+\t\t\t\t\tfor (int z = 0; z < 3; z++) {\n+\t\t\t\t\t\tthis.player.networkHandler.sendPacket(new BlockUpdateS2CPacket(world, cornerPos.add(x, y, z)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjYyMg=="}, "originalCommit": {"oid": "640185e26c20e4fca486d6068071667a1edd23f2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4Mzk1MA==", "bodyText": "does vanilla do this?", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r463983950", "createdAt": "2020-08-01T17:44:33Z", "author": {"login": "shedaniel"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +87,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = PostBreakBlockCallback.EVENT.invoker().beforeBlockBreak(pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);\n+\n+\t\t\tfor (int x = 0; x < 3; x++) {\n+\t\t\t\tfor (int y = 0; y < 3; y++) {\n+\t\t\t\t\tfor (int z = 0; z < 3; z++) {\n+\t\t\t\t\t\tthis.player.networkHandler.sendPacket(new BlockUpdateS2CPacket(world, cornerPos.add(x, y, z)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjYyMg=="}, "originalCommit": {"oid": "640185e26c20e4fca486d6068071667a1edd23f2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4OTUxNw==", "bodyText": "Does redstone dust update block that far? And how can we make sure modded blocks don't update further?\n\nwe don't, mods will just have to listen in and send packets themselves most likely, but it might not be an issue I'm not sure.\nand redstone dust\nX\nBX\nx = redstone dust\nb = block\nbreak the bottom redstone dust, the top one will change it's state, that's why we need the 27.\nif your concern is performance this is nothing I wouldn't worry about it", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r463989517", "createdAt": "2020-08-01T18:52:52Z", "author": {"login": "Devan-Kerman"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +87,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = PostBreakBlockCallback.EVENT.invoker().beforeBlockBreak(pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);\n+\n+\t\t\tfor (int x = 0; x < 3; x++) {\n+\t\t\t\tfor (int y = 0; y < 3; y++) {\n+\t\t\t\t\tfor (int z = 0; z < 3; z++) {\n+\t\t\t\t\t\tthis.player.networkHandler.sendPacket(new BlockUpdateS2CPacket(world, cornerPos.add(x, y, z)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjYyMg=="}, "originalCommit": {"oid": "640185e26c20e4fca486d6068071667a1edd23f2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzNzAyMw==", "bodyText": "but isnt this the failed condition? failed shouldn't change anything right", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464037023", "createdAt": "2020-08-02T06:11:14Z", "author": {"login": "shedaniel"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +87,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = PostBreakBlockCallback.EVENT.invoker().beforeBlockBreak(pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);\n+\n+\t\t\tfor (int x = 0; x < 3; x++) {\n+\t\t\t\tfor (int y = 0; y < 3; y++) {\n+\t\t\t\t\tfor (int z = 0; z < 3; z++) {\n+\t\t\t\t\t\tthis.player.networkHandler.sendPacket(new BlockUpdateS2CPacket(world, cornerPos.add(x, y, z)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjYyMg=="}, "originalCommit": {"oid": "640185e26c20e4fca486d6068071667a1edd23f2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MzQyNQ==", "bodyText": "I still don't understand why the redstone will get updated if the block didn't change", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464553425", "createdAt": "2020-08-03T17:24:03Z", "author": {"login": "shedaniel"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +87,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = PostBreakBlockCallback.EVENT.invoker().beforeBlockBreak(pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);\n+\n+\t\t\tfor (int x = 0; x < 3; x++) {\n+\t\t\t\tfor (int y = 0; y < 3; y++) {\n+\t\t\t\t\tfor (int z = 0; z < 3; z++) {\n+\t\t\t\t\t\tthis.player.networkHandler.sendPacket(new BlockUpdateS2CPacket(world, cornerPos.add(x, y, z)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjYyMg=="}, "originalCommit": {"oid": "640185e26c20e4fca486d6068071667a1edd23f2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzU4MDk5OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinClientPlayerInteractionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMTozMjo1OVrOG6hbyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMzoxNjo0N1rOG6h2yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODM3OQ==", "bodyText": "You know you can set IJ to not static import and order imports properly.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464018379", "createdAt": "2020-08-02T01:32:59Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinClientPlayerInteractionManager.java", "diffHunk": "@@ -16,6 +16,11 @@\n \n package net.fabricmc.fabric.mixin.event.interaction;\n \n+import net.fabricmc.fabric.api.event.player.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c37539787f4ca20ae8baadf45a26bad38b957ebf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAyNTI5MQ==", "bodyText": "haha, ill be switching the vscode soon completely, it shouldn't happen there", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464025291", "createdAt": "2020-08-02T03:16:47Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinClientPlayerInteractionManager.java", "diffHunk": "@@ -16,6 +16,11 @@\n \n package net.fabricmc.fabric.mixin.event.interaction;\n \n+import net.fabricmc.fabric.api.event.player.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODM3OQ=="}, "originalCommit": {"oid": "c37539787f4ca20ae8baadf45a26bad38b957ebf"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzU4MzA3OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMTozNjozM1rOG6hctg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMzoyMTo0MVrOG6h38A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODYxNA==", "bodyText": "I think we should pass the world in the parameters.\nThe BlockEntity can be obtained using getBlockEntity in world. Also I don't think the block param at the end is really necessary since you can get that from the block state.\nAlso please document the fields, I have no idea whether the block state is the state being broken or the resulting state.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464018614", "createdAt": "2020-08-02T01:36:33Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<BeforeBreakBlockCallback> BEFORE = EventFactory.createArrayBacked(BeforeBreakBlockCallback.class,\n+\t\t\t(listeners) -> (player, pos, state, entity, block) -> {\n+\t\t\t\tfor (BeforeBreakBlockCallback event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(player, pos, state, entity, block);\n+\n+\t\t\t\t\tif (result != ActionResult.FAIL) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.FAIL;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t * Called on both Client and Server\n+\t */\n+\tpublic static final Event<AfterBreakBlockCallback> AFTER = EventFactory.createArrayBacked(AfterBreakBlockCallback.class,\n+\t\t\t(listeners) -> (player, pos, state, entity, block) -> {\n+\t\t\t\tfor (AfterBreakBlockCallback event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(player, pos, state, entity, block);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeBreakBlockCallback {\n+\t\tActionResult beforeBlockBreak(PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity, Block block);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c37539787f4ca20ae8baadf45a26bad38b957ebf"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAyNTU4NA==", "bodyText": "I added world to the parameters, and I am documenting it now. The blockentity is there as the method where the event is injected to already has a blockentity there, so there is no point of the double computation.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464025584", "createdAt": "2020-08-02T03:21:41Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<BeforeBreakBlockCallback> BEFORE = EventFactory.createArrayBacked(BeforeBreakBlockCallback.class,\n+\t\t\t(listeners) -> (player, pos, state, entity, block) -> {\n+\t\t\t\tfor (BeforeBreakBlockCallback event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(player, pos, state, entity, block);\n+\n+\t\t\t\t\tif (result != ActionResult.FAIL) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.FAIL;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t * Called on both Client and Server\n+\t */\n+\tpublic static final Event<AfterBreakBlockCallback> AFTER = EventFactory.createArrayBacked(AfterBreakBlockCallback.class,\n+\t\t\t(listeners) -> (player, pos, state, entity, block) -> {\n+\t\t\t\tfor (AfterBreakBlockCallback event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(player, pos, state, entity, block);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeBreakBlockCallback {\n+\t\tActionResult beforeBlockBreak(PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity, Block block);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODYxNA=="}, "originalCommit": {"oid": "c37539787f4ca20ae8baadf45a26bad38b957ebf"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzU4MzgzOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMTozODoxM1rOG6hdEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxODo1MjowMFrOG6nFnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODcwNQ==", "bodyText": "Would a mutable block pos be possible to use here if it's beneficial for performance.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464018705", "createdAt": "2020-08-02T01:38:13Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +82,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = BlockBreakEvents.BEFORE.invoker().beforeBlockBreak(this.player, pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c37539787f4ca20ae8baadf45a26bad38b957ebf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAyNjE1Mw==", "bodyText": "I don't know if it's possible, as the packet might change as the loop iterates", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464026153", "createdAt": "2020-08-02T03:31:03Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +82,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = BlockBreakEvents.BEFORE.invoker().beforeBlockBreak(this.player, pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODcwNQ=="}, "originalCommit": {"oid": "c37539787f4ca20ae8baadf45a26bad38b957ebf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzMDA5Nw==", "bodyText": "Unfortunately cannot, as the packet is lazily encoded.  This really is a garbage factory as-is, with all the block positions and packets.  Would consider using a custom packet that does the iteration client-side.\nThis probably won't matter in single player with mostly vanilla content, but in a multi-player environment with expanded-area tools or quarries that impersonate players it could become A Problem.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464030097", "createdAt": "2020-08-02T04:31:52Z", "author": {"login": "grondag"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +82,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = BlockBreakEvents.BEFORE.invoker().beforeBlockBreak(this.player, pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODcwNQ=="}, "originalCommit": {"oid": "c37539787f4ca20ae8baadf45a26bad38b957ebf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzMTAzNA==", "bodyText": "Even in modded I doubt it, even at 1 block/tick that's like 27 Objects per tick which is pretty much nothing compared to the other stuff vanilla does :p", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464031034", "createdAt": "2020-08-02T04:45:46Z", "author": {"login": "Devan-Kerman"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +82,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = BlockBreakEvents.BEFORE.invoker().beforeBlockBreak(this.player, pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODcwNQ=="}, "originalCommit": {"oid": "c37539787f4ca20ae8baadf45a26bad38b957ebf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA3MDk0NA==", "bodyText": "1 block per tick? How about a Project E Destruction Catalyst or Botania TerraSteel Pick on max settings?", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464070944", "createdAt": "2020-08-02T12:23:49Z", "author": {"login": "grondag"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +82,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = BlockBreakEvents.BEFORE.invoker().beforeBlockBreak(this.player, pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODcwNQ=="}, "originalCommit": {"oid": "c37539787f4ca20ae8baadf45a26bad38b957ebf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwMjU3MA==", "bodyText": "I think the reason for these packets is to tell the client what the neighboring blocks actually are (since the client also calculates this).", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464102570", "createdAt": "2020-08-02T17:29:02Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +82,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = BlockBreakEvents.BEFORE.invoker().beforeBlockBreak(this.player, pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODcwNQ=="}, "originalCommit": {"oid": "c37539787f4ca20ae8baadf45a26bad38b957ebf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExMTAwNQ==", "bodyText": "shouldn't the block and it's neighbor not change if it is failing?", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464111005", "createdAt": "2020-08-02T18:52:00Z", "author": {"login": "shedaniel"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +82,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = BlockBreakEvents.BEFORE.invoker().beforeBlockBreak(this.player, pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODcwNQ=="}, "originalCommit": {"oid": "c37539787f4ca20ae8baadf45a26bad38b957ebf"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzU4NDgwOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/testmod/java/net/fabricmc/fabric/test/event/interaction/InteractionEventsTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMTozOTo1N1rOG6hdfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMzoyMjowMVrOG6h4DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODgxNA==", "bodyText": "I'd test the item in the player's main hand if it's bedrock imo.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464018814", "createdAt": "2020-08-02T01:39:57Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/testmod/java/net/fabricmc/fabric/test/event/interaction/InteractionEventsTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.event.interaction;\n+\n+import net.fabricmc.fabric.api.event.player.BlockBreakEvents;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.block.Blocks;\n+import net.minecraft.util.ActionResult;\n+\n+import net.fabricmc.api.ModInitializer;\n+\n+public class InteractionEventsTest implements ModInitializer {\n+\tpublic static final Logger LOGGER = LogManager.getLogger(\"InteractionEventsTest\");\n+\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tBlockBreakEvents.BEFORE.register(((player, pos, state, entity, block) -> {\n+\t\t\treturn block == Blocks.BEDROCK ? ActionResult.FAIL : ActionResult.PASS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c37539787f4ca20ae8baadf45a26bad38b957ebf"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAyNTM2MQ==", "bodyText": "what do you mean? all the test mod does it make it so bedrock can't be broken", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464025361", "createdAt": "2020-08-02T03:18:03Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/testmod/java/net/fabricmc/fabric/test/event/interaction/InteractionEventsTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.event.interaction;\n+\n+import net.fabricmc.fabric.api.event.player.BlockBreakEvents;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.block.Blocks;\n+import net.minecraft.util.ActionResult;\n+\n+import net.fabricmc.api.ModInitializer;\n+\n+public class InteractionEventsTest implements ModInitializer {\n+\tpublic static final Logger LOGGER = LogManager.getLogger(\"InteractionEventsTest\");\n+\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tBlockBreakEvents.BEFORE.register(((player, pos, state, entity, block) -> {\n+\t\t\treturn block == Blocks.BEDROCK ? ActionResult.FAIL : ActionResult.PASS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODgxNA=="}, "originalCommit": {"oid": "c37539787f4ca20ae8baadf45a26bad38b957ebf"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAyNTYxMw==", "bodyText": "That is fine tbh, but honestly the time it takes to place bedrock is negligible", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464025613", "createdAt": "2020-08-02T03:22:01Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/testmod/java/net/fabricmc/fabric/test/event/interaction/InteractionEventsTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.event.interaction;\n+\n+import net.fabricmc.fabric.api.event.player.BlockBreakEvents;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.block.Blocks;\n+import net.minecraft.util.ActionResult;\n+\n+import net.fabricmc.api.ModInitializer;\n+\n+public class InteractionEventsTest implements ModInitializer {\n+\tpublic static final Logger LOGGER = LogManager.getLogger(\"InteractionEventsTest\");\n+\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tBlockBreakEvents.BEFORE.register(((player, pos, state, entity, block) -> {\n+\t\t\treturn block == Blocks.BEDROCK ? ActionResult.FAIL : ActionResult.PASS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODgxNA=="}, "originalCommit": {"oid": "c37539787f4ca20ae8baadf45a26bad38b957ebf"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzU4NjMxOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMTo0MjoyOFrOG6heIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMTo0MjoyOFrOG6heIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODk3Nw==", "bodyText": "Bump minor, so 0.4.0", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464018977", "createdAt": "2020-08-02T01:42:28Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/build.gradle", "diffHunk": "@@ -1,5 +1,5 @@\n archivesBaseName = \"fabric-events-interaction-v0\"\n-version = getSubprojectVersion(project, \"0.3.3\")\n+version = getSubprojectVersion(project, \"0.3.4\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c37539787f4ca20ae8baadf45a26bad38b957ebf"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Nzc0ODgyOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwNjoxODoxMlrOG6imoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwNjoxODoxMlrOG6imoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzNzUzNg==", "bodyText": "FAIL as default? what?", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464037536", "createdAt": "2020-08-02T06:18:12Z", "author": {"login": "shedaniel"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world at which the block is being broken\n+\t * <li> player - The player who is breaking the block\n+\t * <li> pos - The position at which the block is being broken\n+\t * <li> state - The block state from BEFORE the block is broken\n+\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t * <li> block - The block instance of the block that is being broken</ul>\n+\t */\n+\tpublic static final Event<BeforeBreakBlockCallback> BEFORE = EventFactory.createArrayBacked(BeforeBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (BeforeBreakBlockCallback event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity, block);\n+\n+\t\t\t\t\tif (result != ActionResult.FAIL) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.FAIL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Nzc0OTI0OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwNjoxODo1NVrOG6im0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwNjoxODo1NVrOG6im0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzNzU4NQ==", "bodyText": "shouldn't this check with PASS? PASS should pass the callback to the next one.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464037585", "createdAt": "2020-08-02T06:18:55Z", "author": {"login": "shedaniel"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world at which the block is being broken\n+\t * <li> player - The player who is breaking the block\n+\t * <li> pos - The position at which the block is being broken\n+\t * <li> state - The block state from BEFORE the block is broken\n+\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t * <li> block - The block instance of the block that is being broken</ul>\n+\t */\n+\tpublic static final Event<BeforeBreakBlockCallback> BEFORE = EventFactory.createArrayBacked(BeforeBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (BeforeBreakBlockCallback event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity, block);\n+\n+\t\t\t\t\tif (result != ActionResult.FAIL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Nzc1MDc2OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwNjoyMDozM1rOG6ingw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjowNjo1OFrOG6_iFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzNzc2Mw==", "bodyText": "didn't you change it to pre/post", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464037763", "createdAt": "2020-08-02T06:20:33Z", "author": {"login": "shedaniel"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world at which the block is being broken\n+\t * <li> player - The player who is breaking the block\n+\t * <li> pos - The position at which the block is being broken\n+\t * <li> state - The block state from BEFORE the block is broken\n+\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t * <li> block - The block instance of the block that is being broken</ul>\n+\t */\n+\tpublic static final Event<BeforeBreakBlockCallback> BEFORE = EventFactory.createArrayBacked(BeforeBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (BeforeBreakBlockCallback event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity, block);\n+\n+\t\t\t\t\tif (result != ActionResult.FAIL) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.FAIL;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t * Called on both Client and Server\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world where the block was broken\n+\t * <li> player - The player who broke the block\n+\t * <li> pos - The position where the block was broken\n+\t * <li> state - The block state from AFTER the block was broken\n+\t * <li> entity - The block entity of the broken block (can be null)\n+\t * <li> block - The block instance of the block that was broken</ul>\n+\t */\n+\tpublic static final Event<AfterBreakBlockCallback> AFTER = EventFactory.createArrayBacked(AfterBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (AfterBreakBlockCallback event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity, block);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeBreakBlockCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwMTU4Nw==", "bodyText": "Before and after is consistent with lifecycle events.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464101587", "createdAt": "2020-08-02T17:18:28Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world at which the block is being broken\n+\t * <li> player - The player who is breaking the block\n+\t * <li> pos - The position at which the block is being broken\n+\t * <li> state - The block state from BEFORE the block is broken\n+\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t * <li> block - The block instance of the block that is being broken</ul>\n+\t */\n+\tpublic static final Event<BeforeBreakBlockCallback> BEFORE = EventFactory.createArrayBacked(BeforeBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (BeforeBreakBlockCallback event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity, block);\n+\n+\t\t\t\t\tif (result != ActionResult.FAIL) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.FAIL;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t * Called on both Client and Server\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world where the block was broken\n+\t * <li> player - The player who broke the block\n+\t * <li> pos - The position where the block was broken\n+\t * <li> state - The block state from AFTER the block was broken\n+\t * <li> entity - The block entity of the broken block (can be null)\n+\t * <li> block - The block instance of the block that was broken</ul>\n+\t */\n+\tpublic static final Event<AfterBreakBlockCallback> AFTER = EventFactory.createArrayBacked(AfterBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (AfterBreakBlockCallback event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity, block);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeBreakBlockCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzNzc2Mw=="}, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxMTUxMQ==", "bodyText": "Then fix lifecycle events iritat", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464511511", "createdAt": "2020-08-03T16:06:58Z", "author": {"login": "Devan-Kerman"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world at which the block is being broken\n+\t * <li> player - The player who is breaking the block\n+\t * <li> pos - The position at which the block is being broken\n+\t * <li> state - The block state from BEFORE the block is broken\n+\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t * <li> block - The block instance of the block that is being broken</ul>\n+\t */\n+\tpublic static final Event<BeforeBreakBlockCallback> BEFORE = EventFactory.createArrayBacked(BeforeBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (BeforeBreakBlockCallback event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity, block);\n+\n+\t\t\t\t\tif (result != ActionResult.FAIL) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.FAIL;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t * Called on both Client and Server\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world where the block was broken\n+\t * <li> player - The player who broke the block\n+\t * <li> pos - The position where the block was broken\n+\t * <li> state - The block state from AFTER the block was broken\n+\t * <li> entity - The block entity of the broken block (can be null)\n+\t * <li> block - The block instance of the block that was broken</ul>\n+\t */\n+\tpublic static final Event<AfterBreakBlockCallback> AFTER = EventFactory.createArrayBacked(AfterBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (AfterBreakBlockCallback event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity, block);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeBreakBlockCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzNzc2Mw=="}, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Nzc1MjM2OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinClientPlayerInteractionManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwNjoyMjo0NVrOG6ioNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxODo1MTowMFrOG6nFRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzNzk0Mg==", "bodyText": "will it be weird if you run post block break in the client but not pre block break? I would just not call it in the client or make a new callback especially for the client since you are calling World#getBlockEntity", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464037942", "createdAt": "2020-08-02T06:22:45Z", "author": {"login": "shedaniel"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinClientPlayerInteractionManager.java", "diffHunk": "@@ -141,4 +146,9 @@ public void interactEntityAtLocation(PlayerEntity player, Entity entity, EntityH\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBroken(Lnet/minecraft/world/WorldAccess;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;)V\"), method = \"breakBlock\", locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate void onBlockBroken(BlockPos pos, CallbackInfoReturnable<Boolean> cir, World world, BlockState state, Block block, FluidState fluidState, boolean bl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwMTY5MA==", "bodyText": "Client/Server distinction isn't a big issue since we have a world.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464101690", "createdAt": "2020-08-02T17:19:48Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinClientPlayerInteractionManager.java", "diffHunk": "@@ -141,4 +146,9 @@ public void interactEntityAtLocation(PlayerEntity player, Entity entity, EntityH\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBroken(Lnet/minecraft/world/WorldAccess;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;)V\"), method = \"breakBlock\", locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate void onBlockBroken(BlockPos pos, CallbackInfoReturnable<Boolean> cir, World world, BlockState state, Block block, FluidState fluidState, boolean bl) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzNzk0Mg=="}, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExMDkxOA==", "bodyText": "what I meant is that it will get confusing how there is only the after block break for the client, there isn't before block break for the client", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464110918", "createdAt": "2020-08-02T18:51:00Z", "author": {"login": "shedaniel"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinClientPlayerInteractionManager.java", "diffHunk": "@@ -141,4 +146,9 @@ public void interactEntityAtLocation(PlayerEntity player, Entity entity, EntityH\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBroken(Lnet/minecraft/world/WorldAccess;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;)V\"), method = \"breakBlock\", locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate void onBlockBroken(BlockPos pos, CallbackInfoReturnable<Boolean> cir, World world, BlockState state, Block block, FluidState fluidState, boolean bl) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzNzk0Mg=="}, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Nzc1MjM4OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwNjoyMjo0OVrOG6ioOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxNjoxNToyOVrOG6mKXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzNzk0NA==", "bodyText": "we don't need the extra block probably", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464037944", "createdAt": "2020-08-02T06:22:49Z", "author": {"login": "shedaniel"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world at which the block is being broken\n+\t * <li> player - The player who is breaking the block\n+\t * <li> pos - The position at which the block is being broken\n+\t * <li> state - The block state from BEFORE the block is broken\n+\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t * <li> block - The block instance of the block that is being broken</ul>\n+\t */\n+\tpublic static final Event<BeforeBreakBlockCallback> BEFORE = EventFactory.createArrayBacked(BeforeBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (BeforeBreakBlockCallback event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity, block);\n+\n+\t\t\t\t\tif (result != ActionResult.FAIL) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.FAIL;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t * Called on both Client and Server\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world where the block was broken\n+\t * <li> player - The player who broke the block\n+\t * <li> pos - The position where the block was broken\n+\t * <li> state - The block state from AFTER the block was broken\n+\t * <li> entity - The block entity of the broken block (can be null)\n+\t * <li> block - The block instance of the block that was broken</ul>\n+\t */\n+\tpublic static final Event<AfterBreakBlockCallback> AFTER = EventFactory.createArrayBacked(AfterBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (AfterBreakBlockCallback event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity, block);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeBreakBlockCallback {\n+\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity, Block block);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA5NTgzNw==", "bodyText": "yes", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464095837", "createdAt": "2020-08-02T16:15:29Z", "author": {"login": "Devan-Kerman"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world at which the block is being broken\n+\t * <li> player - The player who is breaking the block\n+\t * <li> pos - The position at which the block is being broken\n+\t * <li> state - The block state from BEFORE the block is broken\n+\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t * <li> block - The block instance of the block that is being broken</ul>\n+\t */\n+\tpublic static final Event<BeforeBreakBlockCallback> BEFORE = EventFactory.createArrayBacked(BeforeBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (BeforeBreakBlockCallback event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity, block);\n+\n+\t\t\t\t\tif (result != ActionResult.FAIL) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.FAIL;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t * Called on both Client and Server\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world where the block was broken\n+\t * <li> player - The player who broke the block\n+\t * <li> pos - The position where the block was broken\n+\t * <li> state - The block state from AFTER the block was broken\n+\t * <li> entity - The block entity of the broken block (can be null)\n+\t * <li> block - The block instance of the block that was broken</ul>\n+\t */\n+\tpublic static final Event<AfterBreakBlockCallback> AFTER = EventFactory.createArrayBacked(AfterBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (AfterBreakBlockCallback event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity, block);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeBreakBlockCallback {\n+\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity, Block block);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzNzk0NA=="}, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODI3NjcyOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxNzoyMTowN1rOG6mh3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMDozNDo0NlrOG6nrlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwMTg1NQ==", "bodyText": "Yeet Callback from the interface names since the parent class has Events in the name", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464101855", "createdAt": "2020-08-02T17:21:07Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world at which the block is being broken\n+\t * <li> player - The player who is breaking the block\n+\t * <li> pos - The position at which the block is being broken\n+\t * <li> state - The block state from BEFORE the block is broken\n+\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t * <li> block - The block instance of the block that is being broken</ul>\n+\t */\n+\tpublic static final Event<BeforeBreakBlockCallback> BEFORE = EventFactory.createArrayBacked(BeforeBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (BeforeBreakBlockCallback event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity, block);\n+\n+\t\t\t\t\tif (result != ActionResult.FAIL) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.FAIL;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t * Called on both Client and Server\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world where the block was broken\n+\t * <li> player - The player who broke the block\n+\t * <li> pos - The position where the block was broken\n+\t * <li> state - The block state from AFTER the block was broken\n+\t * <li> entity - The block entity of the broken block (can be null)\n+\t * <li> block - The block instance of the block that was broken</ul>\n+\t */\n+\tpublic static final Event<AfterBreakBlockCallback> AFTER = EventFactory.createArrayBacked(AfterBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (AfterBreakBlockCallback event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity, block);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeBreakBlockCallback {\n+\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity, Block block);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterBreakBlockCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMDcyNQ==", "bodyText": "Yes, just call this After. We know this is a callback, and this is in BlockBreakEvents so BreakBlock is redundant context as well.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464120725", "createdAt": "2020-08-02T20:34:46Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world at which the block is being broken\n+\t * <li> player - The player who is breaking the block\n+\t * <li> pos - The position at which the block is being broken\n+\t * <li> state - The block state from BEFORE the block is broken\n+\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t * <li> block - The block instance of the block that is being broken</ul>\n+\t */\n+\tpublic static final Event<BeforeBreakBlockCallback> BEFORE = EventFactory.createArrayBacked(BeforeBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (BeforeBreakBlockCallback event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity, block);\n+\n+\t\t\t\t\tif (result != ActionResult.FAIL) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.FAIL;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t * Called on both Client and Server\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world where the block was broken\n+\t * <li> player - The player who broke the block\n+\t * <li> pos - The position where the block was broken\n+\t * <li> state - The block state from AFTER the block was broken\n+\t * <li> entity - The block entity of the broken block (can be null)\n+\t * <li> block - The block instance of the block that was broken</ul>\n+\t */\n+\tpublic static final Event<AfterBreakBlockCallback> AFTER = EventFactory.createArrayBacked(AfterBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (AfterBreakBlockCallback event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity, block);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeBreakBlockCallback {\n+\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity, Block block);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterBreakBlockCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwMTg1NQ=="}, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODI3OTE5OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxNzoyNDozNVrOG6mjDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxNzoyNDozNVrOG6mjDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwMjE1Ng==", "bodyText": "Yeet the Block off the end. It's negligable the time you'll save by getting the block instance from the block state, but I'd say it's worth making the method signature slightly cleaner.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464102156", "createdAt": "2020-08-02T17:24:35Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world at which the block is being broken\n+\t * <li> player - The player who is breaking the block\n+\t * <li> pos - The position at which the block is being broken\n+\t * <li> state - The block state from BEFORE the block is broken\n+\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t * <li> block - The block instance of the block that is being broken</ul>\n+\t */\n+\tpublic static final Event<BeforeBreakBlockCallback> BEFORE = EventFactory.createArrayBacked(BeforeBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (BeforeBreakBlockCallback event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity, block);\n+\n+\t\t\t\t\tif (result != ActionResult.FAIL) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.FAIL;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t * Called on both Client and Server\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world where the block was broken\n+\t * <li> player - The player who broke the block\n+\t * <li> pos - The position where the block was broken\n+\t * <li> state - The block state from AFTER the block was broken\n+\t * <li> entity - The block entity of the broken block (can be null)\n+\t * <li> block - The block instance of the block that was broken</ul>\n+\t */\n+\tpublic static final Event<AfterBreakBlockCallback> AFTER = EventFactory.createArrayBacked(AfterBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (AfterBreakBlockCallback event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity, block);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeBreakBlockCallback {\n+\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity, Block block);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterBreakBlockCallback {\n+\t\tvoid afterBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity, Block block);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODI3OTg1OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxNzoyNToxNlrOG6mjXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxNzoyNToxNlrOG6mjXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwMjIzOA==", "bodyText": "final with private constructor please", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464102238", "createdAt": "2020-08-02T17:25:16Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODQzMjUzOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMDozMzozMFrOG6nq2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo1NjoyNlrOG61IRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMDUzOQ==", "bodyText": "Document on the method in the functional interface, not here. This is an absolute mess", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464120539", "createdAt": "2020-08-02T20:33:30Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world at which the block is being broken\n+\t * <li> player - The player who is breaking the block\n+\t * <li> pos - The position at which the block is being broken\n+\t * <li> state - The block state from BEFORE the block is broken\n+\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t * <li> block - The block instance of the block that is being broken</ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMTEwNw==", "bodyText": "I don't normally document my code, I will move it there", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464201107", "createdAt": "2020-08-03T05:29:08Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world at which the block is being broken\n+\t * <li> player - The player who is breaking the block\n+\t * <li> pos - The position at which the block is being broken\n+\t * <li> state - The block state from BEFORE the block is broken\n+\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t * <li> block - The block instance of the block that is being broken</ul>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMDUzOQ=="}, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM0MTA2Mg==", "bodyText": "I actually think this is the right place.\nSee the lifecycle events for example: https://github.com/FabricMC/fabric/blob/1.16/fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/api/client/event/lifecycle/v1/ClientChunkEvents.java\nThe description of parameters can be moved to the method though.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464341062", "createdAt": "2020-08-03T10:56:26Z", "author": {"login": "shartte"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world at which the block is being broken\n+\t * <li> player - The player who is breaking the block\n+\t * <li> pos - The position at which the block is being broken\n+\t * <li> state - The block state from BEFORE the block is broken\n+\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t * <li> block - The block instance of the block that is being broken</ul>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMDUzOQ=="}, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODQzMzYyOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMDozNDowNVrOG6nrUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo1Njo0MVrOG61I0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMDY1OA==", "bodyText": "Same, document on method in functional interface.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464120658", "createdAt": "2020-08-02T20:34:05Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world at which the block is being broken\n+\t * <li> player - The player who is breaking the block\n+\t * <li> pos - The position at which the block is being broken\n+\t * <li> state - The block state from BEFORE the block is broken\n+\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t * <li> block - The block instance of the block that is being broken</ul>\n+\t */\n+\tpublic static final Event<BeforeBreakBlockCallback> BEFORE = EventFactory.createArrayBacked(BeforeBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (BeforeBreakBlockCallback event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity, block);\n+\n+\t\t\t\t\tif (result != ActionResult.FAIL) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.FAIL;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t * Called on both Client and Server\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world where the block was broken\n+\t * <li> player - The player who broke the block\n+\t * <li> pos - The position where the block was broken\n+\t * <li> state - The block state from AFTER the block was broken\n+\t * <li> entity - The block entity of the broken block (can be null)\n+\t * <li> block - The block instance of the block that was broken</ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM0MTIwMA==", "bodyText": "See above, I think this is the right place to at least describe what the event is and when it is triggered.\nThe description of parameters can be moved to the method.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464341200", "createdAt": "2020-08-03T10:56:41Z", "author": {"login": "shartte"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public class BlockBreakEvents {\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS/CONSUME continues the default code for breaking the block\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world at which the block is being broken\n+\t * <li> player - The player who is breaking the block\n+\t * <li> pos - The position at which the block is being broken\n+\t * <li> state - The block state from BEFORE the block is broken\n+\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t * <li> block - The block instance of the block that is being broken</ul>\n+\t */\n+\tpublic static final Event<BeforeBreakBlockCallback> BEFORE = EventFactory.createArrayBacked(BeforeBreakBlockCallback.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n+\t\t\t\tfor (BeforeBreakBlockCallback event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity, block);\n+\n+\t\t\t\t\tif (result != ActionResult.FAIL) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.FAIL;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t * Called on both Client and Server\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world where the block was broken\n+\t * <li> player - The player who broke the block\n+\t * <li> pos - The position where the block was broken\n+\t * <li> state - The block state from AFTER the block was broken\n+\t * <li> entity - The block entity of the broken block (can be null)\n+\t * <li> block - The block instance of the block that was broken</ul>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMDY1OA=="}, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODQzNjY0OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMDozNzo1OFrOG6nsxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjowNTowMFrOG6_drA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMTAyOQ==", "bodyText": "Instead of doing this loop, add a Cancellation sub functioal interface that allow mods to handle custom server-side block break cancellation logic. In this setup, you only consider vanilla redstone but disregard other mods that can have a bigger volume of influence.\nhttps://github.com/FabricMC/fabric/pull/980/files#r463989517\nPreferably, this loop should be moved to an event handler listening to the cancellation event than left in this mixin body.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464121029", "createdAt": "2020-08-02T20:37:58Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +86,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = BlockBreakEvents.BEFORE.invoker().beforeBlockBreak(this.world, this.player, pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);\n+\n+\t\t\tfor (int x = 0; x < 3; x++) {\n+\t\t\t\tfor (int y = 0; y < 3; y++) {\n+\t\t\t\t\tfor (int z = 0; z < 3; z++) {\n+\t\t\t\t\t\tthis.player.networkHandler.sendPacket(new BlockUpdateS2CPacket(world, cornerPos.add(x, y, z)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxMDM4MA==", "bodyText": "Mods could just send the packet themselves by listening to the event, though then we'd have to not short circuit the pre event", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464510380", "createdAt": "2020-08-03T16:05:00Z", "author": {"login": "Devan-Kerman"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +86,28 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = BlockBreakEvents.BEFORE.invoker().beforeBlockBreak(this.world, this.player, pos, state, entity, block);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);\n+\n+\t\t\tfor (int x = 0; x < 3; x++) {\n+\t\t\t\tfor (int y = 0; y < 3; y++) {\n+\t\t\t\t\tfor (int z = 0; z < 3; z++) {\n+\t\t\t\t\t\tthis.player.networkHandler.sendPacket(new BlockUpdateS2CPacket(world, cornerPos.add(x, y, z)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMTAyOQ=="}, "originalCommit": {"oid": "35509367dbbe84f6aa04cafecb8b899ad241c680"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTMxMDQ0OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoyMTowM1rOG7B_xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODowODoyOFrOG7DpYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MTg3Nw==", "bodyText": "Please move the fields onto the method javadoc. It's going to be easier to read that way.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464551877", "createdAt": "2020-08-03T17:21:03Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -70,21 +100,23 @@\n \t * <li> entity - The block entity of the broken block (can be null)\n \t * <li> block - The block instance of the block that was broken</ul>\n \t */\n-\tpublic static final Event<AfterBreakBlockCallback> AFTER = EventFactory.createArrayBacked(AfterBreakBlockCallback.class,\n-\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n-\t\t\t\tfor (AfterBreakBlockCallback event : listeners) {\n-\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity, block);\n-\t\t\t\t}\n-\t\t\t}\n-\t);\n-\n \t@FunctionalInterface\n-\tpublic interface BeforeBreakBlockCallback {\n-\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity, Block block);\n+\tpublic interface After {\n+\t\tvoid afterBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n \t}\n \n+\t/* Called when a block break has been canceled\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world where the block was going to be broken\n+\t * <li> player - The player was going to break the block\n+\t * <li> pos - The position where the block was going to be broken\n+\t * <li> state - The block state of the block that was going to be broken\n+\t * <li> entity - The block entity of the block that was going to be broken (can be null)\n+\t * <li> block - The block instance of the block that was going to be broken</ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6c8990db9659a947c952e5fdab2da45dbd1439f"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3ODkxMg==", "bodyText": "Done", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464578912", "createdAt": "2020-08-03T18:08:28Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -70,21 +100,23 @@\n \t * <li> entity - The block entity of the broken block (can be null)\n \t * <li> block - The block instance of the block that was broken</ul>\n \t */\n-\tpublic static final Event<AfterBreakBlockCallback> AFTER = EventFactory.createArrayBacked(AfterBreakBlockCallback.class,\n-\t\t\t(listeners) -> (world, player, pos, state, entity, block) -> {\n-\t\t\t\tfor (AfterBreakBlockCallback event : listeners) {\n-\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity, block);\n-\t\t\t\t}\n-\t\t\t}\n-\t);\n-\n \t@FunctionalInterface\n-\tpublic interface BeforeBreakBlockCallback {\n-\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity, Block block);\n+\tpublic interface After {\n+\t\tvoid afterBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n \t}\n \n+\t/* Called when a block break has been canceled\n+\t *\n+\t * <p>Fields:\n+\t * <ul><li> world - The world where the block was going to be broken\n+\t * <li> player - The player was going to break the block\n+\t * <li> pos - The position where the block was going to be broken\n+\t * <li> state - The block state of the block that was going to be broken\n+\t * <li> entity - The block entity of the block that was going to be broken (can be null)\n+\t * <li> block - The block instance of the block that was going to be broken</ul>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MTg3Nw=="}, "originalCommit": {"oid": "c6c8990db9659a947c952e5fdab2da45dbd1439f"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTU1ODc1OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODozMjoxN1rOG7EX6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo0NTowN1rOG7Evag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MDgyNg==", "bodyText": "Why even make this event cancellable? We alreday have the attack block callback that provides a better UX for preventing the breaking of blocks.\nI do see the need for a BlockBreakEvent that happens once the block is definitely going to be broken.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464590826", "createdAt": "2020-08-03T18:32:17Z", "author": {"login": "modmuss50"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5NDE2MA==", "bodyText": "Logging is one use, which is useful for more than just core protect", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464594160", "createdAt": "2020-08-03T18:39:26Z", "author": {"login": "Devan-Kerman"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MDgyNg=="}, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5NDE5Mw==", "bodyText": "Hmm, how about hack clients?", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464594193", "createdAt": "2020-08-03T18:39:30Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MDgyNg=="}, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5NjI4MA==", "bodyText": "Attack block is purely for UX, it doesn't actually prevent the breaking. As the JavaDoc on it says:\nATTACK_BLOCK does not let you control the packet sending process yet.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464596280", "createdAt": "2020-08-03T18:43:57Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MDgyNg=="}, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5Njg0Mg==", "bodyText": "Yes, it does allow you to stop the breaking of blocks. ive used it for this exact reason.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464596842", "createdAt": "2020-08-03T18:45:07Z", "author": {"login": "modmuss50"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MDgyNg=="}, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTU2MDcxOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODozMzowM1rOG7EZKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo0MDozMlrOG7EnGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTE0NQ==", "bodyText": "Humm, really not a fan of this...", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464591145", "createdAt": "2020-08-03T18:33:03Z", "author": {"login": "modmuss50"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5NDcxMw==", "bodyText": "This should cover the case in which a mod's block can effect a more than 3x3 like redstone dust. It's simpler than any alternative I can think of tbh", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464594713", "createdAt": "2020-08-03T18:40:32Z", "author": {"login": "Devan-Kerman"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTE0NQ=="}, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTU2MjU5OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODozMzo0NFrOG7EaTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo1MTo1NFrOG7E8dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTQzOA==", "bodyText": "the params are messsed up here.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464591438", "createdAt": "2020-08-03T18:33:44Z", "author": {"login": "modmuss50"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/* Called before a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world at which the block is being broken\n+\t\t * <li> player - The player who is breaking the block\n+\t\t * <li> pos - The position at which the block is being broken\n+\t\t * <li> state - The block state from BEFORE the block is broken\n+\t\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t\t */\n+\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface After {\n+\t\t/* Called after a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world where the block was broken\n+\t\t * <li> player - The player who broke the block\n+\t\t * <li> pos - The position where the block was broken\n+\t\t * <li> state - The block state from AFTER the block was broken\n+\t\t * <li> entity - The block entity of the broken block (can be null)\n+\t\t * <li> block - The block instance of the block that was broken</ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwMDE4Mw==", "bodyText": "What do you mean", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464600183", "createdAt": "2020-08-03T18:51:54Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/* Called before a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world at which the block is being broken\n+\t\t * <li> player - The player who is breaking the block\n+\t\t * <li> pos - The position at which the block is being broken\n+\t\t * <li> state - The block state from BEFORE the block is broken\n+\t\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t\t */\n+\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface After {\n+\t\t/* Called after a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world where the block was broken\n+\t\t * <li> player - The player who broke the block\n+\t\t * <li> pos - The position where the block was broken\n+\t\t * <li> state - The block state from AFTER the block was broken\n+\t\t * <li> entity - The block entity of the broken block (can be null)\n+\t\t * <li> block - The block instance of the block that was broken</ul>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTQzOA=="}, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTU2Mjk3OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODozMzo1M1rOG7Eaig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODozMzo1M1rOG7Eaig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTQ5OA==", "bodyText": "and here, no block", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464591498", "createdAt": "2020-08-03T18:33:53Z", "author": {"login": "modmuss50"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/* Called before a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world at which the block is being broken\n+\t\t * <li> player - The player who is breaking the block\n+\t\t * <li> pos - The position at which the block is being broken\n+\t\t * <li> state - The block state from BEFORE the block is broken\n+\t\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t\t */\n+\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface After {\n+\t\t/* Called after a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world where the block was broken\n+\t\t * <li> player - The player who broke the block\n+\t\t * <li> pos - The position where the block was broken\n+\t\t * <li> state - The block state from AFTER the block was broken\n+\t\t * <li> entity - The block entity of the broken block (can be null)\n+\t\t * <li> block - The block instance of the block that was broken</ul>\n+\t\t */\n+\t\tvoid afterBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface Cancel {\n+\t\t/* Called when a block break has been canceled\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world where the block was going to be broken\n+\t\t * <li> player - The player was going to break the block\n+\t\t * <li> pos - The position where the block was going to be broken\n+\t\t * <li> state - The block state of the block that was going to be broken\n+\t\t * <li> entity - The block entity of the block that was going to be broken (can be null)\n+\t\t * <li> block - The block instance of the block that was going to be broken</ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTU2MzUxOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODozNDowNlrOG7Ea4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo0NTowN1rOG7EvZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTU4NQ==", "bodyText": "Do we need this if you pass the world and pos? I dont think so.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464591585", "createdAt": "2020-08-03T18:34:06Z", "author": {"login": "modmuss50"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/* Called before a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world at which the block is being broken\n+\t\t * <li> player - The player who is breaking the block\n+\t\t * <li> pos - The position at which the block is being broken\n+\t\t * <li> state - The block state from BEFORE the block is broken\n+\t\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t\t */\n+\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface After {\n+\t\t/* Called after a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world where the block was broken\n+\t\t * <li> player - The player who broke the block\n+\t\t * <li> pos - The position where the block was broken\n+\t\t * <li> state - The block state from AFTER the block was broken\n+\t\t * <li> entity - The block entity of the broken block (can be null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5Mzc5Nw==", "bodyText": "well, if this is available already without a get block entity call, passing this is better than not since calling get block entity has a map lookup", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464593797", "createdAt": "2020-08-03T18:38:44Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/* Called before a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world at which the block is being broken\n+\t\t * <li> player - The player who is breaking the block\n+\t\t * <li> pos - The position at which the block is being broken\n+\t\t * <li> state - The block state from BEFORE the block is broken\n+\t\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t\t */\n+\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface After {\n+\t\t/* Called after a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world where the block was broken\n+\t\t * <li> player - The player who broke the block\n+\t\t * <li> pos - The position where the block was broken\n+\t\t * <li> state - The block state from AFTER the block was broken\n+\t\t * <li> entity - The block entity of the broken block (can be null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTU4NQ=="}, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5NDM3Ng==", "bodyText": "The player and the original state are needed since the block has changed in the world then.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464594376", "createdAt": "2020-08-03T18:39:57Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/* Called before a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world at which the block is being broken\n+\t\t * <li> player - The player who is breaking the block\n+\t\t * <li> pos - The position at which the block is being broken\n+\t\t * <li> state - The block state from BEFORE the block is broken\n+\t\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t\t */\n+\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface After {\n+\t\t/* Called after a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world where the block was broken\n+\t\t * <li> player - The player who broke the block\n+\t\t * <li> pos - The position where the block was broken\n+\t\t * <li> state - The block state from AFTER the block was broken\n+\t\t * <li> entity - The block entity of the broken block (can be null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTU4NQ=="}, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5NjgzOA==", "bodyText": "It's useful, as the stuff is already provided in the mixin. It's barebones not to have it and the user shouldn't have to use world.getBlockState() when the mixin already has access to that.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464596838", "createdAt": "2020-08-03T18:45:07Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/* Called before a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world at which the block is being broken\n+\t\t * <li> player - The player who is breaking the block\n+\t\t * <li> pos - The position at which the block is being broken\n+\t\t * <li> state - The block state from BEFORE the block is broken\n+\t\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t\t */\n+\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface After {\n+\t\t/* Called after a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world where the block was broken\n+\t\t * <li> player - The player who broke the block\n+\t\t * <li> pos - The position where the block was broken\n+\t\t * <li> state - The block state from AFTER the block was broken\n+\t\t * <li> entity - The block entity of the broken block (can be null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTU4NQ=="}, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTU2MzkzOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODozNDoxM1rOG7EbIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo0NToxOFrOG7Evxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTY0OQ==", "bodyText": "same again here I dont think we need this?", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464591649", "createdAt": "2020-08-03T18:34:13Z", "author": {"login": "modmuss50"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/* Called before a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world at which the block is being broken\n+\t\t * <li> player - The player who is breaking the block\n+\t\t * <li> pos - The position at which the block is being broken\n+\t\t * <li> state - The block state from BEFORE the block is broken\n+\t\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t\t */\n+\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface After {\n+\t\t/* Called after a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world where the block was broken\n+\t\t * <li> player - The player who broke the block\n+\t\t * <li> pos - The position where the block was broken\n+\t\t * <li> state - The block state from AFTER the block was broken\n+\t\t * <li> entity - The block entity of the broken block (can be null)\n+\t\t * <li> block - The block instance of the block that was broken</ul>\n+\t\t */\n+\t\tvoid afterBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface Cancel {\n+\t\t/* Called when a block break has been canceled\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world where the block was going to be broken\n+\t\t * <li> player - The player was going to break the block\n+\t\t * <li> pos - The position where the block was going to be broken\n+\t\t * <li> state - The block state of the block that was going to be broken\n+\t\t * <li> entity - The block entity of the block that was going to be broken (can be null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5NjkzNA==", "bodyText": "See above.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464596934", "createdAt": "2020-08-03T18:45:18Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/* Called before a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world at which the block is being broken\n+\t\t * <li> player - The player who is breaking the block\n+\t\t * <li> pos - The position at which the block is being broken\n+\t\t * <li> state - The block state from BEFORE the block is broken\n+\t\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t\t */\n+\t\tActionResult beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface After {\n+\t\t/* Called after a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world where the block was broken\n+\t\t * <li> player - The player who broke the block\n+\t\t * <li> pos - The position where the block was broken\n+\t\t * <li> state - The block state from AFTER the block was broken\n+\t\t * <li> entity - The block entity of the broken block (can be null)\n+\t\t * <li> block - The block instance of the block that was broken</ul>\n+\t\t */\n+\t\tvoid afterBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface Cancel {\n+\t\t/* Called when a block break has been canceled\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world where the block was going to be broken\n+\t\t * <li> player - The player was going to break the block\n+\t\t * <li> pos - The position where the block was going to be broken\n+\t\t * <li> state - The block state of the block that was going to be broken\n+\t\t * <li> entity - The block entity of the block that was going to be broken (can be null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTY0OQ=="}, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTU2NTI2OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODozNDozOFrOG7Eb7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo0Nzo0N1rOG7E0pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTg1Mw==", "bodyText": "Why 3 interfaces? these all seem the same to me? Just make it one?", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464591853", "createdAt": "2020-08-03T18:34:38Z", "author": {"login": "modmuss50"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MzgxMw==", "bodyText": "We need two interfaces minimum for an After event if someone wants to know if a block changed.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464593813", "createdAt": "2020-08-03T18:38:46Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTg1Mw=="}, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5ODE4MA==", "bodyText": "Organization and flexibility, just in case one needs to change.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464598180", "createdAt": "2020-08-03T18:47:47Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTg1Mw=="}, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTU2NzU2OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODozNToxM1rOG7EdOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyMzoxMFrOG8_MLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MjE4Ng==", "bodyText": "Yeah, really not a fan of this, ill need to look at the vanilla code but there has to be a better way. atleast add a comment saying what it does.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464592186", "createdAt": "2020-08-03T18:35:13Z", "author": {"login": "modmuss50"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +86,30 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = BlockBreakEvents.BEFORE.invoker().beforeBlockBreak(this.world, this.player, pos, state, entity);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockBreakEvents.CANCEL.invoker().onBlockBreakCancel(this.world, this.player, pos, state, entity);\n+\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);\n+\n+\t\t\tfor (int x = 0; x < 3; x++) {\n+\t\t\t\tfor (int y = 0; y < 3; y++) {\n+\t\t\t\t\tfor (int z = 0; z < 3; z++) {\n+\t\t\t\t\t\tthis.player.networkHandler.sendPacket(new BlockUpdateS2CPacket(world, cornerPos.add(x, y, z)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMzA1NQ==", "bodyText": "Geo, you need to still explain why the packets are sent if the event is canclled.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r466603055", "createdAt": "2020-08-06T18:23:10Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +86,30 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tActionResult result = BlockBreakEvents.BEFORE.invoker().beforeBlockBreak(this.world, this.player, pos, state, entity);\n+\n+\t\tif (result == ActionResult.FAIL) {\n+\t\t\tBlockBreakEvents.CANCEL.invoker().onBlockBreakCancel(this.world, this.player, pos, state, entity);\n+\n+\t\t\tBlockPos cornerPos = pos.add(-1, -1, -1);\n+\n+\t\t\tfor (int x = 0; x < 3; x++) {\n+\t\t\t\tfor (int y = 0; y < 3; y++) {\n+\t\t\t\t\tfor (int z = 0; z < 3; z++) {\n+\t\t\t\t\t\tthis.player.networkHandler.sendPacket(new BlockUpdateS2CPacket(world, cornerPos.add(x, y, z)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MjE4Ng=="}, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTU3MDM0OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODozNjowNlrOG7Ee3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo0NjozMFrOG7EyFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MjYwNQ==", "bodyText": "Whats the use case for this?", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464592605", "createdAt": "2020-08-03T18:36:06Z", "author": {"login": "modmuss50"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MzQ1Mg==", "bodyText": "Because mods can have blocks that need to revert more changes than the 3 by 3 by 3 volume needed by vanilla redstone dusts", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464593452", "createdAt": "2020-08-03T18:37:51Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MjYwNQ=="}, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5NzUyNQ==", "bodyText": "If a custom mod's block has an update that extends further than vanilla redstone. It is nice to have.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r464597525", "createdAt": "2020-08-03T18:46:30Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.ActionResult;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>SUCCESS/PASS passes on the callback to the next listener\n+\t * <li>CONSUME continues the default code for breaking the block and ignores all other listeners\n+\t * <li>FAIL cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tActionResult result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (result != ActionResult.PASS) {\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn ActionResult.PASS;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MjYwNQ=="}, "originalCommit": {"oid": "2d81e83a379aa66281bca815a9c7493c363f7baa"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjI4NDA1OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDo1NToyNVrOG7xLGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDo1NToyNVrOG7xLGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyNDgyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t/* Called before a block is broken\n          \n          \n            \n            \t\t *\n          \n          \n            \n            \t\t * <p>Fields:\n          \n          \n            \n            \t\t * <ul><li> world - The world at which the block is being broken\n          \n          \n            \n            \t\t * <li> player - The player who is breaking the block\n          \n          \n            \n            \t\t * <li> pos - The position at which the block is being broken\n          \n          \n            \n            \t\t * <li> state - The block state from BEFORE the block is broken\n          \n          \n            \n            \t\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n          \n          \n            \n            \t\t */\n          \n          \n            \n            \t\t/**\n          \n          \n            \n            \t\t * Called before a block is broken and allows cancelling the block breaking.\n          \n          \n            \n            \t\t *\n          \n          \n            \n            \t\t * <p>Implementations should not modify the world or assume the block break has completed or failed.</p>\n          \n          \n            \n            \t\t *\n          \n          \n            \n            \t\t * @param world the world in which the block is broken\n          \n          \n            \n            \t\t * @param player the player breaking the block\n          \n          \n            \n            \t\t * @param pos the position at which the block is broken\n          \n          \n            \n            \t\t * @param state the block state <strong>before</strong> the block is broken\n          \n          \n            \n            \t\t * @param entity the block entity <strong>before</strong> the block is broken, can be {@code null}\n          \n          \n            \n            \t\t * @return {@code false} to cancel block breaking action, or {@code true} to pass to next listener\n          \n          \n            \n            \t\t */", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r465324826", "createdAt": "2020-08-04T20:55:25Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>`true` passes on the callback to the next listener\n+\t * <li>`false` cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tboolean result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (!result) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/* Called before a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world at which the block is being broken\n+\t\t * <li> player - The player who is breaking the block\n+\t\t * <li> pos - The position at which the block is being broken\n+\t\t * <li> state - The block state from BEFORE the block is broken\n+\t\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7174955516e8f3ca264cfa48963f74f3cadba82e"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjI5MTAzOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDo1NzoyNlrOG7xPqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDo1NzoyNlrOG7xPqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyNTk5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t/* Called after a block is broken\n          \n          \n            \n            \t\t *\n          \n          \n            \n            \t\t * <p>Fields:\n          \n          \n            \n            \t\t * <ul><li> world - The world where the block was broken\n          \n          \n            \n            \t\t * <li> player - The player who broke the block\n          \n          \n            \n            \t\t * <li> pos - The position where the block was broken\n          \n          \n            \n            \t\t * <li> state - The block state from AFTER the block was broken\n          \n          \n            \n            \t\t * <li> entity - The block entity of the broken block (can be null)\n          \n          \n            \n            \t\t/**\n          \n          \n            \n            \t\t * Called after a block is successfully broken.\n          \n          \n            \n            \t\t *\n          \n          \n            \n            \t\t * @param world the world where the block was broken\n          \n          \n            \n            \t\t * @param player the player who broke the block\n          \n          \n            \n            \t\t * @param pos the position where the block was broken\n          \n          \n            \n            \t\t * @param state the block state <strong>after</strong> the block was broken\n          \n          \n            \n            \t\t * @param entity the block entity of the broken block, can be {@code null}", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r465325992", "createdAt": "2020-08-04T20:57:26Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>`true` passes on the callback to the next listener\n+\t * <li>`false` cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tboolean result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (!result) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/* Called before a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world at which the block is being broken\n+\t\t * <li> player - The player who is breaking the block\n+\t\t * <li> pos - The position at which the block is being broken\n+\t\t * <li> state - The block state from BEFORE the block is broken\n+\t\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t\t */\n+\t\tboolean beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface After {\n+\t\t/* Called after a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world where the block was broken\n+\t\t * <li> player - The player who broke the block\n+\t\t * <li> pos - The position where the block was broken\n+\t\t * <li> state - The block state from AFTER the block was broken\n+\t\t * <li> entity - The block entity of the broken block (can be null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7174955516e8f3ca264cfa48963f74f3cadba82e"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjI5NjA3OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDo1OToxNVrOG7xS_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDo1OToxNVrOG7xS_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyNjg0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t/* Called when a block break has been canceled\n          \n          \n            \n            \t\t *\n          \n          \n            \n            \t\t * <p>Fields:\n          \n          \n            \n            \t\t * <ul><li> world - The world where the block was going to be broken\n          \n          \n            \n            \t\t * <li> player - The player was going to break the block\n          \n          \n            \n            \t\t * <li> pos - The position where the block was going to be broken\n          \n          \n            \n            \t\t * <li> state - The block state of the block that was going to be broken\n          \n          \n            \n            \t\t * <li> entity - The block entity of the block that was going to be broken (can be null)\n          \n          \n            \n            \t\t/**\n          \n          \n            \n            \t\t * Called when a block break has been canceled.\n          \n          \n            \n            \t\t *\n          \n          \n            \n            \t\t * @param world the world where the block was going to be broken\n          \n          \n            \n            \t\t * @param player the player who was going to break the block\n          \n          \n            \n            \t\t * @param pos the position where the block was going to be broken\n          \n          \n            \n            \t\t * @param state the block state of the block that was going to be broken\n          \n          \n            \n            \t\t * @param entity the block entity of the block that was going to be broken, can be {@code null}", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r465326844", "createdAt": "2020-08-04T20:59:15Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>`true` passes on the callback to the next listener\n+\t * <li>`false` cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tboolean result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (!result) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<Cancel> CANCEL = EventFactory.createArrayBacked(Cancel.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Cancel event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/* Called before a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world at which the block is being broken\n+\t\t * <li> player - The player who is breaking the block\n+\t\t * <li> pos - The position at which the block is being broken\n+\t\t * <li> state - The block state from BEFORE the block is broken\n+\t\t * <li> entity - The block entity from BEFORE the block is broken (can be null)\n+\t\t */\n+\t\tboolean beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface After {\n+\t\t/* Called after a block is broken\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world where the block was broken\n+\t\t * <li> player - The player who broke the block\n+\t\t * <li> pos - The position where the block was broken\n+\t\t * <li> state - The block state from AFTER the block was broken\n+\t\t * <li> entity - The block entity of the broken block (can be null)\n+\t\t */\n+\t\tvoid afterBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface Cancel {\n+\t\t/* Called when a block break has been canceled\n+\t\t *\n+\t\t * <p>Fields:\n+\t\t * <ul><li> world - The world where the block was going to be broken\n+\t\t * <li> player - The player was going to break the block\n+\t\t * <li> pos - The position where the block was going to be broken\n+\t\t * <li> state - The block state of the block that was going to be broken\n+\t\t * <li> entity - The block entity of the block that was going to be broken (can be null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7174955516e8f3ca264cfa48963f74f3cadba82e"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjMwMTgxOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTowMDo1NFrOG7xWYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTowMDo1NFrOG7xWYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyNzcxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t/*\n          \n          \n            \n            \t * Callback when a block break has been canceled\n          \n          \n            \n            \t * Called on the Server only\n          \n          \n            \n            \t/**\n          \n          \n            \n            \t * Callback when a block break has been canceled.\n          \n          \n            \n            \t * \n          \n          \n            \n            \t * <p>Called on the logical server only. May be used to send packets to revert client-side block changes.</p>", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r465327713", "createdAt": "2020-08-04T21:00:54Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>`true` passes on the callback to the next listener\n+\t * <li>`false` cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tboolean result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (!result) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback when a block break has been canceled\n+\t * Called on the Server only", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7174955516e8f3ca264cfa48963f74f3cadba82e"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjMwMzIxOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTowMToyNFrOG7xXTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTowMToyNFrOG7xXTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyNzk1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t/*\n          \n          \n            \n            \t * Callback after a block is broken.\n          \n          \n            \n            \t * Called on the Server only\n          \n          \n            \n            \t */\n          \n          \n            \n            \t/**\n          \n          \n            \n            \t * Callback after a block is broken.\n          \n          \n            \n            \t * \n          \n          \n            \n            \t * <p>Called on the Server only.</p>\n          \n          \n            \n            \t */", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r465327951", "createdAt": "2020-08-04T21:01:24Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>`true` passes on the callback to the next listener\n+\t * <li>`false` cancels the block breaking action</ul>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tboolean result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (!result) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t);\n+\n+\t/*\n+\t * Callback after a block is broken.\n+\t * Called on the Server only\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7174955516e8f3ca264cfa48963f74f3cadba82e"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjMxMjA1OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTowNDoyNFrOG7xcxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTowNDoyNFrOG7xcxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyOTM1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * <p>Upon return:\n          \n          \n            \n            \t * <ul><li>`true` passes on the callback to the next listener\n          \n          \n            \n            \t * <li>`false` cancels the block breaking action</ul>\n          \n          \n            \n            \t * <p>If any listener cancels a block breaking action, that block breaking\n          \n          \n            \n            \t * action is cancelled and {@link CANCEL} event is fired. Otherwise, the\n          \n          \n            \n            \t * {@link AFTER} event is fired.</p>\n          \n      \n    \n    \n  \n\nReturn value described in method already", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r465329351", "createdAt": "2020-08-04T21:04:24Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>Upon return:\n+\t * <ul><li>`true` passes on the callback to the next listener\n+\t * <li>`false` cancels the block breaking action</ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7174955516e8f3ca264cfa48963f74f3cadba82e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjM0OTMyOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMToxNjoyMFrOG7xzrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMToxNjoyMFrOG7xzrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzNTIxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * \n          \n          \n            \n            \t *", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r465335213", "createdAt": "2020-08-04T21:16:20Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>If any listener cancels a block breaking action, that block breaking\n+\t * action is cancelled and {@link CANCEL} event is fired. Otherwise, the\n+\t * {@link AFTER} event is fired.</p>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tboolean result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (!result) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49039a3c83cd696b02cbcc6120a83dd194b20749"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjM0OTU0OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMToxNjoyNVrOG7xz1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMToxNzoyNlrOG7x1pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzNTI1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * \n          \n          \n            \n            \t *", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r465335253", "createdAt": "2020-08-04T21:16:25Z", "author": {"login": "liach"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>If any listener cancels a block breaking action, that block breaking\n+\t * action is cancelled and {@link CANCEL} event is fired. Otherwise, the\n+\t * {@link AFTER} event is fired.</p>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tboolean result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (!result) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t * \n+\t * <p>Called on the Server only.</p>\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback when a block break has been canceled.\n+\t * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49039a3c83cd696b02cbcc6120a83dd194b20749"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzNTcxOA==", "bodyText": "I fixed in last commit", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r465335718", "createdAt": "2020-08-04T21:17:26Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class BlockBreakEvents {\n+\tprivate BlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>If any listener cancels a block breaking action, that block breaking\n+\t * action is cancelled and {@link CANCEL} event is fired. Otherwise, the\n+\t * {@link AFTER} event is fired.</p>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tboolean result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (!result) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t * \n+\t * <p>Called on the Server only.</p>\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback when a block break has been canceled.\n+\t * ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzNTI1Mw=="}, "originalCommit": {"oid": "49039a3c83cd696b02cbcc6120a83dd194b20749"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQyMDYwOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoxODoxNVrOG8_BuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0MjoxNVrOG9cluQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMDM3Ng==", "bodyText": "Wouldn't it be more useful to provide the state of the block that was broken as anyone who wants to query the currently state can get it from the world.\nOr is this a mistake in javadoc as the the state from impl seems to be from local capture", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r466600376", "createdAt": "2020-08-06T18:18:15Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class PlayerBlockBreakEvents {\n+\tprivate PlayerBlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>If any listener cancels a block breaking action, that block breaking\n+\t * action is cancelled and {@link CANCELED} event is fired. Otherwise, the\n+\t * {@link AFTER} event is fired.</p>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tboolean result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (!result) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t *\n+\t * <p>Called on the Server only.</p>\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback when a block break has been canceled.\n+\t *\n+\t * <p>Called on the logical server only. May be used to send packets to revert client-side block changes.</p>\n+\t */\n+\tpublic static final Event<Canceled> CANCELED = EventFactory.createArrayBacked(Canceled.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Canceled event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/**\n+\t\t * Called before a block is broken and allows cancelling the block breaking.\n+\t\t *\n+\t\t * <p>Implementations should not modify the world or assume the block break has completed or failed.</p>\n+\t\t *\n+\t\t * @param world the world in which the block is broken\n+\t\t * @param player the player breaking the block\n+\t\t * @param pos the position at which the block is broken\n+\t\t * @param state the block state <strong>before</strong> the block is broken\n+\t\t * @param entity the block entity <strong>before</strong> the block is broken, can be {@code null}\n+\t\t * @return {@code false} to cancel block breaking action, or {@code true} to pass to next listener\n+\t\t */\n+\t\tboolean beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface After {\n+\t\t/**\n+\t\t * Called after a block is successfully broken.\n+\t\t *\n+\t\t * @param world the world where the block was broken\n+\t\t * @param player the player who broke the block\n+\t\t * @param pos the position where the block was broken\n+\t\t * @param state the block state <strong>after</strong> the block was broken", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0c4f43b351eb40bbd9131c5591b4b33a9cc7be"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NDcyOQ==", "bodyText": "The state is from before the block is broken, thanks for saying, changing javadoc now", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r467084729", "createdAt": "2020-08-07T14:42:15Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class PlayerBlockBreakEvents {\n+\tprivate PlayerBlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>If any listener cancels a block breaking action, that block breaking\n+\t * action is cancelled and {@link CANCELED} event is fired. Otherwise, the\n+\t * {@link AFTER} event is fired.</p>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tboolean result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (!result) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t *\n+\t * <p>Called on the Server only.</p>\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback when a block break has been canceled.\n+\t *\n+\t * <p>Called on the logical server only. May be used to send packets to revert client-side block changes.</p>\n+\t */\n+\tpublic static final Event<Canceled> CANCELED = EventFactory.createArrayBacked(Canceled.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Canceled event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/**\n+\t\t * Called before a block is broken and allows cancelling the block breaking.\n+\t\t *\n+\t\t * <p>Implementations should not modify the world or assume the block break has completed or failed.</p>\n+\t\t *\n+\t\t * @param world the world in which the block is broken\n+\t\t * @param player the player breaking the block\n+\t\t * @param pos the position at which the block is broken\n+\t\t * @param state the block state <strong>before</strong> the block is broken\n+\t\t * @param entity the block entity <strong>before</strong> the block is broken, can be {@code null}\n+\t\t * @return {@code false} to cancel block breaking action, or {@code true} to pass to next listener\n+\t\t */\n+\t\tboolean beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity entity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface After {\n+\t\t/**\n+\t\t * Called after a block is successfully broken.\n+\t\t *\n+\t\t * @param world the world where the block was broken\n+\t\t * @param player the player who broke the block\n+\t\t * @param pos the position where the block was broken\n+\t\t * @param state the block state <strong>after</strong> the block was broken", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMDM3Ng=="}, "originalCommit": {"oid": "da0c4f43b351eb40bbd9131c5591b4b33a9cc7be"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQzMzgyOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyMjowM1rOG8_Jlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0NDowMlrOG9cqQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMjM5MQ==", "bodyText": "Parameter should be blockEntity  on all of these methods", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r466602391", "createdAt": "2020-08-06T18:22:03Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class PlayerBlockBreakEvents {\n+\tprivate PlayerBlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>If any listener cancels a block breaking action, that block breaking\n+\t * action is cancelled and {@link CANCELED} event is fired. Otherwise, the\n+\t * {@link AFTER} event is fired.</p>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tboolean result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (!result) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t *\n+\t * <p>Called on the Server only.</p>\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback when a block break has been canceled.\n+\t *\n+\t * <p>Called on the logical server only. May be used to send packets to revert client-side block changes.</p>\n+\t */\n+\tpublic static final Event<Canceled> CANCELED = EventFactory.createArrayBacked(Canceled.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Canceled event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/**\n+\t\t * Called before a block is broken and allows cancelling the block breaking.\n+\t\t *\n+\t\t * <p>Implementations should not modify the world or assume the block break has completed or failed.</p>\n+\t\t *\n+\t\t * @param world the world in which the block is broken\n+\t\t * @param player the player breaking the block\n+\t\t * @param pos the position at which the block is broken\n+\t\t * @param state the block state <strong>before</strong> the block is broken\n+\t\t * @param entity the block entity <strong>before</strong> the block is broken, can be {@code null}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0c4f43b351eb40bbd9131c5591b4b33a9cc7be"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NTg4OQ==", "bodyText": "fixing", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r467085889", "createdAt": "2020-08-07T14:44:02Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class PlayerBlockBreakEvents {\n+\tprivate PlayerBlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>If any listener cancels a block breaking action, that block breaking\n+\t * action is cancelled and {@link CANCELED} event is fired. Otherwise, the\n+\t * {@link AFTER} event is fired.</p>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tboolean result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (!result) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t *\n+\t * <p>Called on the Server only.</p>\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback when a block break has been canceled.\n+\t *\n+\t * <p>Called on the logical server only. May be used to send packets to revert client-side block changes.</p>\n+\t */\n+\tpublic static final Event<Canceled> CANCELED = EventFactory.createArrayBacked(Canceled.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Canceled event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/**\n+\t\t * Called before a block is broken and allows cancelling the block breaking.\n+\t\t *\n+\t\t * <p>Implementations should not modify the world or assume the block break has completed or failed.</p>\n+\t\t *\n+\t\t * @param world the world in which the block is broken\n+\t\t * @param player the player breaking the block\n+\t\t * @param pos the position at which the block is broken\n+\t\t * @param state the block state <strong>before</strong> the block is broken\n+\t\t * @param entity the block entity <strong>before</strong> the block is broken, can be {@code null}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMjM5MQ=="}, "originalCommit": {"oid": "da0c4f43b351eb40bbd9131c5591b4b33a9cc7be"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ0MzI5OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyNDo0NVrOG8_Pkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0Mzo1MFrOG9cpvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMzkyMg==", "bodyText": "Since the cancel event is fired first before the normal vanilla packet, wouldn't this cause a double update on some blocks?\nMaybe only call vanilla logic if the result of cancel even explicitly says to fallback to vanilla logic (likely true return value).", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r466603922", "createdAt": "2020-08-06T18:24:45Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +86,30 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tboolean result = PlayerBlockBreakEvents.BEFORE.invoker().beforeBlockBreak(this.world, this.player, pos, state, entity);\n+\n+\t\tif (!result) {\n+\t\t\tPlayerBlockBreakEvents.CANCELED.invoker().onBlockBreakCancel(this.world, this.player, pos, state, entity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0c4f43b351eb40bbd9131c5591b4b33a9cc7be"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NTc1OQ==", "bodyText": "The double update is fine. This is for modded blocks which would need the update to extend further than a three by three, since the client thinks the block was broken.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r467085759", "createdAt": "2020-08-07T14:43:50Z", "author": {"login": "Geometrically"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/mixin/event/interaction/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -81,4 +86,30 @@ public void interactItem(ServerPlayerEntity player, World world, ItemStack stack\n \t\t\treturn;\n \t\t}\n \t}\n+\n+\t@Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onBreak(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/entity/player/PlayerEntity;)V\"), method = \"tryBreakBlock\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void breakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> cir, BlockState state, BlockEntity entity, Block block) {\n+\t\tboolean result = PlayerBlockBreakEvents.BEFORE.invoker().beforeBlockBreak(this.world, this.player, pos, state, entity);\n+\n+\t\tif (!result) {\n+\t\t\tPlayerBlockBreakEvents.CANCELED.invoker().onBlockBreakCancel(this.world, this.player, pos, state, entity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMzkyMg=="}, "originalCommit": {"oid": "da0c4f43b351eb40bbd9131c5591b4b33a9cc7be"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ0ODU5OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/testmod/java/net/fabricmc/fabric/test/event/interaction/InteractionEventsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyNjowOFrOG8_SsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyNjowOFrOG8_SsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNDcyMA==", "bodyText": "I'd argue this should be named PlayerBreakBlockTests since we can introduce more entrypoints for future events.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r466604720", "createdAt": "2020-08-06T18:26:08Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/testmod/java/net/fabricmc/fabric/test/event/interaction/InteractionEventsTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.event.interaction;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.block.Blocks;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.player.PlayerBlockBreakEvents;\n+\n+public class InteractionEventsTest implements ModInitializer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0c4f43b351eb40bbd9131c5591b4b33a9cc7be"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTY1MDQzOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMTowNDozNVrOG9_PfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMTowNDozNVrOG9_PfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY1MjQ3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * <p>Called on the Server only.</p>\n          \n          \n            \n            \t * <p>Only called on a logical server.\n          \n      \n    \n    \n  \n\nYou can omit the closing </p> in the style but it isn't required of course", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r467652477", "createdAt": "2020-08-10T01:04:35Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class PlayerBlockBreakEvents {\n+\tprivate PlayerBlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>If any listener cancels a block breaking action, that block breaking\n+\t * action is cancelled and {@link CANCELED} event is fired. Otherwise, the\n+\t * {@link AFTER} event is fired.</p>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tboolean result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (!result) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t *\n+\t * <p>Called on the Server only.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95bb88eb184b0c811295b1052f969c89e8440e5"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTY1MDkzOnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMTowNTowOFrOG9_PuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMTowNTowOFrOG9_PuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY1MjUzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * <p>Called on the logical server only. May be used to send packets to revert client-side block changes.</p>\n          \n          \n            \n            \t * <p>Only called on a logical server. May be used to send packets to revert client-side block changes.", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r467652537", "createdAt": "2020-08-10T01:05:08Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class PlayerBlockBreakEvents {\n+\tprivate PlayerBlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>If any listener cancels a block breaking action, that block breaking\n+\t * action is cancelled and {@link CANCELED} event is fired. Otherwise, the\n+\t * {@link AFTER} event is fired.</p>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tboolean result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (!result) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t *\n+\t * <p>Called on the Server only.</p>\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback when a block break has been canceled.\n+\t *\n+\t * <p>Called on the logical server only. May be used to send packets to revert client-side block changes.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95bb88eb184b0c811295b1052f969c89e8440e5"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTY1MTU4OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMTowNTo0MVrOG9_QCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMTowNTo0MVrOG9_QCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY1MjYxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t * @param blockEntity  entity the block entity of the block that was going to be broken, can be {@code null}\n          \n          \n            \n            \t\t * @param blockEntity the block entity of the block that was going to be broken, can be {@code null}", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r467652617", "createdAt": "2020-08-10T01:05:41Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.player;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+public final class PlayerBlockBreakEvents {\n+\tprivate PlayerBlockBreakEvents() { }\n+\n+\t/**\n+\t * Callback before a block is broken.\n+\t * Only called on the server, however updates are synced with the client.\n+\t *\n+\t * <p>If any listener cancels a block breaking action, that block breaking\n+\t * action is cancelled and {@link CANCELED} event is fired. Otherwise, the\n+\t * {@link AFTER} event is fired.</p>\n+\t */\n+\tpublic static final Event<Before> BEFORE = EventFactory.createArrayBacked(Before.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Before event : listeners) {\n+\t\t\t\t\tboolean result = event.beforeBlockBreak(world, player, pos, state, entity);\n+\n+\t\t\t\t\tif (!result) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback after a block is broken.\n+\t *\n+\t * <p>Called on the Server only.</p>\n+\t */\n+\tpublic static final Event<After> AFTER = EventFactory.createArrayBacked(After.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (After event : listeners) {\n+\t\t\t\t\tevent.afterBlockBreak(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t/**\n+\t * Callback when a block break has been canceled.\n+\t *\n+\t * <p>Called on the logical server only. May be used to send packets to revert client-side block changes.</p>\n+\t */\n+\tpublic static final Event<Canceled> CANCELED = EventFactory.createArrayBacked(Canceled.class,\n+\t\t\t(listeners) -> (world, player, pos, state, entity) -> {\n+\t\t\t\tfor (Canceled event : listeners) {\n+\t\t\t\t\tevent.onBlockBreakCancel(world, player, pos, state, entity);\n+\t\t\t\t}\n+\t\t\t}\n+\t);\n+\n+\t@FunctionalInterface\n+\tpublic interface Before {\n+\t\t/**\n+\t\t * Called before a block is broken and allows cancelling the block breaking.\n+\t\t *\n+\t\t * <p>Implementations should not modify the world or assume the block break has completed or failed.</p>\n+\t\t *\n+\t\t * @param world the world in which the block is broken\n+\t\t * @param player the player breaking the block\n+\t\t * @param pos the position at which the block is broken\n+\t\t * @param state the block state <strong>before</strong> the block is broken\n+\t\t * @param blockEntity the block entity <strong>before</strong> the block is broken, can be {@code null}\n+\t\t * @return {@code false} to cancel block breaking action, or {@code true} to pass to next listener\n+\t\t */\n+\t\tboolean beforeBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity blockEntity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface After {\n+\t\t/**\n+\t\t * Called after a block is successfully broken.\n+\t\t *\n+\t\t * @param world the world where the block was broken\n+\t\t * @param player the player who broke the block\n+\t\t * @param pos the position where the block was broken\n+\t\t * @param state the block state <strong>before</strong> the block was broken\n+\t\t * @param blockEntity the block entity of the broken block, can be {@code null}\n+\t\t */\n+\t\tvoid afterBlockBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, /* Nullable */ BlockEntity blockEntity);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface Canceled {\n+\t\t/**\n+\t\t * Called when a block break has been canceled.\n+\t\t *\n+\t\t * @param world the world where the block was going to be broken\n+\t\t * @param player the player who was going to break the block\n+\t\t * @param pos the position where the block was going to be broken\n+\t\t * @param state the block state of the block that was going to be broken\n+\t\t * @param blockEntity  entity the block entity of the block that was going to be broken, can be {@code null}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95bb88eb184b0c811295b1052f969c89e8440e5"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTY1MjA2OnYy", "diffSide": "RIGHT", "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/impl/event/interaction/InteractionEventsRouter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMTowNjozM1rOG9_QUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMTowNjozM1rOG9_QUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY1MjY5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t* It is in a 3x3 area due to how vanilla redstone handles updates, as it considers\n          \n          \n            \n            \t\t* This covers a 3x3 area due to how vanilla redstone handles updates, as it considers", "url": "https://github.com/FabricMC/fabric/pull/980#discussion_r467652690", "createdAt": "2020-08-10T01:06:33Z", "author": {"login": "i509VCB"}, "path": "fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/impl/event/interaction/InteractionEventsRouter.java", "diffHunk": "@@ -41,5 +45,22 @@ public void onInitialize() {\n \n \t\t\treturn ActionResult.PASS;\n \t\t});\n+\n+\t\t/*\n+\t\t* This code is for telling the client that the block wasn't actually broken.\n+\t\t* It is in a 3x3 area due to how vanilla redstone handles updates, as it considers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95bb88eb184b0c811295b1052f969c89e8440e5"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3432, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}