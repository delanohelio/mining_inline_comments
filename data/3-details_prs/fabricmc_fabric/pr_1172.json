{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MzcxMTI5", "number": 1172, "title": "Update the Dimension API", "bodyText": "Supersedes teleportation component of #1040", "createdAt": "2020-11-20T02:48:33Z", "url": "https://github.com/FabricMC/fabric/pull/1172", "merged": true, "mergeCommit": {"oid": "3f591ea5c5c81db22cc133340b911891ba9181f6"}, "closed": true, "closedAt": "2020-11-28T19:47:10Z", "author": {"login": "Waterpicker"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeOHdfgH2gAyNTI0MzcxMTI5Ojg3M2ZiNzJjMWJmMzc0NTdiNDE4M2EyNjg3Y2U5ZTNlOTljNzNiYzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABde-zgQAFqTUzNjA1MjExNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "873fb72c1bf37457b4183a2687ce9e3e99c73bc1", "author": {"user": {"login": "Waterpicker", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/873fb72c1bf37457b4183a2687ce9e3e99c73bc1", "committedDate": "2020-11-20T02:41:47Z", "message": "Reimplement Dimension API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcc059089c3524e33c38b2056549ad21cc92368d", "author": {"user": {"login": "Waterpicker", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/bcc059089c3524e33c38b2056549ad21cc92368d", "committedDate": "2020-11-20T02:50:52Z", "message": "Forgot to update dimension-api mixins.json"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MDM3MTYz", "url": "https://github.com/FabricMC/fabric/pull/1172#pullrequestreview-535037163", "createdAt": "2020-11-20T02:55:48Z", "commit": {"oid": "bcc059089c3524e33c38b2056549ad21cc92368d"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMjo1NTo0OFrOH27mZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMzowMDowNVrOH27rJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MTYzNg==", "bodyText": "The code in Entity#moveToWorld will fail teleportation if the target is null.\nI believe we should document that?\nReason for not requiring non-null here is a case such as another mod which may wish to intercept the teleport target via an event in the future.", "url": "https://github.com/FabricMC/fabric/pull/1172#discussion_r527361636", "createdAt": "2020-11-20T02:55:48Z", "author": {"login": "i509VCB"}, "path": "fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/api/dimension/v1/FabricDimensions.java", "diffHunk": "@@ -37,74 +36,27 @@ private FabricDimensions() {\n \t}\n \n \t/**\n-\t * Teleports an entity to a different dimension, using custom placement logic.\n+\t * Teleports an entity to a different dimension, placing it at the specified destination.\n \t *\n-\t * <p>This method behaves as if:\n-\t * <pre>{@code teleported.changeDimension(destination)}</pre>\n+\t * <p>Using this method will circumvent Vanilla's portal placement code.\n \t *\n-\t * <p>If {@code destination} has a default placer, that placer will be used. If {@code destination} is\n-\t * the nether or the overworld, the default logic is the vanilla path.\n-\t * For any other dimension, the default placement behaviour is undefined.\n-\t * When delegating to a placement logic that uses portals, the entity's {@code lastPortalPosition},\n-\t * {@code lastPortalDirectionVector}, and {@code lastPortalDirection} fields should be updated\n-\t * before calling this method.\n-\t *\n-\t * <p>After calling this method, {@code teleported} may be invalidated. Callers should use\n-\t * the returned entity for any further manipulation.\n+\t * <p>When teleporting to another dimension, the entity may be replaced with a new entity in the target\n+\t * dimension. This is not the case for players, but needs to be accounted for by the caller.\n \t *\n \t * @param teleported  the entity to teleport\n \t * @param destination the dimension the entity will be teleported to\n-\t * @return the teleported entity, or a clone of it\n-\t * @see #teleport(Entity, ServerWorld)\n-\t */\n-\tpublic static <E extends Entity> E teleport(E teleported, ServerWorld destination) {\n-\t\treturn teleport(teleported, destination, null);\n-\t}\n-\n-\t/**\n-\t * Teleports an entity to a different dimension, using custom placement logic.\n-\t *\n-\t * <p>If {@code customPlacement} is {@code null}, this method behaves as if:\n-\t * <pre>{@code teleported.changeDimension(destination)}</pre>\n-\t * The {@code customPlacement} may itself return {@code null}, in which case\n-\t * the default placement logic for that dimension will be run.\n-\t *\n-\t * <p>If {@code destination} has a default placer, that placer will be used. If {@code destination} is\n-\t * the nether or the overworld, the default logic is the vanilla path.\n-\t * For any other dimension, the default placement behaviour is undefined.\n-\t * When delegating to a placement logic that uses portals, the entity's {@code lastPortalPosition},\n-\t * {@code lastPortalDirectionVector}, and {@code lastPortalDirection} fields should be updated\n-\t * before calling this method.\n-\t *\n-\t * <p>After calling this method, {@code teleported} may be invalidated. Callers should use\n-\t * the returned entity for any further manipulation.\n-\t *\n-\t * @param teleported   the entity to teleport\n-\t * @param destination  the dimension the entity will be teleported to\n-\t * @param customPlacer custom placement logic that will run before the default one,\n-\t *                     or {@code null} to use the dimension's default behavior.\n-\t * @param <E>          the type of the teleported entity\n-\t * @return the teleported entity, or a clone of it\n+\t * @param target      where the entity will be placed in the target world.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc059089c3524e33c38b2056549ad21cc92368d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MTczNA==", "bodyText": "Can you add a Nullable annotation here for the return value as an entity can fail to teleport?", "url": "https://github.com/FabricMC/fabric/pull/1172#discussion_r527361734", "createdAt": "2020-11-20T02:56:10Z", "author": {"login": "i509VCB"}, "path": "fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/api/dimension/v1/FabricDimensions.java", "diffHunk": "@@ -37,74 +36,27 @@ private FabricDimensions() {\n \t}\n \n \t/**\n-\t * Teleports an entity to a different dimension, using custom placement logic.\n+\t * Teleports an entity to a different dimension, placing it at the specified destination.\n \t *\n-\t * <p>This method behaves as if:\n-\t * <pre>{@code teleported.changeDimension(destination)}</pre>\n+\t * <p>Using this method will circumvent Vanilla's portal placement code.\n \t *\n-\t * <p>If {@code destination} has a default placer, that placer will be used. If {@code destination} is\n-\t * the nether or the overworld, the default logic is the vanilla path.\n-\t * For any other dimension, the default placement behaviour is undefined.\n-\t * When delegating to a placement logic that uses portals, the entity's {@code lastPortalPosition},\n-\t * {@code lastPortalDirectionVector}, and {@code lastPortalDirection} fields should be updated\n-\t * before calling this method.\n-\t *\n-\t * <p>After calling this method, {@code teleported} may be invalidated. Callers should use\n-\t * the returned entity for any further manipulation.\n+\t * <p>When teleporting to another dimension, the entity may be replaced with a new entity in the target\n+\t * dimension. This is not the case for players, but needs to be accounted for by the caller.\n \t *\n \t * @param teleported  the entity to teleport\n \t * @param destination the dimension the entity will be teleported to\n-\t * @return the teleported entity, or a clone of it\n-\t * @see #teleport(Entity, ServerWorld)\n-\t */\n-\tpublic static <E extends Entity> E teleport(E teleported, ServerWorld destination) {\n-\t\treturn teleport(teleported, destination, null);\n-\t}\n-\n-\t/**\n-\t * Teleports an entity to a different dimension, using custom placement logic.\n-\t *\n-\t * <p>If {@code customPlacement} is {@code null}, this method behaves as if:\n-\t * <pre>{@code teleported.changeDimension(destination)}</pre>\n-\t * The {@code customPlacement} may itself return {@code null}, in which case\n-\t * the default placement logic for that dimension will be run.\n-\t *\n-\t * <p>If {@code destination} has a default placer, that placer will be used. If {@code destination} is\n-\t * the nether or the overworld, the default logic is the vanilla path.\n-\t * For any other dimension, the default placement behaviour is undefined.\n-\t * When delegating to a placement logic that uses portals, the entity's {@code lastPortalPosition},\n-\t * {@code lastPortalDirectionVector}, and {@code lastPortalDirection} fields should be updated\n-\t * before calling this method.\n-\t *\n-\t * <p>After calling this method, {@code teleported} may be invalidated. Callers should use\n-\t * the returned entity for any further manipulation.\n-\t *\n-\t * @param teleported   the entity to teleport\n-\t * @param destination  the dimension the entity will be teleported to\n-\t * @param customPlacer custom placement logic that will run before the default one,\n-\t *                     or {@code null} to use the dimension's default behavior.\n-\t * @param <E>          the type of the teleported entity\n-\t * @return the teleported entity, or a clone of it\n+\t * @param target      where the entity will be placed in the target world.\n+\t *                    As in Vanilla, the target's velocity is not applied to players.\n+\t * @param <E>         the type of the teleported entity\n+\t * @return Returns the teleported entity in the target dimension, which may be a new entity or <code>teleported</code>,\n+\t * depending on the entity type.\n \t * @throws IllegalStateException if this method is called on a client entity\n \t * @apiNote this method must be called from the main server thread\n \t */\n-\tpublic static <E extends Entity> E teleport(E teleported, ServerWorld destination, /*Nullable*/ EntityPlacer customPlacer) {\n+\tpublic static <E extends Entity> E teleport(E teleported, ServerWorld destination, TeleportTarget target) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc059089c3524e33c38b2056549ad21cc92368d"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MTkyMw==", "bodyText": "I believe this should be fine as the method which sets this field will fail unless the method is called on the server thread.", "url": "https://github.com/FabricMC/fabric/pull/1172#discussion_r527361923", "createdAt": "2020-11-20T02:56:45Z", "author": {"login": "i509VCB"}, "path": "fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/impl/dimension/FabricDimensionInternals.java", "diffHunk": "@@ -16,116 +16,41 @@\n \n package net.fabricmc.fabric.impl.dimension;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-\n import com.google.common.base.Preconditions;\n \n-import net.minecraft.block.pattern.BlockPattern;\n import net.minecraft.entity.Entity;\n import net.minecraft.server.world.ServerWorld;\n-import net.minecraft.util.math.Direction;\n-import net.minecraft.util.registry.RegistryKey;\n-import net.minecraft.world.World;\n+import net.minecraft.world.TeleportTarget;\n \n-import net.fabricmc.fabric.api.dimension.v1.EntityPlacer;\n import net.fabricmc.fabric.api.dimension.v1.FabricDimensions;\n-import net.fabricmc.fabric.mixin.dimension.EntityHooks;\n \n public final class FabricDimensionInternals {\n+\t/**\n+\t * The target passed to the last call to {@link FabricDimensions#teleport(Entity, ServerWorld, TeleportTarget)}.\n+\t */\n+\tprivate static TeleportTarget currentTarget;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc059089c3524e33c38b2056549ad21cc92368d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MjY5Nw==", "bodyText": "For others wondering, this capture via modify variable is required when discussing with Gimpansor who originally wrote the PR due to Fabric Loader's injection point for mod loading. This should be fine.", "url": "https://github.com/FabricMC/fabric/pull/1172#discussion_r527362697", "createdAt": "2020-11-20T02:59:36Z", "author": {"login": "i509VCB"}, "path": "fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/mixin/dimension/ServerBugfixMixin.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.dimension;\n+\n+import com.mojang.serialization.Lifecycle;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.ModifyVariable;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.nbt.Tag;\n+import net.minecraft.resource.DataPackSettings;\n+import net.minecraft.server.Main;\n+import net.minecraft.util.dynamic.RegistryOps;\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+import net.minecraft.world.gen.GeneratorOptions;\n+import net.minecraft.world.level.LevelInfo;\n+import net.minecraft.world.level.LevelProperties;\n+import net.minecraft.world.level.storage.LevelStorage;\n+\n+/**\n+ * This Mixin aims to solve a Minecraft Vanilla bug where datapacks are ignored during creation of the\n+ * initial LevelProperties when a dedicated server creates a completely new level.\n+ *\n+ * <p>This also includes the datapacks of loaded Fabric mods, and results in modded dimensions only\n+ * being available after restarting the server, once the world has been created.\n+ *\n+ * <p>This Mixin aims to solve this problem by saving and loading the level.dat file once, after\n+ * a new set of level properties is created. This will apply the same logic as reloading the\n+ * level.dat after a restart, now including all datapack dimensions.\n+ *\n+ * <p>See https://bugs.mojang.com/browse/MC-195468 for a related bug report.\n+ *\n+ * <p>In 1.17: Retest if this bug still occurs without this Mixin by launching a dedicated server with the\n+ * dimension testmod, and no world directory. If the dimension is available (i.e. in /execute in, or via\n+ * the testmod's commands), then the bug is fixed and this Mixin can be removed.\n+ */\n+@Mixin(value = Main.class, remap = false)\n+public class ServerBugfixMixin {\n+\tprivate static LevelStorage.Session fabric_session;\n+\n+\tprivate static DynamicRegistryManager.Impl fabric_dynamicRegistry;\n+\n+\tprivate static RegistryOps<Tag> fabric_registryOps;\n+\n+\t@ModifyVariable(at = @At(value = \"INVOKE_ASSIGN\", target = \"Lnet/minecraft/util/registry/DynamicRegistryManager;create()Lnet/minecraft/util/registry/DynamicRegistryManager$Impl;\"), method = \"main\", remap = false, allow = 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc059089c3524e33c38b2056549ad21cc92368d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2Mjg1Mw==", "bodyText": "Could you throw an @Unique annotation on those three static fields?", "url": "https://github.com/FabricMC/fabric/pull/1172#discussion_r527362853", "createdAt": "2020-11-20T03:00:05Z", "author": {"login": "i509VCB"}, "path": "fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/mixin/dimension/ServerBugfixMixin.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.dimension;\n+\n+import com.mojang.serialization.Lifecycle;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.ModifyVariable;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.nbt.Tag;\n+import net.minecraft.resource.DataPackSettings;\n+import net.minecraft.server.Main;\n+import net.minecraft.util.dynamic.RegistryOps;\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+import net.minecraft.world.gen.GeneratorOptions;\n+import net.minecraft.world.level.LevelInfo;\n+import net.minecraft.world.level.LevelProperties;\n+import net.minecraft.world.level.storage.LevelStorage;\n+\n+/**\n+ * This Mixin aims to solve a Minecraft Vanilla bug where datapacks are ignored during creation of the\n+ * initial LevelProperties when a dedicated server creates a completely new level.\n+ *\n+ * <p>This also includes the datapacks of loaded Fabric mods, and results in modded dimensions only\n+ * being available after restarting the server, once the world has been created.\n+ *\n+ * <p>This Mixin aims to solve this problem by saving and loading the level.dat file once, after\n+ * a new set of level properties is created. This will apply the same logic as reloading the\n+ * level.dat after a restart, now including all datapack dimensions.\n+ *\n+ * <p>See https://bugs.mojang.com/browse/MC-195468 for a related bug report.\n+ *\n+ * <p>In 1.17: Retest if this bug still occurs without this Mixin by launching a dedicated server with the\n+ * dimension testmod, and no world directory. If the dimension is available (i.e. in /execute in, or via\n+ * the testmod's commands), then the bug is fixed and this Mixin can be removed.\n+ */\n+@Mixin(value = Main.class, remap = false)\n+public class ServerBugfixMixin {\n+\tprivate static LevelStorage.Session fabric_session;\n+\n+\tprivate static DynamicRegistryManager.Impl fabric_dynamicRegistry;\n+\n+\tprivate static RegistryOps<Tag> fabric_registryOps;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc059089c3524e33c38b2056549ad21cc92368d"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cab03bf4620186bbfa41d92a1e9cec92daa732b", "author": {"user": {"login": "Waterpicker", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/9cab03bf4620186bbfa41d92a1e9cec92daa732b", "committedDate": "2020-11-20T03:11:21Z", "message": "Did suggested changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4188f856f4f474d22a5b28b72ee604101640f8fb", "author": {"user": {"login": "Waterpicker", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/4188f856f4f474d22a5b28b72ee604101640f8fb", "committedDate": "2020-11-20T03:15:41Z", "message": "Move Nullable import."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0ae7aff0d12421fa921f478dca76a1c8c07f9fb", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/d0ae7aff0d12421fa921f478dca76a1c8c07f9fb", "committedDate": "2020-11-20T03:20:08Z", "message": "Remove unneeded whitespace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac427e54ca53a33c45ad1b988c7431b3a33daf99", "author": {"user": {"login": "Waterpicker", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/ac427e54ca53a33c45ad1b988c7431b3a33daf99", "committedDate": "2020-11-20T03:21:38Z", "message": "Merge pull request #1 from i509VCB/dimdoors/fix_whitespace_dims\n\nDimdoors/fix whitespace dims"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MDQ1MTc2", "url": "https://github.com/FabricMC/fabric/pull/1172#pullrequestreview-535045176", "createdAt": "2020-11-20T03:22:07Z", "commit": {"oid": "ac427e54ca53a33c45ad1b988c7431b3a33daf99"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjEyMjkx", "url": "https://github.com/FabricMC/fabric/pull/1172#pullrequestreview-535212291", "createdAt": "2020-11-20T08:31:34Z", "commit": {"oid": "ac427e54ca53a33c45ad1b988c7431b3a33daf99"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NzE4NjU3", "url": "https://github.com/FabricMC/fabric/pull/1172#pullrequestreview-535718657", "createdAt": "2020-11-20T19:28:57Z", "commit": {"oid": "ac427e54ca53a33c45ad1b988c7431b3a33daf99"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToyODo1N1rOH3eBsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToyODo1N1rOH3eBsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNTY4MA==", "bodyText": "Just came across this the other day \ud83d\udc4d", "url": "https://github.com/FabricMC/fabric/pull/1172#discussion_r527925680", "createdAt": "2020-11-20T19:28:57Z", "author": {"login": "modmuss50"}, "path": "fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/mixin/dimension/ServerBugfixMixin.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.dimension;\n+\n+import com.mojang.serialization.Lifecycle;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.ModifyVariable;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.nbt.Tag;\n+import net.minecraft.resource.DataPackSettings;\n+import net.minecraft.server.Main;\n+import net.minecraft.util.dynamic.RegistryOps;\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+import net.minecraft.world.gen.GeneratorOptions;\n+import net.minecraft.world.level.LevelInfo;\n+import net.minecraft.world.level.LevelProperties;\n+import net.minecraft.world.level.storage.LevelStorage;\n+\n+/**\n+ * This Mixin aims to solve a Minecraft Vanilla bug where datapacks are ignored during creation of the\n+ * initial LevelProperties when a dedicated server creates a completely new level.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac427e54ca53a33c45ad1b988c7431b3a33daf99"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NzE5NTcx", "url": "https://github.com/FabricMC/fabric/pull/1172#pullrequestreview-535719571", "createdAt": "2020-11-20T19:30:24Z", "commit": {"oid": "ac427e54ca53a33c45ad1b988c7431b3a33daf99"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOTozMDoyNFrOH3eEqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOTozMDoyNFrOH3eEqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNjQ0MQ==", "bodyText": "The testmod should fail hard on first tick if fails to find the modded dim, we now startup a fresh dedicated server when building on GHA. Should be trivial to add", "url": "https://github.com/FabricMC/fabric/pull/1172#discussion_r527926441", "createdAt": "2020-11-20T19:30:24Z", "author": {"login": "modmuss50"}, "path": "fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/mixin/dimension/ServerBugfixMixin.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.dimension;\n+\n+import com.mojang.serialization.Lifecycle;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.ModifyVariable;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.nbt.Tag;\n+import net.minecraft.resource.DataPackSettings;\n+import net.minecraft.server.Main;\n+import net.minecraft.util.dynamic.RegistryOps;\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+import net.minecraft.world.gen.GeneratorOptions;\n+import net.minecraft.world.level.LevelInfo;\n+import net.minecraft.world.level.LevelProperties;\n+import net.minecraft.world.level.storage.LevelStorage;\n+\n+/**\n+ * This Mixin aims to solve a Minecraft Vanilla bug where datapacks are ignored during creation of the\n+ * initial LevelProperties when a dedicated server creates a completely new level.\n+ *\n+ * <p>This also includes the datapacks of loaded Fabric mods, and results in modded dimensions only\n+ * being available after restarting the server, once the world has been created.\n+ *\n+ * <p>This Mixin aims to solve this problem by saving and loading the level.dat file once, after\n+ * a new set of level properties is created. This will apply the same logic as reloading the\n+ * level.dat after a restart, now including all datapack dimensions.\n+ *\n+ * <p>See https://bugs.mojang.com/browse/MC-195468 for a related bug report.\n+ *\n+ * <p>In 1.17: Retest if this bug still occurs without this Mixin by launching a dedicated server with the\n+ * dimension testmod, and no world directory. If the dimension is available (i.e. in /execute in, or via\n+ * the testmod's commands), then the bug is fixed and this Mixin can be removed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac427e54ca53a33c45ad1b988c7431b3a33daf99"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01e3b371639db01b11f8af20cbc127ad27dd30e7", "author": {"user": {"login": "Waterpicker", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/01e3b371639db01b11f8af20cbc127ad27dd30e7", "committedDate": "2020-11-21T11:09:09Z", "message": "Added automatic testing testmod feature."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84ae37ba8e5ad692cb28681fb508260b30b080cc", "author": {"user": {"login": "Waterpicker", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/84ae37ba8e5ad692cb28681fb508260b30b080cc", "committedDate": "2020-11-21T11:15:58Z", "message": "...Removed unused imports..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1OTU5MTMx", "url": "https://github.com/FabricMC/fabric/pull/1172#pullrequestreview-535959131", "createdAt": "2020-11-21T11:15:49Z", "commit": {"oid": "01e3b371639db01b11f8af20cbc127ad27dd30e7"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMToxNTo0OVrOH3tx_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMToxODozNlrOH3ty1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE4MzgwNA==", "bodyText": "Please place the lifecycle events dependencies under the testmodCompile configuration?\nThat is because only the testmod depends on the lifecycle events.", "url": "https://github.com/FabricMC/fabric/pull/1172#discussion_r528183804", "createdAt": "2020-11-21T11:15:49Z", "author": {"login": "i509VCB"}, "path": "fabric-dimensions-v1/build.gradle", "diffHunk": "@@ -9,5 +9,6 @@ dependencies {\n moduleDependencies(project, [\n \t\t'fabric-api-base',\n \t\t'fabric-networking-v0',\n-\t\t'fabric-registry-sync-v0'\n+\t\t'fabric-registry-sync-v0',\n+\t\t'fabric-lifecycle-events-v1'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01e3b371639db01b11f8af20cbc127ad27dd30e7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE4MzgxNQ==", "bodyText": "I believe we can drop networking and registry sync as dependencies.", "url": "https://github.com/FabricMC/fabric/pull/1172#discussion_r528183815", "createdAt": "2020-11-21T11:16:05Z", "author": {"login": "i509VCB"}, "path": "fabric-dimensions-v1/build.gradle", "diffHunk": "@@ -9,5 +9,6 @@ dependencies {\n moduleDependencies(project, [\n \t\t'fabric-api-base',\n \t\t'fabric-networking-v0',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01e3b371639db01b11f8af20cbc127ad27dd30e7"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE4NDAyMQ==", "bodyText": "double space between throw and new. Likely to fail checkstyle", "url": "https://github.com/FabricMC/fabric/pull/1172#discussion_r528184021", "createdAt": "2020-11-21T11:18:36Z", "author": {"login": "i509VCB"}, "path": "fabric-dimensions-v1/src/testmod/java/net/fabricmc/fabric/test/dimension/FabricDimensionTest.java", "diffHunk": "@@ -65,6 +70,37 @@ public void onInitialize() {\n \n \t\tWORLD_KEY = RegistryKey.of(Registry.DIMENSION, new Identifier(\"fabric_dimension\", \"void\"));\n \n+\t\tServerLifecycleEvents.SERVER_STARTED.register(server -> {\n+\t\t\tServerWorld overworld = server.getWorld(World.OVERWORLD);\n+\t\t\tServerWorld world = server.getWorld(WORLD_KEY);\n+\n+\t\t\tif (world == null) {\n+\t\t\t\tthrow new AssertionError(\"Test world doesn't exist.\");\n+\t\t\t}\n+\n+\t\t\tEntity entity = COW.create(overworld);\n+\n+\t\t\tif(!entity.world.getRegistryKey().equals(World.OVERWORLD)) {\n+\t\t\t\tthrow  new AssertionError(\"Entity starting world isn't the overworld\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01e3b371639db01b11f8af20cbc127ad27dd30e7"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "418f4c806293675efc70ea8d7490ec0f06335aa4", "author": {"user": {"login": "Waterpicker", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/418f4c806293675efc70ea8d7490ec0f06335aa4", "committedDate": "2020-11-21T11:20:15Z", "message": "And other stuff the auto style system complains about..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26f3974f8b88456575591350123ed9e41900b85d", "author": {"user": {"login": "Waterpicker", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/26f3974f8b88456575591350123ed9e41900b85d", "committedDate": "2020-11-21T11:29:07Z", "message": "..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b819d1a98fbdc9d34957cdbf8871046d5e616a73", "author": {"user": {"login": "Waterpicker", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/b819d1a98fbdc9d34957cdbf8871046d5e616a73", "committedDate": "2020-11-21T12:49:09Z", "message": "Drop Networking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1OTY1NTEx", "url": "https://github.com/FabricMC/fabric/pull/1172#pullrequestreview-535965511", "createdAt": "2020-11-21T13:12:15Z", "commit": {"oid": "b819d1a98fbdc9d34957cdbf8871046d5e616a73"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97740e6134400f6e1c826400cb9702b66b39653c", "author": {"user": {"login": "Waterpicker", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/97740e6134400f6e1c826400cb9702b66b39653c", "committedDate": "2020-11-21T16:08:24Z", "message": "Completed suggested changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2290756b6fdb7636fb00d6f606e8eb01dc4445c1", "author": {"user": {"login": "Waterpicker", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/2290756b6fdb7636fb00d6f606e8eb01dc4445c1", "committedDate": "2020-11-21T17:36:43Z", "message": "Revert \"Completed suggested changes.\"\n\nThis reverts commit 97740e6134400f6e1c826400cb9702b66b39653c."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8075f068993ef46055663ad0a7a03ef0a7b93c5", "author": {"user": {"login": "Waterpicker", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/f8075f068993ef46055663ad0a7a03ef0a7b93c5", "committedDate": "2020-11-22T04:41:42Z", "message": "Did requested changes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MDI4ODk5", "url": "https://github.com/FabricMC/fabric/pull/1172#pullrequestreview-536028899", "createdAt": "2020-11-22T04:42:26Z", "commit": {"oid": "f8075f068993ef46055663ad0a7a03ef0a7b93c5"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwNDo0MjoyNlrOH3zv1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwNDo0MjoyNlrOH3zv1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4MTU1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \ttestmodCompile project(path: 'fabric-lifecycle-events-v1', configurations: 'dev')\n          \n          \n            \n            \ttestmodCompile project(path: ':fabric-lifecycle-events-v1', configurations: 'dev')", "url": "https://github.com/FabricMC/fabric/pull/1172#discussion_r528281557", "createdAt": "2020-11-22T04:42:26Z", "author": {"login": "i509VCB"}, "path": "fabric-dimensions-v1/build.gradle", "diffHunk": "@@ -3,10 +3,10 @@ version = getSubprojectVersion(project, \"1.0.0\")\n \n dependencies {\n \ttestmodCompile project(path: ':fabric-command-api-v1', configuration: 'dev')\n+\ttestmodCompile project(path: ':fabric-resource-loader-v0', configuration: 'dev')\n+\ttestmodCompile project(path: 'fabric-lifecycle-events-v1', configurations: 'dev')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8075f068993ef46055663ad0a7a03ef0a7b93c5"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61ce4c7f35f6e272ce8258c61da4a9bce4222435", "author": {"user": {"login": "Waterpicker", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/61ce4c7f35f6e272ce8258c61da4a9bce4222435", "committedDate": "2020-11-22T04:45:51Z", "message": "Forgot colon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd8f3bda305fbc20ed502137ed0533c1776a9f96", "author": {"user": {"login": "Waterpicker", "name": null}}, "url": "https://github.com/FabricMC/fabric/commit/cd8f3bda305fbc20ed502137ed0533c1776a9f96", "committedDate": "2020-11-22T04:58:59Z", "message": "Turn plural to singular"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MDUyMTE2", "url": "https://github.com/FabricMC/fabric/pull/1172#pullrequestreview-536052116", "createdAt": "2020-11-22T11:24:07Z", "commit": {"oid": "cd8f3bda305fbc20ed502137ed0533c1776a9f96"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMToyNDowN1rOH32JhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMToyNDowN1rOH32JhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyMDkwMQ==", "bodyText": "I'm not sure if this should really be in the dimensions API, this would rather fit in resource-loader as it doesn't affect only the worldgen but any datapack on world creation as the description states, so in theory this also affects tags, functions and more.", "url": "https://github.com/FabricMC/fabric/pull/1172#discussion_r528320901", "createdAt": "2020-11-22T11:24:07Z", "author": {"login": "LambdAurora"}, "path": "fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/mixin/dimension/ServerBugfixMixin.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.dimension;\n+\n+import com.mojang.serialization.Lifecycle;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.ModifyVariable;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.nbt.Tag;\n+import net.minecraft.resource.DataPackSettings;\n+import net.minecraft.server.Main;\n+import net.minecraft.util.dynamic.RegistryOps;\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+import net.minecraft.world.gen.GeneratorOptions;\n+import net.minecraft.world.level.LevelInfo;\n+import net.minecraft.world.level.LevelProperties;\n+import net.minecraft.world.level.storage.LevelStorage;\n+\n+/**\n+ * This Mixin aims to solve a Minecraft Vanilla bug where datapacks are ignored during creation of the\n+ * initial LevelProperties when a dedicated server creates a completely new level.\n+ *\n+ * <p>This also includes the datapacks of loaded Fabric mods, and results in modded dimensions only\n+ * being available after restarting the server, once the world has been created.\n+ *\n+ * <p>This Mixin aims to solve this problem by saving and loading the level.dat file once, after\n+ * a new set of level properties is created. This will apply the same logic as reloading the\n+ * level.dat after a restart, now including all datapack dimensions.\n+ *\n+ * <p>See https://bugs.mojang.com/browse/MC-195468 for a related bug report.\n+ *\n+ * <p>In 1.17: Retest if this bug still occurs without this Mixin by launching a dedicated server with the\n+ * dimension testmod, and no world directory. If the dimension is available (i.e. in /execute in, or via\n+ * the testmod's commands), then the bug is fixed and this Mixin can be removed.\n+ */\n+@Mixin(value = Main.class, remap = false)\n+public class ServerBugfixMixin {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd8f3bda305fbc20ed502137ed0533c1776a9f96"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3486, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}