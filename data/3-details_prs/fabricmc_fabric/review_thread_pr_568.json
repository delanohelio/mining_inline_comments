{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMjQyMzcy", "number": 568, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzoyMzozMVrODzbuAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzowNjoxM1rODze9Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjU4MTEzOnYy", "diffSide": "RIGHT", "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/entity/attribute/DefaultAttributeRegistryMixin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzoyMzozMVrOGH6c-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODowNTo0OFrOGH67_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1MDkwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t@Final\n          \n          \n            \n            \t@Mutable\n          \n          \n            \n            \t@Mutable\n          \n      \n    \n    \n  \n\n@Final is unnecessary and has no purpose when @Mutable is present.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410950905", "createdAt": "2020-04-19T17:23:31Z", "author": {"login": "Earthcomputer"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/entity/attribute/DefaultAttributeRegistryMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Mutable;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.entity.attribute.DefaultAttributeRegistry;\n+\n+import net.fabricmc.fabric.impl.entity.attribute.FabricEntityAttributeRegistry;\n+\n+@Mixin(DefaultAttributeRegistry.class)\n+public abstract class DefaultAttributeRegistryMixin {\n+\t@Shadow\n+\t@Final\n+\t@Mutable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1ODA3MQ==", "bodyText": "Uh, isn't mixin javadoc saying Use in conjunction with {@link Final}?", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410958071", "createdAt": "2020-04-19T18:01:17Z", "author": {"login": "liach"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/entity/attribute/DefaultAttributeRegistryMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Mutable;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.entity.attribute.DefaultAttributeRegistry;\n+\n+import net.fabricmc.fabric.impl.entity.attribute.FabricEntityAttributeRegistry;\n+\n+@Mixin(DefaultAttributeRegistry.class)\n+public abstract class DefaultAttributeRegistryMixin {\n+\t@Shadow\n+\t@Final\n+\t@Mutable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1MDkwNQ=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1ODg0NQ==", "bodyText": "Humm, I have never used it with @Final, but yeah you should go with what the docs say.\nRip now I have a bunch of unspecified behaviour to fix :D", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410958845", "createdAt": "2020-04-19T18:05:48Z", "author": {"login": "Earthcomputer"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/entity/attribute/DefaultAttributeRegistryMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Mutable;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.entity.attribute.DefaultAttributeRegistry;\n+\n+import net.fabricmc.fabric.impl.entity.attribute.FabricEntityAttributeRegistry;\n+\n+@Mixin(DefaultAttributeRegistry.class)\n+public abstract class DefaultAttributeRegistryMixin {\n+\t@Shadow\n+\t@Final\n+\t@Mutable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1MDkwNQ=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjYxMTc5OnYy", "diffSide": "RIGHT", "path": "fabric-entity-attribute-api-v1/build.gradle", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzo0MTo0MlrOGH6q3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzowNTowNVrOGH-J9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1NDQ2Mg==", "bodyText": "I assume this will be bumped to 1.0.0 during the pre releases", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410954462", "createdAt": "2020-04-19T17:41:42Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/build.gradle", "diffHunk": "@@ -0,0 +1,2 @@\n+archivesBaseName = \"fabric-entity-attribute-api-v1\"\n+version = getSubprojectVersion(project, \"0.1.0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1Nzc5Mg==", "bodyText": "You see the added class is @Deprecated, so why 1.0.0 if this api is subject to change", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410957792", "createdAt": "2020-04-19T17:59:40Z", "author": {"login": "liach"}, "path": "fabric-entity-attribute-api-v1/build.gradle", "diffHunk": "@@ -0,0 +1,2 @@\n+archivesBaseName = \"fabric-entity-attribute-api-v1\"\n+version = getSubprojectVersion(project, \"0.1.0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1NDQ2Mg=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1Nzk4Mg==", "bodyText": "You didn't read the whole message lol. I said this should be bumped when we reach prereleases where this will be mostly concrete.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410957982", "createdAt": "2020-04-19T18:00:59Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/build.gradle", "diffHunk": "@@ -0,0 +1,2 @@\n+archivesBaseName = \"fabric-entity-attribute-api-v1\"\n+version = getSubprojectVersion(project, \"0.1.0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1NDQ2Mg=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxMTU3NA==", "bodyText": "I still want to use 1.0.0 everywhere, experimental doesn't quite mean the same as wip", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411011574", "createdAt": "2020-04-19T23:05:05Z", "author": {"login": "sfPlayer1"}, "path": "fabric-entity-attribute-api-v1/build.gradle", "diffHunk": "@@ -0,0 +1,2 @@\n+archivesBaseName = \"fabric-entity-attribute-api-v1\"\n+version = getSubprojectVersion(project, \"0.1.0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1NDQ2Mg=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjYxMzMzOnYy", "diffSide": "RIGHT", "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzo0Mjo1MlrOGH6rkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODowMjozMFrOGH65mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1NDY0Mw==", "bodyText": "It's 2020 @sfPlayer1 @modmuss50 we need to bump the license year.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410954643", "createdAt": "2020-04-19T17:42:52Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1ODEwNw==", "bodyText": "Not my fault, and this pr won't go out of scope.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410958107", "createdAt": "2020-04-19T18:01:38Z", "author": {"login": "liach"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1NDY0Mw=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1ODIzMw==", "bodyText": "Yes it isn't really your issue, but player and modmuss need to bump this across the whole project.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410958233", "createdAt": "2020-04-19T18:02:30Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1NDY0Mw=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjczNTA3OnYy", "diffSide": "RIGHT", "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/EntityAttributeRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTowMjozM1rOGH7izA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTowMjozM1rOGH7izA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2ODc4MA==", "bodyText": "Maybe mention that one can check if a registration already exists using DefaultAttributeRegistry#hasDefinitionFor(EntityType).", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410968780", "createdAt": "2020-04-19T19:02:33Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/EntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import java.util.function.Supplier;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+\n+import net.fabricmc.fabric.impl.entity.attribute.FabricEntityAttributeRegistry;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * @see net.minecraft.entity.attribute.DefaultAttributeRegistry\n+ * @deprecated Vanilla snapshot feature, subject to vanilla change\n+ */\n+@Deprecated\n+public interface EntityAttributeRegistry {\n+\t/**\n+\t * The entity attribute registry provided by the Fabric API.\n+\t */\n+\tEntityAttributeRegistry INSTANCE = FabricEntityAttributeRegistry.INSTANCE;\n+\n+\t/**\n+\t * Registers a default attribute for a type of living entity.\n+\t *\n+\t * <p>It can be used in a fashion similar to this:\n+\t * <blockquote><pre>\n+\t * EntityAttributeRegistry.INSTANCE.register(type, LivingEntity::createLivingAttributes);\n+\t * </pre></blockquote>\n+\t * </p>\n+\t *\n+\t * <p>If a registration overrides another, a log message will be emitted./p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjczNjc0OnYy", "diffSide": "RIGHT", "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTowMzoyMVrOGH7jgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTowNTozN1rOGH7lAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2ODk2Mw==", "bodyText": "I like the way BlockRenderLayerMapImpl uses BiConsumer's to handle early and late registrations. Its basicly the same as what you have, migt just be a bit cleaner.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410968963", "createdAt": "2020-04-19T19:03:21Z", "author": {"login": "modmuss50"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.entity.attribute.v1.EntityAttributeRegistry;\n+\n+public final class FabricEntityAttributeRegistry implements EntityAttributeRegistry {\n+\tpublic static final FabricEntityAttributeRegistry INSTANCE = new FabricEntityAttributeRegistry();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> pendingRegistrations = new HashMap<>();\n+\tprivate Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> registrations;\n+\n+\t@Override\n+\tpublic void register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier) {\n+\t\tif (this.registrations == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2OTM0Ng==", "bodyText": "It may help cut down the number of times the same log is also printed", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410969346", "createdAt": "2020-04-19T19:05:37Z", "author": {"login": "modmuss50"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.entity.attribute.v1.EntityAttributeRegistry;\n+\n+public final class FabricEntityAttributeRegistry implements EntityAttributeRegistry {\n+\tpublic static final FabricEntityAttributeRegistry INSTANCE = new FabricEntityAttributeRegistry();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> pendingRegistrations = new HashMap<>();\n+\tprivate Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> registrations;\n+\n+\t@Override\n+\tpublic void register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier) {\n+\t\tif (this.registrations == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2ODk2Mw=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mjc0MDQ1OnYy", "diffSide": "RIGHT", "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTowNTo1MVrOGH7lMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTowNTo1MVrOGH7lMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2OTM5NQ==", "bodyText": "should this be allowed? is there a reason a mod should do this?", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410969395", "createdAt": "2020-04-19T19:05:51Z", "author": {"login": "modmuss50"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.entity.attribute.v1.EntityAttributeRegistry;\n+\n+public final class FabricEntityAttributeRegistry implements EntityAttributeRegistry {\n+\tpublic static final FabricEntityAttributeRegistry INSTANCE = new FabricEntityAttributeRegistry();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> pendingRegistrations = new HashMap<>();\n+\tprivate Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> registrations;\n+\n+\t@Override\n+\tpublic void register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier) {\n+\t\tif (this.registrations == null) {\n+\t\t\tif (this.pendingRegistrations.put(type, builderSupplier) != null) {\n+\t\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mjc0MTc1OnYy", "diffSide": "RIGHT", "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTowNjozNlrOGH7lxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOToyMToyMFrOGH7wxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2OTU0MQ==", "bodyText": "I would just mention the Identifier of the entity in the log. Also EntityType does not have a toString method, so the log would show Overriding existing registration for entity type EntityType@2673ab (id \"randommobs:giant\") or something like that/", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410969541", "createdAt": "2020-04-19T19:06:36Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.entity.attribute.v1.EntityAttributeRegistry;\n+\n+public final class FabricEntityAttributeRegistry implements EntityAttributeRegistry {\n+\tpublic static final FabricEntityAttributeRegistry INSTANCE = new FabricEntityAttributeRegistry();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> pendingRegistrations = new HashMap<>();\n+\tprivate Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> registrations;\n+\n+\t@Override\n+\tpublic void register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier) {\n+\t\tif (this.registrations == null) {\n+\t\t\tif (this.pendingRegistrations.put(type, builderSupplier) != null) {\n+\t\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));\n+\t\t\t}\n+\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (this.registrations.put(type, builderSupplier.get().build()) != null) {\n+\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3MDUyMA==", "bodyText": "Note that Registry.ENTITY_TYPE.getId() may return null", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410970520", "createdAt": "2020-04-19T19:11:57Z", "author": {"login": "liach"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.entity.attribute.v1.EntityAttributeRegistry;\n+\n+public final class FabricEntityAttributeRegistry implements EntityAttributeRegistry {\n+\tpublic static final FabricEntityAttributeRegistry INSTANCE = new FabricEntityAttributeRegistry();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> pendingRegistrations = new HashMap<>();\n+\tprivate Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> registrations;\n+\n+\t@Override\n+\tpublic void register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier) {\n+\t\tif (this.registrations == null) {\n+\t\t\tif (this.pendingRegistrations.put(type, builderSupplier) != null) {\n+\t\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));\n+\t\t\t}\n+\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (this.registrations.put(type, builderSupplier.get().build()) != null) {\n+\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2OTU0MQ=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3MDc0MA==", "bodyText": "In that case maybe mention the entity type had no registration. Anyways people should be registering their entities before assigning attributes to them.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410970740", "createdAt": "2020-04-19T19:13:07Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.entity.attribute.v1.EntityAttributeRegistry;\n+\n+public final class FabricEntityAttributeRegistry implements EntityAttributeRegistry {\n+\tpublic static final FabricEntityAttributeRegistry INSTANCE = new FabricEntityAttributeRegistry();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> pendingRegistrations = new HashMap<>();\n+\tprivate Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> registrations;\n+\n+\t@Override\n+\tpublic void register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier) {\n+\t\tif (this.registrations == null) {\n+\t\t\tif (this.pendingRegistrations.put(type, builderSupplier) != null) {\n+\t\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));\n+\t\t\t}\n+\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (this.registrations.put(type, builderSupplier.get().build()) != null) {\n+\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2OTU0MQ=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3MjM1Nw==", "bodyText": "Done, seems vanilla assumes entity type always has an id in registry as well (see EntityType#getTranslationKey), so it's safe for us to do the same.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410972357", "createdAt": "2020-04-19T19:21:20Z", "author": {"login": "liach"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.entity.attribute.v1.EntityAttributeRegistry;\n+\n+public final class FabricEntityAttributeRegistry implements EntityAttributeRegistry {\n+\tpublic static final FabricEntityAttributeRegistry INSTANCE = new FabricEntityAttributeRegistry();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> pendingRegistrations = new HashMap<>();\n+\tprivate Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> registrations;\n+\n+\t@Override\n+\tpublic void register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier) {\n+\t\tif (this.registrations == null) {\n+\t\t\tif (this.pendingRegistrations.put(type, builderSupplier) != null) {\n+\t\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));\n+\t\t\t}\n+\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (this.registrations.put(type, builderSupplier.get().build()) != null) {\n+\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2OTU0MQ=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mjc0MjM2OnYy", "diffSide": "RIGHT", "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTowNjo1OFrOGH7mCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOToyMjoyMFrOGH7xZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2OTYxMQ==", "bodyText": "Similarly to above mention of logging here.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410969611", "createdAt": "2020-04-19T19:06:58Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.entity.attribute.v1.EntityAttributeRegistry;\n+\n+public final class FabricEntityAttributeRegistry implements EntityAttributeRegistry {\n+\tpublic static final FabricEntityAttributeRegistry INSTANCE = new FabricEntityAttributeRegistry();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> pendingRegistrations = new HashMap<>();\n+\tprivate Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> registrations;\n+\n+\t@Override\n+\tpublic void register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier) {\n+\t\tif (this.registrations == null) {\n+\t\t\tif (this.pendingRegistrations.put(type, builderSupplier) != null) {\n+\t\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));\n+\t\t\t}\n+\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (this.registrations.put(type, builderSupplier.get().build()) != null) {\n+\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));\n+\t\t}\n+\t}\n+\n+\tpublic void initMap(Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> map) {\n+\t\tfor (Map.Entry<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> entry : this.pendingRegistrations.entrySet()) {\n+\t\t\tEntityType<? extends LivingEntity> type = entry.getKey();\n+\n+\t\t\tif (map.put(type, entry.getValue().get().build()) != null) {\n+\t\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3MjUxOA==", "bodyText": "Done.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410972518", "createdAt": "2020-04-19T19:22:20Z", "author": {"login": "liach"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/entity/attribute/FabricEntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.entity.attribute;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.entity.attribute.v1.EntityAttributeRegistry;\n+\n+public final class FabricEntityAttributeRegistry implements EntityAttributeRegistry {\n+\tpublic static final FabricEntityAttributeRegistry INSTANCE = new FabricEntityAttributeRegistry();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> pendingRegistrations = new HashMap<>();\n+\tprivate Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> registrations;\n+\n+\t@Override\n+\tpublic void register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier) {\n+\t\tif (this.registrations == null) {\n+\t\t\tif (this.pendingRegistrations.put(type, builderSupplier) != null) {\n+\t\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));\n+\t\t\t}\n+\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (this.registrations.put(type, builderSupplier.get().build()) != null) {\n+\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));\n+\t\t}\n+\t}\n+\n+\tpublic void initMap(Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> map) {\n+\t\tfor (Map.Entry<EntityType<? extends LivingEntity>, Supplier<DefaultAttributeContainer.Builder>> entry : this.pendingRegistrations.entrySet()) {\n+\t\t\tEntityType<? extends LivingEntity> type = entry.getKey();\n+\n+\t\t\tif (map.put(type, entry.getValue().get().build()) != null) {\n+\t\t\t\tLOGGER.info(\"Overriding existing registration for entity type {} (id \\\"{}\\\")\", type, Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2OTYxMQ=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjgxNjI1OnYy", "diffSide": "RIGHT", "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/EntityAttributeRegistry.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTo1MTozOFrOGH8HDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDo1Njo0NVrOGH80TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3ODA2MQ==", "bodyText": "is there a reason behind the supplier?", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410978061", "createdAt": "2020-04-19T19:51:38Z", "author": {"login": "modmuss50"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/EntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import java.util.function.Supplier;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+\n+import net.fabricmc.fabric.impl.entity.attribute.FabricEntityAttributeRegistry;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * @see net.minecraft.entity.attribute.DefaultAttributeRegistry\n+ * @deprecated Vanilla snapshot feature, subject to vanilla change\n+ */\n+@Deprecated\n+public interface EntityAttributeRegistry {\n+\t/**\n+\t * The entity attribute registry provided by the Fabric API.\n+\t */\n+\tEntityAttributeRegistry INSTANCE = FabricEntityAttributeRegistry.INSTANCE;\n+\n+\t/**\n+\t * Registers a default attribute for a type of living entity.\n+\t *\n+\t * <p>It can be used in a fashion similar to this:\n+\t * <blockquote><pre>\n+\t * EntityAttributeRegistry.INSTANCE.register(type, LivingEntity::createLivingAttributes);\n+\t * </pre></blockquote>\n+\t * </p>\n+\t *\n+\t * <p>If a registration overrides another, a log message will be emitted./p>\n+\t *\n+\t * @param type            the entity type\n+\t * @param builderSupplier the supplier giving a builder that creates the default attribute\n+\t */\n+\tvoid register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4NzUwMQ==", "bodyText": "Just in case the DefaultAttributeRegistry class is not loaded when this attribute registry is called. Or we can make the attribute registry from fabric classload vanilla DefaultAttributeRegistry", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410987501", "createdAt": "2020-04-19T20:44:28Z", "author": {"login": "liach"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/EntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import java.util.function.Supplier;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+\n+import net.fabricmc.fabric.impl.entity.attribute.FabricEntityAttributeRegistry;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * @see net.minecraft.entity.attribute.DefaultAttributeRegistry\n+ * @deprecated Vanilla snapshot feature, subject to vanilla change\n+ */\n+@Deprecated\n+public interface EntityAttributeRegistry {\n+\t/**\n+\t * The entity attribute registry provided by the Fabric API.\n+\t */\n+\tEntityAttributeRegistry INSTANCE = FabricEntityAttributeRegistry.INSTANCE;\n+\n+\t/**\n+\t * Registers a default attribute for a type of living entity.\n+\t *\n+\t * <p>It can be used in a fashion similar to this:\n+\t * <blockquote><pre>\n+\t * EntityAttributeRegistry.INSTANCE.register(type, LivingEntity::createLivingAttributes);\n+\t * </pre></blockquote>\n+\t * </p>\n+\t *\n+\t * <p>If a registration overrides another, a log message will be emitted./p>\n+\t *\n+\t * @param type            the entity type\n+\t * @param builderSupplier the supplier giving a builder that creates the default attribute\n+\t */\n+\tvoid register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3ODA2MQ=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4OTM1MA==", "bodyText": "is there an issue with loading that sooner? or is this a solution looking for an issue?", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410989350", "createdAt": "2020-04-19T20:54:46Z", "author": {"login": "modmuss50"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/EntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import java.util.function.Supplier;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+\n+import net.fabricmc.fabric.impl.entity.attribute.FabricEntityAttributeRegistry;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * @see net.minecraft.entity.attribute.DefaultAttributeRegistry\n+ * @deprecated Vanilla snapshot feature, subject to vanilla change\n+ */\n+@Deprecated\n+public interface EntityAttributeRegistry {\n+\t/**\n+\t * The entity attribute registry provided by the Fabric API.\n+\t */\n+\tEntityAttributeRegistry INSTANCE = FabricEntityAttributeRegistry.INSTANCE;\n+\n+\t/**\n+\t * Registers a default attribute for a type of living entity.\n+\t *\n+\t * <p>It can be used in a fashion similar to this:\n+\t * <blockquote><pre>\n+\t * EntityAttributeRegistry.INSTANCE.register(type, LivingEntity::createLivingAttributes);\n+\t * </pre></blockquote>\n+\t * </p>\n+\t *\n+\t * <p>If a registration overrides another, a log message will be emitted./p>\n+\t *\n+\t * @param type            the entity type\n+\t * @param builderSupplier the supplier giving a builder that creates the default attribute\n+\t */\n+\tvoid register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3ODA2MQ=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4OTY0NQ==", "bodyText": "no issue, so I decided to simplify this whole thing", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r410989645", "createdAt": "2020-04-19T20:56:45Z", "author": {"login": "liach"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/EntityAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import java.util.function.Supplier;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+\n+import net.fabricmc.fabric.impl.entity.attribute.FabricEntityAttributeRegistry;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * @see net.minecraft.entity.attribute.DefaultAttributeRegistry\n+ * @deprecated Vanilla snapshot feature, subject to vanilla change\n+ */\n+@Deprecated\n+public interface EntityAttributeRegistry {\n+\t/**\n+\t * The entity attribute registry provided by the Fabric API.\n+\t */\n+\tEntityAttributeRegistry INSTANCE = FabricEntityAttributeRegistry.INSTANCE;\n+\n+\t/**\n+\t * Registers a default attribute for a type of living entity.\n+\t *\n+\t * <p>It can be used in a fashion similar to this:\n+\t * <blockquote><pre>\n+\t * EntityAttributeRegistry.INSTANCE.register(type, LivingEntity::createLivingAttributes);\n+\t * </pre></blockquote>\n+\t * </p>\n+\t *\n+\t * <p>If a registration overrides another, a log message will be emitted./p>\n+\t *\n+\t * @param type            the entity type\n+\t * @param builderSupplier the supplier giving a builder that creates the default attribute\n+\t */\n+\tvoid register(EntityType<? extends LivingEntity> type, Supplier<DefaultAttributeContainer.Builder> builderSupplier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3ODA2MQ=="}, "originalCommit": {"oid": "949576866f71df1a493b55764c08737538c499d7"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzA0Njc5OnYy", "diffSide": "RIGHT", "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/FabricDefaultAttributeRegistry.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjoyMDowN1rOGH9tbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjo0NDoyOFrOGH99Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNDI3MQ==", "bodyText": "This is looking a lot cleaner now. Is there ever a case that this would be ok? if not id just crash.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411004271", "createdAt": "2020-04-19T22:20:07Z", "author": {"login": "modmuss50"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/FabricDefaultAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.mixin.entity.attribute.DefaultAttributeRegistryAccessor;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * @see net.minecraft.entity.attribute.DefaultAttributeRegistry\n+ * @deprecated Vanilla snapshot feature, subject to vanilla change\n+ */\n+@Deprecated\n+public final class FabricDefaultAttributeRegistry {\n+\t/**\n+\t * Private logger, not exposed.\n+\t */\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\n+\t/**\n+\t * Registers a default attribute for a type of living entity.\n+\t *\n+\t * <p>It can be used in a fashion similar to this:\n+\t * <blockquote><pre>\n+\t * EntityAttributeRegistry.INSTANCE.register(type, LivingEntity.createLivingAttributes());\n+\t * </pre></blockquote>\n+\t * </p>\n+\t *\n+\t * <p>If a registration overrides another, a log message will be emitted. Existing registrations\n+\t * can be checked at {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#hasDefinitionFor(EntityType)}.</p>\n+\t *\n+\t * @param type    the entity type\n+\t * @param builder the builder that creates the default attribute\n+\t */\n+\tpublic static void register(EntityType<? extends LivingEntity> type, DefaultAttributeContainer.Builder builder) {\n+\t\tif (DefaultAttributeRegistryAccessor.getRegistry().put(type, builder.build()) != null) {\n+\t\t\tLOGGER.info(\"Overriding existing registration for entity type {}\", Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNzI5MQ==", "bodyText": "This should be fine if other mods changes default values from other builders,\ne.g. they can do ZombieEntity.createZombieAttributes().add(movementSpeed, 2.0) etc to override default values. I see that some mods may need to override such values.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411007291", "createdAt": "2020-04-19T22:38:49Z", "author": {"login": "liach"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/FabricDefaultAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.mixin.entity.attribute.DefaultAttributeRegistryAccessor;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * @see net.minecraft.entity.attribute.DefaultAttributeRegistry\n+ * @deprecated Vanilla snapshot feature, subject to vanilla change\n+ */\n+@Deprecated\n+public final class FabricDefaultAttributeRegistry {\n+\t/**\n+\t * Private logger, not exposed.\n+\t */\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\n+\t/**\n+\t * Registers a default attribute for a type of living entity.\n+\t *\n+\t * <p>It can be used in a fashion similar to this:\n+\t * <blockquote><pre>\n+\t * EntityAttributeRegistry.INSTANCE.register(type, LivingEntity.createLivingAttributes());\n+\t * </pre></blockquote>\n+\t * </p>\n+\t *\n+\t * <p>If a registration overrides another, a log message will be emitted. Existing registrations\n+\t * can be checked at {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#hasDefinitionFor(EntityType)}.</p>\n+\t *\n+\t * @param type    the entity type\n+\t * @param builder the builder that creates the default attribute\n+\t */\n+\tpublic static void register(EntityType<? extends LivingEntity> type, DefaultAttributeContainer.Builder builder) {\n+\t\tif (DefaultAttributeRegistryAccessor.getRegistry().put(type, builder.build()) != null) {\n+\t\t\tLOGGER.info(\"Overriding existing registration for entity type {}\", Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNDI3MQ=="}, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNzQ2Nw==", "bodyText": "Should it warn if this happens then? If its inteneded it shouldnt warn about it, if its not it should crash.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411007467", "createdAt": "2020-04-19T22:39:45Z", "author": {"login": "modmuss50"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/FabricDefaultAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.mixin.entity.attribute.DefaultAttributeRegistryAccessor;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * @see net.minecraft.entity.attribute.DefaultAttributeRegistry\n+ * @deprecated Vanilla snapshot feature, subject to vanilla change\n+ */\n+@Deprecated\n+public final class FabricDefaultAttributeRegistry {\n+\t/**\n+\t * Private logger, not exposed.\n+\t */\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\n+\t/**\n+\t * Registers a default attribute for a type of living entity.\n+\t *\n+\t * <p>It can be used in a fashion similar to this:\n+\t * <blockquote><pre>\n+\t * EntityAttributeRegistry.INSTANCE.register(type, LivingEntity.createLivingAttributes());\n+\t * </pre></blockquote>\n+\t * </p>\n+\t *\n+\t * <p>If a registration overrides another, a log message will be emitted. Existing registrations\n+\t * can be checked at {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#hasDefinitionFor(EntityType)}.</p>\n+\t *\n+\t * @param type    the entity type\n+\t * @param builder the builder that creates the default attribute\n+\t */\n+\tpublic static void register(EntityType<? extends LivingEntity> type, DefaultAttributeContainer.Builder builder) {\n+\t\tif (DefaultAttributeRegistryAccessor.getRegistry().put(type, builder.build()) != null) {\n+\t\t\tLOGGER.info(\"Overriding existing registration for entity type {}\", Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNDI3MQ=="}, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNzU0Mg==", "bodyText": "putting it in the debug log might not be a bad idea, I dont think its needed at the info level.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411007542", "createdAt": "2020-04-19T22:40:07Z", "author": {"login": "modmuss50"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/FabricDefaultAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.mixin.entity.attribute.DefaultAttributeRegistryAccessor;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * @see net.minecraft.entity.attribute.DefaultAttributeRegistry\n+ * @deprecated Vanilla snapshot feature, subject to vanilla change\n+ */\n+@Deprecated\n+public final class FabricDefaultAttributeRegistry {\n+\t/**\n+\t * Private logger, not exposed.\n+\t */\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\n+\t/**\n+\t * Registers a default attribute for a type of living entity.\n+\t *\n+\t * <p>It can be used in a fashion similar to this:\n+\t * <blockquote><pre>\n+\t * EntityAttributeRegistry.INSTANCE.register(type, LivingEntity.createLivingAttributes());\n+\t * </pre></blockquote>\n+\t * </p>\n+\t *\n+\t * <p>If a registration overrides another, a log message will be emitted. Existing registrations\n+\t * can be checked at {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#hasDefinitionFor(EntityType)}.</p>\n+\t *\n+\t * @param type    the entity type\n+\t * @param builder the builder that creates the default attribute\n+\t */\n+\tpublic static void register(EntityType<? extends LivingEntity> type, DefaultAttributeContainer.Builder builder) {\n+\t\tif (DefaultAttributeRegistryAccessor.getRegistry().put(type, builder.build()) != null) {\n+\t\t\tLOGGER.info(\"Overriding existing registration for entity type {}\", Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNDI3MQ=="}, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwODI3NQ==", "bodyText": "Done.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411008275", "createdAt": "2020-04-19T22:44:28Z", "author": {"login": "liach"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/FabricDefaultAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.mixin.entity.attribute.DefaultAttributeRegistryAccessor;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * @see net.minecraft.entity.attribute.DefaultAttributeRegistry\n+ * @deprecated Vanilla snapshot feature, subject to vanilla change\n+ */\n+@Deprecated\n+public final class FabricDefaultAttributeRegistry {\n+\t/**\n+\t * Private logger, not exposed.\n+\t */\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\n+\t/**\n+\t * Registers a default attribute for a type of living entity.\n+\t *\n+\t * <p>It can be used in a fashion similar to this:\n+\t * <blockquote><pre>\n+\t * EntityAttributeRegistry.INSTANCE.register(type, LivingEntity.createLivingAttributes());\n+\t * </pre></blockquote>\n+\t * </p>\n+\t *\n+\t * <p>If a registration overrides another, a log message will be emitted. Existing registrations\n+\t * can be checked at {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#hasDefinitionFor(EntityType)}.</p>\n+\t *\n+\t * @param type    the entity type\n+\t * @param builder the builder that creates the default attribute\n+\t */\n+\tpublic static void register(EntityType<? extends LivingEntity> type, DefaultAttributeContainer.Builder builder) {\n+\t\tif (DefaultAttributeRegistryAccessor.getRegistry().put(type, builder.build()) != null) {\n+\t\t\tLOGGER.info(\"Overriding existing registration for entity type {}\", Registry.ENTITY_TYPE.getId(type));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNDI3MQ=="}, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzA1NzQwOnYy", "diffSide": "RIGHT", "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/entity/attribute/DefaultAttributeRegistryAccessor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjoyNzowMFrOGH9yKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzoxMDowNlrOGH-Njg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNTQ4MA==", "bodyText": "Hmm, do we have a consistent message for this type of dummy error across the whole api? I see we seem to have multiple cases of this across the place.\nOne idea I had was an instance of an exception that we should throw in the fabric-base-api so we only refer to one common message we know.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411005480", "createdAt": "2020-04-19T22:27:00Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/entity/attribute/DefaultAttributeRegistryAccessor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.entity.attribute;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.entity.attribute.DefaultAttributeRegistry;\n+\n+@Mixin(DefaultAttributeRegistry.class)\n+public interface DefaultAttributeRegistryAccessor {\n+\t@Accessor(\"DEFAULT_ATTRIBUTE_REGISTRY\")\n+\tstatic Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> getRegistry() {\n+\t\tthrow new AssertionError(\"mixin dummy\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNjk0Ng==", "bodyText": "I dont think it really needs its own exception, having them all the same would be nice, prob out of scope for this PR.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411006946", "createdAt": "2020-04-19T22:36:27Z", "author": {"login": "modmuss50"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/entity/attribute/DefaultAttributeRegistryAccessor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.entity.attribute;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.entity.attribute.DefaultAttributeRegistry;\n+\n+@Mixin(DefaultAttributeRegistry.class)\n+public interface DefaultAttributeRegistryAccessor {\n+\t@Accessor(\"DEFAULT_ATTRIBUTE_REGISTRY\")\n+\tstatic Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> getRegistry() {\n+\t\tthrow new AssertionError(\"mixin dummy\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNTQ4MA=="}, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNzQ4MA==", "bodyText": "One idea I had was an instance of an exception that we should throw in the fabric-base-api so we only refer to one common message we know.\n\nDo you mean that we should expose the standard thrown error in the base api? Cannot agree, this is more impl-oriented and isn't really useful", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411007480", "createdAt": "2020-04-19T22:39:54Z", "author": {"login": "liach"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/entity/attribute/DefaultAttributeRegistryAccessor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.entity.attribute;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.entity.attribute.DefaultAttributeRegistry;\n+\n+@Mixin(DefaultAttributeRegistry.class)\n+public interface DefaultAttributeRegistryAccessor {\n+\t@Accessor(\"DEFAULT_ATTRIBUTE_REGISTRY\")\n+\tstatic Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> getRegistry() {\n+\t\tthrow new AssertionError(\"mixin dummy\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNTQ4MA=="}, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxMjQ5NA==", "bodyText": "No standard error, I'd throw UnsupportedOperationException(\"dummy method, impl to be swapped by mixin\") or similar.", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411012494", "createdAt": "2020-04-19T23:10:06Z", "author": {"login": "sfPlayer1"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/entity/attribute/DefaultAttributeRegistryAccessor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.entity.attribute;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.entity.attribute.DefaultAttributeRegistry;\n+\n+@Mixin(DefaultAttributeRegistry.class)\n+public interface DefaultAttributeRegistryAccessor {\n+\t@Accessor(\"DEFAULT_ATTRIBUTE_REGISTRY\")\n+\tstatic Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> getRegistry() {\n+\t\tthrow new AssertionError(\"mixin dummy\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNTQ4MA=="}, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzA2NjA1OnYy", "diffSide": "RIGHT", "path": "fabric-entity-attribute-api-v1/src/main/resources/fabric.mod.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjozMzowNVrOGH91zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjo0MzowOVrOGH98Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNjQxMg==", "bodyText": "Maybe complete this description message?", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411006412", "createdAt": "2020-04-19T22:33:05Z", "author": {"login": "i509VCB"}, "path": "fabric-entity-attribute-api-v1/src/main/resources/fabric.mod.json", "diffHunk": "@@ -0,0 +1,26 @@\n+{\n+  \"schemaVersion\": 1,\n+  \"id\": \"fabric-entity-attribute-api-v1\",\n+  \"name\": \"Fabric Entity Attribute API (v1)\",\n+  \"version\": \"${version}\",\n+  \"environment\": \"*\",\n+  \"license\": \"Apache-2.0\",\n+  \"icon\": \"assets/fabric-entity-attribute-api-v1/icon.png\",\n+  \"contact\": {\n+    \"homepage\": \"https://fabricmc.net\",\n+    \"irc\": \"irc://irc.esper.net:6667/fabric\",\n+    \"issues\": \"https://github.com/FabricMC/fabric/issues\",\n+    \"sources\": \"https://github.com/FabricMC/fabric\"\n+  },\n+  \"authors\": [\n+    \"FabricMC\"\n+  ],\n+  \"depends\": {\n+    \"fabricloader\": \">=0.8.0\",\n+    \"minecraft\": \">=1.16-alpha.20.15.a\"\n+  },\n+  \"description\": \"Hooks for registering .\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNzUyOA==", "bodyText": "Yeah guess I forgot to update this", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411007528", "createdAt": "2020-04-19T22:40:06Z", "author": {"login": "liach"}, "path": "fabric-entity-attribute-api-v1/src/main/resources/fabric.mod.json", "diffHunk": "@@ -0,0 +1,26 @@\n+{\n+  \"schemaVersion\": 1,\n+  \"id\": \"fabric-entity-attribute-api-v1\",\n+  \"name\": \"Fabric Entity Attribute API (v1)\",\n+  \"version\": \"${version}\",\n+  \"environment\": \"*\",\n+  \"license\": \"Apache-2.0\",\n+  \"icon\": \"assets/fabric-entity-attribute-api-v1/icon.png\",\n+  \"contact\": {\n+    \"homepage\": \"https://fabricmc.net\",\n+    \"irc\": \"irc://irc.esper.net:6667/fabric\",\n+    \"issues\": \"https://github.com/FabricMC/fabric/issues\",\n+    \"sources\": \"https://github.com/FabricMC/fabric\"\n+  },\n+  \"authors\": [\n+    \"FabricMC\"\n+  ],\n+  \"depends\": {\n+    \"fabricloader\": \">=0.8.0\",\n+    \"minecraft\": \">=1.16-alpha.20.15.a\"\n+  },\n+  \"description\": \"Hooks for registering .\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNjQxMg=="}, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwODAyNw==", "bodyText": "Done, thanks", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411008027", "createdAt": "2020-04-19T22:43:09Z", "author": {"login": "liach"}, "path": "fabric-entity-attribute-api-v1/src/main/resources/fabric.mod.json", "diffHunk": "@@ -0,0 +1,26 @@\n+{\n+  \"schemaVersion\": 1,\n+  \"id\": \"fabric-entity-attribute-api-v1\",\n+  \"name\": \"Fabric Entity Attribute API (v1)\",\n+  \"version\": \"${version}\",\n+  \"environment\": \"*\",\n+  \"license\": \"Apache-2.0\",\n+  \"icon\": \"assets/fabric-entity-attribute-api-v1/icon.png\",\n+  \"contact\": {\n+    \"homepage\": \"https://fabricmc.net\",\n+    \"irc\": \"irc://irc.esper.net:6667/fabric\",\n+    \"issues\": \"https://github.com/FabricMC/fabric/issues\",\n+    \"sources\": \"https://github.com/FabricMC/fabric\"\n+  },\n+  \"authors\": [\n+    \"FabricMC\"\n+  ],\n+  \"depends\": {\n+    \"fabricloader\": \">=0.8.0\",\n+    \"minecraft\": \">=1.16-alpha.20.15.a\"\n+  },\n+  \"description\": \"Hooks for registering .\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwNjQxMg=="}, "originalCommit": {"oid": "670a5c60ffc7af71a7c926901ebcb2921a50c2bc"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzExMTA5OnYy", "diffSide": "RIGHT", "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/FabricDefaultAttributeRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzowNTo0N1rOGH-Kfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzowNTo0N1rOGH-Kfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxMTcxMQ==", "bodyText": "The message doesn't match the standard form, see #499", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411011711", "createdAt": "2020-04-19T23:05:47Z", "author": {"login": "sfPlayer1"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/FabricDefaultAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.mixin.entity.attribute.DefaultAttributeRegistryAccessor;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * <p>This API is <strong>experimental</strong> and subject to breaking changes without\n+ * prior deprecation or warning.</p>\n+ *\n+ * @see net.minecraft.entity.attribute.DefaultAttributeRegistry\n+ * @deprecated Vanilla snapshot feature, subject to vanilla change; experimental API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "892b3d794b0cfd6d6f1e1f71363d30f03460d532"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzExMTc1OnYy", "diffSide": "RIGHT", "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/FabricDefaultAttributeRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzowNjoxM1rOGH-Kyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzowNjoxM1rOGH-Kyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxMTc4Nw==", "bodyText": "This belongs in @deprecated", "url": "https://github.com/FabricMC/fabric/pull/568#discussion_r411011787", "createdAt": "2020-04-19T23:06:13Z", "author": {"login": "sfPlayer1"}, "path": "fabric-entity-attribute-api-v1/src/main/java/net/fabricmc/fabric/api/entity/attribute/v1/FabricDefaultAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.attribute.v1;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.attribute.DefaultAttributeContainer;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.mixin.entity.attribute.DefaultAttributeRegistryAccessor;\n+\n+/**\n+ * Allows registering custom default attributes for living entities.\n+ *\n+ * <p>All living entity types must have default attributes registered.</p>\n+ *\n+ * <p>A registered default attribute for an entity type can be retrieved through\n+ * {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#get(EntityType)}.</p>\n+ *\n+ * <p>This API is <strong>experimental</strong> and subject to breaking changes without\n+ * prior deprecation or warning.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "892b3d794b0cfd6d6f1e1f71363d30f03460d532"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3527, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}