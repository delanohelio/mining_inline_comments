{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MDk2MjUw", "number": 1110, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjoyODo0MlrOEqgL8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMTo0NzowOFrOEtrIjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDAyOTk1OnYy", "diffSide": "RIGHT", "path": "fabric-tool-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/tool/attribute/BambooBlockMixin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjoyODo0MlrOHcv4Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMTowOTozMFrOHdaCMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNjY0Ng==", "bodyText": "I'd suggest using an instanceof @Redirect here instead of this @Inject that effectively overwrites the method.", "url": "https://github.com/FabricMC/fabric/pull/1110#discussion_r499906646", "createdAt": "2020-10-05T22:28:42Z", "author": {"login": "Technici4n"}, "path": "fabric-tool-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/tool/attribute/BambooBlockMixin.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.tool.attribute;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.block.BambooBlock;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.BlockView;\n+\n+import net.fabricmc.fabric.api.tool.attribute.v1.FabricToolTags;\n+\n+@Mixin(BambooBlock.class)\n+public abstract class BambooBlockMixin {\n+\t@Inject(at = @At(\"HEAD\"), method = \"calcBlockBreakingDelta\", cancellable = true)\n+\tprivate void onCalcBlockBreakingDelta(BlockState state, PlayerEntity player, BlockView world, BlockPos pos, CallbackInfoReturnable<Float> info) {\n+\t\tif (FabricToolTags.SWORDS.contains(player.getMainHandStack().getItem())) {\n+\t\t\tinfo.setReturnValue(1.0F);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29ed412f0da0f2b61215e6c5b6e78209bbc3a62"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU5NjMxMw==", "bodyText": "If it was an unconditional cancel I'd agree that it's effectively an overwrite, but conditional cancels seem to be used all over the place in FabricAPI already?", "url": "https://github.com/FabricMC/fabric/pull/1110#discussion_r500596313", "createdAt": "2020-10-06T21:07:21Z", "author": {"login": "Virtuoel"}, "path": "fabric-tool-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/tool/attribute/BambooBlockMixin.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.tool.attribute;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.block.BambooBlock;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.BlockView;\n+\n+import net.fabricmc.fabric.api.tool.attribute.v1.FabricToolTags;\n+\n+@Mixin(BambooBlock.class)\n+public abstract class BambooBlockMixin {\n+\t@Inject(at = @At(\"HEAD\"), method = \"calcBlockBreakingDelta\", cancellable = true)\n+\tprivate void onCalcBlockBreakingDelta(BlockState state, PlayerEntity player, BlockView world, BlockPos pos, CallbackInfoReturnable<Float> info) {\n+\t\tif (FabricToolTags.SWORDS.contains(player.getMainHandStack().getItem())) {\n+\t\t\tinfo.setReturnValue(1.0F);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNjY0Ng=="}, "originalCommit": {"oid": "e29ed412f0da0f2b61215e6c5b6e78209bbc3a62"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU5NzI5Nw==", "bodyText": "As you wish, I'm just a random reviewer. It feels cleaner to me because all you really want to do is replace that instanceof, and that is exactly what @Redirect does.", "url": "https://github.com/FabricMC/fabric/pull/1110#discussion_r500597297", "createdAt": "2020-10-06T21:09:30Z", "author": {"login": "Technici4n"}, "path": "fabric-tool-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/tool/attribute/BambooBlockMixin.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.tool.attribute;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.block.BambooBlock;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.BlockView;\n+\n+import net.fabricmc.fabric.api.tool.attribute.v1.FabricToolTags;\n+\n+@Mixin(BambooBlock.class)\n+public abstract class BambooBlockMixin {\n+\t@Inject(at = @At(\"HEAD\"), method = \"calcBlockBreakingDelta\", cancellable = true)\n+\tprivate void onCalcBlockBreakingDelta(BlockState state, PlayerEntity player, BlockView world, BlockPos pos, CallbackInfoReturnable<Float> info) {\n+\t\tif (FabricToolTags.SWORDS.contains(player.getMainHandStack().getItem())) {\n+\t\t\tinfo.setReturnValue(1.0F);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNjY0Ng=="}, "originalCommit": {"oid": "e29ed412f0da0f2b61215e6c5b6e78209bbc3a62"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDAzNDEwOnYy", "diffSide": "RIGHT", "path": "fabric-tool-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/tool/attribute/BambooSaplingBlockMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozMDoyNlrOHcv61w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozMDoyNlrOHcv61w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNzI4Nw==", "bodyText": "Same comment here.", "url": "https://github.com/FabricMC/fabric/pull/1110#discussion_r499907287", "createdAt": "2020-10-05T22:30:26Z", "author": {"login": "Technici4n"}, "path": "fabric-tool-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/tool/attribute/BambooSaplingBlockMixin.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.tool.attribute;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.block.BambooSaplingBlock;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.BlockView;\n+\n+import net.fabricmc.fabric.api.tool.attribute.v1.FabricToolTags;\n+\n+@Mixin(BambooSaplingBlock.class)\n+public abstract class BambooSaplingBlockMixin {\n+\t@Inject(at = @At(\"HEAD\"), method = \"calcBlockBreakingDelta\", cancellable = true)\n+\tprivate void onCalcBlockBreakingDelta(BlockState state, PlayerEntity player, BlockView world, BlockPos pos, CallbackInfoReturnable<Float> info) {\n+\t\tif (FabricToolTags.SWORDS.contains(player.getMainHandStack().getItem())) {\n+\t\t\tinfo.setReturnValue(1.0F);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29ed412f0da0f2b61215e6c5b6e78209bbc3a62"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzI4MDc2OnYy", "diffSide": "RIGHT", "path": "fabric-tool-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/tool/attribute/BambooBlockMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMTo0NzowOFrOHhmPdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMTo0NzowOFrOHhmPdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk5MTYwNw==", "bodyText": "Please add a description of why the injects exist here just so future maintainers know the purpose for the mixin existing.", "url": "https://github.com/FabricMC/fabric/pull/1110#discussion_r504991607", "createdAt": "2020-10-14T21:47:08Z", "author": {"login": "i509VCB"}, "path": "fabric-tool-attribute-api-v1/src/main/java/net/fabricmc/fabric/mixin/tool/attribute/BambooBlockMixin.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.tool.attribute;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.block.BambooBlock;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.BlockView;\n+\n+import net.fabricmc.fabric.api.tool.attribute.v1.FabricToolTags;\n+\n+@Mixin(BambooBlock.class)\n+public abstract class BambooBlockMixin {\n+\t@Inject(at = @At(\"HEAD\"), method = \"calcBlockBreakingDelta\", cancellable = true)\n+\tprivate void onCalcBlockBreakingDelta(BlockState state, PlayerEntity player, BlockView world, BlockPos pos, CallbackInfoReturnable<Float> info) {\n+\t\tif (FabricToolTags.SWORDS.contains(player.getMainHandStack().getItem())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29ed412f0da0f2b61215e6c5b6e78209bbc3a62"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3484, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}