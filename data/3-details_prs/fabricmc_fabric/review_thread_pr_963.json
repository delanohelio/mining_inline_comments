{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3ODU0MTQw", "number": 963, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTozOToyNFrOES9caQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoxNzozOVrOEsu-tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzE2NTIxOnYy", "diffSide": "RIGHT", "path": "fabric-armor-api-v1/src/main/java/net/fabricmc/fabric/api/client/armor/v1/CustomTexturedArmor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTozOToyNFrOG4brrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNjo1Nzo1NVrOG6cLAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgyNjk5MA==", "bodyText": "Honestly I think just implementing the interface and using the item's registry namespace and path would probably suffice over a whole method.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r461826990", "createdAt": "2020-07-28T19:39:24Z", "author": {"login": "i509VCB"}, "path": "fabric-armor-api-v1/src/main/java/net/fabricmc/fabric/api/client/armor/v1/CustomTexturedArmor.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.armor.v1;\n+\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Implement this interface on an Item which you would like to have a custom textured armor model.\n+ */\n+public interface CustomTexturedArmor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d838f520f48a69c9d6154516c9267977b48cb1b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzMDY1NA==", "bodyText": "Well possibly, I may default the return value to the item registry namespace? Since I really want the customizability here without limiting due to the item registry namespace.\nIt will be useful for items that use the same texture (and maybe using the different UV).", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r463930654", "createdAt": "2020-08-01T06:38:45Z", "author": {"login": "shedaniel"}, "path": "fabric-armor-api-v1/src/main/java/net/fabricmc/fabric/api/client/armor/v1/CustomTexturedArmor.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.armor.v1;\n+\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Implement this interface on an Item which you would like to have a custom textured armor model.\n+ */\n+public interface CustomTexturedArmor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgyNjk5MA=="}, "originalCommit": {"oid": "8d838f520f48a69c9d6154516c9267977b48cb1b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzMjE2Mw==", "bodyText": "I could see a reason making the selected texture stack aware and slightly more contextual.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r463932163", "createdAt": "2020-08-01T06:57:55Z", "author": {"login": "i509VCB"}, "path": "fabric-armor-api-v1/src/main/java/net/fabricmc/fabric/api/client/armor/v1/CustomTexturedArmor.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.armor.v1;\n+\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Implement this interface on an Item which you would like to have a custom textured armor model.\n+ */\n+public interface CustomTexturedArmor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgyNjk5MA=="}, "originalCommit": {"oid": "8d838f520f48a69c9d6154516c9267977b48cb1b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzIwNDg5OnYy", "diffSide": "RIGHT", "path": "fabric-armor-api-v1/src/main/java/net/fabricmc/fabric/mixin/armor/client/ArmorFeatureRendererMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTo0NjoxN1rOG4cBeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTo0NjoxN1rOG4cBeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzMjU3MA==", "bodyText": "Injection method doesn't describe very well what this does. Maybe selectArmorModel", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r461832570", "createdAt": "2020-07-28T19:46:17Z", "author": {"login": "i509VCB"}, "path": "fabric-armor-api-v1/src/main/java/net/fabricmc/fabric/mixin/armor/client/ArmorFeatureRendererMixin.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.armor.client;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.entity.feature.ArmorFeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRendererContext;\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ArmorItem;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.armor.v1.CustomModeledArmor;\n+import net.fabricmc.fabric.api.client.armor.v1.CustomTexturedArmor;\n+\n+@Mixin(ArmorFeatureRenderer.class)\n+@Environment(EnvType.CLIENT)\n+public abstract class ArmorFeatureRendererMixin extends FeatureRenderer {\n+\t@Shadow\n+\t@Final\n+\tprivate static Map<String, Identifier> ARMOR_TEXTURE_CACHE;\n+\n+\tpublic ArmorFeatureRendererMixin(FeatureRendererContext context) {\n+\t\tsuper(context);\n+\t}\n+\n+\t@Unique\n+\tprivate LivingEntity storedEntity;\n+\tprivate EquipmentSlot storedSlot;\n+\n+\t@Inject(method = \"render\", at = @At(\"HEAD\"))\n+\tprivate void storeEntity(MatrixStack matrixStack, VertexConsumerProvider vertexConsumerProvider, int i, LivingEntity livingEntity, float f, float g, float h, float j, float k, float l, CallbackInfo ci) {\n+\t\tthis.storedEntity = livingEntity;\n+\t}\n+\n+\t@Inject(method = \"renderArmor\", at = @At(\"HEAD\"))\n+\tprivate void storeSlot(MatrixStack matrices, VertexConsumerProvider vertexConsumers, LivingEntity livingEntity, EquipmentSlot slot, int i, BipedEntityModel bipedEntityModel, CallbackInfo ci) {\n+\t\tthis.storedSlot = slot;\n+\t}\n+\n+\t@Inject(method = \"render\", at = @At(\"RETURN\"))\n+\tprivate void removeStored(MatrixStack matrixStack, VertexConsumerProvider vertexConsumerProvider, int i, LivingEntity livingEntity, float f, float g, float h, float j, float k, float l, CallbackInfo ci) {\n+\t\tthis.storedEntity = null;\n+\t\tthis.storedSlot = null;\n+\t}\n+\n+\t@Inject(method = \"getArmor\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void getArmor(EquipmentSlot slot, CallbackInfoReturnable<BipedEntityModel<LivingEntity>> cir) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d838f520f48a69c9d6154516c9267977b48cb1b"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTE1Mjg5OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo0MDowNVrOG7mNIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo0NjozNlrOG7metw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0NTEyMA==", "bodyText": "I dont think we should really have what should be client only interfaces like this, Vanilla is moving away from this (think render layers) a registry would be better IMO.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r465145120", "createdAt": "2020-08-04T15:40:05Z", "author": {"login": "modmuss50"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmor.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Implement this interface on an {@link net.minecraft.item.ArmorItem} which you would like to have a custom armor model.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227fa2687a2c94b94b62adde4978fb0760b94d01"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0NjY2NQ==", "bodyText": "think it's easier to have an interface, for example: BlockEntityClientSerializable, you don't want to have an registry for such a thing. since the armor models and textures might depend on the item itself, I think it is more simple and easier to have it be an interface.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r465146665", "createdAt": "2020-08-04T15:42:24Z", "author": {"login": "shedaniel"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmor.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Implement this interface on an {@link net.minecraft.item.ArmorItem} which you would like to have a custom armor model.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0NTEyMA=="}, "originalCommit": {"oid": "227fa2687a2c94b94b62adde4978fb0760b94d01"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0Nzc1NA==", "bodyText": "BlockEntityClientSerializable is for the server tho. A vanilla example of this is the BlockEntityRenderers, there is a clear speration between client and server code, without relaying on the annotations. A registry might make it easier for a mod to change the model of lets say the vanilla armor without requiring a mixin.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r465147754", "createdAt": "2020-08-04T15:44:00Z", "author": {"login": "modmuss50"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmor.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Implement this interface on an {@link net.minecraft.item.ArmorItem} which you would like to have a custom armor model.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0NTEyMA=="}, "originalCommit": {"oid": "227fa2687a2c94b94b62adde4978fb0760b94d01"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0OTYyMw==", "bodyText": "hmm true, I agree that it will be easier to change the vanilla armor that way. I will change this into a registry", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r465149623", "createdAt": "2020-08-04T15:46:36Z", "author": {"login": "shedaniel"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmor.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Implement this interface on an {@link net.minecraft.item.ArmorItem} which you would like to have a custom armor model.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0NTEyMA=="}, "originalCommit": {"oid": "227fa2687a2c94b94b62adde4978fb0760b94d01"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTg2MjAwOnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo0OToyNFrOG7tGYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTowMjo1OFrOG7th8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1ODA4Mw==", "bodyText": "I personally want to move away from the instance design of this. Personally I think we should make this entirely static so we chop off the INSTANCE call.\nAlso why is this itself an armor provider. That should really be impl detail.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r465258083", "createdAt": "2020-08-04T18:49:24Z", "author": {"login": "i509VCB"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.CustomModeledArmorRegistryImpl;\n+\n+@Environment(EnvType.CLIENT)\n+public interface CustomModeledArmorRegistry extends CustomModeledArmorProvider {\n+\tCustomModeledArmorRegistry INSTANCE = CustomModeledArmorRegistryImpl.INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426b5940389b87e181ca41adbdb42947687feb24"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2NTEzNw==", "bodyText": "Also why is this itself an armor provider. That should really be impl detail.\n\nwhy not, it's just duplicate methods, but if we are moving away from INSTANCE this can go", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r465265137", "createdAt": "2020-08-04T19:02:58Z", "author": {"login": "shedaniel"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.CustomModeledArmorRegistryImpl;\n+\n+@Environment(EnvType.CLIENT)\n+public interface CustomModeledArmorRegistry extends CustomModeledArmorProvider {\n+\tCustomModeledArmorRegistry INSTANCE = CustomModeledArmorRegistryImpl.INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1ODA4Mw=="}, "originalCommit": {"oid": "426b5940389b87e181ca41adbdb42947687feb24"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTg2ODk2OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomTexturedArmorRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo1MToyMVrOG7tKlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo1MToyMVrOG7tKlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1OTE1OA==", "bodyText": "Why would you implement an interface meant for impl", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r465259158", "createdAt": "2020-08-04T18:51:21Z", "author": {"login": "i509VCB"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomTexturedArmorRegistry.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.CustomTexturedArmorRegistryImpl;\n+\n+/**\n+ * Implement this interface on an {@link net.minecraft.item.ArmorItem} which you would like to have a custom armor model.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426b5940389b87e181ca41adbdb42947687feb24"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTg3MTU4OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomTexturedArmorRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo1MjoxM1rOG7tMUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo1MjoxM1rOG7tMUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1OTYwMQ==", "bodyText": "I think a static method would suffice over the instance.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r465259601", "createdAt": "2020-08-04T18:52:13Z", "author": {"login": "i509VCB"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomTexturedArmorRegistry.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.CustomTexturedArmorRegistryImpl;\n+\n+/**\n+ * Implement this interface on an {@link net.minecraft.item.ArmorItem} which you would like to have a custom armor model.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface CustomTexturedArmorRegistry extends CustomTexturedArmorProvider {\n+\tCustomTexturedArmorRegistry INSTANCE = CustomTexturedArmorRegistryImpl.INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426b5940389b87e181ca41adbdb42947687feb24"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTg3NDEzOnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/impl/client/item/CustomTexturedArmorRegistryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo1MzowM1rOG7tN6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo1MzowM1rOG7tN6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2MDAxMA==", "bodyText": "Maybe mixin to item and store the provider there to reduce the map.get calls", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r465260010", "createdAt": "2020-08-04T18:53:03Z", "author": {"login": "i509VCB"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/impl/client/item/CustomTexturedArmorRegistryImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.item;\n+\n+import java.util.Map;\n+\n+import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap;\n+\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.item.v1.CustomTexturedArmorProvider;\n+import net.fabricmc.fabric.api.client.item.v1.CustomTexturedArmorRegistry;\n+\n+public final class CustomTexturedArmorRegistryImpl implements CustomTexturedArmorRegistry {\n+\tpublic static final CustomTexturedArmorRegistry INSTANCE = new CustomTexturedArmorRegistryImpl();\n+\tprivate final Map<Item, CustomTexturedArmorProvider> providerMap = new Reference2ObjectOpenHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426b5940389b87e181ca41adbdb42947687feb24"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTg3NjM2OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/impl/client/item/CustomModeledArmorRegistryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo1Mzo0N1rOG7tPVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo1Mzo0N1rOG7tPVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2MDM3Mg==", "bodyText": "I think we should mixin to item and store the model provided on items to reduce map.get calls", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r465260372", "createdAt": "2020-08-04T18:53:47Z", "author": {"login": "i509VCB"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/impl/client/item/CustomModeledArmorRegistryImpl.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.item;\n+\n+import java.util.Map;\n+\n+import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.item.v1.CustomModeledArmorProvider;\n+import net.fabricmc.fabric.api.client.item.v1.CustomModeledArmorRegistry;\n+\n+public final class CustomModeledArmorRegistryImpl implements CustomModeledArmorRegistry {\n+\tpublic static final CustomModeledArmorRegistry INSTANCE = new CustomModeledArmorRegistryImpl();\n+\tprivate final Map<Item, CustomModeledArmorProvider> providerMap = new Reference2ObjectOpenHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426b5940389b87e181ca41adbdb42947687feb24"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTg3ODE1OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/impl/client/item/CustomTexturedArmorRegistryImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo1NDoyM1rOG7tQaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTowNzozN1rOG7tr5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2MDY1MQ==", "bodyText": "What about duplicates, how should we handle those?", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r465260651", "createdAt": "2020-08-04T18:54:23Z", "author": {"login": "i509VCB"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/impl/client/item/CustomTexturedArmorRegistryImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.item;\n+\n+import java.util.Map;\n+\n+import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap;\n+\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.item.v1.CustomTexturedArmorProvider;\n+import net.fabricmc.fabric.api.client.item.v1.CustomTexturedArmorRegistry;\n+\n+public final class CustomTexturedArmorRegistryImpl implements CustomTexturedArmorRegistry {\n+\tpublic static final CustomTexturedArmorRegistry INSTANCE = new CustomTexturedArmorRegistryImpl();\n+\tprivate final Map<Item, CustomTexturedArmorProvider> providerMap = new Reference2ObjectOpenHashMap<>();\n+\n+\tprivate CustomTexturedArmorRegistryImpl() {\n+\t}\n+\n+\t@Override\n+\tpublic void registerCustomArmorTexture(CustomTexturedArmorProvider provider, Item... items) {\n+\t\tfor (Item item : items) {\n+\t\t\tproviderMap.put(item, provider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426b5940389b87e181ca41adbdb42947687feb24"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2NDgzNQ==", "bodyText": "we don't, the one registered last gets it", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r465264835", "createdAt": "2020-08-04T19:02:21Z", "author": {"login": "shedaniel"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/impl/client/item/CustomTexturedArmorRegistryImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.item;\n+\n+import java.util.Map;\n+\n+import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap;\n+\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.item.v1.CustomTexturedArmorProvider;\n+import net.fabricmc.fabric.api.client.item.v1.CustomTexturedArmorRegistry;\n+\n+public final class CustomTexturedArmorRegistryImpl implements CustomTexturedArmorRegistry {\n+\tpublic static final CustomTexturedArmorRegistry INSTANCE = new CustomTexturedArmorRegistryImpl();\n+\tprivate final Map<Item, CustomTexturedArmorProvider> providerMap = new Reference2ObjectOpenHashMap<>();\n+\n+\tprivate CustomTexturedArmorRegistryImpl() {\n+\t}\n+\n+\t@Override\n+\tpublic void registerCustomArmorTexture(CustomTexturedArmorProvider provider, Item... items) {\n+\t\tfor (Item item : items) {\n+\t\t\tproviderMap.put(item, provider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2MDY1MQ=="}, "originalCommit": {"oid": "426b5940389b87e181ca41adbdb42947687feb24"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2NTM3OQ==", "bodyText": "That somewhat seems like a load order battle", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r465265379", "createdAt": "2020-08-04T19:03:24Z", "author": {"login": "i509VCB"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/impl/client/item/CustomTexturedArmorRegistryImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.item;\n+\n+import java.util.Map;\n+\n+import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap;\n+\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.item.v1.CustomTexturedArmorProvider;\n+import net.fabricmc.fabric.api.client.item.v1.CustomTexturedArmorRegistry;\n+\n+public final class CustomTexturedArmorRegistryImpl implements CustomTexturedArmorRegistry {\n+\tpublic static final CustomTexturedArmorRegistry INSTANCE = new CustomTexturedArmorRegistryImpl();\n+\tprivate final Map<Item, CustomTexturedArmorProvider> providerMap = new Reference2ObjectOpenHashMap<>();\n+\n+\tprivate CustomTexturedArmorRegistryImpl() {\n+\t}\n+\n+\t@Override\n+\tpublic void registerCustomArmorTexture(CustomTexturedArmorProvider provider, Item... items) {\n+\t\tfor (Item item : items) {\n+\t\t\tproviderMap.put(item, provider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2MDY1MQ=="}, "originalCommit": {"oid": "426b5940389b87e181ca41adbdb42947687feb24"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2NzY4Ng==", "bodyText": "you can't have two textures at the same time, also that's rare since usually you only edit your own item. If two mods edit the same vanilla item, you can't guarantee compatibility between them at all.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r465267686", "createdAt": "2020-08-04T19:07:37Z", "author": {"login": "shedaniel"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/impl/client/item/CustomTexturedArmorRegistryImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.item;\n+\n+import java.util.Map;\n+\n+import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap;\n+\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.item.v1.CustomTexturedArmorProvider;\n+import net.fabricmc.fabric.api.client.item.v1.CustomTexturedArmorRegistry;\n+\n+public final class CustomTexturedArmorRegistryImpl implements CustomTexturedArmorRegistry {\n+\tpublic static final CustomTexturedArmorRegistry INSTANCE = new CustomTexturedArmorRegistryImpl();\n+\tprivate final Map<Item, CustomTexturedArmorProvider> providerMap = new Reference2ObjectOpenHashMap<>();\n+\n+\tprivate CustomTexturedArmorRegistryImpl() {\n+\t}\n+\n+\t@Override\n+\tpublic void registerCustomArmorTexture(CustomTexturedArmorProvider provider, Item... items) {\n+\t\tfor (Item item : items) {\n+\t\t\tproviderMap.put(item, provider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2MDY1MQ=="}, "originalCommit": {"oid": "426b5940389b87e181ca41adbdb42947687feb24"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDI0ODAxOnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNjo1Mzo1MVrOG906vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNjo1ODoyOVrOG908dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4MzMyNA==", "bodyText": "I don't really know why you would want a null provider for this.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r467483324", "createdAt": "2020-08-08T16:53:51Z", "author": {"login": "i509VCB"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.CustomModeledArmorRegistryImpl;\n+\n+@Environment(EnvType.CLIENT)\n+public final class CustomModeledArmorRegistry {\n+\tprivate CustomModeledArmorRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void registerCustomArmorModel(/* @Nullable */ Provider provider, Item... items) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5613af2f14698fa77211a4dcd2c66fbf408d17a0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4Mzc2NQ==", "bodyText": "to maybe unregister? I don't see a point to limit the api", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r467483765", "createdAt": "2020-08-08T16:58:29Z", "author": {"login": "shedaniel"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.CustomModeledArmorRegistryImpl;\n+\n+@Environment(EnvType.CLIENT)\n+public final class CustomModeledArmorRegistry {\n+\tprivate CustomModeledArmorRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void registerCustomArmorModel(/* @Nullable */ Provider provider, Item... items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4MzMyNA=="}, "originalCommit": {"oid": "5613af2f14698fa77211a4dcd2c66fbf408d17a0"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDI0OTk1OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNjo1NTowOFrOG907jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNzowNjowOVrOG90_MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4MzUzMg==", "bodyText": "I think we should use ItemConvertible here in case someone decides to make a literal armor block so you don't need an asItem call.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r467483532", "createdAt": "2020-08-08T16:55:08Z", "author": {"login": "i509VCB"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.CustomModeledArmorRegistryImpl;\n+\n+@Environment(EnvType.CLIENT)\n+public final class CustomModeledArmorRegistry {\n+\tprivate CustomModeledArmorRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void registerCustomArmorModel(/* @Nullable */ Provider provider, Item... items) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5613af2f14698fa77211a4dcd2c66fbf408d17a0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4MzY4NA==", "bodyText": "I think you should null check the items varargs.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r467483684", "createdAt": "2020-08-08T16:57:04Z", "author": {"login": "i509VCB"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.CustomModeledArmorRegistryImpl;\n+\n+@Environment(EnvType.CLIENT)\n+public final class CustomModeledArmorRegistry {\n+\tprivate CustomModeledArmorRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void registerCustomArmorModel(/* @Nullable */ Provider provider, Item... items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4MzUzMg=="}, "originalCommit": {"oid": "5613af2f14698fa77211a4dcd2c66fbf408d17a0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4Mzc4OQ==", "bodyText": "True", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r467483789", "createdAt": "2020-08-08T16:58:44Z", "author": {"login": "shedaniel"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.CustomModeledArmorRegistryImpl;\n+\n+@Environment(EnvType.CLIENT)\n+public final class CustomModeledArmorRegistry {\n+\tprivate CustomModeledArmorRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void registerCustomArmorModel(/* @Nullable */ Provider provider, Item... items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4MzUzMg=="}, "originalCommit": {"oid": "5613af2f14698fa77211a4dcd2c66fbf408d17a0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NDQ2NQ==", "bodyText": "the null check can implicitly happen when iterating", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r467484465", "createdAt": "2020-08-08T17:06:09Z", "author": {"login": "liach"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.CustomModeledArmorRegistryImpl;\n+\n+@Environment(EnvType.CLIENT)\n+public final class CustomModeledArmorRegistry {\n+\tprivate CustomModeledArmorRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void registerCustomArmorModel(/* @Nullable */ Provider provider, Item... items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4MzUzMg=="}, "originalCommit": {"oid": "5613af2f14698fa77211a4dcd2c66fbf408d17a0"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDI1MDU1OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomTexturedArmorRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNjo1NjoyMlrOG9073Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNjo1NjoyMlrOG9073Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4MzYxMw==", "bodyText": "Like the other api class, same questions", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r467483613", "createdAt": "2020-08-08T16:56:22Z", "author": {"login": "i509VCB"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomTexturedArmorRegistry.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.CustomTexturedArmorRegistryImpl;\n+\n+@Environment(EnvType.CLIENT)\n+public final class CustomTexturedArmorRegistry {\n+\tprivate CustomTexturedArmorRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom texture models for an item.\n+\t *\n+\t * @param provider the provider for the texture\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void registerCustomArmorTexture(/* @Nullable */ Provider provider, Item... items) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5613af2f14698fa77211a4dcd2c66fbf408d17a0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDI1MTM0OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNjo1NzozM1rOG908Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNjo1OTowOVrOG908rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4MzcxNA==", "bodyText": "Would there be a specific reason you'd want to register the same armor model to several items at once?", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r467483714", "createdAt": "2020-08-08T16:57:33Z", "author": {"login": "i509VCB"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.CustomModeledArmorRegistryImpl;\n+\n+@Environment(EnvType.CLIENT)\n+public final class CustomModeledArmorRegistry {\n+\tprivate CustomModeledArmorRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void registerCustomArmorModel(/* @Nullable */ Provider provider, Item... items) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5613af2f14698fa77211a4dcd2c66fbf408d17a0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4MzgyMw==", "bodyText": "It's not the same model, it's a model provider.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r467483823", "createdAt": "2020-08-08T16:59:09Z", "author": {"login": "shedaniel"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.CustomModeledArmorRegistryImpl;\n+\n+@Environment(EnvType.CLIENT)\n+public final class CustomModeledArmorRegistry {\n+\tprivate CustomModeledArmorRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void registerCustomArmorModel(/* @Nullable */ Provider provider, Item... items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4MzcxNA=="}, "originalCommit": {"oid": "5613af2f14698fa77211a4dcd2c66fbf408d17a0"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDUxNDU2OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNToyNzozMlrOG_SRuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNToyNzozMlrOG_SRuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMjkyMw==", "bodyText": "Mark method or interface as client only", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r469012923", "createdAt": "2020-08-12T05:27:32Z", "author": {"login": "i509VCB"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/CustomModeledArmorRegistry.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.CustomModeledArmorRegistryImpl;\n+\n+@Environment(EnvType.CLIENT)\n+public final class CustomModeledArmorRegistry {\n+\tprivate CustomModeledArmorRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void registerCustomArmorModel(/* @Nullable */ Provider provider, ItemConvertible... items) {\n+\t\tregisterCustomArmorModel(provider, Arrays.asList(items));\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void registerCustomArmorModel(/* @Nullable */ Provider provider, Iterable<ItemConvertible> items) {\n+\t\tCustomModeledArmorRegistryImpl.registerCustomArmorModel(provider, Objects.requireNonNull(items));\n+\t}\n+\n+\t/**\n+\t * Gets the model of the armor piece.\n+\t *\n+\t * @param entity       The entity equipping the armor\n+\t * @param stack        The item stack of the armor\n+\t * @param slot         The slot which the armor is in\n+\t * @param defaultModel The default model that vanilla provides\n+\t * @return The model of the armor piece. Should never be null.\n+\t */\n+\tpublic static BipedEntityModel<LivingEntity> getCustomArmorModel(LivingEntity entity, ItemStack stack, EquipmentSlot slot, BipedEntityModel<LivingEntity> defaultModel) {\n+\t\treturn CustomModeledArmorRegistryImpl.getCustomArmorModel(entity, stack, slot, defaultModel);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface Provider {\n+\t\t/**\n+\t\t * Gets the model of the armor piece.\n+\t\t *\n+\t\t * @param entity       The entity equipping the armor\n+\t\t * @param stack        The item stack of the armor\n+\t\t * @param slot         The slot which the armor is in\n+\t\t * @param defaultModel The default model that vanilla provides\n+\t\t * @return The model of the armor piece. Should never be null.\n+\t\t */\n+\t\tBipedEntityModel<LivingEntity> getCustomArmorModel(LivingEntity entity, ItemStack stack, EquipmentSlot slot, BipedEntityModel<LivingEntity> defaultModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04b33ac4e25a5c4ef69e4be36a1af4ee2edb7f0e"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Nzg4NjI3OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorModelRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzowNzowN1rOHBxdBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzowNzowN1rOHBxdBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyMDg2OQ==", "bodyText": "No optional closing tags, opening tag in the same line without space please.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r471620869", "createdAt": "2020-08-17T17:07:07Z", "author": {"login": "sfPlayer1"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorModelRegistry.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.ArmorModelRegistryImpl;\n+\n+/**\n+ * A class for registering custom armor models for {@link ItemConvertible}, to be provided by a {@link Provider}.\n+ *\n+ * <p>\n+ * This can be used to replace existing vanilla armor models conditionally, however each {@link net.minecraft.item.Item}\n+ * instance can only allow one {@link Provider}.\n+ * </p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a5c6496b9db43fe2a64852c313f951af33eacc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Nzg5ODQ5OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorModelRegistry.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzowOTowMlrOHBxlgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODoxNjo0NFrOHB0tHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyMzA0Mg==", "bodyText": "Not sure about using ItemConvertible over Item. Blocks are unusual for armor and for the rare exception the caller can convert easily. Item may be less confusing. The implementation mandates ArmorItem, so maybe we should use/require that in the API as well.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r471623042", "createdAt": "2020-08-17T17:09:02Z", "author": {"login": "sfPlayer1"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorModelRegistry.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.ArmorModelRegistryImpl;\n+\n+/**\n+ * A class for registering custom armor models for {@link ItemConvertible}, to be provided by a {@link Provider}.\n+ *\n+ * <p>\n+ * This can be used to replace existing vanilla armor models conditionally, however each {@link net.minecraft.item.Item}\n+ * instance can only allow one {@link Provider}.\n+ * </p>\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ArmorModelRegistry {\n+\tprivate ArmorModelRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void register(/* @Nullable */ Provider provider, ItemConvertible... items) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a5c6496b9db43fe2a64852c313f951af33eacc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2ODYzMA==", "bodyText": "Hmm, can't carved pumpkins be used as armor", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r471668630", "createdAt": "2020-08-17T18:06:59Z", "author": {"login": "liach"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorModelRegistry.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.ArmorModelRegistryImpl;\n+\n+/**\n+ * A class for registering custom armor models for {@link ItemConvertible}, to be provided by a {@link Provider}.\n+ *\n+ * <p>\n+ * This can be used to replace existing vanilla armor models conditionally, however each {@link net.minecraft.item.Item}\n+ * instance can only allow one {@link Provider}.\n+ * </p>\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ArmorModelRegistry {\n+\tprivate ArmorModelRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void register(/* @Nullable */ Provider provider, ItemConvertible... items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyMzA0Mg=="}, "originalCommit": {"oid": "47a5c6496b9db43fe2a64852c313f951af33eacc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY3MTExMA==", "bodyText": "Carved pumpkins aren't armor but BlockItems and they use their item model instead of an armor model (this behavior is probably specific to the head slot).", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r471671110", "createdAt": "2020-08-17T18:10:48Z", "author": {"login": "Juuxel"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorModelRegistry.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.ArmorModelRegistryImpl;\n+\n+/**\n+ * A class for registering custom armor models for {@link ItemConvertible}, to be provided by a {@link Provider}.\n+ *\n+ * <p>\n+ * This can be used to replace existing vanilla armor models conditionally, however each {@link net.minecraft.item.Item}\n+ * instance can only allow one {@link Provider}.\n+ * </p>\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ArmorModelRegistry {\n+\tprivate ArmorModelRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void register(/* @Nullable */ Provider provider, ItemConvertible... items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyMzA0Mg=="}, "originalCommit": {"oid": "47a5c6496b9db43fe2a64852c313f951af33eacc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY3MTg1MQ==", "bodyText": "The instrumented code starts with if (itemStack.getItem() instanceof ArmorItem) {", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r471671851", "createdAt": "2020-08-17T18:12:15Z", "author": {"login": "sfPlayer1"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorModelRegistry.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.ArmorModelRegistryImpl;\n+\n+/**\n+ * A class for registering custom armor models for {@link ItemConvertible}, to be provided by a {@link Provider}.\n+ *\n+ * <p>\n+ * This can be used to replace existing vanilla armor models conditionally, however each {@link net.minecraft.item.Item}\n+ * instance can only allow one {@link Provider}.\n+ * </p>\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ArmorModelRegistry {\n+\tprivate ArmorModelRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void register(/* @Nullable */ Provider provider, ItemConvertible... items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyMzA0Mg=="}, "originalCommit": {"oid": "47a5c6496b9db43fe2a64852c313f951af33eacc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY3NDE0MQ==", "bodyText": "More precisely, the pumpkin or worn heads use separate feature renderers that aren't covered by this PR.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r471674141", "createdAt": "2020-08-17T18:16:44Z", "author": {"login": "sfPlayer1"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorModelRegistry.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.ArmorModelRegistryImpl;\n+\n+/**\n+ * A class for registering custom armor models for {@link ItemConvertible}, to be provided by a {@link Provider}.\n+ *\n+ * <p>\n+ * This can be used to replace existing vanilla armor models conditionally, however each {@link net.minecraft.item.Item}\n+ * instance can only allow one {@link Provider}.\n+ * </p>\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ArmorModelRegistry {\n+\tprivate ArmorModelRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void register(/* @Nullable */ Provider provider, ItemConvertible... items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyMzA0Mg=="}, "originalCommit": {"oid": "47a5c6496b9db43fe2a64852c313f951af33eacc"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzkwNzYyOnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorModelRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoxMDoyMVrOHBxrrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoxMDoyMVrOHBxrrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyNDYyMA==", "bodyText": "We concluded in Discord to put this in the rendering module.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r471624620", "createdAt": "2020-08-17T17:10:21Z", "author": {"login": "sfPlayer1"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorModelRegistry.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a5c6496b9db43fe2a64852c313f951af33eacc"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzkxOTQ1OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorModelRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoxMjoxMVrOHBx0CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODoxNzozN1rOHB0uyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyNjc2MA==", "bodyText": "We usually check preconditions first, then blank line, then implementation.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r471626760", "createdAt": "2020-08-17T17:12:11Z", "author": {"login": "sfPlayer1"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorModelRegistry.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.ArmorModelRegistryImpl;\n+\n+/**\n+ * A class for registering custom armor models for {@link ItemConvertible}, to be provided by a {@link Provider}.\n+ *\n+ * <p>\n+ * This can be used to replace existing vanilla armor models conditionally, however each {@link net.minecraft.item.Item}\n+ * instance can only allow one {@link Provider}.\n+ * </p>\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ArmorModelRegistry {\n+\tprivate ArmorModelRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void register(/* @Nullable */ Provider provider, ItemConvertible... items) {\n+\t\tregister(provider, Arrays.asList(items));\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void register(/* @Nullable */ Provider provider, Iterable<ItemConvertible> items) {\n+\t\tArmorModelRegistryImpl.register(provider, Objects.requireNonNull(items));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a5c6496b9db43fe2a64852c313f951af33eacc"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY3NDU2OA==", "bodyText": "Not documented in conventions. Will add that to doc for future.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r471674568", "createdAt": "2020-08-17T18:17:37Z", "author": {"login": "i509VCB"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorModelRegistry.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.ArmorModelRegistryImpl;\n+\n+/**\n+ * A class for registering custom armor models for {@link ItemConvertible}, to be provided by a {@link Provider}.\n+ *\n+ * <p>\n+ * This can be used to replace existing vanilla armor models conditionally, however each {@link net.minecraft.item.Item}\n+ * instance can only allow one {@link Provider}.\n+ * </p>\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ArmorModelRegistry {\n+\tprivate ArmorModelRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void register(/* @Nullable */ Provider provider, ItemConvertible... items) {\n+\t\tregister(provider, Arrays.asList(items));\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void register(/* @Nullable */ Provider provider, Iterable<ItemConvertible> items) {\n+\t\tArmorModelRegistryImpl.register(provider, Objects.requireNonNull(items));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyNjc2MA=="}, "originalCommit": {"oid": "47a5c6496b9db43fe2a64852c313f951af33eacc"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzkzMzg1OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorTextureRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoxNDoxN1rOHBx-Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoxNDoxN1rOHBx-Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyOTM0Nw==", "bodyText": "Objects.requireNonNull use is inconsistent wrt relying on later rejection or not, in this case the implementation would crash already.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r471629347", "createdAt": "2020-08-17T17:14:17Z", "author": {"login": "sfPlayer1"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorTextureRegistry.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.ArmorTextureRegistryImpl;\n+\n+/**\n+ * A class for registering custom armor textures for {@link ItemConvertible}, to be provided by a {@link Provider}.\n+ *\n+ * <p>\n+ * This can be used to replace existing vanilla armor textures conditionally, however each {@link net.minecraft.item.Item}\n+ * instance can only allow one {@link Provider}.\n+ * </p>\n+ *\n+ * <p>\n+ * Since armor textures identifier in vanilla is hardcoded to be in the {@code minecraft} namespace, this registry can also be\n+ * used to use a custom namespace if desired.\n+ * </p>\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ArmorTextureRegistry {\n+\tprivate ArmorTextureRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom texture models for an item.\n+\t *\n+\t * @param provider the provider for the texture\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void register(/* @Nullable */ Provider provider, ItemConvertible... items) {\n+\t\tregister(provider, Arrays.asList(items));\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom texture models for an item.\n+\t *\n+\t * @param provider the provider for the texture\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void register(/* @Nullable */ Provider provider, Iterable<ItemConvertible> items) {\n+\t\tArmorTextureRegistryImpl.register(provider, Objects.requireNonNull(items));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a5c6496b9db43fe2a64852c313f951af33eacc"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Nzk0OTg3OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorTextureRegistry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoxNjozOFrOHByJjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjowMDowNVrOHQLlow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYzMjI3MQ==", "bodyText": "This needs more documentation on how models and textures relate to each other.\nThe suggestion around replacing vanilla armor should be more like a warning along the lines of \"While this can be used to replace vanilla armor, there can be only one replacement at a time, causing potential conflicts with other mods. Consider using a separate item instead.\"\nArmor models and texture are so tightly connected that a single ArmorRenderingRegistry class may be more appropriate.\nIMO we should also offer a wider hook that effectively replaces all of renderArmor() with a handler for more invasive customization.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r471632271", "createdAt": "2020-08-17T17:16:38Z", "author": {"login": "sfPlayer1"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorTextureRegistry.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.ArmorTextureRegistryImpl;\n+\n+/**\n+ * A class for registering custom armor textures for {@link ItemConvertible}, to be provided by a {@link Provider}.\n+ *\n+ * <p>\n+ * This can be used to replace existing vanilla armor textures conditionally, however each {@link net.minecraft.item.Item}\n+ * instance can only allow one {@link Provider}.\n+ * </p>\n+ *\n+ * <p>\n+ * Since armor textures identifier in vanilla is hardcoded to be in the {@code minecraft} namespace, this registry can also be\n+ * used to use a custom namespace if desired.\n+ * </p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a5c6496b9db43fe2a64852c313f951af33eacc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyOTEyMw==", "bodyText": "IMO we should also offer a wider hook that effectively replaces all of renderArmor() with a handler for more invasive customization.\n\nThe BipedEntityModel should be possible to be entirely customized, you can completely rip out BipedEntityModel#render.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r486729123", "createdAt": "2020-09-11T02:00:05Z", "author": {"login": "shedaniel"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorTextureRegistry.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.ArmorTextureRegistryImpl;\n+\n+/**\n+ * A class for registering custom armor textures for {@link ItemConvertible}, to be provided by a {@link Provider}.\n+ *\n+ * <p>\n+ * This can be used to replace existing vanilla armor textures conditionally, however each {@link net.minecraft.item.Item}\n+ * instance can only allow one {@link Provider}.\n+ * </p>\n+ *\n+ * <p>\n+ * Since armor textures identifier in vanilla is hardcoded to be in the {@code minecraft} namespace, this registry can also be\n+ * used to use a custom namespace if desired.\n+ * </p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYzMjI3MQ=="}, "originalCommit": {"oid": "47a5c6496b9db43fe2a64852c313f951af33eacc"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODEyMDQ5OnYy", "diffSide": "RIGHT", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorTextureRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzo1MjowM1rOHBz3sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzo1MjowM1rOHBz3sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2MDQ2Nw==", "bodyText": "I don't think we should pass secondLayer like that while also supplying the slot. It is just a weird artefact of MC's implementation. Likewise suffix should probably be replaced with boolean overlay to denote the 2nd render pass without dye.\nWe could instead supply the full vanilla path in the textures/models/armor/[..]_layer_[..].png form to make this easy for namespace replacement use cases, the proposed ArmorModelRegistry already does something similar with defaultModel.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r471660467", "createdAt": "2020-08-17T17:52:03Z", "author": {"login": "sfPlayer1"}, "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/client/item/v1/ArmorTextureRegistry.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.item.v1;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.item.ArmorTextureRegistryImpl;\n+\n+/**\n+ * A class for registering custom armor textures for {@link ItemConvertible}, to be provided by a {@link Provider}.\n+ *\n+ * <p>\n+ * This can be used to replace existing vanilla armor textures conditionally, however each {@link net.minecraft.item.Item}\n+ * instance can only allow one {@link Provider}.\n+ * </p>\n+ *\n+ * <p>\n+ * Since armor textures identifier in vanilla is hardcoded to be in the {@code minecraft} namespace, this registry can also be\n+ * used to use a custom namespace if desired.\n+ * </p>\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ArmorTextureRegistry {\n+\tprivate ArmorTextureRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom texture models for an item.\n+\t *\n+\t * @param provider the provider for the texture\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void register(/* @Nullable */ Provider provider, ItemConvertible... items) {\n+\t\tregister(provider, Arrays.asList(items));\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom texture models for an item.\n+\t *\n+\t * @param provider the provider for the texture\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void register(/* @Nullable */ Provider provider, Iterable<ItemConvertible> items) {\n+\t\tArmorTextureRegistryImpl.register(provider, Objects.requireNonNull(items));\n+\t}\n+\n+\t/**\n+\t * Gets the armor texture identifier in string, to be converted to {@link net.minecraft.util.Identifier}.\n+\t *\n+\t * @param entity      The entity equipping the armor\n+\t * @param stack       The item stack of the armor\n+\t * @param slot        The slot which the armor is in\n+\t * @param secondLayer Whether the texture should use the second layer, only true when the {@code slot} is {@link EquipmentSlot#LEGS}\n+\t * @param suffix      The nullable suffix of the texture, may be \"overlay\" in vanilla when the item is {@link net.minecraft.item.DyeableArmorItem}\n+\t * @return the custom armor texture identifier, return null to use the vanilla ones. Defaulted to the item's registry id.\n+\t */\n+\t/* @Nullable */\n+\tpublic static String getArmorTexture(LivingEntity entity, ItemStack stack, EquipmentSlot slot, boolean secondLayer, /* @Nullable */  String suffix) {\n+\t\treturn ArmorTextureRegistryImpl.getArmorTexture(entity, stack, slot, secondLayer, suffix);\n+\t}\n+\n+\t@FunctionalInterface\n+\t@Environment(EnvType.CLIENT)\n+\tpublic interface Provider {\n+\t\t/**\n+\t\t * Gets the armor texture identifier in string, to be converted to {@link net.minecraft.util.Identifier}.\n+\t\t *\n+\t\t * @param entity      The entity equipping the armor\n+\t\t * @param stack       The item stack of the armor\n+\t\t * @param slot        The slot which the armor is in\n+\t\t * @param secondLayer Whether the texture should use the second layer, only true when the {@code slot} is {@link EquipmentSlot#LEGS}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a5c6496b9db43fe2a64852c313f951af33eacc"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzM3Nzc2OnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/ArmorRenderingRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDowNDoxN1rOHUaTAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDowNDoxN1rOHUaTAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2NDQxOQ==", "bodyText": "Missed annotation comment?", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r491164419", "createdAt": "2020-09-18T20:04:17Z", "author": {"login": "NinjaPhenix"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/ArmorRenderingRegistry.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import java.util.Arrays;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.rendering.ArmorRenderingRegistryImpl;\n+\n+/**\n+ * A class for registering custom armor models and textures for {@link Item}, to be provided by a {@link ModelProvider} or {@link TextureProvider}.\n+ *\n+ * <p>This can be used to replace existing vanilla armor models and textures conditionally, however each {@link Item}\n+ * instance can only allow one {@link ModelProvider} or {@link TextureProvider} respectively, causing potential conflicts\n+ * with other mods if you replace the model or texture for vanilla items. Consider using a separate item instead.</p>\n+ *\n+ * <p>A custom model would probably also require a custom texture to go along it, the model will use the vanilla texture if it is undefined.</p>\n+ *\n+ * <p>Since armor textures identifier in vanilla is hardcoded to be in the {@code minecraft} namespace, this registry can also be\n+ * used to use a custom namespace if desired.</p>\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ArmorRenderingRegistry {\n+\tprivate ArmorRenderingRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void registerModel(@Nullable ModelProvider provider, Item... items) {\n+\t\tregisterModel(provider, Arrays.asList(items));\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom armor models for an item.\n+\t *\n+\t * @param provider the provider for the model\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void registerModel(@Nullable ModelProvider provider, Iterable<Item> items) {\n+\t\tArmorRenderingRegistryImpl.registerModel(provider, items);\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom texture models for an item.\n+\t *\n+\t * @param provider the provider for the texture\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void registerTexture(@Nullable TextureProvider provider, Item... items) {\n+\t\tregisterTexture(provider, Arrays.asList(items));\n+\t}\n+\n+\t/**\n+\t * Registers a provider for custom texture models for an item.\n+\t *\n+\t * @param provider the provider for the texture\n+\t * @param items    the items to be registered for\n+\t */\n+\tpublic static void registerTexture(@Nullable TextureProvider provider, Iterable<Item> items) {\n+\t\tArmorRenderingRegistryImpl.registerTexture(provider, items);\n+\t}\n+\n+\t/**\n+\t * Gets the model of the armor piece.\n+\t *\n+\t * @param entity       The entity equipping the armor\n+\t * @param stack        The item stack of the armor\n+\t * @param slot         The slot which the armor is in\n+\t * @param defaultModel The default model that vanilla provides\n+\t * @return The model of the armor piece. Should never be null.\n+\t */\n+\tpublic static BipedEntityModel<LivingEntity> getArmorModel(LivingEntity entity, ItemStack stack, EquipmentSlot slot, BipedEntityModel<LivingEntity> defaultModel) {\n+\t\treturn ArmorRenderingRegistryImpl.getArmorModel(entity, stack, slot, defaultModel);\n+\t}\n+\n+\t/**\n+\t * Gets the armor texture identifier in string, to be converted to {@link net.minecraft.util.Identifier}.\n+\t *\n+\t * @param entity         The entity equipping the armor\n+\t * @param stack          The item stack of the armor\n+\t * @param slot           The slot which the armor is in\n+\t * @param defaultTexture The default vanilla texture identifier\n+\t * @return the custom armor texture identifier, return null to use the vanilla ones. Defaulted to the item's registry id.\n+\t */\n+\t/* @Nullable */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df57a43587f2ae463d192560b01d57e8342369c"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzM4MTI5OnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/ArmorProviderExtensions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDowNTozMlrOHUaVFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDowNTozMlrOHUaVFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2NDk0OQ==", "bodyText": "Two missed annotation comments", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r491164949", "createdAt": "2020-09-18T20:05:32Z", "author": {"login": "NinjaPhenix"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/ArmorProviderExtensions.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import net.fabricmc.fabric.api.client.rendering.v1.ArmorRenderingRegistry;\n+\n+public interface ArmorProviderExtensions {\n+\t/* @Nullable */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df57a43587f2ae463d192560b01d57e8342369c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzM5MjMwOnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/testmod/java/net/fabricmc/fabric/test/rendering/client/CustomArmorTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODowODoyOFrOHgIf7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxNzoyNDowOFrOHjsYTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ1NTcyNQ==", "bodyText": "This (client) mod initializer registers items, meaning that it is not dedicated server compatible. It would be very simple to split this into two initializers in case someone would like to test this with a server.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r503455725", "createdAt": "2020-10-12T18:08:28Z", "author": {"login": "JamiesWhiteShirt"}, "path": "fabric-rendering-v1/src/testmod/java/net/fabricmc/fabric/test/rendering/client/CustomArmorTests.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.rendering.client;\n+\n+import java.util.Collections;\n+\n+import net.minecraft.client.model.ModelPart;\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ArmorItem;\n+import net.minecraft.item.ArmorMaterials;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemGroup;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.ArmorRenderingRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public class CustomArmorTests implements ClientModInitializer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "999562ac563d5ecf1f7f9edeedb8a9f93c31e624"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE4OTMyNg==", "bodyText": "Good point, IMO this is a blocker for merging.", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r507189326", "createdAt": "2020-10-18T17:24:08Z", "author": {"login": "modmuss50"}, "path": "fabric-rendering-v1/src/testmod/java/net/fabricmc/fabric/test/rendering/client/CustomArmorTests.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.rendering.client;\n+\n+import java.util.Collections;\n+\n+import net.minecraft.client.model.ModelPart;\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ArmorItem;\n+import net.minecraft.item.ArmorMaterials;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemGroup;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.ArmorRenderingRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public class CustomArmorTests implements ClientModInitializer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ1NTcyNQ=="}, "originalCommit": {"oid": "999562ac563d5ecf1f7f9edeedb8a9f93c31e624"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzQyNTE4OnYy", "diffSide": "RIGHT", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinArmorFeatureRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoxNzozOVrOHgI0Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoxNzozOVrOHgI0Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MDg4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tString model = ArmorRenderingRegistry.getArmorTexture(storedEntity, storedEntity.getEquippedStack(storedSlot), storedSlot, vanillaIdentifier);\n          \n          \n            \n            \n          \n          \n            \n            \t\tif (!Objects.equals(model, vanillaIdentifier)) {\n          \n          \n            \n            \t\t\tcir.setReturnValue(ARMOR_TEXTURE_CACHE.computeIfAbsent(model, Identifier::new));\n          \n          \n            \n            \t\tString texture = ArmorRenderingRegistry.getArmorTexture(storedEntity, storedEntity.getEquippedStack(storedSlot), storedSlot, vanillaIdentifier);\n          \n          \n            \n            \n          \n          \n            \n            \t\tif (!Objects.equals(texture, vanillaIdentifier)) {\n          \n          \n            \n            \t\t\tcir.setReturnValue(ARMOR_TEXTURE_CACHE.computeIfAbsent(texture, Identifier::new));", "url": "https://github.com/FabricMC/fabric/pull/963#discussion_r503460882", "createdAt": "2020-10-12T18:17:39Z", "author": {"login": "JamiesWhiteShirt"}, "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinArmorFeatureRenderer.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.client.rendering;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.entity.feature.ArmorFeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRendererContext;\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ArmorItem;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.ArmorRenderingRegistry;\n+\n+@Mixin(ArmorFeatureRenderer.class)\n+@Environment(EnvType.CLIENT)\n+public abstract class MixinArmorFeatureRenderer extends FeatureRenderer {\n+\t@Shadow\n+\t@Final\n+\tprivate static Map<String, Identifier> ARMOR_TEXTURE_CACHE;\n+\n+\tpublic MixinArmorFeatureRenderer(FeatureRendererContext context) {\n+\t\tsuper(context);\n+\t}\n+\n+\t@Unique\n+\tprivate LivingEntity storedEntity;\n+\t@Unique\n+\tprivate EquipmentSlot storedSlot;\n+\n+\t@Inject(method = \"render\", at = @At(\"HEAD\"))\n+\tprivate void storeEntity(MatrixStack matrixStack, VertexConsumerProvider vertexConsumerProvider, int i, LivingEntity livingEntity, float f, float g, float h, float j, float k, float l, CallbackInfo ci) {\n+\t\t// We store the living entity wearing the armor before we render\n+\t\tthis.storedEntity = livingEntity;\n+\t}\n+\n+\t@Inject(method = \"renderArmor\", at = @At(\"HEAD\"))\n+\tprivate void storeSlot(MatrixStack matrices, VertexConsumerProvider vertexConsumers, LivingEntity livingEntity, EquipmentSlot slot, int i, BipedEntityModel bipedEntityModel, CallbackInfo ci) {\n+\t\t// We store the current armor slot that is rendering before we render each armor piece\n+\t\tthis.storedSlot = slot;\n+\t}\n+\n+\t@Inject(method = \"render\", at = @At(\"RETURN\"))\n+\tprivate void removeStored(MatrixStack matrixStack, VertexConsumerProvider vertexConsumerProvider, int i, LivingEntity livingEntity, float f, float g, float h, float j, float k, float l, CallbackInfo ci) {\n+\t\t// We remove the stored data after we render\n+\t\tthis.storedEntity = null;\n+\t\tthis.storedSlot = null;\n+\t}\n+\n+\t@Inject(method = \"getArmor\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void selectArmorModel(EquipmentSlot slot, CallbackInfoReturnable<BipedEntityModel<LivingEntity>> cir) {\n+\t\tItemStack stack = storedEntity.getEquippedStack(slot);\n+\n+\t\tBipedEntityModel<LivingEntity> defaultModel = cir.getReturnValue();\n+\t\tBipedEntityModel<LivingEntity> model = ArmorRenderingRegistry.getArmorModel(storedEntity, stack, slot, defaultModel);\n+\n+\t\tif (model != defaultModel) {\n+\t\t\tcir.setReturnValue(model);\n+\t\t}\n+\t}\n+\n+\t@Inject(method = \"getArmorTexture\", at = @At(value = \"INVOKE\", target = \"Ljava/util/Map;computeIfAbsent(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\"), cancellable = true, locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate void getArmorTexture(ArmorItem armorItem, boolean secondLayer, /* @Nullable */ String suffix, CallbackInfoReturnable<Identifier> cir, String vanillaIdentifier) {\n+\t\tString model = ArmorRenderingRegistry.getArmorTexture(storedEntity, storedEntity.getEquippedStack(storedSlot), storedSlot, vanillaIdentifier);\n+\n+\t\tif (!Objects.equals(model, vanillaIdentifier)) {\n+\t\t\tcir.setReturnValue(ARMOR_TEXTURE_CACHE.computeIfAbsent(model, Identifier::new));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "999562ac563d5ecf1f7f9edeedb8a9f93c31e624"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3417, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}