{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNTc2ODk4", "number": 8046, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTozOTo0N1rODdzn7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo0NDoxMlrODdztDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTgxMTAwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTozOTo0N1rOFmnw3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDozNzo0M1rOFmu9aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MTY5Mw==", "bodyText": "Should we check that topicGroupId is not null?", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376041693", "createdAt": "2020-02-06T19:39:47Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -790,23 +790,18 @@ private int putNodeGroupName(final String nodeName,\n     }\n \n     public synchronized ProcessorTopology build() {\n-        return build((Integer) null);\n+        final Set<String> nodeGroup = new HashSet<>();\n+        for (final Set<String> value : nodeGroups().values()) {\n+            nodeGroup.addAll(value);\n+        }\n+        nodeGroup.removeAll(globalNodeGroups());\n+\n+        initializeSubscription();\n+        return build(nodeGroup);\n     }\n \n     public synchronized ProcessorTopology build(final Integer topicGroupId) {\n-        final Set<String> nodeGroup;\n-        if (topicGroupId != null) {\n-            nodeGroup = nodeGroups().get(topicGroupId);\n-        } else {\n-            // when topicGroupId is null, we build the full topology minus the global groups\n-            final Set<String> globalNodeGroups = globalNodeGroups();\n-            final Collection<Set<String>> values = nodeGroups().values();\n-            nodeGroup = new HashSet<>();\n-            for (final Set<String> value : values) {\n-                nodeGroup.addAll(value);\n-            }\n-            nodeGroup.removeAll(globalNodeGroups);\n-        }\n+        final Set<String> nodeGroup = nodeGroups().get(topicGroupId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39a82243d9959bc189405dea8c7d25393fc8fdd9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1NTM2OQ==", "bodyText": "I moved all calls  where topicGroupId would be null to now call the parameterless build() instead. We can actually make topicGroupId just a regular int now", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376155369", "createdAt": "2020-02-07T00:21:23Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -790,23 +790,18 @@ private int putNodeGroupName(final String nodeName,\n     }\n \n     public synchronized ProcessorTopology build() {\n-        return build((Integer) null);\n+        final Set<String> nodeGroup = new HashSet<>();\n+        for (final Set<String> value : nodeGroups().values()) {\n+            nodeGroup.addAll(value);\n+        }\n+        nodeGroup.removeAll(globalNodeGroups());\n+\n+        initializeSubscription();\n+        return build(nodeGroup);\n     }\n \n     public synchronized ProcessorTopology build(final Integer topicGroupId) {\n-        final Set<String> nodeGroup;\n-        if (topicGroupId != null) {\n-            nodeGroup = nodeGroups().get(topicGroupId);\n-        } else {\n-            // when topicGroupId is null, we build the full topology minus the global groups\n-            final Set<String> globalNodeGroups = globalNodeGroups();\n-            final Collection<Set<String>> values = nodeGroups().values();\n-            nodeGroup = new HashSet<>();\n-            for (final Set<String> value : values) {\n-                nodeGroup.addAll(value);\n-            }\n-            nodeGroup.removeAll(globalNodeGroups);\n-        }\n+        final Set<String> nodeGroup = nodeGroups().get(topicGroupId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MTY5Mw=="}, "originalCommit": {"oid": "39a82243d9959bc189405dea8c7d25393fc8fdd9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1OTU5Mg==", "bodyText": "Sounds good.", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376159592", "createdAt": "2020-02-07T00:37:43Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -790,23 +790,18 @@ private int putNodeGroupName(final String nodeName,\n     }\n \n     public synchronized ProcessorTopology build() {\n-        return build((Integer) null);\n+        final Set<String> nodeGroup = new HashSet<>();\n+        for (final Set<String> value : nodeGroups().values()) {\n+            nodeGroup.addAll(value);\n+        }\n+        nodeGroup.removeAll(globalNodeGroups());\n+\n+        initializeSubscription();\n+        return build(nodeGroup);\n     }\n \n     public synchronized ProcessorTopology build(final Integer topicGroupId) {\n-        final Set<String> nodeGroup;\n-        if (topicGroupId != null) {\n-            nodeGroup = nodeGroups().get(topicGroupId);\n-        } else {\n-            // when topicGroupId is null, we build the full topology minus the global groups\n-            final Set<String> globalNodeGroups = globalNodeGroups();\n-            final Collection<Set<String>> values = nodeGroups().values();\n-            nodeGroup = new HashSet<>();\n-            for (final Set<String> value : values) {\n-                nodeGroup.addAll(value);\n-            }\n-            nodeGroup.removeAll(globalNodeGroups);\n-        }\n+        final Set<String> nodeGroup = nodeGroups().get(topicGroupId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MTY5Mw=="}, "originalCommit": {"oid": "39a82243d9959bc189405dea8c7d25393fc8fdd9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTgxODIzOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo0MjoxNVrOFmn1gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDozMTowOVrOFmu2Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0Mjg4Mg==", "bodyText": "Hmm.. inside StreamThread do we guarantee we always call initializeSubscription before calling these two functions?", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376042882", "createdAt": "2020-02-06T19:42:15Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1210,32 +1205,29 @@ private String decorateTopic(final String topic) {\n         return applicationId + \"-\" + topic;\n     }\n \n+    void initializeSubscription() {\n+        if (usesPatternSubscription()) {\n+            log.debug(\"Found pattern subscribed source topics, initializing consumer's subscription pattern.\");\n+            final List<String> allSourceTopics = maybeDecorateInternalSourceTopics(sourceTopicNames);\n+            Collections.sort(allSourceTopics);\n+            sourceTopicPattern = buildPattern(allSourceTopics, nodeToSourcePatterns.values());\n+        } else {\n+            log.debug(\"No source topics using pattern subscription found, initializing consumer's subscription collection.\");\n+            sourceTopicCollection = maybeDecorateInternalSourceTopics(sourceTopicNames);\n+            Collections.sort(sourceTopicCollection);\n+        }\n+    }\n+\n     boolean usesPatternSubscription() {\n         return !nodeToSourcePatterns.isEmpty();\n     }\n \n     synchronized Collection<String> sourceTopicCollection() {\n-        log.debug(\"No source topics using pattern subscription found, using regular subscription for the main consumer.\");\n-\n-        if (topicCollection == null) {\n-            topicCollection = maybeDecorateInternalSourceTopics(sourceTopicNames);\n-            Collections.sort(topicCollection);\n-        }\n-\n-        return topicCollection;\n+        return sourceTopicCollection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39a82243d9959bc189405dea8c7d25393fc8fdd9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MzA3Mg==", "bodyText": "If not we should call initializeSubscription inside these two as well.", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376043072", "createdAt": "2020-02-06T19:42:41Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1210,32 +1205,29 @@ private String decorateTopic(final String topic) {\n         return applicationId + \"-\" + topic;\n     }\n \n+    void initializeSubscription() {\n+        if (usesPatternSubscription()) {\n+            log.debug(\"Found pattern subscribed source topics, initializing consumer's subscription pattern.\");\n+            final List<String> allSourceTopics = maybeDecorateInternalSourceTopics(sourceTopicNames);\n+            Collections.sort(allSourceTopics);\n+            sourceTopicPattern = buildPattern(allSourceTopics, nodeToSourcePatterns.values());\n+        } else {\n+            log.debug(\"No source topics using pattern subscription found, initializing consumer's subscription collection.\");\n+            sourceTopicCollection = maybeDecorateInternalSourceTopics(sourceTopicNames);\n+            Collections.sort(sourceTopicCollection);\n+        }\n+    }\n+\n     boolean usesPatternSubscription() {\n         return !nodeToSourcePatterns.isEmpty();\n     }\n \n     synchronized Collection<String> sourceTopicCollection() {\n-        log.debug(\"No source topics using pattern subscription found, using regular subscription for the main consumer.\");\n-\n-        if (topicCollection == null) {\n-            topicCollection = maybeDecorateInternalSourceTopics(sourceTopicNames);\n-            Collections.sort(topicCollection);\n-        }\n-\n-        return topicCollection;\n+        return sourceTopicCollection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0Mjg4Mg=="}, "originalCommit": {"oid": "39a82243d9959bc189405dea8c7d25393fc8fdd9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1Nzc5MQ==", "bodyText": "I put this initialization inside build(), which gets called in the KafkaStreams constructor before any StreamThreads get created, so the InternalTopologyBuilder should always have an initialized subscription by the time it gets passed to a thread.", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376157791", "createdAt": "2020-02-07T00:31:09Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1210,32 +1205,29 @@ private String decorateTopic(final String topic) {\n         return applicationId + \"-\" + topic;\n     }\n \n+    void initializeSubscription() {\n+        if (usesPatternSubscription()) {\n+            log.debug(\"Found pattern subscribed source topics, initializing consumer's subscription pattern.\");\n+            final List<String> allSourceTopics = maybeDecorateInternalSourceTopics(sourceTopicNames);\n+            Collections.sort(allSourceTopics);\n+            sourceTopicPattern = buildPattern(allSourceTopics, nodeToSourcePatterns.values());\n+        } else {\n+            log.debug(\"No source topics using pattern subscription found, initializing consumer's subscription collection.\");\n+            sourceTopicCollection = maybeDecorateInternalSourceTopics(sourceTopicNames);\n+            Collections.sort(sourceTopicCollection);\n+        }\n+    }\n+\n     boolean usesPatternSubscription() {\n         return !nodeToSourcePatterns.isEmpty();\n     }\n \n     synchronized Collection<String> sourceTopicCollection() {\n-        log.debug(\"No source topics using pattern subscription found, using regular subscription for the main consumer.\");\n-\n-        if (topicCollection == null) {\n-            topicCollection = maybeDecorateInternalSourceTopics(sourceTopicNames);\n-            Collections.sort(topicCollection);\n-        }\n-\n-        return topicCollection;\n+        return sourceTopicCollection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0Mjg4Mg=="}, "originalCommit": {"oid": "39a82243d9959bc189405dea8c7d25393fc8fdd9"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTgyNDE1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo0NDoxMlrOFmn5Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDozMTo1NVrOFmu3VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MzgyNw==", "bodyText": "Seems the callers are conditioned on usesPatternSubscription() already?", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376043827", "createdAt": "2020-02-06T19:44:12Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1872,37 +1864,35 @@ private boolean hasSubscriptionUpdates() {\n     }\n \n     synchronized void addSubscribedTopicsFromAssignment(final List<TopicPartition> partitions, final String logPrefix) {\n-        if (sourceTopicPattern() != null) {\n+        if (usesPatternSubscription()) {\n             final Set<String> assignedTopics = new HashSet<>();\n             for (final TopicPartition topicPartition : partitions) {\n                 assignedTopics.add(topicPartition.topic());\n             }\n-\n-            final Collection<String> existingTopics = subscriptionUpdates();\n-            if (!existingTopics.containsAll(assignedTopics)) {\n-                assignedTopics.addAll(existingTopics);\n-                updateSubscribedTopics(assignedTopics, logPrefix);\n-            }\n+            updateSubscribedTopics(assignedTopics, logPrefix);\n         }\n     }\n \n     synchronized void addSubscribedTopicsFromMetadata(final Set<String> topics, final String logPrefix) {\n-        if (sourceTopicPattern() != null) {\n-            final Collection<String> existingTopics = subscriptionUpdates();\n-            if (!existingTopics.equals(topics)) {\n-                topics.addAll(existingTopics);\n-                updateSubscribedTopics(topics, logPrefix);\n-            }\n+        if (usesPatternSubscription()) {\n+            updateSubscribedTopics(topics, logPrefix);\n         }\n     }\n \n     private void updateSubscribedTopics(final Set<String> topics, final String logPrefix) {\n-        log.debug(\"{}found {} topics possibly matching subscription\", logPrefix, topics.size());\n-        subscriptionUpdates.clear();\n-        subscriptionUpdates.addAll(topics);\n+        final Collection<String> existingTopics = subscriptionUpdates();\n+\n+        if  (usesPatternSubscription() && !existingTopics.equals(topics)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39a82243d9959bc189405dea8c7d25393fc8fdd9"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1ODAzNw==", "bodyText": "Good catch", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376158037", "createdAt": "2020-02-07T00:31:55Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1872,37 +1864,35 @@ private boolean hasSubscriptionUpdates() {\n     }\n \n     synchronized void addSubscribedTopicsFromAssignment(final List<TopicPartition> partitions, final String logPrefix) {\n-        if (sourceTopicPattern() != null) {\n+        if (usesPatternSubscription()) {\n             final Set<String> assignedTopics = new HashSet<>();\n             for (final TopicPartition topicPartition : partitions) {\n                 assignedTopics.add(topicPartition.topic());\n             }\n-\n-            final Collection<String> existingTopics = subscriptionUpdates();\n-            if (!existingTopics.containsAll(assignedTopics)) {\n-                assignedTopics.addAll(existingTopics);\n-                updateSubscribedTopics(assignedTopics, logPrefix);\n-            }\n+            updateSubscribedTopics(assignedTopics, logPrefix);\n         }\n     }\n \n     synchronized void addSubscribedTopicsFromMetadata(final Set<String> topics, final String logPrefix) {\n-        if (sourceTopicPattern() != null) {\n-            final Collection<String> existingTopics = subscriptionUpdates();\n-            if (!existingTopics.equals(topics)) {\n-                topics.addAll(existingTopics);\n-                updateSubscribedTopics(topics, logPrefix);\n-            }\n+        if (usesPatternSubscription()) {\n+            updateSubscribedTopics(topics, logPrefix);\n         }\n     }\n \n     private void updateSubscribedTopics(final Set<String> topics, final String logPrefix) {\n-        log.debug(\"{}found {} topics possibly matching subscription\", logPrefix, topics.size());\n-        subscriptionUpdates.clear();\n-        subscriptionUpdates.addAll(topics);\n+        final Collection<String> existingTopics = subscriptionUpdates();\n+\n+        if  (usesPatternSubscription() && !existingTopics.equals(topics)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MzgyNw=="}, "originalCommit": {"oid": "39a82243d9959bc189405dea8c7d25393fc8fdd9"}, "originalPosition": 131}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4194, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}