{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1ODIxNTEw", "number": 9643, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToxMzo0NFrOE8l-KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToxMzo0NFrOE8l-KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTcyMTM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToxMzo0NFrOH4zeNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyNzowN1rOH5DUyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMyNTYyMg==", "bodyText": "useless brackets", "url": "https://github.com/apache/kafka/pull/9643#discussion_r529325622", "createdAt": "2020-11-24T09:13:44Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala", "diffHunk": "@@ -151,21 +149,22 @@ object ConsumerGroupCommand extends Logging {\n   private[admin] case class CsvUtils() {\n     val mapper = new CsvMapper with ScalaObjectMapper\n     mapper.registerModule(DefaultScalaModule)\n-    def readerFor[T <: CsvRecord: ClassTag] = {\n+    def readerFor[T <: CsvRecord : ClassTag] = {\n       val schema = getSchema[T]\n       val clazz = implicitly[ClassTag[T]].runtimeClass\n       mapper.readerFor(clazz).`with`(schema)\n     }\n-    def writerFor[T <: CsvRecord: ClassTag] = {\n+    def writerFor[T <: CsvRecord : ClassTag] = {\n       val schema = getSchema[T]\n       val clazz = implicitly[ClassTag[T]].runtimeClass\n       mapper.writerFor(clazz).`with`(schema)\n     }\n-    private def getSchema[T <: CsvRecord: ClassTag] = {\n+    private def getSchema[T <: CsvRecord : ClassTag] = {\n       val clazz = implicitly[ClassTag[T]].runtimeClass\n-      val fields = clazz match {\n-        case _ if classOf[CsvRecordWithGroup] == clazz => CsvRecordWithGroup.fields\n-        case _ if classOf[CsvRecordNoGroup]   == clazz => CsvRecordNoGroup.fields\n+      val fields = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4NTM1NQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/kafka/pull/9643#discussion_r529585355", "createdAt": "2020-11-24T14:27:07Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala", "diffHunk": "@@ -151,21 +149,22 @@ object ConsumerGroupCommand extends Logging {\n   private[admin] case class CsvUtils() {\n     val mapper = new CsvMapper with ScalaObjectMapper\n     mapper.registerModule(DefaultScalaModule)\n-    def readerFor[T <: CsvRecord: ClassTag] = {\n+    def readerFor[T <: CsvRecord : ClassTag] = {\n       val schema = getSchema[T]\n       val clazz = implicitly[ClassTag[T]].runtimeClass\n       mapper.readerFor(clazz).`with`(schema)\n     }\n-    def writerFor[T <: CsvRecord: ClassTag] = {\n+    def writerFor[T <: CsvRecord : ClassTag] = {\n       val schema = getSchema[T]\n       val clazz = implicitly[ClassTag[T]].runtimeClass\n       mapper.writerFor(clazz).`with`(schema)\n     }\n-    private def getSchema[T <: CsvRecord: ClassTag] = {\n+    private def getSchema[T <: CsvRecord : ClassTag] = {\n       val clazz = implicitly[ClassTag[T]].runtimeClass\n-      val fields = clazz match {\n-        case _ if classOf[CsvRecordWithGroup] == clazz => CsvRecordWithGroup.fields\n-        case _ if classOf[CsvRecordNoGroup]   == clazz => CsvRecordNoGroup.fields\n+      val fields = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMyNTYyMg=="}, "originalCommit": null, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3611, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}