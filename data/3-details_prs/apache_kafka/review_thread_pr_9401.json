{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMzYzNjA1", "number": 9401, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1ODoxOVrOEzVpbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoxMTo1NVrOE6q4_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjY3NTAxOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1ODoxOVrOHqf-Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNDoxMDowMlrOHq-E_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyNjAyMg==", "bodyText": "Would it make sense to move this to the builder where we are already doing a pass over the partitions?", "url": "https://github.com/apache/kafka/pull/9401#discussion_r514326022", "createdAt": "2020-10-29T14:58:19Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "diffHunk": "@@ -210,65 +142,42 @@ public String toString() {\n         }\n     }\n \n+    /**\n+     * We have to copy acks, timeout, transactionalId and partitionSizes from data since data maybe reset to eliminate\n+     * the reference to ByteBuffer but those metadata are still useful.\n+     */\n     private final short acks;\n     private final int timeout;\n     private final String transactionalId;\n-\n-    private final Map<TopicPartition, Integer> partitionSizes;\n-\n+    // visible for testing\n+    final Map<TopicPartition, Integer> partitionSizes;\n+    private boolean hasTransactionalRecords = false;\n+    private boolean hasIdempotentRecords = false;\n     // This is set to null by `clearPartitionRecords` to prevent unnecessary memory retention when a produce request is\n     // put in the purgatory (due to client throttling, it can take a while before the response is sent).\n     // Care should be taken in methods that use this field.\n-    private volatile Map<TopicPartition, MemoryRecords> partitionRecords;\n-    private boolean hasTransactionalRecords = false;\n-    private boolean hasIdempotentRecords = false;\n-\n-    private ProduceRequest(short version, short acks, int timeout, Map<TopicPartition, MemoryRecords> partitionRecords, String transactionalId) {\n-        super(ApiKeys.PRODUCE, version);\n-        this.acks = acks;\n-        this.timeout = timeout;\n-\n-        this.transactionalId = transactionalId;\n-        this.partitionRecords = partitionRecords;\n-        this.partitionSizes = createPartitionSizes(partitionRecords);\n+    private volatile ProduceRequestData data;\n \n-        for (MemoryRecords records : partitionRecords.values()) {\n-            setFlags(records);\n-        }\n-    }\n-\n-    private static Map<TopicPartition, Integer> createPartitionSizes(Map<TopicPartition, MemoryRecords> partitionRecords) {\n-        Map<TopicPartition, Integer> result = new HashMap<>(partitionRecords.size());\n-        for (Map.Entry<TopicPartition, MemoryRecords> entry : partitionRecords.entrySet())\n-            result.put(entry.getKey(), entry.getValue().sizeInBytes());\n-        return result;\n-    }\n-\n-    public ProduceRequest(Struct struct, short version) {\n+    public ProduceRequest(ProduceRequestData produceRequestData, short version) {\n         super(ApiKeys.PRODUCE, version);\n-        partitionRecords = new HashMap<>();\n-        for (Object topicDataObj : struct.getArray(TOPIC_DATA_KEY_NAME)) {\n-            Struct topicData = (Struct) topicDataObj;\n-            String topic = topicData.get(TOPIC_NAME);\n-            for (Object partitionResponseObj : topicData.getArray(PARTITION_DATA_KEY_NAME)) {\n-                Struct partitionResponse = (Struct) partitionResponseObj;\n-                int partition = partitionResponse.get(PARTITION_ID);\n-                MemoryRecords records = (MemoryRecords) partitionResponse.getRecords(RECORD_SET_KEY_NAME);\n-                setFlags(records);\n-                partitionRecords.put(new TopicPartition(topic, partition), records);\n-            }\n-        }\n-        partitionSizes = createPartitionSizes(partitionRecords);\n-        acks = struct.getShort(ACKS_KEY_NAME);\n-        timeout = struct.getInt(TIMEOUT_KEY_NAME);\n-        transactionalId = struct.getOrElse(NULLABLE_TRANSACTIONAL_ID, null);\n-    }\n-\n-    private void setFlags(MemoryRecords records) {\n-        Iterator<MutableRecordBatch> iterator = records.batches().iterator();\n-        MutableRecordBatch entry = iterator.next();\n-        hasIdempotentRecords = hasIdempotentRecords || entry.hasProducerId();\n-        hasTransactionalRecords = hasTransactionalRecords || entry.isTransactional();\n+        this.data = produceRequestData;\n+        this.data.topicData().forEach(topicProduceData -> topicProduceData.partitions()\n+            .forEach(partitionProduceData -> {\n+                MemoryRecords records = MemoryRecords.readableRecords(partitionProduceData.records());\n+                Iterator<MutableRecordBatch> iterator = records.batches().iterator();\n+                MutableRecordBatch entry = iterator.next();\n+                hasIdempotentRecords = hasIdempotentRecords || entry.hasProducerId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2NzY1Mg==", "bodyText": "Nevermind, I guess we have to do it here because the server needs to validate the request received from the client.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r514467652", "createdAt": "2020-10-29T18:12:10Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "diffHunk": "@@ -210,65 +142,42 @@ public String toString() {\n         }\n     }\n \n+    /**\n+     * We have to copy acks, timeout, transactionalId and partitionSizes from data since data maybe reset to eliminate\n+     * the reference to ByteBuffer but those metadata are still useful.\n+     */\n     private final short acks;\n     private final int timeout;\n     private final String transactionalId;\n-\n-    private final Map<TopicPartition, Integer> partitionSizes;\n-\n+    // visible for testing\n+    final Map<TopicPartition, Integer> partitionSizes;\n+    private boolean hasTransactionalRecords = false;\n+    private boolean hasIdempotentRecords = false;\n     // This is set to null by `clearPartitionRecords` to prevent unnecessary memory retention when a produce request is\n     // put in the purgatory (due to client throttling, it can take a while before the response is sent).\n     // Care should be taken in methods that use this field.\n-    private volatile Map<TopicPartition, MemoryRecords> partitionRecords;\n-    private boolean hasTransactionalRecords = false;\n-    private boolean hasIdempotentRecords = false;\n-\n-    private ProduceRequest(short version, short acks, int timeout, Map<TopicPartition, MemoryRecords> partitionRecords, String transactionalId) {\n-        super(ApiKeys.PRODUCE, version);\n-        this.acks = acks;\n-        this.timeout = timeout;\n-\n-        this.transactionalId = transactionalId;\n-        this.partitionRecords = partitionRecords;\n-        this.partitionSizes = createPartitionSizes(partitionRecords);\n+    private volatile ProduceRequestData data;\n \n-        for (MemoryRecords records : partitionRecords.values()) {\n-            setFlags(records);\n-        }\n-    }\n-\n-    private static Map<TopicPartition, Integer> createPartitionSizes(Map<TopicPartition, MemoryRecords> partitionRecords) {\n-        Map<TopicPartition, Integer> result = new HashMap<>(partitionRecords.size());\n-        for (Map.Entry<TopicPartition, MemoryRecords> entry : partitionRecords.entrySet())\n-            result.put(entry.getKey(), entry.getValue().sizeInBytes());\n-        return result;\n-    }\n-\n-    public ProduceRequest(Struct struct, short version) {\n+    public ProduceRequest(ProduceRequestData produceRequestData, short version) {\n         super(ApiKeys.PRODUCE, version);\n-        partitionRecords = new HashMap<>();\n-        for (Object topicDataObj : struct.getArray(TOPIC_DATA_KEY_NAME)) {\n-            Struct topicData = (Struct) topicDataObj;\n-            String topic = topicData.get(TOPIC_NAME);\n-            for (Object partitionResponseObj : topicData.getArray(PARTITION_DATA_KEY_NAME)) {\n-                Struct partitionResponse = (Struct) partitionResponseObj;\n-                int partition = partitionResponse.get(PARTITION_ID);\n-                MemoryRecords records = (MemoryRecords) partitionResponse.getRecords(RECORD_SET_KEY_NAME);\n-                setFlags(records);\n-                partitionRecords.put(new TopicPartition(topic, partition), records);\n-            }\n-        }\n-        partitionSizes = createPartitionSizes(partitionRecords);\n-        acks = struct.getShort(ACKS_KEY_NAME);\n-        timeout = struct.getInt(TIMEOUT_KEY_NAME);\n-        transactionalId = struct.getOrElse(NULLABLE_TRANSACTIONAL_ID, null);\n-    }\n-\n-    private void setFlags(MemoryRecords records) {\n-        Iterator<MutableRecordBatch> iterator = records.batches().iterator();\n-        MutableRecordBatch entry = iterator.next();\n-        hasIdempotentRecords = hasIdempotentRecords || entry.hasProducerId();\n-        hasTransactionalRecords = hasTransactionalRecords || entry.isTransactional();\n+        this.data = produceRequestData;\n+        this.data.topicData().forEach(topicProduceData -> topicProduceData.partitions()\n+            .forEach(partitionProduceData -> {\n+                MemoryRecords records = MemoryRecords.readableRecords(partitionProduceData.records());\n+                Iterator<MutableRecordBatch> iterator = records.batches().iterator();\n+                MutableRecordBatch entry = iterator.next();\n+                hasIdempotentRecords = hasIdempotentRecords || entry.hasProducerId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyNjAyMg=="}, "originalCommit": null, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5NDU5Ng==", "bodyText": "On the other hand, we might want to move this logic into a helper in KafkaApis so that these objects are dedicated only to serialization logic. Eventually we'll want to get rid of ProduceRequest and just use ProduceRequestData.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r514594596", "createdAt": "2020-10-29T22:05:00Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "diffHunk": "@@ -210,65 +142,42 @@ public String toString() {\n         }\n     }\n \n+    /**\n+     * We have to copy acks, timeout, transactionalId and partitionSizes from data since data maybe reset to eliminate\n+     * the reference to ByteBuffer but those metadata are still useful.\n+     */\n     private final short acks;\n     private final int timeout;\n     private final String transactionalId;\n-\n-    private final Map<TopicPartition, Integer> partitionSizes;\n-\n+    // visible for testing\n+    final Map<TopicPartition, Integer> partitionSizes;\n+    private boolean hasTransactionalRecords = false;\n+    private boolean hasIdempotentRecords = false;\n     // This is set to null by `clearPartitionRecords` to prevent unnecessary memory retention when a produce request is\n     // put in the purgatory (due to client throttling, it can take a while before the response is sent).\n     // Care should be taken in methods that use this field.\n-    private volatile Map<TopicPartition, MemoryRecords> partitionRecords;\n-    private boolean hasTransactionalRecords = false;\n-    private boolean hasIdempotentRecords = false;\n-\n-    private ProduceRequest(short version, short acks, int timeout, Map<TopicPartition, MemoryRecords> partitionRecords, String transactionalId) {\n-        super(ApiKeys.PRODUCE, version);\n-        this.acks = acks;\n-        this.timeout = timeout;\n-\n-        this.transactionalId = transactionalId;\n-        this.partitionRecords = partitionRecords;\n-        this.partitionSizes = createPartitionSizes(partitionRecords);\n+    private volatile ProduceRequestData data;\n \n-        for (MemoryRecords records : partitionRecords.values()) {\n-            setFlags(records);\n-        }\n-    }\n-\n-    private static Map<TopicPartition, Integer> createPartitionSizes(Map<TopicPartition, MemoryRecords> partitionRecords) {\n-        Map<TopicPartition, Integer> result = new HashMap<>(partitionRecords.size());\n-        for (Map.Entry<TopicPartition, MemoryRecords> entry : partitionRecords.entrySet())\n-            result.put(entry.getKey(), entry.getValue().sizeInBytes());\n-        return result;\n-    }\n-\n-    public ProduceRequest(Struct struct, short version) {\n+    public ProduceRequest(ProduceRequestData produceRequestData, short version) {\n         super(ApiKeys.PRODUCE, version);\n-        partitionRecords = new HashMap<>();\n-        for (Object topicDataObj : struct.getArray(TOPIC_DATA_KEY_NAME)) {\n-            Struct topicData = (Struct) topicDataObj;\n-            String topic = topicData.get(TOPIC_NAME);\n-            for (Object partitionResponseObj : topicData.getArray(PARTITION_DATA_KEY_NAME)) {\n-                Struct partitionResponse = (Struct) partitionResponseObj;\n-                int partition = partitionResponse.get(PARTITION_ID);\n-                MemoryRecords records = (MemoryRecords) partitionResponse.getRecords(RECORD_SET_KEY_NAME);\n-                setFlags(records);\n-                partitionRecords.put(new TopicPartition(topic, partition), records);\n-            }\n-        }\n-        partitionSizes = createPartitionSizes(partitionRecords);\n-        acks = struct.getShort(ACKS_KEY_NAME);\n-        timeout = struct.getInt(TIMEOUT_KEY_NAME);\n-        transactionalId = struct.getOrElse(NULLABLE_TRANSACTIONAL_ID, null);\n-    }\n-\n-    private void setFlags(MemoryRecords records) {\n-        Iterator<MutableRecordBatch> iterator = records.batches().iterator();\n-        MutableRecordBatch entry = iterator.next();\n-        hasIdempotentRecords = hasIdempotentRecords || entry.hasProducerId();\n-        hasTransactionalRecords = hasTransactionalRecords || entry.isTransactional();\n+        this.data = produceRequestData;\n+        this.data.topicData().forEach(topicProduceData -> topicProduceData.partitions()\n+            .forEach(partitionProduceData -> {\n+                MemoryRecords records = MemoryRecords.readableRecords(partitionProduceData.records());\n+                Iterator<MutableRecordBatch> iterator = records.batches().iterator();\n+                MutableRecordBatch entry = iterator.next();\n+                hasIdempotentRecords = hasIdempotentRecords || entry.hasProducerId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyNjAyMg=="}, "originalCommit": null, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDgxOTMyNg==", "bodyText": "clients module has some tests which depends on it so I moves the helper to RequestUtils.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r514819326", "createdAt": "2020-10-30T04:10:02Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "diffHunk": "@@ -210,65 +142,42 @@ public String toString() {\n         }\n     }\n \n+    /**\n+     * We have to copy acks, timeout, transactionalId and partitionSizes from data since data maybe reset to eliminate\n+     * the reference to ByteBuffer but those metadata are still useful.\n+     */\n     private final short acks;\n     private final int timeout;\n     private final String transactionalId;\n-\n-    private final Map<TopicPartition, Integer> partitionSizes;\n-\n+    // visible for testing\n+    final Map<TopicPartition, Integer> partitionSizes;\n+    private boolean hasTransactionalRecords = false;\n+    private boolean hasIdempotentRecords = false;\n     // This is set to null by `clearPartitionRecords` to prevent unnecessary memory retention when a produce request is\n     // put in the purgatory (due to client throttling, it can take a while before the response is sent).\n     // Care should be taken in methods that use this field.\n-    private volatile Map<TopicPartition, MemoryRecords> partitionRecords;\n-    private boolean hasTransactionalRecords = false;\n-    private boolean hasIdempotentRecords = false;\n-\n-    private ProduceRequest(short version, short acks, int timeout, Map<TopicPartition, MemoryRecords> partitionRecords, String transactionalId) {\n-        super(ApiKeys.PRODUCE, version);\n-        this.acks = acks;\n-        this.timeout = timeout;\n-\n-        this.transactionalId = transactionalId;\n-        this.partitionRecords = partitionRecords;\n-        this.partitionSizes = createPartitionSizes(partitionRecords);\n+    private volatile ProduceRequestData data;\n \n-        for (MemoryRecords records : partitionRecords.values()) {\n-            setFlags(records);\n-        }\n-    }\n-\n-    private static Map<TopicPartition, Integer> createPartitionSizes(Map<TopicPartition, MemoryRecords> partitionRecords) {\n-        Map<TopicPartition, Integer> result = new HashMap<>(partitionRecords.size());\n-        for (Map.Entry<TopicPartition, MemoryRecords> entry : partitionRecords.entrySet())\n-            result.put(entry.getKey(), entry.getValue().sizeInBytes());\n-        return result;\n-    }\n-\n-    public ProduceRequest(Struct struct, short version) {\n+    public ProduceRequest(ProduceRequestData produceRequestData, short version) {\n         super(ApiKeys.PRODUCE, version);\n-        partitionRecords = new HashMap<>();\n-        for (Object topicDataObj : struct.getArray(TOPIC_DATA_KEY_NAME)) {\n-            Struct topicData = (Struct) topicDataObj;\n-            String topic = topicData.get(TOPIC_NAME);\n-            for (Object partitionResponseObj : topicData.getArray(PARTITION_DATA_KEY_NAME)) {\n-                Struct partitionResponse = (Struct) partitionResponseObj;\n-                int partition = partitionResponse.get(PARTITION_ID);\n-                MemoryRecords records = (MemoryRecords) partitionResponse.getRecords(RECORD_SET_KEY_NAME);\n-                setFlags(records);\n-                partitionRecords.put(new TopicPartition(topic, partition), records);\n-            }\n-        }\n-        partitionSizes = createPartitionSizes(partitionRecords);\n-        acks = struct.getShort(ACKS_KEY_NAME);\n-        timeout = struct.getInt(TIMEOUT_KEY_NAME);\n-        transactionalId = struct.getOrElse(NULLABLE_TRANSACTIONAL_ID, null);\n-    }\n-\n-    private void setFlags(MemoryRecords records) {\n-        Iterator<MutableRecordBatch> iterator = records.batches().iterator();\n-        MutableRecordBatch entry = iterator.next();\n-        hasIdempotentRecords = hasIdempotentRecords || entry.hasProducerId();\n-        hasTransactionalRecords = hasTransactionalRecords || entry.isTransactional();\n+        this.data = produceRequestData;\n+        this.data.topicData().forEach(topicProduceData -> topicProduceData.partitions()\n+            .forEach(partitionProduceData -> {\n+                MemoryRecords records = MemoryRecords.readableRecords(partitionProduceData.records());\n+                Iterator<MutableRecordBatch> iterator = records.batches().iterator();\n+                MutableRecordBatch entry = iterator.next();\n+                hasIdempotentRecords = hasIdempotentRecords || entry.hasProducerId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyNjAyMg=="}, "originalCommit": null, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjczNjE0OnYy", "diffSide": "LEFT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxMDozMVrOHqgj5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxMDozMVrOHqgj5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzNTcxNg==", "bodyText": "Kind of a pity to lose this. Can we move it to the class documentation?", "url": "https://github.com/apache/kafka/pull/9401#discussion_r514335716", "createdAt": "2020-10-29T15:10:31Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "diffHunk": "@@ -17,179 +17,48 @@\n package org.apache.kafka.common.requests;\n \n import org.apache.kafka.common.TopicPartition;\n-import org.apache.kafka.common.protocol.ApiKeys;\n+import org.apache.kafka.common.message.ProduceResponseData;\n+import org.apache.kafka.common.protocol.ByteBufferAccessor;\n import org.apache.kafka.common.protocol.Errors;\n-import org.apache.kafka.common.protocol.types.ArrayOf;\n-import org.apache.kafka.common.protocol.types.Field;\n-import org.apache.kafka.common.protocol.types.Schema;\n import org.apache.kafka.common.protocol.types.Struct;\n import org.apache.kafka.common.record.RecordBatch;\n-import org.apache.kafka.common.utils.CollectionUtils;\n \n import java.nio.ByteBuffer;\n-import java.util.ArrayList;\n+import java.util.AbstractMap;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-\n-import static org.apache.kafka.common.protocol.CommonFields.ERROR_CODE;\n-import static org.apache.kafka.common.protocol.CommonFields.PARTITION_ID;\n-import static org.apache.kafka.common.protocol.CommonFields.THROTTLE_TIME_MS;\n-import static org.apache.kafka.common.protocol.CommonFields.TOPIC_NAME;\n-import static org.apache.kafka.common.protocol.types.Type.INT64;\n+import java.util.stream.Collectors;\n \n /**\n- * This wrapper supports both v0 and v1 of ProduceResponse.\n+ * This wrapper supports both v0 and v8 of ProduceResponse.\n  */\n public class ProduceResponse extends AbstractResponse {\n-\n-    private static final String RESPONSES_KEY_NAME = \"responses\";\n-\n-    // topic level field names\n-    private static final String PARTITION_RESPONSES_KEY_NAME = \"partition_responses\";\n-\n     public static final long INVALID_OFFSET = -1L;\n+    private final ProduceResponseData data;\n+    private final Map<TopicPartition, PartitionResponse> responses;\n \n-    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjc2NDM5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/ProduceRequest.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxNjowOVrOHqg1Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjo1NzowN1rOHrDL2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MDE3OA==", "bodyText": "Hmm, not sure about making this ignorable. For transactional data, I think the broker would just fail if it cannot authorize the transactionalId.\nAlso, should we set the default to null?", "url": "https://github.com/apache/kafka/pull/9401#discussion_r514340178", "createdAt": "2020-10-29T15:16:09Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/ProduceRequest.json", "diffHunk": "@@ -33,21 +33,21 @@\n   \"validVersions\": \"0-8\",\n   \"flexibleVersions\": \"none\",\n   \"fields\": [\n-    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"0+\", \"entityType\": \"transactionalId\",\n+    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"3+\", \"ignorable\": true, \"entityType\": \"transactionalId\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwMzAwMQ==", "bodyText": "you are right. will Roger that.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r514903001", "createdAt": "2020-10-30T06:57:07Z", "author": {"login": "chia7712"}, "path": "clients/src/main/resources/common/message/ProduceRequest.json", "diffHunk": "@@ -33,21 +33,21 @@\n   \"validVersions\": \"0-8\",\n   \"flexibleVersions\": \"none\",\n   \"fields\": [\n-    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"0+\", \"entityType\": \"transactionalId\",\n+    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"3+\", \"ignorable\": true, \"entityType\": \"transactionalId\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MDE3OA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjc3NzMxOnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/ProduceRequest.json", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxODo1MlrOHqg9jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMjowMjoxN1rOHvCM6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MjI4NQ==", "bodyText": "nit: I kind of liked the original name to make the unit clear. We're probably not consistent on this convention though.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r514342285", "createdAt": "2020-10-29T15:18:52Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/ProduceRequest.json", "diffHunk": "@@ -33,21 +33,21 @@\n   \"validVersions\": \"0-8\",\n   \"flexibleVersions\": \"none\",\n   \"fields\": [\n-    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"0+\", \"entityType\": \"transactionalId\",\n+    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"3+\", \"ignorable\": true, \"entityType\": \"transactionalId\",\n       \"about\": \"The transactional ID, or null if the producer is not transactional.\" },\n     { \"name\": \"Acks\", \"type\": \"int16\", \"versions\": \"0+\",\n       \"about\": \"The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.\" },\n-    { \"name\": \"TimeoutMs\", \"type\": \"int32\", \"versions\": \"0+\",\n+    { \"name\": \"Timeout\", \"type\": \"int32\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ2Njc1NA==", "bodyText": "This change is for compatibility. The name used by origin serialization is \"timeout\" rather than \"timeoutMs\" (see https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java#L54).", "url": "https://github.com/apache/kafka/pull/9401#discussion_r515466754", "createdAt": "2020-10-31T07:17:31Z", "author": {"login": "chia7712"}, "path": "clients/src/main/resources/common/message/ProduceRequest.json", "diffHunk": "@@ -33,21 +33,21 @@\n   \"validVersions\": \"0-8\",\n   \"flexibleVersions\": \"none\",\n   \"fields\": [\n-    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"0+\", \"entityType\": \"transactionalId\",\n+    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"3+\", \"ignorable\": true, \"entityType\": \"transactionalId\",\n       \"about\": \"The transactional ID, or null if the producer is not transactional.\" },\n     { \"name\": \"Acks\", \"type\": \"int16\", \"versions\": \"0+\",\n       \"about\": \"The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.\" },\n-    { \"name\": \"TimeoutMs\", \"type\": \"int32\", \"versions\": \"0+\",\n+    { \"name\": \"Timeout\", \"type\": \"int32\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MjI4NQ=="}, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NDg5MQ==", "bodyText": "The names do not get serialized, so I think we can make them whatever we want.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r518984891", "createdAt": "2020-11-06T20:18:56Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/ProduceRequest.json", "diffHunk": "@@ -33,21 +33,21 @@\n   \"validVersions\": \"0-8\",\n   \"flexibleVersions\": \"none\",\n   \"fields\": [\n-    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"0+\", \"entityType\": \"transactionalId\",\n+    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"3+\", \"ignorable\": true, \"entityType\": \"transactionalId\",\n       \"about\": \"The transactional ID, or null if the producer is not transactional.\" },\n     { \"name\": \"Acks\", \"type\": \"int16\", \"versions\": \"0+\",\n       \"about\": \"The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.\" },\n-    { \"name\": \"TimeoutMs\", \"type\": \"int32\", \"versions\": \"0+\",\n+    { \"name\": \"Timeout\", \"type\": \"int32\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MjI4NQ=="}, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2NjEzNA==", "bodyText": "This is a major question when I am processing those protocol migration PRs.\nThe Struct deserialization depends on the \"name\" (\n  \n    \n      kafka/clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java\n    \n    \n         Line 250\n      in\n      8e211eb\n    \n    \n    \n    \n\n        \n          \n           for (Object topicDataObj : struct.getArray(TOPIC_DATA_KEY_NAME)) { \n        \n    \n  \n\n). Struct.get(xxx) searches the index according to \"name\". Hence, changing the name breaks compatibility since the Struct serialization can not find the correct field. (That is to say, the previous protocol fails to deserialize the data from new auto-generated protocol)\nPlease correct me if I misunderstood protocol mechanism.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r519066134", "createdAt": "2020-11-07T00:21:51Z", "author": {"login": "chia7712"}, "path": "clients/src/main/resources/common/message/ProduceRequest.json", "diffHunk": "@@ -33,21 +33,21 @@\n   \"validVersions\": \"0-8\",\n   \"flexibleVersions\": \"none\",\n   \"fields\": [\n-    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"0+\", \"entityType\": \"transactionalId\",\n+    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"3+\", \"ignorable\": true, \"entityType\": \"transactionalId\",\n       \"about\": \"The transactional ID, or null if the producer is not transactional.\" },\n     { \"name\": \"Acks\", \"type\": \"int16\", \"versions\": \"0+\",\n       \"about\": \"The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.\" },\n-    { \"name\": \"TimeoutMs\", \"type\": \"int32\", \"versions\": \"0+\",\n+    { \"name\": \"Timeout\", \"type\": \"int32\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MjI4NQ=="}, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA4MTE5NQ==", "bodyText": "oh, I trace the code again. You are right. The name is not serialized.\nI will revise the field names as you suggested.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r519081195", "createdAt": "2020-11-07T02:02:17Z", "author": {"login": "chia7712"}, "path": "clients/src/main/resources/common/message/ProduceRequest.json", "diffHunk": "@@ -33,21 +33,21 @@\n   \"validVersions\": \"0-8\",\n   \"flexibleVersions\": \"none\",\n   \"fields\": [\n-    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"0+\", \"entityType\": \"transactionalId\",\n+    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"3+\", \"ignorable\": true, \"entityType\": \"transactionalId\",\n       \"about\": \"The transactional ID, or null if the producer is not transactional.\" },\n     { \"name\": \"Acks\", \"type\": \"int16\", \"versions\": \"0+\",\n       \"about\": \"The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.\" },\n-    { \"name\": \"TimeoutMs\", \"type\": \"int32\", \"versions\": \"0+\",\n+    { \"name\": \"Timeout\", \"type\": \"int32\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MjI4NQ=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjgwMTc3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToyNDowMVrOHqhNJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToyNDowMVrOHqhNJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjI3OQ==", "bodyText": "Wondering if we may as well rewrite this using ProduceResponseData.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r514346279", "createdAt": "2020-10-29T15:24:01Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java", "diffHunk": "@@ -218,6 +218,7 @@ private void checkSimpleRequestResponse(NetworkClient networkClient) {\n                 request.apiKey().responseHeaderVersion(PRODUCE.latestVersion()));\n         Struct resp = new Struct(PRODUCE.responseSchema(PRODUCE.latestVersion()));\n         resp.set(\"responses\", new Object[0]);\n+        resp.set(CommonFields.THROTTLE_TIME_MS, 100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjkxMTg2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDowNjowOVrOHu70XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwMzoyNzozM1rOHvMjhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3NjYwNQ==", "bodyText": "Is the plan to save this for a follow-up? It looks like it will be a bit of effort to trace down all the uses, but seems doable.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r518976605", "createdAt": "2020-11-06T20:06:09Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java", "diffHunk": "@@ -560,13 +561,23 @@ private void handleProduceResponse(ClientResponse response, Map<TopicPartition,\n             log.trace(\"Received produce response from node {} with correlation id {}\", response.destination(), correlationId);\n             // if we have a response, parse it\n             if (response.hasResponse()) {\n+                // TODO: Sender should exercise PartitionProduceResponse rather than ProduceResponse.PartitionResponse", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1MDgyMw==", "bodyText": "https://issues.apache.org/jira/browse/KAFKA-10696", "url": "https://github.com/apache/kafka/pull/9401#discussion_r519250823", "createdAt": "2020-11-08T03:27:33Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java", "diffHunk": "@@ -560,13 +561,23 @@ private void handleProduceResponse(ClientResponse response, Map<TopicPartition,\n             log.trace(\"Received produce response from node {} with correlation id {}\", response.destination(), correlationId);\n             // if we have a response, parse it\n             if (response.hasResponse()) {\n+                // TODO: Sender should exercise PartitionProduceResponse rather than ProduceResponse.PartitionResponse", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3NjYwNQ=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjkyNjA2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDowOTowNlrOHu79Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMTo0NDoyOVrOHvCE8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3ODg2Mw==", "bodyText": "I wonder if we would get any benefit computing partitionSizes during this pass.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r518978863", "createdAt": "2020-11-06T20:09:06Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "diffHunk": "@@ -194,7 +107,27 @@ private ProduceRequest build(short version, boolean validate) {\n                     ProduceRequest.validateRecords(version, records);\n                 }\n             }\n-            return new ProduceRequest(version, acks, timeout, partitionRecords, transactionalId);\n+\n+            List<ProduceRequestData.TopicProduceData> tpd = partitionRecords", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4OTc1Ng==", "bodyText": "We could probably also compute partitionSizes lazily. I think the broker is the only one that uses it.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r518989756", "createdAt": "2020-11-06T20:30:39Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "diffHunk": "@@ -194,7 +107,27 @@ private ProduceRequest build(short version, boolean validate) {\n                     ProduceRequest.validateRecords(version, records);\n                 }\n             }\n-            return new ProduceRequest(version, acks, timeout, partitionRecords, transactionalId);\n+\n+            List<ProduceRequestData.TopicProduceData> tpd = partitionRecords", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3ODg2Mw=="}, "originalCommit": null, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2NzY1NQ==", "bodyText": "The \"data\" may be cleared to null (for GC) so it is a risk if we lazily initialize the partition size.\nI considered to remove it as it is used by log only (toString).", "url": "https://github.com/apache/kafka/pull/9401#discussion_r519067655", "createdAt": "2020-11-07T00:29:40Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "diffHunk": "@@ -194,7 +107,27 @@ private ProduceRequest build(short version, boolean validate) {\n                     ProduceRequest.validateRecords(version, records);\n                 }\n             }\n-            return new ProduceRequest(version, acks, timeout, partitionRecords, transactionalId);\n+\n+            List<ProduceRequestData.TopicProduceData> tpd = partitionRecords", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3ODg2Mw=="}, "originalCommit": null, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3OTE1Mw==", "bodyText": "Right. I thought we might consider computing it just before the data gets cleared.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r519079153", "createdAt": "2020-11-07T01:44:29Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "diffHunk": "@@ -194,7 +107,27 @@ private ProduceRequest build(short version, boolean validate) {\n                     ProduceRequest.validateRecords(version, records);\n                 }\n             }\n-            return new ProduceRequest(version, acks, timeout, partitionRecords, transactionalId);\n+\n+            List<ProduceRequestData.TopicProduceData> tpd = partitionRecords", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3ODg2Mw=="}, "originalCommit": null, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjk1OTA4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoxNjo0OFrOHu8RgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyODoxNVrOHwngWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NDA2NA==", "bodyText": "Not required, but this would be easier to follow up if we had some helpers.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r518984064", "createdAt": "2020-11-06T20:16:48Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "diffHunk": "@@ -204,118 +75,78 @@ public ProduceResponse(Map<TopicPartition, PartitionResponse> responses) {\n      * @param throttleTimeMs Time in milliseconds the response was throttled\n      */\n     public ProduceResponse(Map<TopicPartition, PartitionResponse> responses, int throttleTimeMs) {\n-        this.responses = responses;\n-        this.throttleTimeMs = throttleTimeMs;\n+        this(new ProduceResponseData()\n+            .setResponses(responses.entrySet()\n+                .stream()\n+                .collect(Collectors.groupingBy(e -> e.getKey().topic()))\n+                .entrySet()\n+                .stream()\n+                .map(topicData -> new ProduceResponseData.TopicProduceResponse()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1MTY3MQ==", "bodyText": "Pardon me. why it is not required?", "url": "https://github.com/apache/kafka/pull/9401#discussion_r519251671", "createdAt": "2020-11-08T03:40:43Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "diffHunk": "@@ -204,118 +75,78 @@ public ProduceResponse(Map<TopicPartition, PartitionResponse> responses) {\n      * @param throttleTimeMs Time in milliseconds the response was throttled\n      */\n     public ProduceResponse(Map<TopicPartition, PartitionResponse> responses, int throttleTimeMs) {\n-        this.responses = responses;\n-        this.throttleTimeMs = throttleTimeMs;\n+        this(new ProduceResponseData()\n+            .setResponses(responses.entrySet()\n+                .stream()\n+                .collect(Collectors.groupingBy(e -> e.getKey().topic()))\n+                .entrySet()\n+                .stream()\n+                .map(topicData -> new ProduceResponseData.TopicProduceResponse()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NDA2NA=="}, "originalCommit": null, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0MDk1NA==", "bodyText": "Oh, I was just emphasizing that it is a matter of taste. It's up to you if you agree or not.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r520740954", "createdAt": "2020-11-10T17:28:15Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "diffHunk": "@@ -204,118 +75,78 @@ public ProduceResponse(Map<TopicPartition, PartitionResponse> responses) {\n      * @param throttleTimeMs Time in milliseconds the response was throttled\n      */\n     public ProduceResponse(Map<TopicPartition, PartitionResponse> responses, int throttleTimeMs) {\n-        this.responses = responses;\n-        this.throttleTimeMs = throttleTimeMs;\n+        this(new ProduceResponseData()\n+            .setResponses(responses.entrySet()\n+                .stream()\n+                .collect(Collectors.groupingBy(e -> e.getKey().topic()))\n+                .entrySet()\n+                .stream()\n+                .map(topicData -> new ProduceResponseData.TopicProduceResponse()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NDA2NA=="}, "originalCommit": null, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjk2MDg2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoxNzozMlrOHu8SnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwMzozMjowMVrOHvMkuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NDM0OQ==", "bodyText": "Sounds good to refactor. Perhaps we can turn this TODO into a jira?", "url": "https://github.com/apache/kafka/pull/9401#discussion_r518984349", "createdAt": "2020-11-06T20:17:32Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "diffHunk": "@@ -204,118 +75,78 @@ public ProduceResponse(Map<TopicPartition, PartitionResponse> responses) {\n      * @param throttleTimeMs Time in milliseconds the response was throttled\n      */\n     public ProduceResponse(Map<TopicPartition, PartitionResponse> responses, int throttleTimeMs) {\n-        this.responses = responses;\n-        this.throttleTimeMs = throttleTimeMs;\n+        this(new ProduceResponseData()\n+            .setResponses(responses.entrySet()\n+                .stream()\n+                .collect(Collectors.groupingBy(e -> e.getKey().topic()))\n+                .entrySet()\n+                .stream()\n+                .map(topicData -> new ProduceResponseData.TopicProduceResponse()\n+                    .setTopic(topicData.getKey())\n+                    .setPartitionResponses(topicData.getValue()\n+                        .stream()\n+                        .map(p -> new ProduceResponseData.PartitionProduceResponse()\n+                            .setPartition(p.getKey().partition())\n+                            .setBaseOffset(p.getValue().baseOffset)\n+                            .setLogStartOffset(p.getValue().logStartOffset)\n+                            .setLogAppendTime(p.getValue().logAppendTime)\n+                            .setErrorMessage(p.getValue().errorMessage)\n+                            .setErrorCode(p.getValue().error.code())\n+                            .setRecordErrors(p.getValue().recordErrors\n+                                .stream()\n+                                .map(e -> new ProduceResponseData.BatchIndexAndErrorMessage()\n+                                    .setBatchIndex(e.batchIndex)\n+                                    .setBatchIndexErrorMessage(e.message))\n+                                .collect(Collectors.toList())))\n+                        .collect(Collectors.toList())))\n+                .collect(Collectors.toList()))\n+            .setThrottleTimeMs(throttleTimeMs));\n     }\n \n     /**\n-     * Constructor from a {@link Struct}.\n+     * Visible for testing.\n      */\n-    public ProduceResponse(Struct struct) {\n-        responses = new HashMap<>();\n-        for (Object topicResponse : struct.getArray(RESPONSES_KEY_NAME)) {\n-            Struct topicRespStruct = (Struct) topicResponse;\n-            String topic = topicRespStruct.get(TOPIC_NAME);\n-\n-            for (Object partResponse : topicRespStruct.getArray(PARTITION_RESPONSES_KEY_NAME)) {\n-                Struct partRespStruct = (Struct) partResponse;\n-                int partition = partRespStruct.get(PARTITION_ID);\n-                Errors error = Errors.forCode(partRespStruct.get(ERROR_CODE));\n-                long offset = partRespStruct.getLong(BASE_OFFSET_KEY_NAME);\n-                long logAppendTime = partRespStruct.hasField(LOG_APPEND_TIME_KEY_NAME) ?\n-                        partRespStruct.getLong(LOG_APPEND_TIME_KEY_NAME) : RecordBatch.NO_TIMESTAMP;\n-                long logStartOffset = partRespStruct.getOrElse(LOG_START_OFFSET_FIELD, INVALID_OFFSET);\n-\n-                List<RecordError> recordErrors = Collections.emptyList();\n-                if (partRespStruct.hasField(RECORD_ERRORS_KEY_NAME)) {\n-                    Object[] recordErrorsArray = partRespStruct.getArray(RECORD_ERRORS_KEY_NAME);\n-                    if (recordErrorsArray.length > 0) {\n-                        recordErrors = new ArrayList<>(recordErrorsArray.length);\n-                        for (Object indexAndMessage : recordErrorsArray) {\n-                            Struct indexAndMessageStruct = (Struct) indexAndMessage;\n-                            recordErrors.add(new RecordError(\n-                                    indexAndMessageStruct.getInt(BATCH_INDEX_KEY_NAME),\n-                                    indexAndMessageStruct.get(BATCH_INDEX_ERROR_MESSAGE_FIELD)\n-                            ));\n-                        }\n-                    }\n-                }\n-\n-                String errorMessage = partRespStruct.getOrElse(ERROR_MESSAGE_FIELD, null);\n-                TopicPartition tp = new TopicPartition(topic, partition);\n-                responses.put(tp, new PartitionResponse(error, offset, logAppendTime, logStartOffset, recordErrors, errorMessage));\n-            }\n-        }\n-        this.throttleTimeMs = struct.getOrElse(THROTTLE_TIME_MS, DEFAULT_THROTTLE_TIME);\n-    }\n-\n     @Override\n-    protected Struct toStruct(short version) {\n-        Struct struct = new Struct(ApiKeys.PRODUCE.responseSchema(version));\n-\n-        Map<String, Map<Integer, PartitionResponse>> responseByTopic = CollectionUtils.groupPartitionDataByTopic(responses);\n-        List<Struct> topicDatas = new ArrayList<>(responseByTopic.size());\n-        for (Map.Entry<String, Map<Integer, PartitionResponse>> entry : responseByTopic.entrySet()) {\n-            Struct topicData = struct.instance(RESPONSES_KEY_NAME);\n-            topicData.set(TOPIC_NAME, entry.getKey());\n-            List<Struct> partitionArray = new ArrayList<>();\n-            for (Map.Entry<Integer, PartitionResponse> partitionEntry : entry.getValue().entrySet()) {\n-                PartitionResponse part = partitionEntry.getValue();\n-                short errorCode = part.error.code();\n-                // If producer sends ProduceRequest V3 or earlier, the client library is not guaranteed to recognize the error code\n-                // for KafkaStorageException. In this case the client library will translate KafkaStorageException to\n-                // UnknownServerException which is not retriable. We can ensure that producer will update metadata and retry\n-                // by converting the KafkaStorageException to NotLeaderOrFollowerException in the response if ProduceRequest version <= 3\n-                if (errorCode == Errors.KAFKA_STORAGE_ERROR.code() && version <= 3)\n-                    errorCode = Errors.NOT_LEADER_OR_FOLLOWER.code();\n-                Struct partStruct = topicData.instance(PARTITION_RESPONSES_KEY_NAME)\n-                        .set(PARTITION_ID, partitionEntry.getKey())\n-                        .set(ERROR_CODE, errorCode)\n-                        .set(BASE_OFFSET_KEY_NAME, part.baseOffset);\n-                partStruct.setIfExists(LOG_APPEND_TIME_KEY_NAME, part.logAppendTime);\n-                partStruct.setIfExists(LOG_START_OFFSET_FIELD, part.logStartOffset);\n-\n-                if (partStruct.hasField(RECORD_ERRORS_KEY_NAME)) {\n-                    List<Struct> recordErrors = Collections.emptyList();\n-                    if (!part.recordErrors.isEmpty()) {\n-                        recordErrors = new ArrayList<>();\n-                        for (RecordError indexAndMessage : part.recordErrors) {\n-                            Struct indexAndMessageStruct = partStruct.instance(RECORD_ERRORS_KEY_NAME)\n-                                    .set(BATCH_INDEX_KEY_NAME, indexAndMessage.batchIndex)\n-                                    .set(BATCH_INDEX_ERROR_MESSAGE_FIELD, indexAndMessage.message);\n-                            recordErrors.add(indexAndMessageStruct);\n-                        }\n-                    }\n-                    partStruct.set(RECORD_ERRORS_KEY_NAME, recordErrors.toArray());\n-                }\n-\n-                partStruct.setIfExists(ERROR_MESSAGE_FIELD, part.errorMessage);\n-                partitionArray.add(partStruct);\n-            }\n-            topicData.set(PARTITION_RESPONSES_KEY_NAME, partitionArray.toArray());\n-            topicDatas.add(topicData);\n-        }\n-        struct.set(RESPONSES_KEY_NAME, topicDatas.toArray());\n-        struct.setIfExists(THROTTLE_TIME_MS, throttleTimeMs);\n+    public Struct toStruct(short version) {\n+        return data.toStruct(version);\n+    }\n \n-        return struct;\n+    public ProduceResponseData data() {\n+        return this.data;\n     }\n \n+    /**\n+     * this method is used by testing only.\n+     * TODO: refactor the tests which are using this method and then remove this method from production code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 342}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1MTEzMQ==", "bodyText": "https://issues.apache.org/jira/browse/KAFKA-10697", "url": "https://github.com/apache/kafka/pull/9401#discussion_r519251131", "createdAt": "2020-11-08T03:32:01Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "diffHunk": "@@ -204,118 +75,78 @@ public ProduceResponse(Map<TopicPartition, PartitionResponse> responses) {\n      * @param throttleTimeMs Time in milliseconds the response was throttled\n      */\n     public ProduceResponse(Map<TopicPartition, PartitionResponse> responses, int throttleTimeMs) {\n-        this.responses = responses;\n-        this.throttleTimeMs = throttleTimeMs;\n+        this(new ProduceResponseData()\n+            .setResponses(responses.entrySet()\n+                .stream()\n+                .collect(Collectors.groupingBy(e -> e.getKey().topic()))\n+                .entrySet()\n+                .stream()\n+                .map(topicData -> new ProduceResponseData.TopicProduceResponse()\n+                    .setTopic(topicData.getKey())\n+                    .setPartitionResponses(topicData.getValue()\n+                        .stream()\n+                        .map(p -> new ProduceResponseData.PartitionProduceResponse()\n+                            .setPartition(p.getKey().partition())\n+                            .setBaseOffset(p.getValue().baseOffset)\n+                            .setLogStartOffset(p.getValue().logStartOffset)\n+                            .setLogAppendTime(p.getValue().logAppendTime)\n+                            .setErrorMessage(p.getValue().errorMessage)\n+                            .setErrorCode(p.getValue().error.code())\n+                            .setRecordErrors(p.getValue().recordErrors\n+                                .stream()\n+                                .map(e -> new ProduceResponseData.BatchIndexAndErrorMessage()\n+                                    .setBatchIndex(e.batchIndex)\n+                                    .setBatchIndexErrorMessage(e.message))\n+                                .collect(Collectors.toList())))\n+                        .collect(Collectors.toList())))\n+                .collect(Collectors.toList()))\n+            .setThrottleTimeMs(throttleTimeMs));\n     }\n \n     /**\n-     * Constructor from a {@link Struct}.\n+     * Visible for testing.\n      */\n-    public ProduceResponse(Struct struct) {\n-        responses = new HashMap<>();\n-        for (Object topicResponse : struct.getArray(RESPONSES_KEY_NAME)) {\n-            Struct topicRespStruct = (Struct) topicResponse;\n-            String topic = topicRespStruct.get(TOPIC_NAME);\n-\n-            for (Object partResponse : topicRespStruct.getArray(PARTITION_RESPONSES_KEY_NAME)) {\n-                Struct partRespStruct = (Struct) partResponse;\n-                int partition = partRespStruct.get(PARTITION_ID);\n-                Errors error = Errors.forCode(partRespStruct.get(ERROR_CODE));\n-                long offset = partRespStruct.getLong(BASE_OFFSET_KEY_NAME);\n-                long logAppendTime = partRespStruct.hasField(LOG_APPEND_TIME_KEY_NAME) ?\n-                        partRespStruct.getLong(LOG_APPEND_TIME_KEY_NAME) : RecordBatch.NO_TIMESTAMP;\n-                long logStartOffset = partRespStruct.getOrElse(LOG_START_OFFSET_FIELD, INVALID_OFFSET);\n-\n-                List<RecordError> recordErrors = Collections.emptyList();\n-                if (partRespStruct.hasField(RECORD_ERRORS_KEY_NAME)) {\n-                    Object[] recordErrorsArray = partRespStruct.getArray(RECORD_ERRORS_KEY_NAME);\n-                    if (recordErrorsArray.length > 0) {\n-                        recordErrors = new ArrayList<>(recordErrorsArray.length);\n-                        for (Object indexAndMessage : recordErrorsArray) {\n-                            Struct indexAndMessageStruct = (Struct) indexAndMessage;\n-                            recordErrors.add(new RecordError(\n-                                    indexAndMessageStruct.getInt(BATCH_INDEX_KEY_NAME),\n-                                    indexAndMessageStruct.get(BATCH_INDEX_ERROR_MESSAGE_FIELD)\n-                            ));\n-                        }\n-                    }\n-                }\n-\n-                String errorMessage = partRespStruct.getOrElse(ERROR_MESSAGE_FIELD, null);\n-                TopicPartition tp = new TopicPartition(topic, partition);\n-                responses.put(tp, new PartitionResponse(error, offset, logAppendTime, logStartOffset, recordErrors, errorMessage));\n-            }\n-        }\n-        this.throttleTimeMs = struct.getOrElse(THROTTLE_TIME_MS, DEFAULT_THROTTLE_TIME);\n-    }\n-\n     @Override\n-    protected Struct toStruct(short version) {\n-        Struct struct = new Struct(ApiKeys.PRODUCE.responseSchema(version));\n-\n-        Map<String, Map<Integer, PartitionResponse>> responseByTopic = CollectionUtils.groupPartitionDataByTopic(responses);\n-        List<Struct> topicDatas = new ArrayList<>(responseByTopic.size());\n-        for (Map.Entry<String, Map<Integer, PartitionResponse>> entry : responseByTopic.entrySet()) {\n-            Struct topicData = struct.instance(RESPONSES_KEY_NAME);\n-            topicData.set(TOPIC_NAME, entry.getKey());\n-            List<Struct> partitionArray = new ArrayList<>();\n-            for (Map.Entry<Integer, PartitionResponse> partitionEntry : entry.getValue().entrySet()) {\n-                PartitionResponse part = partitionEntry.getValue();\n-                short errorCode = part.error.code();\n-                // If producer sends ProduceRequest V3 or earlier, the client library is not guaranteed to recognize the error code\n-                // for KafkaStorageException. In this case the client library will translate KafkaStorageException to\n-                // UnknownServerException which is not retriable. We can ensure that producer will update metadata and retry\n-                // by converting the KafkaStorageException to NotLeaderOrFollowerException in the response if ProduceRequest version <= 3\n-                if (errorCode == Errors.KAFKA_STORAGE_ERROR.code() && version <= 3)\n-                    errorCode = Errors.NOT_LEADER_OR_FOLLOWER.code();\n-                Struct partStruct = topicData.instance(PARTITION_RESPONSES_KEY_NAME)\n-                        .set(PARTITION_ID, partitionEntry.getKey())\n-                        .set(ERROR_CODE, errorCode)\n-                        .set(BASE_OFFSET_KEY_NAME, part.baseOffset);\n-                partStruct.setIfExists(LOG_APPEND_TIME_KEY_NAME, part.logAppendTime);\n-                partStruct.setIfExists(LOG_START_OFFSET_FIELD, part.logStartOffset);\n-\n-                if (partStruct.hasField(RECORD_ERRORS_KEY_NAME)) {\n-                    List<Struct> recordErrors = Collections.emptyList();\n-                    if (!part.recordErrors.isEmpty()) {\n-                        recordErrors = new ArrayList<>();\n-                        for (RecordError indexAndMessage : part.recordErrors) {\n-                            Struct indexAndMessageStruct = partStruct.instance(RECORD_ERRORS_KEY_NAME)\n-                                    .set(BATCH_INDEX_KEY_NAME, indexAndMessage.batchIndex)\n-                                    .set(BATCH_INDEX_ERROR_MESSAGE_FIELD, indexAndMessage.message);\n-                            recordErrors.add(indexAndMessageStruct);\n-                        }\n-                    }\n-                    partStruct.set(RECORD_ERRORS_KEY_NAME, recordErrors.toArray());\n-                }\n-\n-                partStruct.setIfExists(ERROR_MESSAGE_FIELD, part.errorMessage);\n-                partitionArray.add(partStruct);\n-            }\n-            topicData.set(PARTITION_RESPONSES_KEY_NAME, partitionArray.toArray());\n-            topicDatas.add(topicData);\n-        }\n-        struct.set(RESPONSES_KEY_NAME, topicDatas.toArray());\n-        struct.setIfExists(THROTTLE_TIME_MS, throttleTimeMs);\n+    public Struct toStruct(short version) {\n+        return data.toStruct(version);\n+    }\n \n-        return struct;\n+    public ProduceResponseData data() {\n+        return this.data;\n     }\n \n+    /**\n+     * this method is used by testing only.\n+     * TODO: refactor the tests which are using this method and then remove this method from production code.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NDM0OQ=="}, "originalCommit": null, "originalPosition": 342}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjk3ODQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoyNDozM1rOHu8drA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoyNDozM1rOHu8drA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NzE4MA==", "bodyText": "This logic surprised me a little bit until I realized that we were trying to avoid redundant authorization calls. Might be worth adding a comment since I was almost ready to suggest moving this logic into the loop.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r518987180", "createdAt": "2020-11-06T20:24:33Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -517,19 +517,23 @@ class KafkaApis(val requestChannel: RequestChannel,\n       }\n       // Note that authorization to a transactionalId implies ProducerId authorization\n \n-    } else if (produceRequest.hasIdempotentRecords && !authorize(request.context, IDEMPOTENT_WRITE, CLUSTER, CLUSTER_NAME)) {\n+    } else if (RequestUtils.hasIdempotentRecords(produceRequest) && !authorize(request.context, IDEMPOTENT_WRITE, CLUSTER, CLUSTER_NAME)) {\n       sendErrorResponseMaybeThrottle(request, Errors.CLUSTER_AUTHORIZATION_FAILED.exception)\n       return\n     }\n \n-    val produceRecords = produceRequest.partitionRecordsOrFail.asScala\n     val unauthorizedTopicResponses = mutable.Map[TopicPartition, PartitionResponse]()\n     val nonExistingTopicResponses = mutable.Map[TopicPartition, PartitionResponse]()\n     val invalidRequestResponses = mutable.Map[TopicPartition, PartitionResponse]()\n     val authorizedRequestInfo = mutable.Map[TopicPartition, MemoryRecords]()\n-    val authorizedTopics = filterByAuthorized(request.context, WRITE, TOPIC, produceRecords)(_._1.topic)\n-\n-    for ((topicPartition, memoryRecords) <- produceRecords) {\n+    val authorizedTopics = filterByAuthorized(request.context, WRITE, TOPIC, produceRequest.dataOrException().topicData().asScala)(_.topic())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjk4MTExOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoyNTozMFrOHu8fQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwMzozNToxMFrOHvMlgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NzU4Ng==", "bodyText": "That's a good question. I can't think of any great options. We ended up making FetchResponse generic to address a similar issue. I think the cast is reasonable for now. Can we move the TODO to a jira?", "url": "https://github.com/apache/kafka/pull/9401#discussion_r518987586", "createdAt": "2020-11-06T20:25:30Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -517,19 +517,23 @@ class KafkaApis(val requestChannel: RequestChannel,\n       }\n       // Note that authorization to a transactionalId implies ProducerId authorization\n \n-    } else if (produceRequest.hasIdempotentRecords && !authorize(request.context, IDEMPOTENT_WRITE, CLUSTER, CLUSTER_NAME)) {\n+    } else if (RequestUtils.hasIdempotentRecords(produceRequest) && !authorize(request.context, IDEMPOTENT_WRITE, CLUSTER, CLUSTER_NAME)) {\n       sendErrorResponseMaybeThrottle(request, Errors.CLUSTER_AUTHORIZATION_FAILED.exception)\n       return\n     }\n \n-    val produceRecords = produceRequest.partitionRecordsOrFail.asScala\n     val unauthorizedTopicResponses = mutable.Map[TopicPartition, PartitionResponse]()\n     val nonExistingTopicResponses = mutable.Map[TopicPartition, PartitionResponse]()\n     val invalidRequestResponses = mutable.Map[TopicPartition, PartitionResponse]()\n     val authorizedRequestInfo = mutable.Map[TopicPartition, MemoryRecords]()\n-    val authorizedTopics = filterByAuthorized(request.context, WRITE, TOPIC, produceRecords)(_._1.topic)\n-\n-    for ((topicPartition, memoryRecords) <- produceRecords) {\n+    val authorizedTopics = filterByAuthorized(request.context, WRITE, TOPIC, produceRequest.dataOrException().topicData().asScala)(_.topic())\n+\n+    produceRequest.dataOrException().topicData().forEach(topic => topic.data().forEach { partition =>\n+      val topicPartition = new TopicPartition(topic.topic(), partition.partition())\n+      // This caller assumes the type is MemoryRecords and that is true on current serialization\n+      // We cast the type to avoid causing big change to code base.\n+      // TODO: maybe we need to refactor code to avoid this casting", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1MTMyOA==", "bodyText": "https://issues.apache.org/jira/browse/KAFKA-10698", "url": "https://github.com/apache/kafka/pull/9401#discussion_r519251328", "createdAt": "2020-11-08T03:35:10Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -517,19 +517,23 @@ class KafkaApis(val requestChannel: RequestChannel,\n       }\n       // Note that authorization to a transactionalId implies ProducerId authorization\n \n-    } else if (produceRequest.hasIdempotentRecords && !authorize(request.context, IDEMPOTENT_WRITE, CLUSTER, CLUSTER_NAME)) {\n+    } else if (RequestUtils.hasIdempotentRecords(produceRequest) && !authorize(request.context, IDEMPOTENT_WRITE, CLUSTER, CLUSTER_NAME)) {\n       sendErrorResponseMaybeThrottle(request, Errors.CLUSTER_AUTHORIZATION_FAILED.exception)\n       return\n     }\n \n-    val produceRecords = produceRequest.partitionRecordsOrFail.asScala\n     val unauthorizedTopicResponses = mutable.Map[TopicPartition, PartitionResponse]()\n     val nonExistingTopicResponses = mutable.Map[TopicPartition, PartitionResponse]()\n     val invalidRequestResponses = mutable.Map[TopicPartition, PartitionResponse]()\n     val authorizedRequestInfo = mutable.Map[TopicPartition, MemoryRecords]()\n-    val authorizedTopics = filterByAuthorized(request.context, WRITE, TOPIC, produceRecords)(_._1.topic)\n-\n-    for ((topicPartition, memoryRecords) <- produceRecords) {\n+    val authorizedTopics = filterByAuthorized(request.context, WRITE, TOPIC, produceRequest.dataOrException().topicData().asScala)(_.topic())\n+\n+    produceRequest.dataOrException().topicData().forEach(topic => topic.data().forEach { partition =>\n+      val topicPartition = new TopicPartition(topic.topic(), partition.partition())\n+      // This caller assumes the type is MemoryRecords and that is true on current serialization\n+      // We cast the type to avoid causing big change to code base.\n+      // TODO: maybe we need to refactor code to avoid this casting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NzU4Ng=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjk4NzQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoyODowM1rOHu8jRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoyODowM1rOHu8jRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4ODYxMg==", "bodyText": "nit: unnecessary parenthesis (a few of these around here)", "url": "https://github.com/apache/kafka/pull/9401#discussion_r518988612", "createdAt": "2020-11-06T20:28:03Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -517,19 +517,23 @@ class KafkaApis(val requestChannel: RequestChannel,\n       }\n       // Note that authorization to a transactionalId implies ProducerId authorization\n \n-    } else if (produceRequest.hasIdempotentRecords && !authorize(request.context, IDEMPOTENT_WRITE, CLUSTER, CLUSTER_NAME)) {\n+    } else if (RequestUtils.hasIdempotentRecords(produceRequest) && !authorize(request.context, IDEMPOTENT_WRITE, CLUSTER, CLUSTER_NAME)) {\n       sendErrorResponseMaybeThrottle(request, Errors.CLUSTER_AUTHORIZATION_FAILED.exception)\n       return\n     }\n \n-    val produceRecords = produceRequest.partitionRecordsOrFail.asScala\n     val unauthorizedTopicResponses = mutable.Map[TopicPartition, PartitionResponse]()\n     val nonExistingTopicResponses = mutable.Map[TopicPartition, PartitionResponse]()\n     val invalidRequestResponses = mutable.Map[TopicPartition, PartitionResponse]()\n     val authorizedRequestInfo = mutable.Map[TopicPartition, MemoryRecords]()\n-    val authorizedTopics = filterByAuthorized(request.context, WRITE, TOPIC, produceRecords)(_._1.topic)\n-\n-    for ((topicPartition, memoryRecords) <- produceRecords) {\n+    val authorizedTopics = filterByAuthorized(request.context, WRITE, TOPIC, produceRequest.dataOrException().topicData().asScala)(_.topic())\n+\n+    produceRequest.dataOrException().topicData().forEach(topic => topic.data().forEach { partition =>\n+      val topicPartition = new TopicPartition(topic.topic(), partition.partition())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTk1NDI4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODowMDowNlrOHxubWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwOToyMzo1NlrOHxxvZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwMjkzNg==", "bodyText": "I wonder if we could avoid all of this by requesting the Sender to create TopicProduceData directly. It seems that the Sender creates partitionRecords right before calling the builder: https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java#L734. So we may be able to directly construct the expect data structure there.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r521902936", "createdAt": "2020-11-12T08:00:06Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "diffHunk": "@@ -194,7 +106,27 @@ private ProduceRequest build(short version, boolean validate) {\n                     ProduceRequest.validateRecords(version, records);\n                 }\n             }\n-            return new ProduceRequest(version, acks, timeout, partitionRecords, transactionalId);\n+\n+            List<ProduceRequestData.TopicProduceData> tpd = partitionRecords", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNzcyMw==", "bodyText": "nice suggestion.\nCould I address this in follow-up? I had filed jira (KAFKA-10696 ~ KAFKA-10698) to have Sender use auto-generated protocol directly.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r521927723", "createdAt": "2020-11-12T08:37:33Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "diffHunk": "@@ -194,7 +106,27 @@ private ProduceRequest build(short version, boolean validate) {\n                     ProduceRequest.validateRecords(version, records);\n                 }\n             }\n-            return new ProduceRequest(version, acks, timeout, partitionRecords, transactionalId);\n+\n+            List<ProduceRequestData.TopicProduceData> tpd = partitionRecords", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwMjkzNg=="}, "originalCommit": null, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk1NzIyMQ==", "bodyText": "oh. The jira I created does not cover this issue. open a new ticket (https://issues.apache.org/jira/browse/KAFKA-10709)", "url": "https://github.com/apache/kafka/pull/9401#discussion_r521957221", "createdAt": "2020-11-12T09:23:56Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "diffHunk": "@@ -194,7 +106,27 @@ private ProduceRequest build(short version, boolean validate) {\n                     ProduceRequest.validateRecords(version, records);\n                 }\n             }\n-            return new ProduceRequest(version, acks, timeout, partitionRecords, transactionalId);\n+\n+            List<ProduceRequestData.TopicProduceData> tpd = partitionRecords", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwMjkzNg=="}, "originalCommit": null, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTk5NjA4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODoxMTozM1rOHxu1Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODo0NDoyNlrOHxwMbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwOTU4Nw==", "bodyText": "It seems that we could create ProduceResponseData based on data. This avoids the cost of the group-by operation and the cost of constructing partitionSizes. That should bring the benchmark inline with what we had before. Would this work?", "url": "https://github.com/apache/kafka/pull/9401#discussion_r521909587", "createdAt": "2020-11-12T08:11:33Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "diffHunk": "@@ -323,27 +222,30 @@ public String toString(boolean verbose) {\n     @Override\n     public ProduceResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n         /* In case the producer doesn't actually want any response */\n-        if (acks == 0)\n-            return null;\n-\n+        if (acks == 0) return null;\n         Errors error = Errors.forException(e);\n-        Map<TopicPartition, ProduceResponse.PartitionResponse> responseMap = new HashMap<>();\n-        ProduceResponse.PartitionResponse partitionResponse = new ProduceResponse.PartitionResponse(error);\n-\n-        for (TopicPartition tp : partitions())\n-            responseMap.put(tp, partitionResponse);\n-\n-        return new ProduceResponse(responseMap, throttleTimeMs);\n+        return new ProduceResponse(new ProduceResponseData()\n+            .setResponses(partitionSizes().keySet().stream().collect(Collectors.groupingBy(TopicPartition::topic)).entrySet()\n+                .stream()\n+                .map(entry -> new ProduceResponseData.TopicProduceResponse()\n+                    .setPartitionResponses(entry.getValue().stream().map(p -> new ProduceResponseData.PartitionProduceResponse()\n+                        .setIndex(p.partition())\n+                        .setRecordErrors(Collections.emptyList())\n+                        .setBaseOffset(INVALID_OFFSET)\n+                        .setLogAppendTimeMs(RecordBatch.NO_TIMESTAMP)\n+                        .setLogStartOffset(INVALID_OFFSET)\n+                        .setErrorMessage(e.getMessage())\n+                        .setErrorCode(error.code()))\n+                        .collect(Collectors.toList()))\n+                    .setName(entry.getKey()))\n+                .collect(Collectors.toList()))\n+            .setThrottleTimeMs(throttleTimeMs));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMTg4Nw==", "bodyText": "I used  data to generate ProduceResponseData. However, the data may be null when create ProduceResponseData. That is to say, it require if-else to handle null data in getErrorResponse. It seems to me that is a bit ugly so not sure whether it is worth doing that.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r521931887", "createdAt": "2020-11-12T08:44:26Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "diffHunk": "@@ -323,27 +222,30 @@ public String toString(boolean verbose) {\n     @Override\n     public ProduceResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n         /* In case the producer doesn't actually want any response */\n-        if (acks == 0)\n-            return null;\n-\n+        if (acks == 0) return null;\n         Errors error = Errors.forException(e);\n-        Map<TopicPartition, ProduceResponse.PartitionResponse> responseMap = new HashMap<>();\n-        ProduceResponse.PartitionResponse partitionResponse = new ProduceResponse.PartitionResponse(error);\n-\n-        for (TopicPartition tp : partitions())\n-            responseMap.put(tp, partitionResponse);\n-\n-        return new ProduceResponse(responseMap, throttleTimeMs);\n+        return new ProduceResponse(new ProduceResponseData()\n+            .setResponses(partitionSizes().keySet().stream().collect(Collectors.groupingBy(TopicPartition::topic)).entrySet()\n+                .stream()\n+                .map(entry -> new ProduceResponseData.TopicProduceResponse()\n+                    .setPartitionResponses(entry.getValue().stream().map(p -> new ProduceResponseData.PartitionProduceResponse()\n+                        .setIndex(p.partition())\n+                        .setRecordErrors(Collections.emptyList())\n+                        .setBaseOffset(INVALID_OFFSET)\n+                        .setLogAppendTimeMs(RecordBatch.NO_TIMESTAMP)\n+                        .setLogStartOffset(INVALID_OFFSET)\n+                        .setErrorMessage(e.getMessage())\n+                        .setErrorCode(error.code()))\n+                        .collect(Collectors.toList()))\n+                    .setName(entry.getKey()))\n+                .collect(Collectors.toList()))\n+            .setThrottleTimeMs(throttleTimeMs));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwOTU4Nw=="}, "originalCommit": null, "originalPosition": 333}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MjA3NDU2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODoyNzoyMFrOHxvlLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNTo1NDo1MlrOHydQ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyMTgzNw==", "bodyText": "As we care of performances here, I wonder if we should try not using the stream api here.\nAnother trick would be to  turn TopicProduceResponse in the ProduceResponse schema into a map by setting \"mapKey\": true for the topic name. This would allow to iterate over responses, get or create TopicProduceResponse for the topic, and add the PartitionProduceResponse into it.\nIt may be worth trying different implementation to compare their performances.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r521921837", "createdAt": "2020-11-12T08:27:20Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "diffHunk": "@@ -204,118 +75,79 @@ public ProduceResponse(Map<TopicPartition, PartitionResponse> responses) {\n      * @param throttleTimeMs Time in milliseconds the response was throttled\n      */\n     public ProduceResponse(Map<TopicPartition, PartitionResponse> responses, int throttleTimeMs) {\n-        this.responses = responses;\n-        this.throttleTimeMs = throttleTimeMs;\n+        this(new ProduceResponseData()\n+            .setResponses(responses.entrySet()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwNTY1Mw==", "bodyText": "It may be worth trying different implementation to compare their performances.\n\nAs we all care for performance, I'm ok to say goodbye to stream api :)", "url": "https://github.com/apache/kafka/pull/9401#discussion_r522005653", "createdAt": "2020-11-12T10:38:00Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "diffHunk": "@@ -204,118 +75,79 @@ public ProduceResponse(Map<TopicPartition, PartitionResponse> responses) {\n      * @param throttleTimeMs Time in milliseconds the response was throttled\n      */\n     public ProduceResponse(Map<TopicPartition, PartitionResponse> responses, int throttleTimeMs) {\n-        this.responses = responses;\n-        this.throttleTimeMs = throttleTimeMs;\n+        this(new ProduceResponseData()\n+            .setResponses(responses.entrySet()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyMTgzNw=="}, "originalCommit": null, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY3MDI5NA==", "bodyText": "I have addressed your suggestion and it does improve the performance.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r522670294", "createdAt": "2020-11-13T05:54:52Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "diffHunk": "@@ -204,118 +75,79 @@ public ProduceResponse(Map<TopicPartition, PartitionResponse> responses) {\n      * @param throttleTimeMs Time in milliseconds the response was throttled\n      */\n     public ProduceResponse(Map<TopicPartition, PartitionResponse> responses, int throttleTimeMs) {\n-        this.responses = responses;\n-        this.throttleTimeMs = throttleTimeMs;\n+        this(new ProduceResponseData()\n+            .setResponses(responses.entrySet()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyMTgzNw=="}, "originalCommit": null, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTQwMTcyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzoxMTowNVrOH1PRCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjo0OTo1M1rOH1VLig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4NjY5Nw==", "bodyText": "nit: since we have the jira for tracking, can we remove the TODO? A few more of these in the PR.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r525586697", "createdAt": "2020-11-17T23:11:05Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java", "diffHunk": "@@ -560,13 +562,24 @@ private void handleProduceResponse(ClientResponse response, Map<TopicPartition,\n             log.trace(\"Received produce response from node {} with correlation id {}\", response.destination(), correlationId);\n             // if we have a response, parse it\n             if (response.hasResponse()) {\n+                // TODO: Sender should exercise PartitionProduceResponse rather than ProduceResponse.PartitionResponse\n+                // https://issues.apache.org/jira/browse/KAFKA-10696", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY4MzU5NA==", "bodyText": "copy that", "url": "https://github.com/apache/kafka/pull/9401#discussion_r525683594", "createdAt": "2020-11-18T02:49:53Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java", "diffHunk": "@@ -560,13 +562,24 @@ private void handleProduceResponse(ClientResponse response, Map<TopicPartition,\n             log.trace(\"Received produce response from node {} with correlation id {}\", response.destination(), correlationId);\n             // if we have a response, parse it\n             if (response.hasResponse()) {\n+                // TODO: Sender should exercise PartitionProduceResponse rather than ProduceResponse.PartitionResponse\n+                // https://issues.apache.org/jira/browse/KAFKA-10696", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4NjY5Nw=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTQ1OTI5OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/requests/ProduceResponseTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzozMjo0MlrOH1Pyuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjo1NzowNFrOH1VmRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5NTMyMw==", "bodyText": "I think this test might be overkill. We haven't done anything like this for the other converted APIs. It's a little similar to MessageTest.testRequestSchemas, which was useful verifying the generated schemas when the message generator was being written. Soon testRequestSchemas will be redundant, so I guess we have to decide if we just trust the generator and our compatibility system tests or if we want some other canonical representation. Thoughts?", "url": "https://github.com/apache/kafka/pull/9401#discussion_r525595323", "createdAt": "2020-11-17T23:32:42Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/common/requests/ProduceResponseTest.java", "diffHunk": "@@ -100,16 +113,92 @@ public void produceResponseRecordErrorsTest() {\n             ProduceResponse response = new ProduceResponse(responseData);\n             Struct struct = response.toStruct(ver);\n             assertEquals(\"Should use schema version \" + ver, ApiKeys.PRODUCE.responseSchema(ver), struct.schema());\n-            ProduceResponse.PartitionResponse deserialized = new ProduceResponse(struct).responses().get(tp);\n+            ProduceResponse.PartitionResponse deserialized = new ProduceResponse(new ProduceResponseData(struct, ver)).responses().get(tp);\n             if (ver >= 8) {\n                 assertEquals(1, deserialized.recordErrors.size());\n                 assertEquals(3, deserialized.recordErrors.get(0).batchIndex);\n                 assertEquals(\"Record error\", deserialized.recordErrors.get(0).message);\n                 assertEquals(\"Produce failed\", deserialized.errorMessage);\n             } else {\n                 assertEquals(0, deserialized.recordErrors.size());\n-                assertEquals(null, deserialized.errorMessage);\n+                assertNull(deserialized.errorMessage);\n             }\n         }\n     }\n+\n+    /**\n+     * the schema in this test is from previous code and the automatic protocol should be compatible to previous schema.\n+     */\n+    @Test\n+    public void testCompatibility() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY5MDQzNg==", "bodyText": "That makes sense to me. Will remove redundant test.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r525690436", "createdAt": "2020-11-18T02:57:04Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/common/requests/ProduceResponseTest.java", "diffHunk": "@@ -100,16 +113,92 @@ public void produceResponseRecordErrorsTest() {\n             ProduceResponse response = new ProduceResponse(responseData);\n             Struct struct = response.toStruct(ver);\n             assertEquals(\"Should use schema version \" + ver, ApiKeys.PRODUCE.responseSchema(ver), struct.schema());\n-            ProduceResponse.PartitionResponse deserialized = new ProduceResponse(struct).responses().get(tp);\n+            ProduceResponse.PartitionResponse deserialized = new ProduceResponse(new ProduceResponseData(struct, ver)).responses().get(tp);\n             if (ver >= 8) {\n                 assertEquals(1, deserialized.recordErrors.size());\n                 assertEquals(3, deserialized.recordErrors.get(0).batchIndex);\n                 assertEquals(\"Record error\", deserialized.recordErrors.get(0).message);\n                 assertEquals(\"Produce failed\", deserialized.errorMessage);\n             } else {\n                 assertEquals(0, deserialized.recordErrors.size());\n-                assertEquals(null, deserialized.errorMessage);\n+                assertNull(deserialized.errorMessage);\n             }\n         }\n     }\n+\n+    /**\n+     * the schema in this test is from previous code and the automatic protocol should be compatible to previous schema.\n+     */\n+    @Test\n+    public void testCompatibility() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5NTMyMw=="}, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzY5MDk0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDoxMToxM1rOH1mXCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzoxMjoyN1rOH1tDmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2NTA2NQ==", "bodyText": "nit: As we got rid of the streaming api in this section, would it make sense to also remove this one?", "url": "https://github.com/apache/kafka/pull/9401#discussion_r525965065", "createdAt": "2020-11-18T10:11:13Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java", "diffHunk": "@@ -560,13 +562,24 @@ private void handleProduceResponse(ClientResponse response, Map<TopicPartition,\n             log.trace(\"Received produce response from node {} with correlation id {}\", response.destination(), correlationId);\n             // if we have a response, parse it\n             if (response.hasResponse()) {\n+                // Sender should exercise PartitionProduceResponse rather than ProduceResponse.PartitionResponse\n+                // https://issues.apache.org/jira/browse/KAFKA-10696\n                 ProduceResponse produceResponse = (ProduceResponse) response.responseBody();\n-                for (Map.Entry<TopicPartition, ProduceResponse.PartitionResponse> entry : produceResponse.responses().entrySet()) {\n-                    TopicPartition tp = entry.getKey();\n-                    ProduceResponse.PartitionResponse partResp = entry.getValue();\n+                produceResponse.data().responses().forEach(r -> r.partitionResponses().forEach(p -> {\n+                    TopicPartition tp = new TopicPartition(r.name(), p.index());\n+                    ProduceResponse.PartitionResponse partResp = new ProduceResponse.PartitionResponse(\n+                            Errors.forCode(p.errorCode()),\n+                            p.baseOffset(),\n+                            p.logAppendTimeMs(),\n+                            p.logStartOffset(),\n+                            p.recordErrors()\n+                                .stream()\n+                                .map(e -> new ProduceResponse.RecordError(e.batchIndex(), e.batchIndexErrorMessage()))\n+                                .collect(Collectors.toList()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAyOTg0Mw==", "bodyText": "The reason we got rid of streaming APIs is because it produces extra collection (groupBy). However, in this case we have to create a new collection to carry non-auto-generated data (and https://issues.apache.org/jira/browse/KAFKA-10696 will eliminate such conversion) even if we get rid of stream APIs. Hence, it should be fine to keep stream APIs here.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r526029843", "createdAt": "2020-11-18T11:55:30Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java", "diffHunk": "@@ -560,13 +562,24 @@ private void handleProduceResponse(ClientResponse response, Map<TopicPartition,\n             log.trace(\"Received produce response from node {} with correlation id {}\", response.destination(), correlationId);\n             // if we have a response, parse it\n             if (response.hasResponse()) {\n+                // Sender should exercise PartitionProduceResponse rather than ProduceResponse.PartitionResponse\n+                // https://issues.apache.org/jira/browse/KAFKA-10696\n                 ProduceResponse produceResponse = (ProduceResponse) response.responseBody();\n-                for (Map.Entry<TopicPartition, ProduceResponse.PartitionResponse> entry : produceResponse.responses().entrySet()) {\n-                    TopicPartition tp = entry.getKey();\n-                    ProduceResponse.PartitionResponse partResp = entry.getValue();\n+                produceResponse.data().responses().forEach(r -> r.partitionResponses().forEach(p -> {\n+                    TopicPartition tp = new TopicPartition(r.name(), p.index());\n+                    ProduceResponse.PartitionResponse partResp = new ProduceResponse.PartitionResponse(\n+                            Errors.forCode(p.errorCode()),\n+                            p.baseOffset(),\n+                            p.logAppendTimeMs(),\n+                            p.logStartOffset(),\n+                            p.recordErrors()\n+                                .stream()\n+                                .map(e -> new ProduceResponse.RecordError(e.batchIndex(), e.batchIndexErrorMessage()))\n+                                .collect(Collectors.toList()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2NTA2NQ=="}, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA3NDc3Nw==", "bodyText": "Yeah, I do agree. It won't change much from a performance point of view. I was more thinking about this from a code consistency point of view. I don't feel strong about this at all. It is just that I usually prefer not to mix paradigms. I recognise that this is a personal taste :).", "url": "https://github.com/apache/kafka/pull/9401#discussion_r526074777", "createdAt": "2020-11-18T13:12:27Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java", "diffHunk": "@@ -560,13 +562,24 @@ private void handleProduceResponse(ClientResponse response, Map<TopicPartition,\n             log.trace(\"Received produce response from node {} with correlation id {}\", response.destination(), correlationId);\n             // if we have a response, parse it\n             if (response.hasResponse()) {\n+                // Sender should exercise PartitionProduceResponse rather than ProduceResponse.PartitionResponse\n+                // https://issues.apache.org/jira/browse/KAFKA-10696\n                 ProduceResponse produceResponse = (ProduceResponse) response.responseBody();\n-                for (Map.Entry<TopicPartition, ProduceResponse.PartitionResponse> entry : produceResponse.responses().entrySet()) {\n-                    TopicPartition tp = entry.getKey();\n-                    ProduceResponse.PartitionResponse partResp = entry.getValue();\n+                produceResponse.data().responses().forEach(r -> r.partitionResponses().forEach(p -> {\n+                    TopicPartition tp = new TopicPartition(r.name(), p.index());\n+                    ProduceResponse.PartitionResponse partResp = new ProduceResponse.PartitionResponse(\n+                            Errors.forCode(p.errorCode()),\n+                            p.baseOffset(),\n+                            p.logAppendTimeMs(),\n+                            p.logStartOffset(),\n+                            p.recordErrors()\n+                                .stream()\n+                                .map(e -> new ProduceResponse.RecordError(e.batchIndex(), e.batchIndexErrorMessage()))\n+                                .collect(Collectors.toList()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2NTA2NQ=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzczMjA0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDoyMDo1M1rOH1mwKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMTo1NTo0M1rOH1qUhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk3MTQ5Nw==", "bodyText": "nit: Should we remove this usage of the stream api here as well?", "url": "https://github.com/apache/kafka/pull/9401#discussion_r525971497", "createdAt": "2020-11-18T10:20:53Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "diffHunk": "@@ -203,119 +77,88 @@ public ProduceResponse(Map<TopicPartition, PartitionResponse> responses) {\n      * @param responses Produced data grouped by topic-partition\n      * @param throttleTimeMs Time in milliseconds the response was throttled\n      */\n+    @Deprecated\n     public ProduceResponse(Map<TopicPartition, PartitionResponse> responses, int throttleTimeMs) {\n-        this.responses = responses;\n-        this.throttleTimeMs = throttleTimeMs;\n+        this(toData(responses, throttleTimeMs));\n     }\n \n-    /**\n-     * Constructor from a {@link Struct}.\n-     */\n-    public ProduceResponse(Struct struct) {\n-        responses = new HashMap<>();\n-        for (Object topicResponse : struct.getArray(RESPONSES_KEY_NAME)) {\n-            Struct topicRespStruct = (Struct) topicResponse;\n-            String topic = topicRespStruct.get(TOPIC_NAME);\n-\n-            for (Object partResponse : topicRespStruct.getArray(PARTITION_RESPONSES_KEY_NAME)) {\n-                Struct partRespStruct = (Struct) partResponse;\n-                int partition = partRespStruct.get(PARTITION_ID);\n-                Errors error = Errors.forCode(partRespStruct.get(ERROR_CODE));\n-                long offset = partRespStruct.getLong(BASE_OFFSET_KEY_NAME);\n-                long logAppendTime = partRespStruct.hasField(LOG_APPEND_TIME_KEY_NAME) ?\n-                        partRespStruct.getLong(LOG_APPEND_TIME_KEY_NAME) : RecordBatch.NO_TIMESTAMP;\n-                long logStartOffset = partRespStruct.getOrElse(LOG_START_OFFSET_FIELD, INVALID_OFFSET);\n-\n-                List<RecordError> recordErrors = Collections.emptyList();\n-                if (partRespStruct.hasField(RECORD_ERRORS_KEY_NAME)) {\n-                    Object[] recordErrorsArray = partRespStruct.getArray(RECORD_ERRORS_KEY_NAME);\n-                    if (recordErrorsArray.length > 0) {\n-                        recordErrors = new ArrayList<>(recordErrorsArray.length);\n-                        for (Object indexAndMessage : recordErrorsArray) {\n-                            Struct indexAndMessageStruct = (Struct) indexAndMessage;\n-                            recordErrors.add(new RecordError(\n-                                    indexAndMessageStruct.getInt(BATCH_INDEX_KEY_NAME),\n-                                    indexAndMessageStruct.get(BATCH_INDEX_ERROR_MESSAGE_FIELD)\n-                            ));\n-                        }\n-                    }\n-                }\n+    @Override\n+    protected Send toSend(String destination, ResponseHeader header, short apiVersion) {\n+        return SendBuilder.buildResponseSend(destination, header, this.data, apiVersion);\n+    }\n \n-                String errorMessage = partRespStruct.getOrElse(ERROR_MESSAGE_FIELD, null);\n-                TopicPartition tp = new TopicPartition(topic, partition);\n-                responses.put(tp, new PartitionResponse(error, offset, logAppendTime, logStartOffset, recordErrors, errorMessage));\n+    private static ProduceResponseData toData(Map<TopicPartition, PartitionResponse> responses, int throttleTimeMs) {\n+        ProduceResponseData data = new ProduceResponseData().setThrottleTimeMs(throttleTimeMs);\n+        responses.forEach((tp, response) -> {\n+            ProduceResponseData.TopicProduceResponse tpr = data.responses().find(tp.topic());\n+            if (tpr == null) {\n+                tpr = new ProduceResponseData.TopicProduceResponse().setName(tp.topic());\n+                data.responses().add(tpr);\n             }\n-        }\n-        this.throttleTimeMs = struct.getOrElse(THROTTLE_TIME_MS, DEFAULT_THROTTLE_TIME);\n+            tpr.partitionResponses()\n+                .add(new ProduceResponseData.PartitionProduceResponse()\n+                    .setIndex(tp.partition())\n+                    .setBaseOffset(response.baseOffset)\n+                    .setLogStartOffset(response.logStartOffset)\n+                    .setLogAppendTimeMs(response.logAppendTime)\n+                    .setErrorMessage(response.errorMessage)\n+                    .setErrorCode(response.error.code())\n+                    .setRecordErrors(response.recordErrors\n+                        .stream()\n+                        .map(e -> new ProduceResponseData.BatchIndexAndErrorMessage()\n+                            .setBatchIndex(e.batchIndex)\n+                            .setBatchIndexErrorMessage(e.message))\n+                        .collect(Collectors.toList())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAyOTk1OA==", "bodyText": "ditto", "url": "https://github.com/apache/kafka/pull/9401#discussion_r526029958", "createdAt": "2020-11-18T11:55:43Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java", "diffHunk": "@@ -203,119 +77,88 @@ public ProduceResponse(Map<TopicPartition, PartitionResponse> responses) {\n      * @param responses Produced data grouped by topic-partition\n      * @param throttleTimeMs Time in milliseconds the response was throttled\n      */\n+    @Deprecated\n     public ProduceResponse(Map<TopicPartition, PartitionResponse> responses, int throttleTimeMs) {\n-        this.responses = responses;\n-        this.throttleTimeMs = throttleTimeMs;\n+        this(toData(responses, throttleTimeMs));\n     }\n \n-    /**\n-     * Constructor from a {@link Struct}.\n-     */\n-    public ProduceResponse(Struct struct) {\n-        responses = new HashMap<>();\n-        for (Object topicResponse : struct.getArray(RESPONSES_KEY_NAME)) {\n-            Struct topicRespStruct = (Struct) topicResponse;\n-            String topic = topicRespStruct.get(TOPIC_NAME);\n-\n-            for (Object partResponse : topicRespStruct.getArray(PARTITION_RESPONSES_KEY_NAME)) {\n-                Struct partRespStruct = (Struct) partResponse;\n-                int partition = partRespStruct.get(PARTITION_ID);\n-                Errors error = Errors.forCode(partRespStruct.get(ERROR_CODE));\n-                long offset = partRespStruct.getLong(BASE_OFFSET_KEY_NAME);\n-                long logAppendTime = partRespStruct.hasField(LOG_APPEND_TIME_KEY_NAME) ?\n-                        partRespStruct.getLong(LOG_APPEND_TIME_KEY_NAME) : RecordBatch.NO_TIMESTAMP;\n-                long logStartOffset = partRespStruct.getOrElse(LOG_START_OFFSET_FIELD, INVALID_OFFSET);\n-\n-                List<RecordError> recordErrors = Collections.emptyList();\n-                if (partRespStruct.hasField(RECORD_ERRORS_KEY_NAME)) {\n-                    Object[] recordErrorsArray = partRespStruct.getArray(RECORD_ERRORS_KEY_NAME);\n-                    if (recordErrorsArray.length > 0) {\n-                        recordErrors = new ArrayList<>(recordErrorsArray.length);\n-                        for (Object indexAndMessage : recordErrorsArray) {\n-                            Struct indexAndMessageStruct = (Struct) indexAndMessage;\n-                            recordErrors.add(new RecordError(\n-                                    indexAndMessageStruct.getInt(BATCH_INDEX_KEY_NAME),\n-                                    indexAndMessageStruct.get(BATCH_INDEX_ERROR_MESSAGE_FIELD)\n-                            ));\n-                        }\n-                    }\n-                }\n+    @Override\n+    protected Send toSend(String destination, ResponseHeader header, short apiVersion) {\n+        return SendBuilder.buildResponseSend(destination, header, this.data, apiVersion);\n+    }\n \n-                String errorMessage = partRespStruct.getOrElse(ERROR_MESSAGE_FIELD, null);\n-                TopicPartition tp = new TopicPartition(topic, partition);\n-                responses.put(tp, new PartitionResponse(error, offset, logAppendTime, logStartOffset, recordErrors, errorMessage));\n+    private static ProduceResponseData toData(Map<TopicPartition, PartitionResponse> responses, int throttleTimeMs) {\n+        ProduceResponseData data = new ProduceResponseData().setThrottleTimeMs(throttleTimeMs);\n+        responses.forEach((tp, response) -> {\n+            ProduceResponseData.TopicProduceResponse tpr = data.responses().find(tp.topic());\n+            if (tpr == null) {\n+                tpr = new ProduceResponseData.TopicProduceResponse().setName(tp.topic());\n+                data.responses().add(tpr);\n             }\n-        }\n-        this.throttleTimeMs = struct.getOrElse(THROTTLE_TIME_MS, DEFAULT_THROTTLE_TIME);\n+            tpr.partitionResponses()\n+                .add(new ProduceResponseData.PartitionProduceResponse()\n+                    .setIndex(tp.partition())\n+                    .setBaseOffset(response.baseOffset)\n+                    .setLogStartOffset(response.logStartOffset)\n+                    .setLogAppendTimeMs(response.logAppendTime)\n+                    .setErrorMessage(response.errorMessage)\n+                    .setErrorCode(response.error.code())\n+                    .setRecordErrors(response.recordErrors\n+                        .stream()\n+                        .map(e -> new ProduceResponseData.BatchIndexAndErrorMessage()\n+                            .setBatchIndex(e.batchIndex)\n+                            .setBatchIndexErrorMessage(e.message))\n+                        .collect(Collectors.toList())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk3MTQ5Nw=="}, "originalCommit": null, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Nzc0MzQ3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/RequestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDoyMzozMlrOH1m23Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDoyMzozMlrOH1m23Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk3MzIxMw==", "bodyText": "nit: Add a new line.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r525973213", "createdAt": "2020-11-18T10:23:32Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/RequestUtils.java", "diffHunk": "@@ -48,4 +53,41 @@ public static ByteBuffer serialize(Struct headerStruct, Struct bodyStruct) {\n         buffer.rewind();\n         return buffer;\n     }\n-}\n+\n+    // visible for testing\n+    public static boolean hasIdempotentRecords(ProduceRequest request) {\n+        return flags(request).getKey();\n+    }\n+\n+    // visible for testing\n+    public static boolean hasTransactionalRecords(ProduceRequest request) {\n+        return flags(request).getValue();\n+    }\n+\n+    /**\n+     * Get both hasIdempotentRecords flag and hasTransactionalRecords flag from produce request.\n+     * Noted that we find all flags at once to avoid duplicate loop and record batch construction.\n+     * @return first flag is \"hasIdempotentRecords\" and another is \"hasTransactionalRecords\"\n+     */\n+    public static AbstractMap.SimpleEntry<Boolean, Boolean> flags(ProduceRequest request) {\n+        boolean hasIdempotentRecords = false;\n+        boolean hasTransactionalRecords = false;\n+        for (ProduceRequestData.TopicProduceData tpd : request.dataOrException().topicData()) {\n+            for (ProduceRequestData.PartitionProduceData ppd : tpd.partitionData()) {\n+                BaseRecords records = ppd.records();\n+                if (records instanceof Records) {\n+                    Iterator<? extends RecordBatch> iterator = ((Records) records).batches().iterator();\n+                    if (iterator.hasNext()) {\n+                        RecordBatch batch = iterator.next();\n+                        hasIdempotentRecords = hasIdempotentRecords || batch.hasProducerId();\n+                        hasTransactionalRecords = hasTransactionalRecords || batch.isTransactional();\n+                    }\n+                }\n+                // return early\n+                if (hasIdempotentRecords && hasTransactionalRecords)\n+                    return new AbstractMap.SimpleEntry<>(true, true);\n+            }\n+        }\n+        return new AbstractMap.SimpleEntry<>(hasIdempotentRecords, hasTransactionalRecords);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Nzc2MDY4OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDoyNzoyMVrOH1nBKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjowMDoyOFrOH1qfTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk3NTg0OQ==", "bodyText": "nit: It seem that TransactionalId is null by default so we don't have to set it explicitly all the time. There are few cases in the this file and in others. I am not sure if this was intentional so I am also fine if you want to keep them.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r525975849", "createdAt": "2020-11-18T10:27:21Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java", "diffHunk": "@@ -154,8 +155,11 @@ public void testClose() {\n         client.poll(1, time.milliseconds());\n         assertTrue(\"The client should be ready\", client.isReady(node, time.milliseconds()));\n \n-        ProduceRequest.Builder builder = ProduceRequest.Builder.forCurrentMagic((short) 1, 1000,\n-                Collections.emptyMap());\n+        ProduceRequest.Builder builder = ProduceRequest.forCurrentMagic(new ProduceRequestData()\n+                .setTopicData(new ProduceRequestData.TopicProduceDataCollection())\n+                .setAcks((short) 1)\n+                .setTimeoutMs(1000)\n+                .setTransactionalId(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAzMjcxNg==", "bodyText": "make sense to me. will remove this redundant setter", "url": "https://github.com/apache/kafka/pull/9401#discussion_r526032716", "createdAt": "2020-11-18T12:00:28Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java", "diffHunk": "@@ -154,8 +155,11 @@ public void testClose() {\n         client.poll(1, time.milliseconds());\n         assertTrue(\"The client should be ready\", client.isReady(node, time.milliseconds()));\n \n-        ProduceRequest.Builder builder = ProduceRequest.Builder.forCurrentMagic((short) 1, 1000,\n-                Collections.emptyMap());\n+        ProduceRequest.Builder builder = ProduceRequest.forCurrentMagic(new ProduceRequestData()\n+                .setTopicData(new ProduceRequestData.TopicProduceDataCollection())\n+                .setAcks((short) 1)\n+                .setTimeoutMs(1000)\n+                .setTransactionalId(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk3NTg0OQ=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Nzc3NzE3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDozMToxOFrOH1nLHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDozMToxOFrOH1nLHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk3ODM5Nw==", "bodyText": "nit: It may be better to use PRODUCE.latestVersion() to stay inline with L204. There are few cases like this in the file.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r525978397", "createdAt": "2020-11-18T10:31:18Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java", "diffHunk": "@@ -198,8 +202,9 @@ private void checkSimpleRequestResponse(NetworkClient networkClient) {\n         ResponseHeader respHeader =\n             new ResponseHeader(request.correlationId(),\n                 request.apiKey().responseHeaderVersion(PRODUCE.latestVersion()));\n-        Struct resp = new Struct(PRODUCE.responseSchema(PRODUCE.latestVersion()));\n-        resp.set(\"responses\", new Object[0]);\n+        Struct resp = new ProduceResponseData()\n+                .setThrottleTimeMs(100)\n+                .toStruct(ProduceResponseData.HIGHEST_SUPPORTED_VERSION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzgwMDM2OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDozNjo0M1rOH1nY4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDozNjo0M1rOH1nY4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4MTkyMA==", "bodyText": "nit: I am not sure if this is important or not but we were using -1 previously.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r525981920", "createdAt": "2020-11-18T10:36:43Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java", "diffHunk": "@@ -192,16 +258,21 @@ public void testMixedTransactionalData() {\n         final MemoryRecords txnRecords = MemoryRecords.withTransactionalRecords(CompressionType.NONE, producerId,\n                 producerEpoch, sequence, new SimpleRecord(\"bar\".getBytes()));\n \n-        final Map<TopicPartition, MemoryRecords> recordsByPartition = new LinkedHashMap<>();\n-        recordsByPartition.put(new TopicPartition(\"foo\", 0), txnRecords);\n-        recordsByPartition.put(new TopicPartition(\"foo\", 1), nonTxnRecords);\n-\n-        final ProduceRequest.Builder builder = ProduceRequest.Builder.forMagic(RecordVersion.current().value, (short) -1, 5000,\n-                recordsByPartition, transactionalId);\n+        ProduceRequest.Builder builder = ProduceRequest.forMagic(RecordBatch.CURRENT_MAGIC_VALUE,\n+                new ProduceRequestData()\n+                        .setTopicData(new ProduceRequestData.TopicProduceDataCollection(Arrays.asList(\n+                                new ProduceRequestData.TopicProduceData().setName(\"foo\").setPartitionData(Collections.singletonList(\n+                                        new ProduceRequestData.PartitionProduceData().setIndex(0).setRecords(txnRecords))),\n+                                new ProduceRequestData.TopicProduceData().setName(\"foo\").setPartitionData(Collections.singletonList(\n+                                        new ProduceRequestData.PartitionProduceData().setIndex(1).setRecords(nonTxnRecords))))\n+                                .iterator()))\n+                        .setAcks((short) 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzgwNDAyOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDozNzo0MVrOH1nbLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDozNzo0MVrOH1nbLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4MjUxMA==", "bodyText": "We were setting transactionalId previously.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r525982510", "createdAt": "2020-11-18T10:37:41Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java", "diffHunk": "@@ -192,16 +258,21 @@ public void testMixedTransactionalData() {\n         final MemoryRecords txnRecords = MemoryRecords.withTransactionalRecords(CompressionType.NONE, producerId,\n                 producerEpoch, sequence, new SimpleRecord(\"bar\".getBytes()));\n \n-        final Map<TopicPartition, MemoryRecords> recordsByPartition = new LinkedHashMap<>();\n-        recordsByPartition.put(new TopicPartition(\"foo\", 0), txnRecords);\n-        recordsByPartition.put(new TopicPartition(\"foo\", 1), nonTxnRecords);\n-\n-        final ProduceRequest.Builder builder = ProduceRequest.Builder.forMagic(RecordVersion.current().value, (short) -1, 5000,\n-                recordsByPartition, transactionalId);\n+        ProduceRequest.Builder builder = ProduceRequest.forMagic(RecordBatch.CURRENT_MAGIC_VALUE,\n+                new ProduceRequestData()\n+                        .setTopicData(new ProduceRequestData.TopicProduceDataCollection(Arrays.asList(\n+                                new ProduceRequestData.TopicProduceData().setName(\"foo\").setPartitionData(Collections.singletonList(\n+                                        new ProduceRequestData.PartitionProduceData().setIndex(0).setRecords(txnRecords))),\n+                                new ProduceRequestData.TopicProduceData().setName(\"foo\").setPartitionData(Collections.singletonList(\n+                                        new ProduceRequestData.PartitionProduceData().setIndex(1).setRecords(nonTxnRecords))))\n+                                .iterator()))\n+                        .setAcks((short) 1)\n+                        .setTimeoutMs(5000)\n+                        .setTransactionalId(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzgzNTIzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/ProduceRequest.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDo0NTowN1rOH1nuBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzowMTo0N1rOH136Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4NzMzNQ==", "bodyText": "I wonder if this one should be ignorable. It seems that we were ignoring it before when it was not present in the target version:\nstruct.setIfExists(NULLABLE_TRANSACTIONAL_ID, transactionalId)", "url": "https://github.com/apache/kafka/pull/9401#discussion_r525987335", "createdAt": "2020-11-18T10:45:07Z", "author": {"login": "dajac"}, "path": "clients/src/main/resources/common/message/ProduceRequest.json", "diffHunk": "@@ -33,21 +33,21 @@\n   \"validVersions\": \"0-8\",\n   \"flexibleVersions\": \"none\",\n   \"fields\": [\n-    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"0+\", \"entityType\": \"transactionalId\",\n+    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"3+\", \"default\": \"null\", \"entityType\": \"transactionalId\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAzOTg3Mg==", "bodyText": "you are right.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r526039872", "createdAt": "2020-11-18T12:13:18Z", "author": {"login": "chia7712"}, "path": "clients/src/main/resources/common/message/ProduceRequest.json", "diffHunk": "@@ -33,21 +33,21 @@\n   \"validVersions\": \"0-8\",\n   \"flexibleVersions\": \"none\",\n   \"fields\": [\n-    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"0+\", \"entityType\": \"transactionalId\",\n+    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"3+\", \"default\": \"null\", \"entityType\": \"transactionalId\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4NzMzNQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1MjU5NQ==", "bodyText": "Hmm I don't think it should be ignorable. The request would just fail if we drop it.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r526252595", "createdAt": "2020-11-18T17:01:47Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/ProduceRequest.json", "diffHunk": "@@ -33,21 +33,21 @@\n   \"validVersions\": \"0-8\",\n   \"flexibleVersions\": \"none\",\n   \"fields\": [\n-    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"0+\", \"entityType\": \"transactionalId\",\n+    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"3+\", \"default\": \"null\", \"entityType\": \"transactionalId\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4NzMzNQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTA1MDY3OnYy", "diffSide": "LEFT", "path": "clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTozMDowNlrOH1zZOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0NDozOVrOH10Hrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3ODYxNg==", "bodyText": "We should keep this one.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r526178616", "createdAt": "2020-11-18T15:30:06Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java", "diffHunk": "@@ -1730,7 +1768,6 @@ private DeleteTopicsResponse createDeleteTopicsResponse() {\n \n     private InitProducerIdRequest createInitPidRequest() {\n         InitProducerIdRequestData requestData = new InitProducerIdRequestData()\n-                .setTransactionalId(null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE5MDUxMA==", "bodyText": "thanks!!!", "url": "https://github.com/apache/kafka/pull/9401#discussion_r526190510", "createdAt": "2020-11-18T15:44:39Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java", "diffHunk": "@@ -1730,7 +1768,6 @@ private DeleteTopicsResponse createDeleteTopicsResponse() {\n \n     private InitProducerIdRequest createInitPidRequest() {\n         InitProducerIdRequestData requestData = new InitProducerIdRequestData()\n-                .setTransactionalId(null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3ODYxNg=="}, "originalCommit": null, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTA1OTUyOnYy", "diffSide": "LEFT", "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTozMTo0N1rOH1zekA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0MDozOVrOH1z6ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3OTk4NA==", "bodyText": "We should keep this one as well.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r526179984", "createdAt": "2020-11-18T15:31:47Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -580,7 +580,6 @@ synchronized void bumpIdempotentEpochAndResetIdIfNeeded() {\n             if (currentState != State.INITIALIZING && !hasProducerId()) {\n                 transitionTo(State.INITIALIZING);\n                 InitProducerIdRequestData requestData = new InitProducerIdRequestData()\n-                        .setTransactionalId(null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE4NzE2Ng==", "bodyText": "Sorry that I did not test them on my local before pushing :(", "url": "https://github.com/apache/kafka/pull/9401#discussion_r526187166", "createdAt": "2020-11-18T15:40:39Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -580,7 +580,6 @@ synchronized void bumpIdempotentEpochAndResetIdIfNeeded() {\n             if (currentState != State.INITIALIZING && !hasProducerId()) {\n                 transitionTo(State.INITIALIZING);\n                 InitProducerIdRequestData requestData = new InitProducerIdRequestData()\n-                        .setTransactionalId(null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3OTk4NA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTU1NTgzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/ProduceRequest.json", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoxMTo1NVrOH14X2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTozODo1OVrOH1_A1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2MDE4NA==", "bodyText": "I don't think it should be ignorable. Transactional requests require this in order to authorize.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r526260184", "createdAt": "2020-11-18T17:11:55Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/ProduceRequest.json", "diffHunk": "@@ -33,21 +33,21 @@\n   \"validVersions\": \"0-8\",\n   \"flexibleVersions\": \"none\",\n   \"fields\": [\n-    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"0+\", \"entityType\": \"transactionalId\",\n+    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"3+\", \"default\": \"null\", \"ignorable\": true, \"entityType\": \"transactionalId\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI4MDA0Mg==", "bodyText": "It seems to me ignorable should be true in order to keep behavior consistency. With \"ignore=false\", setting value to TransactionalId can cause UnsupportedVersionException if the version is small than 3. The previous code (https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java#L286) does not cause such exception.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r526280042", "createdAt": "2020-11-18T17:33:45Z", "author": {"login": "chia7712"}, "path": "clients/src/main/resources/common/message/ProduceRequest.json", "diffHunk": "@@ -33,21 +33,21 @@\n   \"validVersions\": \"0-8\",\n   \"flexibleVersions\": \"none\",\n   \"fields\": [\n-    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"0+\", \"entityType\": \"transactionalId\",\n+    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"3+\", \"default\": \"null\", \"ignorable\": true, \"entityType\": \"transactionalId\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2MDE4NA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwOTIwOA==", "bodyText": "The previous code probably relied on the range checking of the message format to imply support here. My point is that the request is doomed to fail if it holds transactional data and we drop the transactionalId. So we may as well fail fast.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r526309208", "createdAt": "2020-11-18T18:03:08Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/ProduceRequest.json", "diffHunk": "@@ -33,21 +33,21 @@\n   \"validVersions\": \"0-8\",\n   \"flexibleVersions\": \"none\",\n   \"fields\": [\n-    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"0+\", \"entityType\": \"transactionalId\",\n+    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"3+\", \"default\": \"null\", \"ignorable\": true, \"entityType\": \"transactionalId\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2MDE4NA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMxNDY0OA==", "bodyText": "So we may as well fail fast.\n\nThat make sense. will revert this change.", "url": "https://github.com/apache/kafka/pull/9401#discussion_r526314648", "createdAt": "2020-11-18T18:11:41Z", "author": {"login": "chia7712"}, "path": "clients/src/main/resources/common/message/ProduceRequest.json", "diffHunk": "@@ -33,21 +33,21 @@\n   \"validVersions\": \"0-8\",\n   \"flexibleVersions\": \"none\",\n   \"fields\": [\n-    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"0+\", \"entityType\": \"transactionalId\",\n+    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"3+\", \"default\": \"null\", \"ignorable\": true, \"entityType\": \"transactionalId\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2MDE4NA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2ODk4Mw==", "bodyText": "Indeed, that makes sense. My bad!", "url": "https://github.com/apache/kafka/pull/9401#discussion_r526368983", "createdAt": "2020-11-18T19:38:59Z", "author": {"login": "dajac"}, "path": "clients/src/main/resources/common/message/ProduceRequest.json", "diffHunk": "@@ -33,21 +33,21 @@\n   \"validVersions\": \"0-8\",\n   \"flexibleVersions\": \"none\",\n   \"fields\": [\n-    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"0+\", \"entityType\": \"transactionalId\",\n+    { \"name\": \"TransactionalId\", \"type\": \"string\", \"versions\": \"3+\", \"nullableVersions\": \"3+\", \"default\": \"null\", \"ignorable\": true, \"entityType\": \"transactionalId\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2MDE4NA=="}, "originalCommit": null, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1735, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}