{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MDU1MzI1", "number": 9727, "title": "[KAFKA-10417] Update Cogrouped processor to work with suppress() and joins", "bodyText": "Changes the cogrouped processor from PassThrough to KTablePassThrough to allow for sending old values. KTablePassThrough extends KTableProcessorSupplier instead of ProcessorSupplier to implement sending old values and the view() method.", "createdAt": "2020-12-10T16:20:38Z", "url": "https://github.com/apache/kafka/pull/9727", "merged": true, "mergeCommit": {"oid": "793117d45587ddcaed1629b7bb446df93268f27e"}, "closed": true, "closedAt": "2020-12-15T20:53:57Z", "author": {"login": "lct45"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdk1zhOgH2gAyNTM2MDU1MzI1OjQ1MTQ4YTkyMDY3ZWFlYzI0ZTQzOTU4ZjcxMWZiZmU3N2IzNTU2OGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmeFDrAFqTU1MjcxNTY1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "45148a92067eaec24e43958f711fbfe77b35568d", "author": {"user": {"login": "lct45", "name": "leah"}}, "url": "https://github.com/apache/kafka/commit/45148a92067eaec24e43958f711fbfe77b35568d", "committedDate": "2020-12-10T16:19:45Z", "message": "Initial changes to cogrouped processor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60e888d9e6b35aeb9f28945142d09091b946a648", "author": {"user": {"login": "lct45", "name": "leah"}}, "url": "https://github.com/apache/kafka/commit/60e888d9e6b35aeb9f28945142d09091b946a648", "committedDate": "2020-12-10T16:19:45Z", "message": "adding view"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fee1fd79eb5df5d0b63d7619a815351eb5165eb", "author": {"user": {"login": "lct45", "name": "leah"}}, "url": "https://github.com/apache/kafka/commit/1fee1fd79eb5df5d0b63d7619a815351eb5165eb", "committedDate": "2020-12-10T16:19:45Z", "message": "adding testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzM0Nzcx", "url": "https://github.com/apache/kafka/pull/9727#pullrequestreview-549734771", "createdAt": "2020-12-11T01:17:49Z", "commit": {"oid": "1fee1fd79eb5df5d0b63d7619a815351eb5165eb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxNzo0OVrOIDkveg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxOTowOFrOIDkxvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxODYxOA==", "bodyText": "I believe PassThrough is only used for the cogroup but now I think you can remove it completely.", "url": "https://github.com/apache/kafka/pull/9727#discussion_r540618618", "createdAt": "2020-12-11T01:17:49Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "diffHunk": "@@ -201,9 +219,10 @@ private void processRepartitions(final Map<KGroupedStreamImpl<K, ?>, Aggregator<\n             \"-cogroup-merge\",\n             builder,\n             CogroupedKStreamImpl.MERGE_NAME);\n-        final ProcessorSupplier<K, VOut> passThrough = new PassThrough<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fee1fd79eb5df5d0b63d7619a815351eb5165eb"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxOTE5OA==", "bodyText": "I think these lines are too long. The ones in the other methods too", "url": "https://github.com/apache/kafka/pull/9727#discussion_r540619198", "createdAt": "2020-12-11T01:19:08Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "diffHunk": "@@ -115,24 +124,28 @@\n                                 final Merger<? super K, VOut> sessionMerger) {\n         processRepartitions(groupPatterns, storeBuilder);\n         final Collection<GraphNode> processors = new ArrayList<>();\n+        final Collection<KStreamAggProcessorSupplier> parentProcessors = new ArrayList<>();\n         boolean stateCreated = false;\n         int counter = 0;\n         for (final Entry<KGroupedStreamImpl<K, ?>, Aggregator<? super K, Object, VOut>> kGroupedStream : groupPatterns.entrySet()) {\n+            final KStreamAggProcessorSupplier<K, K, ?, ?> parentProcessor = (KStreamAggProcessorSupplier<K, K, ?, ?>) new KStreamSessionWindowAggregate<K, K, VOut>(sessionWindows, storeBuilder.name(), initializer, kGroupedStream.getValue(), sessionMerger);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fee1fd79eb5df5d0b63d7619a815351eb5165eb"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f", "author": {"user": {"login": "lct45", "name": "leah"}}, "url": "https://github.com/apache/kafka/commit/dfc1dad96d83e4d4e153b1191e800fbb99dcd47f", "committedDate": "2020-12-11T15:29:19Z", "message": "Walker's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxODU0MzYy", "url": "https://github.com/apache/kafka/pull/9727#pullrequestreview-551854362", "createdAt": "2020-12-14T20:11:02Z", "commit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDoxMTowMlrOIFleuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDoxNToxOVrOIFlxpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjcyNzg2NQ==", "bodyText": "It looks like the parameter is ignored. Is that correct? If so, it might be nice to add an explanatory comment.", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542727865", "createdAt": "2020-12-14T20:11:02Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTablePassThrough.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.streams.processor.AbstractProcessor;\n+import org.apache.kafka.streams.processor.Processor;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.state.TimestampedKeyValueStore;\n+import org.apache.kafka.streams.state.ValueAndTimestamp;\n+\n+import java.util.Collection;\n+\n+public class KTablePassThrough<K, V> implements KTableProcessorSupplier<K, V, V> {\n+    private final Collection<KStreamAggProcessorSupplier> parents;\n+    private final String storeName;\n+\n+\n+    KTablePassThrough(final Collection<KStreamAggProcessorSupplier> parents, final String storeName) {\n+        this.parents = parents;\n+        this.storeName = storeName;\n+    }\n+\n+    @Override\n+    public Processor<K, Change<V>> get() {\n+        return new KTablePassThroughProcessor();\n+    }\n+\n+    @Override\n+    public boolean enableSendingOldValues(final boolean forceMaterialization) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMTY2Mg==", "bodyText": "I noticed that queryableName is a different parameter than the one we actually build the parent processors with (storeBuilder.name()). It wouldn't surprise me if there's a subtle difference between them.", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542731662", "createdAt": "2020-12-14T20:14:18Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "diffHunk": "@@ -201,9 +236,10 @@ private void processRepartitions(final Map<KGroupedStreamImpl<K, ?>, Aggregator<\n             \"-cogroup-merge\",\n             builder,\n             CogroupedKStreamImpl.MERGE_NAME);\n-        final ProcessorSupplier<K, VOut> passThrough = new PassThrough<>();\n+        final KTableProcessorSupplier<K, VOut, VOut> passThrough = new KTablePassThrough<>(parentProcessors, queryableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMjI2OQ==", "bodyText": "Just checking: does this fail on trunk?", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542732269", "createdAt": "2020-12-14T20:14:51Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/CogroupedKStreamImplTest.java", "diffHunk": "@@ -1202,6 +1204,46 @@ public void testCogroupWithThreeGroupedStreams() {\n         }\n     }\n \n+    @Test\n+    public void testCogroupWithKTableKTableInnerJoin() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMjcxMQ==", "bodyText": "And this one too?", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542732711", "createdAt": "2020-12-14T20:15:19Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/SuppressScenarioTest.java", "diffHunk": "@@ -803,6 +808,18 @@ public void shouldWorkBeforeJoinLeft() {\n \n     }\n \n+    @Test\n+    public void shouldWorkWithCogrouped() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ffa819ce6a24fb9b7dda0ec8bb176df983b50b7", "author": {"user": {"login": "lct45", "name": "leah"}}, "url": "https://github.com/apache/kafka/commit/8ffa819ce6a24fb9b7dda0ec8bb176df983b50b7", "committedDate": "2020-12-15T15:14:34Z", "message": "Added comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae1fc836bdc1aa26a8d11f6477ff1299fbc56822", "author": {"user": {"login": "lct45", "name": "leah"}}, "url": "https://github.com/apache/kafka/commit/ae1fc836bdc1aa26a8d11f6477ff1299fbc56822", "committedDate": "2020-12-15T16:44:54Z", "message": "John's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNzE1NjU2", "url": "https://github.com/apache/kafka/pull/9727#pullrequestreview-552715656", "createdAt": "2020-12-15T17:49:02Z", "commit": {"oid": "ae1fc836bdc1aa26a8d11f6477ff1299fbc56822"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2225, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}