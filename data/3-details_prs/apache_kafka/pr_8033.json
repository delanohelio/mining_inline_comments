{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5OTc5MjUz", "number": 8033, "title": "KAFKA-9487: Follow-up PR of Kafka-9445", "bodyText": "More detailed description of your change,\nif necessary. The PR title and PR message become\nthe squashed commit message, so use a separate\ncomment to ping reviewers.\nSummary of testing strategy (including rationale)\nfor the feature or bug fix. Unit and/or integration\ntests are expected for any behaviour change and\nsystem tests should be considered for larger changes.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-02-02T06:56:45Z", "url": "https://github.com/apache/kafka/pull/8033", "merged": true, "mergeCommit": {"oid": "d76fa1b22d4b06e1f1a7700272ca963091f13931"}, "closed": true, "closedAt": "2020-02-10T18:09:28Z", "author": {"login": "brary"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcASuMpAH2gAyMzY5OTc5MjUzOmM0MzhjNWRmYzQ1MWNmZGY2ZWQyZDQ1MmM4MTQyZTU5NmJjODMzMjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCYuqMgFqTM1NTU2MzI2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c438c5dfc451cfdf6ed2d452c8142e596bc83321", "author": {"user": {"login": "brary", "name": "Navinder Pal Singh Brar"}}, "url": "https://github.com/apache/kafka/commit/c438c5dfc451cfdf6ed2d452c8142e596bc83321", "committedDate": "2020-02-02T06:54:50Z", "message": "Addressing code review comments of 9445"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTc4MzM0", "url": "https://github.com/apache/kafka/pull/8033#pullrequestreview-351978334", "createdAt": "2020-02-03T00:00:03Z", "commit": {"oid": "c438c5dfc451cfdf6ed2d452c8142e596bc83321"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTEwMzc2", "url": "https://github.com/apache/kafka/pull/8033#pullrequestreview-352510376", "createdAt": "2020-02-03T19:39:09Z", "commit": {"oid": "c438c5dfc451cfdf6ed2d452c8142e596bc83321"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTozOTowOVrOFk9doA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo1MzoxM1rOFk94iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMDA2NA==", "bodyText": "cosmetic: Represents all the query options that a user can provide to control the kind of stores we would like to fetch ?", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374300064", "createdAt": "2020-02-03T19:39:09Z", "author": {"login": "vinothchandar"}, "path": "streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java", "diffHunk": "@@ -21,12 +21,11 @@\n import java.util.Objects;\n \n /**\n- * Represents all the query options that a user can provide to state what kind of stores it is expecting.\n+ * Represents all the query options that a user can provide to state what kind of stores we are expecting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c438c5dfc451cfdf6ed2d452c8142e596bc83321"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMDkxMA==", "bodyText": "Cosmetic:  Options could indicate - whether we want stale stores to be included (or) we want to filter for only stores belonging to a partition.", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374300910", "createdAt": "2020-02-03T19:41:00Z", "author": {"login": "vinothchandar"}, "path": "streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java", "diffHunk": "@@ -21,12 +21,11 @@\n import java.util.Objects;\n \n /**\n- * Represents all the query options that a user can provide to state what kind of stores it is expecting.\n+ * Represents all the query options that a user can provide to state what kind of stores we are expecting.\n  * The options would be whether a user would want to enable/disable stale stores", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c438c5dfc451cfdf6ed2d452c8142e596bc83321"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMTQ2NQ==", "bodyText": "Could we use a different sentinel than null for the partition field?. Does an Optional make sense?", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374301465", "createdAt": "2020-02-03T19:42:08Z", "author": {"login": "vinothchandar"}, "path": "streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java", "diffHunk": "@@ -35,46 +34,42 @@\n     private final String storeName;\n     private final QueryableStoreType<T> queryableStoreType;\n \n-    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType) {\n+    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType, final Integer partition, final boolean staleStores) {\n         this.storeName = storeName;\n         this.queryableStoreType = queryableStoreType;\n+        this.partition = partition;\n+        this.staleStores = staleStores;\n     }\n \n     public static <T> StoreQueryParams<T> fromNameAndType(final String storeName,\n                                                           final QueryableStoreType<T>  queryableStoreType) {\n-        return new StoreQueryParams<T>(storeName, queryableStoreType);\n+        return new StoreQueryParams<T>(storeName, queryableStoreType, null, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c438c5dfc451cfdf6ed2d452c8142e596bc83321"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMjA5MQ==", "bodyText": "nit: we need the * before @return right?", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374302091", "createdAt": "2020-02-03T19:43:28Z", "author": {"login": "vinothchandar"}, "path": "streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java", "diffHunk": "@@ -35,46 +34,42 @@\n     private final String storeName;\n     private final QueryableStoreType<T> queryableStoreType;\n \n-    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType) {\n+    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType, final Integer partition, final boolean staleStores) {\n         this.storeName = storeName;\n         this.queryableStoreType = queryableStoreType;\n+        this.partition = partition;\n+        this.staleStores = staleStores;\n     }\n \n     public static <T> StoreQueryParams<T> fromNameAndType(final String storeName,\n                                                           final QueryableStoreType<T>  queryableStoreType) {\n-        return new StoreQueryParams<T>(storeName, queryableStoreType);\n+        return new StoreQueryParams<T>(storeName, queryableStoreType, null, false);\n     }\n \n     /**\n      * Set a specific partition that should be queried exclusively.\n      *\n      * @param partition   The specific integer partition to be fetched from the stores list by using {@link StoreQueryParams}.\n      *\n-     * @return String storeName\n+     @return StoreQueryParams a new {@code StoreQueryParams} instance configured with the specified partition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c438c5dfc451cfdf6ed2d452c8142e596bc83321"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMzQ5NA==", "bodyText": "any reason we can't use an empty list for the sentinel?", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374303494", "createdAt": "2020-02-03T19:46:14Z", "author": {"login": "vinothchandar"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1148,6 +1148,17 @@ private static Pattern buildPattern(final Collection<String> sourceTopics,\n         return results;\n     }\n \n+    public List<String> sourceTopicsForStore(final String storeName) {\n+        final List<String> results = new ArrayList<>();\n+        for (final Map.Entry<String, Set<String>> entry : stateStoreNameToSourceTopics.entrySet()) {\n+            if (entry.getKey().equals(storeName)) {\n+                results.addAll(maybeDecorateInternalSourceTopics(entry.getValue()));\n+                return results;\n+            }\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c438c5dfc451cfdf6ed2d452c8142e596bc83321"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNjYyNQ==", "bodyText": "can't we just lookup the map? why iterate over if we are going to compare the key anyway?", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374306625", "createdAt": "2020-02-03T19:52:32Z", "author": {"login": "vinothchandar"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1148,6 +1148,17 @@ private static Pattern buildPattern(final Collection<String> sourceTopics,\n         return results;\n     }\n \n+    public List<String> sourceTopicsForStore(final String storeName) {\n+        final List<String> results = new ArrayList<>();\n+        for (final Map.Entry<String, Set<String>> entry : stateStoreNameToSourceTopics.entrySet()) {\n+            if (entry.getKey().equals(storeName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c438c5dfc451cfdf6ed2d452c8142e596bc83321"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNjk1NQ==", "bodyText": "a side note: Should we also consider the map stateStoreNameToSourceRegex here?", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374306955", "createdAt": "2020-02-03T19:53:13Z", "author": {"login": "vinothchandar"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1148,6 +1148,17 @@ private static Pattern buildPattern(final Collection<String> sourceTopics,\n         return results;\n     }\n \n+    public List<String> sourceTopicsForStore(final String storeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c438c5dfc451cfdf6ed2d452c8142e596bc83321"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "decbe530f2a9b914a4e9461d1df75d560085d083", "author": {"user": {"login": "brary", "name": "Navinder Pal Singh Brar"}}, "url": "https://github.com/apache/kafka/commit/decbe530f2a9b914a4e9461d1df75d560085d083", "committedDate": "2020-02-04T17:22:44Z", "message": "Addressing code review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTY3NzU4", "url": "https://github.com/apache/kafka/pull/8033#pullrequestreview-353167758", "createdAt": "2020-02-04T17:34:29Z", "commit": {"oid": "decbe530f2a9b914a4e9461d1df75d560085d083"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzozNDozMFrOFldEaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo1MDoyOVrOFldiZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxNzg5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param storeQueryParams   the parameteres used to fetch a type of queryable store\n          \n          \n            \n                 * @param storeQueryParams   the parameters used to fetch a queryable store", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374817897", "createdAt": "2020-02-04T17:34:30Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -1171,11 +1171,9 @@ public void cleanUp() {\n \n     /**\n      * Get a facade wrapping the local {@link StateStore} instances with the provided {@link StoreQueryParams}.\n-     * StoreQueryParams need required parameters to be set, which are {@code storeName} and if\n-     * type is accepted by the provided {@link QueryableStoreType#accepts(StateStore) queryableStoreType}.\n      * The returned object can be used to query the {@link StateStore} instances.\n      *\n-     * @param storeQueryParams   to set the optional parameters to fetch type of stores user wants to fetch when a key is queried\n+     * @param storeQueryParams   the parameteres used to fetch a type of queryable store", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decbe530f2a9b914a4e9461d1df75d560085d083"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMDQyOQ==", "bodyText": "This comment can easily become outdated as the class evolved. Better to keep it high level and defer to the setters' javadocs for a description of the available operations.\nEg:\n{@code StoreQueryParams} allows you to pass a variety of parameters when fetching a store for interactive query.", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374820429", "createdAt": "2020-02-04T17:39:41Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java", "diffHunk": "@@ -21,12 +21,11 @@\n import java.util.Objects;\n \n /**\n- * Represents all the query options that a user can provide to state what kind of stores it is expecting.\n- * The options would be whether a user would want to enable/disable stale stores\n- * or whether it knows the list of partitions that it specifically wants to fetch.\n- * If this information is not provided the default behavior is to fetch the stores for all the partitions\n+ * Represents all the query options that a user can provide to control the kind of stores we would like to fetch.\n+ * The options could indicate - whether we want stale stores to be included (or)\n+ * we want to filter for only stores belonging to a partition.\n+ * If no specific partition is specified the default behavior is to fetch the stores for all the partitions\n  * available on that instance for that particular store name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decbe530f2a9b914a4e9461d1df75d560085d083"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyNTU3Mw==", "bodyText": "I'm also a little confused. Would this not be the same?\nresults.addAll(maybeDecorateInternalSourceTopics(stateStoreNameToSourceTopics.get(storeName))\n\nI.e., converting the returned set to a list doesn't seem to require iterating over the whole map just to look for one key.\nOn a different note, it doesn't seem like we really need a List in particular. We could just relax it to Collection, and then you wouldn't have to convert the set to a list. But that's not a big issue to me.", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374825573", "createdAt": "2020-02-04T17:50:29Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1148,6 +1148,17 @@ private static Pattern buildPattern(final Collection<String> sourceTopics,\n         return results;\n     }\n \n+    public List<String> sourceTopicsForStore(final String storeName) {\n+        final List<String> results = new ArrayList<>();\n+        for (final Map.Entry<String, Set<String>> entry : stateStoreNameToSourceTopics.entrySet()) {\n+            if (entry.getKey().equals(storeName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNjYyNQ=="}, "originalCommit": {"oid": "c438c5dfc451cfdf6ed2d452c8142e596bc83321"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ba542355ca70cb1d21d22ba994daa4f805bf478", "author": {"user": {"login": "brary", "name": "Navinder Pal Singh Brar"}}, "url": "https://github.com/apache/kafka/commit/7ba542355ca70cb1d21d22ba994daa4f805bf478", "committedDate": "2020-02-05T08:06:03Z", "message": "Addressing code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da685d9e7edb286398383bcc153e861c6fa15a00", "author": {"user": {"login": "brary", "name": "Navinder Pal Singh Brar"}}, "url": "https://github.com/apache/kafka/commit/da685d9e7edb286398383bcc153e861c6fa15a00", "committedDate": "2020-02-05T08:14:42Z", "message": "Merge branch 'trunk' into navinderbrar-Followup-KAFKA-9445"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MDQ0NTIy", "url": "https://github.com/apache/kafka/pull/8033#pullrequestreview-354044522", "createdAt": "2020-02-05T21:14:17Z", "commit": {"oid": "da685d9e7edb286398383bcc153e861c6fa15a00"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMToxNDoxN1rOFmHYKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMToyMToxM1rOFmHkOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMTA4Mg==", "bodyText": "Nit: No need to do method calls, we can just access the variables directly.  Also, try to avoid unnecessary this. prefix", "url": "https://github.com/apache/kafka/pull/8033#discussion_r375511082", "createdAt": "2020-02-05T21:14:17Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java", "diffHunk": "@@ -35,46 +30,42 @@\n     private final String storeName;\n     private final QueryableStoreType<T> queryableStoreType;\n \n-    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType) {\n+    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType, final Integer partition, final boolean staleStores) {\n         this.storeName = storeName;\n         this.queryableStoreType = queryableStoreType;\n+        this.partition = partition;\n+        this.staleStores = staleStores;\n     }\n \n     public static <T> StoreQueryParams<T> fromNameAndType(final String storeName,\n                                                           final QueryableStoreType<T>  queryableStoreType) {\n-        return new StoreQueryParams<T>(storeName, queryableStoreType);\n+        return new StoreQueryParams<T>(storeName, queryableStoreType, null, false);\n     }\n \n     /**\n      * Set a specific partition that should be queried exclusively.\n      *\n      * @param partition   The specific integer partition to be fetched from the stores list by using {@link StoreQueryParams}.\n      *\n-     * @return String storeName\n+     * @return StoreQueryParams a new {@code StoreQueryParams} instance configured with the specified partition\n      */\n     public StoreQueryParams<T> withPartition(final Integer partition) {\n-        final StoreQueryParams<T> storeQueryParams = StoreQueryParams.fromNameAndType(this.storeName(), this.queryableStoreType());\n-        storeQueryParams.partition = partition;\n-        storeQueryParams.staleStores = this.staleStores;\n-        return storeQueryParams;\n+        return new StoreQueryParams<T>(this.storeName(), this.queryableStoreType(), partition, this.staleStores);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da685d9e7edb286398383bcc153e861c6fa15a00"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMTE5MA==", "bodyText": "as above.", "url": "https://github.com/apache/kafka/pull/8033#discussion_r375511190", "createdAt": "2020-02-05T21:14:35Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java", "diffHunk": "@@ -35,46 +30,42 @@\n     private final String storeName;\n     private final QueryableStoreType<T> queryableStoreType;\n \n-    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType) {\n+    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType, final Integer partition, final boolean staleStores) {\n         this.storeName = storeName;\n         this.queryableStoreType = queryableStoreType;\n+        this.partition = partition;\n+        this.staleStores = staleStores;\n     }\n \n     public static <T> StoreQueryParams<T> fromNameAndType(final String storeName,\n                                                           final QueryableStoreType<T>  queryableStoreType) {\n-        return new StoreQueryParams<T>(storeName, queryableStoreType);\n+        return new StoreQueryParams<T>(storeName, queryableStoreType, null, false);\n     }\n \n     /**\n      * Set a specific partition that should be queried exclusively.\n      *\n      * @param partition   The specific integer partition to be fetched from the stores list by using {@link StoreQueryParams}.\n      *\n-     * @return String storeName\n+     * @return StoreQueryParams a new {@code StoreQueryParams} instance configured with the specified partition\n      */\n     public StoreQueryParams<T> withPartition(final Integer partition) {\n-        final StoreQueryParams<T> storeQueryParams = StoreQueryParams.fromNameAndType(this.storeName(), this.queryableStoreType());\n-        storeQueryParams.partition = partition;\n-        storeQueryParams.staleStores = this.staleStores;\n-        return storeQueryParams;\n+        return new StoreQueryParams<T>(this.storeName(), this.queryableStoreType(), partition, this.staleStores);\n     }\n \n     /**\n      * Enable querying of stale state stores, i.e., allow to query active tasks during restore as well as standby tasks.\n      *\n-     * @return String storeName\n+     * @return StoreQueryParams a new {@code StoreQueryParams} instance configured with serving from stale stores enabled\n      */\n     public StoreQueryParams<T> enableStaleStores() {\n-        final StoreQueryParams<T> storeQueryParams = StoreQueryParams.fromNameAndType(this.storeName(), this.queryableStoreType());\n-        storeQueryParams.partition = this.partition;\n-        storeQueryParams.staleStores = true;\n-        return storeQueryParams;\n+        return new StoreQueryParams<T>(this.storeName(), this.queryableStoreType(), this.partition, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da685d9e7edb286398383bcc153e861c6fa15a00"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxNDE2OQ==", "bodyText": "I cannot comment below, but I think we should still simplify the code when the user specifies a partition. I left a comment on the original PR about it (https://github.com/apache/kafka/pull/7984/files#r375513526). Let me know if this comment makes sense.", "url": "https://github.com/apache/kafka/pull/8033#discussion_r375514169", "createdAt": "2020-02-05T21:21:13Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProvider.java", "diffHunk": "@@ -34,6 +34,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.Collection;\n+import java.util.stream.Collectors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da685d9e7edb286398383bcc153e861c6fa15a00"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MDk3ODcz", "url": "https://github.com/apache/kafka/pull/8033#pullrequestreview-354097873", "createdAt": "2020-02-05T22:52:37Z", "commit": {"oid": "da685d9e7edb286398383bcc153e861c6fa15a00"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f115ea90ec3fb49f0ffa02f2df2932780e7e5e0", "author": {"user": {"login": "brary", "name": "Navinder Pal Singh Brar"}}, "url": "https://github.com/apache/kafka/commit/0f115ea90ec3fb49f0ffa02f2df2932780e7e5e0", "committedDate": "2020-02-06T07:02:56Z", "message": "Changing StoreQueryParams to StoreQueryParameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8801c608eced5331eca213227c45d5da7960062a", "author": {"user": {"login": "brary", "name": "Navinder Pal Singh Brar"}}, "url": "https://github.com/apache/kafka/commit/8801c608eced5331eca213227c45d5da7960062a", "committedDate": "2020-02-06T08:49:10Z", "message": "Resolving merge conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NTYzMjYy", "url": "https://github.com/apache/kafka/pull/8033#pullrequestreview-355563262", "createdAt": "2020-02-08T19:02:37Z", "commit": {"oid": "8801c608eced5331eca213227c45d5da7960062a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1707, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}