{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3ODMxNjc1", "number": 8296, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNToxNTo1OFrODn3r_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMToxMDo0NFrODn-zMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTMzNDM4OnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResolverJoinProcessorSupplier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNToxNTo1OFrOF2HlYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNToxNTo1OFrOF2HlYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI5MTY4Mg==", "bodyText": "I just missed this last time I made a pass and cleaned up all the pseudo-topics. We should have passed in the common one for hashing LHS values, which is declared in KTableImpl (which is what we're doing now).", "url": "https://github.com/apache/kafka/pull/8296#discussion_r392291682", "createdAt": "2020-03-13T15:15:58Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResolverJoinProcessorSupplier.java", "diffHunk": "@@ -83,15 +86,10 @@ public void process(final K key, final SubscriptionResponseWrapper<VO> value) {\n                 }\n                 final ValueAndTimestamp<V> currentValueWithTimestamp = valueGetter.get(key);\n \n-                //We are unable to access the actual source topic name for the valueSerializer at runtime, without\n-                //tightly coupling to KTableRepartitionProcessorSupplier.\n-                //While we can use the source topic from where the events came from, we shouldn't serialize against it\n-                //as it causes problems with the confluent schema registry, which requires each topic have only a single\n-                //registered schema.\n-                final String dummySerializationTopic = context().topic() + \"-join-resolver\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9bc90eeb7637bac598a483cb0f80d229921d2d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjQ5OTY5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMToxMDo0NFrOF2TB4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoxMjoyOFrOF2U2jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ3OTIwMQ==", "bodyText": "Could we move the initialization of valueHashSerdePseudoTopic closer to where it is firstly used?", "url": "https://github.com/apache/kafka/pull/8296#discussion_r392479201", "createdAt": "2020-03-13T21:10:44Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java", "diffHunk": "@@ -1103,6 +1103,7 @@ boolean sendingOldValueEnabled() {\n         final SubscriptionResolverJoinProcessorSupplier<K, V, VO, VR> resolverProcessorSupplier = new SubscriptionResolverJoinProcessorSupplier<>(\n             primaryKeyValueGetter,\n             valSerde == null ? null : valSerde.serializer(),\n+            valueHashSerdePseudoTopic,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac36ea7d5afae776b0de856118e8a9a58a144fe"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUwODkxNQ==", "bodyText": "This thought is reasonable, but I put all the pseudo-topic definitions together so that we could see what they all are at a glance.", "url": "https://github.com/apache/kafka/pull/8296#discussion_r392508915", "createdAt": "2020-03-13T22:11:54Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java", "diffHunk": "@@ -1103,6 +1103,7 @@ boolean sendingOldValueEnabled() {\n         final SubscriptionResolverJoinProcessorSupplier<K, V, VO, VR> resolverProcessorSupplier = new SubscriptionResolverJoinProcessorSupplier<>(\n             primaryKeyValueGetter,\n             valSerde == null ? null : valSerde.serializer(),\n+            valueHashSerdePseudoTopic,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ3OTIwMQ=="}, "originalCommit": {"oid": "bac36ea7d5afae776b0de856118e8a9a58a144fe"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUwOTA3MA==", "bodyText": "Plus, the first use is the very first processor in the FK join, so it couldn't move down by much anyway :)", "url": "https://github.com/apache/kafka/pull/8296#discussion_r392509070", "createdAt": "2020-03-13T22:12:28Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java", "diffHunk": "@@ -1103,6 +1103,7 @@ boolean sendingOldValueEnabled() {\n         final SubscriptionResolverJoinProcessorSupplier<K, V, VO, VR> resolverProcessorSupplier = new SubscriptionResolverJoinProcessorSupplier<>(\n             primaryKeyValueGetter,\n             valSerde == null ? null : valSerde.serializer(),\n+            valueHashSerdePseudoTopic,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ3OTIwMQ=="}, "originalCommit": {"oid": "bac36ea7d5afae776b0de856118e8a9a58a144fe"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3332, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}