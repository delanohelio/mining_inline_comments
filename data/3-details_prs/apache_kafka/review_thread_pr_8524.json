{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NTMyMTg5", "number": 8524, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOToxMjoxMFrOD0I0Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToxMTowOVrOD25h8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTk2OTUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOToxMjoxMFrOGI7Vyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDoxODowMlrOGJuywA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAxNDAyNg==", "bodyText": "I think we should do this check last. We also want to use an option to avoid any potential NPEs. e.g:\ncontrollerContext.partitionLeadershipInfo.get(partition).forall(...)", "url": "https://github.com/apache/kafka/pull/8524#discussion_r412014026", "createdAt": "2020-04-21T09:12:10Z", "author": {"login": "stanislavkozlovski"}, "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "diffHunk": "@@ -1066,6 +1066,7 @@ class KafkaController(val config: KafkaConfig,\n         // do this check only if the broker is live and there are no partitions being reassigned currently\n         // and preferred replica election is not in progress\n         val candidatePartitions = topicsNotInPreferredReplica.keys.filter(tp => controllerContext.isReplicaOnline(leaderBroker, tp) &&\n+          controllerContext.partitionLeadershipInfo(tp).leaderAndIsr.isr.contains(leaderBroker) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44eea04f4a7cf2a2a1a7016bcb23da0511d6cc38"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg1NzAyNA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8524#discussion_r412857024", "createdAt": "2020-04-22T10:18:02Z", "author": {"login": "leonardge"}, "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "diffHunk": "@@ -1066,6 +1066,7 @@ class KafkaController(val config: KafkaConfig,\n         // do this check only if the broker is live and there are no partitions being reassigned currently\n         // and preferred replica election is not in progress\n         val candidatePartitions = topicsNotInPreferredReplica.keys.filter(tp => controllerContext.isReplicaOnline(leaderBroker, tp) &&\n+          controllerContext.partitionLeadershipInfo(tp).leaderAndIsr.isr.contains(leaderBroker) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAxNDAyNg=="}, "originalCommit": {"oid": "44eea04f4a7cf2a2a1a7016bcb23da0511d6cc38"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTQ0MzE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMTowODo1NVrOGKSKTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODowNTo1OFrOGK1TPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQzNjQ5NQ==", "bodyText": "The preferred leader election also checks for live brokers. So, perhaps we could just call PartitionLeaderElectionAlgorithms.preferredReplicaPartitionLeaderElection() here.", "url": "https://github.com/apache/kafka/pull/8524#discussion_r413436495", "createdAt": "2020-04-23T01:08:55Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "diffHunk": "@@ -1068,7 +1068,9 @@ class KafkaController(val config: KafkaConfig,\n         val candidatePartitions = topicsNotInPreferredReplica.keys.filter(tp => controllerContext.isReplicaOnline(leaderBroker, tp) &&\n           controllerContext.partitionsBeingReassigned.isEmpty &&\n           !topicDeletionManager.isTopicQueuedUpForDeletion(tp.topic) &&\n-          controllerContext.allTopics.contains(tp.topic))\n+          controllerContext.allTopics.contains(tp.topic) &&\n+          controllerContext.partitionLeadershipInfo.get(tp).forall(l => l.leaderAndIsr.isr.contains(leaderBroker))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29632f76ed34c75f80c175101c17155e98f24f0a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxMjIyMw==", "bodyText": "Done!", "url": "https://github.com/apache/kafka/pull/8524#discussion_r414012223", "createdAt": "2020-04-23T18:05:58Z", "author": {"login": "leonardge"}, "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "diffHunk": "@@ -1068,7 +1068,9 @@ class KafkaController(val config: KafkaConfig,\n         val candidatePartitions = topicsNotInPreferredReplica.keys.filter(tp => controllerContext.isReplicaOnline(leaderBroker, tp) &&\n           controllerContext.partitionsBeingReassigned.isEmpty &&\n           !topicDeletionManager.isTopicQueuedUpForDeletion(tp.topic) &&\n-          controllerContext.allTopics.contains(tp.topic))\n+          controllerContext.allTopics.contains(tp.topic) &&\n+          controllerContext.partitionLeadershipInfo.get(tp).forall(l => l.leaderAndIsr.isr.contains(leaderBroker))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQzNjQ5NQ=="}, "originalCommit": {"oid": "29632f76ed34c75f80c175101c17155e98f24f0a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzQ2NjA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODo1MTo0MFrOGK3Ifg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDoyNDozMVrOGLREEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0MjIzOA==", "bodyText": "In Election.leaderForPreferredReplica(), liveReplicas is computed as the following. So, we probably want to be consistent here.\nval liveReplicas = assignment.filter(replica => controllerContext.isReplicaOnline(replica, partition))", "url": "https://github.com/apache/kafka/pull/8524#discussion_r414042238", "createdAt": "2020-04-23T18:51:40Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "diffHunk": "@@ -1068,7 +1068,12 @@ class KafkaController(val config: KafkaConfig,\n         val candidatePartitions = topicsNotInPreferredReplica.keys.filter(tp => controllerContext.isReplicaOnline(leaderBroker, tp) &&\n           controllerContext.partitionsBeingReassigned.isEmpty &&\n           !topicDeletionManager.isTopicQueuedUpForDeletion(tp.topic) &&\n-          controllerContext.allTopics.contains(tp.topic))\n+          controllerContext.allTopics.contains(tp.topic) &&\n+          PartitionLeaderElectionAlgorithms.preferredReplicaPartitionLeaderElection(\n+            controllerContext.partitionReplicaAssignment(tp),\n+            controllerContext.partitionLeadershipInfo(tp).leaderAndIsr.isr,\n+            controllerContext.liveBrokerIds.toSet).nonEmpty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "172960f972e82b10158d86fb4c02a7f9317ac43c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2NzA5MA==", "bodyText": "Done! And after using the mentioned implementation the code block gets cluttered so I extracted it into a helper method.", "url": "https://github.com/apache/kafka/pull/8524#discussion_r414467090", "createdAt": "2020-04-24T10:24:31Z", "author": {"login": "leonardge"}, "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "diffHunk": "@@ -1068,7 +1068,12 @@ class KafkaController(val config: KafkaConfig,\n         val candidatePartitions = topicsNotInPreferredReplica.keys.filter(tp => controllerContext.isReplicaOnline(leaderBroker, tp) &&\n           controllerContext.partitionsBeingReassigned.isEmpty &&\n           !topicDeletionManager.isTopicQueuedUpForDeletion(tp.topic) &&\n-          controllerContext.allTopics.contains(tp.topic))\n+          controllerContext.allTopics.contains(tp.topic) &&\n+          PartitionLeaderElectionAlgorithms.preferredReplicaPartitionLeaderElection(\n+            controllerContext.partitionReplicaAssignment(tp),\n+            controllerContext.partitionLeadershipInfo(tp).leaderAndIsr.isr,\n+            controllerContext.liveBrokerIds.toSet).nonEmpty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0MjIzOA=="}, "originalCommit": {"oid": "172960f972e82b10158d86fb4c02a7f9317ac43c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODIwOTUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzoyNDoxN1rOGLhuQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNTozNDo0MVrOGL21Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0MDAzNA==", "bodyText": "Perhaps a more accurate name is canPreferredReplicaBeLeader()?", "url": "https://github.com/apache/kafka/pull/8524#discussion_r414740034", "createdAt": "2020-04-24T17:24:17Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "diffHunk": "@@ -1068,12 +1068,23 @@ class KafkaController(val config: KafkaConfig,\n         val candidatePartitions = topicsNotInPreferredReplica.keys.filter(tp => controllerContext.isReplicaOnline(leaderBroker, tp) &&\n           controllerContext.partitionsBeingReassigned.isEmpty &&\n           !topicDeletionManager.isTopicQueuedUpForDeletion(tp.topic) &&\n-          controllerContext.allTopics.contains(tp.topic))\n+          controllerContext.allTopics.contains(tp.topic) &&\n+          isPreferredLeaderInSync(tp)\n+       )\n         onReplicaElection(candidatePartitions.toSet, ElectionType.PREFERRED, AutoTriggered)\n       }\n     }\n   }\n \n+  private def isPreferredLeaderInSync(tp: TopicPartition): Boolean = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc67b99c2d2d45a59ede67da186d1890c7b7c1ce"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA4NTg3NA==", "bodyText": "Done!", "url": "https://github.com/apache/kafka/pull/8524#discussion_r415085874", "createdAt": "2020-04-25T15:34:41Z", "author": {"login": "leonardge"}, "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "diffHunk": "@@ -1068,12 +1068,23 @@ class KafkaController(val config: KafkaConfig,\n         val candidatePartitions = topicsNotInPreferredReplica.keys.filter(tp => controllerContext.isReplicaOnline(leaderBroker, tp) &&\n           controllerContext.partitionsBeingReassigned.isEmpty &&\n           !topicDeletionManager.isTopicQueuedUpForDeletion(tp.topic) &&\n-          controllerContext.allTopics.contains(tp.topic))\n+          controllerContext.allTopics.contains(tp.topic) &&\n+          isPreferredLeaderInSync(tp)\n+       )\n         onReplicaElection(candidatePartitions.toSet, ElectionType.PREFERRED, AutoTriggered)\n       }\n     }\n   }\n \n+  private def isPreferredLeaderInSync(tp: TopicPartition): Boolean = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0MDAzNA=="}, "originalCommit": {"oid": "dc67b99c2d2d45a59ede67da186d1890c7b7c1ce"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODkyMjcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToxMTowOVrOGM34NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMjoxNjowMVrOGM6B1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MTYwNQ==", "bodyText": "We also do controllerContext.isReplicaOnline(leaderBroker, tp) in the caller. Do we also need it here?", "url": "https://github.com/apache/kafka/pull/8524#discussion_r416151605", "createdAt": "2020-04-27T21:11:09Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "diffHunk": "@@ -1068,12 +1068,23 @@ class KafkaController(val config: KafkaConfig,\n         val candidatePartitions = topicsNotInPreferredReplica.keys.filter(tp => controllerContext.isReplicaOnline(leaderBroker, tp) &&\n           controllerContext.partitionsBeingReassigned.isEmpty &&\n           !topicDeletionManager.isTopicQueuedUpForDeletion(tp.topic) &&\n-          controllerContext.allTopics.contains(tp.topic))\n+          controllerContext.allTopics.contains(tp.topic) &&\n+          canPreferredReplicaBeLeader(tp)\n+       )\n         onReplicaElection(candidatePartitions.toSet, ElectionType.PREFERRED, AutoTriggered)\n       }\n     }\n   }\n \n+  private def canPreferredReplicaBeLeader(tp: TopicPartition): Boolean = {\n+    val assignment = controllerContext.partitionReplicaAssignment(tp)\n+    val liveReplicas = assignment.filter(replica => controllerContext.isReplicaOnline(replica, tp))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fa3ceed0322b90306393e0dffc1fdbdba779613"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2NDg2Mw==", "bodyText": "Good point. We can get rid of the isReplicaOnline() check in the caller. @leonardge : Could you summit a followup minor PR?", "url": "https://github.com/apache/kafka/pull/8524#discussion_r416164863", "createdAt": "2020-04-27T21:34:05Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "diffHunk": "@@ -1068,12 +1068,23 @@ class KafkaController(val config: KafkaConfig,\n         val candidatePartitions = topicsNotInPreferredReplica.keys.filter(tp => controllerContext.isReplicaOnline(leaderBroker, tp) &&\n           controllerContext.partitionsBeingReassigned.isEmpty &&\n           !topicDeletionManager.isTopicQueuedUpForDeletion(tp.topic) &&\n-          controllerContext.allTopics.contains(tp.topic))\n+          controllerContext.allTopics.contains(tp.topic) &&\n+          canPreferredReplicaBeLeader(tp)\n+       )\n         onReplicaElection(candidatePartitions.toSet, ElectionType.PREFERRED, AutoTriggered)\n       }\n     }\n   }\n \n+  private def canPreferredReplicaBeLeader(tp: TopicPartition): Boolean = {\n+    val assignment = controllerContext.partitionReplicaAssignment(tp)\n+    val liveReplicas = assignment.filter(replica => controllerContext.isReplicaOnline(replica, tp))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MTYwNQ=="}, "originalCommit": {"oid": "2fa3ceed0322b90306393e0dffc1fdbdba779613"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE4NjgzOA==", "bodyText": "Sure thing!", "url": "https://github.com/apache/kafka/pull/8524#discussion_r416186838", "createdAt": "2020-04-27T22:16:01Z", "author": {"login": "leonardge"}, "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "diffHunk": "@@ -1068,12 +1068,23 @@ class KafkaController(val config: KafkaConfig,\n         val candidatePartitions = topicsNotInPreferredReplica.keys.filter(tp => controllerContext.isReplicaOnline(leaderBroker, tp) &&\n           controllerContext.partitionsBeingReassigned.isEmpty &&\n           !topicDeletionManager.isTopicQueuedUpForDeletion(tp.topic) &&\n-          controllerContext.allTopics.contains(tp.topic))\n+          controllerContext.allTopics.contains(tp.topic) &&\n+          canPreferredReplicaBeLeader(tp)\n+       )\n         onReplicaElection(candidatePartitions.toSet, ElectionType.PREFERRED, AutoTriggered)\n       }\n     }\n   }\n \n+  private def canPreferredReplicaBeLeader(tp: TopicPartition): Boolean = {\n+    val assignment = controllerContext.partitionReplicaAssignment(tp)\n+    val liveReplicas = assignment.filter(replica => controllerContext.isReplicaOnline(replica, tp))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MTYwNQ=="}, "originalCommit": {"oid": "2fa3ceed0322b90306393e0dffc1fdbdba779613"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3054, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}