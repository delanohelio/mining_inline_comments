{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0ODkzNzIx", "number": 8630, "title": "KAFKA-9969: Exclude ConnectorClientConfigRequest from class loading isolation", "bodyText": "This is a partner to #6796 that applied the same change but for ConnectorClientConfigOverridePolicy.\nSigned-off-by: Greg Harris gregh@confluent.io\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-05-07T20:07:15Z", "url": "https://github.com/apache/kafka/pull/8630", "merged": true, "mergeCommit": {"oid": "7d8e62b3b6d5a4f414211eb9cd5caa0e77d72cfb"}, "closed": true, "closedAt": "2020-06-10T22:04:37Z", "author": {"login": "gharris1727"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfC-XiAH2gAyNDE0ODkzNzIxOjljNTA2ZjNiMTM4YjdmYTI5YWU0ZGIzYThlYjY1ZjdmMjNiNGE2Mzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqBAwdAFqTQyODQ1ODk1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9c506f3b138b7fa29ae4db3a8eb65f7f23b4a638", "author": {"user": {"login": "gharris1727", "name": "Greg Harris"}}, "url": "https://github.com/apache/kafka/commit/9c506f3b138b7fa29ae4db3a8eb65f7f23b4a638", "committedDate": "2020-05-07T20:05:40Z", "message": "KAFKA-9969: Exclude ConnectorClientConfigRequest from class loading isolation\n\nSigned-off-by: Greg Harris <gregh@confluent.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODIzMDI4", "url": "https://github.com/apache/kafka/pull/8630#pullrequestreview-407823028", "createdAt": "2020-05-07T20:45:28Z", "commit": {"oid": "9c506f3b138b7fa29ae4db3a8eb65f7f23b4a638"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8ca3bfeb5ba2d1774f02ada978e286b4e4192aa", "author": {"user": {"login": "gharris1727", "name": "Greg Harris"}}, "url": "https://github.com/apache/kafka/commit/a8ca3bfeb5ba2d1774f02ada978e286b4e4192aa", "committedDate": "2020-05-07T22:37:20Z", "message": "Refactor PluginUtils test and add more isolation test cases\n\nSigned-off-by: Greg Harris <gregh@confluent.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzY2ODc1", "url": "https://github.com/apache/kafka/pull/8630#pullrequestreview-422366875", "createdAt": "2020-06-02T06:08:03Z", "commit": {"oid": "a8ca3bfeb5ba2d1774f02ada978e286b4e4192aa"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjowODowM1rOGdjS0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjoxMjoxMlrOGdjYbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0MDE0NA==", "bodyText": "nit: do you mind using List<String> and Arrays.asList(...)? I don't think array declaration is better if the result is not going to be used as an array. Also, won't work if you try to reinitialize a declared variable.", "url": "https://github.com/apache/kafka/pull/8630#discussion_r433640144", "createdAt": "2020-06-02T06:08:03Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/isolation/PluginUtilsTest.java", "diffHunk": "@@ -114,68 +90,264 @@ public void testConnectFrameworkClasses() {\n         assertFalse(PluginUtils.shouldLoadInIsolation(\n                 \"org.apache.kafka.clients.admin.KafkaAdminClient\")\n         );\n-        assertFalse(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.rest.ConnectRestExtension\")\n-        );\n     }\n \n     @Test\n-    public void testAllowedConnectFrameworkClasses() {\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\"org.apache.kafka.connect.transforms.\"));\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.transforms.ExtractField\")\n-        );\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.transforms.ExtractField$Key\")\n-        );\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\"org.apache.kafka.connect.json.\"));\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.json.JsonConverter\")\n-        );\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.json.JsonConverter$21\")\n-        );\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\"org.apache.kafka.connect.file.\"));\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.file.FileStreamSourceTask\")\n-        );\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.file.FileStreamSinkConnector\")\n-        );\n+    public void testConnectApiClasses() {\n+        String[] apiClasses = new String[] {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ca3bfeb5ba2d1774f02ada978e286b4e4192aa"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0MDI0Nw==", "bodyText": "nit: same as above.", "url": "https://github.com/apache/kafka/pull/8630#discussion_r433640247", "createdAt": "2020-06-02T06:08:19Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/isolation/PluginUtilsTest.java", "diffHunk": "@@ -114,68 +90,264 @@ public void testConnectFrameworkClasses() {\n         assertFalse(PluginUtils.shouldLoadInIsolation(\n                 \"org.apache.kafka.clients.admin.KafkaAdminClient\")\n         );\n-        assertFalse(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.rest.ConnectRestExtension\")\n-        );\n     }\n \n     @Test\n-    public void testAllowedConnectFrameworkClasses() {\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\"org.apache.kafka.connect.transforms.\"));\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.transforms.ExtractField\")\n-        );\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.transforms.ExtractField$Key\")\n-        );\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\"org.apache.kafka.connect.json.\"));\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.json.JsonConverter\")\n-        );\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.json.JsonConverter$21\")\n-        );\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\"org.apache.kafka.connect.file.\"));\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.file.FileStreamSourceTask\")\n-        );\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.file.FileStreamSinkConnector\")\n-        );\n+    public void testConnectApiClasses() {\n+        String[] apiClasses = new String[] {\n+            // Enumerate all packages and classes\n+            \"org.apache.kafka.connect.\",\n+            \"org.apache.kafka.connect.components.\",\n+            \"org.apache.kafka.connect.components.Versioned\",\n+            //\"org.apache.kafka.connect.connector.policy.\", isolated by default\n+            \"org.apache.kafka.connect.connector.policy.ConnectorClientConfigOverridePolicy\",\n+            \"org.apache.kafka.connect.connector.policy.ConnectorClientConfigRequest\",\n+            \"org.apache.kafka.connect.connector.\",\n+            \"org.apache.kafka.connect.connector.Connector\",\n+            \"org.apache.kafka.connect.connector.ConnectorContext\",\n+            \"org.apache.kafka.connect.connector.ConnectRecord\",\n+            \"org.apache.kafka.connect.connector.Task\",\n+            \"org.apache.kafka.connect.data.\",\n+            \"org.apache.kafka.connect.data.ConnectSchema\",\n+            \"org.apache.kafka.connect.data.Date\",\n+            \"org.apache.kafka.connect.data.Decimal\",\n+            \"org.apache.kafka.connect.data.Field\",\n+            \"org.apache.kafka.connect.data.Schema\",\n+            \"org.apache.kafka.connect.data.SchemaAndValue\",\n+            \"org.apache.kafka.connect.data.SchemaBuilder\",\n+            \"org.apache.kafka.connect.data.SchemaProjector\",\n+            \"org.apache.kafka.connect.data.Struct\",\n+            \"org.apache.kafka.connect.data.Time\",\n+            \"org.apache.kafka.connect.data.Timestamp\",\n+            \"org.apache.kafka.connect.data.Values\",\n+            \"org.apache.kafka.connect.errors.\",\n+            \"org.apache.kafka.connect.errors.AlreadyExistsException\",\n+            \"org.apache.kafka.connect.errors.ConnectException\",\n+            \"org.apache.kafka.connect.errors.DataException\",\n+            \"org.apache.kafka.connect.errors.IllegalWorkerStateException\",\n+            \"org.apache.kafka.connect.errors.NotFoundException\",\n+            \"org.apache.kafka.connect.errors.RetriableException\",\n+            \"org.apache.kafka.connect.errors.SchemaBuilderException\",\n+            \"org.apache.kafka.connect.errors.SchemaProjectorException\",\n+            \"org.apache.kafka.connect.header.\",\n+            \"org.apache.kafka.connect.header.ConnectHeader\",\n+            \"org.apache.kafka.connect.header.ConnectHeaders\",\n+            \"org.apache.kafka.connect.header.Header\",\n+            \"org.apache.kafka.connect.header.Headers\",\n+            \"org.apache.kafka.connect.health.\",\n+            \"org.apache.kafka.connect.health.AbstractState\",\n+            \"org.apache.kafka.connect.health.ConnectClusterDetails\",\n+            \"org.apache.kafka.connect.health.ConnectClusterState\",\n+            \"org.apache.kafka.connect.health.ConnectorHealth\",\n+            \"org.apache.kafka.connect.health.ConnectorState\",\n+            \"org.apache.kafka.connect.health.ConnectorType\",\n+            \"org.apache.kafka.connect.health.TaskState\",\n+            \"org.apache.kafka.connect.rest.\",\n+            \"org.apache.kafka.connect.rest.ConnectRestExtension\",\n+            \"org.apache.kafka.connect.rest.ConnectRestExtensionContext\",\n+            \"org.apache.kafka.connect.sink.\",\n+            \"org.apache.kafka.connect.sink.SinkConnector\",\n+            \"org.apache.kafka.connect.sink.SinkRecord\",\n+            \"org.apache.kafka.connect.sink.SinkTask\",\n+            \"org.apache.kafka.connect.sink.SinkTaskContext\",\n+            \"org.apache.kafka.connect.source.\",\n+            \"org.apache.kafka.connect.source.SourceConnector\",\n+            \"org.apache.kafka.connect.source.SourceRecord\",\n+            \"org.apache.kafka.connect.source.SourceTask\",\n+            \"org.apache.kafka.connect.source.SourceTaskContext\",\n+            \"org.apache.kafka.connect.storage.\",\n+            \"org.apache.kafka.connect.storage.Converter\",\n+            \"org.apache.kafka.connect.storage.ConverterConfig\",\n+            \"org.apache.kafka.connect.storage.ConverterType\",\n+            \"org.apache.kafka.connect.storage.HeaderConverter\",\n+            \"org.apache.kafka.connect.storage.OffsetStorageReader\",\n+            //\"org.apache.kafka.connect.storage.SimpleHeaderConverter\", explicitly isolated\n+            //\"org.apache.kafka.connect.storage.StringConverter\", explicitly isolated\n+            \"org.apache.kafka.connect.storage.StringConverterConfig\",\n+            //\"org.apache.kafka.connect.transforms.\", isolated by default\n+            \"org.apache.kafka.connect.transforms.Transformation\",\n+            \"org.apache.kafka.connect.util.\",\n+            \"org.apache.kafka.connect.util.ConnectorUtils\"\n+        };\n+        // Classes in the API should never be loaded in isolation.\n+        for (String clazz : apiClasses) {\n+            assertFalse(\n+                clazz + \" from 'api' is loaded in isolation but should not be\",\n+                PluginUtils.shouldLoadInIsolation(clazz)\n+            );\n+        }\n+    }\n+\n+    @Test\n+    public void testConnectRuntimeClasses() {\n+        // Only list packages, because there are too many classes.\n+        String[] runtimeClasses = new String[]{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ca3bfeb5ba2d1774f02ada978e286b4e4192aa"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0MTU4Mw==", "bodyText": "The exhaustive list of classes is unmaintainable and it's highly improbable that new classes will be removed or added.\nCan we instead keep the existing testing based on packages, keep testing the exceptions and then test a few indicative classes that most probably won't be removed any time soon as a way to test the inclusion and exclusion from isolation?", "url": "https://github.com/apache/kafka/pull/8630#discussion_r433641583", "createdAt": "2020-06-02T06:12:12Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/isolation/PluginUtilsTest.java", "diffHunk": "@@ -114,68 +90,264 @@ public void testConnectFrameworkClasses() {\n         assertFalse(PluginUtils.shouldLoadInIsolation(\n                 \"org.apache.kafka.clients.admin.KafkaAdminClient\")\n         );\n-        assertFalse(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.rest.ConnectRestExtension\")\n-        );\n     }\n \n     @Test\n-    public void testAllowedConnectFrameworkClasses() {\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\"org.apache.kafka.connect.transforms.\"));\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.transforms.ExtractField\")\n-        );\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.transforms.ExtractField$Key\")\n-        );\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\"org.apache.kafka.connect.json.\"));\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.json.JsonConverter\")\n-        );\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.json.JsonConverter$21\")\n-        );\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\"org.apache.kafka.connect.file.\"));\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.file.FileStreamSourceTask\")\n-        );\n-        assertTrue(PluginUtils.shouldLoadInIsolation(\n-                \"org.apache.kafka.connect.file.FileStreamSinkConnector\")\n-        );\n+    public void testConnectApiClasses() {\n+        String[] apiClasses = new String[] {\n+            // Enumerate all packages and classes\n+            \"org.apache.kafka.connect.\",\n+            \"org.apache.kafka.connect.components.\",\n+            \"org.apache.kafka.connect.components.Versioned\",\n+            //\"org.apache.kafka.connect.connector.policy.\", isolated by default\n+            \"org.apache.kafka.connect.connector.policy.ConnectorClientConfigOverridePolicy\",\n+            \"org.apache.kafka.connect.connector.policy.ConnectorClientConfigRequest\",\n+            \"org.apache.kafka.connect.connector.\",\n+            \"org.apache.kafka.connect.connector.Connector\",\n+            \"org.apache.kafka.connect.connector.ConnectorContext\",\n+            \"org.apache.kafka.connect.connector.ConnectRecord\",\n+            \"org.apache.kafka.connect.connector.Task\",\n+            \"org.apache.kafka.connect.data.\",\n+            \"org.apache.kafka.connect.data.ConnectSchema\",\n+            \"org.apache.kafka.connect.data.Date\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ca3bfeb5ba2d1774f02ada978e286b4e4192aa"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b90bf1f0b200487fa8248927c0976dee89cdb35", "author": {"user": {"login": "gharris1727", "name": "Greg Harris"}}, "url": "https://github.com/apache/kafka/commit/0b90bf1f0b200487fa8248927c0976dee89cdb35", "committedDate": "2020-06-02T18:08:21Z", "message": "Merge branch 'trunk' into config-request-isolation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c3d6486aba8100720f1afee9d7a3e948cd051dd", "author": {"user": {"login": "gharris1727", "name": "Greg Harris"}}, "url": "https://github.com/apache/kafka/commit/7c3d6486aba8100720f1afee9d7a3e948cd051dd", "committedDate": "2020-06-02T18:10:17Z", "message": "Add HasHeaderKey and RecordIsTombstone classes to transforms test\n\nSigned-off-by: Greg Harris <gregh@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb81a3979707b6478f212a3b8c8a64e205ef9d7c", "author": {"user": {"login": "gharris1727", "name": "Greg Harris"}}, "url": "https://github.com/apache/kafka/commit/eb81a3979707b6478f212a3b8c8a64e205ef9d7c", "committedDate": "2020-06-02T18:41:30Z", "message": "Whitelist ConnectorClientConfigRequest$ClientType and remove capturing group\n\nSigned-off-by: Greg Harris <gregh@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df11574f7e5ef013fe349d60b6a953b0d77f9a89", "author": {"user": {"login": "gharris1727", "name": "Greg Harris"}}, "url": "https://github.com/apache/kafka/commit/df11574f7e5ef013fe349d60b6a953b0d77f9a89", "committedDate": "2020-06-02T18:48:59Z", "message": "Replace string arrays with lists of strings in test\n\nSigned-off-by: Greg Harris <gregh@confluent.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NDU4NTA2", "url": "https://github.com/apache/kafka/pull/8630#pullrequestreview-428458506", "createdAt": "2020-06-10T22:00:42Z", "commit": {"oid": "df11574f7e5ef013fe349d60b6a953b0d77f9a89"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NDU4OTUz", "url": "https://github.com/apache/kafka/pull/8630#pullrequestreview-428458953", "createdAt": "2020-06-10T22:01:38Z", "commit": {"oid": "df11574f7e5ef013fe349d60b6a953b0d77f9a89"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1380, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}