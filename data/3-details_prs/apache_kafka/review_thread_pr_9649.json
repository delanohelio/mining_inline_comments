{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NDA3MDQ2", "number": 9649, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjoxMzozMVrOFK9CQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMjozNDoyMlrOFLH1wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDMwMDgxOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/AlterIsrManagerTest.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjoxMzozMVrOIN3o9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjoxMzozMVrOIN3o9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQxNDAwNA==", "bodyText": "Maybe rename this and \"testPartitionError\" to something slightly different so they don't look like actual test cases? Maybe something like \"assertTopLevelError\" or \"checkTopLevelError\".", "url": "https://github.com/apache/kafka/pull/9649#discussion_r551414004", "createdAt": "2021-01-04T16:13:31Z", "author": {"login": "mumrah"}, "path": "core/src/test/scala/unit/kafka/server/AlterIsrManagerTest.scala", "diffHunk": "@@ -127,26 +127,24 @@ class AlterIsrManagerTest {\n \n   @Test\n   def testAuthorizationFailed(): Unit = {\n-    val isrs = Seq(AlterIsrItem(tp0, new LeaderAndIsr(1, 1, List(1,2,3), 10), _ => { }, 0))\n-    val manager = testTopLevelError(isrs, Errors.CLUSTER_AUTHORIZATION_FAILED)\n-    // On authz error, we log the exception and keep retrying\n-    assertFalse(manager.submit(AlterIsrItem(tp0, null, _ => { }, 0)))\n+    testTopLevelError(Errors.CLUSTER_AUTHORIZATION_FAILED)\n   }\n \n   @Test\n   def testStaleBrokerEpoch(): Unit = {\n-    val isrs = Seq(AlterIsrItem(tp0, new LeaderAndIsr(1, 1, List(1,2,3), 10), _ => { }, 0))\n-    val manager = testTopLevelError(isrs, Errors.STALE_BROKER_EPOCH)\n-    // On stale broker epoch, we want to retry, so we don't clear items from the pending map\n-    assertFalse(manager.submit(AlterIsrItem(tp0, null, _ => { }, 0)))\n+    testTopLevelError(Errors.STALE_BROKER_EPOCH)\n   }\n \n   @Test\n-  def testOtherErrors(): Unit = {\n+  def testUnknownServer(): Unit = {\n+    testTopLevelError(Errors.UNKNOWN_SERVER_ERROR)\n+  }\n+\n+  def testTopLevelError(error: Errors): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0802e5063bd5d65cc47e2a370c36e19717aaf3d7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjA3MDkxOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/AlterIsrManagerTest.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMjozNDoxN1rOIOIFzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMjozNDoxN1rOIOIFzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY4MzUzNA==", "bodyText": "Could you change it to private method?", "url": "https://github.com/apache/kafka/pull/9649#discussion_r551683534", "createdAt": "2021-01-05T02:34:17Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/unit/kafka/server/AlterIsrManagerTest.scala", "diffHunk": "@@ -127,26 +127,24 @@ class AlterIsrManagerTest {\n \n   @Test\n   def testAuthorizationFailed(): Unit = {\n-    val isrs = Seq(AlterIsrItem(tp0, new LeaderAndIsr(1, 1, List(1,2,3), 10), _ => { }, 0))\n-    val manager = testTopLevelError(isrs, Errors.CLUSTER_AUTHORIZATION_FAILED)\n-    // On authz error, we log the exception and keep retrying\n-    assertFalse(manager.submit(AlterIsrItem(tp0, null, _ => { }, 0)))\n+    checkTopLevelError(Errors.CLUSTER_AUTHORIZATION_FAILED)\n   }\n \n   @Test\n   def testStaleBrokerEpoch(): Unit = {\n-    val isrs = Seq(AlterIsrItem(tp0, new LeaderAndIsr(1, 1, List(1,2,3), 10), _ => { }, 0))\n-    val manager = testTopLevelError(isrs, Errors.STALE_BROKER_EPOCH)\n-    // On stale broker epoch, we want to retry, so we don't clear items from the pending map\n-    assertFalse(manager.submit(AlterIsrItem(tp0, null, _ => { }, 0)))\n+    checkTopLevelError(Errors.STALE_BROKER_EPOCH)\n   }\n \n   @Test\n-  def testOtherErrors(): Unit = {\n+  def testUnknownServer(): Unit = {\n+    checkTopLevelError(Errors.UNKNOWN_SERVER_ERROR)\n+  }\n+\n+  def checkTopLevelError(error: Errors): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29662bd6ead6478b75a665d617cb1e5cbdaa4050"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjA3MTA1OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/AlterIsrManagerTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMjozNDoyMlrOIOIF4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNToxMDozNlrOIOKUBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY4MzU1NQ==", "bodyText": "ditto", "url": "https://github.com/apache/kafka/pull/9649#discussion_r551683555", "createdAt": "2021-01-05T02:34:22Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/unit/kafka/server/AlterIsrManagerTest.scala", "diffHunk": "@@ -174,13 +172,24 @@ class AlterIsrManagerTest {\n   }\n \n   @Test\n-  def testPartitionErrors(): Unit = {\n-    val errors = Seq(Errors.INVALID_UPDATE_VERSION, Errors.UNKNOWN_TOPIC_OR_PARTITION, Errors.NOT_LEADER_OR_FOLLOWER)\n-    errors.foreach(error => {\n-      val alterIsrManager = testPartitionError(tp0, error)\n-      // Any partition-level error should clear the item from the pending queue allowing for future updates\n-      assertTrue(alterIsrManager.submit(AlterIsrItem(tp0, null, _ => { }, 0)))\n-    })\n+  def testInvalidUpdateVersion(): Unit = {\n+    checkPartitionError(Errors.INVALID_UPDATE_VERSION)\n+  }\n+\n+  @Test\n+  def testUnknownTopicPartition(): Unit = {\n+    checkPartitionError(Errors.UNKNOWN_TOPIC_OR_PARTITION)\n+  }\n+\n+  @Test\n+  def testNotLeaderOrFollower(): Unit = {\n+    checkPartitionError(Errors.NOT_LEADER_OR_FOLLOWER)\n+  }\n+\n+  def checkPartitionError(error: Errors): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29662bd6ead6478b75a665d617cb1e5cbdaa4050"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxOTk0MA==", "bodyText": "Thanks, done!", "url": "https://github.com/apache/kafka/pull/9649#discussion_r551719940", "createdAt": "2021-01-05T05:10:36Z", "author": {"login": "dengziming"}, "path": "core/src/test/scala/unit/kafka/server/AlterIsrManagerTest.scala", "diffHunk": "@@ -174,13 +172,24 @@ class AlterIsrManagerTest {\n   }\n \n   @Test\n-  def testPartitionErrors(): Unit = {\n-    val errors = Seq(Errors.INVALID_UPDATE_VERSION, Errors.UNKNOWN_TOPIC_OR_PARTITION, Errors.NOT_LEADER_OR_FOLLOWER)\n-    errors.foreach(error => {\n-      val alterIsrManager = testPartitionError(tp0, error)\n-      // Any partition-level error should clear the item from the pending queue allowing for future updates\n-      assertTrue(alterIsrManager.submit(AlterIsrItem(tp0, null, _ => { }, 0)))\n-    })\n+  def testInvalidUpdateVersion(): Unit = {\n+    checkPartitionError(Errors.INVALID_UPDATE_VERSION)\n+  }\n+\n+  @Test\n+  def testUnknownTopicPartition(): Unit = {\n+    checkPartitionError(Errors.UNKNOWN_TOPIC_OR_PARTITION)\n+  }\n+\n+  @Test\n+  def testNotLeaderOrFollower(): Unit = {\n+    checkPartitionError(Errors.NOT_LEADER_OR_FOLLOWER)\n+  }\n+\n+  def checkPartitionError(error: Errors): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY4MzU1NQ=="}, "originalCommit": {"oid": "29662bd6ead6478b75a665d617cb1e5cbdaa4050"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3619, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}