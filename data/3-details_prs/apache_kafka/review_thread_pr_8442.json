{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTYzNzUx", "number": 8442, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoyNToyOFrODvyfqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNToyODo0M1rOD3eujw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM2OTcwOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/LogReporter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoyNToyOFrOGCaz4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDo0NTozN1rOGCbJug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4OTYwMA==", "bodyText": "want to add this as a default implementation in the ErrorReporter interface?", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405189600", "createdAt": "2020-04-08T00:25:28Z", "author": {"login": "wicknicks"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/LogReporter.java", "diffHunk": "@@ -69,4 +69,7 @@ String message(ProcessingContext context) {\n                 context.toString(connConfig.includeRecordDetailsInErrorLog()));\n     }\n \n+    @Override\n+    public void close() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10cd9cc44915648c09fbda322c386161821953b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MjU0OA==", "bodyText": "It might save us a few LOC if we added a default implementation but I kind of like the guarantee that any new implementation of the ErrorReporter interface would have to explicitly add a close method since it might help prevent resource leaks similar to the ones that warranted these changes in the future. And it's not public API, so we don't have to worry about breaking compatibility by adding a new method with no default implementation.", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405192548", "createdAt": "2020-04-08T00:35:36Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/LogReporter.java", "diffHunk": "@@ -69,4 +69,7 @@ String message(ProcessingContext context) {\n                 context.toString(connConfig.includeRecordDetailsInErrorLog()));\n     }\n \n+    @Override\n+    public void close() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4OTYwMA=="}, "originalCommit": {"oid": "a10cd9cc44915648c09fbda322c386161821953b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5NTE5NA==", "bodyText": "I'll revert this to reduce the number of files changed and preserve backwards compatibility, but I would be fine with either strategy.\nWhen implementing this method for the LogReporter, I did for a moment have to scan the file and consider what resources might need to be cleaned up. I appreciate that the non-default method forced me to do that, and when/if another ErrorReporter subclass is written, I think it will be helpful too.", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405195194", "createdAt": "2020-04-08T00:45:37Z", "author": {"login": "gharris1727"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/LogReporter.java", "diffHunk": "@@ -69,4 +69,7 @@ String message(ProcessingContext context) {\n                 context.toString(connConfig.includeRecordDetailsInErrorLog()));\n     }\n \n+    @Override\n+    public void close() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4OTYwMA=="}, "originalCommit": {"oid": "a10cd9cc44915648c09fbda322c386161821953b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM5NzU5OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/errors/ErrorReporterTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDo0MDoyNFrOGCbERg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMToyMjozOFrOGCbwFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mzc5OA==", "bodyText": "If I read this correctly, the guarantee here is that if a DLQ reporter is closed, its internal Kafka producer will also be closed.\nDo you think it would also make sense to add a test to ensure that when a WorkerSinkTask and WorkerSourceTask  are shut down, and/or a RetryWithToleranceOperator is closed, the underlying ErrorReporter instances are closed as well?", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405193798", "createdAt": "2020-04-08T00:40:24Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/errors/ErrorReporterTest.java", "diffHunk": "@@ -146,6 +146,20 @@ public void testReportDLQTwice() {\n         PowerMock.verifyAll();\n     }\n \n+    @Test\n+    public void testCloseDLQ() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10cd9cc44915648c09fbda322c386161821953b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNDM3Ng==", "bodyText": "I found ErrorHandlingTaskTest that seemed to be doing similar testing, and I managed to test the rest of the hierarchy (WorkerSourceTask/WorkerSinkTask -> RetryWithToleranceOperator -> ProcessingContext -> ErrorReporter) in just two tests.\nCombined with the DLQ reporter -> KafkaProducer test from the first commit, I think the testing is adequate now.", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405204376", "createdAt": "2020-04-08T01:20:10Z", "author": {"login": "gharris1727"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/errors/ErrorReporterTest.java", "diffHunk": "@@ -146,6 +146,20 @@ public void testReportDLQTwice() {\n         PowerMock.verifyAll();\n     }\n \n+    @Test\n+    public void testCloseDLQ() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mzc5OA=="}, "originalCommit": {"oid": "a10cd9cc44915648c09fbda322c386161821953b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNTAxMg==", "bodyText": "Agreed, looks great!", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405205012", "createdAt": "2020-04-08T01:22:38Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/errors/ErrorReporterTest.java", "diffHunk": "@@ -146,6 +146,20 @@ public void testReportDLQTwice() {\n         PowerMock.verifyAll();\n     }\n \n+    @Test\n+    public void testCloseDLQ() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mzc5OA=="}, "originalCommit": {"oid": "a10cd9cc44915648c09fbda322c386161821953b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTQ3OTQ4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/ProcessingContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo0ODoyMlrOGClO4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo0Nzo1MFrOGC39iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2MDM1Mg==", "bodyText": "The exception caused by reporter will break this loop. Should we keep the exception and then throw it after all reporters are closed?", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405360352", "createdAt": "2020-04-08T08:48:22Z", "author": {"login": "chia7712"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/ProcessingContext.java", "diffHunk": "@@ -216,4 +216,10 @@ public void reporters(Collection<ErrorReporter> reporters) {\n         this.reporters = reporters;\n     }\n \n+    @Override\n+    public void close() throws Exception {\n+        for (ErrorReporter reporter : reporters) {\n+            reporter.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9973816a0e52b7bc0f4d619c1f8e326a5807bdfc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2NzIwOQ==", "bodyText": "Yes, thanks for catching this oversight. I've added logic to suppress the exceptions from each of the reporters, but i'm not sure if that's the idiomatic way to combine multiple exceptions. I've also added a test to verify that this error collection behavior is present.", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405667209", "createdAt": "2020-04-08T16:47:50Z", "author": {"login": "gharris1727"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/ProcessingContext.java", "diffHunk": "@@ -216,4 +216,10 @@ public void reporters(Collection<ErrorReporter> reporters) {\n         this.reporters = reporters;\n     }\n \n+    @Override\n+    public void close() throws Exception {\n+        for (ErrorReporter reporter : reporters) {\n+            reporter.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2MDM1Mg=="}, "originalCommit": {"oid": "9973816a0e52b7bc0f4d619c1f8e326a5807bdfc"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTQ4ODg5OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/ProcessingContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo1MDo0MFrOGClUsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoyMDozNlrOGC24AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2MTg0Mw==", "bodyText": "Is Exception in method signature necessary? the method signature of ErrorReporter#close don't include checked exception.", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405361843", "createdAt": "2020-04-08T08:50:40Z", "author": {"login": "chia7712"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/ProcessingContext.java", "diffHunk": "@@ -216,4 +216,10 @@ public void reporters(Collection<ErrorReporter> reporters) {\n         this.reporters = reporters;\n     }\n \n+    @Override\n+    public void close() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9973816a0e52b7bc0f4d619c1f8e326a5807bdfc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0OTQwOA==", "bodyText": "You're right, i've removed the throws annotation here and above. Thanks!", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405649408", "createdAt": "2020-04-08T16:20:36Z", "author": {"login": "gharris1727"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/ProcessingContext.java", "diffHunk": "@@ -216,4 +216,10 @@ public void reporters(Collection<ErrorReporter> reporters) {\n         this.reporters = reporters;\n     }\n \n+    @Override\n+    public void close() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2MTg0Mw=="}, "originalCommit": {"oid": "9973816a0e52b7bc0f4d619c1f8e326a5807bdfc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDk0OTU5OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo1MDowMFrOGNvozg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo1MDowMFrOGNvozg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTE2Ng==", "bodyText": "This is common enough that there's a util for that and is used extensively:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try {\n          \n          \n            \n                        retryWithToleranceOperator.close();\n          \n          \n            \n                    } catch (Throwable t) {\n          \n          \n            \n                        log.warn(\"Could not close retry operator\", t);\n          \n          \n            \n                    }\n          \n          \n            \n                    Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");", "url": "https://github.com/apache/kafka/pull/8442#discussion_r417065166", "createdAt": "2020-04-29T04:50:00Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java", "diffHunk": "@@ -170,6 +170,11 @@ protected void close() {\n         } catch (Throwable t) {\n             log.warn(\"Could not close transformation chain\", t);\n         }\n+        try {\n+            retryWithToleranceOperator.close();\n+        } catch (Throwable t) {\n+            log.warn(\"Could not close retry operator\", t);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23c4566c147c671c51ef4a8774afc15cb39b022"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDk1MDY3OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo1MDozNlrOGNvpYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo1MDozNlrOGNvpYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTMxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try {\n          \n          \n            \n                        retryWithToleranceOperator.close();\n          \n          \n            \n                    } catch (Throwable t) {\n          \n          \n            \n                        log.warn(\"Could not close retry operator\", t);\n          \n          \n            \n                    }\n          \n          \n            \n                    Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");", "url": "https://github.com/apache/kafka/pull/8442#discussion_r417065315", "createdAt": "2020-04-29T04:50:36Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "diffHunk": "@@ -175,6 +175,11 @@ protected void close() {\n         } catch (Throwable t) {\n             log.warn(\"Could not close transformation chain\", t);\n         }\n+        try {\n+            retryWithToleranceOperator.close();\n+        } catch (Throwable t) {\n+            log.warn(\"Could not close retry operator\", t);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23c4566c147c671c51ef4a8774afc15cb39b022"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTAxNzExOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/ProcessingContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNToyODo0M1rOGNwNjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNTozNzoxMVrOGNwWYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NDU3Mg==", "bodyText": "Regardless how high performance we want this code to be, as a matter of principle we shouldn't create an exception (and pay the cost of filling its stacktrace during instantiation) if we don't need to throw it.\nI sketched a modification just with a +1 line, but feel free to adjust to your style of preference.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ConnectException e = new ConnectException(\"Failed to close all reporters\");\n          \n          \n            \n                    for (ErrorReporter reporter : reporters) {\n          \n          \n            \n                        try {\n          \n          \n            \n                            reporter.close();\n          \n          \n            \n                        } catch (Throwable t) {\n          \n          \n            \n                            e.addSuppressed(t);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    if (e.getSuppressed().length > 0) {\n          \n          \n            \n                        throw e;\n          \n          \n            \n                    }\n          \n          \n            \n                    ConnectException e = null;\n          \n          \n            \n                    for (ErrorReporter reporter : reporters) {\n          \n          \n            \n                        try {\n          \n          \n            \n                            reporter.close();\n          \n          \n            \n                        } catch (Throwable t) {\n          \n          \n            \n                            e = e == null ? new ConnectException(\"Failed to close all reporters\") : e;\n          \n          \n            \n                            e.addSuppressed(t);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    if (e != null) {\n          \n          \n            \n                        throw e;\n          \n          \n            \n                    }", "url": "https://github.com/apache/kafka/pull/8442#discussion_r417074572", "createdAt": "2020-04-29T05:28:43Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/ProcessingContext.java", "diffHunk": "@@ -216,4 +217,18 @@ public void reporters(Collection<ErrorReporter> reporters) {\n         this.reporters = reporters;\n     }\n \n+    @Override\n+    public void close() {\n+        ConnectException e = new ConnectException(\"Failed to close all reporters\");\n+        for (ErrorReporter reporter : reporters) {\n+            try {\n+                reporter.close();\n+            } catch (Throwable t) {\n+                e.addSuppressed(t);\n+            }\n+        }\n+        if (e.getSuppressed().length > 0) {\n+            throw e;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23c4566c147c671c51ef4a8774afc15cb39b022"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NjgzMw==", "bodyText": "Here's a nice blog re: exception costs and when they occur:\nhttps://shipilev.net/blog/2014/exceptional-performance", "url": "https://github.com/apache/kafka/pull/8442#discussion_r417076833", "createdAt": "2020-04-29T05:37:11Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/ProcessingContext.java", "diffHunk": "@@ -216,4 +217,18 @@ public void reporters(Collection<ErrorReporter> reporters) {\n         this.reporters = reporters;\n     }\n \n+    @Override\n+    public void close() {\n+        ConnectException e = new ConnectException(\"Failed to close all reporters\");\n+        for (ErrorReporter reporter : reporters) {\n+            try {\n+                reporter.close();\n+            } catch (Throwable t) {\n+                e.addSuppressed(t);\n+            }\n+        }\n+        if (e.getSuppressed().length > 0) {\n+            throw e;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NDU3Mg=="}, "originalCommit": {"oid": "a23c4566c147c671c51ef4a8774afc15cb39b022"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2930, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}