{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2OTU0NjQy", "number": 8282, "title": "KAFKA-6145: add new assignment configs", "bodyText": "For KIP-441 we intend to add 4 new configs:\n\nassignment.acceptable.recovery.lag\nassignment.balance.factor\nassignment.max.extra.replicas\nassignment.probing.rebalance.interval.ms\n\nI think we should give them all a common prefix to make it clear they're related, but am open to better suggestions than just \"assignment\"", "createdAt": "2020-03-11T22:43:50Z", "url": "https://github.com/apache/kafka/pull/8282", "merged": true, "mergeCommit": {"oid": "9ee8277cdd4bc02257f5ff6cffd67d823485562d"}, "closed": true, "closedAt": "2020-03-19T18:19:14Z", "author": {"login": "ableegoldman"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMvJTCAFqTM3MzE3ODE0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPB8VQgBqjMxNDM3NjgzNTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTc4MTQ4", "url": "https://github.com/apache/kafka/pull/8282#pullrequestreview-373178148", "createdAt": "2020-03-11T22:48:52Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo0ODo1MlrOF1L5HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo0ODo1MlrOF1L5HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxMzY5Mw==", "bodyText": "I've been going back and forth on whether to add this as a \"per-cluster\" or \"per-instance\" config, @vvcephei  and I discussed briefly but @cadonna any opinion? If we do go with cluster-wide I think we should make the default pretty big, but I'm now leaning towards towards making it per-instance. Thoughts?", "url": "https://github.com/apache/kafka/pull/8282#discussion_r391313693", "createdAt": "2020-03-11T22:48:52Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -307,6 +307,25 @@\n     public static final String APPLICATION_SERVER_CONFIG = \"application.server\";\n     private static final String APPLICATION_SERVER_DOC = \"A host:port pair pointing to a user-defined endpoint that can be used for state store discovery and interactive queries on this KafkaStreams instance.\";\n \n+    /** {@code assignment.acceptable.recovery.lag} */\n+    public static final String ASSIGNMENT_ACCEPTABLE_RECOVERY_LAG_CONFIG = \"assignment.acceptable.recovery.lag\";\n+    private static final String ASSIGNMENT_ACCEPTABLE_RECOVERY_LAG_DOC = \"The maximum acceptable lag (number of offsets to catch up) for an active task to be assignable to a client. \" +\n+                                                                    \"Should correspond to a recovery time of well under a minute for a given workload. Must be at least 0.\";\n+\n+    /** {@code assignment.balance.factor} */\n+    public static final String ASSIGNMENT_BALANCE_FACTOR_CONFIG = \"assignment.balance.factor\";\n+    private static final String ASSIGNMENT_BALANCE_FACTOR_DOC = \"Target maximum difference in the number of active tasks assigned to the thread with the most tasks and the thread with the least in a steady-state assignment.\";\n+\n+    /** {@code assignment.max.extra.replicas} */\n+    public static final String ASSIGNMENT_MAX_EXTRA_REPLICAS_CONFIG = \"assignment.max.extra.replicas\";\n+    private static final String ASSIGNMENT_MAX_EXTRA_REPLICAS_DOC = \"The maximum number of extra replicas that can be assigned at once for the purpose of keeping the task available on one instance while it is warming up on \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTc5OTY1", "url": "https://github.com/apache/kafka/pull/8282#pullrequestreview-373179965", "createdAt": "2020-03-11T22:53:16Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1MzoxNlrOF1L_dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1MzoxNlrOF1L_dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNTMxNw==", "bodyText": "Put this one as \"medium\" importance and the rest as low, because this seems like the most likely config that a typical user might need to tweak for their specific app/workload", "url": "https://github.com/apache/kafka/pull/8282#discussion_r391315317", "createdAt": "2020-03-11T22:53:16Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -544,6 +563,11 @@\n \n             // MEDIUM\n \n+            .define(ASSIGNMENT_ACCEPTABLE_RECOVERY_LAG_CONFIG,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTgwMTY4", "url": "https://github.com/apache/kafka/pull/8282#pullrequestreview-373180168", "createdAt": "2020-03-11T22:53:47Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1Mzo0N1rOF1MANQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1Mzo0N1rOF1MANQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNTUwOQ==", "bodyText": "@vvcephei suggested this be 10,000 which seemed high to me. But I'm willing to be convinced \ud83d\ude42", "url": "https://github.com/apache/kafka/pull/8282#discussion_r391315509", "createdAt": "2020-03-11T22:53:47Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -544,6 +563,11 @@\n \n             // MEDIUM\n \n+            .define(ASSIGNMENT_ACCEPTABLE_RECOVERY_LAG_CONFIG,\n+                    Type.LONG,\n+                    1_000L,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MTA4MzM1", "url": "https://github.com/apache/kafka/pull/8282#pullrequestreview-375108335", "createdAt": "2020-03-16T11:03:48Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTowMzo0OFrOF2vJSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo1NjoxMVrOF21Oyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzOTg1MA==", "bodyText": "prop:\nThe maximum acceptable lag (number of offsets to catch up) of a client to be considered caught-up for an active task.", "url": "https://github.com/apache/kafka/pull/8282#discussion_r392939850", "createdAt": "2020-03-16T11:03:48Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -307,6 +307,25 @@\n     public static final String APPLICATION_SERVER_CONFIG = \"application.server\";\n     private static final String APPLICATION_SERVER_DOC = \"A host:port pair pointing to a user-defined endpoint that can be used for state store discovery and interactive queries on this KafkaStreams instance.\";\n \n+    /** {@code assignment.acceptable.recovery.lag} */\n+    public static final String ASSIGNMENT_ACCEPTABLE_RECOVERY_LAG_CONFIG = \"assignment.acceptable.recovery.lag\";\n+    private static final String ASSIGNMENT_ACCEPTABLE_RECOVERY_LAG_DOC = \"The maximum acceptable lag (number of offsets to catch up) for an active task to be assignable to a client. \" +\n+                                                                    \"Should correspond to a recovery time of well under a minute for a given workload. Must be at least 0.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk3NTU5NA==", "bodyText": "I've been going back and forth on whether to add this as a \"per-cluster\" or \"per-instance\" config, @vvcephei and I discussed briefly but @cadonna any opinion? If we do go with cluster-wide I think we should make the default pretty big, but I'm now leaning towards towards making it per-instance. Thoughts?\n\nper cluster:\n\n(+) We would have more freedom in the assignment algorithm, because we do not need to consider the value of this config for each client.\n(-) How should we react to distinct values on clients? How should we even know whether there are distinct values configured? We could just say Streams assumes the values of this config are the same on all clients and whatever is specified on the group leader is the truth.\n\nper client:\n\n(+) Each client host might differ in performance and users might want to adapt the value of this config for each client\n(-) Within the algorithm, how should we know the value of this config for a specific client? Don't we need to adapt the protocol to get all values at the group leader?\n\nSince assignment and restoration (a.k.a. warming-up) is done on stream thread level, it might be better to specify the value per stream thread. For example, 1 would mean that one extra replica per stream thread might be assigned. If a Streams client has three stream threads it can host up to three extra replica. The config would be global (a.k.a. cluster-wide) but users could account for different performances of the hosts by specifying different number of stream threads (which they probably have to do anyways). Here again, the value specified at the group leader is the truth.", "url": "https://github.com/apache/kafka/pull/8282#discussion_r392975594", "createdAt": "2020-03-16T12:18:36Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -307,6 +307,25 @@\n     public static final String APPLICATION_SERVER_CONFIG = \"application.server\";\n     private static final String APPLICATION_SERVER_DOC = \"A host:port pair pointing to a user-defined endpoint that can be used for state store discovery and interactive queries on this KafkaStreams instance.\";\n \n+    /** {@code assignment.acceptable.recovery.lag} */\n+    public static final String ASSIGNMENT_ACCEPTABLE_RECOVERY_LAG_CONFIG = \"assignment.acceptable.recovery.lag\";\n+    private static final String ASSIGNMENT_ACCEPTABLE_RECOVERY_LAG_DOC = \"The maximum acceptable lag (number of offsets to catch up) for an active task to be assignable to a client. \" +\n+                                                                    \"Should correspond to a recovery time of well under a minute for a given workload. Must be at least 0.\";\n+\n+    /** {@code assignment.balance.factor} */\n+    public static final String ASSIGNMENT_BALANCE_FACTOR_CONFIG = \"assignment.balance.factor\";\n+    private static final String ASSIGNMENT_BALANCE_FACTOR_DOC = \"Target maximum difference in the number of active tasks assigned to the thread with the most tasks and the thread with the least in a steady-state assignment.\";\n+\n+    /** {@code assignment.max.extra.replicas} */\n+    public static final String ASSIGNMENT_MAX_EXTRA_REPLICAS_CONFIG = \"assignment.max.extra.replicas\";\n+    private static final String ASSIGNMENT_MAX_EXTRA_REPLICAS_DOC = \"The maximum number of extra replicas that can be assigned at once for the purpose of keeping the task available on one instance while it is warming up on \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxMzY5Mw=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk3OTU5Mw==", "bodyText": "I agree that max.task.migration is not precise enough, because a migration of a task from one caught-up client to another caught-up client would not count against this config although it is a task migration. However, max.extra.replicas is also not ideal because extra can mean anything. What about max.warmup.replicas (or max.warm.up.replicas)?", "url": "https://github.com/apache/kafka/pull/8282#discussion_r392979593", "createdAt": "2020-03-16T12:24:44Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -307,6 +307,25 @@\n     public static final String APPLICATION_SERVER_CONFIG = \"application.server\";\n     private static final String APPLICATION_SERVER_DOC = \"A host:port pair pointing to a user-defined endpoint that can be used for state store discovery and interactive queries on this KafkaStreams instance.\";\n \n+    /** {@code assignment.acceptable.recovery.lag} */\n+    public static final String ASSIGNMENT_ACCEPTABLE_RECOVERY_LAG_CONFIG = \"assignment.acceptable.recovery.lag\";\n+    private static final String ASSIGNMENT_ACCEPTABLE_RECOVERY_LAG_DOC = \"The maximum acceptable lag (number of offsets to catch up) for an active task to be assignable to a client. \" +\n+                                                                    \"Should correspond to a recovery time of well under a minute for a given workload. Must be at least 0.\";\n+\n+    /** {@code assignment.balance.factor} */\n+    public static final String ASSIGNMENT_BALANCE_FACTOR_CONFIG = \"assignment.balance.factor\";\n+    private static final String ASSIGNMENT_BALANCE_FACTOR_DOC = \"Target maximum difference in the number of active tasks assigned to the thread with the most tasks and the thread with the least in a steady-state assignment.\";\n+\n+    /** {@code assignment.max.extra.replicas} */\n+    public static final String ASSIGNMENT_MAX_EXTRA_REPLICAS_CONFIG = \"assignment.max.extra.replicas\";\n+    private static final String ASSIGNMENT_MAX_EXTRA_REPLICAS_DOC = \"The maximum number of extra replicas that can be assigned at once for the purpose of keeping the task available on one instance while it is warming up on \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxMzY5Mw=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk4MzU3Mw==", "bodyText": "prop: I find the assignment. prefix a bit clumsy and I think we do not really need it. Other configs do also not have its context prepended like for instance built.in.metrics.version.", "url": "https://github.com/apache/kafka/pull/8282#discussion_r392983573", "createdAt": "2020-03-16T12:29:44Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -307,6 +307,25 @@\n     public static final String APPLICATION_SERVER_CONFIG = \"application.server\";\n     private static final String APPLICATION_SERVER_DOC = \"A host:port pair pointing to a user-defined endpoint that can be used for state store discovery and interactive queries on this KafkaStreams instance.\";\n \n+    /** {@code assignment.acceptable.recovery.lag} */", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk4NDc3NA==", "bodyText": "prop:\n\nRemove Target\nthread -> stream thread", "url": "https://github.com/apache/kafka/pull/8282#discussion_r392984774", "createdAt": "2020-03-16T12:31:09Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -307,6 +307,25 @@\n     public static final String APPLICATION_SERVER_CONFIG = \"application.server\";\n     private static final String APPLICATION_SERVER_DOC = \"A host:port pair pointing to a user-defined endpoint that can be used for state store discovery and interactive queries on this KafkaStreams instance.\";\n \n+    /** {@code assignment.acceptable.recovery.lag} */\n+    public static final String ASSIGNMENT_ACCEPTABLE_RECOVERY_LAG_CONFIG = \"assignment.acceptable.recovery.lag\";\n+    private static final String ASSIGNMENT_ACCEPTABLE_RECOVERY_LAG_DOC = \"The maximum acceptable lag (number of offsets to catch up) for an active task to be assignable to a client. \" +\n+                                                                    \"Should correspond to a recovery time of well under a minute for a given workload. Must be at least 0.\";\n+\n+    /** {@code assignment.balance.factor} */\n+    public static final String ASSIGNMENT_BALANCE_FACTOR_CONFIG = \"assignment.balance.factor\";\n+    private static final String ASSIGNMENT_BALANCE_FACTOR_DOC = \"Target maximum difference in the number of active tasks assigned to the thread with the most tasks and the thread with the least in a steady-state assignment. Must be at least 1.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk4Nzg1Ng==", "bodyText": "req: We should agree on terminology. Here we talk about standbys and above about extra replica. This might be confusing.", "url": "https://github.com/apache/kafka/pull/8282#discussion_r392987856", "createdAt": "2020-03-16T12:34:48Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -307,6 +307,25 @@\n     public static final String APPLICATION_SERVER_CONFIG = \"application.server\";\n     private static final String APPLICATION_SERVER_DOC = \"A host:port pair pointing to a user-defined endpoint that can be used for state store discovery and interactive queries on this KafkaStreams instance.\";\n \n+    /** {@code assignment.acceptable.recovery.lag} */\n+    public static final String ASSIGNMENT_ACCEPTABLE_RECOVERY_LAG_CONFIG = \"assignment.acceptable.recovery.lag\";\n+    private static final String ASSIGNMENT_ACCEPTABLE_RECOVERY_LAG_DOC = \"The maximum acceptable lag (number of offsets to catch up) for an active task to be assignable to a client. \" +\n+                                                                    \"Should correspond to a recovery time of well under a minute for a given workload. Must be at least 0.\";\n+\n+    /** {@code assignment.balance.factor} */\n+    public static final String ASSIGNMENT_BALANCE_FACTOR_CONFIG = \"assignment.balance.factor\";\n+    private static final String ASSIGNMENT_BALANCE_FACTOR_DOC = \"Target maximum difference in the number of active tasks assigned to the thread with the most tasks and the thread with the least in a steady-state assignment. Must be at least 1.\";\n+\n+    /** {@code assignment.max.extra.replicas} */\n+    public static final String ASSIGNMENT_MAX_EXTRA_REPLICAS_CONFIG = \"assignment.max.extra.replicas\";\n+    private static final String ASSIGNMENT_MAX_EXTRA_REPLICAS_DOC = \"The maximum number of extra replicas that can be assigned at once for the purpose of keeping the task available on one instance while it is warming up on \" +\n+                                                                         \"another instance it has been reassigned to. Used to throttle how much extra broker traffic and cluster state can be used for high availability. Must be at least 1.\";\n+\n+    /** {@code assignment.probing.rebalance.interval.ms} */\n+    public static final String ASSIGNMENT_PROBING_REBALANCE_INTERVAL_MS_CONFIG = \"assignment.probing.rebalance.interval.ms\";\n+    private static final String ASSIGNMENT_PROBING_REBALANCE_INTERVAL_MS_DOC = \"The maximum time to wait before triggering a rebalance to probe for standbys that have finished warming up and are ready to become active. Probing rebalances \" +\n+                                                                                \"will continue to be triggered until the assignment is balanced according to the \" + ASSIGNMENT_BALANCE_FACTOR_CONFIG;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyNjk0Mw==", "bodyText": "Looking at the stateheavy benchmark that we run, 10000 does not seem too unreasonable. In the benchmarks 10 state stores are filled and the benchmark reports a throughput of around 7000 records per second. But I am also fine with 5000 as default. 1000 seems a bit low to me.", "url": "https://github.com/apache/kafka/pull/8282#discussion_r393026943", "createdAt": "2020-03-16T13:36:42Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -544,6 +563,11 @@\n \n             // MEDIUM\n \n+            .define(ASSIGNMENT_ACCEPTABLE_RECOVERY_LAG_CONFIG,\n+                    Type.LONG,\n+                    1_000L,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNTUwOQ=="}, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNDU5OA==", "bodyText": "req: Please add unit tests for the definitions.", "url": "https://github.com/apache/kafka/pull/8282#discussion_r393034598", "createdAt": "2020-03-16T13:48:52Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -620,6 +644,21 @@\n                     \"\",\n                     Importance.LOW,\n                     APPLICATION_SERVER_DOC)\n+            .define(ASSIGNMENT_BALANCE_FACTOR_CONFIG,\n+                    Type.INT,\n+                    1,\n+                    Importance.LOW,\n+                    ASSIGNMENT_BALANCE_FACTOR_DOC)\n+            .define(ASSIGNMENT_MAX_EXTRA_REPLICAS_CONFIG,\n+                    Type.INT,\n+                    5,\n+                    Importance.LOW,\n+                ASSIGNMENT_MAX_EXTRA_REPLICAS_DOC)\n+            .define(ASSIGNMENT_PROBING_REBALANCE_INTERVAL_MS_CONFIG,\n+                    Type.LONG,\n+                    10 * 60 * 1000L,\n+                    Importance.LOW,\n+                    ASSIGNMENT_PROBING_REBALANCE_INTERVAL_MS_DOC)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzOTU2Mg==", "bodyText": "req: Please add unit tests for this method (I am aware that there aren't any unit tests for this class).", "url": "https://github.com/apache/kafka/pull/8282#discussion_r393039562", "createdAt": "2020-03-16T13:56:11Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorConfiguration.java", "diffHunk": "@@ -261,4 +257,24 @@ public InternalTopicManager getInternalTopicManager() {\n     public CopartitionedTopicsEnforcer getCopartitionedTopicsEnforcer() {\n         return copartitionedTopicsEnforcer;\n     }\n+\n+    public AssignmentConfigs getAssignmentConfigs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MzQ4MDE1", "url": "https://github.com/apache/kafka/pull/8282#pullrequestreview-376348015", "createdAt": "2020-03-17T19:39:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTozOTozN1rOF3rPAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTozOTozN1rOF3rPAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyNDM1Mw==", "bodyText": "@cadonna Does RankedClient sound good, or would you prefer ClientAndRank or...?", "url": "https://github.com/apache/kafka/pull/8282#discussion_r393924353", "createdAt": "2020-03-17T19:39:37Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -152,6 +153,36 @@ public String toString() {\n                 '}';\n         }\n     }\n+    \n+    public static class RankedClient<ID extends Comparable<? super ID>> implements Comparable<RankedClient<ID>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjA2MDE4", "url": "https://github.com/apache/kafka/pull/8282#pullrequestreview-377206018", "createdAt": "2020-03-18T20:21:16Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoyMToxN1rOF4VdFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoyMToxN1rOF4VdFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxNjA4NA==", "bodyText": "req: Please add atLeast(1) validator here and the corresponding unit test. Similar applies also to the other configs.", "url": "https://github.com/apache/kafka/pull/8282#discussion_r394616084", "createdAt": "2020-03-18T20:21:17Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -620,6 +650,11 @@\n                     \"\",\n                     Importance.LOW,\n                     APPLICATION_SERVER_DOC)\n+            .define(BALANCE_FACTOR_CONFIG,\n+                    Type.INT,\n+                    1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjkxNzc0", "url": "https://github.com/apache/kafka/pull/8282#pullrequestreview-377291774", "createdAt": "2020-03-18T22:53:00Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddc5cfa0fe78cd363ffaf21cb97ac6a368967506", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/ddc5cfa0fe78cd363ffaf21cb97ac6a368967506", "committedDate": "2020-03-19T01:50:32Z", "message": "add configs; squashed for rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "ddc5cfa0fe78cd363ffaf21cb97ac6a368967506", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/ddc5cfa0fe78cd363ffaf21cb97ac6a368967506", "committedDate": "2020-03-19T01:50:32Z", "message": "add configs; squashed for rebase"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 245, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}