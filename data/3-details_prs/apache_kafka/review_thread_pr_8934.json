{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwODM2MjA4", "number": 8934, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjowNDo1NlrOEL26iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjoyMDozMFrOEL3IcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODY5NTEzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjowNDo1NlrOGtokeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjowNDo1NlrOGtokeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMzgwMg==", "bodyText": "nit: seems unused?", "url": "https://github.com/apache/kafka/pull/8934#discussion_r450503802", "createdAt": "2020-07-06T22:04:56Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java", "diffHunk": "@@ -1258,11 +1261,19 @@ public void assign(Collection<TopicPartition> partitions) {\n         }\n     }\n \n+    private boolean coordinatorNeededForAssignment() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5fd17e7531fc73031f32406bbe181f67f0d0cab"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODY5NjY5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjowNTozNFrOGtolXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjowNTozNFrOGtolXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNDAyOA==", "bodyText": "flag?", "url": "https://github.com/apache/kafka/pull/8934#discussion_r450504028", "createdAt": "2020-07-06T22:05:34Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -416,7 +428,13 @@ boolean joinGroupIfNeeded(final Timer timer) {\n             }\n \n             final RequestFuture<ByteBuffer> future = initiateJoinGroup();\n-            client.poll(future, timer);\n+\n+            // if the flat is not set to true; we only try once and not block on the join result", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5fd17e7531fc73031f32406bbe181f67f0d0cab"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODcwMDUyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjowNzoyMFrOGtonyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMzo1NTo1NFrOGtuS9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNDY0OA==", "bodyText": "Do we want this to be poll(0)? Otherwise we're still blocking here.", "url": "https://github.com/apache/kafka/pull/8934#discussion_r450504648", "createdAt": "2020-07-06T22:07:20Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -416,7 +428,13 @@ boolean joinGroupIfNeeded(final Timer timer) {\n             }\n \n             final RequestFuture<ByteBuffer> future = initiateJoinGroup();\n-            client.poll(future, timer);\n+\n+            // if the flat is not set to true; we only try once and not block on the join result\n+            if (waitUntilComplete)\n+                client.poll(future, timer);\n+            else\n+                client.poll(timer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5fd17e7531fc73031f32406bbe181f67f0d0cab"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU5NzYyMg==", "bodyText": "My rationale after thinking about this, is that it may be better to wait on at least some IOs to be done, especially if there are on-going fetch requests as well: we may complete writing a fetch request, or join / sync group request, or reading a response before returning.", "url": "https://github.com/apache/kafka/pull/8934#discussion_r450597622", "createdAt": "2020-07-07T03:55:54Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -416,7 +428,13 @@ boolean joinGroupIfNeeded(final Timer timer) {\n             }\n \n             final RequestFuture<ByteBuffer> future = initiateJoinGroup();\n-            client.poll(future, timer);\n+\n+            // if the flat is not set to true; we only try once and not block on the join result\n+            if (waitUntilComplete)\n+                client.poll(future, timer);\n+            else\n+                client.poll(timer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNDY0OA=="}, "originalCommit": {"oid": "f5fd17e7531fc73031f32406bbe181f67f0d0cab"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODcwNjk2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjoxMDoxMFrOGtorwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMzo0MzowMlrOGtuH6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNTY2NA==", "bodyText": "This call to fetchablePartitions is unfortunate. It is an entire pass over all the assigned partitions on every poll. Is there any way it can be avoided?", "url": "https://github.com/apache/kafka/pull/8934#discussion_r450505664", "createdAt": "2020-07-06T22:10:10Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java", "diffHunk": "@@ -1218,17 +1218,20 @@ public void assign(Collection<TopicPartition> partitions) {\n                 throw new IllegalStateException(\"Consumer is not subscribed to any topics or assigned any partitions\");\n             }\n \n-            // poll for new data until the timeout expires\n             do {\n                 client.maybeTriggerWakeup();\n \n                 if (includeMetadataInTimeout) {\n-                    // try to update assignment metadata BUT do not need to block on the timer,\n-                    // since even if we are 1) in the middle of a rebalance or 2) have partitions\n-                    // with unknown starting positions we may still want to return some data\n-                    // as long as there are some partitions fetchable; NOTE we always use a timer with 0ms\n-                    // to never block on completing the rebalance procedure if there's any\n-                    updateAssignmentMetadataIfNeeded(time.timer(0L));\n+                    // try to update assignment metadata BUT do not need to block on the timer if we still have\n+                    // some assigned partitions, since even if we are 1) in the middle of a rebalance\n+                    // or 2) have partitions with unknown starting positions we may still want to return some data\n+                    // as long as there are some partitions fetchable; NOTE we do not block on rebalancing to complete\n+                    // if there's one pending if we still have some fetchable partitions\n+                    if (subscriptions.fetchablePartitions(tp -> true).isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5fd17e7531fc73031f32406bbe181f67f0d0cab"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU5NDc5NQ==", "bodyText": "Agree, I can think of caching a boolean to avoid it.", "url": "https://github.com/apache/kafka/pull/8934#discussion_r450594795", "createdAt": "2020-07-07T03:43:02Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java", "diffHunk": "@@ -1218,17 +1218,20 @@ public void assign(Collection<TopicPartition> partitions) {\n                 throw new IllegalStateException(\"Consumer is not subscribed to any topics or assigned any partitions\");\n             }\n \n-            // poll for new data until the timeout expires\n             do {\n                 client.maybeTriggerWakeup();\n \n                 if (includeMetadataInTimeout) {\n-                    // try to update assignment metadata BUT do not need to block on the timer,\n-                    // since even if we are 1) in the middle of a rebalance or 2) have partitions\n-                    // with unknown starting positions we may still want to return some data\n-                    // as long as there are some partitions fetchable; NOTE we always use a timer with 0ms\n-                    // to never block on completing the rebalance procedure if there's any\n-                    updateAssignmentMetadataIfNeeded(time.timer(0L));\n+                    // try to update assignment metadata BUT do not need to block on the timer if we still have\n+                    // some assigned partitions, since even if we are 1) in the middle of a rebalance\n+                    // or 2) have partitions with unknown starting positions we may still want to return some data\n+                    // as long as there are some partitions fetchable; NOTE we do not block on rebalancing to complete\n+                    // if there's one pending if we still have some fetchable partitions\n+                    if (subscriptions.fetchablePartitions(tp -> true).isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNTY2NA=="}, "originalCommit": {"oid": "f5fd17e7531fc73031f32406bbe181f67f0d0cab"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODczMDczOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjoyMDozMVrOGto6Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjowNTo1OFrOGuFhqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwOTMyMg==", "bodyText": "Just making sure I understand the problem. In the old logic, updateAssignmentMetadataIfNeeded never blocks. Even if we have no assignment and do not know the coordinator, we won't block here. That means we should fall through to pollForFetches. The poll timeout is set by the following logic:\n        long pollTimeout = coordinator == null ? timer.remainingMs() :\n                Math.min(coordinator.timeToNextPoll(timer.currentTimeMs()), timer.remainingMs());\nI think the only way I can see this logic getting into trouble is if Heartbeat.timeToNextHeartbeat returns a small value. So if the coordinator remains unknown for a little while and we need to heartbeat, we might get into a busy loop. Is that about right or are there other cases?", "url": "https://github.com/apache/kafka/pull/8934#discussion_r450509322", "createdAt": "2020-07-06T22:20:31Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java", "diffHunk": "@@ -1218,17 +1218,20 @@ public void assign(Collection<TopicPartition> partitions) {\n                 throw new IllegalStateException(\"Consumer is not subscribed to any topics or assigned any partitions\");\n             }\n \n-            // poll for new data until the timeout expires\n             do {\n                 client.maybeTriggerWakeup();\n \n                 if (includeMetadataInTimeout) {\n-                    // try to update assignment metadata BUT do not need to block on the timer,\n-                    // since even if we are 1) in the middle of a rebalance or 2) have partitions\n-                    // with unknown starting positions we may still want to return some data\n-                    // as long as there are some partitions fetchable; NOTE we always use a timer with 0ms\n-                    // to never block on completing the rebalance procedure if there's any\n-                    updateAssignmentMetadataIfNeeded(time.timer(0L));\n+                    // try to update assignment metadata BUT do not need to block on the timer if we still have", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5fd17e7531fc73031f32406bbe181f67f0d0cab"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU5NDgwNg==", "bodyText": "My guess is that the pollDelayMs from trySend(timer.currentTimeMs()) is zero and hence\nlong pollTimeout = Math.min(timer.remainingMs(), pollDelayMs);\n\nwould become zero.", "url": "https://github.com/apache/kafka/pull/8934#discussion_r450594806", "createdAt": "2020-07-07T03:43:06Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java", "diffHunk": "@@ -1218,17 +1218,20 @@ public void assign(Collection<TopicPartition> partitions) {\n                 throw new IllegalStateException(\"Consumer is not subscribed to any topics or assigned any partitions\");\n             }\n \n-            // poll for new data until the timeout expires\n             do {\n                 client.maybeTriggerWakeup();\n \n                 if (includeMetadataInTimeout) {\n-                    // try to update assignment metadata BUT do not need to block on the timer,\n-                    // since even if we are 1) in the middle of a rebalance or 2) have partitions\n-                    // with unknown starting positions we may still want to return some data\n-                    // as long as there are some partitions fetchable; NOTE we always use a timer with 0ms\n-                    // to never block on completing the rebalance procedure if there's any\n-                    updateAssignmentMetadataIfNeeded(time.timer(0L));\n+                    // try to update assignment metadata BUT do not need to block on the timer if we still have", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwOTMyMg=="}, "originalCommit": {"oid": "f5fd17e7531fc73031f32406bbe181f67f0d0cab"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk2MDk3MQ==", "bodyText": "Hmm, not sure if I buy that. trySend would only return a value less than 5s if there was a pending request which needed to be send. However, as soon as it got sent, it would go back to 5s. So I'm not sure if it alone can account for a tight poll loop.", "url": "https://github.com/apache/kafka/pull/8934#discussion_r450960971", "createdAt": "2020-07-07T15:40:27Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java", "diffHunk": "@@ -1218,17 +1218,20 @@ public void assign(Collection<TopicPartition> partitions) {\n                 throw new IllegalStateException(\"Consumer is not subscribed to any topics or assigned any partitions\");\n             }\n \n-            // poll for new data until the timeout expires\n             do {\n                 client.maybeTriggerWakeup();\n \n                 if (includeMetadataInTimeout) {\n-                    // try to update assignment metadata BUT do not need to block on the timer,\n-                    // since even if we are 1) in the middle of a rebalance or 2) have partitions\n-                    // with unknown starting positions we may still want to return some data\n-                    // as long as there are some partitions fetchable; NOTE we always use a timer with 0ms\n-                    // to never block on completing the rebalance procedure if there's any\n-                    updateAssignmentMetadataIfNeeded(time.timer(0L));\n+                    // try to update assignment metadata BUT do not need to block on the timer if we still have", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwOTMyMg=="}, "originalCommit": {"oid": "f5fd17e7531fc73031f32406bbe181f67f0d0cab"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3ODIxNw==", "bodyText": "I did a simple experiment with one broker and one consumer. After the consumer joined the group, I did a kill -9 to stop the broker. I had the consumer log the poll timeout that was used in pollForFetches. What I saw is this:\n[2020-07-07 08:53:10,825] INFO [Consumer clientId=consumer-foo-1, groupId=foo] Polling for fetches with timeout 0 (org.apache.kafka.clients.consumer.KafkaConsumer)\n[2020-07-07 08:53:10,825] INFO [Consumer clientId=consumer-foo-1, groupId=foo] Polling for fetches with timeout 0 (org.apache.kafka.clients.consumer.KafkaConsumer)\n[2020-07-07 08:53:10,825] INFO [Consumer clientId=consumer-foo-1, groupId=foo] Polling for fetches with timeout 0 (org.apache.kafka.clients.consumer.KafkaConsumer)\n[2020-07-07 08:53:10,825] INFO [Consumer clientId=consumer-foo-1, groupId=foo] Polling for fetches with timeout 0 (org.apache.kafka.clients.consumer.KafkaConsumer)\n[2020-07-07 08:53:10,839] INFO [Consumer clientId=consumer-foo-1, groupId=foo] Polling for fetches with timeout 0 (org.apache.kafka.clients.consumer.KafkaConsumer)\n[2020-07-07 08:53:10,839] INFO [Consumer clientId=consumer-foo-1, groupId=foo] Polling for fetches with timeout 0 (org.apache.kafka.clients.consumer.KafkaConsumer)\n[2020-07-07 08:53:10,839] INFO [Consumer clientId=consumer-foo-1, groupId=foo] Polling for fetches with timeout 0 (org.apache.kafka.clients.consumer.KafkaConsumer)\n[2020-07-07 08:53:10,839] INFO [Consumer clientId=consumer-foo-1, groupId=foo] Polling for fetches with timeout 0 (org.apache.kafka.clients.consumer.KafkaConsumer)", "url": "https://github.com/apache/kafka/pull/8934#discussion_r450978217", "createdAt": "2020-07-07T16:05:58Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java", "diffHunk": "@@ -1218,17 +1218,20 @@ public void assign(Collection<TopicPartition> partitions) {\n                 throw new IllegalStateException(\"Consumer is not subscribed to any topics or assigned any partitions\");\n             }\n \n-            // poll for new data until the timeout expires\n             do {\n                 client.maybeTriggerWakeup();\n \n                 if (includeMetadataInTimeout) {\n-                    // try to update assignment metadata BUT do not need to block on the timer,\n-                    // since even if we are 1) in the middle of a rebalance or 2) have partitions\n-                    // with unknown starting positions we may still want to return some data\n-                    // as long as there are some partitions fetchable; NOTE we always use a timer with 0ms\n-                    // to never block on completing the rebalance procedure if there's any\n-                    updateAssignmentMetadataIfNeeded(time.timer(0L));\n+                    // try to update assignment metadata BUT do not need to block on the timer if we still have", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwOTMyMg=="}, "originalCommit": {"oid": "f5fd17e7531fc73031f32406bbe181f67f0d0cab"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2308, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}