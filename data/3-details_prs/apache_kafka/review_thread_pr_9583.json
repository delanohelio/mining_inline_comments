{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NjA5OTQw", "number": 9583, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjozODoyOFrOE3T9Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzo1MzoxOFrOE4aGGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDM0MTE5OnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjozODoyOFrOHwlVOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjo1ODozNVrOHwmOeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwNTMzNw==", "bodyText": "Did we need to move this?", "url": "https://github.com/apache/kafka/pull/9583#discussion_r520705337", "createdAt": "2020-11-10T16:38:28Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -30,11 +30,16 @@\n import java.nio.channels.FileChannel;\n import java.nio.channels.FileLock;\n import java.nio.channels.OverlappingFileLockException;\n-import java.nio.file.NoSuchFileException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxOTk5Mg==", "bodyText": "We did not", "url": "https://github.com/apache/kafka/pull/9583#discussion_r520719992", "createdAt": "2020-11-10T16:58:35Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -30,11 +30,16 @@\n import java.nio.channels.FileChannel;\n import java.nio.channels.FileLock;\n import java.nio.channels.OverlappingFileLockException;\n-import java.nio.file.NoSuchFileException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwNTMzNw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDM3NzIxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjo0NjoxOVrOHwlrSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxNzozM1rOHwnDDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxMDk4Ng==", "bodyText": "Is changing the baseDir sufficient?", "url": "https://github.com/apache/kafka/pull/9583#discussion_r520710986", "createdAt": "2020-11-10T16:46:19Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -102,6 +107,13 @@ public StateDirectory(final StreamsConfig config, final Time time, final boolean\n             log.warn(\"Using /tmp directory in the state.dir property can cause failures with writing the checkpoint file\" +\n                 \" due to the fact that this directory can be cleared by the OS\");\n         }\n+        final Path path = Paths.get(baseDir.getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyMzcyMA==", "bodyText": "It should be, the stateDir is inside of the baseDir so the permissions should apply there as well. I guess if we wanted to be more selective we could apply permissions to stateDir and not baseDir but from what I see it doesn't make a big difference. In the test though, there is an appDir that had broader permissions even with the changes to baseDir so maybe we do need to change permissions to both baseDir and stateDir", "url": "https://github.com/apache/kafka/pull/9583#discussion_r520723720", "createdAt": "2020-11-10T17:03:42Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -102,6 +107,13 @@ public StateDirectory(final StreamsConfig config, final Time time, final boolean\n             log.warn(\"Using /tmp directory in the state.dir property can cause failures with writing the checkpoint file\" +\n                 \" due to the fact that this directory can be cleared by the OS\");\n         }\n+        final Path path = Paths.get(baseDir.getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxMDk4Ng=="}, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMzQ1NA==", "bodyText": "I'm not sure off the top of my head I just wanted to verify, but its probably best to be overly specific. LGTM", "url": "https://github.com/apache/kafka/pull/9583#discussion_r520733454", "createdAt": "2020-11-10T17:17:33Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -102,6 +107,13 @@ public StateDirectory(final StreamsConfig config, final Time time, final boolean\n             log.warn(\"Using /tmp directory in the state.dir property can cause failures with writing the checkpoint file\" +\n                 \" due to the fact that this directory can be cleared by the OS\");\n         }\n+        final Path path = Paths.get(baseDir.getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxMDk4Ng=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTMxMjAwOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StateDirectoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDo0MDoyMFrOHwuxgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDo0MDoyMFrOHwuxgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2MDAzMw==", "bodyText": "Recently, we prefer to use assertThat() instead of assertEquals().", "url": "https://github.com/apache/kafka/pull/9583#discussion_r520860033", "createdAt": "2020-11-10T20:40:20Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StateDirectoryTest.java", "diffHunk": "@@ -106,6 +110,27 @@ public void shouldCreateBaseDirectory() {\n         assertTrue(appDir.isDirectory());\n     }\n \n+    @Test\n+    public void shouldHaveSecurePermissions() {\n+        final Set<PosixFilePermission> expectedPermissions = EnumSet.of(\n+            PosixFilePermission.OWNER_EXECUTE,\n+            PosixFilePermission.GROUP_READ,\n+            PosixFilePermission.OWNER_WRITE,\n+            PosixFilePermission.GROUP_EXECUTE,\n+            PosixFilePermission.OWNER_READ);\n+\n+        final Path statePath = Paths.get(stateDir.getPath());\n+        final Path basePath = Paths.get(appDir.getPath());\n+        try {\n+            final Set<PosixFilePermission> baseFilePermissions = Files.getPosixFilePermissions(statePath);\n+            final Set<PosixFilePermission> appFilePermissions = Files.getPosixFilePermissions(basePath);\n+            assertEquals(expectedPermissions, baseFilePermissions);\n+            assertEquals(expectedPermissions, appFilePermissions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79f387cc7f3307d621a38bf139b32a8593a43814"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTMyOTExOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StateDirectoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDo0NTowM1rOHwu7lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDo0NTowM1rOHwu7lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2MjYxMg==", "bodyText": "If we swallow the exception here, and the test always throws an IO exception, we will never notice. I guess it would be better to use fail() with a message.", "url": "https://github.com/apache/kafka/pull/9583#discussion_r520862612", "createdAt": "2020-11-10T20:45:03Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StateDirectoryTest.java", "diffHunk": "@@ -106,6 +110,27 @@ public void shouldCreateBaseDirectory() {\n         assertTrue(appDir.isDirectory());\n     }\n \n+    @Test\n+    public void shouldHaveSecurePermissions() {\n+        final Set<PosixFilePermission> expectedPermissions = EnumSet.of(\n+            PosixFilePermission.OWNER_EXECUTE,\n+            PosixFilePermission.GROUP_READ,\n+            PosixFilePermission.OWNER_WRITE,\n+            PosixFilePermission.GROUP_EXECUTE,\n+            PosixFilePermission.OWNER_READ);\n+\n+        final Path statePath = Paths.get(stateDir.getPath());\n+        final Path basePath = Paths.get(appDir.getPath());\n+        try {\n+            final Set<PosixFilePermission> baseFilePermissions = Files.getPosixFilePermissions(statePath);\n+            final Set<PosixFilePermission> appFilePermissions = Files.getPosixFilePermissions(basePath);\n+            assertEquals(expectedPermissions, baseFilePermissions);\n+            assertEquals(expectedPermissions, appFilePermissions);\n+        } catch (final IOException e) {\n+            // okay", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79f387cc7f3307d621a38bf139b32a8593a43814"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTgzMjU5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzo1MzoxOFrOHyTyMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODoyMjo0N1rOHy6FyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNDk5Mg==", "bodyText": "Just wondering, why \"read\" and \"execute\" permissions for the group?", "url": "https://github.com/apache/kafka/pull/9583#discussion_r522514992", "createdAt": "2020-11-12T23:53:18Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -102,6 +107,15 @@ public StateDirectory(final StreamsConfig config, final Time time, final boolean\n             log.warn(\"Using /tmp directory in the state.dir property can cause failures with writing the checkpoint file\" +\n                 \" due to the fact that this directory can be cleared by the OS\");\n         }\n+        final Path basePath = Paths.get(baseDir.getPath());\n+        final Path statePath = Paths.get(stateDir.getPath());\n+        final Set<PosixFilePermission> perms = PosixFilePermissions.fromString(\"rwxr-x---\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0909d8a23bfc259b6b91568f444f93db9c82261"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc3MDYwOA==", "bodyText": "I thought it would be handy to be able to log into a node to debug state store issues, e.g., with some RocksDB command line tools, with a user that is able to read not able to write, i.e., is in the group but it is not the owner.", "url": "https://github.com/apache/kafka/pull/9583#discussion_r522770608", "createdAt": "2020-11-13T08:09:20Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -102,6 +107,15 @@ public StateDirectory(final StreamsConfig config, final Time time, final boolean\n             log.warn(\"Using /tmp directory in the state.dir property can cause failures with writing the checkpoint file\" +\n                 \" due to the fact that this directory can be cleared by the OS\");\n         }\n+        final Path basePath = Paths.get(baseDir.getPath());\n+        final Path statePath = Paths.get(stateDir.getPath());\n+        final Set<PosixFilePermission> perms = PosixFilePermissions.fromString(\"rwxr-x---\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNDk5Mg=="}, "originalCommit": {"oid": "d0909d8a23bfc259b6b91568f444f93db9c82261"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA1NTIyMQ==", "bodyText": "I agree with what Bruno said for the reading. I think allowing execute for group members isn't a security risk, since it's still somewhat contained. I ran the streams test without having execute for group and I got an exception in StreamTableJoinTopologyOptimizationIntegrationTest test shouldDoStreamTableJoinWithDifferentNumberOfPartitions. It looks like the integration test utils weren't able to clear the directory because groups didn't have execute authorization. Since it doesn't seem like allowing groups to execute would constitute a security risk, it seems like this is a good thing to keep for testing capabilities", "url": "https://github.com/apache/kafka/pull/9583#discussion_r523055221", "createdAt": "2020-11-13T16:18:25Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -102,6 +107,15 @@ public StateDirectory(final StreamsConfig config, final Time time, final boolean\n             log.warn(\"Using /tmp directory in the state.dir property can cause failures with writing the checkpoint file\" +\n                 \" due to the fact that this directory can be cleared by the OS\");\n         }\n+        final Path basePath = Paths.get(baseDir.getPath());\n+        final Path statePath = Paths.get(stateDir.getPath());\n+        final Set<PosixFilePermission> perms = PosixFilePermissions.fromString(\"rwxr-x---\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNDk5Mg=="}, "originalCommit": {"oid": "d0909d8a23bfc259b6b91568f444f93db9c82261"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzMDEzNg==", "bodyText": "I ran the streams test without having execute for group and I got an exception in StreamTableJoinTopologyOptimizationIntegrationTest test\n\nI've noticed that test is actually pretty flaky at the moment, IIRC it's been due to a Directory not empty exception). So the failure you saw might not be related to this PR. I'm pretty sure it's write permissions, not execute, that let you delete files within a directory. Execute just lets you cd in and traverse the directory. So I guess read+execute does make sense here, and probably we wouldn't want anyone other than the owner to be able to clear the directory anyway", "url": "https://github.com/apache/kafka/pull/9583#discussion_r523130136", "createdAt": "2020-11-13T18:02:11Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -102,6 +107,15 @@ public StateDirectory(final StreamsConfig config, final Time time, final boolean\n             log.warn(\"Using /tmp directory in the state.dir property can cause failures with writing the checkpoint file\" +\n                 \" due to the fact that this directory can be cleared by the OS\");\n         }\n+        final Path basePath = Paths.get(baseDir.getPath());\n+        final Path statePath = Paths.get(stateDir.getPath());\n+        final Set<PosixFilePermission> perms = PosixFilePermissions.fromString(\"rwxr-x---\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNDk5Mg=="}, "originalCommit": {"oid": "d0909d8a23bfc259b6b91568f444f93db9c82261"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzNzg3Nw==", "bodyText": "Hmm yeah that was the exception so it probably wasn't related to this PR. I would err on the side of leaving those permissions but can take them out if you think that's better", "url": "https://github.com/apache/kafka/pull/9583#discussion_r523137877", "createdAt": "2020-11-13T18:16:58Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -102,6 +107,15 @@ public StateDirectory(final StreamsConfig config, final Time time, final boolean\n             log.warn(\"Using /tmp directory in the state.dir property can cause failures with writing the checkpoint file\" +\n                 \" due to the fact that this directory can be cleared by the OS\");\n         }\n+        final Path basePath = Paths.get(baseDir.getPath());\n+        final Path statePath = Paths.get(stateDir.getPath());\n+        final Set<PosixFilePermission> perms = PosixFilePermissions.fromString(\"rwxr-x---\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNDk5Mg=="}, "originalCommit": {"oid": "d0909d8a23bfc259b6b91568f444f93db9c82261"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE0MjYwMA==", "bodyText": "No I think this looks ok, just wanted to ask", "url": "https://github.com/apache/kafka/pull/9583#discussion_r523142600", "createdAt": "2020-11-13T18:22:47Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -102,6 +107,15 @@ public StateDirectory(final StreamsConfig config, final Time time, final boolean\n             log.warn(\"Using /tmp directory in the state.dir property can cause failures with writing the checkpoint file\" +\n                 \" due to the fact that this directory can be cleared by the OS\");\n         }\n+        final Path basePath = Paths.get(baseDir.getPath());\n+        final Path statePath = Paths.get(stateDir.getPath());\n+        final Set<PosixFilePermission> perms = PosixFilePermissions.fromString(\"rwxr-x---\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNDk5Mg=="}, "originalCommit": {"oid": "d0909d8a23bfc259b6b91568f444f93db9c82261"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3844, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}