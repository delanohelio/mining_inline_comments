{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMTQ3NDE5", "number": 9275, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoyNjoxNVrOEjKl2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzo0MzowN1rOEkKMMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzA5MTQ0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoyNjoxNVrOHRXmAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjoyMzowM1rOHRpMJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NDQwMQ==", "bodyText": "currentLeaderEpoch and lastFetchEpoch are both set to -1 by default, but they are set in different ways above, is that deliberate?", "url": "https://github.com/apache/kafka/pull/9275#discussion_r487974401", "createdAt": "2020-09-14T14:26:15Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "diffHunk": "@@ -232,19 +263,25 @@ public FetchRequest build(short version) {\n             // We collect the partitions in a single FetchTopic only if they appear sequentially in the fetchData\n             FetchRequestData.FetchTopic fetchTopic = null;\n             for (Map.Entry<TopicPartition, PartitionData> entry : fetchData.entrySet()) {\n-                if (fetchTopic == null || !entry.getKey().topic().equals(fetchTopic.topic())) {\n+                TopicPartition topicPartition = entry.getKey();\n+                PartitionData partitionData = entry.getValue();\n+\n+                if (fetchTopic == null || !topicPartition.topic().equals(fetchTopic.topic())) {\n                     fetchTopic = new FetchRequestData.FetchTopic()\n-                       .setTopic(entry.getKey().topic())\n+                       .setTopic(topicPartition.topic())\n                        .setPartitions(new ArrayList<>());\n                     fetchRequestData.topics().add(fetchTopic);\n                 }\n \n-                fetchTopic.partitions().add(\n-                    new FetchRequestData.FetchPartition().setPartition(entry.getKey().partition())\n-                        .setCurrentLeaderEpoch(entry.getValue().currentLeaderEpoch.orElse(RecordBatch.NO_PARTITION_LEADER_EPOCH))\n-                        .setFetchOffset(entry.getValue().fetchOffset)\n-                        .setLogStartOffset(entry.getValue().logStartOffset)\n-                        .setPartitionMaxBytes(entry.getValue().maxBytes));\n+                FetchRequestData.FetchPartition fetchPartition = new FetchRequestData.FetchPartition()\n+                    .setPartition(topicPartition.partition())\n+                    .setCurrentLeaderEpoch(partitionData.currentLeaderEpoch.orElse(RecordBatch.NO_PARTITION_LEADER_EPOCH))\n+                    .setFetchOffset(partitionData.fetchOffset)\n+                    .setLogStartOffset(partitionData.logStartOffset)\n+                    .setPartitionMaxBytes(partitionData.maxBytes);\n+                partitionData.lastFetchedEpoch.ifPresent(fetchPartition::setLastFetchedEpoch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de6cc5f7b062de98fde080ca0802dc8a337b1c7"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI2MjY5NQ==", "bodyText": "I guess I was trying to rely on the default from the schema, but I agree probably no reason to be inconsistent.", "url": "https://github.com/apache/kafka/pull/9275#discussion_r488262695", "createdAt": "2020-09-14T22:23:03Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "diffHunk": "@@ -232,19 +263,25 @@ public FetchRequest build(short version) {\n             // We collect the partitions in a single FetchTopic only if they appear sequentially in the fetchData\n             FetchRequestData.FetchTopic fetchTopic = null;\n             for (Map.Entry<TopicPartition, PartitionData> entry : fetchData.entrySet()) {\n-                if (fetchTopic == null || !entry.getKey().topic().equals(fetchTopic.topic())) {\n+                TopicPartition topicPartition = entry.getKey();\n+                PartitionData partitionData = entry.getValue();\n+\n+                if (fetchTopic == null || !topicPartition.topic().equals(fetchTopic.topic())) {\n                     fetchTopic = new FetchRequestData.FetchTopic()\n-                       .setTopic(entry.getKey().topic())\n+                       .setTopic(topicPartition.topic())\n                        .setPartitions(new ArrayList<>());\n                     fetchRequestData.topics().add(fetchTopic);\n                 }\n \n-                fetchTopic.partitions().add(\n-                    new FetchRequestData.FetchPartition().setPartition(entry.getKey().partition())\n-                        .setCurrentLeaderEpoch(entry.getValue().currentLeaderEpoch.orElse(RecordBatch.NO_PARTITION_LEADER_EPOCH))\n-                        .setFetchOffset(entry.getValue().fetchOffset)\n-                        .setLogStartOffset(entry.getValue().logStartOffset)\n-                        .setPartitionMaxBytes(entry.getValue().maxBytes));\n+                FetchRequestData.FetchPartition fetchPartition = new FetchRequestData.FetchPartition()\n+                    .setPartition(topicPartition.partition())\n+                    .setCurrentLeaderEpoch(partitionData.currentLeaderEpoch.orElse(RecordBatch.NO_PARTITION_LEADER_EPOCH))\n+                    .setFetchOffset(partitionData.fetchOffset)\n+                    .setLogStartOffset(partitionData.logStartOffset)\n+                    .setPartitionMaxBytes(partitionData.maxBytes);\n+                partitionData.lastFetchedEpoch.ifPresent(fetchPartition::setLastFetchedEpoch);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NDQwMQ=="}, "originalCommit": {"oid": "0de6cc5f7b062de98fde080ca0802dc8a337b1c7"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzE4NTUzOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/FetchRequestTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0NToxNVrOHRYgHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjozNDo0MVrOHRpt4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4OTI3Ng==", "bodyText": "we could produce without retries, wait for completion and then check exact value?", "url": "https://github.com/apache/kafka/pull/9275#discussion_r487989276", "createdAt": "2020-09-14T14:45:15Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/unit/kafka/server/FetchRequestTest.scala", "diffHunk": "@@ -212,6 +212,44 @@ class FetchRequestTest extends BaseRequestTest {\n     assertEquals(Errors.NOT_LEADER_OR_FOLLOWER, partitionData.error)\n   }\n \n+  @Test\n+  def testLastFetchedEpochValidation(): Unit = {\n+    val topic = \"topic\"\n+    val topicPartition = new TopicPartition(topic, 0)\n+    val partitionToLeader = TestUtils.createTopic(zkClient, topic, numPartitions = 1, replicationFactor = 3, servers)\n+    val firstLeaderId = partitionToLeader(topicPartition.partition)\n+    val firstLeaderEpoch = TestUtils.findLeaderEpoch(firstLeaderId, topicPartition, servers)\n+\n+    initProducer()\n+\n+    // Write some data in epoch 0\n+    produceData(Seq(topicPartition), 100)\n+    // Force a leader change\n+    killBroker(firstLeaderId)\n+    // Write some more data\n+    produceData(Seq(topicPartition), 100)\n+\n+    val secondLeaderId = TestUtils.awaitLeaderChange(servers, topicPartition, firstLeaderId)\n+    val secondLeaderEpoch = TestUtils.findLeaderEpoch(secondLeaderId, topicPartition, servers)\n+\n+    // Build a fetch request at offset 150 with last fetched epoch 0\n+    val fetchOffset = 150\n+    val partitionMap = new util.LinkedHashMap[TopicPartition, FetchRequest.PartitionData]\n+    partitionMap.put(topicPartition, new FetchRequest.PartitionData(fetchOffset, 0L, 1024,\n+      Optional.of(secondLeaderEpoch), Optional.of(firstLeaderEpoch)))\n+    val fetchRequest = FetchRequest.Builder.forConsumer(0, 1, partitionMap).build()\n+\n+    // Validate the expected truncation\n+    val fetchResponse = sendFetchRequest(secondLeaderId, fetchRequest)\n+    val partitionData = fetchResponse.responseData.get(topicPartition)\n+    assertEquals(Errors.NONE, partitionData.error)\n+    assertEquals(0L, partitionData.records.sizeInBytes())\n+    assertTrue(partitionData.truncationOffset.isPresent)\n+\n+    // Should be exactly 100, but use a fuzzy truncation estimate in case there were produce retries\n+    assertTrue(partitionData.truncationOffset.get < 150)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de6cc5f7b062de98fde080ca0802dc8a337b1c7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI3MTMyOQ==", "bodyText": "That's a good idea. Let me try that.", "url": "https://github.com/apache/kafka/pull/9275#discussion_r488271329", "createdAt": "2020-09-14T22:34:41Z", "author": {"login": "hachikuji"}, "path": "core/src/test/scala/unit/kafka/server/FetchRequestTest.scala", "diffHunk": "@@ -212,6 +212,44 @@ class FetchRequestTest extends BaseRequestTest {\n     assertEquals(Errors.NOT_LEADER_OR_FOLLOWER, partitionData.error)\n   }\n \n+  @Test\n+  def testLastFetchedEpochValidation(): Unit = {\n+    val topic = \"topic\"\n+    val topicPartition = new TopicPartition(topic, 0)\n+    val partitionToLeader = TestUtils.createTopic(zkClient, topic, numPartitions = 1, replicationFactor = 3, servers)\n+    val firstLeaderId = partitionToLeader(topicPartition.partition)\n+    val firstLeaderEpoch = TestUtils.findLeaderEpoch(firstLeaderId, topicPartition, servers)\n+\n+    initProducer()\n+\n+    // Write some data in epoch 0\n+    produceData(Seq(topicPartition), 100)\n+    // Force a leader change\n+    killBroker(firstLeaderId)\n+    // Write some more data\n+    produceData(Seq(topicPartition), 100)\n+\n+    val secondLeaderId = TestUtils.awaitLeaderChange(servers, topicPartition, firstLeaderId)\n+    val secondLeaderEpoch = TestUtils.findLeaderEpoch(secondLeaderId, topicPartition, servers)\n+\n+    // Build a fetch request at offset 150 with last fetched epoch 0\n+    val fetchOffset = 150\n+    val partitionMap = new util.LinkedHashMap[TopicPartition, FetchRequest.PartitionData]\n+    partitionMap.put(topicPartition, new FetchRequest.PartitionData(fetchOffset, 0L, 1024,\n+      Optional.of(secondLeaderEpoch), Optional.of(firstLeaderEpoch)))\n+    val fetchRequest = FetchRequest.Builder.forConsumer(0, 1, partitionMap).build()\n+\n+    // Validate the expected truncation\n+    val fetchResponse = sendFetchRequest(secondLeaderId, fetchRequest)\n+    val partitionData = fetchResponse.responseData.get(topicPartition)\n+    assertEquals(Errors.NONE, partitionData.error)\n+    assertEquals(0L, partitionData.records.sizeInBytes())\n+    assertTrue(partitionData.truncationOffset.isPresent)\n+\n+    // Should be exactly 100, but use a fuzzy truncation estimate in case there were produce retries\n+    assertTrue(partitionData.truncationOffset.get < 150)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4OTI3Ng=="}, "originalCommit": {"oid": "0de6cc5f7b062de98fde080ca0802dc8a337b1c7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzUxNzEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/epoch/LeaderEpochFileCache.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTo1MzoyM1rOHRbvBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDoyNTowMFrOHRsEnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0MjI0NQ==", "bodyText": "I guess we would always be removing a range from the start or end. Are we going through the whole map and checking each one because there is no suitable API to remove multiple entries from start or end?", "url": "https://github.com/apache/kafka/pull/9275#discussion_r488042245", "createdAt": "2020-09-14T15:53:23Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/server/epoch/LeaderEpochFileCache.scala", "diffHunk": "@@ -91,8 +95,23 @@ class LeaderEpochFileCache(topicPartition: TopicPartition,\n     }\n   }\n \n+  def removeEntries(predicate: EpochEntry => Boolean): Seq[EpochEntry] = {\n+    val removedEpochs = mutable.ListBuffer.empty[EpochEntry]\n+    val iterator = epochs.entrySet().iterator()\n+\n+    while (iterator.hasNext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de6cc5f7b062de98fde080ca0802dc8a337b1c7"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwOTkxNw==", "bodyText": "That's a good question. We probably could be smarter in truncateAndAppend if it was safe to assume epoch/start offset increases monotonically. Maybe we just need to add the logic to validate that invariant on startup. Let me take a look at that.", "url": "https://github.com/apache/kafka/pull/9275#discussion_r488309917", "createdAt": "2020-09-15T00:25:00Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/epoch/LeaderEpochFileCache.scala", "diffHunk": "@@ -91,8 +95,23 @@ class LeaderEpochFileCache(topicPartition: TopicPartition,\n     }\n   }\n \n+  def removeEntries(predicate: EpochEntry => Boolean): Seq[EpochEntry] = {\n+    val removedEpochs = mutable.ListBuffer.empty[EpochEntry]\n+    val iterator = epochs.entrySet().iterator()\n+\n+    while (iterator.hasNext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0MjI0NQ=="}, "originalCommit": {"oid": "0de6cc5f7b062de98fde080ca0802dc8a337b1c7"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODYxMTYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/epoch/LeaderEpochFileCache.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoyMDo0N1rOHSMBHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzo0MDo0NlrOHSNDIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMzMwOQ==", "bodyText": "Do we need to check again inside the lock before update because this is outside the lock?", "url": "https://github.com/apache/kafka/pull/9275#discussion_r488833309", "createdAt": "2020-09-15T17:20:47Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/server/epoch/LeaderEpochFileCache.scala", "diffHunk": "@@ -47,63 +47,81 @@ class LeaderEpochFileCache(topicPartition: TopicPartition,\n   private val epochs = new util.TreeMap[Int, EpochEntry]()\n \n   inWriteLock(lock) {\n-    checkpoint.read().foreach { entry =>\n-      epochs.put(entry.epoch, entry)\n-    }\n+    checkpoint.read().foreach(assign)\n   }\n \n   /**\n     * Assigns the supplied Leader Epoch to the supplied Offset\n     * Once the epoch is assigned it cannot be reassigned\n     */\n   def assign(epoch: Int, startOffset: Long): Unit = {\n-    inWriteLock(lock) {\n-      val updateNeeded = if (epochs.isEmpty) {\n-        true\n-      } else {\n-        val lastEntry = epochs.lastEntry.getValue\n-        lastEntry.epoch != epoch || startOffset < lastEntry.startOffset\n-      }\n+    val entry = EpochEntry(epoch, startOffset)\n+    if (assign(entry)) {\n+      debug(s\"Appended new epoch entry $entry. Cache now contains ${epochs.size} entries.\")\n+      flush()\n+    }\n+  }\n \n-      if (updateNeeded) {\n-        truncateAndAppend(EpochEntry(epoch, startOffset))\n-        flush()\n+  private def assign(entry: EpochEntry): Boolean = {\n+    if (entry.epoch < 0 || entry.startOffset < 0) {\n+      throw new IllegalArgumentException(s\"Received invalid partition leader epoch entry $entry\")\n+    }\n+\n+    // Check whether the append is needed before acquiring the write lock\n+    // in order to avoid contention with readers in the common case\n+    latestEntry.foreach { lastEntry =>\n+      if (entry.epoch == lastEntry.epoch && entry.startOffset >= lastEntry.startOffset) {\n+        return false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb821421f3c5dbaccc58cb6f28b80eb3963af41b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDIwOQ==", "bodyText": "Yeah, let me add it. I had debated it and convinced myself it was not needed, but that probably relies a bit too heavily on locking at higher layers. Probably better to err on the safe side.", "url": "https://github.com/apache/kafka/pull/9275#discussion_r488850209", "createdAt": "2020-09-15T17:40:46Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/epoch/LeaderEpochFileCache.scala", "diffHunk": "@@ -47,63 +47,81 @@ class LeaderEpochFileCache(topicPartition: TopicPartition,\n   private val epochs = new util.TreeMap[Int, EpochEntry]()\n \n   inWriteLock(lock) {\n-    checkpoint.read().foreach { entry =>\n-      epochs.put(entry.epoch, entry)\n-    }\n+    checkpoint.read().foreach(assign)\n   }\n \n   /**\n     * Assigns the supplied Leader Epoch to the supplied Offset\n     * Once the epoch is assigned it cannot be reassigned\n     */\n   def assign(epoch: Int, startOffset: Long): Unit = {\n-    inWriteLock(lock) {\n-      val updateNeeded = if (epochs.isEmpty) {\n-        true\n-      } else {\n-        val lastEntry = epochs.lastEntry.getValue\n-        lastEntry.epoch != epoch || startOffset < lastEntry.startOffset\n-      }\n+    val entry = EpochEntry(epoch, startOffset)\n+    if (assign(entry)) {\n+      debug(s\"Appended new epoch entry $entry. Cache now contains ${epochs.size} entries.\")\n+      flush()\n+    }\n+  }\n \n-      if (updateNeeded) {\n-        truncateAndAppend(EpochEntry(epoch, startOffset))\n-        flush()\n+  private def assign(entry: EpochEntry): Boolean = {\n+    if (entry.epoch < 0 || entry.startOffset < 0) {\n+      throw new IllegalArgumentException(s\"Received invalid partition leader epoch entry $entry\")\n+    }\n+\n+    // Check whether the append is needed before acquiring the write lock\n+    // in order to avoid contention with readers in the common case\n+    latestEntry.foreach { lastEntry =>\n+      if (entry.epoch == lastEntry.epoch && entry.startOffset >= lastEntry.startOffset) {\n+        return false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMzMwOQ=="}, "originalCommit": {"oid": "eb821421f3c5dbaccc58cb6f28b80eb3963af41b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzUxMTU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/api/ApiVersion.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzo0MzowN1rOHS7jTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMDoxMToxMFrOHUe_gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMjEwOQ==", "bodyText": "Maybe you can fix this typo in your next PR.", "url": "https://github.com/apache/kafka/pull/9275#discussion_r489612109", "createdAt": "2020-09-16T17:43:07Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/api/ApiVersion.scala", "diffHunk": "@@ -100,7 +100,9 @@ object ApiVersion {\n     // Introduced StopReplicaRequest V3 containing the leader epoch for each partition (KIP-570)\n     KAFKA_2_6_IV0,\n     // Introduced feature versioning support (KIP-584)\n-    KAFKA_2_7_IV0\n+    KAFKA_2_7_IV0,\n+    // Bup Fetch protocol for Raft protocol (KIP-595)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00867faf4ec2ac8b520191320832e88eb8fd1e83"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0MTM0Ng==", "bodyText": "Oops! Will do.", "url": "https://github.com/apache/kafka/pull/9275#discussion_r491241346", "createdAt": "2020-09-19T00:11:10Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/api/ApiVersion.scala", "diffHunk": "@@ -100,7 +100,9 @@ object ApiVersion {\n     // Introduced StopReplicaRequest V3 containing the leader epoch for each partition (KIP-570)\n     KAFKA_2_6_IV0,\n     // Introduced feature versioning support (KIP-584)\n-    KAFKA_2_7_IV0\n+    KAFKA_2_7_IV0,\n+    // Bup Fetch protocol for Raft protocol (KIP-595)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMjEwOQ=="}, "originalCommit": {"oid": "00867faf4ec2ac8b520191320832e88eb8fd1e83"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1813, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}