{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMzEyNDcy", "number": 8695, "reviewThreads": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo0MTozOFrOD-ORwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo1ODowOVrOEBz99Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTcyMjI0OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo0MTozOFrOGYMRaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzowODozOVrOGYVpSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMDA3Mg==", "bodyText": "I think you want to leave this as the default and see if it works correctly.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r428020072", "createdAt": "2020-05-20T13:41:38Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +622,34 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2() throws Exception {\n+        String node = \"0\";\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS.split(\",\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1076e5187fa045ec8198842e109b3afc14b6c059"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNDU2OQ==", "bodyText": "Hello. Sorry, I don't understand your concern :)\n\nDEFAULT_SSL_ENABLED_PROTOCOLS = TLSv1.2,TLSv1.3 for java11+\nDEFAULT_SSL_ENABLED_PROTOCOLS = TLSv1.2 for others jdk.\n\nThis property modified inside this test so I forcefully set it as default value.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r428114569", "createdAt": "2020-05-20T15:41:22Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +622,34 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2() throws Exception {\n+        String node = \"0\";\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS.split(\",\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMDA3Mg=="}, "originalCommit": {"oid": "1076e5187fa045ec8198842e109b3afc14b6c059"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE1MzEwNA==", "bodyText": "Ah, I see, you are forcefully setting it to the default. Makes sense. OK, so this test shows that we can negotiate successfully even though we have no cipher suites that work with TLS 1.3. Can we also test that if the client sets TLS 1.3, it will fail?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r428153104", "createdAt": "2020-05-20T16:36:52Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +622,34 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2() throws Exception {\n+        String node = \"0\";\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS.split(\",\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMDA3Mg=="}, "originalCommit": {"oid": "1076e5187fa045ec8198842e109b3afc14b6c059"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3MzY0MA==", "bodyText": "Tests added.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r428173640", "createdAt": "2020-05-20T17:08:39Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +622,34 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2() throws Exception {\n+        String node = \"0\";\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS.split(\",\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMDA3Mg=="}, "originalCommit": {"oid": "1076e5187fa045ec8198842e109b3afc14b6c059"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE1MjEwOnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/services/kafka/kafka.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToxNTowMFrOGbl6GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODo0NTo0OVrOGbriyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4NTgxNg==", "bodyText": "Why do we need this change?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431585816", "createdAt": "2020-05-28T05:15:00Z", "author": {"login": "ijuma"}, "path": "tests/kafkatest/services/kafka/kafka.py", "diffHunk": "@@ -352,17 +357,18 @@ def start_cmd(self, node):\n                 KafkaService.STDOUT_STDERR_CAPTURE)\n         return cmd\n \n-    def start_node(self, node, timeout_sec=60):\n+    def start_node(self, node, timeout_sec=180):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3ODE1NQ==", "bodyText": "No, sorry. Reverted.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431678155", "createdAt": "2020-05-28T08:45:49Z", "author": {"login": "nizhikov"}, "path": "tests/kafkatest/services/kafka/kafka.py", "diffHunk": "@@ -352,17 +357,18 @@ def start_cmd(self, node):\n                 KafkaService.STDOUT_STDERR_CAPTURE)\n         return cmd\n \n-    def start_node(self, node, timeout_sec=60):\n+    def start_node(self, node, timeout_sec=180):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4NTgxNg=="}, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE1MjcyOnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/services/kafka/kafka.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToxNToyMVrOGbl6eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODo0NDoxN1rOGbre4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4NTkxMg==", "bodyText": "Is this intentional?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431585912", "createdAt": "2020-05-28T05:15:21Z", "author": {"login": "ijuma"}, "path": "tests/kafkatest/services/kafka/kafka.py", "diffHunk": "@@ -52,6 +51,7 @@ def advertised_listener(self, node):\n     def listener_security_protocol(self):\n         return \"%s:%s\" % (self.name, self.security_protocol)\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3NzE1NA==", "bodyText": "This change not necessary.\nBut PyCharm and IDEA print warning without it: \"PEP 8: E302 expected 2 blank lines, found 1\"\nI will revert it.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431677154", "createdAt": "2020-05-28T08:44:17Z", "author": {"login": "nizhikov"}, "path": "tests/kafkatest/services/kafka/kafka.py", "diffHunk": "@@ -52,6 +51,7 @@ def advertised_listener(self, node):\n     def listener_security_protocol(self):\n         return \"%s:%s\" % (self.name, self.security_protocol)\n \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4NTkxMg=="}, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE2Mzk5OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToyMjoyOFrOGbmBdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMTo1MDoyMVrOGbxlyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4NzcwMg==", "bodyText": "We can use assume to do this in a more idiomatic way. Same for other places where we do something similar.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431587702", "createdAt": "2020-05-28T05:22:28Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +619,81 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc3NzIyNQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431777225", "createdAt": "2020-05-28T11:50:21Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +619,81 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4NzcwMg=="}, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE2NTU4OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToyMzoyNlrOGbmCdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToyMzoyNlrOGbmCdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Nzk1OQ==", "bodyText": "This comment seems incorrect.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431587959", "createdAt": "2020-05-28T05:23:26Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +619,81 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE3MDQ1OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToyNjowOVrOGbmFbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoyMjo0NlrOGb003Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4ODcxNw==", "bodyText": "Can we replace\nArrays.asList(SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS.split(\",\"))\nwith\nSslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS\nDoesn't the code handle comma separated Strings?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431588717", "createdAt": "2020-05-28T05:26:09Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +619,81 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTLSv1_2_ClientTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2() throws Exception {\n+        String node = \"0\";\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS.split(\",\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc4MzcyNg==", "bodyText": "No, we can't. It leads to ClassCastException.\nPlease, see DefaultSslEngineFactory line 123.\n        List<String> enabledProtocolsList = (List<String>) configs.get(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG);", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431783726", "createdAt": "2020-05-28T12:03:06Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +619,81 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTLSv1_2_ClientTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2() throws Exception {\n+        String node = \"0\";\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS.split(\",\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4ODcxNw=="}, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMDIzNw==", "bodyText": "Thanks.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431830237", "createdAt": "2020-05-28T13:22:46Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +619,81 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTLSv1_2_ClientTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2() throws Exception {\n+        String node = \"0\";\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS.split(\",\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4ODcxNw=="}, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE3MTg4OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToyNzowMVrOGbmGTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMTo1NDo0N1rOGbxubQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4ODk0Mg==", "bodyText": "Do these have to be public or can they be package private?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431588942", "createdAt": "2020-05-28T05:27:01Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -1250,7 +1322,7 @@ private NioEchoServer createEchoServer(SecurityProtocol securityProtocol) throws\n         void run() throws IOException;\n     }\n \n-    private static class TestSslChannelBuilder extends SslChannelBuilder {\n+    public static class TestSslChannelBuilder extends SslChannelBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc3OTQzNw==", "bodyText": "The correct scope is package private.\nFixed.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431779437", "createdAt": "2020-05-28T11:54:47Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -1250,7 +1322,7 @@ private NioEchoServer createEchoServer(SecurityProtocol securityProtocol) throws\n         void run() throws IOException;\n     }\n \n-    private static class TestSslChannelBuilder extends SslChannelBuilder {\n+    public static class TestSslChannelBuilder extends SslChannelBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4ODk0Mg=="}, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE3NTYyOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToyODo0OFrOGbmIkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToyODo0OFrOGbmIkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4OTUyMw==", "bodyText": "The important detail is that TLS 1.3 is enabled too, right?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431589523", "createdAt": "2020-05-28T05:28:48Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +619,81 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTLSv1_2_ClientTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE3NjQ3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToyOToyNlrOGbmJKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoyMjozMlrOGb00Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4OTY3Mw==", "bodyText": "Can we set this to DEFAULT_SSL_PROTOCOL?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431589673", "createdAt": "2020-05-28T05:29:26Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +619,81 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTLSv1_2_ClientTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2() throws Exception {\n+        String node = \"0\";\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc5OTQ2OA==", "bodyText": "Yes. Fixed.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431799468", "createdAt": "2020-05-28T12:32:36Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +619,81 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTLSv1_2_ClientTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2() throws Exception {\n+        String node = \"0\";\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4OTY3Mw=="}, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMDA3OQ==", "bodyText": "Did you push this change? I don't see it.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431830079", "createdAt": "2020-05-28T13:22:32Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +619,81 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTLSv1_2_ClientTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2() throws Exception {\n+        String node = \"0\";\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4OTY3Mw=="}, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE3Njk0OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToyOTo1MFrOGbmJfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToyOTo1MFrOGbmJfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4OTc1Nw==", "bodyText": "Same here, can we SslConfigs.DEFAULT_SSL_PROTOCOL?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431589757", "createdAt": "2020-05-28T05:29:50Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +619,81 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTLSv1_2_ClientTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2() throws Exception {\n+        String node = \"0\";\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS.split(\",\")));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE4NTM3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTozNDoxMlrOGbmOnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDowMDo0NVrOGb2g3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5MTA2OQ==", "bodyText": "If we take the suggestions to use DEFAULT_SSL_PROTOCOL, then this test is checking that we can negotiate TLSv1.2 if the custom cipher suites are only compatible with TLSv1.2 and we use the default protocol configuration (TLSv1.3).", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431591069", "createdAt": "2020-05-28T05:34:12Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +619,81 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTLSv1_2_ClientTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5MjY0Ng==", "bodyText": "We should also add a similar test where the custom cipher is a TLS 1.3 cipher.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431592646", "createdAt": "2020-05-28T05:39:40Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +619,81 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTLSv1_2_ClientTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5MTA2OQ=="}, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1Nzg4Ng==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431857886", "createdAt": "2020-05-28T14:00:45Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +619,81 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTLSv1_2_ClientTLSv1_3() throws Exception {\n+        if (!Java.IS_JAVA11_COMPATIBLE)\n+            return;\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5MTA2OQ=="}, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE4NjAzOnYy", "diffSide": "LEFT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTozNDozMlrOGbmPAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTozNDozMlrOGbmPAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5MTE2OQ==", "bodyText": "Why did we remove both lines above?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431591169", "createdAt": "2020-05-28T05:34:32Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -591,10 +591,7 @@ public void testUnsupportedCipher() throws Exception {\n             createSelector(sslClientConfigs);\n \n             checkAuthentiationFailed(\"1\", \"TLSv1.1\");\n-            server.verifyAuthenticationMetrics(0, 1);\n-\n             checkAuthentiationFailed(\"2\", \"TLSv1\");\n-            server.verifyAuthenticationMetrics(0, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE4ODM5OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTozNTo0NFrOGbmQcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODozMDoyMlrOGbq-bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5MTUzNw==", "bodyText": "Nit: the test should be testTlsDefaults to match the naming convention.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431591537", "createdAt": "2020-05-28T05:35:44Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.security.TestSecurityConfig;\n+import org.apache.kafka.common.security.auth.SecurityProtocol;\n+import org.apache.kafka.common.utils.Java;\n+import org.apache.kafka.common.utils.LogContext;\n+import org.apache.kafka.common.utils.Time;\n+import org.apache.kafka.test.TestUtils;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+/**\n+ * Tests for the SSL transport layer.\n+ * Checks different versions of the protocol usage on the server and client.\n+ */\n+@RunWith(value = Parameterized.class)\n+public class SslVersionsTransportLayerTest {\n+    private static final int BUFFER_SIZE = 4 * 1024;\n+    private static final Time TIME = Time.SYSTEM;\n+\n+    private final String tlsServerProtocol;\n+    private final String tlsClientProtocol;\n+\n+    @Parameterized.Parameters(name = \"tlsServerProtocol={0},tlsClientProtocol={1}\")\n+    public static Collection<Object[]> data() {\n+        List<Object[]> values = new ArrayList<>();\n+        values.add(new Object[] {\"TLSv1.2\", \"TLSv1.2\"});\n+        if (Java.IS_JAVA11_COMPATIBLE) {\n+            values.add(new Object[] {\"TLSv1.2\", \"TLSv1.3\"});\n+            values.add(new Object[] {\"TLSv1.3\", \"TLSv1.2\"});\n+            values.add(new Object[] {\"TLSv1.3\", \"TLSv1.3\"});\n+        }\n+        return values;\n+    }\n+\n+    public SslVersionsTransportLayerTest(String tlsServerProtocol, String tlsClientProtocol) {\n+        this.tlsServerProtocol = tlsServerProtocol;\n+        this.tlsClientProtocol = tlsClientProtocol;\n+    }\n+\n+    /**\n+     * Tests that connection success with the default TLS version.\n+     */\n+    @Test\n+    public void testTLSDefaults() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2ODg0Ng==", "bodyText": "Fixed.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431668846", "createdAt": "2020-05-28T08:30:22Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.security.TestSecurityConfig;\n+import org.apache.kafka.common.security.auth.SecurityProtocol;\n+import org.apache.kafka.common.utils.Java;\n+import org.apache.kafka.common.utils.LogContext;\n+import org.apache.kafka.common.utils.Time;\n+import org.apache.kafka.test.TestUtils;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+/**\n+ * Tests for the SSL transport layer.\n+ * Checks different versions of the protocol usage on the server and client.\n+ */\n+@RunWith(value = Parameterized.class)\n+public class SslVersionsTransportLayerTest {\n+    private static final int BUFFER_SIZE = 4 * 1024;\n+    private static final Time TIME = Time.SYSTEM;\n+\n+    private final String tlsServerProtocol;\n+    private final String tlsClientProtocol;\n+\n+    @Parameterized.Parameters(name = \"tlsServerProtocol={0},tlsClientProtocol={1}\")\n+    public static Collection<Object[]> data() {\n+        List<Object[]> values = new ArrayList<>();\n+        values.add(new Object[] {\"TLSv1.2\", \"TLSv1.2\"});\n+        if (Java.IS_JAVA11_COMPATIBLE) {\n+            values.add(new Object[] {\"TLSv1.2\", \"TLSv1.3\"});\n+            values.add(new Object[] {\"TLSv1.3\", \"TLSv1.2\"});\n+            values.add(new Object[] {\"TLSv1.3\", \"TLSv1.3\"});\n+        }\n+        return values;\n+    }\n+\n+    public SslVersionsTransportLayerTest(String tlsServerProtocol, String tlsClientProtocol) {\n+        this.tlsServerProtocol = tlsServerProtocol;\n+        this.tlsClientProtocol = tlsClientProtocol;\n+    }\n+\n+    /**\n+     * Tests that connection success with the default TLS version.\n+     */\n+    @Test\n+    public void testTLSDefaults() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5MTUzNw=="}, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE5MDgyOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTozNzowNVrOGbmR3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTozNzowNVrOGbmR3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5MTkwMw==", "bodyText": "We probably don't need these empty lines.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431591903", "createdAt": "2020-05-28T05:37:05Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.security.TestSecurityConfig;\n+import org.apache.kafka.common.security.auth.SecurityProtocol;\n+import org.apache.kafka.common.utils.Java;\n+import org.apache.kafka.common.utils.LogContext;\n+import org.apache.kafka.common.utils.Time;\n+import org.apache.kafka.test.TestUtils;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+/**\n+ * Tests for the SSL transport layer.\n+ * Checks different versions of the protocol usage on the server and client.\n+ */\n+@RunWith(value = Parameterized.class)\n+public class SslVersionsTransportLayerTest {\n+    private static final int BUFFER_SIZE = 4 * 1024;\n+    private static final Time TIME = Time.SYSTEM;\n+\n+    private final String tlsServerProtocol;\n+    private final String tlsClientProtocol;\n+\n+    @Parameterized.Parameters(name = \"tlsServerProtocol={0},tlsClientProtocol={1}\")\n+    public static Collection<Object[]> data() {\n+        List<Object[]> values = new ArrayList<>();\n+        values.add(new Object[] {\"TLSv1.2\", \"TLSv1.2\"});\n+        if (Java.IS_JAVA11_COMPATIBLE) {\n+            values.add(new Object[] {\"TLSv1.2\", \"TLSv1.3\"});\n+            values.add(new Object[] {\"TLSv1.3\", \"TLSv1.2\"});\n+            values.add(new Object[] {\"TLSv1.3\", \"TLSv1.3\"});\n+        }\n+        return values;\n+    }\n+\n+    public SslVersionsTransportLayerTest(String tlsServerProtocol, String tlsClientProtocol) {\n+        this.tlsServerProtocol = tlsServerProtocol;\n+        this.tlsClientProtocol = tlsClientProtocol;\n+    }\n+\n+    /**\n+     * Tests that connection success with the default TLS version.\n+     */\n+    @Test\n+    public void testTLSDefaults() throws Exception {\n+        // Create certificates for use by client and server. Add server cert to client truststore and vice versa.\n+        CertStores serverCertStores = new CertStores(true, \"server\",  \"localhost\");\n+        CertStores clientCertStores = new CertStores(false, \"client\", \"localhost\");\n+\n+        Map<String, Object> sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores, tlsClientProtocol);\n+        Map<String, Object> sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores, tlsServerProtocol);\n+\n+        NioEchoServer server = NetworkTestUtils.createEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL),\n+             SecurityProtocol.SSL,\n+             new TestSecurityConfig(sslServerConfigs),\n+             null,\n+            TIME);\n+        Selector selector = createSelector(sslClientConfigs);\n+\n+        String node = \"0\";\n+        selector.connect(node, new InetSocketAddress(\"localhost\", server.port()), BUFFER_SIZE, BUFFER_SIZE);\n+\n+        if (tlsServerProtocol.equals(tlsClientProtocol)) {\n+            NetworkTestUtils.waitForChannelReady(selector, node);\n+\n+            int msgSz = 1024 * 1024;\n+            String message = TestUtils.randomString(msgSz);\n+            selector.send(new NetworkSend(node, ByteBuffer.wrap(message.getBytes())));\n+            while (selector.completedReceives().isEmpty()) {\n+                selector.poll(100L);\n+            }\n+            int totalBytes = msgSz + 4; // including 4-byte size\n+            server.waitForMetric(\"incoming-byte\", totalBytes);\n+            server.waitForMetric(\"outgoing-byte\", totalBytes);\n+            server.waitForMetric(\"request\", 1);\n+            server.waitForMetric(\"response\", 1);\n+        } else {\n+            NetworkTestUtils.waitForChannelClose(selector, node, ChannelState.State.AUTHENTICATION_FAILED);\n+        }\n+    }\n+\n+    public static Map<String, Object> sslConfig(String tlsServerProtocol) {\n+        Map<String, Object> sslConfig = new HashMap<>();\n+\n+        sslConfig.put(SslConfigs.SSL_PROTOCOL_CONFIG, tlsServerProtocol);\n+        sslConfig.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Collections.singletonList(tlsServerProtocol));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE5MzY1OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTozODozMlrOGbmTpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMTo0ODoxMVrOGbxhnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5MjM1Nw==", "bodyText": "Could we have each parameter be a list so that we can set enabled protocols with more than one element?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431592357", "createdAt": "2020-05-28T05:38:32Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.security.TestSecurityConfig;\n+import org.apache.kafka.common.security.auth.SecurityProtocol;\n+import org.apache.kafka.common.utils.Java;\n+import org.apache.kafka.common.utils.LogContext;\n+import org.apache.kafka.common.utils.Time;\n+import org.apache.kafka.test.TestUtils;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+/**\n+ * Tests for the SSL transport layer.\n+ * Checks different versions of the protocol usage on the server and client.\n+ */\n+@RunWith(value = Parameterized.class)\n+public class SslVersionsTransportLayerTest {\n+    private static final int BUFFER_SIZE = 4 * 1024;\n+    private static final Time TIME = Time.SYSTEM;\n+\n+    private final String tlsServerProtocol;\n+    private final String tlsClientProtocol;\n+\n+    @Parameterized.Parameters(name = \"tlsServerProtocol={0},tlsClientProtocol={1}\")\n+    public static Collection<Object[]> data() {\n+        List<Object[]> values = new ArrayList<>();\n+        values.add(new Object[] {\"TLSv1.2\", \"TLSv1.2\"});\n+        if (Java.IS_JAVA11_COMPATIBLE) {\n+            values.add(new Object[] {\"TLSv1.2\", \"TLSv1.3\"});\n+            values.add(new Object[] {\"TLSv1.3\", \"TLSv1.2\"});\n+            values.add(new Object[] {\"TLSv1.3\", \"TLSv1.3\"});\n+        }\n+        return values;\n+    }\n+\n+    public SslVersionsTransportLayerTest(String tlsServerProtocol, String tlsClientProtocol) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc3NjE1Nw==", "bodyText": "Fixed.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431776157", "createdAt": "2020-05-28T11:48:11Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.security.TestSecurityConfig;\n+import org.apache.kafka.common.security.auth.SecurityProtocol;\n+import org.apache.kafka.common.utils.Java;\n+import org.apache.kafka.common.utils.LogContext;\n+import org.apache.kafka.common.utils.Time;\n+import org.apache.kafka.test.TestUtils;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+/**\n+ * Tests for the SSL transport layer.\n+ * Checks different versions of the protocol usage on the server and client.\n+ */\n+@RunWith(value = Parameterized.class)\n+public class SslVersionsTransportLayerTest {\n+    private static final int BUFFER_SIZE = 4 * 1024;\n+    private static final Time TIME = Time.SYSTEM;\n+\n+    private final String tlsServerProtocol;\n+    private final String tlsClientProtocol;\n+\n+    @Parameterized.Parameters(name = \"tlsServerProtocol={0},tlsClientProtocol={1}\")\n+    public static Collection<Object[]> data() {\n+        List<Object[]> values = new ArrayList<>();\n+        values.add(new Object[] {\"TLSv1.2\", \"TLSv1.2\"});\n+        if (Java.IS_JAVA11_COMPATIBLE) {\n+            values.add(new Object[] {\"TLSv1.2\", \"TLSv1.3\"});\n+            values.add(new Object[] {\"TLSv1.3\", \"TLSv1.2\"});\n+            values.add(new Object[] {\"TLSv1.3\", \"TLSv1.3\"});\n+        }\n+        return values;\n+    }\n+\n+    public SslVersionsTransportLayerTest(String tlsServerProtocol, String tlsClientProtocol) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5MjM1Nw=="}, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE5NDQxOnYy", "diffSide": "RIGHT", "path": "tests/docker/run_tests.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTozOTowNlrOGbmUJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODo0MDoyN1rOGbrWRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5MjQ4NA==", "bodyText": "Do we intend to change this temporarily or permanently?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431592484", "createdAt": "2020-05-28T05:39:06Z", "author": {"login": "ijuma"}, "path": "tests/docker/run_tests.sh", "diffHunk": "@@ -30,6 +30,6 @@ if [ \"$REBUILD\" == \"t\" ]; then\n fi\n \n if ${SCRIPT_DIR}/ducker-ak ssh | grep -q '(none)'; then\n-    ${SCRIPT_DIR}/ducker-ak up -n \"${KAFKA_NUM_CONTAINERS}\" || die \"ducker-ak up failed\"\n+    ${SCRIPT_DIR}/ducker-ak up -j 'openjdk:11' -n \"${KAFKA_NUM_CONTAINERS}\" || die \"ducker-ak up failed\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3NDk1MA==", "bodyText": "I think this should be reverted prior merge.\nChanged only to test PR on external server(my local machine too slow to run all changed tests)", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431674950", "createdAt": "2020-05-28T08:40:27Z", "author": {"login": "nizhikov"}, "path": "tests/docker/run_tests.sh", "diffHunk": "@@ -30,6 +30,6 @@ if [ \"$REBUILD\" == \"t\" ]; then\n fi\n \n if ${SCRIPT_DIR}/ducker-ak ssh | grep -q '(none)'; then\n-    ${SCRIPT_DIR}/ducker-ak up -n \"${KAFKA_NUM_CONTAINERS}\" || die \"ducker-ak up failed\"\n+    ${SCRIPT_DIR}/ducker-ak up -j 'openjdk:11' -n \"${KAFKA_NUM_CONTAINERS}\" || die \"ducker-ak up failed\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5MjQ4NA=="}, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODIxMTE0OnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/benchmarks/core/benchmark_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTo0ODozMlrOGbmebQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODo0MTowOFrOGbrXtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5NTExNw==", "bodyText": "Maybe we can configure the TLS version for benchmark_test.py and replication_test.py only. The rest can use the default, which will be TLS 1.3 for Java 11 and TLS 1.2 for Java 8. That would not inflate test times by too much. What do you think?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431595117", "createdAt": "2020-05-28T05:48:32Z", "author": {"login": "ijuma"}, "path": "tests/kafkatest/benchmarks/core/benchmark_test.py", "diffHunk": "@@ -236,9 +238,9 @@ def test_producer_and_consumer(self, compression_type=\"none\", security_protocol=\n         return data\n \n     @cluster(num_nodes=6)\n-    @parametrize(security_protocol='SSL', interbroker_security_protocol='PLAINTEXT')\n-    @matrix(security_protocol=['PLAINTEXT', 'SSL'], compression_type=[\"none\", \"snappy\"])\n-    def test_consumer_throughput(self, compression_type=\"none\", security_protocol=\"PLAINTEXT\",\n+    @matrix(security_protocol=['SSL'], interbroker_security_protocol=['PLAINTEXT'], tls_version=['TLSv1.2', 'TLSv1.3'], compression_type=[\"none\", \"snappy\"])\n+    @matrix(security_protocol=['PLAINTEXT'], compression_type=[\"none\", \"snappy\"])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3NTMxNw==", "bodyText": "OK for me. Will revert other changes.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431675317", "createdAt": "2020-05-28T08:41:08Z", "author": {"login": "nizhikov"}, "path": "tests/kafkatest/benchmarks/core/benchmark_test.py", "diffHunk": "@@ -236,9 +238,9 @@ def test_producer_and_consumer(self, compression_type=\"none\", security_protocol=\n         return data\n \n     @cluster(num_nodes=6)\n-    @parametrize(security_protocol='SSL', interbroker_security_protocol='PLAINTEXT')\n-    @matrix(security_protocol=['PLAINTEXT', 'SSL'], compression_type=[\"none\", \"snappy\"])\n-    def test_consumer_throughput(self, compression_type=\"none\", security_protocol=\"PLAINTEXT\",\n+    @matrix(security_protocol=['SSL'], interbroker_security_protocol=['PLAINTEXT'], tls_version=['TLSv1.2', 'TLSv1.3'], compression_type=[\"none\", \"snappy\"])\n+    @matrix(security_protocol=['PLAINTEXT'], compression_type=[\"none\", \"snappy\"])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5NTExNw=="}, "originalCommit": {"oid": "c7000d9e7372824762db02cf4a5dd6688726ba32"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTYyODYyOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoxNzozN1rOGb0n4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoyNjo1OFrOGclxUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyNjkxNQ==", "bodyText": "Shouldn't this check if the intersection of server and client protocols is non empty?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431826915", "createdAt": "2020-05-28T13:17:37Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.security.TestSecurityConfig;\n+import org.apache.kafka.common.security.auth.SecurityProtocol;\n+import org.apache.kafka.common.utils.Java;\n+import org.apache.kafka.common.utils.LogContext;\n+import org.apache.kafka.common.utils.Time;\n+import org.apache.kafka.test.TestUtils;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+/**\n+ * Tests for the SSL transport layer.\n+ * Checks different versions of the protocol usage on the server and client.\n+ */\n+@RunWith(value = Parameterized.class)\n+public class SslVersionsTransportLayerTest {\n+    private static final int BUFFER_SIZE = 4 * 1024;\n+    private static final Time TIME = Time.SYSTEM;\n+\n+    private final List<String> tlsServerProtocols;\n+    private final List<String> tlsClientProtocols;\n+\n+    @Parameterized.Parameters(name = \"tlsServerProtocol={0},tlsClientProtocol={1}\")\n+    public static Collection<Object[]> data() {\n+        List<Object[]> values = new ArrayList<>();\n+        values.add(new Object[] {Arrays.asList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.2\")});\n+        if (Java.IS_JAVA11_COMPATIBLE) {\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.2\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.2\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n+        }\n+        return values;\n+    }\n+\n+    public SslVersionsTransportLayerTest(List<String> tlsServerProtocols, List<String> tlsClientProtocols) {\n+        this.tlsServerProtocols = tlsServerProtocols;\n+        this.tlsClientProtocols = tlsClientProtocols;\n+    }\n+\n+    /**\n+     * Tests that connection success with the default TLS version.\n+     */\n+    @Test\n+    public void testTlsDefaults() throws Exception {\n+        // Create certificates for use by client and server. Add server cert to client truststore and vice versa.\n+        CertStores serverCertStores = new CertStores(true, \"server\",  \"localhost\");\n+        CertStores clientCertStores = new CertStores(false, \"client\", \"localhost\");\n+\n+        Map<String, Object> sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores, tlsClientProtocols);\n+        Map<String, Object> sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores, tlsServerProtocols);\n+\n+        NioEchoServer server = NetworkTestUtils.createEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL),\n+             SecurityProtocol.SSL,\n+             new TestSecurityConfig(sslServerConfigs),\n+             null,\n+            TIME);\n+        Selector selector = createSelector(sslClientConfigs);\n+\n+        String node = \"0\";\n+        selector.connect(node, new InetSocketAddress(\"localhost\", server.port()), BUFFER_SIZE, BUFFER_SIZE);\n+\n+        if (tlsServerProtocols.contains(tlsClientProtocols.get(0))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61cd6c5e667a9ca1f1b7b94dd0590c4b8c1d0899"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzMjE0NQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r432632145", "createdAt": "2020-05-29T17:26:58Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.security.TestSecurityConfig;\n+import org.apache.kafka.common.security.auth.SecurityProtocol;\n+import org.apache.kafka.common.utils.Java;\n+import org.apache.kafka.common.utils.LogContext;\n+import org.apache.kafka.common.utils.Time;\n+import org.apache.kafka.test.TestUtils;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+/**\n+ * Tests for the SSL transport layer.\n+ * Checks different versions of the protocol usage on the server and client.\n+ */\n+@RunWith(value = Parameterized.class)\n+public class SslVersionsTransportLayerTest {\n+    private static final int BUFFER_SIZE = 4 * 1024;\n+    private static final Time TIME = Time.SYSTEM;\n+\n+    private final List<String> tlsServerProtocols;\n+    private final List<String> tlsClientProtocols;\n+\n+    @Parameterized.Parameters(name = \"tlsServerProtocol={0},tlsClientProtocol={1}\")\n+    public static Collection<Object[]> data() {\n+        List<Object[]> values = new ArrayList<>();\n+        values.add(new Object[] {Arrays.asList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.2\")});\n+        if (Java.IS_JAVA11_COMPATIBLE) {\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.2\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.2\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n+        }\n+        return values;\n+    }\n+\n+    public SslVersionsTransportLayerTest(List<String> tlsServerProtocols, List<String> tlsClientProtocols) {\n+        this.tlsServerProtocols = tlsServerProtocols;\n+        this.tlsClientProtocols = tlsClientProtocols;\n+    }\n+\n+    /**\n+     * Tests that connection success with the default TLS version.\n+     */\n+    @Test\n+    public void testTlsDefaults() throws Exception {\n+        // Create certificates for use by client and server. Add server cert to client truststore and vice versa.\n+        CertStores serverCertStores = new CertStores(true, \"server\",  \"localhost\");\n+        CertStores clientCertStores = new CertStores(false, \"client\", \"localhost\");\n+\n+        Map<String, Object> sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores, tlsClientProtocols);\n+        Map<String, Object> sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores, tlsServerProtocols);\n+\n+        NioEchoServer server = NetworkTestUtils.createEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL),\n+             SecurityProtocol.SSL,\n+             new TestSecurityConfig(sslServerConfigs),\n+             null,\n+            TIME);\n+        Selector selector = createSelector(sslClientConfigs);\n+\n+        String node = \"0\";\n+        selector.connect(node, new InetSocketAddress(\"localhost\", server.port()), BUFFER_SIZE, BUFFER_SIZE);\n+\n+        if (tlsServerProtocols.contains(tlsClientProtocols.get(0))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyNjkxNQ=="}, "originalCommit": {"oid": "61cd6c5e667a9ca1f1b7b94dd0590c4b8c1d0899"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTY0NjI0OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoyMjowMlrOGb0zCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoyNzowOVrOGclxyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyOTc3MA==", "bodyText": "Do we want server.verifyAuthenticationMetrics(0, 1); here as in the other test?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r431829770", "createdAt": "2020-05-28T13:22:02Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +623,79 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        assumeTrue(Java.IS_JAVA11_COMPATIBLE);\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTLSv1_2_ClientTLSv1_3() throws Exception {\n+        assumeTrue(Java.IS_JAVA11_COMPATIBLE);\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61cd6c5e667a9ca1f1b7b94dd0590c4b8c1d0899"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzMjI2Ng==", "bodyText": "Fixed.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r432632266", "createdAt": "2020-05-29T17:27:09Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +623,79 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTLSv1_2_FailsForTLSv1_3() throws Exception {\n+        assumeTrue(Java.IS_JAVA11_COMPATIBLE);\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        //Note, that only some ciphers works out of the box. Others requires additional configuration.\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.2 and custom cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTLSv1_2_ClientTLSv1_3() throws Exception {\n+        assumeTrue(Java.IS_JAVA11_COMPATIBLE);\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Arrays.asList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyOTc3MA=="}, "originalCommit": {"oid": "61cd6c5e667a9ca1f1b7b94dd0590c4b8c1d0899"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjEyNzM2OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNTo1OTozNVrOGc0DAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjozNjowNVrOGdRtug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NjA1MA==", "bodyText": "What is the reason for this?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r432866050", "createdAt": "2020-05-30T15:59:35Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -580,7 +581,16 @@ public void testTLSDefaults() throws Exception {\n \n     @Test\n     public void testUnsupportedCipher() throws Exception {\n-        String[] cipherSuites = ((SSLServerSocketFactory) SSLServerSocketFactory.getDefault()).getSupportedCipherSuites();\n+        String[] cipherSuites;\n+        if (Java.IS_JAVA11_COMPATIBLE) {\n+            cipherSuites = new String[] {\n+                \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a231e2f3a556be7b0cbca51b46d290e3b70ef47e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEwMjE0MA==", "bodyText": "We should use correct cipher for the server(which uses TLSv1.3 in case Java11) otherwise server metrics not updated because we never get AuthenticationException on the server-side. Instead of it, we get IOException from SSLTransportLayer:\n    private SSLEngineResult handshakeUnwrap(boolean doRead, boolean ignoreHandshakeStatus) throws IOException {\n...\n        // Throw EOF exception for failed read after processing already received data\n        // so that handshake failures are reported correctly\n        if (read == -1)\n            throw new EOFException(\"EOF during handshake, handshake status is \" + handshakeStatus);\n}", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433102140", "createdAt": "2020-06-01T08:18:43Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -580,7 +581,16 @@ public void testTLSDefaults() throws Exception {\n \n     @Test\n     public void testUnsupportedCipher() throws Exception {\n-        String[] cipherSuites = ((SSLServerSocketFactory) SSLServerSocketFactory.getDefault()).getSupportedCipherSuites();\n+        String[] cipherSuites;\n+        if (Java.IS_JAVA11_COMPATIBLE) {\n+            cipherSuites = new String[] {\n+                \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NjA1MA=="}, "originalCommit": {"oid": "a231e2f3a556be7b0cbca51b46d290e3b70ef47e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MTA3Ng==", "bodyText": "The previous logic is weird, I agree. I think the idea here is to simply pick a different supported cipher in the server vs the client. I think we can drop getSupportedCipherSuites altogether and just pick two ciphers explicitly. The cipher names would be different for TLS 1.2 versus TLS 1.3.\nAlso, we should change the following to simply use the tlsVersion field.\n            checkAuthentiationFailed(\"1\", \"TLSv1.1\");\n            server.verifyAuthenticationMetrics(0, 1);\n            checkAuthentiationFailed(\"2\", \"TLSv1\");\n            server.verifyAuthenticationMetrics(0, 2);", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433271076", "createdAt": "2020-06-01T14:34:31Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -580,7 +581,16 @@ public void testTLSDefaults() throws Exception {\n \n     @Test\n     public void testUnsupportedCipher() throws Exception {\n-        String[] cipherSuites = ((SSLServerSocketFactory) SSLServerSocketFactory.getDefault()).getSupportedCipherSuites();\n+        String[] cipherSuites;\n+        if (Java.IS_JAVA11_COMPATIBLE) {\n+            cipherSuites = new String[] {\n+                \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NjA1MA=="}, "originalCommit": {"oid": "a231e2f3a556be7b0cbca51b46d290e3b70ef47e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3NDYxMw==", "bodyText": "Also, note that we also have testUnsupportedCiphers. I wonder if we can delete this test.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433274613", "createdAt": "2020-06-01T14:40:18Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -580,7 +581,16 @@ public void testTLSDefaults() throws Exception {\n \n     @Test\n     public void testUnsupportedCipher() throws Exception {\n-        String[] cipherSuites = ((SSLServerSocketFactory) SSLServerSocketFactory.getDefault()).getSupportedCipherSuites();\n+        String[] cipherSuites;\n+        if (Java.IS_JAVA11_COMPATIBLE) {\n+            cipherSuites = new String[] {\n+                \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NjA1MA=="}, "originalCommit": {"oid": "a231e2f3a556be7b0cbca51b46d290e3b70ef47e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3OTY0OQ==", "bodyText": "Maybe we add checkAuthentiationFailed to testUnsupportedCiphers and delete this test.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433279649", "createdAt": "2020-06-01T14:48:55Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -580,7 +581,16 @@ public void testTLSDefaults() throws Exception {\n \n     @Test\n     public void testUnsupportedCipher() throws Exception {\n-        String[] cipherSuites = ((SSLServerSocketFactory) SSLServerSocketFactory.getDefault()).getSupportedCipherSuites();\n+        String[] cipherSuites;\n+        if (Java.IS_JAVA11_COMPATIBLE) {\n+            cipherSuites = new String[] {\n+                \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NjA1MA=="}, "originalCommit": {"oid": "a231e2f3a556be7b0cbca51b46d290e3b70ef47e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MjEyMg==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433352122", "createdAt": "2020-06-01T16:36:05Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -580,7 +581,16 @@ public void testTLSDefaults() throws Exception {\n \n     @Test\n     public void testUnsupportedCipher() throws Exception {\n-        String[] cipherSuites = ((SSLServerSocketFactory) SSLServerSocketFactory.getDefault()).getSupportedCipherSuites();\n+        String[] cipherSuites;\n+        if (Java.IS_JAVA11_COMPATIBLE) {\n+            cipherSuites = new String[] {\n+                \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NjA1MA=="}, "originalCommit": {"oid": "a231e2f3a556be7b0cbca51b46d290e3b70ef47e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzA0MDg3OnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/services/kafka/kafka.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMTo0ODoyOFrOGc7dAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODowODozNlrOGdCMqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4NzM5NA==", "bodyText": "Why do we need this change?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r432987394", "createdAt": "2020-05-31T21:48:28Z", "author": {"login": "ijuma"}, "path": "tests/kafkatest/services/kafka/kafka.py", "diffHunk": "@@ -354,15 +358,16 @@ def start_cmd(self, node):\n \n     def start_node(self, node, timeout_sec=60):\n         node.account.mkdirs(KafkaService.PERSISTENT_ROOT)\n+\n+        self.security_config.setup_node(node)\n+        self.security_config.setup_credentials(node, self.path, self.zk_connect_setting(), broker=True)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a231e2f3a556be7b0cbca51b46d290e3b70ef47e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5Nzg5Ng==", "bodyText": "In the constructor of SecurityConfig we don't know node java version.\nTherefore we should fix tls.version after node version known.\n    def setup_node(self, node):\n...\n        if java_version(node) <= 11 and self.properties['tls.version'] == 'TLSv1.3':\n            self.properties.update({'tls.version': 'TLSv1.2'})", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433097896", "createdAt": "2020-06-01T08:08:36Z", "author": {"login": "nizhikov"}, "path": "tests/kafkatest/services/kafka/kafka.py", "diffHunk": "@@ -354,15 +358,16 @@ def start_cmd(self, node):\n \n     def start_node(self, node, timeout_sec=60):\n         node.account.mkdirs(KafkaService.PERSISTENT_ROOT)\n+\n+        self.security_config.setup_node(node)\n+        self.security_config.setup_credentials(node, self.path, self.zk_connect_setting(), broker=True)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4NzM5NA=="}, "originalCommit": {"oid": "a231e2f3a556be7b0cbca51b46d290e3b70ef47e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzA0MjM1OnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/services/security/security_config.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMTo1MDozOVrOGc7dxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo1MjozMFrOGdB0Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4NzU5MA==", "bodyText": "For consistency, shall we use 11 here?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r432987590", "createdAt": "2020-05-31T21:50:39Z", "author": {"login": "ijuma"}, "path": "tests/kafkatest/services/security/security_config.py", "diffHunk": "@@ -259,6 +267,9 @@ def setup_node(self, node):\n         if self.has_sasl:\n             self.setup_sasl(node)\n \n+        if java_version(node) <= 9 and self.properties['tls.version'] == 'TLSv1.3':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a231e2f3a556be7b0cbca51b46d290e3b70ef47e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MTY0Mw==", "bodyText": "OK. Fixed.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433091643", "createdAt": "2020-06-01T07:52:30Z", "author": {"login": "nizhikov"}, "path": "tests/kafkatest/services/security/security_config.py", "diffHunk": "@@ -259,6 +267,9 @@ def setup_node(self, node):\n         if self.has_sasl:\n             self.setup_sasl(node)\n \n+        if java_version(node) <= 9 and self.properties['tls.version'] == 'TLSv1.3':", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4NzU5MA=="}, "originalCommit": {"oid": "a231e2f3a556be7b0cbca51b46d290e3b70ef47e"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzA0Mjk5OnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/tests/core/replication_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMTo1MTo1M1rOGc7eKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDozNjo1M1rOGdM2zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4NzY5MQ==", "bodyText": "I think we can change one of the SASL_SSL entries to include multiple TLS versions. This way, we also verify that it works for SASL_SSL without increasing test time too much.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r432987691", "createdAt": "2020-05-31T21:51:53Z", "author": {"login": "ijuma"}, "path": "tests/kafkatest/tests/core/replication_test.py", "diffHunk": "@@ -126,9 +126,11 @@ def min_cluster_size(self):\n             security_protocol=\"SASL_SSL\", client_sasl_mechanism=\"SCRAM-SHA-256\", interbroker_sasl_mechanism=\"SCRAM-SHA-512\")\n     @matrix(failure_mode=[\"clean_shutdown\", \"hard_shutdown\", \"clean_bounce\", \"hard_bounce\"],\n             security_protocol=[\"PLAINTEXT\"], broker_type=[\"leader\"], compression_type=[\"gzip\"])\n+    @matrix(failure_mode=[\"clean_shutdown\", \"hard_shutdown\", \"clean_bounce\", \"hard_bounce\"],\n+            security_protocol=[\"SSL\"], broker_type=[\"leader\"], compression_type=[\"gzip\"], tls_version=[\"TLSv1.2\", \"TLSv1.3\"])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a231e2f3a556be7b0cbca51b46d290e3b70ef47e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MjUyNA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433272524", "createdAt": "2020-06-01T14:36:53Z", "author": {"login": "nizhikov"}, "path": "tests/kafkatest/tests/core/replication_test.py", "diffHunk": "@@ -126,9 +126,11 @@ def min_cluster_size(self):\n             security_protocol=\"SASL_SSL\", client_sasl_mechanism=\"SCRAM-SHA-256\", interbroker_sasl_mechanism=\"SCRAM-SHA-512\")\n     @matrix(failure_mode=[\"clean_shutdown\", \"hard_shutdown\", \"clean_bounce\", \"hard_bounce\"],\n             security_protocol=[\"PLAINTEXT\"], broker_type=[\"leader\"], compression_type=[\"gzip\"])\n+    @matrix(failure_mode=[\"clean_shutdown\", \"hard_shutdown\", \"clean_bounce\", \"hard_bounce\"],\n+            security_protocol=[\"SSL\"], broker_type=[\"leader\"], compression_type=[\"gzip\"], tls_version=[\"TLSv1.2\", \"TLSv1.3\"])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4NzY5MQ=="}, "originalCommit": {"oid": "a231e2f3a556be7b0cbca51b46d290e3b70ef47e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzA0Mzg3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMTo1MjozOVrOGc7elA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMTo1MjozOVrOGc7elA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4Nzc5Ng==", "bodyText": "We normally don't have _ in method names. Can we remove it from here and other test methods?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r432987796", "createdAt": "2020-05-31T21:52:39Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +632,108 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTls12_FailsForTls13() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a231e2f3a556be7b0cbca51b46d290e3b70ef47e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODc2NzY3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDowMzo1MFrOGdLq4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1NTowNlrOGdNhtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI1MzA4OA==", "bodyText": "Why did we make these changes? I think what we had was good.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433253088", "createdAt": "2020-06-01T14:03:50Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -54,21 +54,16 @@\n         List<Object[]> values = new ArrayList<>();\n         values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Collections.singletonList(\"TLSv1.2\")});\n         if (Java.IS_JAVA11_COMPATIBLE) {\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Collections.singletonList(\"TLSv1.3\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Collections.singletonList(\"TLSv1.2\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Collections.singletonList(\"TLSv1.3\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Collections.singletonList(\"TLSv1.3\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Collections.singletonList(\"TLSv1.2\")});\n-            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.3\")});\n-            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.2\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n+\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.2\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17612acc5acd40f33f133df18c679ad4fb07d8f4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2NTM1Ng==", "bodyText": "Actually, test fails for a single case:\nFor now, I have no idea why this happen :)\nI need some time to dig into details and explain results.\nAnyway, I revert the test with all possible combinations(that will fail).\nvalues.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n\nThis means:\n#server config\nssl.protocol=TLSv1.3\nssl.enabled.protocols=TLSv1.3\n\n#client config\nssl.protocol=TLSv1.2\nssl.enabled.protocols=TLSv1.2,TLSv1.3", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433265356", "createdAt": "2020-06-01T14:24:50Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -54,21 +54,16 @@\n         List<Object[]> values = new ArrayList<>();\n         values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Collections.singletonList(\"TLSv1.2\")});\n         if (Java.IS_JAVA11_COMPATIBLE) {\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Collections.singletonList(\"TLSv1.3\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Collections.singletonList(\"TLSv1.2\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Collections.singletonList(\"TLSv1.3\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Collections.singletonList(\"TLSv1.3\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Collections.singletonList(\"TLSv1.2\")});\n-            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.3\")});\n-            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.2\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n+\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.2\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI1MzA4OA=="}, "originalCommit": {"oid": "17612acc5acd40f33f133df18c679ad4fb07d8f4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MzUwOQ==", "bodyText": "Interesting! Good that we added that test. :)", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433283509", "createdAt": "2020-06-01T14:55:06Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -54,21 +54,16 @@\n         List<Object[]> values = new ArrayList<>();\n         values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Collections.singletonList(\"TLSv1.2\")});\n         if (Java.IS_JAVA11_COMPATIBLE) {\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Collections.singletonList(\"TLSv1.3\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Collections.singletonList(\"TLSv1.2\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Collections.singletonList(\"TLSv1.3\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n-            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Collections.singletonList(\"TLSv1.3\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Collections.singletonList(\"TLSv1.2\")});\n-            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.3\")});\n-            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.2\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n+\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.2\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n             values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI1MzA4OA=="}, "originalCommit": {"oid": "17612acc5acd40f33f133df18c679ad4fb07d8f4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODgxNTUxOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDoxNjozOFrOGdMIrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1NDoyOFrOGdNgGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2MDcxNg==", "bodyText": "Hmm, these tests seem to take a long time. Do you know why? See:", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433260716", "createdAt": "2020-06-01T14:16:38Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +632,108 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTls12FailsForTls13() throws Exception {\n+        assumeTrue(Java.IS_JAVA11_COMPATIBLE);\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Collections.singletonList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Collections.singletonList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Collections.singletonList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Collections.singletonList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can't be made if server uses TLSv1.2 with custom cipher suite and client uses TLSv1.3.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTls12ClientTls13() throws Exception {\n+        assumeTrue(Java.IS_JAVA11_COMPATIBLE);\n+\n+        String tls12CipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+        String tls13CipherSuite = \"TLS_AES_128_GCM_SHA256\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Collections.singletonList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Collections.singletonList(tls12CipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Collections.singletonList(tls13CipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.3 cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTls13() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17612acc5acd40f33f133df18c679ad4fb07d8f4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MDc2Nw==", "bodyText": "Fixed.\nThe cause was the line\nNetworkTestUtils.waitForChannelClose(selector, node, ChannelState.State.READY);\nchanged to - NetworkTestUtils.waitForChannelReady(selector, node);\nWe shouldn't wait channel to close.\nNow, locally test run less than second.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433270767", "createdAt": "2020-06-01T14:33:59Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +632,108 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTls12FailsForTls13() throws Exception {\n+        assumeTrue(Java.IS_JAVA11_COMPATIBLE);\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Collections.singletonList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Collections.singletonList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Collections.singletonList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Collections.singletonList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can't be made if server uses TLSv1.2 with custom cipher suite and client uses TLSv1.3.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTls12ClientTls13() throws Exception {\n+        assumeTrue(Java.IS_JAVA11_COMPATIBLE);\n+\n+        String tls12CipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+        String tls13CipherSuite = \"TLS_AES_128_GCM_SHA256\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Collections.singletonList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Collections.singletonList(tls12CipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Collections.singletonList(tls13CipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.3 cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTls13() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2MDcxNg=="}, "originalCommit": {"oid": "17612acc5acd40f33f133df18c679ad4fb07d8f4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MzA5Ng==", "bodyText": "Great!", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433283096", "createdAt": "2020-06-01T14:54:28Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +632,108 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTls12FailsForTls13() throws Exception {\n+        assumeTrue(Java.IS_JAVA11_COMPATIBLE);\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);\n+\n+        String cipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Collections.singletonList(\"TLSv1.3\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Collections.singletonList(cipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Collections.singletonList(\"TLSv1.3\"));\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Collections.singletonList(cipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can't be made if server uses TLSv1.2 with custom cipher suite and client uses TLSv1.3.\n+     */\n+    @Test\n+    public void testCiphersSuiteFailForServerTls12ClientTls13() throws Exception {\n+        assumeTrue(Java.IS_JAVA11_COMPATIBLE);\n+\n+        String tls12CipherSuite = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";\n+        String tls13CipherSuite = \"TLS_AES_128_GCM_SHA256\";\n+\n+        sslServerConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n+        sslServerConfigs.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, Collections.singletonList(\"TLSv1.2\"));\n+        sslServerConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Collections.singletonList(tls12CipherSuite));\n+        server = createEchoServer(SecurityProtocol.SSL);\n+\n+        sslClientConfigs.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.3\");\n+        sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Collections.singletonList(tls13CipherSuite));\n+\n+        checkAuthentiationFailed(\"0\", \"TLSv1.3\");\n+        server.verifyAuthenticationMetrics(0, 1);\n+    }\n+\n+    /**\n+     * Tests that connections can be made with TLSv1.3 cipher suite.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTls13() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2MDcxNg=="}, "originalCommit": {"oid": "17612acc5acd40f33f133df18c679ad4fb07d8f4"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODkzMDM1OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo0OTowMVrOGdNS1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1NDo1NVrOGdNhJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3OTcwMQ==", "bodyText": "These two lines are unused. Similar for other tests.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433279701", "createdAt": "2020-06-01T14:49:01Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +632,108 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTls12FailsForTls13() throws Exception {\n+        assumeTrue(Java.IS_JAVA11_COMPATIBLE);\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17612acc5acd40f33f133df18c679ad4fb07d8f4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MzM2Nw==", "bodyText": "Fixed.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433283367", "createdAt": "2020-06-01T14:54:55Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +632,108 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTls12FailsForTls13() throws Exception {\n+        assumeTrue(Java.IS_JAVA11_COMPATIBLE);\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);\n+        context.init(null, null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3OTcwMQ=="}, "originalCommit": {"oid": "17612acc5acd40f33f133df18c679ad4fb07d8f4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODk0OTIxOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1Mzo0OVrOGdNelA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjozNToxOFrOGdRsBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MjcwOA==", "bodyText": "I had not noticed that this test is parameterized on tlsProtocol. Maybe we should move these tests to a separate class? It's a bit weird to run them twice and ignore the parameterized value.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433282708", "createdAt": "2020-06-01T14:53:49Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +632,108 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTls12FailsForTls13() throws Exception {\n+        assumeTrue(Java.IS_JAVA11_COMPATIBLE);\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17612acc5acd40f33f133df18c679ad4fb07d8f4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzOTE4MA==", "bodyText": "Moved.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433339180", "createdAt": "2020-06-01T16:12:52Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +632,108 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTls12FailsForTls13() throws Exception {\n+        assumeTrue(Java.IS_JAVA11_COMPATIBLE);\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MjcwOA=="}, "originalCommit": {"oid": "17612acc5acd40f33f133df18c679ad4fb07d8f4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MTY4NA==", "bodyText": "Done. See SslTransportTls12Tls13Test", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433351684", "createdAt": "2020-06-01T16:35:18Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -622,6 +632,108 @@ public void testUnsupportedTLSVersion() throws Exception {\n         server.verifyAuthenticationMetrics(0, 1);\n     }\n \n+    /**\n+     * Tests that connections fails if TLSv1.3 enabled but cipher suite suitable only for TLSv1.2 used.\n+     */\n+    @Test\n+    public void testCiphersSuiteForTls12FailsForTls13() throws Exception {\n+        assumeTrue(Java.IS_JAVA11_COMPATIBLE);\n+\n+        SSLContext context = SSLContext.getInstance(tlsProtocol);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MjcwOA=="}, "originalCommit": {"oid": "17612acc5acd40f33f133df18c679ad4fb07d8f4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTc2MDU2OnYy", "diffSide": "LEFT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODozMTo0MVrOGdVcgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo1NTo1NlrOGdjDjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMzI1MA==", "bodyText": "Shall we keep the authentication metrics check?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433413250", "createdAt": "2020-06-01T18:31:41Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -732,11 +614,8 @@ public void testUnsupportedCiphers() throws Exception {\n \n         sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuites[1]));\n         createSelector(sslClientConfigs);\n-        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n-        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n \n-        NetworkTestUtils.waitForChannelClose(selector, node, ChannelState.State.AUTHENTICATION_FAILED);\n-        server.verifyAuthenticationMetrics(0, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e6c445cf9ef9f7d229c90bf3c6debdf19aa96bd"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzNjIzNg==", "bodyText": "Fixed.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433636236", "createdAt": "2020-06-02T05:55:56Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -732,11 +614,8 @@ public void testUnsupportedCiphers() throws Exception {\n \n         sslClientConfigs.put(SslConfigs.SSL_CIPHER_SUITES_CONFIG, Arrays.asList(cipherSuites[1]));\n         createSelector(sslClientConfigs);\n-        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n-        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n \n-        NetworkTestUtils.waitForChannelClose(selector, node, ChannelState.State.AUTHENTICATION_FAILED);\n-        server.verifyAuthenticationMetrics(0, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMzI1MA=="}, "originalCommit": {"oid": "3e6c445cf9ef9f7d229c90bf3c6debdf19aa96bd"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjc1Njg1OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo1MzowNlrOGdyrrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDowMjoxMFrOGdzI8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5MjI2OQ==", "bodyText": "Should this be called createClientSelector?", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433892269", "createdAt": "2020-06-02T13:53:06Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -117,24 +123,51 @@ public void testTlsDefaults() throws Exception {\n             server.waitForMetric(\"response\", 1);\n         } else {\n             NetworkTestUtils.waitForChannelClose(selector, node, ChannelState.State.AUTHENTICATION_FAILED);\n+            server.verifyAuthenticationMetrics(0, 1);\n         }\n     }\n \n+    /**\n+     * <p>\n+     * The explanation of this check in the structure of the ClientHello SSL message.\n+     * Please, take a look at the <a href=\"https://docs.oracle.com/en/java/javase/11/security/java-secure-socket-extension-jsse-reference-guide.html#GUID-4D421910-C36D-40A2-8BA2-7D42CCBED3C6\">Guide</a>,\n+     * \"Send ClientHello Message\" section.\n+     * <p>\n+     * > Client version: For TLS 1.3, this has a fixed value, TLSv1.2; TLS 1.3 uses the extension supported_versions and not this field to negotiate protocol version\n+     * ...\n+     * > supported_versions: Lists which versions of TLS the client supports. In particular, if the client\n+     * > requests TLS 1.3, then the client version field has the value TLSv1.2 and this extension\n+     * > contains the value TLSv1.3; if the client requests TLS 1.2, then the client version field has the\n+     * > value TLSv1.2 and this extension either doesn\u2019t exist or contains the value TLSv1.2 but not the value TLSv1.3.\n+     * <p>\n+     *\n+     * This mean that TLSv1.3 client can fallback to TLSv1.2 but TLSv1.2 client can't change protocol to TLSv1.3.\n+     *\n+     * @param serverProtocols Server protocols.\n+     * @param clientProtocols Client protocols.\n+     * @return {@code True} if client should be able to connect to the server.\n+     */\n+    private boolean isCompatible(List<String> serverProtocols, List<String> clientProtocols) {\n+        return serverProtocols.contains(clientProtocols.get(0)) ||\n+            (clientProtocols.get(0).equals(\"TLSv1.3\") && clientProtocols.contains(\"TLSv1.2\"));\n+    }\n+\n     private static Map<String, Object> getTrustingConfig(CertStores certStores, CertStores peerCertStores, List<String> tlsProtocols) {\n         Map<String, Object> configs = certStores.getTrustingConfig(peerCertStores);\n         configs.putAll(sslConfig(tlsProtocols));\n         return configs;\n     }\n \n-    private static Map<String, Object> sslConfig(List<String> tlsServerProtocols) {\n+    private static Map<String, Object> sslConfig(List<String> tlsProtocols) {\n         Map<String, Object> sslConfig = new HashMap<>();\n-        sslConfig.put(SslConfigs.SSL_PROTOCOL_CONFIG, tlsServerProtocols.get(0));\n-        sslConfig.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, tlsServerProtocols);\n+        sslConfig.put(SslConfigs.SSL_PROTOCOL_CONFIG, tlsProtocols.get(0));\n+        sslConfig.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, tlsProtocols);\n         return sslConfig;\n     }\n \n     private Selector createSelector(Map<String, Object> sslClientConfigs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14bf85aab93eabd5eb5045315edf104079b4d353"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5OTc2MQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433899761", "createdAt": "2020-06-02T14:02:10Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -117,24 +123,51 @@ public void testTlsDefaults() throws Exception {\n             server.waitForMetric(\"response\", 1);\n         } else {\n             NetworkTestUtils.waitForChannelClose(selector, node, ChannelState.State.AUTHENTICATION_FAILED);\n+            server.verifyAuthenticationMetrics(0, 1);\n         }\n     }\n \n+    /**\n+     * <p>\n+     * The explanation of this check in the structure of the ClientHello SSL message.\n+     * Please, take a look at the <a href=\"https://docs.oracle.com/en/java/javase/11/security/java-secure-socket-extension-jsse-reference-guide.html#GUID-4D421910-C36D-40A2-8BA2-7D42CCBED3C6\">Guide</a>,\n+     * \"Send ClientHello Message\" section.\n+     * <p>\n+     * > Client version: For TLS 1.3, this has a fixed value, TLSv1.2; TLS 1.3 uses the extension supported_versions and not this field to negotiate protocol version\n+     * ...\n+     * > supported_versions: Lists which versions of TLS the client supports. In particular, if the client\n+     * > requests TLS 1.3, then the client version field has the value TLSv1.2 and this extension\n+     * > contains the value TLSv1.3; if the client requests TLS 1.2, then the client version field has the\n+     * > value TLSv1.2 and this extension either doesn\u2019t exist or contains the value TLSv1.2 but not the value TLSv1.3.\n+     * <p>\n+     *\n+     * This mean that TLSv1.3 client can fallback to TLSv1.2 but TLSv1.2 client can't change protocol to TLSv1.3.\n+     *\n+     * @param serverProtocols Server protocols.\n+     * @param clientProtocols Client protocols.\n+     * @return {@code True} if client should be able to connect to the server.\n+     */\n+    private boolean isCompatible(List<String> serverProtocols, List<String> clientProtocols) {\n+        return serverProtocols.contains(clientProtocols.get(0)) ||\n+            (clientProtocols.get(0).equals(\"TLSv1.3\") && clientProtocols.contains(\"TLSv1.2\"));\n+    }\n+\n     private static Map<String, Object> getTrustingConfig(CertStores certStores, CertStores peerCertStores, List<String> tlsProtocols) {\n         Map<String, Object> configs = certStores.getTrustingConfig(peerCertStores);\n         configs.putAll(sslConfig(tlsProtocols));\n         return configs;\n     }\n \n-    private static Map<String, Object> sslConfig(List<String> tlsServerProtocols) {\n+    private static Map<String, Object> sslConfig(List<String> tlsProtocols) {\n         Map<String, Object> sslConfig = new HashMap<>();\n-        sslConfig.put(SslConfigs.SSL_PROTOCOL_CONFIG, tlsServerProtocols.get(0));\n-        sslConfig.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, tlsServerProtocols);\n+        sslConfig.put(SslConfigs.SSL_PROTOCOL_CONFIG, tlsProtocols.get(0));\n+        sslConfig.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, tlsProtocols);\n         return sslConfig;\n     }\n \n     private Selector createSelector(Map<String, Object> sslClientConfigs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5MjI2OQ=="}, "originalCommit": {"oid": "14bf85aab93eabd5eb5045315edf104079b4d353"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjc5ODE4OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDowMToxNlrOGdzFmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDowMToxNlrOGdzFmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5ODkwNw==", "bodyText": "Nit: True should be lower case.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433898907", "createdAt": "2020-06-02T14:01:16Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.security.TestSecurityConfig;\n+import org.apache.kafka.common.security.auth.SecurityProtocol;\n+import org.apache.kafka.common.utils.Java;\n+import org.apache.kafka.common.utils.LogContext;\n+import org.apache.kafka.common.utils.Time;\n+import org.apache.kafka.test.TestUtils;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+/**\n+ * Tests for the SSL transport layer.\n+ * Checks different versions of the protocol usage on the server and client.\n+ */\n+@RunWith(value = Parameterized.class)\n+public class SslVersionsTransportLayerTest {\n+    private static final int BUFFER_SIZE = 4 * 1024;\n+    private static final Time TIME = Time.SYSTEM;\n+\n+    private final List<String> serverProtocols;\n+    private final List<String> clientProtocols;\n+\n+    @Parameterized.Parameters(name = \"tlsServerProtocol={0},tlsClientProtocol={1}\")\n+    public static Collection<Object[]> data() {\n+        List<Object[]> values = new ArrayList<>();\n+\n+        values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Collections.singletonList(\"TLSv1.2\")});\n+\n+        if (Java.IS_JAVA11_COMPATIBLE) {\n+            values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Collections.singletonList(\"TLSv1.3\")});\n+            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Collections.singletonList(\"TLSv1.2\")});\n+            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Collections.singletonList(\"TLSv1.3\")});\n+            values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n+            values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n+            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n+            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.2\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Collections.singletonList(\"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Collections.singletonList(\"TLSv1.2\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n+        }\n+        return values;\n+    }\n+\n+    /**\n+     * Be aware that you can turn on debug mode for a javax.net.ssl library with the line {@code System.setProperty(\"javax.net.debug\", \"ssl:handshake\");}\n+     * @param serverProtocols Server protocols.\n+     * @param clientProtocols Client protocols.\n+     */\n+    public SslVersionsTransportLayerTest(List<String> serverProtocols, List<String> clientProtocols) {\n+        this.serverProtocols = serverProtocols;\n+        this.clientProtocols = clientProtocols;\n+    }\n+\n+    /**\n+     * Tests that connection success with the default TLS version.\n+     */\n+    @Test\n+    public void testTlsDefaults() throws Exception {\n+        // Create certificates for use by client and server. Add server cert to client truststore and vice versa.\n+        CertStores serverCertStores = new CertStores(true, \"server\",  \"localhost\");\n+        CertStores clientCertStores = new CertStores(false, \"client\", \"localhost\");\n+\n+        Map<String, Object> sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores, clientProtocols);\n+        Map<String, Object> sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores, serverProtocols);\n+\n+        NioEchoServer server = NetworkTestUtils.createEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL),\n+            SecurityProtocol.SSL,\n+            new TestSecurityConfig(sslServerConfigs),\n+            null,\n+            TIME);\n+        Selector selector = createSelector(sslClientConfigs);\n+\n+        String node = \"0\";\n+        selector.connect(node, new InetSocketAddress(\"localhost\", server.port()), BUFFER_SIZE, BUFFER_SIZE);\n+\n+        if (isCompatible(serverProtocols, clientProtocols)) {\n+            NetworkTestUtils.waitForChannelReady(selector, node);\n+\n+            int msgSz = 1024 * 1024;\n+            String message = TestUtils.randomString(msgSz);\n+            selector.send(new NetworkSend(node, ByteBuffer.wrap(message.getBytes())));\n+            while (selector.completedReceives().isEmpty()) {\n+                selector.poll(100L);\n+            }\n+            int totalBytes = msgSz + 4; // including 4-byte size\n+            server.waitForMetric(\"incoming-byte\", totalBytes);\n+            server.waitForMetric(\"outgoing-byte\", totalBytes);\n+            server.waitForMetric(\"request\", 1);\n+            server.waitForMetric(\"response\", 1);\n+        } else {\n+            NetworkTestUtils.waitForChannelClose(selector, node, ChannelState.State.AUTHENTICATION_FAILED);\n+            server.verifyAuthenticationMetrics(0, 1);\n+        }\n+    }\n+\n+    /**\n+     * <p>\n+     * The explanation of this check in the structure of the ClientHello SSL message.\n+     * Please, take a look at the <a href=\"https://docs.oracle.com/en/java/javase/11/security/java-secure-socket-extension-jsse-reference-guide.html#GUID-4D421910-C36D-40A2-8BA2-7D42CCBED3C6\">Guide</a>,\n+     * \"Send ClientHello Message\" section.\n+     * <p>\n+     * > Client version: For TLS 1.3, this has a fixed value, TLSv1.2; TLS 1.3 uses the extension supported_versions and not this field to negotiate protocol version\n+     * ...\n+     * > supported_versions: Lists which versions of TLS the client supports. In particular, if the client\n+     * > requests TLS 1.3, then the client version field has the value TLSv1.2 and this extension\n+     * > contains the value TLSv1.3; if the client requests TLS 1.2, then the client version field has the\n+     * > value TLSv1.2 and this extension either doesn\u2019t exist or contains the value TLSv1.2 but not the value TLSv1.3.\n+     * <p>\n+     *\n+     * This mean that TLSv1.3 client can fallback to TLSv1.2 but TLSv1.2 client can't change protocol to TLSv1.3.\n+     *\n+     * @param serverProtocols Server protocols.\n+     * @param clientProtocols Client protocols.\n+     * @return {@code True} if client should be able to connect to the server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67f0ef90d9f9e687b0f9792d043cb3819617d85c"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjgyMzMwOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDowNToyNFrOGdzV-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDowNToyNFrOGdzV-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkwMzA5OQ==", "bodyText": "Maybe we should document that serverProtocols and clientProtocols are expected to be non empty as the code below assumes it.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433903099", "createdAt": "2020-06-02T14:05:24Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.security.TestSecurityConfig;\n+import org.apache.kafka.common.security.auth.SecurityProtocol;\n+import org.apache.kafka.common.utils.Java;\n+import org.apache.kafka.common.utils.LogContext;\n+import org.apache.kafka.common.utils.Time;\n+import org.apache.kafka.test.TestUtils;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+/**\n+ * Tests for the SSL transport layer.\n+ * Checks different versions of the protocol usage on the server and client.\n+ */\n+@RunWith(value = Parameterized.class)\n+public class SslVersionsTransportLayerTest {\n+    private static final int BUFFER_SIZE = 4 * 1024;\n+    private static final Time TIME = Time.SYSTEM;\n+\n+    private final List<String> serverProtocols;\n+    private final List<String> clientProtocols;\n+\n+    @Parameterized.Parameters(name = \"tlsServerProtocol={0},tlsClientProtocol={1}\")\n+    public static Collection<Object[]> data() {\n+        List<Object[]> values = new ArrayList<>();\n+\n+        values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Collections.singletonList(\"TLSv1.2\")});\n+\n+        if (Java.IS_JAVA11_COMPATIBLE) {\n+            values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Collections.singletonList(\"TLSv1.3\")});\n+            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Collections.singletonList(\"TLSv1.2\")});\n+            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Collections.singletonList(\"TLSv1.3\")});\n+            values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n+            values.add(new Object[] {Collections.singletonList(\"TLSv1.2\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n+            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n+            values.add(new Object[] {Collections.singletonList(\"TLSv1.3\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Collections.singletonList(\"TLSv1.2\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.3\", \"TLSv1.2\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Collections.singletonList(\"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Collections.singletonList(\"TLSv1.2\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.2\", \"TLSv1.3\")});\n+            values.add(new Object[] {Arrays.asList(\"TLSv1.2\", \"TLSv1.3\"), Arrays.asList(\"TLSv1.3\", \"TLSv1.2\")});\n+        }\n+        return values;\n+    }\n+\n+    /**\n+     * Be aware that you can turn on debug mode for a javax.net.ssl library with the line {@code System.setProperty(\"javax.net.debug\", \"ssl:handshake\");}\n+     * @param serverProtocols Server protocols.\n+     * @param clientProtocols Client protocols.\n+     */\n+    public SslVersionsTransportLayerTest(List<String> serverProtocols, List<String> clientProtocols) {\n+        this.serverProtocols = serverProtocols;\n+        this.clientProtocols = clientProtocols;\n+    }\n+\n+    /**\n+     * Tests that connection success with the default TLS version.\n+     */\n+    @Test\n+    public void testTlsDefaults() throws Exception {\n+        // Create certificates for use by client and server. Add server cert to client truststore and vice versa.\n+        CertStores serverCertStores = new CertStores(true, \"server\",  \"localhost\");\n+        CertStores clientCertStores = new CertStores(false, \"client\", \"localhost\");\n+\n+        Map<String, Object> sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores, clientProtocols);\n+        Map<String, Object> sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores, serverProtocols);\n+\n+        NioEchoServer server = NetworkTestUtils.createEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL),\n+            SecurityProtocol.SSL,\n+            new TestSecurityConfig(sslServerConfigs),\n+            null,\n+            TIME);\n+        Selector selector = createSelector(sslClientConfigs);\n+\n+        String node = \"0\";\n+        selector.connect(node, new InetSocketAddress(\"localhost\", server.port()), BUFFER_SIZE, BUFFER_SIZE);\n+\n+        if (isCompatible(serverProtocols, clientProtocols)) {\n+            NetworkTestUtils.waitForChannelReady(selector, node);\n+\n+            int msgSz = 1024 * 1024;\n+            String message = TestUtils.randomString(msgSz);\n+            selector.send(new NetworkSend(node, ByteBuffer.wrap(message.getBytes())));\n+            while (selector.completedReceives().isEmpty()) {\n+                selector.poll(100L);\n+            }\n+            int totalBytes = msgSz + 4; // including 4-byte size\n+            server.waitForMetric(\"incoming-byte\", totalBytes);\n+            server.waitForMetric(\"outgoing-byte\", totalBytes);\n+            server.waitForMetric(\"request\", 1);\n+            server.waitForMetric(\"response\", 1);\n+        } else {\n+            NetworkTestUtils.waitForChannelClose(selector, node, ChannelState.State.AUTHENTICATION_FAILED);\n+            server.verifyAuthenticationMetrics(0, 1);\n+        }\n+    }\n+\n+    /**\n+     * <p>\n+     * The explanation of this check in the structure of the ClientHello SSL message.\n+     * Please, take a look at the <a href=\"https://docs.oracle.com/en/java/javase/11/security/java-secure-socket-extension-jsse-reference-guide.html#GUID-4D421910-C36D-40A2-8BA2-7D42CCBED3C6\">Guide</a>,\n+     * \"Send ClientHello Message\" section.\n+     * <p>\n+     * > Client version: For TLS 1.3, this has a fixed value, TLSv1.2; TLS 1.3 uses the extension supported_versions and not this field to negotiate protocol version\n+     * ...\n+     * > supported_versions: Lists which versions of TLS the client supports. In particular, if the client\n+     * > requests TLS 1.3, then the client version field has the value TLSv1.2 and this extension\n+     * > contains the value TLSv1.3; if the client requests TLS 1.2, then the client version field has the\n+     * > value TLSv1.2 and this extension either doesn\u2019t exist or contains the value TLSv1.2 but not the value TLSv1.3.\n+     * <p>\n+     *\n+     * This mean that TLSv1.3 client can fallback to TLSv1.2 but TLSv1.2 client can't change protocol to TLSv1.3.\n+     *\n+     * @param serverProtocols Server protocols.\n+     * @param clientProtocols Client protocols.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67f0ef90d9f9e687b0f9792d043cb3819617d85c"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjg0Mzk0OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDowOToxNlrOGdzjZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoyNzo0N1rOGd0ZXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkwNjUzMw==", "bodyText": "Would the second check if clearer if it was like:\nclientProtocols.get(0).equals(\"TLSv1.3\") && !Collections.disjoint(tlsServerProtocols, tlsClientProtocols)\nWe're basically saying that we check all the client protocols against the broker protocols if the client uses TLS 1.3. The first condition checks the case where the first client protocol is supported by the server (TLS 1.2).", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433906533", "createdAt": "2020-06-02T14:09:16Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -117,24 +123,51 @@ public void testTlsDefaults() throws Exception {\n             server.waitForMetric(\"response\", 1);\n         } else {\n             NetworkTestUtils.waitForChannelClose(selector, node, ChannelState.State.AUTHENTICATION_FAILED);\n+            server.verifyAuthenticationMetrics(0, 1);\n         }\n     }\n \n+    /**\n+     * <p>\n+     * The explanation of this check in the structure of the ClientHello SSL message.\n+     * Please, take a look at the <a href=\"https://docs.oracle.com/en/java/javase/11/security/java-secure-socket-extension-jsse-reference-guide.html#GUID-4D421910-C36D-40A2-8BA2-7D42CCBED3C6\">Guide</a>,\n+     * \"Send ClientHello Message\" section.\n+     * <p>\n+     * > Client version: For TLS 1.3, this has a fixed value, TLSv1.2; TLS 1.3 uses the extension supported_versions and not this field to negotiate protocol version\n+     * ...\n+     * > supported_versions: Lists which versions of TLS the client supports. In particular, if the client\n+     * > requests TLS 1.3, then the client version field has the value TLSv1.2 and this extension\n+     * > contains the value TLSv1.3; if the client requests TLS 1.2, then the client version field has the\n+     * > value TLSv1.2 and this extension either doesn\u2019t exist or contains the value TLSv1.2 but not the value TLSv1.3.\n+     * <p>\n+     *\n+     * This mean that TLSv1.3 client can fallback to TLSv1.2 but TLSv1.2 client can't change protocol to TLSv1.3.\n+     *\n+     * @param serverProtocols Server protocols.\n+     * @param clientProtocols Client protocols.\n+     * @return {@code True} if client should be able to connect to the server.\n+     */\n+    private boolean isCompatible(List<String> serverProtocols, List<String> clientProtocols) {\n+        return serverProtocols.contains(clientProtocols.get(0)) ||\n+            (clientProtocols.get(0).equals(\"TLSv1.3\") && clientProtocols.contains(\"TLSv1.2\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14bf85aab93eabd5eb5045315edf104079b4d353"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkyMDM1MA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433920350", "createdAt": "2020-06-02T14:27:47Z", "author": {"login": "nizhikov"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslVersionsTransportLayerTest.java", "diffHunk": "@@ -117,24 +123,51 @@ public void testTlsDefaults() throws Exception {\n             server.waitForMetric(\"response\", 1);\n         } else {\n             NetworkTestUtils.waitForChannelClose(selector, node, ChannelState.State.AUTHENTICATION_FAILED);\n+            server.verifyAuthenticationMetrics(0, 1);\n         }\n     }\n \n+    /**\n+     * <p>\n+     * The explanation of this check in the structure of the ClientHello SSL message.\n+     * Please, take a look at the <a href=\"https://docs.oracle.com/en/java/javase/11/security/java-secure-socket-extension-jsse-reference-guide.html#GUID-4D421910-C36D-40A2-8BA2-7D42CCBED3C6\">Guide</a>,\n+     * \"Send ClientHello Message\" section.\n+     * <p>\n+     * > Client version: For TLS 1.3, this has a fixed value, TLSv1.2; TLS 1.3 uses the extension supported_versions and not this field to negotiate protocol version\n+     * ...\n+     * > supported_versions: Lists which versions of TLS the client supports. In particular, if the client\n+     * > requests TLS 1.3, then the client version field has the value TLSv1.2 and this extension\n+     * > contains the value TLSv1.3; if the client requests TLS 1.2, then the client version field has the\n+     * > value TLSv1.2 and this extension either doesn\u2019t exist or contains the value TLSv1.2 but not the value TLSv1.3.\n+     * <p>\n+     *\n+     * This mean that TLSv1.3 client can fallback to TLSv1.2 but TLSv1.2 client can't change protocol to TLSv1.3.\n+     *\n+     * @param serverProtocols Server protocols.\n+     * @param clientProtocols Client protocols.\n+     * @return {@code True} if client should be able to connect to the server.\n+     */\n+    private boolean isCompatible(List<String> serverProtocols, List<String> clientProtocols) {\n+        return serverProtocols.contains(clientProtocols.get(0)) ||\n+            (clientProtocols.get(0).equals(\"TLSv1.3\") && clientProtocols.contains(\"TLSv1.2\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkwNjUzMw=="}, "originalCommit": {"oid": "14bf85aab93eabd5eb5045315edf104079b4d353"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzI5OTg5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo0OToyN1rOGd4JxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo0OToyN1rOGd4JxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk4MTg5Mg==", "bodyText": "How about:\n\"The SSL protocol used to generate the SSLContext. \"\n            + \"The default is TLSv1.3 when running with Java 11 or newer, TLSv1.2 otherwise. \"\n            + \"This value should be fine for most use cases. \"\n            + \"Allowed values in recent JVMs are TLSv1.2 and TLSv1.3. TLS, TLSv1.1, SSL, SSLv2 and SSLv3 \"\n            + \"may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities. \";\n            + \"With the default value for this config and ssl.enabled.protocols, clients will downgrade to TLSv1.2 if \"\n            + \"the server does not support TLSv1.3. If this config is set to TLSv1.2, clients will not use TLSv1.3 even \"\n            + \"if it is one of the values in ssl.enabled.protocols and the server only supports TLSv1.3.\"", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433981892", "createdAt": "2020-06-02T15:49:27Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java", "diffHunk": "@@ -49,11 +50,12 @@\n \n     public static final String SSL_PROTOCOL_CONFIG = \"ssl.protocol\";\n     public static final String SSL_PROTOCOL_DOC = \"The SSL protocol used to generate the SSLContext. \"\n-            + \"Default setting is TLSv1.2, which is fine for most cases. \"\n+            + \"Default setting is TLSv1.2(TLSv1.3 for modern JVM), which is fine for most cases. \"\n             + \"Allowed values in recent JVMs are TLSv1.2 and TLSv1.3. TLS, TLSv1.1, SSL, SSLv2 and SSLv3 \"\n-            + \"may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.\";\n+            + \"may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.\"\n+            + \"Please, note, TLSv1.2 clients can't connect to the servers with TLSv1.3 only even if ssl.enabled.protocols contains TLSv1.3\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a82441c99dbd97ce820fed4891b2b237a3f2ea9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzMzMzQyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo1NDo0OVrOGd4fOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo1NDo0OVrOGd4fOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk4NzM4NA==", "bodyText": "How about:\nThe list of protocols enabled for SSL connections. The default is 'TLSv1.2,TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. With the default value for Java 11, clients and servers will prefer TLSv1.3 if both support it and fallback to TLSv1.2 otherwise (assuming both support at least TLSv1.2). This default should be fine for most cases. Also see the `ssl.protocol` config documentation.", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433987384", "createdAt": "2020-06-02T15:54:49Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java", "diffHunk": "@@ -64,7 +66,17 @@\n \n     public static final String SSL_ENABLED_PROTOCOLS_CONFIG = \"ssl.enabled.protocols\";\n     public static final String SSL_ENABLED_PROTOCOLS_DOC = \"The list of protocols enabled for SSL connections.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a82441c99dbd97ce820fed4891b2b237a3f2ea9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzM1NDc3OnYy", "diffSide": "RIGHT", "path": "docs/upgrade.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo1ODowOVrOGd4sag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo1ODowOVrOGd4sag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk5MDc2Mg==", "bodyText": "One more nit: \"TLSv1.3 has been enabled by default for Java 11 or newer. The client and server will negotiate TLSv1.3 if both support it and fallback to TLSv1.2 otherwise. See...", "url": "https://github.com/apache/kafka/pull/8695#discussion_r433990762", "createdAt": "2020-06-02T15:58:09Z", "author": {"login": "ijuma"}, "path": "docs/upgrade.html", "diffHunk": "@@ -18,6 +18,10 @@\n <script><!--#include virtual=\"js/templateData.js\" --></script>\n \n <script id=\"upgrade-template\" type=\"text/x-handlebars-template\">\n+<h5><a id=\"upgrade_270_notable\" href=\"#upgrade_270_notable\">Notable changes in 2.7.0</a></h5>\n+<ul>\n+    <li>TLSv1.3 have been enabled by default for JDK11+. See <a href=\"https://cwiki.apache.org/confluence/display/KAFKA/KIP-573%3A+Enable+TLSv1.3+by+default\">KIP-573</a> for full details.</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a82441c99dbd97ce820fed4891b2b237a3f2ea9"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2681, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}