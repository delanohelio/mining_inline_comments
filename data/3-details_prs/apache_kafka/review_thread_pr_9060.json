{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NDY4NzQ5", "number": 9060, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxNjowN1rOERTDag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0NzoyNFrOEkI-aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTczNDE4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxNjowN1rOG17tLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxNjowN1rOG17tLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNTkzMw==", "bodyText": "Minor side fix: fetchEndOffset can never throw TimeoutException because it catches all RuntimeException and convert them into StreamsException already", "url": "https://github.com/apache/kafka/pull/9060#discussion_r459205933", "createdAt": "2020-07-23T04:16:07Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -1249,11 +1248,7 @@ public void cleanUp() {\n \n         log.debug(\"Current changelog positions: {}\", allChangelogPositions);\n         final Map<TopicPartition, ListOffsetsResultInfo> allEndOffsets;\n-        try {\n-            allEndOffsets = fetchEndOffsets(allPartitions, adminClient);\n-        } catch (final TimeoutException e) {\n-            throw new StreamsException(\"Timed out obtaining end offsets from kafka\", e);\n-        }\n+        allEndOffsets = fetchEndOffsets(allPartitions, adminClient);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTczNTM4OnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxNjo0NlrOG17tzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxNjo0NlrOG17tzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNjA5Mg==", "bodyText": "first TODO removed", "url": "https://github.com/apache/kafka/pull/9060#discussion_r459206092", "createdAt": "2020-07-23T04:16:46Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -46,33 +49,38 @@\n         \"Please report at https://issues.apache.org/jira/projects/KAFKA or dev-mailing list (https://kafka.apache.org/contact).\";\n \n     private final Logger log;\n-    private final long windowChangeLogAdditionalRetention;\n-    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    private final short replicationFactor;\n+    private final Time time;\n     private final Admin adminClient;\n \n-    private final int retries;\n+    private final short replicationFactor;\n+    private final long windowChangeLogAdditionalRetention;\n     private final long retryBackOffMs;\n+    private final long retryTimeoutMs;\n+\n+    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    @SuppressWarnings(\"deprecation\") // TODO: remove in follow up PR when `RETRIES` is removed", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTczNjAwOnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxNzowNVrOG17uGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxNzowNVrOG17uGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNjE2OQ==", "bodyText": "Second TODO removed", "url": "https://github.com/apache/kafka/pull/9060#discussion_r459206169", "createdAt": "2020-07-23T04:17:05Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java", "diffHunk": "@@ -159,7 +159,6 @@ public void testGetGroupInstanceIdConfigs() {\n         assertNull(returnedProps.get(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG));\n     }\n \n-    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTczNjk4OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxNzo1MVrOG17uqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxNzo1MVrOG17uqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNjMxNQ==", "bodyText": "Third TODO removed -- as we don't pass retires and retry.backoff.ms via admin config any longer, this test is not needed any more", "url": "https://github.com/apache/kafka/pull/9060#discussion_r459206315", "createdAt": "2020-07-23T04:17:51Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java", "diffHunk": "@@ -186,25 +183,9 @@ public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n         );\n         assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n         assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n-        assertNull(returnedProps.get(StreamsConfig.RETRIES_CONFIG));\n-        assertEquals(5, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n         assertEquals(100, returnedProps.get(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG)));\n     }\n \n-    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTczODI0OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopicManagerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxODo1MlrOG17vZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxODo1MlrOG17vZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNjUwMw==", "bodyText": "Fourth TODO removed", "url": "https://github.com/apache/kafka/pull/9060#discussion_r459206503", "createdAt": "2020-07-23T04:18:52Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopicManagerTest.java", "diffHunk": "@@ -71,21 +73,20 @@\n     private final String topic2 = \"test_topic_2\";\n     private final String topic3 = \"test_topic_3\";\n     private final List<Node> singleReplica = Collections.singletonList(broker1);\n-    private final int numRetries = 1;\n \n     private String threadName;\n \n     private MockAdminClient mockAdminClient;\n     private InternalTopicManager internalTopicManager;\n \n-    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc0MDE0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxOTo1NVrOG17wZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoxODoyOFrOG7Pmeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNjc1OQ==", "bodyText": "@vvcephei this is an open question\n\\cc @guozhangwang", "url": "https://github.com/apache/kafka/pull/9060#discussion_r459206759", "createdAt": "2020-07-23T04:19:55Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -154,27 +164,34 @@ public InternalTopicManager(final Admin adminClient, final StreamsConfig streams\n                                 \"Error message was: {}\", topicName, cause.toString());\n                             throw new StreamsException(String.format(\"Could not create topic %s.\", topicName), cause);\n                         }\n+                    } catch (final TimeoutException retryableException) {\n+                        log.error(\"Creating topic {} timed out.\\n\" +\n+                            \"Error message was: {}\", topicName, retryableException.toString());\n                     }\n                 }\n             }\n \n \n             if (!topicsNotReady.isEmpty()) {\n-                log.info(\"Topics {} can not be made ready with {} retries left\", topicsNotReady, remainingRetries);\n+                currentWallClockMs = time.milliseconds();\n \n-                Utils.sleep(retryBackOffMs);\n+                if (currentWallClockMs >= deadlineMs) {\n+                    final String timeoutError = String.format(\"Could not create topics within %d milliseconds. \" +\n+                        \"This can happen if the Kafka cluster is temporary not available.\", retryTimeoutMs);\n+                    log.error(timeoutError);\n+                    // TODO: should we throw a different exception instead and catch it, to return a `INCOMPLETE_SOURCE_TOPIC_METADATA` error code", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwMDIwMg==", "bodyText": "I'm thinking that moving forward we should try to not create internal topics during rebalance but try pre-create in starting, but for now assuming this is still the case I think letting the whole application to die is fine --- i.e. treat it the same as source topics. Hence I'm leaning towards encoding INCOMPLETE_SOURCE_TOPIC_METADATA to shutdown the whole app, across all clients.", "url": "https://github.com/apache/kafka/pull/9060#discussion_r459800202", "createdAt": "2020-07-24T00:33:43Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -154,27 +164,34 @@ public InternalTopicManager(final Admin adminClient, final StreamsConfig streams\n                                 \"Error message was: {}\", topicName, cause.toString());\n                             throw new StreamsException(String.format(\"Could not create topic %s.\", topicName), cause);\n                         }\n+                    } catch (final TimeoutException retryableException) {\n+                        log.error(\"Creating topic {} timed out.\\n\" +\n+                            \"Error message was: {}\", topicName, retryableException.toString());\n                     }\n                 }\n             }\n \n \n             if (!topicsNotReady.isEmpty()) {\n-                log.info(\"Topics {} can not be made ready with {} retries left\", topicsNotReady, remainingRetries);\n+                currentWallClockMs = time.milliseconds();\n \n-                Utils.sleep(retryBackOffMs);\n+                if (currentWallClockMs >= deadlineMs) {\n+                    final String timeoutError = String.format(\"Could not create topics within %d milliseconds. \" +\n+                        \"This can happen if the Kafka cluster is temporary not available.\", retryTimeoutMs);\n+                    log.error(timeoutError);\n+                    // TODO: should we throw a different exception instead and catch it, to return a `INCOMPLETE_SOURCE_TOPIC_METADATA` error code", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNjc1OQ=="}, "originalCommit": null, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NDc3OA==", "bodyText": "Ack", "url": "https://github.com/apache/kafka/pull/9060#discussion_r464774778", "createdAt": "2020-08-04T03:18:28Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -154,27 +164,34 @@ public InternalTopicManager(final Admin adminClient, final StreamsConfig streams\n                                 \"Error message was: {}\", topicName, cause.toString());\n                             throw new StreamsException(String.format(\"Could not create topic %s.\", topicName), cause);\n                         }\n+                    } catch (final TimeoutException retryableException) {\n+                        log.error(\"Creating topic {} timed out.\\n\" +\n+                            \"Error message was: {}\", topicName, retryableException.toString());\n                     }\n                 }\n             }\n \n \n             if (!topicsNotReady.isEmpty()) {\n-                log.info(\"Topics {} can not be made ready with {} retries left\", topicsNotReady, remainingRetries);\n+                currentWallClockMs = time.milliseconds();\n \n-                Utils.sleep(retryBackOffMs);\n+                if (currentWallClockMs >= deadlineMs) {\n+                    final String timeoutError = String.format(\"Could not create topics within %d milliseconds. \" +\n+                        \"This can happen if the Kafka cluster is temporary not available.\", retryTimeoutMs);\n+                    log.error(timeoutError);\n+                    // TODO: should we throw a different exception instead and catch it, to return a `INCOMPLETE_SOURCE_TOPIC_METADATA` error code", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNjc1OQ=="}, "originalCommit": null, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjA5NTc1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyMDozOFrOG1-5Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzozMDo1M1rOG2vaOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1ODE3MA==", "bodyText": "If we want to guarantee that the deadlineMs is respected, I think that we must set the timeout of the AdminClient's call accordingly: CreateTopicsOptions.timeoutMs. With the default, I think that the call could be longer than half of MAX_POLL_INTERVAL_MS_CONFIG.", "url": "https://github.com/apache/kafka/pull/9060#discussion_r459258170", "createdAt": "2020-07-23T07:20:38Z", "author": {"login": "dajac"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -96,13 +104,15 @@ public InternalTopicManager(final Admin adminClient, final StreamsConfig streams\n         // have existed with the expected number of partitions, or some create topic returns fatal errors.\n         log.debug(\"Starting to validate internal topics {} in partition assignor.\", topics);\n \n-        int remainingRetries = retries;\n+        long currentWallClockMs = time.milliseconds();\n+        final long deadlineMs = currentWallClockMs + retryTimeoutMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3NzY0Mw==", "bodyText": "Good question. Default max.poll.interval.ms is 5 minutes (ie, the deadline is set to 2.5 minutes by default) while default api.default.timeout.ms is 1 minutes? Thus we might be ok?", "url": "https://github.com/apache/kafka/pull/9060#discussion_r459577643", "createdAt": "2020-07-23T16:30:30Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -96,13 +104,15 @@ public InternalTopicManager(final Admin adminClient, final StreamsConfig streams\n         // have existed with the expected number of partitions, or some create topic returns fatal errors.\n         log.debug(\"Starting to validate internal topics {} in partition assignor.\", topics);\n \n-        int remainingRetries = retries;\n+        long currentWallClockMs = time.milliseconds();\n+        final long deadlineMs = currentWallClockMs + retryTimeoutMs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1ODE3MA=="}, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4MjcxMA==", "bodyText": "That's right. I misread the default value of max.poll.interval.ms, too many zeros for my eyes ;). The default works fine then. Do we want to protect ourselves if the user changes the default? Or shall we just call out that api.default.timeout.ms should be lower than max.poll.interval.ms somewhere?", "url": "https://github.com/apache/kafka/pull/9060#discussion_r459582710", "createdAt": "2020-07-23T16:38:57Z", "author": {"login": "dajac"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -96,13 +104,15 @@ public InternalTopicManager(final Admin adminClient, final StreamsConfig streams\n         // have existed with the expected number of partitions, or some create topic returns fatal errors.\n         log.debug(\"Starting to validate internal topics {} in partition assignor.\", topics);\n \n-        int remainingRetries = retries;\n+        long currentWallClockMs = time.milliseconds();\n+        final long deadlineMs = currentWallClockMs + retryTimeoutMs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1ODE3MA=="}, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5MzcxMw==", "bodyText": "I am happy to add a check in StreamsConfig and either throw or log a WARN depending how strict we want to be.", "url": "https://github.com/apache/kafka/pull/9060#discussion_r459793713", "createdAt": "2020-07-24T00:06:49Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -96,13 +104,15 @@ public InternalTopicManager(final Admin adminClient, final StreamsConfig streams\n         // have existed with the expected number of partitions, or some create topic returns fatal errors.\n         log.debug(\"Starting to validate internal topics {} in partition assignor.\", topics);\n \n-        int remainingRetries = retries;\n+        long currentWallClockMs = time.milliseconds();\n+        final long deadlineMs = currentWallClockMs + retryTimeoutMs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1ODE3MA=="}, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1MzA0OQ==", "bodyText": "Thinking a bit more about this, with the default, you may end up not honouring the deadline. createTopics can take up to 1m so if you invoke one when less than 1m is reaming before the deadline, you may not honour the deadline. It may not be that important though.\nIf we want to strictly enforce it, we could calculate the maximum timeout for each call, something like deadline - now, and set it with CreateTopicsOptions.timeoutMs.", "url": "https://github.com/apache/kafka/pull/9060#discussion_r460053049", "createdAt": "2020-07-24T13:30:53Z", "author": {"login": "dajac"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -96,13 +104,15 @@ public InternalTopicManager(final Admin adminClient, final StreamsConfig streams\n         // have existed with the expected number of partitions, or some create topic returns fatal errors.\n         log.debug(\"Starting to validate internal topics {} in partition assignor.\", topics);\n \n-        int remainingRetries = retries;\n+        long currentWallClockMs = time.milliseconds();\n+        final long deadlineMs = currentWallClockMs + retryTimeoutMs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1ODE3MA=="}, "originalCommit": null, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Nzc3MzQ4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopicManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwNjo1Mzo0MVrOG6iyJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoxNjo0MVrOG7OpWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA0MDQ4NA==", "bodyText": "Why do we reduce max poll interval?", "url": "https://github.com/apache/kafka/pull/9060#discussion_r464040484", "createdAt": "2020-08-02T06:53:41Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopicManagerTest.java", "diffHunk": "@@ -71,21 +73,20 @@\n     private final String topic2 = \"test_topic_2\";\n     private final String topic3 = \"test_topic_3\";\n     private final List<Node> singleReplica = Collections.singletonList(broker1);\n-    private final int numRetries = 1;\n \n     private String threadName;\n \n     private MockAdminClient mockAdminClient;\n     private InternalTopicManager internalTopicManager;\n \n-    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR\n     private final Map<String, Object> config = new HashMap<String, Object>() {\n         {\n             put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-id\");\n             put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, broker1.host() + \":\" + broker1.port());\n             put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);\n             put(StreamsConfig.producerPrefix(ProducerConfig.BATCH_SIZE_CONFIG), 16384);\n-            put(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG), numRetries);\n+            put(StreamsConfig.consumerPrefix(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG), 100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1OTEzMA==", "bodyText": "In this PR, we change the \"deadline\" in the group leader to create/verify all internal topics from \"counting retries\" to a timeout of max.poll.interval.ms / 2 and we reduce the default of 5 minutes to speed up this test.\ncf https://github.com/apache/kafka/pull/9060/files#diff-d3963e433c59b08688bb4481faa20e97R79", "url": "https://github.com/apache/kafka/pull/9060#discussion_r464759130", "createdAt": "2020-08-04T02:16:41Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopicManagerTest.java", "diffHunk": "@@ -71,21 +73,20 @@\n     private final String topic2 = \"test_topic_2\";\n     private final String topic3 = \"test_topic_3\";\n     private final List<Node> singleReplica = Collections.singletonList(broker1);\n-    private final int numRetries = 1;\n \n     private String threadName;\n \n     private MockAdminClient mockAdminClient;\n     private InternalTopicManager internalTopicManager;\n \n-    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR\n     private final Map<String, Object> config = new HashMap<String, Object>() {\n         {\n             put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-id\");\n             put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, broker1.host() + \":\" + broker1.port());\n             put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);\n             put(StreamsConfig.producerPrefix(ProducerConfig.BATCH_SIZE_CONFIG), 16384);\n-            put(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG), numRetries);\n+            put(StreamsConfig.consumerPrefix(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG), 100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA0MDQ4NA=="}, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTc2MTU4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODoyMDo0NFrOG7sIeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODoyMDo0NFrOG7sIeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI0MjIzNA==", "bodyText": "Is this part of the initiative to throw a different exception? Could we update the summary of this PR?", "url": "https://github.com/apache/kafka/pull/9060#discussion_r465242234", "createdAt": "2020-08-04T18:20:44Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -373,8 +373,15 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n \n         final Set<TaskId> statefulTasks = new HashSet<>();\n \n-        final boolean probingRebalanceNeeded =\n-            assignTasksToClients(fullMetadata, allSourceTopics, topicGroups, clientMetadataMap, partitionsForTask, statefulTasks);\n+        final boolean probingRebalanceNeeded;\n+        try {\n+            probingRebalanceNeeded = assignTasksToClients(fullMetadata, allSourceTopics, topicGroups, clientMetadataMap, partitionsForTask, statefulTasks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTc2NjQ4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODoyMjowNVrOG7sLfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDo1NTowMlrOG7xKVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI0MzAwNQ==", "bodyText": "Could we update the meta comment to explain when a TaskAssignmentException is thrown?", "url": "https://github.com/apache/kafka/pull/9060#discussion_r465243005", "createdAt": "2020-08-04T18:22:05Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -477,7 +484,7 @@ private boolean checkMetadataVersions(final int minReceivedMetadataVersion,\n      * @return map from repartition topic to its partition info\n      */\n     private Map<TopicPartition, PartitionInfo> prepareRepartitionTopics(final Map<Integer, TopicsInfo> topicGroups,\n-                                                                           final Cluster metadata) {\n+                                                                           final Cluster metadata) throws TaskAssignmentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyNDYyOQ==", "bodyText": "TaskAssignmentException is not a checked exception and it's just a curtesy declaration... (I can also remove throws TaskAssignmentException if you prefer).\nDon't see any need to document anything further -- the code makes it clear (in fact, this method does not even throw the exception itself, but it just bubbles up from internalTopicManager.makeReady and the code documents itself:\nhttps://github.com/apache/kafka/pull/9060/files#diff-d3963e433c59b08688bb4481faa20e97R179-R184", "url": "https://github.com/apache/kafka/pull/9060#discussion_r465324629", "createdAt": "2020-08-04T20:55:02Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -477,7 +484,7 @@ private boolean checkMetadataVersions(final int minReceivedMetadataVersion,\n      * @return map from repartition topic to its partition info\n      */\n     private Map<TopicPartition, PartitionInfo> prepareRepartitionTopics(final Map<Integer, TopicsInfo> topicGroups,\n-                                                                           final Cluster metadata) {\n+                                                                           final Cluster metadata) throws TaskAssignmentException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI0MzAwNQ=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTc2OTk4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODoyMzowNVrOG7sNug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODoyMzowNVrOG7sNug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI0MzU3OA==", "bodyText": "Comments for thrown exception", "url": "https://github.com/apache/kafka/pull/9060#discussion_r465243578", "createdAt": "2020-08-04T18:23:05Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -91,18 +100,20 @@ public InternalTopicManager(final Admin adminClient, final StreamsConfig streams\n      * If a topic exists already but has different number of partitions we fail and throw exception requesting user to reset the app before restarting again.\n      * @return the set of topics which had to be newly created\n      */\n-    public Set<String> makeReady(final Map<String, InternalTopicConfig> topics) {\n+    public Set<String> makeReady(final Map<String, InternalTopicConfig> topics) throws TaskAssignmentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTgwMTg1OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopicManagerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODozMToyMFrOG7sg0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODozMToyMFrOG7sg0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI0ODQ2Ng==", "bodyText": "s/temporary/temporarily", "url": "https://github.com/apache/kafka/pull/9060#discussion_r465248466", "createdAt": "2020-08-04T18:31:20Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopicManagerTest.java", "diffHunk": "@@ -383,18 +405,25 @@ public void shouldThrowExceptionWhenKeepsTopicLeaderNotAvailable() {\n         EasyMock.expect(admin.describeTopics(Collections.singleton(topic)))\n             .andReturn(new MockDescribeTopicsResult(\n                 Collections.singletonMap(topic, topicDescriptionFailFuture)))\n-            .times(numRetries + 1);\n+            .anyTimes();\n         EasyMock.expect(admin.createTopics(Collections.emptySet()))\n-            .andReturn(new MockCreateTopicsResult(Collections.emptyMap())).once();\n+            .andReturn(new MockCreateTopicsResult(Collections.emptyMap())).anyTimes();\n \n         EasyMock.replay(admin);\n \n         final InternalTopicConfig internalTopicConfig = new RepartitionTopicConfig(topic, Collections.emptyMap());\n         internalTopicConfig.setNumberOfPartitions(1);\n \n-        assertThrows(\n-            StreamsException.class,\n-            () -> topicManager.makeReady(Collections.singletonMap(topic, internalTopicConfig)));\n+        final TaskAssignmentException exception = assertThrows(\n+            TaskAssignmentException.class,\n+            () -> topicManager.makeReady(Collections.singletonMap(topic, internalTopicConfig))\n+        );\n+        assertNull(exception.getCause());\n+        assertThat(\n+            exception.getMessage(),\n+            equalTo(\"Could not create topics within 50 milliseconds.\" +\n+                \" This can happen if the Kafka cluster is temporary not available.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDU4MjMzOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo1ODoxOVrOG8aXRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjowNzoyM1rOG8cTfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5OTY4NQ==", "bodyText": "Since we could throw different exceptions here, would be good to add a log to indicate which type of exception is thrown.", "url": "https://github.com/apache/kafka/pull/9060#discussion_r465999685", "createdAt": "2020-08-05T20:58:19Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -373,8 +373,15 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n \n         final Set<TaskId> statefulTasks = new HashSet<>();\n \n-        final boolean probingRebalanceNeeded =\n-            assignTasksToClients(fullMetadata, allSourceTopics, topicGroups, clientMetadataMap, partitionsForTask, statefulTasks);\n+        final boolean probingRebalanceNeeded;\n+        try {\n+            probingRebalanceNeeded = assignTasksToClients(fullMetadata, allSourceTopics, topicGroups, clientMetadataMap, partitionsForTask, statefulTasks);\n+        } catch (final TaskAssignmentException | TimeoutException e) {\n+            return new GroupAssignment(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAwNjU4OQ==", "bodyText": "There are already corresponding log.error statement before those exceptions are thrown. No need to double log IMHO?", "url": "https://github.com/apache/kafka/pull/9060#discussion_r466006589", "createdAt": "2020-08-05T21:11:42Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -373,8 +373,15 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n \n         final Set<TaskId> statefulTasks = new HashSet<>();\n \n-        final boolean probingRebalanceNeeded =\n-            assignTasksToClients(fullMetadata, allSourceTopics, topicGroups, clientMetadataMap, partitionsForTask, statefulTasks);\n+        final boolean probingRebalanceNeeded;\n+        try {\n+            probingRebalanceNeeded = assignTasksToClients(fullMetadata, allSourceTopics, topicGroups, clientMetadataMap, partitionsForTask, statefulTasks);\n+        } catch (final TaskAssignmentException | TimeoutException e) {\n+            return new GroupAssignment(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5OTY4NQ=="}, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMTQ4Nw==", "bodyText": "Cool, sg.", "url": "https://github.com/apache/kafka/pull/9060#discussion_r466031487", "createdAt": "2020-08-05T22:07:23Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -373,8 +373,15 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n \n         final Set<TaskId> statefulTasks = new HashSet<>();\n \n-        final boolean probingRebalanceNeeded =\n-            assignTasksToClients(fullMetadata, allSourceTopics, topicGroups, clientMetadataMap, partitionsForTask, statefulTasks);\n+        final boolean probingRebalanceNeeded;\n+        try {\n+            probingRebalanceNeeded = assignTasksToClients(fullMetadata, allSourceTopics, topicGroups, clientMetadataMap, partitionsForTask, statefulTasks);\n+        } catch (final TaskAssignmentException | TimeoutException e) {\n+            return new GroupAssignment(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5OTY4NQ=="}, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzMxMjQxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0NzoyNFrOHS5mTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODozMDoxNVrOHaqP4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDEwOQ==", "bodyText": "Hey @mjsax , am I reading this PR correctly? Do we now only allow a single member to retry topic creation/validation for up to half of the poll interval, after which we shut down the entire application? That sounds like the opposite of resiliency...what if the brokers are temporarily unavailable? Before this we would just let the single thread die, and the internal topic creation/validation would be retried on the subsequent rebalance. That wasn't ideal, but given the upcoming work to allow reviving/recreating a death thread, that seems to be preferable to permanently ending the application?\nSorry if I'm misreading this, was just going over all the PRs in the last month or so to produce a diff+summary of the important ones, and want to make sure I actually understand all the changes we've made", "url": "https://github.com/apache/kafka/pull/9060#discussion_r489580109", "createdAt": "2020-09-16T16:47:24Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -45,33 +49,38 @@\n         \"Please report at https://issues.apache.org/jira/projects/KAFKA or dev-mailing list (https://kafka.apache.org/contact).\";\n \n     private final Logger log;\n-    private final long windowChangeLogAdditionalRetention;\n-    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    private final short replicationFactor;\n+    private final Time time;\n     private final Admin adminClient;\n \n-    private final int retries;\n+    private final short replicationFactor;\n+    private final long windowChangeLogAdditionalRetention;\n     private final long retryBackOffMs;\n+    private final long retryTimeoutMs;\n+\n+    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    @SuppressWarnings(\"deprecation\") // TODO: remove in follow up PR when `RETRIES` is removed\n-    public InternalTopicManager(final Admin adminClient, final StreamsConfig streamsConfig) {\n+    public InternalTopicManager(final Time time,\n+                                final Admin adminClient,\n+                                final StreamsConfig streamsConfig) {\n+        this.time = time;\n         this.adminClient = adminClient;\n \n         final LogContext logContext = new LogContext(String.format(\"stream-thread [%s] \", Thread.currentThread().getName()));\n         log = logContext.logger(getClass());\n \n         replicationFactor = streamsConfig.getInt(StreamsConfig.REPLICATION_FACTOR_CONFIG).shortValue();\n         windowChangeLogAdditionalRetention = streamsConfig.getLong(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG);\n-        final AdminClientConfig adminConfigs = new ClientUtils.QuietAdminClientConfig(streamsConfig);\n-        retries = adminConfigs.getInt(AdminClientConfig.RETRIES_CONFIG);\n-        retryBackOffMs = adminConfigs.getLong(AdminClientConfig.RETRY_BACKOFF_MS_CONFIG);\n+        retryBackOffMs = streamsConfig.getLong(StreamsConfig.RETRY_BACKOFF_MS_CONFIG);\n+        final Map<String, Object> consumerConfig = streamsConfig.getMainConsumerConfigs(\"dummy\", \"dummy\", -1);\n+        // need to add mandatory configs; otherwise `QuietConsumerConfig` throws\n+        consumerConfig.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n+        consumerConfig.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n+        retryTimeoutMs = new QuietConsumerConfig(consumerConfig).getInt(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG) / 2L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05b0faa5a146de6ec33784db87cf24c8ea1b6232"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDU3Mg==", "bodyText": "Apologies if this was touched on in the KIP, it's been a while and the discussion thread was quite long so I may have missed something there", "url": "https://github.com/apache/kafka/pull/9060#discussion_r489580572", "createdAt": "2020-09-16T16:48:16Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -45,33 +49,38 @@\n         \"Please report at https://issues.apache.org/jira/projects/KAFKA or dev-mailing list (https://kafka.apache.org/contact).\";\n \n     private final Logger log;\n-    private final long windowChangeLogAdditionalRetention;\n-    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    private final short replicationFactor;\n+    private final Time time;\n     private final Admin adminClient;\n \n-    private final int retries;\n+    private final short replicationFactor;\n+    private final long windowChangeLogAdditionalRetention;\n     private final long retryBackOffMs;\n+    private final long retryTimeoutMs;\n+\n+    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    @SuppressWarnings(\"deprecation\") // TODO: remove in follow up PR when `RETRIES` is removed\n-    public InternalTopicManager(final Admin adminClient, final StreamsConfig streamsConfig) {\n+    public InternalTopicManager(final Time time,\n+                                final Admin adminClient,\n+                                final StreamsConfig streamsConfig) {\n+        this.time = time;\n         this.adminClient = adminClient;\n \n         final LogContext logContext = new LogContext(String.format(\"stream-thread [%s] \", Thread.currentThread().getName()));\n         log = logContext.logger(getClass());\n \n         replicationFactor = streamsConfig.getInt(StreamsConfig.REPLICATION_FACTOR_CONFIG).shortValue();\n         windowChangeLogAdditionalRetention = streamsConfig.getLong(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG);\n-        final AdminClientConfig adminConfigs = new ClientUtils.QuietAdminClientConfig(streamsConfig);\n-        retries = adminConfigs.getInt(AdminClientConfig.RETRIES_CONFIG);\n-        retryBackOffMs = adminConfigs.getLong(AdminClientConfig.RETRY_BACKOFF_MS_CONFIG);\n+        retryBackOffMs = streamsConfig.getLong(StreamsConfig.RETRY_BACKOFF_MS_CONFIG);\n+        final Map<String, Object> consumerConfig = streamsConfig.getMainConsumerConfigs(\"dummy\", \"dummy\", -1);\n+        // need to add mandatory configs; otherwise `QuietConsumerConfig` throws\n+        consumerConfig.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n+        consumerConfig.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n+        retryTimeoutMs = new QuietConsumerConfig(consumerConfig).getInt(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG) / 2L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDEwOQ=="}, "originalCommit": {"oid": "05b0faa5a146de6ec33784db87cf24c8ea1b6232"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY0NjA1OQ==", "bodyText": "Note that the previous default was \"zero retries\" and thus the new default is more resilient with a 5 minute default max.poll.interval. -- But yes, we shutdown the whole app for this case now as proposed by @guozhangwang (IIRC).", "url": "https://github.com/apache/kafka/pull/9060#discussion_r489646059", "createdAt": "2020-09-16T18:34:18Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -45,33 +49,38 @@\n         \"Please report at https://issues.apache.org/jira/projects/KAFKA or dev-mailing list (https://kafka.apache.org/contact).\";\n \n     private final Logger log;\n-    private final long windowChangeLogAdditionalRetention;\n-    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    private final short replicationFactor;\n+    private final Time time;\n     private final Admin adminClient;\n \n-    private final int retries;\n+    private final short replicationFactor;\n+    private final long windowChangeLogAdditionalRetention;\n     private final long retryBackOffMs;\n+    private final long retryTimeoutMs;\n+\n+    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    @SuppressWarnings(\"deprecation\") // TODO: remove in follow up PR when `RETRIES` is removed\n-    public InternalTopicManager(final Admin adminClient, final StreamsConfig streamsConfig) {\n+    public InternalTopicManager(final Time time,\n+                                final Admin adminClient,\n+                                final StreamsConfig streamsConfig) {\n+        this.time = time;\n         this.adminClient = adminClient;\n \n         final LogContext logContext = new LogContext(String.format(\"stream-thread [%s] \", Thread.currentThread().getName()));\n         log = logContext.logger(getClass());\n \n         replicationFactor = streamsConfig.getInt(StreamsConfig.REPLICATION_FACTOR_CONFIG).shortValue();\n         windowChangeLogAdditionalRetention = streamsConfig.getLong(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG);\n-        final AdminClientConfig adminConfigs = new ClientUtils.QuietAdminClientConfig(streamsConfig);\n-        retries = adminConfigs.getInt(AdminClientConfig.RETRIES_CONFIG);\n-        retryBackOffMs = adminConfigs.getLong(AdminClientConfig.RETRY_BACKOFF_MS_CONFIG);\n+        retryBackOffMs = streamsConfig.getLong(StreamsConfig.RETRY_BACKOFF_MS_CONFIG);\n+        final Map<String, Object> consumerConfig = streamsConfig.getMainConsumerConfigs(\"dummy\", \"dummy\", -1);\n+        // need to add mandatory configs; otherwise `QuietConsumerConfig` throws\n+        consumerConfig.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n+        consumerConfig.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n+        retryTimeoutMs = new QuietConsumerConfig(consumerConfig).getInt(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG) / 2L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDEwOQ=="}, "originalCommit": {"oid": "05b0faa5a146de6ec33784db87cf24c8ea1b6232"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY0NTc4MA==", "bodyText": "Today since we do not have ways to partially create tasks we'd have to create all topics to make sure all tasks are \"complete\" within each rebalance, if we cannot successfully create the topics within the poll.interval (i.e. we'd need to complete that rebalance with the poll.interval, and I guess halving it is to be more conservative), then killing that thread is not very useful anyways since we cannot proceed with the initializable tasks anyways.\nThat being said, with the upcoming work I'd agree that just shutdown the thread and allow users to optionally retry rebalance with new threads would be preferrable.", "url": "https://github.com/apache/kafka/pull/9060#discussion_r491645780", "createdAt": "2020-09-20T03:08:14Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -45,33 +49,38 @@\n         \"Please report at https://issues.apache.org/jira/projects/KAFKA or dev-mailing list (https://kafka.apache.org/contact).\";\n \n     private final Logger log;\n-    private final long windowChangeLogAdditionalRetention;\n-    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    private final short replicationFactor;\n+    private final Time time;\n     private final Admin adminClient;\n \n-    private final int retries;\n+    private final short replicationFactor;\n+    private final long windowChangeLogAdditionalRetention;\n     private final long retryBackOffMs;\n+    private final long retryTimeoutMs;\n+\n+    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    @SuppressWarnings(\"deprecation\") // TODO: remove in follow up PR when `RETRIES` is removed\n-    public InternalTopicManager(final Admin adminClient, final StreamsConfig streamsConfig) {\n+    public InternalTopicManager(final Time time,\n+                                final Admin adminClient,\n+                                final StreamsConfig streamsConfig) {\n+        this.time = time;\n         this.adminClient = adminClient;\n \n         final LogContext logContext = new LogContext(String.format(\"stream-thread [%s] \", Thread.currentThread().getName()));\n         log = logContext.logger(getClass());\n \n         replicationFactor = streamsConfig.getInt(StreamsConfig.REPLICATION_FACTOR_CONFIG).shortValue();\n         windowChangeLogAdditionalRetention = streamsConfig.getLong(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG);\n-        final AdminClientConfig adminConfigs = new ClientUtils.QuietAdminClientConfig(streamsConfig);\n-        retries = adminConfigs.getInt(AdminClientConfig.RETRIES_CONFIG);\n-        retryBackOffMs = adminConfigs.getLong(AdminClientConfig.RETRY_BACKOFF_MS_CONFIG);\n+        retryBackOffMs = streamsConfig.getLong(StreamsConfig.RETRY_BACKOFF_MS_CONFIG);\n+        final Map<String, Object> consumerConfig = streamsConfig.getMainConsumerConfigs(\"dummy\", \"dummy\", -1);\n+        // need to add mandatory configs; otherwise `QuietConsumerConfig` throws\n+        consumerConfig.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n+        consumerConfig.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n+        retryTimeoutMs = new QuietConsumerConfig(consumerConfig).getInt(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG) / 2L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDEwOQ=="}, "originalCommit": {"oid": "05b0faa5a146de6ec33784db87cf24c8ea1b6232"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY0NTgwMA==", "bodyText": "cc @cadonna @wcarlson5 to bring to your attention.", "url": "https://github.com/apache/kafka/pull/9060#discussion_r491645800", "createdAt": "2020-09-20T03:08:47Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -45,33 +49,38 @@\n         \"Please report at https://issues.apache.org/jira/projects/KAFKA or dev-mailing list (https://kafka.apache.org/contact).\";\n \n     private final Logger log;\n-    private final long windowChangeLogAdditionalRetention;\n-    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    private final short replicationFactor;\n+    private final Time time;\n     private final Admin adminClient;\n \n-    private final int retries;\n+    private final short replicationFactor;\n+    private final long windowChangeLogAdditionalRetention;\n     private final long retryBackOffMs;\n+    private final long retryTimeoutMs;\n+\n+    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    @SuppressWarnings(\"deprecation\") // TODO: remove in follow up PR when `RETRIES` is removed\n-    public InternalTopicManager(final Admin adminClient, final StreamsConfig streamsConfig) {\n+    public InternalTopicManager(final Time time,\n+                                final Admin adminClient,\n+                                final StreamsConfig streamsConfig) {\n+        this.time = time;\n         this.adminClient = adminClient;\n \n         final LogContext logContext = new LogContext(String.format(\"stream-thread [%s] \", Thread.currentThread().getName()));\n         log = logContext.logger(getClass());\n \n         replicationFactor = streamsConfig.getInt(StreamsConfig.REPLICATION_FACTOR_CONFIG).shortValue();\n         windowChangeLogAdditionalRetention = streamsConfig.getLong(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG);\n-        final AdminClientConfig adminConfigs = new ClientUtils.QuietAdminClientConfig(streamsConfig);\n-        retries = adminConfigs.getInt(AdminClientConfig.RETRIES_CONFIG);\n-        retryBackOffMs = adminConfigs.getLong(AdminClientConfig.RETRY_BACKOFF_MS_CONFIG);\n+        retryBackOffMs = streamsConfig.getLong(StreamsConfig.RETRY_BACKOFF_MS_CONFIG);\n+        final Map<String, Object> consumerConfig = streamsConfig.getMainConsumerConfigs(\"dummy\", \"dummy\", -1);\n+        // need to add mandatory configs; otherwise `QuietConsumerConfig` throws\n+        consumerConfig.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n+        consumerConfig.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n+        retryTimeoutMs = new QuietConsumerConfig(consumerConfig).getInt(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG) / 2L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDEwOQ=="}, "originalCommit": {"oid": "05b0faa5a146de6ec33784db87cf24c8ea1b6232"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxNDE4Mw==", "bodyText": "Yeah I think we should remove the shutdown error code in case of TimeoutException during internal topic validation before 2.7. I'll create a ticket so we don't lose track -- I think even just letting it kill the one thread is better than killing all of them", "url": "https://github.com/apache/kafka/pull/9060#discussion_r497714183", "createdAt": "2020-09-30T18:25:03Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -45,33 +49,38 @@\n         \"Please report at https://issues.apache.org/jira/projects/KAFKA or dev-mailing list (https://kafka.apache.org/contact).\";\n \n     private final Logger log;\n-    private final long windowChangeLogAdditionalRetention;\n-    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    private final short replicationFactor;\n+    private final Time time;\n     private final Admin adminClient;\n \n-    private final int retries;\n+    private final short replicationFactor;\n+    private final long windowChangeLogAdditionalRetention;\n     private final long retryBackOffMs;\n+    private final long retryTimeoutMs;\n+\n+    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    @SuppressWarnings(\"deprecation\") // TODO: remove in follow up PR when `RETRIES` is removed\n-    public InternalTopicManager(final Admin adminClient, final StreamsConfig streamsConfig) {\n+    public InternalTopicManager(final Time time,\n+                                final Admin adminClient,\n+                                final StreamsConfig streamsConfig) {\n+        this.time = time;\n         this.adminClient = adminClient;\n \n         final LogContext logContext = new LogContext(String.format(\"stream-thread [%s] \", Thread.currentThread().getName()));\n         log = logContext.logger(getClass());\n \n         replicationFactor = streamsConfig.getInt(StreamsConfig.REPLICATION_FACTOR_CONFIG).shortValue();\n         windowChangeLogAdditionalRetention = streamsConfig.getLong(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG);\n-        final AdminClientConfig adminConfigs = new ClientUtils.QuietAdminClientConfig(streamsConfig);\n-        retries = adminConfigs.getInt(AdminClientConfig.RETRIES_CONFIG);\n-        retryBackOffMs = adminConfigs.getLong(AdminClientConfig.RETRY_BACKOFF_MS_CONFIG);\n+        retryBackOffMs = streamsConfig.getLong(StreamsConfig.RETRY_BACKOFF_MS_CONFIG);\n+        final Map<String, Object> consumerConfig = streamsConfig.getMainConsumerConfigs(\"dummy\", \"dummy\", -1);\n+        // need to add mandatory configs; otherwise `QuietConsumerConfig` throws\n+        consumerConfig.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n+        consumerConfig.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n+        retryTimeoutMs = new QuietConsumerConfig(consumerConfig).getInt(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG) / 2L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDEwOQ=="}, "originalCommit": {"oid": "05b0faa5a146de6ec33784db87cf24c8ea1b6232"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxNzIxOA==", "bodyText": "SGTM.", "url": "https://github.com/apache/kafka/pull/9060#discussion_r497717218", "createdAt": "2020-09-30T18:30:15Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -45,33 +49,38 @@\n         \"Please report at https://issues.apache.org/jira/projects/KAFKA or dev-mailing list (https://kafka.apache.org/contact).\";\n \n     private final Logger log;\n-    private final long windowChangeLogAdditionalRetention;\n-    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    private final short replicationFactor;\n+    private final Time time;\n     private final Admin adminClient;\n \n-    private final int retries;\n+    private final short replicationFactor;\n+    private final long windowChangeLogAdditionalRetention;\n     private final long retryBackOffMs;\n+    private final long retryTimeoutMs;\n+\n+    private final Map<String, String> defaultTopicConfigs = new HashMap<>();\n \n-    @SuppressWarnings(\"deprecation\") // TODO: remove in follow up PR when `RETRIES` is removed\n-    public InternalTopicManager(final Admin adminClient, final StreamsConfig streamsConfig) {\n+    public InternalTopicManager(final Time time,\n+                                final Admin adminClient,\n+                                final StreamsConfig streamsConfig) {\n+        this.time = time;\n         this.adminClient = adminClient;\n \n         final LogContext logContext = new LogContext(String.format(\"stream-thread [%s] \", Thread.currentThread().getName()));\n         log = logContext.logger(getClass());\n \n         replicationFactor = streamsConfig.getInt(StreamsConfig.REPLICATION_FACTOR_CONFIG).shortValue();\n         windowChangeLogAdditionalRetention = streamsConfig.getLong(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG);\n-        final AdminClientConfig adminConfigs = new ClientUtils.QuietAdminClientConfig(streamsConfig);\n-        retries = adminConfigs.getInt(AdminClientConfig.RETRIES_CONFIG);\n-        retryBackOffMs = adminConfigs.getLong(AdminClientConfig.RETRY_BACKOFF_MS_CONFIG);\n+        retryBackOffMs = streamsConfig.getLong(StreamsConfig.RETRY_BACKOFF_MS_CONFIG);\n+        final Map<String, Object> consumerConfig = streamsConfig.getMainConsumerConfigs(\"dummy\", \"dummy\", -1);\n+        // need to add mandatory configs; otherwise `QuietConsumerConfig` throws\n+        consumerConfig.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n+        consumerConfig.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n+        retryTimeoutMs = new QuietConsumerConfig(consumerConfig).getInt(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG) / 2L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDEwOQ=="}, "originalCommit": {"oid": "05b0faa5a146de6ec33784db87cf24c8ea1b6232"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2299, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}