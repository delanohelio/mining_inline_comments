{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMDY1NDM5", "number": 9029, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDowMjowNFrOEPD5vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzozMDowOFrOETrfDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjI4MDI4OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDowMjowNFrOGykBew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDowMjowNFrOGykBew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3MjE4Nw==", "bodyText": "rename the typo test name", "url": "https://github.com/apache/kafka/pull/9029#discussion_r455672187", "createdAt": "2020-07-16T10:02:04Z", "author": {"login": "showuon"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -315,9 +319,34 @@ public void testReplication() throws InterruptedException {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics)\n+            throws InterruptedException {\n+        Admin backupClient = backup.kafka().createAdminClient();\n+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n+        IntStream.range(0, NUM_PARTITIONS).forEach(\n+            partitionInd -> {\n+                for (String topic: topics) {\n+                    tps.add(new TopicPartition(topic, partitionInd));\n+                }\n+            }\n+        );\n+        long expectedTotalOffsets = NUM_RECORDS_PRODUCED * topics.size();\n+\n+        waitForCondition(() -> {\n+            Map<TopicPartition, OffsetAndMetadata> consumerGroupOffsets =\n+                backupClient.listConsumerGroupOffsets(\"consumer-group-1\").partitionsToOffsetAndMetadata().get();\n+            long consumerGroupOffsetTotal = consumerGroupOffsets.values().stream().mapToLong(metadata -> metadata.offset()).sum();\n+\n+            Map<TopicPartition, Long> offsets = consumer.endOffsets(tps, Duration.ofMillis(500));\n+            long totalOffsets = offsets.values().stream().mapToLong(l -> l).sum();\n+\n+            // make sure the consumer group offsets are synced to expected number\n+            return totalOffsets == expectedTotalOffsets && consumerGroupOffsetTotal > 0;\n+        }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n+    }\n \n     @Test\n-    public void testOneWayReplicationWithAutorOffsetSync1() throws InterruptedException {\n+    public void testOneWayReplicationWithAutoOffsetSync() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70dc72477c50be350542a73e42c822852aca184f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzczNjM5OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowODowOVrOGyyECQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNTozNDowMFrOGzF6nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMjIxNw==", "bodyText": "could we have a more intuitive variable name for partitionInd? e.g. partitionId or partitionIndex?", "url": "https://github.com/apache/kafka/pull/9029#discussion_r455902217", "createdAt": "2020-07-16T16:08:09Z", "author": {"login": "ning2008wisc"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -315,9 +319,34 @@ public void testReplication() throws InterruptedException {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics)\n+            throws InterruptedException {\n+        Admin backupClient = backup.kafka().createAdminClient();\n+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n+        IntStream.range(0, NUM_PARTITIONS).forEach(\n+            partitionInd -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70dc72477c50be350542a73e42c822852aca184f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIyNzQ4NA==", "bodyText": "I'll rename to partitionIndex. Thanks.", "url": "https://github.com/apache/kafka/pull/9029#discussion_r456227484", "createdAt": "2020-07-17T05:34:00Z", "author": {"login": "showuon"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -315,9 +319,34 @@ public void testReplication() throws InterruptedException {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics)\n+            throws InterruptedException {\n+        Admin backupClient = backup.kafka().createAdminClient();\n+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n+        IntStream.range(0, NUM_PARTITIONS).forEach(\n+            partitionInd -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMjIxNw=="}, "originalCommit": {"oid": "70dc72477c50be350542a73e42c822852aca184f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Mzc0MjExOnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowOToyNlrOGyyHjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNTozNDowM1rOGzF6pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMzExNg==", "bodyText": "could we consider to pass in the consumer group name as a input variable of waitForConsumerGroupOffsetSync, so that waitForConsumerGroupOffsetSync looks more generic?", "url": "https://github.com/apache/kafka/pull/9029#discussion_r455903116", "createdAt": "2020-07-16T16:09:26Z", "author": {"login": "ning2008wisc"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -315,9 +319,34 @@ public void testReplication() throws InterruptedException {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics)\n+            throws InterruptedException {\n+        Admin backupClient = backup.kafka().createAdminClient();\n+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n+        IntStream.range(0, NUM_PARTITIONS).forEach(\n+            partitionInd -> {\n+                for (String topic: topics) {\n+                    tps.add(new TopicPartition(topic, partitionInd));\n+                }\n+            }\n+        );\n+        long expectedTotalOffsets = NUM_RECORDS_PRODUCED * topics.size();\n+\n+        waitForCondition(() -> {\n+            Map<TopicPartition, OffsetAndMetadata> consumerGroupOffsets =\n+                backupClient.listConsumerGroupOffsets(\"consumer-group-1\").partitionsToOffsetAndMetadata().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70dc72477c50be350542a73e42c822852aca184f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIyNzQ5NA==", "bodyText": "Good suggestion. Thanks.", "url": "https://github.com/apache/kafka/pull/9029#discussion_r456227494", "createdAt": "2020-07-17T05:34:03Z", "author": {"login": "showuon"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -315,9 +319,34 @@ public void testReplication() throws InterruptedException {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics)\n+            throws InterruptedException {\n+        Admin backupClient = backup.kafka().createAdminClient();\n+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n+        IntStream.range(0, NUM_PARTITIONS).forEach(\n+            partitionInd -> {\n+                for (String topic: topics) {\n+                    tps.add(new TopicPartition(topic, partitionInd));\n+                }\n+            }\n+        );\n+        long expectedTotalOffsets = NUM_RECORDS_PRODUCED * topics.size();\n+\n+        waitForCondition(() -> {\n+            Map<TopicPartition, OffsetAndMetadata> consumerGroupOffsets =\n+                backupClient.listConsumerGroupOffsets(\"consumer-group-1\").partitionsToOffsetAndMetadata().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMzExNg=="}, "originalCommit": {"oid": "70dc72477c50be350542a73e42c822852aca184f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzM5OTU5OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo0NjowM1rOG2LQBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMTo1NTozNlrOG2hEZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MDYxNA==", "bodyText": "We can remove this field now that it's unused", "url": "https://github.com/apache/kafka/pull/9029#discussion_r459460614", "createdAt": "2020-07-23T13:46:03Z", "author": {"login": "mimaison"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -62,6 +65,7 @@\n     private static final int NUM_PARTITIONS = 10;\n     private static final int RECORD_TRANSFER_DURATION_MS = 20_000;\n     private static final int CHECKPOINT_DURATION_MS = 20_000;\n+    private static final int OFFSET_SYNC_DURATION_MS = 30_000;\n \n     private Time time = Time.SYSTEM;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88400bf350b60684db33828d690cfa238d056781"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxODA4Nw==", "bodyText": "Nice catch! I also removed the unused import import org.apache.kafka.common.utils.Time; Thanks.", "url": "https://github.com/apache/kafka/pull/9029#discussion_r459818087", "createdAt": "2020-07-24T01:55:36Z", "author": {"login": "showuon"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -62,6 +65,7 @@\n     private static final int NUM_PARTITIONS = 10;\n     private static final int RECORD_TRANSFER_DURATION_MS = 20_000;\n     private static final int CHECKPOINT_DURATION_MS = 20_000;\n+    private static final int OFFSET_SYNC_DURATION_MS = 30_000;\n \n     private Time time = Time.SYSTEM;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MDYxNA=="}, "originalCommit": {"oid": "88400bf350b60684db33828d690cfa238d056781"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Nzc0OTcxOnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTowMTowNVrOG2Orfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMjoxODowNVrOG2hWcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxNjc5OQ==", "bodyText": "I'm not sure this is much better than a simple for loop. WDYT?", "url": "https://github.com/apache/kafka/pull/9029#discussion_r459516799", "createdAt": "2020-07-23T15:01:05Z", "author": {"login": "mimaison"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -315,9 +319,34 @@ public void testReplication() throws InterruptedException {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics, String consumerGroupId)\n+            throws InterruptedException {\n+        Admin backupClient = backup.kafka().createAdminClient();\n+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n+        IntStream.range(0, NUM_PARTITIONS).forEach(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88400bf350b60684db33828d690cfa238d056781"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyMjcwNA==", "bodyText": "I don't have any preference. I'll change to simple for loop. Thanks.", "url": "https://github.com/apache/kafka/pull/9029#discussion_r459822704", "createdAt": "2020-07-24T02:18:05Z", "author": {"login": "showuon"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -315,9 +319,34 @@ public void testReplication() throws InterruptedException {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics, String consumerGroupId)\n+            throws InterruptedException {\n+        Admin backupClient = backup.kafka().createAdminClient();\n+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n+        IntStream.range(0, NUM_PARTITIONS).forEach(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxNjc5OQ=="}, "originalCommit": {"oid": "88400bf350b60684db33828d690cfa238d056781"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDY2MDA0OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoxODozOFrOG5ingw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDoxNjoxMlrOG5lCLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4OTE4Nw==", "bodyText": "Can we add the types <byte[], byte[]> to ConsumerRecords?", "url": "https://github.com/apache/kafka/pull/9029#discussion_r462989187", "createdAt": "2020-07-30T13:18:38Z", "author": {"login": "mimaison"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -345,15 +342,24 @@ private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, L\n         }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n     }\n \n+    private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n+        waitForCondition(() -> {\n+            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyODc4MA==", "bodyText": "Done. Thanks.", "url": "https://github.com/apache/kafka/pull/9029#discussion_r463028780", "createdAt": "2020-07-30T14:16:12Z", "author": {"login": "showuon"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -345,15 +342,24 @@ private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, L\n         }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n     }\n \n+    private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n+        waitForCondition(() -> {\n+            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4OTE4Nw=="}, "originalCommit": {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDY2MjI5OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoxOToxMFrOG5io6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoxOToxMFrOG5io6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4OTU0Ng==", "bodyText": "replicaing -> replicating", "url": "https://github.com/apache/kafka/pull/9029#discussion_r462989546", "createdAt": "2020-07-30T13:19:10Z", "author": {"login": "mimaison"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -345,15 +342,24 @@ private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, L\n         }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n     }\n \n+    private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n+        waitForCondition(() -> {\n+            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));\n+            consumer.commitSync();\n+            return NUM_RECORDS_PRODUCED == totalConsumedRecords.addAndGet(records.count());\n+        }, RECORD_CONSUME_DURATION_MS, \"Consumer cannot consume all the records in time\");\n+    }\n+\n     @Test\n     public void testOneWayReplicationWithAutoOffsetSync() throws InterruptedException {\n \n         // create consumers before starting the connectors so we don't need to wait for discovery\n-        Consumer<byte[], byte[]> consumer1 = primary.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(\n-            \"group.id\", \"consumer-group-1\"), \"test-topic-1\");\n-        consumer1.poll(Duration.ofMillis(500));\n-        consumer1.commitSync();\n-        consumer1.close();\n+        try (Consumer<byte[], byte[]> consumer1 = primary.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(\n+            \"group.id\", \"consumer-group-1\"), \"test-topic-1\")) {\n+            // we need to wait for consuming all the records for MM2 replicaing the expected offsets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDY4MjM1OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyNDowMlrOG5i1Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyNDowMlrOG5i1Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5MjY4Mw==", "bodyText": "nit: The sentence sounds slightly better if you remove the", "url": "https://github.com/apache/kafka/pull/9029#discussion_r462992683", "createdAt": "2020-07-30T13:24:02Z", "author": {"login": "mimaison"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -345,15 +342,24 @@ private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, L\n         }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n     }\n \n+    private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n+        waitForCondition(() -> {\n+            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));\n+            consumer.commitSync();\n+            return NUM_RECORDS_PRODUCED == totalConsumedRecords.addAndGet(records.count());\n+        }, RECORD_CONSUME_DURATION_MS, \"Consumer cannot consume all the records in time\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDcwMTYzOnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyODozM1rOG5jAvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDoxNTo1OFrOG5lBnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NTY0NA==", "bodyText": "We can move that line after the waitForCondition() block to just commit once all records have been consumed.", "url": "https://github.com/apache/kafka/pull/9029#discussion_r462995644", "createdAt": "2020-07-30T13:28:33Z", "author": {"login": "mimaison"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -345,15 +342,24 @@ private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, L\n         }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n     }\n \n+    private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n+        waitForCondition(() -> {\n+            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));\n+            consumer.commitSync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyODYzNg==", "bodyText": "Good suggestion! Thanks.", "url": "https://github.com/apache/kafka/pull/9029#discussion_r463028636", "createdAt": "2020-07-30T14:15:58Z", "author": {"login": "showuon"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -345,15 +342,24 @@ private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, L\n         }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n     }\n \n+    private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n+        waitForCondition(() -> {\n+            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));\n+            consumer.commitSync();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NTY0NA=="}, "originalCommit": {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDcwODYzOnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzozMDowOFrOG5jE_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzozMDowOFrOG5jE_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NjczMg==", "bodyText": "replicaing -> replicating", "url": "https://github.com/apache/kafka/pull/9029#discussion_r462996732", "createdAt": "2020-07-30T13:30:08Z", "author": {"login": "mimaison"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -387,11 +393,11 @@ public void testOneWayReplicationWithAutoOffsetSync() throws InterruptedExceptio\n         }\n \n         // create a consumer at primary cluster to consume the new topic\n-        consumer1 = primary.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(\n-            \"group.id\", \"consumer-group-1\"), \"test-topic-2\");\n-        consumer1.poll(Duration.ofMillis(500));\n-        consumer1.commitSync();\n-        consumer1.close();\n+        try (Consumer<byte[], byte[]> consumer1 = primary.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(\n+            \"group.id\", \"consumer-group-1\"), \"test-topic-2\")) {\n+            // we need to wait for consuming all the records for MM2 replicaing the expected offsets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2272, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}