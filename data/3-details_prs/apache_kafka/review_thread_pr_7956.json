{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNjI3ODUx", "number": 7956, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTozNTo1MVrODYyqYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTozNTo1MVrODYyqYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzIyNDY3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTozNTo1MVrOFe2eeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNTo0OTowMFrOGcz__Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg5NDEzNw==", "bodyText": "@ijuma I added these to the Authorizer API (hence Admin API as well). But I wasn't sure if we should leave it to the implementation instead - i.e. implementations may provider stronger or weaker guarantees. If so, this doc would move to AclAuthorizer. What do you think?", "url": "https://github.com/apache/kafka/pull/7956#discussion_r367894137", "createdAt": "2020-01-17T11:35:51Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java", "diffHunk": "@@ -114,6 +114,21 @@\n      * This is an asynchronous API that enables the caller to avoid blocking during the update. Implementations of this\n      * API can return completed futures using {@link java.util.concurrent.CompletableFuture#completedFuture(Object)}\n      * to process the update synchronously on the request thread.\n+     * <p>\n+     * <b>Concurrent updates:</b>\n+     * <ul>\n+     *     <li>If ACLs are created using {@link #createAcls(AuthorizableRequestContext, List)} while a delete is in\n+     *     progress, these ACLs may or may not be considered for deletion depending on the order of updates.\n+     *     The returned {@link AclDeleteResult} indicates which ACLs were deleted.</li>\n+     *     <li>If the provided filters use resource pattern type\n+     *     {@link org.apache.kafka.common.resource.PatternType#MATCH} that needs to filter all resources to determine\n+     *     matching ACLs, only ACLs that have already been propagated to the broker processing the ACL update will be\n+     *     deleted. This may not include some ACLs that were persisted, but not yet propagated to all brokers. The\n+     *     returned {@link AclDeleteResult} indicates which ACLs were deleted.</li>\n+     *     <li>If the provided filters use other resource pattern types that perform a direct match, all matching ACLs\n+     *     from previously completed {@link #createAcls(AuthorizableRequestContext, List)} )} are guaranteed\n+     *     to be deleted.</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NTI3Nw==", "bodyText": "I agree,  maybe  we can move this  doc to AclAuthorizer.  we can also mention here to refer implementation docs for concurrent update guarantees.", "url": "https://github.com/apache/kafka/pull/7956#discussion_r432865277", "createdAt": "2020-05-30T15:49:00Z", "author": {"login": "omkreddy"}, "path": "clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java", "diffHunk": "@@ -114,6 +114,21 @@\n      * This is an asynchronous API that enables the caller to avoid blocking during the update. Implementations of this\n      * API can return completed futures using {@link java.util.concurrent.CompletableFuture#completedFuture(Object)}\n      * to process the update synchronously on the request thread.\n+     * <p>\n+     * <b>Concurrent updates:</b>\n+     * <ul>\n+     *     <li>If ACLs are created using {@link #createAcls(AuthorizableRequestContext, List)} while a delete is in\n+     *     progress, these ACLs may or may not be considered for deletion depending on the order of updates.\n+     *     The returned {@link AclDeleteResult} indicates which ACLs were deleted.</li>\n+     *     <li>If the provided filters use resource pattern type\n+     *     {@link org.apache.kafka.common.resource.PatternType#MATCH} that needs to filter all resources to determine\n+     *     matching ACLs, only ACLs that have already been propagated to the broker processing the ACL update will be\n+     *     deleted. This may not include some ACLs that were persisted, but not yet propagated to all brokers. The\n+     *     returned {@link AclDeleteResult} indicates which ACLs were deleted.</li>\n+     *     <li>If the provided filters use other resource pattern types that perform a direct match, all matching ACLs\n+     *     from previously completed {@link #createAcls(AuthorizableRequestContext, List)} )} are guaranteed\n+     *     to be deleted.</li>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg5NDEzNw=="}, "originalCommit": null, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4361, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}