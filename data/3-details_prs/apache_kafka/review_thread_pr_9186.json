{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NDE3OTEy", "number": 9186, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDoxNjoyOVrOEbG6CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo1MjoyMlrOEhWrfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODYwMTY5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDoxNjoyOVrOHE7gWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODowNzoyOVrOHFwjog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzMTI4OQ==", "bodyText": "Should we really catch NPE here? It seems like if the user wants to return a non-null mapped key from a null key, then they should handle the null case specifically in their keyMapper and not just throw an NPE. In general, an NPE is a sign that something has gone wrong. I would be pretty surprised if I threw an NPE explicitly in my user code and it just got swallowed and interpreted as if I had actually returned null.", "url": "https://github.com/apache/kafka/pull/9186#discussion_r474931289", "createdAt": "2020-08-21T20:16:29Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,29 +60,46 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n-        // so ignore unless it is a left join\n+        // we do join iff the joining keys are equal, thus, if the mappedKey is null we cannot join\n+        // and just ignore the record.\n         //\n         // we also ignore the record if value is null, because in a key-value data model a null-value indicates\n         // an empty message (ie, there is nothing to be joined) -- this contrast SQL NULL semantics\n         // furthermore, on left/outer joins 'null' in ValueJoiner#apply() indicates a missing record --\n         // thus, to be consistent and to avoid ambiguous null semantics, null values are ignored\n-        if (key == null || value == null) {\n+        final Optional<K2> maybeMappedKey = maybeExtractMappedKey(key, value);\n+        if (!maybeMappedKey.isPresent()) {\n             LOG.warn(\n                 \"Skipping record due to null key or value. key=[{}] value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n                 key, value, context().topic(), context().partition(), context().offset()\n             );\n             droppedRecordsSensor.record();\n         } else {\n-            final K2 mappedKey = keyMapper.apply(key, value);\n-            final V2 value2 = mappedKey == null ? null : getValueOrNull(valueGetter.get(mappedKey));\n+            final K2 mappedKey = maybeMappedKey.get();\n+            final V2 value2 = getValueOrNull(valueGetter.get(mappedKey));\n             if (leftJoin || value2 != null) {\n                 context().forward(key, joiner.apply(value, value2));\n             }\n         }\n     }\n \n+    private Optional<K2> maybeExtractMappedKey(final K1 key, final V1 value) {\n+        if (value == null) {\n+            return Optional.empty();\n+        }\n+\n+        // we allow the case where the key is null but mappedKey is not null and thus\n+        // we need to guard against nullPointerExceptions. This may happen for GlobalKTables.\n+        // For KTables, the keyMapper simply returns the key, so this will never happen\n+        Optional<K2> maybeMappedKey;\n+        try {\n+            maybeMappedKey = Optional.ofNullable(keyMapper.apply(key, value));\n+        } catch (final NullPointerException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b4b3a4f7ff2ce46467a9fc6a32301604a53ab30"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE5ODg2OA==", "bodyText": "Yea I think what you say makes sense. When I wrote this I was thinking about backwards compatibility: previously all null keys would never be passed to keyMappers but now they are. It feels like existing users might be surprised if their existing keyMappers start throwing NPEs. But it would also be suprising if the NPE a user throws get swallowed as you mentioned.\nI agree that it's better not to catch the NPE and it possibly looks like users should have always been handling the case where the key is null anyway so it should be fine?", "url": "https://github.com/apache/kafka/pull/9186#discussion_r475198868", "createdAt": "2020-08-23T09:56:25Z", "author": {"login": "JoelWee"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,29 +60,46 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n-        // so ignore unless it is a left join\n+        // we do join iff the joining keys are equal, thus, if the mappedKey is null we cannot join\n+        // and just ignore the record.\n         //\n         // we also ignore the record if value is null, because in a key-value data model a null-value indicates\n         // an empty message (ie, there is nothing to be joined) -- this contrast SQL NULL semantics\n         // furthermore, on left/outer joins 'null' in ValueJoiner#apply() indicates a missing record --\n         // thus, to be consistent and to avoid ambiguous null semantics, null values are ignored\n-        if (key == null || value == null) {\n+        final Optional<K2> maybeMappedKey = maybeExtractMappedKey(key, value);\n+        if (!maybeMappedKey.isPresent()) {\n             LOG.warn(\n                 \"Skipping record due to null key or value. key=[{}] value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n                 key, value, context().topic(), context().partition(), context().offset()\n             );\n             droppedRecordsSensor.record();\n         } else {\n-            final K2 mappedKey = keyMapper.apply(key, value);\n-            final V2 value2 = mappedKey == null ? null : getValueOrNull(valueGetter.get(mappedKey));\n+            final K2 mappedKey = maybeMappedKey.get();\n+            final V2 value2 = getValueOrNull(valueGetter.get(mappedKey));\n             if (leftJoin || value2 != null) {\n                 context().forward(key, joiner.apply(value, value2));\n             }\n         }\n     }\n \n+    private Optional<K2> maybeExtractMappedKey(final K1 key, final V1 value) {\n+        if (value == null) {\n+            return Optional.empty();\n+        }\n+\n+        // we allow the case where the key is null but mappedKey is not null and thus\n+        // we need to guard against nullPointerExceptions. This may happen for GlobalKTables.\n+        // For KTables, the keyMapper simply returns the key, so this will never happen\n+        Optional<K2> maybeMappedKey;\n+        try {\n+            maybeMappedKey = Optional.ofNullable(keyMapper.apply(key, value));\n+        } catch (final NullPointerException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzMTI4OQ=="}, "originalCommit": {"oid": "6b4b3a4f7ff2ce46467a9fc6a32301604a53ab30"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwMDQ4Mg==", "bodyText": "Yeah the compatibility argument is reasonable, but you could say that users should have been handling the null case all along and it was just due to a bug in Streams that we never actually passed in a null key. If people aren't handling null, we should try and alert them quickly (and nothing catches people's attention faster than an NPE)", "url": "https://github.com/apache/kafka/pull/9186#discussion_r475800482", "createdAt": "2020-08-24T18:07:29Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,29 +60,46 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n-        // so ignore unless it is a left join\n+        // we do join iff the joining keys are equal, thus, if the mappedKey is null we cannot join\n+        // and just ignore the record.\n         //\n         // we also ignore the record if value is null, because in a key-value data model a null-value indicates\n         // an empty message (ie, there is nothing to be joined) -- this contrast SQL NULL semantics\n         // furthermore, on left/outer joins 'null' in ValueJoiner#apply() indicates a missing record --\n         // thus, to be consistent and to avoid ambiguous null semantics, null values are ignored\n-        if (key == null || value == null) {\n+        final Optional<K2> maybeMappedKey = maybeExtractMappedKey(key, value);\n+        if (!maybeMappedKey.isPresent()) {\n             LOG.warn(\n                 \"Skipping record due to null key or value. key=[{}] value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n                 key, value, context().topic(), context().partition(), context().offset()\n             );\n             droppedRecordsSensor.record();\n         } else {\n-            final K2 mappedKey = keyMapper.apply(key, value);\n-            final V2 value2 = mappedKey == null ? null : getValueOrNull(valueGetter.get(mappedKey));\n+            final K2 mappedKey = maybeMappedKey.get();\n+            final V2 value2 = getValueOrNull(valueGetter.get(mappedKey));\n             if (leftJoin || value2 != null) {\n                 context().forward(key, joiner.apply(value, value2));\n             }\n         }\n     }\n \n+    private Optional<K2> maybeExtractMappedKey(final K1 key, final V1 value) {\n+        if (value == null) {\n+            return Optional.empty();\n+        }\n+\n+        // we allow the case where the key is null but mappedKey is not null and thus\n+        // we need to guard against nullPointerExceptions. This may happen for GlobalKTables.\n+        // For KTables, the keyMapper simply returns the key, so this will never happen\n+        Optional<K2> maybeMappedKey;\n+        try {\n+            maybeMappedKey = Optional.ofNullable(keyMapper.apply(key, value));\n+        } catch (final NullPointerException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzMTI4OQ=="}, "originalCommit": {"oid": "6b4b3a4f7ff2ce46467a9fc6a32301604a53ab30"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODYyNzMxOnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDoyMTo1OFrOHE7xrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo1MDozOFrOHFv_Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzNTcyNg==", "bodyText": "Why remove this check? The valueGetter.get does an actual table lookup, which would be wasteful if we're going to skip this record anyways because the mapped key is null. Also, I'm pretty sure the lookup would throw an NPE", "url": "https://github.com/apache/kafka/pull/9186#discussion_r474935726", "createdAt": "2020-08-21T20:21:58Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,29 +60,46 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n-        // so ignore unless it is a left join\n+        // we do join iff the joining keys are equal, thus, if the mappedKey is null we cannot join\n+        // and just ignore the record.\n         //\n         // we also ignore the record if value is null, because in a key-value data model a null-value indicates\n         // an empty message (ie, there is nothing to be joined) -- this contrast SQL NULL semantics\n         // furthermore, on left/outer joins 'null' in ValueJoiner#apply() indicates a missing record --\n         // thus, to be consistent and to avoid ambiguous null semantics, null values are ignored\n-        if (key == null || value == null) {\n+        final Optional<K2> maybeMappedKey = maybeExtractMappedKey(key, value);\n+        if (!maybeMappedKey.isPresent()) {\n             LOG.warn(\n                 \"Skipping record due to null key or value. key=[{}] value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n                 key, value, context().topic(), context().partition(), context().offset()\n             );\n             droppedRecordsSensor.record();\n         } else {\n-            final K2 mappedKey = keyMapper.apply(key, value);\n-            final V2 value2 = mappedKey == null ? null : getValueOrNull(valueGetter.get(mappedKey));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b4b3a4f7ff2ce46467a9fc6a32301604a53ab30"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE5Njk0NA==", "bodyText": "maybeExtractMappedKey will return Optional.empty() if the mappedKey is null. So mappedKey will never be null in this portion of the code and we can skip the check I think", "url": "https://github.com/apache/kafka/pull/9186#discussion_r475196944", "createdAt": "2020-08-23T09:38:19Z", "author": {"login": "JoelWee"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,29 +60,46 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n-        // so ignore unless it is a left join\n+        // we do join iff the joining keys are equal, thus, if the mappedKey is null we cannot join\n+        // and just ignore the record.\n         //\n         // we also ignore the record if value is null, because in a key-value data model a null-value indicates\n         // an empty message (ie, there is nothing to be joined) -- this contrast SQL NULL semantics\n         // furthermore, on left/outer joins 'null' in ValueJoiner#apply() indicates a missing record --\n         // thus, to be consistent and to avoid ambiguous null semantics, null values are ignored\n-        if (key == null || value == null) {\n+        final Optional<K2> maybeMappedKey = maybeExtractMappedKey(key, value);\n+        if (!maybeMappedKey.isPresent()) {\n             LOG.warn(\n                 \"Skipping record due to null key or value. key=[{}] value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n                 key, value, context().topic(), context().partition(), context().offset()\n             );\n             droppedRecordsSensor.record();\n         } else {\n-            final K2 mappedKey = keyMapper.apply(key, value);\n-            final V2 value2 = mappedKey == null ? null : getValueOrNull(valueGetter.get(mappedKey));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzNTcyNg=="}, "originalCommit": {"oid": "6b4b3a4f7ff2ce46467a9fc6a32301604a53ab30"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5MTEyNg==", "bodyText": "Oh yeah, duh. Nevermind this \ud83d\ude42", "url": "https://github.com/apache/kafka/pull/9186#discussion_r475791126", "createdAt": "2020-08-24T17:50:38Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,29 +60,46 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n-        // so ignore unless it is a left join\n+        // we do join iff the joining keys are equal, thus, if the mappedKey is null we cannot join\n+        // and just ignore the record.\n         //\n         // we also ignore the record if value is null, because in a key-value data model a null-value indicates\n         // an empty message (ie, there is nothing to be joined) -- this contrast SQL NULL semantics\n         // furthermore, on left/outer joins 'null' in ValueJoiner#apply() indicates a missing record --\n         // thus, to be consistent and to avoid ambiguous null semantics, null values are ignored\n-        if (key == null || value == null) {\n+        final Optional<K2> maybeMappedKey = maybeExtractMappedKey(key, value);\n+        if (!maybeMappedKey.isPresent()) {\n             LOG.warn(\n                 \"Skipping record due to null key or value. key=[{}] value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n                 key, value, context().topic(), context().partition(), context().offset()\n             );\n             droppedRecordsSensor.record();\n         } else {\n-            final K2 mappedKey = keyMapper.apply(key, value);\n-            final V2 value2 = mappedKey == null ? null : getValueOrNull(valueGetter.get(mappedKey));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzNTcyNg=="}, "originalCommit": {"oid": "6b4b3a4f7ff2ce46467a9fc6a32301604a53ab30"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODY2MzM0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDoyOTozMVrOHE8JKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDoyOTozMVrOHE8JKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk0MTczOA==", "bodyText": "We need to remove this too, right? We shouldn't forward anything regardless of whether it's a left join, if the mapped key is null then there's nothing to map it to", "url": "https://github.com/apache/kafka/pull/9186#discussion_r474941738", "createdAt": "2020-08-21T20:29:31Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,29 +60,46 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n-        // so ignore unless it is a left join\n+        // we do join iff the joining keys are equal, thus, if the mappedKey is null we cannot join\n+        // and just ignore the record.\n         //\n         // we also ignore the record if value is null, because in a key-value data model a null-value indicates\n         // an empty message (ie, there is nothing to be joined) -- this contrast SQL NULL semantics\n         // furthermore, on left/outer joins 'null' in ValueJoiner#apply() indicates a missing record --\n         // thus, to be consistent and to avoid ambiguous null semantics, null values are ignored\n-        if (key == null || value == null) {\n+        final Optional<K2> maybeMappedKey = maybeExtractMappedKey(key, value);\n+        if (!maybeMappedKey.isPresent()) {\n             LOG.warn(\n                 \"Skipping record due to null key or value. key=[{}] value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n                 key, value, context().topic(), context().partition(), context().offset()\n             );\n             droppedRecordsSensor.record();\n         } else {\n-            final K2 mappedKey = keyMapper.apply(key, value);\n-            final V2 value2 = mappedKey == null ? null : getValueOrNull(valueGetter.get(mappedKey));\n+            final K2 mappedKey = maybeMappedKey.get();\n+            final V2 value2 = getValueOrNull(valueGetter.get(mappedKey));\n             if (leftJoin || value2 != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b4b3a4f7ff2ce46467a9fc6a32301604a53ab30"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDYwNDcxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo1MzoyNFrOHFwFaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzo1OToxOFrOHG67zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5Mjc0NQ==", "bodyText": "This seems a little subtle. Can we just return the actual mapped key (or .empty()) in this method, and keep the explicit null check for value up above?", "url": "https://github.com/apache/kafka/pull/9186#discussion_r475792745", "createdAt": "2020-08-24T17:53:24Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,29 +60,46 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n-        // so ignore unless it is a left join\n+        // we do join iff the joining keys are equal, thus, if the mappedKey is null we cannot join\n+        // and just ignore the record.\n         //\n         // we also ignore the record if value is null, because in a key-value data model a null-value indicates\n         // an empty message (ie, there is nothing to be joined) -- this contrast SQL NULL semantics\n         // furthermore, on left/outer joins 'null' in ValueJoiner#apply() indicates a missing record --\n         // thus, to be consistent and to avoid ambiguous null semantics, null values are ignored\n-        if (key == null || value == null) {\n+        final Optional<K2> maybeMappedKey = maybeExtractMappedKey(key, value);\n+        if (!maybeMappedKey.isPresent()) {\n             LOG.warn(\n                 \"Skipping record due to null key or value. key=[{}] value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n                 key, value, context().topic(), context().partition(), context().offset()\n             );\n             droppedRecordsSensor.record();\n         } else {\n-            final K2 mappedKey = keyMapper.apply(key, value);\n-            final V2 value2 = mappedKey == null ? null : getValueOrNull(valueGetter.get(mappedKey));\n+            final K2 mappedKey = maybeMappedKey.get();\n+            final V2 value2 = getValueOrNull(valueGetter.get(mappedKey));\n             if (leftJoin || value2 != null) {\n                 context().forward(key, joiner.apply(value, value2));\n             }\n         }\n     }\n \n+    private Optional<K2> maybeExtractMappedKey(final K1 key, final V1 value) {\n+        if (value == null) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b4b3a4f7ff2ce46467a9fc6a32301604a53ab30"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxOTA4Ng==", "bodyText": "Yep agreed \u2013 was originally worried about NPEs arising from the null value as well. Done now :)", "url": "https://github.com/apache/kafka/pull/9186#discussion_r477019086", "createdAt": "2020-08-26T03:59:18Z", "author": {"login": "JoelWee"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,29 +60,46 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n-        // so ignore unless it is a left join\n+        // we do join iff the joining keys are equal, thus, if the mappedKey is null we cannot join\n+        // and just ignore the record.\n         //\n         // we also ignore the record if value is null, because in a key-value data model a null-value indicates\n         // an empty message (ie, there is nothing to be joined) -- this contrast SQL NULL semantics\n         // furthermore, on left/outer joins 'null' in ValueJoiner#apply() indicates a missing record --\n         // thus, to be consistent and to avoid ambiguous null semantics, null values are ignored\n-        if (key == null || value == null) {\n+        final Optional<K2> maybeMappedKey = maybeExtractMappedKey(key, value);\n+        if (!maybeMappedKey.isPresent()) {\n             LOG.warn(\n                 \"Skipping record due to null key or value. key=[{}] value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n                 key, value, context().topic(), context().partition(), context().offset()\n             );\n             droppedRecordsSensor.record();\n         } else {\n-            final K2 mappedKey = keyMapper.apply(key, value);\n-            final V2 value2 = mappedKey == null ? null : getValueOrNull(valueGetter.get(mappedKey));\n+            final K2 mappedKey = maybeMappedKey.get();\n+            final V2 value2 = getValueOrNull(valueGetter.get(mappedKey));\n             if (leftJoin || value2 != null) {\n                 context().forward(key, joiner.apply(value, value2));\n             }\n         }\n     }\n \n+    private Optional<K2> maybeExtractMappedKey(final K1 key, final V1 value) {\n+        if (value == null) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5Mjc0NQ=="}, "originalCommit": {"oid": "6b4b3a4f7ff2ce46467a9fc6a32301604a53ab30"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTMyODY2OnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzoyNDo0M1rOHLSp2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo1NDoxNFrOHOvT_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwMjAxMA==", "bodyText": "It looks like we removed this comment about not ignoring it if it's a left join, but we didn't actually remove the code for that (yet). Which one is right? It seems like the comment is correct, and we shouldn't ignore the null key regardless of whether it is a left join. In that case, we should remove the leftJoin  part of the condition on line 78 below", "url": "https://github.com/apache/kafka/pull/9186#discussion_r481602010", "createdAt": "2020-09-02T03:24:43Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,23 +58,22 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n-        // so ignore unless it is a left join", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9616c64dfdc33481d0b831f80ecd0385801c761"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk5ODMzOA==", "bodyText": "Yea I agree the comment is right and we need to allow the case of non-null key with null mappedKey when it's a left join, since we view a null mappedKey as equivalent to \"key not found in GlobalKTable\" (except if the key is null, in which it should just be invalid I think?). Have made the changes now.", "url": "https://github.com/apache/kafka/pull/9186#discussion_r483998338", "createdAt": "2020-09-05T23:06:14Z", "author": {"login": "JoelWee"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,23 +58,22 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n-        // so ignore unless it is a left join", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwMjAxMA=="}, "originalCommit": {"oid": "e9616c64dfdc33481d0b831f80ecd0385801c761"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5NzE4Ng==", "bodyText": "Sorry, I think my original comment here was a bit ambiguous & confusingly phrased. What I meant was that the removal of the comment seemed correct to me, ie we should not make any special exceptions for the left join case and should remove the leftJoin part of the if (leftJoin || value2 != null)  check down on line 79", "url": "https://github.com/apache/kafka/pull/9186#discussion_r485097186", "createdAt": "2020-09-08T17:53:35Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,23 +58,22 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n-        // so ignore unless it is a left join", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwMjAxMA=="}, "originalCommit": {"oid": "e9616c64dfdc33481d0b831f80ecd0385801c761"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMDk0Mg==", "bodyText": "Right, thanks for the clarification! Wouldn't we still want the leftJoin in that case though? When we reach the leftJoin in the code, the mappedKey is never null but it might not exist in the GlobalKTable (and so value2 is null). If we're doing a leftJoin, then we'll want to allow these null values? (If not, the leftJoin is just the same as the normal join?)", "url": "https://github.com/apache/kafka/pull/9186#discussion_r485130942", "createdAt": "2020-09-08T18:56:45Z", "author": {"login": "JoelWee"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,23 +58,22 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n-        // so ignore unless it is a left join", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwMjAxMA=="}, "originalCommit": {"oid": "e9616c64dfdc33481d0b831f80ecd0385801c761"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxNzI3OA==", "bodyText": "Ah yeah sorry, I'm getting things mixed up here...this comment is referring to when the mappedKey is null while the condition I cited below now only applies to when the value is null.  Your reasoning sounds correct, we should still process the record in that case if it's a left join. But we should also remove this comment, since if the mappedKey is null then we drop it, regardless of if its a left join or any other", "url": "https://github.com/apache/kafka/pull/9186#discussion_r485217278", "createdAt": "2020-09-08T21:54:14Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,23 +58,22 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n-        // so ignore unless it is a left join", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwMjAxMA=="}, "originalCommit": {"oid": "e9616c64dfdc33481d0b831f80ecd0385801c761"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDA5NDg2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo1MDo1MFrOHOn5Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoxMDo1MVrOHOw9_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5NTczNQ==", "bodyText": "I guess we don't care about the original key any longer and only consider if keyMapper returns null or not?", "url": "https://github.com/apache/kafka/pull/9186#discussion_r485095735", "createdAt": "2020-09-08T17:50:50Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,22 +58,23 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n+        // We allow null keys unless {@code keyMapper} returns {@code null} and we ignore it as invalid.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c988afbb5d506474413ab387a45438cc0528d6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNjY1NA==", "bodyText": "I think that makes sense - but that will mean removing the previous logic of \"mappedKey is null implies key not found in global table\"? (Original line 62)", "url": "https://github.com/apache/kafka/pull/9186#discussion_r485126654", "createdAt": "2020-09-08T18:48:58Z", "author": {"login": "JoelWee"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,22 +58,23 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n+        // We allow null keys unless {@code keyMapper} returns {@code null} and we ignore it as invalid.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5NTczNQ=="}, "originalCommit": {"oid": "29c988afbb5d506474413ab387a45438cc0528d6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxODYyNQ==", "bodyText": "Well, if mappedKey is null then there can't be a match in the global table since we can't do a lookup with a null key. I think what @mjsax means here (correct me if wrong) is just that we could phrase it a bit differently to say something like\n// If the mappedKey is null, we ignore it as invalid. This should never happen for KTables \n// since keyMapper just returns the key, but for GlobalKTables a non-null key can result \n// in a null mappedKey. There can't be a match for a null mappedKey, so we drop it\n\n...or something. Thoughts?", "url": "https://github.com/apache/kafka/pull/9186#discussion_r485218625", "createdAt": "2020-09-08T21:57:39Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,22 +58,23 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n+        // We allow null keys unless {@code keyMapper} returns {@code null} and we ignore it as invalid.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5NTczNQ=="}, "originalCommit": {"oid": "29c988afbb5d506474413ab387a45438cc0528d6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NDQxMw==", "bodyText": "Yep makes sense. Have updated it now. Just noting here that this means we're changing a test we previously had", "url": "https://github.com/apache/kafka/pull/9186#discussion_r485244413", "createdAt": "2020-09-08T23:10:51Z", "author": {"login": "JoelWee"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,22 +58,23 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n+        // We allow null keys unless {@code keyMapper} returns {@code null} and we ignore it as invalid.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5NTczNQ=="}, "originalCommit": {"oid": "29c988afbb5d506474413ab387a45438cc0528d6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDA5NzIyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo1MToyNlrOHOn6mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo1MToyNlrOHOn6mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5NjA5MA==", "bodyText": "This condition seems unnecessary complex. Should it not just be:\nif (mappedKey == null || value == null) {", "url": "https://github.com/apache/kafka/pull/9186#discussion_r485096090", "createdAt": "2020-09-08T17:51:26Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,22 +58,23 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n+        // We allow null keys unless {@code keyMapper} returns {@code null} and we ignore it as invalid.\n+        // This happens for GlobalKTables but never for KTables since keyMapper just returns the key.\n+        // For non-null keys, if {@code keyMapper} returns {@code null} it implies there is no match,\n         // so ignore unless it is a left join\n         //\n         // we also ignore the record if value is null, because in a key-value data model a null-value indicates\n         // an empty message (ie, there is nothing to be joined) -- this contrast SQL NULL semantics\n         // furthermore, on left/outer joins 'null' in ValueJoiner#apply() indicates a missing record --\n         // thus, to be consistent and to avoid ambiguous null semantics, null values are ignored\n-        if (key == null || value == null) {\n+        final K2 mappedKey = keyMapper.apply(key, value);\n+        if ((key == null && mappedKey == null) || (!leftJoin && mappedKey == null) || value == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c988afbb5d506474413ab387a45438cc0528d6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDEwMDQ1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo1MjoyMlrOHOn8hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo1MjoyMlrOHOn8hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5NjU4MQ==", "bodyText": "At this point, we know that mappedKey != null, otherwise, we would have dropped the record.", "url": "https://github.com/apache/kafka/pull/9186#discussion_r485096581", "createdAt": "2020-09-08T17:52:22Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -58,22 +58,23 @@ public void init(final ProcessorContext context) {\n \n     @Override\n     public void process(final K1 key, final V1 value) {\n-        // we do join iff keys are equal, thus, if key is null we cannot join and just ignore the record\n-        // If {@code keyMapper} returns {@code null} it implies there is no match,\n+        // We allow null keys unless {@code keyMapper} returns {@code null} and we ignore it as invalid.\n+        // This happens for GlobalKTables but never for KTables since keyMapper just returns the key.\n+        // For non-null keys, if {@code keyMapper} returns {@code null} it implies there is no match,\n         // so ignore unless it is a left join\n         //\n         // we also ignore the record if value is null, because in a key-value data model a null-value indicates\n         // an empty message (ie, there is nothing to be joined) -- this contrast SQL NULL semantics\n         // furthermore, on left/outer joins 'null' in ValueJoiner#apply() indicates a missing record --\n         // thus, to be consistent and to avoid ambiguous null semantics, null values are ignored\n-        if (key == null || value == null) {\n+        final K2 mappedKey = keyMapper.apply(key, value);\n+        if ((key == null && mappedKey == null) || (!leftJoin && mappedKey == null) || value == null) {\n             LOG.warn(\n                 \"Skipping record due to null key or value. key=[{}] value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n                 key, value, context().topic(), context().partition(), context().offset()\n             );\n             droppedRecordsSensor.record();\n         } else {\n-            final K2 mappedKey = keyMapper.apply(key, value);\n             final V2 value2 = mappedKey == null ? null : getValueOrNull(valueGetter.get(mappedKey));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c988afbb5d506474413ab387a45438cc0528d6"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1924, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}