{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMzk5NzEx", "number": 8578, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjo0ODoyOVrOD3aP8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMToxMzozN1rOD3cMAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDI4MzM3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/GlobalThreadShutDownOrderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjo0ODoyOVrOGNpz8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjo0ODoyOVrOGNpz8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2OTcxMw==", "bodyText": "I've standardized all the usages to be just \"app\", followed by the generated name, since the generated name contains the same information that we previously hand-wrote into the prefix or suffix. All we really need to do is ensure that the app id won't collide with a group name that we might use in a verification consumer, for example. For that reason, I've never used the generated name \"plain\", but always scoped it to the usage (app id, group id, input topic, etc.).\nIt's not super important to apply these ideas universally, but I felt it would make it easier to write more tests like it in the future if I just made a full pass on all the tests to make them all look the same.", "url": "https://github.com/apache/kafka/pull/8578#discussion_r416969713", "createdAt": "2020-04-28T22:48:29Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/GlobalThreadShutDownOrderTest.java", "diffHunk": "@@ -101,8 +102,8 @@ public void before() throws Exception {\n         builder = new StreamsBuilder();\n         createTopics();\n         streamsConfiguration = new Properties();\n-        final String applicationId = \"global-thread-shutdown-test\" + testName.getMethodName();\n-        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n+        final String safeTestName = safeUniqueTestName(getClass(), testName);\n+        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDI5MjM3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/LagFetchIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjo1MTo0OVrOGNp5EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjo1MTo0OVrOGNp5EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3MTAyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"lag-fetch-\" + safeTestName);\n          \n          \n            \n                    streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);", "url": "https://github.com/apache/kafka/pull/8578#discussion_r416971025", "createdAt": "2020-04-28T22:51:49Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/LagFetchIntegrationTest.java", "diffHunk": "@@ -88,16 +89,17 @@\n     private String stateStoreName;\n \n     @Rule\n-    public TestName name = new TestName();\n+    public TestName testName = new TestName();\n \n     @Before\n     public void before() {\n-        inputTopicName = \"input-topic-\" + name.getMethodName();\n-        outputTopicName = \"output-topic-\" + name.getMethodName();\n-        stateStoreName = \"lagfetch-test-store\" + name.getMethodName();\n+        final String safeTestName = safeUniqueTestName(getClass(), testName);\n+        inputTopicName = \"input-topic-\" + safeTestName;\n+        outputTopicName = \"output-topic-\" + safeTestName;\n+        stateStoreName = \"lagfetch-test-store\" + safeTestName;\n \n         streamsConfiguration = new Properties();\n-        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"lag-fetch-\" + name.getMethodName());\n+        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"lag-fetch-\" + safeTestName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDMwMjc4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjo1NjoxM1rOGNp_Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxOToyODo1OVrOGONwAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3MjU3NQ==", "bodyText": "This is really the fix for KAFKA-9875. The other change just hopefully reduces the probability that ignoring the exceptions could cause subsequent failures (e.g., if the topics don't get deleted before the next test, at least the next one will have different topic names).\nI've verified that all usages of this method are ok to ignore potential exceptions. Namely, as long as the test logic itself doesn't want to ensure that any topics got deleted, and as long as this method is the last line in the method, then it should be fine just to ignore failures here.\nI also considered just deleting the method, but if it does succeed, then it leaves less garbage around for subsequent tests, so it feels better to at least attempt a cleanup.", "url": "https://github.com/apache/kafka/pull/8578#discussion_r416972575", "createdAt": "2020-04-28T22:56:13Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "diffHunk": "@@ -145,12 +162,12 @@ public static void cleanStateBeforeTest(final EmbeddedKafkaCluster cluster, fina\n         }\n     }\n \n-    public static void cleanStateAfterTest(final EmbeddedKafkaCluster cluster, final KafkaStreams driver) {\n-        driver.cleanUp();\n+    public static void quietlyCleanStateAfterTest(final EmbeddedKafkaCluster cluster, final KafkaStreams driver) {\n         try {\n+            driver.cleanUp();\n             cluster.deleteAllTopicsAndWait(DEFAULT_TIMEOUT);\n-        } catch (final InterruptedException e) {\n-            throw new RuntimeException(e);\n+        } catch (final RuntimeException | InterruptedException e) {\n+            LOG.warn(\"Ignoring failure to clean test state\", e);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMzk4Mw==", "bodyText": "req: Actually deleting topics after test is critical for some tests: I've encountered some cases where the same topics are reused mistakenly across different test cases within the single class. But I feel that it is better to put the topic deletion in the @after function while leaving cleanUp() as part of the test function itself.", "url": "https://github.com/apache/kafka/pull/8578#discussion_r417013983", "createdAt": "2020-04-29T01:05:00Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "diffHunk": "@@ -145,12 +162,12 @@ public static void cleanStateBeforeTest(final EmbeddedKafkaCluster cluster, fina\n         }\n     }\n \n-    public static void cleanStateAfterTest(final EmbeddedKafkaCluster cluster, final KafkaStreams driver) {\n-        driver.cleanUp();\n+    public static void quietlyCleanStateAfterTest(final EmbeddedKafkaCluster cluster, final KafkaStreams driver) {\n         try {\n+            driver.cleanUp();\n             cluster.deleteAllTopicsAndWait(DEFAULT_TIMEOUT);\n-        } catch (final InterruptedException e) {\n-            throw new RuntimeException(e);\n+        } catch (final RuntimeException | InterruptedException e) {\n+            LOG.warn(\"Ignoring failure to clean test state\", e);\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3MjU3NQ=="}, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NDcxMw==", "bodyText": "I share your concern, but I'm not sure about the conclusion.\nYes, if there is state (such as a topic) that leaks from one test to the next, it can certainly cause difficult-to-debug failures. However, there are multiple things we can do to prevent/mitigate it:\n\ndelete state after tests (not to leave any garbage behind)\ndelete state before the tests (to ensure a clean slate for the test)\nchoose unique names for all resources of each test (this is where the other part of this PR comes in)\n\nAny one of these should be sufficient to prevent state from leaking in between tests, and most of these tests do all three. In other words, we have 3x redundancy guarding against such test pollution. If you look at all three of these measures, the clean up after tests is actually the most optional, since tests can't tolerate failures in the clean up before (because it also creates necessary topics), and choosing unique topic names per test is bulletproof and easy to fix (once we know what the problem is).\nWhether the cleanup is part of the test or in the @After method, the outcome is the same, if the method throws an exception, the test will fail. The downside of After is that it requires you to store the topic names in mutable class-level fields, which actually makes it more awkward to choose unique names per test.", "url": "https://github.com/apache/kafka/pull/8578#discussion_r417044713", "createdAt": "2020-04-29T03:16:15Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "diffHunk": "@@ -145,12 +162,12 @@ public static void cleanStateBeforeTest(final EmbeddedKafkaCluster cluster, fina\n         }\n     }\n \n-    public static void cleanStateAfterTest(final EmbeddedKafkaCluster cluster, final KafkaStreams driver) {\n-        driver.cleanUp();\n+    public static void quietlyCleanStateAfterTest(final EmbeddedKafkaCluster cluster, final KafkaStreams driver) {\n         try {\n+            driver.cleanUp();\n             cluster.deleteAllTopicsAndWait(DEFAULT_TIMEOUT);\n-        } catch (final InterruptedException e) {\n-            throw new RuntimeException(e);\n+        } catch (final RuntimeException | InterruptedException e) {\n+            LOG.warn(\"Ignoring failure to clean test state\", e);\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3MjU3NQ=="}, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU1ODA3OQ==", "bodyText": "Sounds good. I think this is convincing :)", "url": "https://github.com/apache/kafka/pull/8578#discussion_r417558079", "createdAt": "2020-04-29T19:28:10Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "diffHunk": "@@ -145,12 +162,12 @@ public static void cleanStateBeforeTest(final EmbeddedKafkaCluster cluster, fina\n         }\n     }\n \n-    public static void cleanStateAfterTest(final EmbeddedKafkaCluster cluster, final KafkaStreams driver) {\n-        driver.cleanUp();\n+    public static void quietlyCleanStateAfterTest(final EmbeddedKafkaCluster cluster, final KafkaStreams driver) {\n         try {\n+            driver.cleanUp();\n             cluster.deleteAllTopicsAndWait(DEFAULT_TIMEOUT);\n-        } catch (final InterruptedException e) {\n-            throw new RuntimeException(e);\n+        } catch (final RuntimeException | InterruptedException e) {\n+            LOG.warn(\"Ignoring failure to clean test state\", e);\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3MjU3NQ=="}, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU1ODUyOA==", "bodyText": "Whew! :)", "url": "https://github.com/apache/kafka/pull/8578#discussion_r417558528", "createdAt": "2020-04-29T19:28:59Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "diffHunk": "@@ -145,12 +162,12 @@ public static void cleanStateBeforeTest(final EmbeddedKafkaCluster cluster, fina\n         }\n     }\n \n-    public static void cleanStateAfterTest(final EmbeddedKafkaCluster cluster, final KafkaStreams driver) {\n-        driver.cleanUp();\n+    public static void quietlyCleanStateAfterTest(final EmbeddedKafkaCluster cluster, final KafkaStreams driver) {\n         try {\n+            driver.cleanUp();\n             cluster.deleteAllTopicsAndWait(DEFAULT_TIMEOUT);\n-        } catch (final InterruptedException e) {\n-            throw new RuntimeException(e);\n+        } catch (final RuntimeException | InterruptedException e) {\n+            LOG.warn(\"Ignoring failure to clean test state\", e);\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3MjU3NQ=="}, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDMwMzU0OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/test/StreamsTestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjo1NjozM1rOGNp_nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjo1NjozM1rOGNp_nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3MjcwMA==", "bodyText": "just fixing the formatting.", "url": "https://github.com/apache/kafka/pull/8578#discussion_r416972700", "createdAt": "2020-04-28T22:56:33Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/test/StreamsTestUtils.java", "diffHunk": "@@ -106,7 +106,9 @@ public static void startKafkaStreamsAndWaitForRunningState(final KafkaStreams ka\n         kafkaStreams.start();\n         assertThat(\n             \"KafkaStreams did not transit to RUNNING state within \" + timeoutMs + \" milli seconds.\",\n-            countDownLatch.await(timeoutMs, TimeUnit.MILLISECONDS), equalTo(true));\n+            countDownLatch.await(timeoutMs, TimeUnit.MILLISECONDS),\n+            equalTo(true)\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDU5MjYzOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/LagFetchIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMTowODo0N1rOGNskVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMzoyNjo0MVrOGNuiDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNDg3MQ==", "bodyText": "Somewhere else it is set as \"group-\" + safeTestName, is this change intentional?", "url": "https://github.com/apache/kafka/pull/8578#discussion_r417014871", "createdAt": "2020-04-29T01:08:47Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/LagFetchIntegrationTest.java", "diffHunk": "@@ -106,7 +108,7 @@ public void before() {\n \n         consumerConfiguration = new Properties();\n         consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n-        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, name.getMethodName() + \"-consumer\");\n+        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, safeTestName + \"-consumer\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NzA1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, safeTestName + \"-consumer\");\n          \n          \n            \n                    consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n          \n      \n    \n    \n  \n\nNo, I just got tired of messing with every tests' idiosyncrasies.", "url": "https://github.com/apache/kafka/pull/8578#discussion_r417047054", "createdAt": "2020-04-29T03:26:41Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/LagFetchIntegrationTest.java", "diffHunk": "@@ -106,7 +108,7 @@ public void before() {\n \n         consumerConfiguration = new Properties();\n         consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n-        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, name.getMethodName() + \"-consumer\");\n+        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, safeTestName + \"-consumer\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNDg3MQ=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDU5NzY3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/OptimizedKTableIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMToxMToyOVrOGNsnCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxOToyOTowNlrOGONwTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNTU2Mg==", "bodyText": "Is it safer to encode the appID as part of the dir path to avoid collision?", "url": "https://github.com/apache/kafka/pull/8578#discussion_r417015562", "createdAt": "2020-04-29T01:11:29Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/OptimizedKTableIntegrationTest.java", "diffHunk": "@@ -215,13 +216,13 @@ public void onRestoreEnd(final TopicPartition topicPartition, final String store\n     }\n \n     private Properties streamsConfiguration() {\n-        final String applicationId = \"streamsApp\";\n+        final String safeTestName = safeUniqueTestName(getClass(), testName);\n         final Properties config = new Properties();\n         config.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, StreamsConfig.OPTIMIZE);\n-        config.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId + name.getMethodName());\n+        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n         config.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"localhost:\" + (++port));\n         config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n-        config.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(applicationId).getPath());\n+        config.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0MDIwMg==", "bodyText": "I wavered on this point, but each time you call tempDirectory, it should give you a completely new directory:\n     * Create a temporary relative directory in the default temporary-file directory with the given prefix.\n     *\n     * @param prefix The prefix of the temporary directory, if null using \"kafka-\" as default prefix\n\nSo the prefix seems to be nice only for documenting which test a directory is for, not for enforcing any kind of test/directory uniqueness. I felt like it added more noise than value, so I just dropped all the prefixes.", "url": "https://github.com/apache/kafka/pull/8578#discussion_r417040202", "createdAt": "2020-04-29T02:56:43Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/OptimizedKTableIntegrationTest.java", "diffHunk": "@@ -215,13 +216,13 @@ public void onRestoreEnd(final TopicPartition topicPartition, final String store\n     }\n \n     private Properties streamsConfiguration() {\n-        final String applicationId = \"streamsApp\";\n+        final String safeTestName = safeUniqueTestName(getClass(), testName);\n         final Properties config = new Properties();\n         config.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, StreamsConfig.OPTIMIZE);\n-        config.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId + name.getMethodName());\n+        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n         config.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"localhost:\" + (++port));\n         config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n-        config.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(applicationId).getPath());\n+        config.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNTU2Mg=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU1ODYwNQ==", "bodyText": "Yeah I was thinking about debugging purposes as well. If it is more noise the usefulness, I'm fine with dropping it.", "url": "https://github.com/apache/kafka/pull/8578#discussion_r417558605", "createdAt": "2020-04-29T19:29:06Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/OptimizedKTableIntegrationTest.java", "diffHunk": "@@ -215,13 +216,13 @@ public void onRestoreEnd(final TopicPartition topicPartition, final String store\n     }\n \n     private Properties streamsConfiguration() {\n-        final String applicationId = \"streamsApp\";\n+        final String safeTestName = safeUniqueTestName(getClass(), testName);\n         final Properties config = new Properties();\n         config.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, StreamsConfig.OPTIMIZE);\n-        config.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId + name.getMethodName());\n+        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n         config.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"localhost:\" + (++port));\n         config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n-        config.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(applicationId).getPath());\n+        config.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNTU2Mg=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDU5OTQyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/ResetPartitionTimeIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMToxMjozMVrOGNsoDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMzoyNDo0NlrOGNugYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNTgyMA==", "bodyText": "nit: we can put kafkaStreams in a try block.", "url": "https://github.com/apache/kafka/pull/8578#discussion_r417015820", "createdAt": "2020-04-29T01:12:31Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/ResetPartitionTimeIntegrationTest.java", "diffHunk": "@@ -156,7 +157,7 @@ public void shouldPreservePartitionTimeOnKafkaStreamRestart() {\n             assertThat(lastRecordedTimestamp, is(5000L));\n         } finally {\n             kafkaStreams.close();\n-            cleanStateAfterTest(CLUSTER, kafkaStreams);\n+            quietlyCleanStateAfterTest(CLUSTER, kafkaStreams);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NjYyNA==", "bodyText": "Unfortunately, we generally can't use try-with-resources for these tests, since that makes the kafkaStreams reference out of scope for the finally block. We'd have to allow a reference to kafkaStreams to escape the try {} block to reference it either in finally or in an After method, which is just as messy as it currently is, if not more.", "url": "https://github.com/apache/kafka/pull/8578#discussion_r417046624", "createdAt": "2020-04-29T03:24:46Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/ResetPartitionTimeIntegrationTest.java", "diffHunk": "@@ -156,7 +157,7 @@ public void shouldPreservePartitionTimeOnKafkaStreamRestart() {\n             assertThat(lastRecordedTimestamp, is(5000L));\n         } finally {\n             kafkaStreams.close();\n-            cleanStateAfterTest(CLUSTER, kafkaStreams);\n+            quietlyCleanStateAfterTest(CLUSTER, kafkaStreams);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNTgyMA=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDYwMDk2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/SuppressionDurabilityIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMToxMzozN1rOGNspEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMToxMzozN1rOGNspEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNjA4Mg==", "bodyText": "nit: ditto here, we can put driver in the try block. And ditto elsewhere.", "url": "https://github.com/apache/kafka/pull/8578#discussion_r417016082", "createdAt": "2020-04-29T01:13:37Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/SuppressionDurabilityIntegrationTest.java", "diffHunk": "@@ -243,7 +251,7 @@ public void shouldRecoverBufferAfterShutdown() {\n \n         } finally {\n             driver.close();\n-            cleanStateAfterTest(CLUSTER, driver);\n+            quietlyCleanStateAfterTest(CLUSTER, driver);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2820, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}