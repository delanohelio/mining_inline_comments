{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzODQ5Nzcw", "number": 9708, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1MDo1NFrOFDmx7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDozMzo0NlrOFFhArA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzI1NDIxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/StreamJoined.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1MDo1NFrOIDV5GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1MDo1NFrOIDV5GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3NTMyMQ==", "bodyText": "I think you meant this here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        null\n          \n          \n            \n                        new HashMap<>()", "url": "https://github.com/apache/kafka/pull/9708#discussion_r540375321", "createdAt": "2020-12-10T17:50:54Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/StreamJoined.java", "diffHunk": "@@ -267,7 +296,49 @@ private StreamJoined(final Serde<K> keySerde,\n             thisStoreSupplier,\n             otherStoreSupplier,\n             name,\n-            storeName\n+            storeName,\n+            loggingEnabled,\n+            topicConfig\n+        );\n+    }\n+\n+    /**\n+     * Configures logging for both state stores. The changelog will be created with the provided configs.\n+     * <p>\n+     * Note: Any unrecognized configs will be ignored\n+     * @param config  configs applied to the changelog topic\n+     * @return            a new {@link StreamJoined} configured with logging enabled\n+     */\n+    public StreamJoined<K, V1, V2> withLoggingEnabled(final Map<String, String> config) {\n+\n+        return new StreamJoined<>(\n+            keySerde,\n+            valueSerde,\n+            otherValueSerde,\n+            thisStoreSupplier,\n+            otherStoreSupplier,\n+            name,\n+            storeName,\n+            true,\n+            config\n+        );\n+    }\n+\n+    /**\n+     * Disable change logging for both state stores.\n+     * @return            a new {@link StreamJoined} configured with logging disabled\n+     */\n+    public StreamJoined<K, V1, V2> withLoggingDisabled() {\n+        return new StreamJoined<>(\n+            keySerde,\n+            valueSerde,\n+            otherValueSerde,\n+            thisStoreSupplier,\n+            otherStoreSupplier,\n+            name,\n+            storeName,\n+            false,\n+            null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a815bb29d52cc52fd6e908e0d35912c35ab3b7"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzI2NTY5OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1MzoyOVrOIDV_1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTo0MDowNlrOIGGpsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3NzA0NA==", "bodyText": "It seems like these would pass by default. Maybe we should check set some log configs and then check that they got propagated ?", "url": "https://github.com/apache/kafka/pull/9708#discussion_r540377044", "createdAt": "2020-12-10T17:53:29Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "diffHunk": "@@ -152,6 +155,52 @@ private void shouldLogAndMeterOnSkippedRecordsWithNullValue(final String builtIn\n         }\n     }\n \n+    @Test\n+    public void shouldDisableLoggingOnStreamJoined() {\n+\n+        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n+        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined.with(Serdes.String(), Serdes.Integer(), Serdes.Integer()).withStoreName(\"store\").withLoggingDisabled();\n+\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+\n+        left.join(\n+            right,\n+            (value1, value2) -> value1 + value2,\n+            joinWindows,\n+            streamJoined);\n+\n+        final Topology topology = builder.build();\n+        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n+\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(false));\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(false));\n+    }\n+\n+    @Test\n+    public void shouldEnableLoggingWithCustomConfigOnStreamJoined() {\n+\n+        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n+        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined.with(Serdes.String(), Serdes.Integer(), Serdes.Integer()).withStoreName(\"store\").withLoggingEnabled(Collections.emptyMap());\n+\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+\n+        left.join(\n+            right,\n+            (value1, value2) -> value1 + value2,\n+            joinWindows,\n+            streamJoined);\n+\n+        final Topology topology = builder.build();\n+        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n+\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(true));\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a815bb29d52cc52fd6e908e0d35912c35ab3b7"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQzMTM2OA==", "bodyText": "Yeah it does pass by default. I experimented with passing the logs in but I wasn't able to find a good way to confirm that the logs I was passing were getting set somewhere. Do you know where they're exposed for me to check? Materialized doesn't seem to check this either", "url": "https://github.com/apache/kafka/pull/9708#discussion_r540431368", "createdAt": "2020-12-10T19:17:38Z", "author": {"login": "lct45"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "diffHunk": "@@ -152,6 +155,52 @@ private void shouldLogAndMeterOnSkippedRecordsWithNullValue(final String builtIn\n         }\n     }\n \n+    @Test\n+    public void shouldDisableLoggingOnStreamJoined() {\n+\n+        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n+        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined.with(Serdes.String(), Serdes.Integer(), Serdes.Integer()).withStoreName(\"store\").withLoggingDisabled();\n+\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+\n+        left.join(\n+            right,\n+            (value1, value2) -> value1 + value2,\n+            joinWindows,\n+            streamJoined);\n+\n+        final Topology topology = builder.build();\n+        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n+\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(false));\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(false));\n+    }\n+\n+    @Test\n+    public void shouldEnableLoggingWithCustomConfigOnStreamJoined() {\n+\n+        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n+        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined.with(Serdes.String(), Serdes.Integer(), Serdes.Integer()).withStoreName(\"store\").withLoggingEnabled(Collections.emptyMap());\n+\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+\n+        left.join(\n+            right,\n+            (value1, value2) -> value1 + value2,\n+            joinWindows,\n+            streamJoined);\n+\n+        final Topology topology = builder.build();\n+        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n+\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(true));\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3NzA0NA=="}, "originalCommit": {"oid": "52a815bb29d52cc52fd6e908e0d35912c35ab3b7"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI3MTM0NA==", "bodyText": "Maybe there is an easier way, but I found the following:\nSet the config to:\n        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined\n            .with(Serdes.String(), Serdes.Integer(), Serdes.Integer())\n            .withStoreName(\"store\")\n            .withLoggingEnabled(Collections.singletonMap(\"test\", \"property\"));\n\nand then check it:\n        internalTopologyBuilder.buildSubtopology(0);\n\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(true));\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(true));\n        assertThat(internalTopologyBuilder.topicGroups().get(0).stateChangelogTopics.size(), equalTo(2));\n        for (final InternalTopicConfig config : internalTopologyBuilder.topicGroups().get(0).stateChangelogTopics.values()) {\n            assertThat(\n                config.getProperties(Collections.emptyMap(), 0).get(\"test\"),\n                equalTo(\"property\")\n            );\n        }\n\nWithout\nassertThat(internalTopologyBuilder.topicGroups().get(0).stateChangelogTopics.size(), equalTo(2));\n\nthe test would pass without checking the config if buildSubtopology() is not called because no changelog topics would be registered in the topology. So it basically checks that buildSubtopology() is called.", "url": "https://github.com/apache/kafka/pull/9708#discussion_r543271344", "createdAt": "2020-12-15T11:40:06Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "diffHunk": "@@ -152,6 +155,52 @@ private void shouldLogAndMeterOnSkippedRecordsWithNullValue(final String builtIn\n         }\n     }\n \n+    @Test\n+    public void shouldDisableLoggingOnStreamJoined() {\n+\n+        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n+        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined.with(Serdes.String(), Serdes.Integer(), Serdes.Integer()).withStoreName(\"store\").withLoggingDisabled();\n+\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+\n+        left.join(\n+            right,\n+            (value1, value2) -> value1 + value2,\n+            joinWindows,\n+            streamJoined);\n+\n+        final Topology topology = builder.build();\n+        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n+\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(false));\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(false));\n+    }\n+\n+    @Test\n+    public void shouldEnableLoggingWithCustomConfigOnStreamJoined() {\n+\n+        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n+        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined.with(Serdes.String(), Serdes.Integer(), Serdes.Integer()).withStoreName(\"store\").withLoggingEnabled(Collections.emptyMap());\n+\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+\n+        left.join(\n+            right,\n+            (value1, value2) -> value1 + value2,\n+            joinWindows,\n+            streamJoined);\n+\n+        final Topology topology = builder.build();\n+        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n+\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(true));\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3NzA0NA=="}, "originalCommit": {"oid": "52a815bb29d52cc52fd6e908e0d35912c35ab3b7"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzIzOTI3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/StreamJoined.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoyNTowM1rOIGDrUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoyNTowM1rOIGDrUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyMjYxMQ==", "bodyText": "I guess both can be declared as final, right?", "url": "https://github.com/apache/kafka/pull/9708#discussion_r543222611", "createdAt": "2020-12-15T10:25:03Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/StreamJoined.java", "diffHunk": "@@ -36,6 +39,8 @@\n     protected final WindowBytesStoreSupplier otherStoreSupplier;\n     protected final String name;\n     protected final String storeName;\n+    protected boolean loggingEnabled;\n+    protected Map<String, String> topicConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ebdd51af2a2400d5b088fc5b14da25a7c7dba3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzI2NjI4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDozMDo0M1rOIGD7Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDozMDo0M1rOIGD7Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNjY0Mw==", "bodyText": "Suggestion:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined.with(Serdes.String(), Serdes.Integer(), Serdes.Integer()).withStoreName(\"store\").withLoggingDisabled();\n          \n          \n            \n                    final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined\n          \n          \n            \n                        .with(Serdes.String(), Serdes.Integer(), Serdes.Integer())\n          \n          \n            \n                        .withStoreName(\"store\")\n          \n          \n            \n                        .withLoggingDisabled();", "url": "https://github.com/apache/kafka/pull/9708#discussion_r543226643", "createdAt": "2020-12-15T10:30:43Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "diffHunk": "@@ -152,6 +155,52 @@ private void shouldLogAndMeterOnSkippedRecordsWithNullValue(final String builtIn\n         }\n     }\n \n+    @Test\n+    public void shouldDisableLoggingOnStreamJoined() {\n+\n+        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n+        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined.with(Serdes.String(), Serdes.Integer(), Serdes.Integer()).withStoreName(\"store\").withLoggingDisabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ebdd51af2a2400d5b088fc5b14da25a7c7dba3"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzI3MDY0OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDozMTozN1rOIGD9lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDozMTozN1rOIGD9lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNzI4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    left.join(\n          \n          \n            \n                        right,\n          \n          \n            \n                        (value1, value2) -> value1 + value2,\n          \n          \n            \n                        joinWindows,\n          \n          \n            \n                        streamJoined);\n          \n          \n            \n                    left.join(\n          \n          \n            \n                        right,\n          \n          \n            \n                        (value1, value2) -> value1 + value2,\n          \n          \n            \n                        joinWindows,\n          \n          \n            \n                        streamJoined\n          \n          \n            \n                    );", "url": "https://github.com/apache/kafka/pull/9708#discussion_r543227285", "createdAt": "2020-12-15T10:31:37Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "diffHunk": "@@ -152,6 +155,52 @@ private void shouldLogAndMeterOnSkippedRecordsWithNullValue(final String builtIn\n         }\n     }\n \n+    @Test\n+    public void shouldDisableLoggingOnStreamJoined() {\n+\n+        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n+        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined.with(Serdes.String(), Serdes.Integer(), Serdes.Integer()).withStoreName(\"store\").withLoggingDisabled();\n+\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+\n+        left.join(\n+            right,\n+            (value1, value2) -> value1 + value2,\n+            joinWindows,\n+            streamJoined);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ebdd51af2a2400d5b088fc5b14da25a7c7dba3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzI3OTQ2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDozMzozM1rOIGECtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDozMzozM1rOIGECtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyODU5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined.with(Serdes.String(), Serdes.Integer(), Serdes.Integer()).withStoreName(\"store\").withLoggingEnabled(Collections.emptyMap());\n          \n          \n            \n                    final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined\n          \n          \n            \n                        .with(Serdes.String(), Serdes.Integer(), Serdes.Integer())\n          \n          \n            \n                        .withStoreName(\"store\")\n          \n          \n            \n                        .withLoggingEnabled(Collections.emptyMap());", "url": "https://github.com/apache/kafka/pull/9708#discussion_r543228596", "createdAt": "2020-12-15T10:33:33Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "diffHunk": "@@ -152,6 +155,52 @@ private void shouldLogAndMeterOnSkippedRecordsWithNullValue(final String builtIn\n         }\n     }\n \n+    @Test\n+    public void shouldDisableLoggingOnStreamJoined() {\n+\n+        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n+        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined.with(Serdes.String(), Serdes.Integer(), Serdes.Integer()).withStoreName(\"store\").withLoggingDisabled();\n+\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+\n+        left.join(\n+            right,\n+            (value1, value2) -> value1 + value2,\n+            joinWindows,\n+            streamJoined);\n+\n+        final Topology topology = builder.build();\n+        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n+\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(false));\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(false));\n+    }\n+\n+    @Test\n+    public void shouldEnableLoggingWithCustomConfigOnStreamJoined() {\n+\n+        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n+        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined.with(Serdes.String(), Serdes.Integer(), Serdes.Integer()).withStoreName(\"store\").withLoggingEnabled(Collections.emptyMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ebdd51af2a2400d5b088fc5b14da25a7c7dba3"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzI4MDQ0OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDozMzo0NlrOIGEDSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDozMzo0NlrOIGEDSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyODc0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    left.join(\n          \n          \n            \n                        right,\n          \n          \n            \n                        (value1, value2) -> value1 + value2,\n          \n          \n            \n                        joinWindows,\n          \n          \n            \n                        streamJoined);\n          \n          \n            \n                    left.join(\n          \n          \n            \n                        right,\n          \n          \n            \n                        (value1, value2) -> value1 + value2,\n          \n          \n            \n                        joinWindows,\n          \n          \n            \n                        streamJoined\n          \n          \n            \n                    );", "url": "https://github.com/apache/kafka/pull/9708#discussion_r543228747", "createdAt": "2020-12-15T10:33:46Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "diffHunk": "@@ -152,6 +155,52 @@ private void shouldLogAndMeterOnSkippedRecordsWithNullValue(final String builtIn\n         }\n     }\n \n+    @Test\n+    public void shouldDisableLoggingOnStreamJoined() {\n+\n+        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n+        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined.with(Serdes.String(), Serdes.Integer(), Serdes.Integer()).withStoreName(\"store\").withLoggingDisabled();\n+\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+\n+        left.join(\n+            right,\n+            (value1, value2) -> value1 + value2,\n+            joinWindows,\n+            streamJoined);\n+\n+        final Topology topology = builder.build();\n+        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n+\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(false));\n+        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(false));\n+    }\n+\n+    @Test\n+    public void shouldEnableLoggingWithCustomConfigOnStreamJoined() {\n+\n+        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n+        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined.with(Serdes.String(), Serdes.Integer(), Serdes.Integer()).withStoreName(\"store\").withLoggingEnabled(Collections.emptyMap());\n+\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n+\n+        left.join(\n+            right,\n+            (value1, value2) -> value1 + value2,\n+            joinWindows,\n+            streamJoined);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ebdd51af2a2400d5b088fc5b14da25a7c7dba3"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3710, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}