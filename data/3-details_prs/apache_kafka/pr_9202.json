{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNjQ4NDY4", "number": 9202, "title": "KAFKA-10401: Fix the currentStateTimeStamp doesn't get set correctly", "bodyText": "Fix the currentStateTimeStamp doesn't get set in GROUP_METADATA_VALUE_SCHEMA_V3, and did a small refactor to use the GROUP_VALUE_SCHEMAS.size - 1 replace the default hard-coded max version number. Also add test for it.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-08-20T04:28:02Z", "url": "https://github.com/apache/kafka/pull/9202", "merged": true, "mergeCommit": {"oid": "5cf5cc2fc0141eedc6a3204162b99ca67df27109"}, "closed": true, "closedAt": "2020-09-21T20:35:17Z", "author": {"login": "showuon"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAobCNAH2gAyNDcwNjQ4NDY4OmZkODc4N2EzZGYyNzllYmQ1ZTgwMjAwODcwMGIxYzQxYTY1ZjYwZWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLGPbWgFqTQ5MjgwMDU5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fd8787a3df279ebd5e802008700b1c41a65f60ec", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/fd8787a3df279ebd5e802008700b1c41a65f60ec", "committedDate": "2020-08-20T04:22:58Z", "message": "KAFKA-10401: Fix the currentStateTimeStamp doesn't get set in GROUP_METADATA_VALUE_SCHEMA_V3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyODk3NzM2", "url": "https://github.com/apache/kafka/pull/9202#pullrequestreview-472897736", "createdAt": "2020-08-22T04:53:45Z", "commit": {"oid": "fd8787a3df279ebd5e802008700b1c41a65f60ec"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNDo1Mzo0NVrOHFCidA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNDo1NDoxNlrOHFCilA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0NjUxNg==", "bodyText": "We should use an if/else here, no point in using pattern matching.", "url": "https://github.com/apache/kafka/pull/9202#discussion_r475046516", "createdAt": "2020-08-22T04:53:45Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala", "diffHunk": "@@ -1401,16 +1401,17 @@ object GroupMetadataManager {\n       val version = buffer.getShort\n       val valueSchema = schemaForGroupValue(version)\n       val value = valueSchema.read(buffer)\n+      val maxVersion = GROUP_VALUE_SCHEMAS.size - 1\n \n-      if (version >= 0 && version <= 3) {\n+      if (0 to maxVersion contains version) {\n         val generationId = value.get(GENERATION_KEY).asInstanceOf[Int]\n         val protocolType = value.get(PROTOCOL_TYPE_KEY).asInstanceOf[String]\n         val protocol = value.get(PROTOCOL_KEY).asInstanceOf[String]\n         val leaderId = value.get(LEADER_KEY).asInstanceOf[String]\n         val memberMetadataArray = value.getArray(MEMBERS_KEY)\n         val initialState = if (memberMetadataArray.isEmpty) Empty else Stable\n         val currentStateTimestamp: Option[Long] = version match {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd8787a3df279ebd5e802008700b1c41a65f60ec"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0NjU0OA==", "bodyText": "I'd keep the old code and simply change the second clause to use maxVersion.", "url": "https://github.com/apache/kafka/pull/9202#discussion_r475046548", "createdAt": "2020-08-22T04:54:16Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala", "diffHunk": "@@ -1401,16 +1401,17 @@ object GroupMetadataManager {\n       val version = buffer.getShort\n       val valueSchema = schemaForGroupValue(version)\n       val value = valueSchema.read(buffer)\n+      val maxVersion = GROUP_VALUE_SCHEMAS.size - 1\n \n-      if (version >= 0 && version <= 3) {\n+      if (0 to maxVersion contains version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd8787a3df279ebd5e802008700b1c41a65f60ec"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae5ae323f159afc9bb384252e45bef640531ea94", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/ae5ae323f159afc9bb384252e45bef640531ea94", "committedDate": "2020-08-24T05:33:27Z", "message": "KAFKA-10401: address reviewer's comment to refactor codes and add test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "ae5ae323f159afc9bb384252e45bef640531ea94", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/ae5ae323f159afc9bb384252e45bef640531ea94", "committedDate": "2020-08-24T05:33:27Z", "message": "KAFKA-10401: address reviewer's comment to refactor codes and add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "468505e65be60f0e3d2ce71ebe3af50966026289", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/468505e65be60f0e3d2ce71ebe3af50966026289", "committedDate": "2020-09-03T08:42:34Z", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KAFKA-10401"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MDYzMTUy", "url": "https://github.com/apache/kafka/pull/9202#pullrequestreview-485063152", "createdAt": "2020-09-09T14:23:00Z", "commit": {"oid": "468505e65be60f0e3d2ce71ebe3af50966026289"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoyMzowMVrOHPJ4bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoyODozMFrOHPKJUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1MjU5MQ==", "bodyText": "We should add a constant in GroupMetadataManager for this, maybe call it CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION for consistency with the other two similar fields.", "url": "https://github.com/apache/kafka/pull/9202#discussion_r485652591", "createdAt": "2020-09-09T14:23:01Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala", "diffHunk": "@@ -1401,24 +1401,20 @@ object GroupMetadataManager {\n       val version = buffer.getShort\n       val valueSchema = schemaForGroupValue(version)\n       val value = valueSchema.read(buffer)\n+      val maxVersion = GROUP_VALUE_SCHEMAS.size - 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "468505e65be60f0e3d2ce71ebe3af50966026289"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1MzAxOQ==", "bodyText": "Nit: un-supported -> unsupported.", "url": "https://github.com/apache/kafka/pull/9202#discussion_r485653019", "createdAt": "2020-09-09T14:23:35Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala", "diffHunk": "@@ -931,6 +932,42 @@ class GroupMetadataManagerTest {\n     assertTrue(group.has(memberId))\n   }\n \n+  @Test\n+  def testShouldThrowExceptionForUnsupportedGroupMetadataVersion(): Unit = {\n+    val generation = 1\n+    val protocol = \"range\"\n+    val memberId = \"memberId\"\n+    val unSupportedVersion = Short.MinValue\n+\n+    // put the un-supported version as the version value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "468505e65be60f0e3d2ce71ebe3af50966026289"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1MzE5MQ==", "bodyText": "Nit: unsupportedVersion.", "url": "https://github.com/apache/kafka/pull/9202#discussion_r485653191", "createdAt": "2020-09-09T14:23:48Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala", "diffHunk": "@@ -931,6 +932,42 @@ class GroupMetadataManagerTest {\n     assertTrue(group.has(memberId))\n   }\n \n+  @Test\n+  def testShouldThrowExceptionForUnsupportedGroupMetadataVersion(): Unit = {\n+    val generation = 1\n+    val protocol = \"range\"\n+    val memberId = \"memberId\"\n+    val unSupportedVersion = Short.MinValue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "468505e65be60f0e3d2ce71ebe3af50966026289"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1NTI0Mg==", "bodyText": "Nit: TS -> Timestamp for clarity. Also, Version -> Versions.", "url": "https://github.com/apache/kafka/pull/9202#discussion_r485655242", "createdAt": "2020-09-09T14:26:21Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala", "diffHunk": "@@ -931,6 +932,42 @@ class GroupMetadataManagerTest {\n     assertTrue(group.has(memberId))\n   }\n \n+  @Test\n+  def testShouldThrowExceptionForUnsupportedGroupMetadataVersion(): Unit = {\n+    val generation = 1\n+    val protocol = \"range\"\n+    val memberId = \"memberId\"\n+    val unSupportedVersion = Short.MinValue\n+\n+    // put the un-supported version as the version value\n+    val groupMetadataRecordValue = buildStableGroupRecordWithMember(generation, protocolType, protocol, memberId)\n+      .value().putShort(unSupportedVersion)\n+    // reset the position to the starting position 0 so that it can read the data in correct order\n+    groupMetadataRecordValue.position(0)\n+\n+    val e = assertThrows(classOf[KafkaException],\n+      () => GroupMetadataManager.readGroupMessageValue(groupId, groupMetadataRecordValue, time))\n+    assertEquals(s\"Unknown group metadata version ${unSupportedVersion}\", e.getMessage)\n+  }\n+\n+  @Test\n+  def testCurrentStateTSForAllGroupMetadataVersion(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "468505e65be60f0e3d2ce71ebe3af50966026289"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1NjI1OQ==", "bodyText": "This fails without the change, right?", "url": "https://github.com/apache/kafka/pull/9202#discussion_r485656259", "createdAt": "2020-09-09T14:27:41Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala", "diffHunk": "@@ -931,6 +932,42 @@ class GroupMetadataManagerTest {\n     assertTrue(group.has(memberId))\n   }\n \n+  @Test\n+  def testShouldThrowExceptionForUnsupportedGroupMetadataVersion(): Unit = {\n+    val generation = 1\n+    val protocol = \"range\"\n+    val memberId = \"memberId\"\n+    val unSupportedVersion = Short.MinValue\n+\n+    // put the un-supported version as the version value\n+    val groupMetadataRecordValue = buildStableGroupRecordWithMember(generation, protocolType, protocol, memberId)\n+      .value().putShort(unSupportedVersion)\n+    // reset the position to the starting position 0 so that it can read the data in correct order\n+    groupMetadataRecordValue.position(0)\n+\n+    val e = assertThrows(classOf[KafkaException],\n+      () => GroupMetadataManager.readGroupMessageValue(groupId, groupMetadataRecordValue, time))\n+    assertEquals(s\"Unknown group metadata version ${unSupportedVersion}\", e.getMessage)\n+  }\n+\n+  @Test\n+  def testCurrentStateTSForAllGroupMetadataVersion(): Unit = {\n+    val generation = 1\n+    val protocol = \"range\"\n+    val memberId = \"memberId\"\n+\n+    for (apiVersion <- ApiVersion.allVersions) {\n+      val groupMetadataRecord = buildStableGroupRecordWithMember(generation, protocolType, protocol, memberId, apiVersion = apiVersion)\n+\n+      val deserializedGroupMetadata = GroupMetadataManager.readGroupMessageValue(groupId, groupMetadataRecord.value(), time)\n+      // GROUP_METADATA_VALUE_SCHEMA_V2 or higher should correctly set the currentStateTimestamp\n+      if (apiVersion >= KAFKA_2_1_IV0)\n+        assertEquals(time.milliseconds(), deserializedGroupMetadata.currentStateTimestamp.get)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "468505e65be60f0e3d2ce71ebe3af50966026289"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1NjkxNQ==", "bodyText": "Is this test related to the change or a gap you identified? It's fine if it's the latter, just trying to understand.", "url": "https://github.com/apache/kafka/pull/9202#discussion_r485656915", "createdAt": "2020-09-09T14:28:30Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala", "diffHunk": "@@ -931,6 +932,42 @@ class GroupMetadataManagerTest {\n     assertTrue(group.has(memberId))\n   }\n \n+  @Test\n+  def testShouldThrowExceptionForUnsupportedGroupMetadataVersion(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "468505e65be60f0e3d2ce71ebe3af50966026289"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f01aaa643840c871d613c9e0af538b79519f2667", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/f01aaa643840c871d613c9e0af538b79519f2667", "committedDate": "2020-09-10T08:26:52Z", "message": "KAFKA-10401: address reviewer's comments to refactor the codes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNjE3MDQ1", "url": "https://github.com/apache/kafka/pull/9202#pullrequestreview-490617045", "createdAt": "2020-09-17T13:51:41Z", "commit": {"oid": "f01aaa643840c871d613c9e0af538b79519f2667"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzo1MTo0MVrOHTjRIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzo1MzoxM1rOHTjVnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI2MjgxNw==", "bodyText": "This would be more robust if we did something like:\nGROUP_VALUE_SCHEMAS.keySet.max\nOr something along those lines.", "url": "https://github.com/apache/kafka/pull/9202#discussion_r490262817", "createdAt": "2020-09-17T13:51:41Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala", "diffHunk": "@@ -1139,6 +1139,7 @@ object GroupMetadataManager {\n \n   private val CURRENT_OFFSET_KEY_SCHEMA = schemaForKey(CURRENT_OFFSET_KEY_SCHEMA_VERSION)\n   private val CURRENT_GROUP_KEY_SCHEMA = schemaForKey(CURRENT_GROUP_KEY_SCHEMA_VERSION)\n+  private val CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION = GROUP_VALUE_SCHEMAS.size - 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01aaa643840c871d613c9e0af538b79519f2667"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI2Mzk2NQ==", "bodyText": "I think it would be better to have the expected side be Some(time.milliseconds()), then you don't need the getOrElse on the actual side.", "url": "https://github.com/apache/kafka/pull/9202#discussion_r490263965", "createdAt": "2020-09-17T13:53:13Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala", "diffHunk": "@@ -931,6 +932,44 @@ class GroupMetadataManagerTest {\n     assertTrue(group.has(memberId))\n   }\n \n+  @Test\n+  def testShouldThrowExceptionForUnsupportedGroupMetadataVersion(): Unit = {\n+    val generation = 1\n+    val protocol = \"range\"\n+    val memberId = \"memberId\"\n+    val unsupportedVersion = Short.MinValue\n+\n+    // put the unsupported version as the version value\n+    val groupMetadataRecordValue = buildStableGroupRecordWithMember(generation, protocolType, protocol, memberId)\n+      .value().putShort(unsupportedVersion)\n+    // reset the position to the starting position 0 so that it can read the data in correct order\n+    groupMetadataRecordValue.position(0)\n+\n+    val e = assertThrows(classOf[KafkaException],\n+      () => GroupMetadataManager.readGroupMessageValue(groupId, groupMetadataRecordValue, time))\n+    assertEquals(s\"Unknown group metadata version ${unsupportedVersion}\", e.getMessage)\n+  }\n+\n+  @Test\n+  def testCurrentStateTimestampForAllGroupMetadataVersions(): Unit = {\n+    val generation = 1\n+    val protocol = \"range\"\n+    val memberId = \"memberId\"\n+\n+    for (apiVersion <- ApiVersion.allVersions) {\n+      val groupMetadataRecord = buildStableGroupRecordWithMember(generation, protocolType, protocol, memberId, apiVersion = apiVersion)\n+\n+      val deserializedGroupMetadata = GroupMetadataManager.readGroupMessageValue(groupId, groupMetadataRecord.value(), time)\n+      // GROUP_METADATA_VALUE_SCHEMA_V2 or higher should correctly set the currentStateTimestamp\n+      if (apiVersion >= KAFKA_2_1_IV0)\n+        assertEquals(s\"the apiVersion $apiVersion doesn't set the currentStateTimestamp correctly.\",\n+          time.milliseconds(), deserializedGroupMetadata.currentStateTimestamp.getOrElse(-1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01aaa643840c871d613c9e0af538b79519f2667"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97fe0a53d450d103e25dae0669c3ac803d7afe40", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/97fe0a53d450d103e25dae0669c3ac803d7afe40", "committedDate": "2020-09-17T14:15:28Z", "message": "KAFKA-10401: address reviewer's comment to use keySet.max to be more robust"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNjQ4NzIx", "url": "https://github.com/apache/kafka/pull/9202#pullrequestreview-490648721", "createdAt": "2020-09-17T14:21:34Z", "commit": {"oid": "97fe0a53d450d103e25dae0669c3ac803d7afe40"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85b0b7a459a4e6c9fb3c49a976b1c75062b12e3b", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/85b0b7a459a4e6c9fb3c49a976b1c75062b12e3b", "committedDate": "2020-09-18T01:16:14Z", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KAFKA-10401"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxODM3NjM5", "url": "https://github.com/apache/kafka/pull/9202#pullrequestreview-491837639", "createdAt": "2020-09-19T00:08:45Z", "commit": {"oid": "85b0b7a459a4e6c9fb3c49a976b1c75062b12e3b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMDowODo0NVrOHUe9-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMDowODo0NVrOHUe9-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0MDk1Mw==", "bodyText": "I wonder if the version check is necessary. Is the presence of the field enough?", "url": "https://github.com/apache/kafka/pull/9202#discussion_r491240953", "createdAt": "2020-09-19T00:08:45Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala", "diffHunk": "@@ -1402,23 +1403,18 @@ object GroupMetadataManager {\n       val valueSchema = schemaForGroupValue(version)\n       val value = valueSchema.read(buffer)\n \n-      if (version >= 0 && version <= 3) {\n+      if (version >= 0 && version <= CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION) {\n         val generationId = value.get(GENERATION_KEY).asInstanceOf[Int]\n         val protocolType = value.get(PROTOCOL_TYPE_KEY).asInstanceOf[String]\n         val protocol = value.get(PROTOCOL_KEY).asInstanceOf[String]\n         val leaderId = value.get(LEADER_KEY).asInstanceOf[String]\n         val memberMetadataArray = value.getArray(MEMBERS_KEY)\n         val initialState = if (memberMetadataArray.isEmpty) Empty else Stable\n-        val currentStateTimestamp: Option[Long] = version match {\n-          case version if version == 2 =>\n-            if (value.hasField(CURRENT_STATE_TIMESTAMP_KEY)) {\n-              val timestamp = value.getLong(CURRENT_STATE_TIMESTAMP_KEY)\n-              if (timestamp == -1) None else Some(timestamp)\n-            } else\n-              None\n-          case _ =>\n-            None\n-        }\n+        val currentStateTimestamp: Option[Long] =\n+          if (version >= 2 && value.hasField(CURRENT_STATE_TIMESTAMP_KEY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b0b7a459a4e6c9fb3c49a976b1c75062b12e3b"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODAwNTk3", "url": "https://github.com/apache/kafka/pull/9202#pullrequestreview-492800597", "createdAt": "2020-09-21T16:46:41Z", "commit": {"oid": "85b0b7a459a4e6c9fb3c49a976b1c75062b12e3b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 789, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}