{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5ODI4MzU1", "number": 9200, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoyMjoyMVrOEZv3BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOToxNzozN1rOEZ487A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDMzOTg4OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoyMjoyMVrOHCvd_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNTo0MjoxN1rOHC0vcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzNjkyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertFalse(exited.get());\n          \n          \n            \n                    assertFalse(exited.get());\n          \n          \n            \n                    Exit.resetExitProcedure();", "url": "https://github.com/apache/kafka/pull/9200#discussion_r472636924", "createdAt": "2020-08-19T03:22:21Z", "author": {"login": "rondagostino"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -185,10 +192,9 @@ public void close() {\n         deleteAllTopics(backup.kafka());\n         primary.stop();\n         backup.stop();\n+        assertFalse(exited.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4552afbef96c4b0c869e78c151f8b5f1578e74c4"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyMzMxMw==", "bodyText": "Ah, fancy GitHub stuff. I pushed up the fix independently.", "url": "https://github.com/apache/kafka/pull/9200#discussion_r472723313", "createdAt": "2020-08-19T05:42:17Z", "author": {"login": "lbradstreet"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -185,10 +192,9 @@ public void close() {\n         deleteAllTopics(backup.kafka());\n         primary.stop();\n         backup.stop();\n+        assertFalse(exited.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzNjkyNA=="}, "originalCommit": {"oid": "4552afbef96c4b0c869e78c151f8b5f1578e74c4"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDM0MTQ4OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/integration/kafka/tools/MirrorMakerIntegrationTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoyMjo0NFrOHCve-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNTo0MjoyNVrOHC0v1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzNzE3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertFalse(exited.get())\n          \n          \n            \n                assertFalse(exited.get())\n          \n          \n            \n                Exit.resetExitProcedure()", "url": "https://github.com/apache/kafka/pull/9200#discussion_r472637179", "createdAt": "2020-08-19T03:22:44Z", "author": {"login": "rondagostino"}, "path": "core/src/test/scala/integration/kafka/tools/MirrorMakerIntegrationTest.scala", "diffHunk": "@@ -29,14 +29,31 @@ import org.apache.kafka.clients.producer.{ProducerConfig, ProducerRecord}\n import org.apache.kafka.common.TopicPartition\n import org.apache.kafka.common.errors.TimeoutException\n import org.apache.kafka.common.serialization.{ByteArrayDeserializer, ByteArraySerializer}\n+import org.apache.kafka.common.utils.Exit\n+import org.junit.After\n import org.junit.Test\n import org.junit.Assert._\n+import org.junit.Before\n \n class MirrorMakerIntegrationTest extends KafkaServerTestHarness {\n \n   override def generateConfigs: Seq[KafkaConfig] =\n     TestUtils.createBrokerConfigs(1, zkConnect).map(KafkaConfig.fromProps(_, new Properties()))\n \n+  val exited = new AtomicBoolean(false)\n+\n+  @Before\n+  override def setUp(): Unit = {\n+    Exit.setExitProcedure((_, _) => exited.set(true))\n+    super.setUp()\n+  }\n+\n+  @After\n+  override def tearDown(): Unit = {\n+    super.tearDown()\n+    assertFalse(exited.get())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4552afbef96c4b0c869e78c151f8b5f1578e74c4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyMzQxNA==", "bodyText": "Done", "url": "https://github.com/apache/kafka/pull/9200#discussion_r472723414", "createdAt": "2020-08-19T05:42:25Z", "author": {"login": "lbradstreet"}, "path": "core/src/test/scala/integration/kafka/tools/MirrorMakerIntegrationTest.scala", "diffHunk": "@@ -29,14 +29,31 @@ import org.apache.kafka.clients.producer.{ProducerConfig, ProducerRecord}\n import org.apache.kafka.common.TopicPartition\n import org.apache.kafka.common.errors.TimeoutException\n import org.apache.kafka.common.serialization.{ByteArrayDeserializer, ByteArraySerializer}\n+import org.apache.kafka.common.utils.Exit\n+import org.junit.After\n import org.junit.Test\n import org.junit.Assert._\n+import org.junit.Before\n \n class MirrorMakerIntegrationTest extends KafkaServerTestHarness {\n \n   override def generateConfigs: Seq[KafkaConfig] =\n     TestUtils.createBrokerConfigs(1, zkConnect).map(KafkaConfig.fromProps(_, new Properties()))\n \n+  val exited = new AtomicBoolean(false)\n+\n+  @Before\n+  override def setUp(): Unit = {\n+    Exit.setExitProcedure((_, _) => exited.set(true))\n+    super.setUp()\n+  }\n+\n+  @After\n+  override def tearDown(): Unit = {\n+    super.tearDown()\n+    assertFalse(exited.get())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzNzE3OQ=="}, "originalCommit": {"oid": "4552afbef96c4b0c869e78c151f8b5f1578e74c4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTgyOTU2OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOToxNzozN1rOHC-qDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNToxOToyOFrOHDMYDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4NTc3NA==", "bodyText": "I am guessing we ran into an issue because of exit, so perhaps this reset ought to be in a finally block?", "url": "https://github.com/apache/kafka/pull/9200#discussion_r472885774", "createdAt": "2020-08-19T09:17:37Z", "author": {"login": "rajinisivaram"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -185,10 +192,10 @@ public void close() {\n         deleteAllTopics(backup.kafka());\n         primary.stop();\n         backup.stop();\n+        assertFalse(exited.get());\n+        Exit.resetExitProcedure();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88d1280f9434a1775098fe2e9c7182f240bebe8c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA3NTk0MA==", "bodyText": "@rajinisivaram good point. I'll fix that.", "url": "https://github.com/apache/kafka/pull/9200#discussion_r473075940", "createdAt": "2020-08-19T14:32:26Z", "author": {"login": "lbradstreet"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -185,10 +192,10 @@ public void close() {\n         deleteAllTopics(backup.kafka());\n         primary.stop();\n         backup.stop();\n+        assertFalse(exited.get());\n+        Exit.resetExitProcedure();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4NTc3NA=="}, "originalCommit": {"oid": "88d1280f9434a1775098fe2e9c7182f240bebe8c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzExMDU0Mw==", "bodyText": "I've pushed a fix. Thanks.", "url": "https://github.com/apache/kafka/pull/9200#discussion_r473110543", "createdAt": "2020-08-19T15:19:28Z", "author": {"login": "lbradstreet"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -185,10 +192,10 @@ public void close() {\n         deleteAllTopics(backup.kafka());\n         primary.stop();\n         backup.stop();\n+        assertFalse(exited.get());\n+        Exit.resetExitProcedure();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4NTc3NA=="}, "originalCommit": {"oid": "88d1280f9434a1775098fe2e9c7182f240bebe8c"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1935, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}