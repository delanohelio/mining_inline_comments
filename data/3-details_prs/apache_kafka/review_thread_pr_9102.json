{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4ODYyNTgy", "number": 9102, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNDozMjo1MVrOEUQYAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoxNTo0MlrOEVmJ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Njc1MjY1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNDozMjo1MVrOG6bd7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoyNzoxN1rOG6tieg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkyMDYyMg==", "bodyText": "s/originals/copyWithOverride?", "url": "https://github.com/apache/kafka/pull/9102#discussion_r463920622", "createdAt": "2020-08-01T04:32:51Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java", "diffHunk": "@@ -228,6 +228,13 @@ public Password getPassword(String key) {\n         return copy;\n     }\n \n+    public Map<String, Object> originals(Map<String, Object> configOverrides) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzMDQzMA==", "bodyText": "Will copy that", "url": "https://github.com/apache/kafka/pull/9102#discussion_r463930430", "createdAt": "2020-08-01T06:35:34Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java", "diffHunk": "@@ -228,6 +228,13 @@ public Password getPassword(String key) {\n         return copy;\n     }\n \n+    public Map<String, Object> originals(Map<String, Object> configOverrides) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkyMDYyMg=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxNjY5OA==", "bodyText": "I have updated the method name.", "url": "https://github.com/apache/kafka/pull/9102#discussion_r464216698", "createdAt": "2020-08-03T06:27:17Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java", "diffHunk": "@@ -228,6 +228,13 @@ public Password getPassword(String key) {\n         return copy;\n     }\n \n+    public Map<String, Object> originals(Map<String, Object> configOverrides) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkyMDYyMg=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgwNjg0OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoxNTo0MlrOG8cfbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMzo0ODo0N1rOHFCPpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNDU0MQ==", "bodyText": "This seems beyond the scope of this PR. Why do we also need to let deserializer see whether given consumer instance is auto commit enabled?", "url": "https://github.com/apache/kafka/pull/9102#discussion_r466034541", "createdAt": "2020-08-05T22:15:42Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "diffHunk": "@@ -2511,4 +2511,39 @@ public void testEnforceRebalanceTriggersRebalanceOnNextPoll() {\n \n         assertEquals(countingRebalanceListener.revokedCount, 1);\n     }\n+\n+    @Test\n+    public void deserializerShouldSeeGeneratedConfigs() {\n+        Properties props = new Properties();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, DeserializerForClientId.class.getName());\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, DeserializerForClientId.class.getName());\n+\n+        KafkaConsumer<byte[], byte[]> consumer = new KafkaConsumer<>(props);\n+\n+        assertEquals(2, DeserializerForClientId.CLIENT_IDS.size());\n+        assertEquals(DeserializerForClientId.CLIENT_IDS.get(0), consumer.getClientId());\n+        assertEquals(DeserializerForClientId.CLIENT_IDS.get(1), consumer.getClientId());\n+\n+        assertEquals(2, DeserializerForClientId.AUTO_COMMIT_FLAGS.size());\n+        assertEquals(DeserializerForClientId.AUTO_COMMIT_FLAGS.get(0), consumer.isAutoCommitEnabled());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MjAxNg==", "bodyText": "This flag is included by reason of this comment #9102 (comment)\nI\u2019m ok to revert it if it is overkill", "url": "https://github.com/apache/kafka/pull/9102#discussion_r466092016", "createdAt": "2020-08-06T01:26:41Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "diffHunk": "@@ -2511,4 +2511,39 @@ public void testEnforceRebalanceTriggersRebalanceOnNextPoll() {\n \n         assertEquals(countingRebalanceListener.revokedCount, 1);\n     }\n+\n+    @Test\n+    public void deserializerShouldSeeGeneratedConfigs() {\n+        Properties props = new Properties();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, DeserializerForClientId.class.getName());\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, DeserializerForClientId.class.getName());\n+\n+        KafkaConsumer<byte[], byte[]> consumer = new KafkaConsumer<>(props);\n+\n+        assertEquals(2, DeserializerForClientId.CLIENT_IDS.size());\n+        assertEquals(DeserializerForClientId.CLIENT_IDS.get(0), consumer.getClientId());\n+        assertEquals(DeserializerForClientId.CLIENT_IDS.get(1), consumer.getClientId());\n+\n+        assertEquals(2, DeserializerForClientId.AUTO_COMMIT_FLAGS.size());\n+        assertEquals(DeserializerForClientId.AUTO_COMMIT_FLAGS.get(0), consumer.isAutoCommitEnabled());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNDU0MQ=="}, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg5MjI0NQ==", "bodyText": "Sorry for the delay, I suggest we revert this part to properly scope this PR.", "url": "https://github.com/apache/kafka/pull/9102#discussion_r474892245", "createdAt": "2020-08-21T19:28:16Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "diffHunk": "@@ -2511,4 +2511,39 @@ public void testEnforceRebalanceTriggersRebalanceOnNextPoll() {\n \n         assertEquals(countingRebalanceListener.revokedCount, 1);\n     }\n+\n+    @Test\n+    public void deserializerShouldSeeGeneratedConfigs() {\n+        Properties props = new Properties();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, DeserializerForClientId.class.getName());\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, DeserializerForClientId.class.getName());\n+\n+        KafkaConsumer<byte[], byte[]> consumer = new KafkaConsumer<>(props);\n+\n+        assertEquals(2, DeserializerForClientId.CLIENT_IDS.size());\n+        assertEquals(DeserializerForClientId.CLIENT_IDS.get(0), consumer.getClientId());\n+        assertEquals(DeserializerForClientId.CLIENT_IDS.get(1), consumer.getClientId());\n+\n+        assertEquals(2, DeserializerForClientId.AUTO_COMMIT_FLAGS.size());\n+        assertEquals(DeserializerForClientId.AUTO_COMMIT_FLAGS.get(0), consumer.isAutoCommitEnabled());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNDU0MQ=="}, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0MTcwMA==", "bodyText": "@abbccdda thanks for suggestion. I have reverted it.", "url": "https://github.com/apache/kafka/pull/9102#discussion_r475041700", "createdAt": "2020-08-22T03:48:47Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "diffHunk": "@@ -2511,4 +2511,39 @@ public void testEnforceRebalanceTriggersRebalanceOnNextPoll() {\n \n         assertEquals(countingRebalanceListener.revokedCount, 1);\n     }\n+\n+    @Test\n+    public void deserializerShouldSeeGeneratedConfigs() {\n+        Properties props = new Properties();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, DeserializerForClientId.class.getName());\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, DeserializerForClientId.class.getName());\n+\n+        KafkaConsumer<byte[], byte[]> consumer = new KafkaConsumer<>(props);\n+\n+        assertEquals(2, DeserializerForClientId.CLIENT_IDS.size());\n+        assertEquals(DeserializerForClientId.CLIENT_IDS.get(0), consumer.getClientId());\n+        assertEquals(DeserializerForClientId.CLIENT_IDS.get(1), consumer.getClientId());\n+\n+        assertEquals(2, DeserializerForClientId.AUTO_COMMIT_FLAGS.size());\n+        assertEquals(DeserializerForClientId.AUTO_COMMIT_FLAGS.get(0), consumer.isAutoCommitEnabled());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNDU0MQ=="}, "originalCommit": null, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2056, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}