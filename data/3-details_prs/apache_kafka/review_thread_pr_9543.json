{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0Mzk1Mjk1", "number": 9543, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNToyNzo1NFrOE1RlOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODoxNzowOVrOE1V7sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Mjk4MDQxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNToyNzo1NFrOHtdO3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNToyNzo1NFrOHtdO3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQyNjkxMQ==", "bodyText": "I would prefer to use List instead of ArrayList to be more generic.", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517426911", "createdAt": "2020-11-04T15:27:54Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -145,7 +145,7 @@\n     private final String clientId;\n     private final Metrics metrics;\n     private final StreamsConfig config;\n-    protected final StreamThread[] threads;\n+    protected final ArrayList<StreamThread> threads;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5276beee632c2e1333b6f6402587ad80970b10d5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Mjk4Nzk4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNToyOTozMlrOHtdTiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNzozNjozNFrOHtitJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQyODEwNA==", "bodyText": "I think, it is better to keep the default initial capacity of an ArrayList. Otherwise, the first time a stream thread is added, we immediately run into a memory allocation. Since we do not know how many stream thread we might expect, let's use the default.\nWe could also consider using a LinkedList since we never access by index in production code.", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517428104", "createdAt": "2020-11-04T15:29:32Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -719,8 +718,7 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n         }\n \n         // create the stream thread, global update thread, and cleanup thread\n-        threads = new StreamThread[numStreamThreads];\n-\n+        threads = new ArrayList<>(numStreamThreads);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5276beee632c2e1333b6f6402587ad80970b10d5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUxNjU4MA==", "bodyText": "That is fair", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517516580", "createdAt": "2020-11-04T17:36:34Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -719,8 +718,7 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n         }\n \n         // create the stream thread, global update thread, and cleanup thread\n-        threads = new StreamThread[numStreamThreads];\n-\n+        threads = new ArrayList<>(numStreamThreads);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQyODEwNA=="}, "originalCommit": {"oid": "5276beee632c2e1333b6f6402587ad80970b10d5"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzAzMzUxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTozOToyMVrOHtdvoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTozOToyMVrOHtdvoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQzNTI5Nw==", "bodyText": "You can simplify to\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        threads.add(i, streamThread);\n          \n          \n            \n                        threadState.put(threads.get(i).getId(), threads.get(i).state());\n          \n          \n            \n                        storeProviders.add(new StreamThreadStateStoreProvider(threads.get(i)));\n          \n          \n            \n                        threads.add(streamThread);\n          \n          \n            \n                        threadState.put(streamThread.getId(), streamThread.state());\n          \n          \n            \n                        storeProviders.add(new StreamThreadStateStoreProvider(streamThread));", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517435297", "createdAt": "2020-11-04T15:39:21Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -783,12 +781,13 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 stateDirectory,\n                 delegatingStateRestoreListener,\n                 i + 1);\n-            threadState.put(threads[i].getId(), threads[i].state());\n-            storeProviders.add(new StreamThreadStateStoreProvider(threads[i]));\n+            threads.add(i, streamThread);\n+            threadState.put(threads.get(i).getId(), threads.get(i).state());\n+            storeProviders.add(new StreamThreadStateStoreProvider(threads.get(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5276beee632c2e1333b6f6402587ad80970b10d5"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzA2NDQ3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTo0NTo1N1rOHteDOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTo0NTo1N1rOHteDOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ0MDMxNQ==", "bodyText": "Please simplify to\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Math.toIntExact(Arrays.stream(threads.toArray(new StreamThread[numStreamThreads])).filter(thread -> thread.state().isAlive()).count()));\n          \n          \n            \n                        Math.toIntExact(threads.stream().filter(thread -> thread.state().isAlive()).count()));", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517440315", "createdAt": "2020-11-04T15:45:57Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -783,12 +781,13 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 stateDirectory,\n                 delegatingStateRestoreListener,\n                 i + 1);\n-            threadState.put(threads[i].getId(), threads[i].state());\n-            storeProviders.add(new StreamThreadStateStoreProvider(threads[i]));\n+            threads.add(i, streamThread);\n+            threadState.put(threads.get(i).getId(), threads.get(i).state());\n+            storeProviders.add(new StreamThreadStateStoreProvider(threads.get(i)));\n         }\n \n         ClientMetrics.addNumAliveStreamThreadMetric(streamsMetrics, (metricsConfig, now) ->\n-            Math.toIntExact(Arrays.stream(threads).filter(thread -> thread.state().isAlive()).count()));\n+            Math.toIntExact(Arrays.stream(threads.toArray(new StreamThread[numStreamThreads])).filter(thread -> thread.state().isAlive()).count()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5276beee632c2e1333b6f6402587ad80970b10d5"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzY4NDI1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODoxNDozNlrOHtkGaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MDowNVrOHuDtOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzOTQzMg==", "bodyText": "Should this collection be threadsafe? (or are all accesses inside synchronized blocks anyway?)", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517539432", "createdAt": "2020-11-04T18:14:36Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -719,8 +718,7 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n         }\n \n         // create the stream thread, global update thread, and cleanup thread\n-        threads = new StreamThread[numStreamThreads];\n-\n+        threads = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46066694bb07509f79f34db52797033bd6558168"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyOTk2MQ==", "bodyText": "They are not all in synchronized blocks so I think it probably should be thread safe", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517629961", "createdAt": "2020-11-04T21:03:42Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -719,8 +718,7 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n         }\n \n         // create the stream thread, global update thread, and cleanup thread\n-        threads = new StreamThread[numStreamThreads];\n-\n+        threads = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzOTQzMg=="}, "originalCommit": {"oid": "46066694bb07509f79f34db52797033bd6558168"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NzI3Mg==", "bodyText": "Currently only the constructor adds elements to the list. All other accesses afterwards are read-only. So, we would not need a synchronized list as far as I see. When we implement the add and remove streams thread APIs, we probably need synchronization. My proposal is to leave it a synchronized list now just in case we forget to think about it afterwards and then to reconsider how we synchronize the accesses.", "url": "https://github.com/apache/kafka/pull/9543#discussion_r518057272", "createdAt": "2020-11-05T13:40:05Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -719,8 +718,7 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n         }\n \n         // create the stream thread, global update thread, and cleanup thread\n-        threads = new StreamThread[numStreamThreads];\n-\n+        threads = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzOTQzMg=="}, "originalCommit": {"oid": "46066694bb07509f79f34db52797033bd6558168"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzY4ODI2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODoxNTo0N1rOHtkI6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMTowNDowNFrOHtpo8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MDA3NA==", "bodyText": "A bit of a nitpick, but this operation is O(n) for LinkedList. Better to just add(streamThread) if you want to use LinkedList.", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517540074", "createdAt": "2020-11-04T18:15:47Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -783,12 +781,13 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 stateDirectory,\n                 delegatingStateRestoreListener,\n                 i + 1);\n-            threadState.put(threads[i].getId(), threads[i].state());\n-            storeProviders.add(new StreamThreadStateStoreProvider(threads[i]));\n+            threads.add(i, streamThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46066694bb07509f79f34db52797033bd6558168"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMDE5NA==", "bodyText": "yep, should have changed that when I moved from ArrayList", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517630194", "createdAt": "2020-11-04T21:04:04Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -783,12 +781,13 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 stateDirectory,\n                 delegatingStateRestoreListener,\n                 i + 1);\n-            threadState.put(threads[i].getId(), threads[i].state());\n-            storeProviders.add(new StreamThreadStateStoreProvider(threads[i]));\n+            threads.add(i, streamThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MDA3NA=="}, "originalCommit": {"oid": "46066694bb07509f79f34db52797033bd6558168"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzY5MzMxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODoxNzowOVrOHtkMAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMTowNDoyMVrOHtppcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MDg2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        storeProviders.add(new StreamThreadStateStoreProvider(threads.get(i)));\n          \n          \n            \n                        storeProviders.add(new StreamThreadStateStoreProvider(streamThread));\n          \n      \n    \n    \n  \n\nget(i) is also O(n) for a linked list. Again, this is admittedly a nit, since the list is small.", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517540866", "createdAt": "2020-11-04T18:17:09Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -783,12 +781,13 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 stateDirectory,\n                 delegatingStateRestoreListener,\n                 i + 1);\n-            threadState.put(threads[i].getId(), threads[i].state());\n-            storeProviders.add(new StreamThreadStateStoreProvider(threads[i]));\n+            threads.add(i, streamThread);\n+            threadState.put(streamThread.getId(), streamThread.state());\n+            storeProviders.add(new StreamThreadStateStoreProvider(threads.get(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46066694bb07509f79f34db52797033bd6558168"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMDMyMA==", "bodyText": "Good catch", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517630320", "createdAt": "2020-11-04T21:04:21Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -783,12 +781,13 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 stateDirectory,\n                 delegatingStateRestoreListener,\n                 i + 1);\n-            threadState.put(threads[i].getId(), threads[i].state());\n-            storeProviders.add(new StreamThreadStateStoreProvider(threads[i]));\n+            threads.add(i, streamThread);\n+            threadState.put(streamThread.getId(), streamThread.state());\n+            storeProviders.add(new StreamThreadStateStoreProvider(threads.get(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MDg2Ng=="}, "originalCommit": {"oid": "46066694bb07509f79f34db52797033bd6558168"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3778, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}