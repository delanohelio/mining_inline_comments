{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NjM1Njkx", "number": 7996, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjo0NDo0MFrODZs0hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTozMjowMlrODdzfAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Mjc1MzM1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/KeyValueSegments.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjo0NDo0MFrOFgPJUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjo0NDo0MFrOFgPJUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0Njg5OQ==", "bodyText": "The metrics recorder is initialised for a segmented key-value store.", "url": "https://github.com/apache/kafka/pull/7996#discussion_r369346899", "createdAt": "2020-01-22T02:44:40Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/KeyValueSegments.java", "diffHunk": "@@ -51,4 +51,10 @@ public KeyValueSegment getOrCreateSegment(final long segmentId,\n             return newSegment;\n         }\n     }\n-}\n+\n+    @Override\n+    public void openExisting(final InternalProcessorContext context, final long streamTime) {\n+        metricsRecorder.init(context.metrics(), context.taskId());\n+        super.openExisting(context, streamTime);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e852b1c876e5b365f1a574b10ca730eb8141fbc4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Mjc1Mzg1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjo0NTowN1rOFgPJmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjo0NTowN1rOFgPJmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0Njk2OQ==", "bodyText": "The metrics recorder is initialised for a non-segmented key-value store.", "url": "https://github.com/apache/kafka/pull/7996#discussion_r369346969", "createdAt": "2020-01-22T02:45:07Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBStore.java", "diffHunk": "@@ -225,6 +225,7 @@ public void init(final ProcessorContext context,\n                      final StateStore root) {\n         // open the DB dir\n         internalProcessorContext = context;\n+        metricsRecorder.init((StreamsMetricsImpl) context.metrics(), context.taskId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e852b1c876e5b365f1a574b10ca730eb8141fbc4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Mjc1NDA3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/TimestampedSegments.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjo0NToyM1rOFgPJww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjo0NToyM1rOFgPJww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NzAxMQ==", "bodyText": "The metrics recorder is initialised for a segmented timestamped key-value store.", "url": "https://github.com/apache/kafka/pull/7996#discussion_r369347011", "createdAt": "2020-01-22T02:45:23Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/TimestampedSegments.java", "diffHunk": "@@ -51,4 +51,10 @@ public TimestampedSegment getOrCreateSegment(final long segmentId,\n             return newSegment;\n         }\n     }\n+\n+    @Override\n+    public void openExisting(final InternalProcessorContext context, final long streamTime) {\n+        metricsRecorder.init(context.metrics(), context.taskId());\n+        super.openExisting(context, streamTime);\n+    }\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e852b1c876e5b365f1a574b10ca730eb8141fbc4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Mjc1NDczOnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjo0NjowMlrOFgPKOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjo0NjowMlrOFgPKOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NzEyOA==", "bodyText": "This initialisation is moved to the init() method.", "url": "https://github.com/apache/kafka/pull/7996#discussion_r369347128", "createdAt": "2020-01-22T02:46:02Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java", "diffHunk": "@@ -71,20 +70,15 @@ public TaskId taskId() {\n         return taskId;\n     }\n \n+    public void init(final StreamsMetricsImpl streamsMetrics,\n+                     final TaskId taskId) {\n+        initSensors(streamsMetrics, taskId);\n+        this.taskId = taskId;\n+        this.streamsMetrics = streamsMetrics;\n+    }\n+\n     public void addStatistics(final String segmentName,\n-                              final Statistics statistics,\n-                              final StreamsMetricsImpl streamsMetrics,\n-                              final TaskId taskId) {\n-        if (!isInitialized) {\n-            initSensors(streamsMetrics, taskId);\n-            this.taskId = taskId;\n-            this.streamsMetrics = streamsMetrics;\n-            isInitialized = true;\n-        }\n-        if (this.taskId != taskId) {\n-            throw new IllegalStateException(\"Statistics of store \\\"\" + segmentName + \"\\\" for task \" + taskId\n-                + \" cannot be added to metrics recorder for task \" + this.taskId + \". This is a bug in Kafka Streams.\");\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e852b1c876e5b365f1a574b10ca730eb8141fbc4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Mjc1Njc4OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/MetricsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjo0NzoxMlrOFgPLcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjo0NzoxMlrOFgPLcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NzQ0Mg==", "bodyText": "I moved the integration test verifications for RocksDB metrics into a new integration test.", "url": "https://github.com/apache/kafka/pull/7996#discussion_r369347442", "createdAt": "2020-01-22T02:47:12Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/MetricsIntegrationTest.java", "diffHunk": "@@ -393,10 +392,6 @@ private void shouldAddMetricsOnAllLevels(final String builtInMetricsVersion) thr\n             IN_MEMORY_LRUCACHE_TAG_KEY,\n             builtInMetricsVersion\n         );\n-        checkRocksDBMetricsByTag(\n-            \"rocksdb-state-id\",\n-            RecordingLevel.valueOf(streamsConfiguration.getProperty(StreamsConfig.METRICS_RECORDING_LEVEL_CONFIG))\n-        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e852b1c876e5b365f1a574b10ca730eb8141fbc4"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTc4ODE4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTozMjowMlrOFmnidg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoxMzo0OFrOFoIZug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzODAwNg==", "bodyText": "nit: maybe add a comment that this function is idempotent?\nAlso is it ever possible that this function is triggered multi-times for different taskId / streamsMetrics objects? If not should we throw an IllegalStateException if the taskId / streamsMetrics are not null and are different from the passed in values.", "url": "https://github.com/apache/kafka/pull/7996#discussion_r376038006", "createdAt": "2020-02-06T19:32:02Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java", "diffHunk": "@@ -71,20 +70,15 @@ public TaskId taskId() {\n         return taskId;\n     }\n \n+    public void init(final StreamsMetricsImpl streamsMetrics,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b435ff6cb29251e66dadc2223e8ba9b2c96eb4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyNTAxOA==", "bodyText": "Good point! I added checks for the parameters.", "url": "https://github.com/apache/kafka/pull/7996#discussion_r377625018", "createdAt": "2020-02-11T13:13:48Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java", "diffHunk": "@@ -71,20 +70,15 @@ public TaskId taskId() {\n         return taskId;\n     }\n \n+    public void init(final StreamsMetricsImpl streamsMetrics,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzODAwNg=="}, "originalCommit": {"oid": "b5b435ff6cb29251e66dadc2223e8ba9b2c96eb4"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4414, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}