{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3OTM4MDg1", "number": 9374, "title": "MINOR: Fix NPE in KafkaAdminClient.describeUserScramCredentials", "bodyText": "This bug was detected as part of #9370. @rondagostino and I decided that this should be fixed right away and not until the other PR eventually gets merged (or not). I am not only properly handling null everywhere but also rewrote the function to be more readable (and more efficient, but I think this is not important here). I extended the existing test to go through all possible permutations of the users argument to make sure that we never get an NPE.", "createdAt": "2020-10-05T15:29:54Z", "url": "https://github.com/apache/kafka/pull/9374", "merged": true, "mergeCommit": {"oid": "25c10c8722bff22121f5d011f773e3af9b1b4fe0"}, "closed": true, "closedAt": "2020-10-26T16:22:05Z", "author": {"login": "Fleshgrinder"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPlhK2gH2gAyNDk3OTM4MDg1OjJkNzY5YmE4MDM2NWY2YWVkZWYzNWZlM2U1ODcyZDFhOTczODkzODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWW0HIAFqTUxNjk0NzcxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381", "author": {"user": {"login": "Fleshgrinder", "name": "Richard Fussenegger"}}, "url": "https://github.com/apache/kafka/commit/2d769ba80365f6aedef35fe3e5872d1a97389381", "committedDate": "2020-10-05T15:28:49Z", "message": "MINOR: Fix NPE in KafkaAdminClient.describeUserScramCredentials\n\nThis bug was detected as part of #9370 and @rondagostino and I decided that this should be fixed right away and not until the other PR eventually gets merged (or not). I am not only properly handling `null` everywhere but also rewrote the function to be more readable (and more efficient, but I think this is not important here). I extended the existing test to go through all possible permutations of the users argument to make sure that we never get an NPE."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTc2OTM4", "url": "https://github.com/apache/kafka/pull/9374#pullrequestreview-502176938", "createdAt": "2020-10-05T15:32:20Z", "commit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozMjoyMFrOHcihqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozMjoyMFrOHcihqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4Nzg0OA==", "bodyText": "users.stream() is the NPE source", "url": "https://github.com/apache/kafka/pull/9374#discussion_r499687848", "createdAt": "2020-10-05T15:32:20Z", "author": {"login": "Fleshgrinder"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -4166,10 +4167,22 @@ public DescribeUserScramCredentialsResult describeUserScramCredentials(List<Stri\n         Call call = new Call(\"describeUserScramCredentials\", calcDeadlineMs(now, options.timeoutMs()),\n                 new LeastLoadedNodeProvider()) {\n             @Override\n-            public DescribeUserScramCredentialsRequest.Builder createRequest(int timeoutMs) {\n-                return new DescribeUserScramCredentialsRequest.Builder(\n-                        new DescribeUserScramCredentialsRequestData().setUsers(users.stream().map(user ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjczNzkw", "url": "https://github.com/apache/kafka/pull/9374#pullrequestreview-502273790", "createdAt": "2020-10-05T17:33:03Z", "commit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NTAwNzA0", "url": "https://github.com/apache/kafka/pull/9374#pullrequestreview-516500704", "createdAt": "2020-10-26T06:49:27Z", "commit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNjo0OToyN1rOHoCiqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzowMzo1MFrOHoCzrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0NjczMA==", "bodyText": "nit: I suggest to continue using the stream api here. It keeps the code smaller.", "url": "https://github.com/apache/kafka/pull/9374#discussion_r511746730", "createdAt": "2020-10-26T06:49:27Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -4166,10 +4167,22 @@ public DescribeUserScramCredentialsResult describeUserScramCredentials(List<Stri\n         Call call = new Call(\"describeUserScramCredentials\", calcDeadlineMs(now, options.timeoutMs()),\n                 new LeastLoadedNodeProvider()) {\n             @Override\n-            public DescribeUserScramCredentialsRequest.Builder createRequest(int timeoutMs) {\n-                return new DescribeUserScramCredentialsRequest.Builder(\n-                        new DescribeUserScramCredentialsRequestData().setUsers(users.stream().map(user ->\n-                                new DescribeUserScramCredentialsRequestData.UserName().setName(user)).collect(Collectors.toList())));\n+            public DescribeUserScramCredentialsRequest.Builder createRequest(final int timeoutMs) {\n+                final DescribeUserScramCredentialsRequestData requestData = new DescribeUserScramCredentialsRequestData();\n+\n+                if (users != null && !users.isEmpty()) {\n+                    final List<UserName> userNames = new ArrayList<>(users.size());\n+\n+                    for (final String user : users) {\n+                        if (user != null) {\n+                            userNames.add(new UserName().setName(user));\n+                        }\n+                    }\n+\n+                    requestData.setUsers(userNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MTA4Nw==", "bodyText": "Would it make sense to extract these into separate unit tests? testDescribeUserScramCredentials could receive users as a argument such that we could reuse the code logic.", "url": "https://github.com/apache/kafka/pull/9374#discussion_r511751087", "createdAt": "2020-10-26T07:03:50Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -4505,50 +4505,57 @@ public void testDescribeUserScramCredentials() throws Exception {\n             user0CredentialInfo1.setIterations(user0Iterations1);\n \n             final String user1Name = \"user1\";\n-            ScramMechanism user1ScramMechanism = ScramMechanism.SCRAM_SHA_256;\n-            int user1Iterations = 4096;\n+            final ScramMechanism user1ScramMechanism = ScramMechanism.SCRAM_SHA_256;\n+            final int user1Iterations = 4096;\n \n             final CredentialInfo user1CredentialInfo = new CredentialInfo();\n             user1CredentialInfo.setMechanism(user1ScramMechanism.type());\n             user1CredentialInfo.setIterations(user1Iterations);\n \n-            DescribeUserScramCredentialsResponseData responseData = new DescribeUserScramCredentialsResponseData();\n+            final DescribeUserScramCredentialsResponseData responseData = new DescribeUserScramCredentialsResponseData();\n             responseData.setResults(Arrays.asList(\n                     new DescribeUserScramCredentialsResponseData.DescribeUserScramCredentialsResult()\n                             .setUser(user0Name)\n                             .setCredentialInfos(Arrays.asList(user0CredentialInfo0, user0CredentialInfo1)),\n                     new DescribeUserScramCredentialsResponseData.DescribeUserScramCredentialsResult()\n                             .setUser(user1Name)\n-                            .setCredentialInfos(Arrays.asList(user1CredentialInfo))));\n-\n-            env.kafkaClient().prepareResponse(new DescribeUserScramCredentialsResponse(responseData));\n-\n-            List<String> usersRequestedList = asList(user0Name, user1Name);\n-            Set<String> usersRequestedSet = usersRequestedList.stream().collect(Collectors.toSet());\n-            DescribeUserScramCredentialsResult result = env.adminClient().describeUserScramCredentials(usersRequestedList);\n-            Map<String, UserScramCredentialsDescription> descriptionResults = result.all().get();\n-            KafkaFuture<UserScramCredentialsDescription> user0DescriptionFuture = result.description(user0Name);\n-            KafkaFuture<UserScramCredentialsDescription> user1DescriptionFuture = result.description(user1Name);\n-            Set<String> usersDescribedFromUsersSet = result.users().get().stream().collect(Collectors.toSet());\n-            assertEquals(usersRequestedSet, usersDescribedFromUsersSet);\n-            Set<String> usersDescribedFromMapKeySet = descriptionResults.keySet();\n-            assertEquals(usersRequestedSet, usersDescribedFromMapKeySet);\n-\n-            UserScramCredentialsDescription userScramCredentialsDescription0 = descriptionResults.get(user0Name);\n-            assertEquals(user0Name, userScramCredentialsDescription0.name());\n-            assertEquals(2, userScramCredentialsDescription0.credentialInfos().size());\n-            assertEquals(user0ScramMechanism0, userScramCredentialsDescription0.credentialInfos().get(0).mechanism());\n-            assertEquals(user0Iterations0, userScramCredentialsDescription0.credentialInfos().get(0).iterations());\n-            assertEquals(user0ScramMechanism1, userScramCredentialsDescription0.credentialInfos().get(1).mechanism());\n-            assertEquals(user0Iterations1, userScramCredentialsDescription0.credentialInfos().get(1).iterations());\n-            assertEquals(userScramCredentialsDescription0, user0DescriptionFuture.get());\n-\n-            UserScramCredentialsDescription userScramCredentialsDescription1 = descriptionResults.get(user1Name);\n-            assertEquals(user1Name, userScramCredentialsDescription1.name());\n-            assertEquals(1, userScramCredentialsDescription1.credentialInfos().size());\n-            assertEquals(user1ScramMechanism, userScramCredentialsDescription1.credentialInfos().get(0).mechanism());\n-            assertEquals(user1Iterations, userScramCredentialsDescription1.credentialInfos().get(0).iterations());\n-            assertEquals(userScramCredentialsDescription1, user1DescriptionFuture.get());\n+                            .setCredentialInfos(singletonList(user1CredentialInfo))));\n+            final DescribeUserScramCredentialsResponse response = new DescribeUserScramCredentialsResponse(responseData);\n+\n+            final Set<String> usersRequestedSet = new HashSet<>();\n+            usersRequestedSet.add(user0Name);\n+            usersRequestedSet.add(user1Name);\n+\n+            for (final List<String> users : asList(null, new ArrayList<String>(), asList(user0Name, null, user1Name))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2OTQ3NzEz", "url": "https://github.com/apache/kafka/pull/9374#pullrequestreview-516947713", "createdAt": "2020-10-26T16:18:24Z", "commit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 435, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}