{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NjgwMjQw", "number": 8236, "title": "KAFKA-9670: Reduce allocations in Metadata Response preparation", "bodyText": "This PR removes  intermediate  conversions between MetadataResponse.TopicMetadata => MetadataResponseTopic and MetadataResponse.PartitionMetadata => MetadataResponsePartition objects.\nThere is 15-20% reduction in object allocations and 5-10% improvement in metadata request performance.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-03-06T07:46:38Z", "url": "https://github.com/apache/kafka/pull/8236", "merged": true, "mergeCommit": {"oid": "a0e14078202febbe4df726078a179d66e908fb32"}, "closed": true, "closedAt": "2020-03-16T16:30:48Z", "author": {"login": "omkreddy"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcK73fWABqjMxMDQ0MjUyODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOQsiagFqTM3NTM4MDQ1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMzk1NjIy", "url": "https://github.com/apache/kafka/pull/8236#pullrequestreview-370395622", "createdAt": "2020-03-06T15:13:53Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNToxMzo1M1rOFy8OOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNToxMzo1M1rOFy8OOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk1OTgwMw==", "bodyText": "Should we remove MetadataResponse.TopicMetadata altogether or does it add value?", "url": "https://github.com/apache/kafka/pull/8236#discussion_r388959803", "createdAt": "2020-03-06T15:13:53Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -150,11 +165,15 @@ class MetadataCache(brokerId: Int) extends Logging {\n   def getTopicMetadata(topics: Set[String],\n                        listenerName: ListenerName,\n                        errorUnavailableEndpoints: Boolean = false,\n-                       errorUnavailableListeners: Boolean = false): Seq[MetadataResponse.TopicMetadata] = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTE1ODUy", "url": "https://github.com/apache/kafka/pull/8236#pullrequestreview-373915852", "createdAt": "2020-03-12T21:29:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyOToxNVrOF1wDHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjozOTowMlrOF1ySRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNjA3Ng==", "bodyText": "nit: I'd suggest changing this to accept Errors so that we don't need all the annoying .code() calls.", "url": "https://github.com/apache/kafka/pull/8236#discussion_r391906076", "createdAt": "2020-03-12T21:29:15Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1000,24 +1002,30 @@ class KafkaApis(val requestChannel: RequestChannel,\n   private def createTopic(topic: String,\n                           numPartitions: Int,\n                           replicationFactor: Int,\n-                          properties: util.Properties = new util.Properties()): MetadataResponse.TopicMetadata = {\n+                          properties: util.Properties = new util.Properties()): MetadataResponseTopic = {\n     try {\n       adminZkClient.createTopic(topic, numPartitions, replicationFactor, properties, RackAwareMode.Safe)\n       info(\"Auto creation of topic %s with %d partitions and replication factor %d is successful\"\n         .format(topic, numPartitions, replicationFactor))\n-      new MetadataResponse.TopicMetadata(Errors.LEADER_NOT_AVAILABLE, topic, isInternal(topic),\n-        util.Collections.emptyList())\n+      metadataResponseTopic(Errors.LEADER_NOT_AVAILABLE.code(), topic, isInternal(topic), util.Collections.emptyList())\n     } catch {\n       case _: TopicExistsException => // let it go, possibly another broker created this topic\n-        new MetadataResponse.TopicMetadata(Errors.LEADER_NOT_AVAILABLE, topic, isInternal(topic),\n-          util.Collections.emptyList())\n+        metadataResponseTopic(Errors.LEADER_NOT_AVAILABLE.code(), topic, isInternal(topic), util.Collections.emptyList())\n       case ex: Throwable  => // Catch all to prevent unhandled errors\n-        new MetadataResponse.TopicMetadata(Errors.forException(ex), topic, isInternal(topic),\n-          util.Collections.emptyList())\n+        metadataResponseTopic(Errors.forException(ex).code(), topic, isInternal(topic), util.Collections.emptyList())\n     }\n   }\n \n-  private def createInternalTopic(topic: String): MetadataResponse.TopicMetadata = {\n+  private def metadataResponseTopic(errorCode: Short, topic: String, isInternal: Boolean,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0MjQ3NA==", "bodyText": "nit: for ra bunch of these accessors, we can drop parenthesis.", "url": "https://github.com/apache/kafka/pull/8236#discussion_r391942474", "createdAt": "2020-03-12T22:38:21Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1285,13 +1293,13 @@ class KafkaApis(val requestChannel: RequestChannel,\n                 .setPort(node.port)\n                 .setThrottleTimeMs(requestThrottleMs))\n         }\n-        val responseBody = if (topicMetadata.error != Errors.NONE) {\n+        val responseBody = if (topicMetadata.errorCode() != Errors.NONE.code()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0MjcyNA==", "bodyText": "nit: this looks misaligned", "url": "https://github.com/apache/kafka/pull/8236#discussion_r391942724", "createdAt": "2020-03-12T22:39:02Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -78,9 +80,9 @@ class MetadataCache(brokerId: Int) extends Logging {\n   // If errorUnavailableListeners=true, return LISTENER_NOT_FOUND if listener is missing on the broker.\n   // Otherwise, return LEADER_NOT_AVAILABLE for broker unavailable and missing listener (Metadata response v5 and below).\n   private def getPartitionMetadata(snapshot: MetadataSnapshot, topic: String, listenerName: ListenerName, errorUnavailableEndpoints: Boolean,\n-                                   errorUnavailableListeners: Boolean): Option[Iterable[MetadataResponse.PartitionMetadata]] = {\n+                                   errorUnavailableListeners: Boolean): Option[Iterable[MetadataResponsePartition]] = {\n     snapshot.partitionStates.get(topic).map { partitions =>\n-      partitions.map { case (partitionId, partitionState) =>\n+        partitions.map { case (partitionId, partitionState) =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0423531f81aa2a438c7da3edd9e4e8013e7a5da", "author": {"user": {"login": "lbradstreet", "name": "Lucas Bradstreet"}}, "url": "https://github.com/apache/kafka/commit/c0423531f81aa2a438c7da3edd9e4e8013e7a5da", "committedDate": "2020-03-13T06:42:21Z", "message": "Optimize metadata building"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "408f8160f202e3a19bf1d0f3d27879ddc0ec0e78", "author": {"user": {"login": "omkreddy", "name": "Manikumar Reddy"}}, "url": "https://github.com/apache/kafka/commit/408f8160f202e3a19bf1d0f3d27879ddc0ec0e78", "committedDate": "2020-03-13T06:42:21Z", "message": "Cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "745a99309bc7d0a4b949927b58f996286f075495", "author": {"user": {"login": "omkreddy", "name": "Manikumar Reddy"}}, "url": "https://github.com/apache/kafka/commit/745a99309bc7d0a4b949927b58f996286f075495", "committedDate": "2020-03-13T06:42:21Z", "message": "Add MetadataRequestBenchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a763daddaab1ec60cbdc3e603371199d506845b", "author": {"user": {"login": "omkreddy", "name": "Manikumar Reddy"}}, "url": "https://github.com/apache/kafka/commit/3a763daddaab1ec60cbdc3e603371199d506845b", "committedDate": "2020-03-13T06:42:21Z", "message": "Update MetadataResponse.prepareResponse()"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddd4825b6cd4da85a5724ecabb3585b066cd4b4f", "author": {"user": {"login": "omkreddy", "name": "Manikumar Reddy"}}, "url": "https://github.com/apache/kafka/commit/ddd4825b6cd4da85a5724ecabb3585b066cd4b4f", "committedDate": "2020-03-13T07:59:24Z", "message": "Address review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "ddd4825b6cd4da85a5724ecabb3585b066cd4b4f", "author": {"user": {"login": "omkreddy", "name": "Manikumar Reddy"}}, "url": "https://github.com/apache/kafka/commit/ddd4825b6cd4da85a5724ecabb3585b066cd4b4f", "committedDate": "2020-03-13T07:59:24Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MzgwNDU1", "url": "https://github.com/apache/kafka/pull/8236#pullrequestreview-375380455", "createdAt": "2020-03-16T16:28:09Z", "commit": {"oid": "ddd4825b6cd4da85a5724ecabb3585b066cd4b4f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 117, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}