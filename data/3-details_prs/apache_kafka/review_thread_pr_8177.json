{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTIzNzM5", "number": 8177, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo1MDoyMFrODkXNWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo1MDoyM1rODkXNbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDU1NTc5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo1MDoyMFrOFwpF9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowOTowNFrOFwvUGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0OTIzOA==", "bodyText": "nit: we might want log different message if we're ignoring due to a fatal state instead of due to a bumped epoch or ID.", "url": "https://github.com/apache/kafka/pull/8177#discussion_r386549238", "createdAt": "2020-03-02T17:50:20Z", "author": {"login": "bob-barrett"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -706,9 +706,9 @@ synchronized void handleFailedBatch(ProducerBatch batch, RuntimeException except\n         maybeTransitionToErrorState(exception);\n         removeInFlightBatch(batch);\n \n-        if (!matchesProducerIdAndEpoch(batch)) {\n+        if (!matchesProducerIdAndEpoch(batch) || hasFatalError()) {\n             log.debug(\"Ignoring failed batch {} with producer id {}, epoch {}, and sequence number {} \" +\n-                            \"since the producerId has been reset internally\", batch, batch.producerId(),\n+                            \"since the batch has been reset internally\", batch, batch.producerId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dad1a5278db7738fb5470874e040544e51bd592"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY1MTE2Mw==", "bodyText": "sg", "url": "https://github.com/apache/kafka/pull/8177#discussion_r386651163", "createdAt": "2020-03-02T21:09:04Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -706,9 +706,9 @@ synchronized void handleFailedBatch(ProducerBatch batch, RuntimeException except\n         maybeTransitionToErrorState(exception);\n         removeInFlightBatch(batch);\n \n-        if (!matchesProducerIdAndEpoch(batch)) {\n+        if (!matchesProducerIdAndEpoch(batch) || hasFatalError()) {\n             log.debug(\"Ignoring failed batch {} with producer id {}, epoch {}, and sequence number {} \" +\n-                            \"since the producerId has been reset internally\", batch, batch.producerId(),\n+                            \"since the batch has been reset internally\", batch, batch.producerId(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0OTIzOA=="}, "originalCommit": {"oid": "0dad1a5278db7738fb5470874e040544e51bd592"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDU1NTk5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo1MDoyM1rOFwpGFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo1MDoyM1rOFwpGFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0OTI3MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/kafka/pull/8177#discussion_r386549270", "createdAt": "2020-03-02T17:50:23Z", "author": {"login": "bob-barrett"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java", "diffHunk": "@@ -740,11 +740,7 @@ private void sendProduceRequest(long now, int destination, short acks, int timeo\n         }\n         ProduceRequest.Builder requestBuilder = ProduceRequest.Builder.forMagic(minUsedMagic, acks, timeout,\n                 produceRecordsByPartition, transactionalId);\n-        RequestCompletionHandler callback = new RequestCompletionHandler() {\n-            public void onComplete(ClientResponse response) {\n-                handleProduceResponse(response, recordsByPartition, time.milliseconds());\n-            }\n-        };\n+        RequestCompletionHandler callback = response -> handleProduceResponse(response, recordsByPartition, time.milliseconds());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dad1a5278db7738fb5470874e040544e51bd592"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4102, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}