{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NDYyMDM0", "number": 8273, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNTowNVrODm7VfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjoxNTo0MFrODnRXwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTQ0NjM3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNTowNVrOF0oFLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzo0OTowMFrOF1NDVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNjk1OQ==", "bodyText": "Even if this this public API, it's not a \"change\" but a bug fix, because when we call internalStreamsBuilder.addGlobalStore() we cast to StoreBuilder<KeyValue> store in the old code already.\nTying the type for the store, Consumed and ProcessorSupplier is also a bug fix, because if the types don't match, something breaks at runtime.\nAt least I think so -- let me know if I miss something. Fixing a public API this way is tricky...", "url": "https://github.com/apache/kafka/pull/8273#discussion_r390726959", "createdAt": "2020-03-11T03:25:05Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "diffHunk": "@@ -484,22 +484,23 @@ public synchronized StreamsBuilder addStateStore(final StoreBuilder builder) {\n     /**\n      * @deprecated use {@link #addGlobalStore(StoreBuilder, String, Consumed, ProcessorSupplier)} instead\n      */\n-    @SuppressWarnings(\"unchecked\")\n     @Deprecated\n-    public synchronized StreamsBuilder addGlobalStore(final StoreBuilder storeBuilder,\n-                                                      final String topic,\n-                                                      final String sourceName,\n-                                                      final Consumed consumed,\n-                                                      final String processorName,\n-                                                      final ProcessorSupplier stateUpdateSupplier) {\n+    public synchronized <K, V>  StreamsBuilder addGlobalStore(final StoreBuilder<KeyValueStore<K, V>> storeBuilder,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1NjM4MA==", "bodyText": "the super class StateStoreNode does NOT require the KeyValueStore type so is it necessary to add KeyValueStore type? Or a wildcard type is enough?", "url": "https://github.com/apache/kafka/pull/8273#discussion_r390756380", "createdAt": "2020-03-11T05:45:02Z", "author": {"login": "chia7712"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "diffHunk": "@@ -484,22 +484,23 @@ public synchronized StreamsBuilder addStateStore(final StoreBuilder builder) {\n     /**\n      * @deprecated use {@link #addGlobalStore(StoreBuilder, String, Consumed, ProcessorSupplier)} instead\n      */\n-    @SuppressWarnings(\"unchecked\")\n     @Deprecated\n-    public synchronized StreamsBuilder addGlobalStore(final StoreBuilder storeBuilder,\n-                                                      final String topic,\n-                                                      final String sourceName,\n-                                                      final Consumed consumed,\n-                                                      final String processorName,\n-                                                      final ProcessorSupplier stateUpdateSupplier) {\n+    public synchronized <K, V>  StreamsBuilder addGlobalStore(final StoreBuilder<KeyValueStore<K, V>> storeBuilder,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNjk1OQ=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI5ODc3Nw==", "bodyText": "Do we assume the stores added as global are always kv-stores? I vaguely remember for non-global source KTable we have this restriction (KIP-300) but not clear if we have the same restriction for global stores.", "url": "https://github.com/apache/kafka/pull/8273#discussion_r391298777", "createdAt": "2020-03-11T22:13:38Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "diffHunk": "@@ -484,22 +484,23 @@ public synchronized StreamsBuilder addStateStore(final StoreBuilder builder) {\n     /**\n      * @deprecated use {@link #addGlobalStore(StoreBuilder, String, Consumed, ProcessorSupplier)} instead\n      */\n-    @SuppressWarnings(\"unchecked\")\n     @Deprecated\n-    public synchronized StreamsBuilder addGlobalStore(final StoreBuilder storeBuilder,\n-                                                      final String topic,\n-                                                      final String sourceName,\n-                                                      final Consumed consumed,\n-                                                      final String processorName,\n-                                                      final ProcessorSupplier stateUpdateSupplier) {\n+    public synchronized <K, V>  StreamsBuilder addGlobalStore(final StoreBuilder<KeyValueStore<K, V>> storeBuilder,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNjk1OQ=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMjY5NQ==", "bodyText": "My assumption was that InternalStreamsBuilder.addGlobalStore() that we call below applies this limitation (cf. https://github.com/apache/kafka/pull/8273/files#r391330086).\nSeems this assumption was wrong. Will remove the store type.", "url": "https://github.com/apache/kafka/pull/8273#discussion_r391332695", "createdAt": "2020-03-11T23:49:00Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "diffHunk": "@@ -484,22 +484,23 @@ public synchronized StreamsBuilder addStateStore(final StoreBuilder builder) {\n     /**\n      * @deprecated use {@link #addGlobalStore(StoreBuilder, String, Consumed, ProcessorSupplier)} instead\n      */\n-    @SuppressWarnings(\"unchecked\")\n     @Deprecated\n-    public synchronized StreamsBuilder addGlobalStore(final StoreBuilder storeBuilder,\n-                                                      final String topic,\n-                                                      final String sourceName,\n-                                                      final Consumed consumed,\n-                                                      final String processorName,\n-                                                      final ProcessorSupplier stateUpdateSupplier) {\n+    public synchronized <K, V>  StreamsBuilder addGlobalStore(final StoreBuilder<KeyValueStore<K, V>> storeBuilder,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNjk1OQ=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTQ0NjU5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNToxN1rOF0oFUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjoxMzo0OVrOF1K_UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNjk5NQ==", "bodyText": "Ab above", "url": "https://github.com/apache/kafka/pull/8273#discussion_r390726995", "createdAt": "2020-03-11T03:25:17Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "diffHunk": "@@ -528,17 +529,18 @@ public synchronized StreamsBuilder addGlobalStore(final StoreBuilder storeBuilde\n      * @return itself\n      * @throws TopologyException if the processor of state is already registered\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public synchronized StreamsBuilder addGlobalStore(final StoreBuilder storeBuilder,\n-                                                      final String topic,\n-                                                      final Consumed consumed,\n-                                                      final ProcessorSupplier stateUpdateSupplier) {\n+    public synchronized <K, V> StreamsBuilder addGlobalStore(final StoreBuilder<KeyValueStore<K, V>> storeBuilder,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI5ODg5Nw==", "bodyText": "Ditto here.", "url": "https://github.com/apache/kafka/pull/8273#discussion_r391298897", "createdAt": "2020-03-11T22:13:49Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "diffHunk": "@@ -528,17 +529,18 @@ public synchronized StreamsBuilder addGlobalStore(final StoreBuilder storeBuilde\n      * @return itself\n      * @throws TopologyException if the processor of state is already registered\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public synchronized StreamsBuilder addGlobalStore(final StoreBuilder storeBuilder,\n-                                                      final String topic,\n-                                                      final Consumed consumed,\n-                                                      final ProcessorSupplier stateUpdateSupplier) {\n+    public synchronized <K, V> StreamsBuilder addGlobalStore(final StoreBuilder<KeyValueStore<K, V>> storeBuilder,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNjk5NQ=="}, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTQ0NzM2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/Topology.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNTo0MlrOF0oFwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNTo0MlrOF0oFwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNzEwNg==", "bodyText": "Same here", "url": "https://github.com/apache/kafka/pull/8273#discussion_r390727106", "createdAt": "2020-03-11T03:25:42Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/Topology.java", "diffHunk": "@@ -695,16 +696,23 @@ public synchronized Topology addStateStore(final StoreBuilder storeBuilder,\n      * @return itself\n      * @throws TopologyException if the processor of state is already registered\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public synchronized Topology addGlobalStore(final StoreBuilder storeBuilder,\n-                                                final String sourceName,\n-                                                final Deserializer keyDeserializer,\n-                                                final Deserializer valueDeserializer,\n-                                                final String topic,\n-                                                final String processorName,\n-                                                final ProcessorSupplier stateUpdateSupplier) {\n-        internalTopologyBuilder.addGlobalStore(storeBuilder, sourceName, null, keyDeserializer,\n-            valueDeserializer, topic, processorName, stateUpdateSupplier);\n+    public synchronized <K, V> Topology addGlobalStore(final StoreBuilder<KeyValueStore<K, V>> storeBuilder,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTQ0NzY1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/Topology.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNTo1MlrOF0oF7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNTo1MlrOF0oF7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNzE1MA==", "bodyText": "And one more :)", "url": "https://github.com/apache/kafka/pull/8273#discussion_r390727150", "createdAt": "2020-03-11T03:25:52Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/Topology.java", "diffHunk": "@@ -732,17 +740,24 @@ public synchronized Topology addGlobalStore(final StoreBuilder storeBuilder,\n      * @return itself\n      * @throws TopologyException if the processor of state is already registered\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public synchronized Topology addGlobalStore(final StoreBuilder storeBuilder,\n-                                                final String sourceName,\n-                                                final TimestampExtractor timestampExtractor,\n-                                                final Deserializer keyDeserializer,\n-                                                final Deserializer valueDeserializer,\n-                                                final String topic,\n-                                                final String processorName,\n-                                                final ProcessorSupplier stateUpdateSupplier) {\n-        internalTopologyBuilder.addGlobalStore(storeBuilder, sourceName, timestampExtractor, keyDeserializer,\n-            valueDeserializer, topic, processorName, stateUpdateSupplier);\n+    public synchronized <K, V> Topology addGlobalStore(final StoreBuilder<KeyValueStore<K, V>> storeBuilder,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTQ0ODk2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/SessionWindowedSerializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNjo0M1rOF0oGrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNjo0M1rOF0oGrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNzM0MQ==", "bodyText": "Not sure why we did Serde.class.cast here? Seem unnecessary to me?", "url": "https://github.com/apache/kafka/pull/8273#discussion_r390727341", "createdAt": "2020-03-11T03:26:43Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/SessionWindowedSerializer.java", "diffHunk": "@@ -50,7 +50,7 @@ public void configure(final Map<String, ?> configs, final boolean isKey) {\n             final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n             final String value = (String) configs.get(propertyName);\n             try {\n-                inner = Serde.class.cast(Utils.newInstance(value, Serde.class)).serializer();\n+                inner = (Utils.newInstance(value, Serde.class)).serializer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTQ1MjQ4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyOToyNlrOF0oI7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMzozOFrOF1vODA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNzkxNw==", "bodyText": "The change in the public API has this annoying side effect that the type of the lambda cannot inferred any longer (not sure why...) -- however, this might be reason enough to not change the public API as I did above.\nLet me know what you think (I though I just to the PR anyway to get a discussion going).", "url": "https://github.com/apache/kafka/pull/8273#discussion_r390727917", "createdAt": "2020-03-11T03:29:26Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -848,7 +849,7 @@ public void statelessTopologyShouldNotCreateStateDirectory() throws Exception {\n         final String outputTopic = testName.getMethodName() + \"-output\";\n         final Topology topology = new Topology();\n         topology.addSource(\"source\", Serdes.String().deserializer(), Serdes.String().deserializer(), inputTopic)\n-                .addProcessor(\"process\", () -> new AbstractProcessor<String, String>() {\n+                .addProcessor(\"process\", (ProcessorSupplier<String, String>) () -> new AbstractProcessor<String, String>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5MjQ5Mg==", "bodyText": "I think it was never inferred before, it was actually the type ProcessorSupplier<Object, Object> (just my theory).\nI think if old code will fail to compile, we should not change the public API. Note, the existing methods would be deprecated as part of implementing KIP-478 anyway, so maybe we should just leave the public APIs alone.", "url": "https://github.com/apache/kafka/pull/8273#discussion_r391892492", "createdAt": "2020-03-12T21:03:38Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -848,7 +849,7 @@ public void statelessTopologyShouldNotCreateStateDirectory() throws Exception {\n         final String outputTopic = testName.getMethodName() + \"-output\";\n         final Topology topology = new Topology();\n         topology.addSource(\"source\", Serdes.String().deserializer(), Serdes.String().deserializer(), inputTopic)\n-                .addProcessor(\"process\", () -> new AbstractProcessor<String, String>() {\n+                .addProcessor(\"process\", (ProcessorSupplier<String, String>) () -> new AbstractProcessor<String, String>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNzkxNw=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTQ1MzU1OnYy", "diffSide": "RIGHT", "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/StreamsBuilder.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzozMDoyMlrOF0oJow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzozMDoyMlrOF0oJow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyODA5OQ==", "bodyText": "As I don't speak Scala, I am not sure if this change is correct -- it compiles so I was happy :)", "url": "https://github.com/apache/kafka/pull/8273#discussion_r390728099", "createdAt": "2020-03-11T03:30:22Z", "author": {"login": "mjsax"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/StreamsBuilder.scala", "diffHunk": "@@ -176,10 +176,10 @@ class StreamsBuilder(inner: StreamsBuilderJ = new StreamsBuilderJ) {\n    *\n    * @see `org.apache.kafka.streams.StreamsBuilder#addGlobalStore`\n    */\n-  def addGlobalStore(storeBuilder: StoreBuilder[_ <: StateStore],\n-                     topic: String,\n-                     consumed: Consumed[_, _],\n-                     stateUpdateSupplier: ProcessorSupplier[_, _]): StreamsBuilderJ =\n+  def addGlobalStore[K, V](storeBuilder: StoreBuilder[KeyValueStore[K, V]],", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTYyNjMyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/GlobalStoreNode.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNTozOToyMVrOF0pzHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoyNTozOVrOF1qRXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1NTEwMA==", "bodyText": "Could we replace raw type by wildcard type for StateStoreNode? After all, the raw type is strongly discouraged...", "url": "https://github.com/apache/kafka/pull/8273#discussion_r390755100", "createdAt": "2020-03-11T05:39:21Z", "author": {"login": "chia7712"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/GlobalStoreNode.java", "diffHunk": "@@ -23,22 +23,22 @@\n import org.apache.kafka.streams.state.KeyValueStore;\n import org.apache.kafka.streams.state.StoreBuilder;\n \n-public class GlobalStoreNode extends StateStoreNode {\n+public class GlobalStoreNode<K, V> extends StateStoreNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMDcwMg==", "bodyText": "Not sure what you mean? The old code uses \"raw types\" and we just add proper generic typing to get type safety for GlobalStoreNode class.", "url": "https://github.com/apache/kafka/pull/8273#discussion_r391330702", "createdAt": "2020-03-11T23:42:20Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/GlobalStoreNode.java", "diffHunk": "@@ -23,22 +23,22 @@\n import org.apache.kafka.streams.state.KeyValueStore;\n import org.apache.kafka.streams.state.StoreBuilder;\n \n-public class GlobalStoreNode extends StateStoreNode {\n+public class GlobalStoreNode<K, V> extends StateStoreNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1NTEwMA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMjA4Nw==", "bodyText": "The old code uses \"raw types\"\n\nStateStoreNode uses \"raw types\", right? Why not replacing it by wildcard as \"raw types\" is discouraged. Further, the generic type of StoreBuilder doesn't seem to be useful. For example, StoreBuilder#build is called by following code.\n        for (final StoreBuilder<?> storeBuilder : globalStateBuilders.values()) {\n            globalStateStores.put(storeBuilder.name(), storeBuilder.build());\n        }\n        public StateStore build() {\n            return builder.build();\n        }\nBoth of they don't take the generic type.\nAlso, StreamsBuilder doesn't even use the generic type of StoreBuilder. Not sure what purpose for generic type of StoreBuilder?", "url": "https://github.com/apache/kafka/pull/8273#discussion_r391402087", "createdAt": "2020-03-12T05:00:11Z", "author": {"login": "chia7712"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/GlobalStoreNode.java", "diffHunk": "@@ -23,22 +23,22 @@\n import org.apache.kafka.streams.state.KeyValueStore;\n import org.apache.kafka.streams.state.StoreBuilder;\n \n-public class GlobalStoreNode extends StateStoreNode {\n+public class GlobalStoreNode<K, V> extends StateStoreNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1NTEwMA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMTQyMw==", "bodyText": "Ack. We can improve this further.\nNote, this PR does not fix everything yet -- it's better to do it incrementally to keep PRs small -- I will include a fix for this comment in this PR though.", "url": "https://github.com/apache/kafka/pull/8273#discussion_r391811423", "createdAt": "2020-03-12T18:25:39Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/GlobalStoreNode.java", "diffHunk": "@@ -23,22 +23,22 @@\n import org.apache.kafka.streams.state.KeyValueStore;\n import org.apache.kafka.streams.state.StoreBuilder;\n \n-public class GlobalStoreNode extends StateStoreNode {\n+public class GlobalStoreNode<K, V> extends StateStoreNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1NTEwMA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTA1NjY1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjoxNTo0MFrOF1LEjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzo0MDozNFrOF1M5Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwMDIzNw==", "bodyText": "Ditto here: are we always restricting to a kv-store.", "url": "https://github.com/apache/kafka/pull/8273#discussion_r391300237", "createdAt": "2020-03-11T22:15:40Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "diffHunk": "@@ -197,31 +197,33 @@ public String newStoreName(final String prefix) {\n         return prefix + String.format(KTableImpl.STATE_STORE_NAME + \"%010d\", index.getAndIncrement());\n     }\n \n-    public synchronized void addStateStore(final StoreBuilder builder) {\n+    public synchronized void addStateStore(final StoreBuilder<?> builder) {\n         addGraphNode(root, new StateStoreNode(builder));\n     }\n \n-    public synchronized void addGlobalStore(final StoreBuilder<KeyValueStore> storeBuilder,\n-                                            final String sourceName,\n-                                            final String topic,\n-                                            final ConsumedInternal consumed,\n-                                            final String processorName,\n-                                            final ProcessorSupplier stateUpdateSupplier) {\n-\n-        final StreamsGraphNode globalStoreNode = new GlobalStoreNode(storeBuilder,\n-                                                                     sourceName,\n-                                                                     topic,\n-                                                                     consumed,\n-                                                                     processorName,\n-                                                                     stateUpdateSupplier);\n+    public synchronized <K, V> void addGlobalStore(final StoreBuilder<KeyValueStore<K, V>> storeBuilder,\n+                                                   final String sourceName,\n+                                                   final String topic,\n+                                                   final ConsumedInternal<K, V> consumed,\n+                                                   final String processorName,\n+                                                   final ProcessorSupplier<K, V> stateUpdateSupplier) {\n+\n+        final StreamsGraphNode globalStoreNode = new GlobalStoreNode<>(\n+                storeBuilder,\n+                sourceName,\n+                topic,\n+                consumed,\n+                processorName,\n+                stateUpdateSupplier\n+        );\n \n         addGraphNode(root, globalStoreNode);\n     }\n \n-    public synchronized void addGlobalStore(final StoreBuilder<KeyValueStore> storeBuilder,\n-                                            final String topic,\n-                                            final ConsumedInternal consumed,\n-                                            final ProcessorSupplier stateUpdateSupplier) {\n+    public synchronized <K, V> void addGlobalStore(final StoreBuilder<KeyValueStore<K, V>> storeBuilder,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMDA4Ng==", "bodyText": "Not that the restriction is applied in the existing code already! (old L221 above). This old code was the reason why I started to add the type at other places, too.\nHowever, I just did a quick check and the specified type from above does actually not result in a class cast exception, ie, the compiler does not insert a cast and we can also have global WindowStores (for example). Hence, I am going to remove the store type to not break compatibility.", "url": "https://github.com/apache/kafka/pull/8273#discussion_r391330086", "createdAt": "2020-03-11T23:40:34Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "diffHunk": "@@ -197,31 +197,33 @@ public String newStoreName(final String prefix) {\n         return prefix + String.format(KTableImpl.STATE_STORE_NAME + \"%010d\", index.getAndIncrement());\n     }\n \n-    public synchronized void addStateStore(final StoreBuilder builder) {\n+    public synchronized void addStateStore(final StoreBuilder<?> builder) {\n         addGraphNode(root, new StateStoreNode(builder));\n     }\n \n-    public synchronized void addGlobalStore(final StoreBuilder<KeyValueStore> storeBuilder,\n-                                            final String sourceName,\n-                                            final String topic,\n-                                            final ConsumedInternal consumed,\n-                                            final String processorName,\n-                                            final ProcessorSupplier stateUpdateSupplier) {\n-\n-        final StreamsGraphNode globalStoreNode = new GlobalStoreNode(storeBuilder,\n-                                                                     sourceName,\n-                                                                     topic,\n-                                                                     consumed,\n-                                                                     processorName,\n-                                                                     stateUpdateSupplier);\n+    public synchronized <K, V> void addGlobalStore(final StoreBuilder<KeyValueStore<K, V>> storeBuilder,\n+                                                   final String sourceName,\n+                                                   final String topic,\n+                                                   final ConsumedInternal<K, V> consumed,\n+                                                   final String processorName,\n+                                                   final ProcessorSupplier<K, V> stateUpdateSupplier) {\n+\n+        final StreamsGraphNode globalStoreNode = new GlobalStoreNode<>(\n+                storeBuilder,\n+                sourceName,\n+                topic,\n+                consumed,\n+                processorName,\n+                stateUpdateSupplier\n+        );\n \n         addGraphNode(root, globalStoreNode);\n     }\n \n-    public synchronized void addGlobalStore(final StoreBuilder<KeyValueStore> storeBuilder,\n-                                            final String topic,\n-                                            final ConsumedInternal consumed,\n-                                            final ProcessorSupplier stateUpdateSupplier) {\n+    public synchronized <K, V> void addGlobalStore(final StoreBuilder<KeyValueStore<K, V>> storeBuilder,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwMDIzNw=="}, "originalCommit": null, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3313, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}