{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MjQ5MDE2", "number": 9294, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1ODo1M1rOEko8iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1OTozM1rOEko9fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODU1MDUxOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/ClientUtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1ODo1M1rOHTsskw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODoxNTowNlrOHTva7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNzI5OQ==", "bodyText": "Comment here and below refer to 2 IP addresses still.", "url": "https://github.com/apache/kafka/pull/9294#discussion_r490417299", "createdAt": "2020-09-17T16:58:53Z", "author": {"login": "mumrah"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClientUtilsTest.java", "diffHunk": "@@ -102,20 +102,20 @@ public void testResolveUnknownHostException() throws UnknownHostException {\n \n     @Test\n     public void testResolveDnsLookup() throws UnknownHostException {\n-        // Note that kafka.apache.org resolves to 2 IP addresses\n+        // Note that kafka.apache.org resolves to at least 2 IP addresses", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac97f2b37836493aa398d15f0be72ed1f244bbbc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ2MTkzMw==", "bodyText": "Are you saying to change it back? I thought it was fair to say \"at least 2\" to reflect we are asserting greater than 1.", "url": "https://github.com/apache/kafka/pull/9294#discussion_r490461933", "createdAt": "2020-09-17T18:15:06Z", "author": {"login": "jolshan"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClientUtilsTest.java", "diffHunk": "@@ -102,20 +102,20 @@ public void testResolveUnknownHostException() throws UnknownHostException {\n \n     @Test\n     public void testResolveDnsLookup() throws UnknownHostException {\n-        // Note that kafka.apache.org resolves to 2 IP addresses\n+        // Note that kafka.apache.org resolves to at least 2 IP addresses", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNzI5OQ=="}, "originalCommit": {"oid": "ac97f2b37836493aa398d15f0be72ed1f244bbbc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODU1Mjk0OnYy", "diffSide": "LEFT", "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1OTozM1rOHTsuFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTo0NjoyOFrOHUSiZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNzY4NQ==", "bodyText": "Hmm, so previously (and also with this change) we are assuming that we will get different resolved IPs for each connection to apache.kafka.org? This seems to rely on round-robbin DNS resolution that we can't really control. I think these assertions will always be prone to failure unless we can control the DNS server like @dajac suggested.\nI guess we can commit this to unblock the tests, but we should definitely prioritize a better fix.", "url": "https://github.com/apache/kafka/pull/9294#discussion_r490417685", "createdAt": "2020-09-17T16:59:33Z", "author": {"login": "mumrah"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -273,22 +273,21 @@ public void testMultipleIPsWithDefault() throws UnknownHostException {\n \n     @Test\n     public void testMultipleIPsWithUseAll() throws UnknownHostException {\n-        assertEquals(2, ClientUtils.resolve(hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS).size());\n+        assertTrue(ClientUtils.resolve(hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS).size() > 1);\n \n         connectionStates.connecting(nodeId1, time.milliseconds(), hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS);\n         InetAddress addr1 = connectionStates.currentAddress(nodeId1);\n         connectionStates.connecting(nodeId1, time.milliseconds(), hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS);\n         InetAddress addr2 = connectionStates.currentAddress(nodeId1);\n         assertNotSame(addr1, addr2);\n-\n         connectionStates.connecting(nodeId1, time.milliseconds(), hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS);\n         InetAddress addr3 = connectionStates.currentAddress(nodeId1);\n-        assertSame(addr1, addr3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac97f2b37836493aa398d15f0be72ed1f244bbbc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyMzg2MA==", "bodyText": "Yeah. I was wondering if we should even keep this test in the current form, and I'm hoping that a DNS we can control would resolve this issue.", "url": "https://github.com/apache/kafka/pull/9294#discussion_r490423860", "createdAt": "2020-09-17T17:09:58Z", "author": {"login": "jolshan"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -273,22 +273,21 @@ public void testMultipleIPsWithDefault() throws UnknownHostException {\n \n     @Test\n     public void testMultipleIPsWithUseAll() throws UnknownHostException {\n-        assertEquals(2, ClientUtils.resolve(hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS).size());\n+        assertTrue(ClientUtils.resolve(hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS).size() > 1);\n \n         connectionStates.connecting(nodeId1, time.milliseconds(), hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS);\n         InetAddress addr1 = connectionStates.currentAddress(nodeId1);\n         connectionStates.connecting(nodeId1, time.milliseconds(), hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS);\n         InetAddress addr2 = connectionStates.currentAddress(nodeId1);\n         assertNotSame(addr1, addr2);\n-\n         connectionStates.connecting(nodeId1, time.milliseconds(), hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS);\n         InetAddress addr3 = connectionStates.currentAddress(nodeId1);\n-        assertSame(addr1, addr3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNzY4NQ=="}, "originalCommit": {"oid": "ac97f2b37836493aa398d15f0be72ed1f244bbbc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5OTUxNw==", "bodyText": "The test is verifying the round robin that our code does, not the DNS server. We should ensure we still have that coverage in the meantime.", "url": "https://github.com/apache/kafka/pull/9294#discussion_r490699517", "createdAt": "2020-09-18T04:46:45Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -273,22 +273,21 @@ public void testMultipleIPsWithDefault() throws UnknownHostException {\n \n     @Test\n     public void testMultipleIPsWithUseAll() throws UnknownHostException {\n-        assertEquals(2, ClientUtils.resolve(hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS).size());\n+        assertTrue(ClientUtils.resolve(hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS).size() > 1);\n \n         connectionStates.connecting(nodeId1, time.milliseconds(), hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS);\n         InetAddress addr1 = connectionStates.currentAddress(nodeId1);\n         connectionStates.connecting(nodeId1, time.milliseconds(), hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS);\n         InetAddress addr2 = connectionStates.currentAddress(nodeId1);\n         assertNotSame(addr1, addr2);\n-\n         connectionStates.connecting(nodeId1, time.milliseconds(), hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS);\n         InetAddress addr3 = connectionStates.currentAddress(nodeId1);\n-        assertSame(addr1, addr3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNzY4NQ=="}, "originalCommit": {"oid": "ac97f2b37836493aa398d15f0be72ed1f244bbbc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg2MTcxMw==", "bodyText": "Thanks for clarifying, @ijuma. Seems like we could verify the round-robin behavior without relying on specific number of IPs.", "url": "https://github.com/apache/kafka/pull/9294#discussion_r490861713", "createdAt": "2020-09-18T10:45:57Z", "author": {"login": "mumrah"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -273,22 +273,21 @@ public void testMultipleIPsWithDefault() throws UnknownHostException {\n \n     @Test\n     public void testMultipleIPsWithUseAll() throws UnknownHostException {\n-        assertEquals(2, ClientUtils.resolve(hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS).size());\n+        assertTrue(ClientUtils.resolve(hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS).size() > 1);\n \n         connectionStates.connecting(nodeId1, time.milliseconds(), hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS);\n         InetAddress addr1 = connectionStates.currentAddress(nodeId1);\n         connectionStates.connecting(nodeId1, time.milliseconds(), hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS);\n         InetAddress addr2 = connectionStates.currentAddress(nodeId1);\n         assertNotSame(addr1, addr2);\n-\n         connectionStates.connecting(nodeId1, time.milliseconds(), hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS);\n         InetAddress addr3 = connectionStates.currentAddress(nodeId1);\n-        assertSame(addr1, addr3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNzY4NQ=="}, "originalCommit": {"oid": "ac97f2b37836493aa398d15f0be72ed1f244bbbc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzNzI4NQ==", "bodyText": "I see. I changed it to show that the first three are different but I didn't include the check that it loops back to the first IP since that part seems the most fragile.", "url": "https://github.com/apache/kafka/pull/9294#discussion_r491037285", "createdAt": "2020-09-18T15:46:28Z", "author": {"login": "jolshan"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -273,22 +273,21 @@ public void testMultipleIPsWithDefault() throws UnknownHostException {\n \n     @Test\n     public void testMultipleIPsWithUseAll() throws UnknownHostException {\n-        assertEquals(2, ClientUtils.resolve(hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS).size());\n+        assertTrue(ClientUtils.resolve(hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS).size() > 1);\n \n         connectionStates.connecting(nodeId1, time.milliseconds(), hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS);\n         InetAddress addr1 = connectionStates.currentAddress(nodeId1);\n         connectionStates.connecting(nodeId1, time.milliseconds(), hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS);\n         InetAddress addr2 = connectionStates.currentAddress(nodeId1);\n         assertNotSame(addr1, addr2);\n-\n         connectionStates.connecting(nodeId1, time.milliseconds(), hostTwoIps, ClientDnsLookup.USE_ALL_DNS_IPS);\n         InetAddress addr3 = connectionStates.currentAddress(nodeId1);\n-        assertSame(addr1, addr3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNzY4NQ=="}, "originalCommit": {"oid": "ac97f2b37836493aa398d15f0be72ed1f244bbbc"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1833, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}